{"nodes":[{"pos":[32,82],"content":"X++ Reflection run-time functions | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ Reflection run-time functions | Microsoft Docs","pos":[0,50]}]},{"pos":[96,150],"content":"This wiki describes the reflection run-time functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"This wiki describes the reflection run-time functions.","pos":[0,54]}]},{"pos":[564,597],"content":"X++ Reflection run-time functions","linkify":"X++ Reflection run-time functions","nodes":[{"content":"X++ Reflection run-time functions","pos":[0,33]}]},{"pos":[599,609],"content":"classIdGet","linkify":"classIdGet","nodes":[{"content":"classIdGet","pos":[0,10]}]},{"content":"Retrieves the numeric identifier (the class ID) of the class that the object that is initialized belongs to.","pos":[622,730]},{"pos":[770,780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[784,793]},{"content":"Description","pos":[796,807]},{"content":"object","pos":[888,894]},{"content":"The object to get the class ID for.","pos":[900,935]},{"pos":[943,955],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The class ID of the specified object.","pos":[957,994]},{"pos":[1000,1007],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1209,1214],"content":"dimOf","linkify":"dimOf","nodes":[{"content":"dimOf","pos":[0,5]}]},{"content":"Retrieves the number of index elements that space has been allocated for in an X++ array.","pos":[1215,1304]},{"pos":[1341,1351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1355,1364]},{"content":"Description","pos":[1367,1378]},{"content":"object","pos":[1479,1485]},{"content":"The array to determine the dimension size of.","pos":[1491,1536]},{"pos":[1544,1556],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[1558,1671],"content":"If the value of the <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter is an array, the number of elements in the array; otherwise, <bpt id=\"p2\">**</bpt>0<ept id=\"p2\">**</ept> (zero).","source":"If the value of the *object* parameter is an array, the number of elements in the array; otherwise, **0** (zero)."},{"pos":[1677,1684],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1686,1791],"content":"The <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function is intended for X++ arrays that are declared as the following X++ primitive types:","source":"The **dimOf** function is intended for X++ arrays that are declared as the following X++ primitive types:"},{"content":"boolean","pos":[1797,1804]},{"content":"date","pos":[1809,1813]},{"content":"int","pos":[1818,1821]},{"content":"int64","pos":[1826,1831]},{"content":"real","pos":[1836,1840]},{"content":"utcDateTime","pos":[1845,1856]},{"content":"An example is <bpt id=\"p1\">**</bpt>int iAmounts<ph id=\"ph1\">\\[</ph>6<ph id=\"ph2\">\\]</ph>;<ept id=\"p1\">**</ept>.","pos":[1858,1895],"source":"An example is **int iAmounts\\[6\\];**."},{"content":"Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as <bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept>).","pos":[1896,2060],"source":" Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as **int**)."},{"content":"The <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function doesn't accept arrays of all X++ primitive types.","pos":[2061,2133],"source":" The **dimOf** function doesn't accept arrays of all X++ primitive types."},{"content":"Here are the array types that the <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function doesn't accept:","pos":[2134,2202],"source":" Here are the array types that the **dimOf** function doesn't accept:"},{"pos":[2208,2215],"content":"<bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>","source":"**str**"},{"pos":[2220,2233],"content":"<bpt id=\"p1\">**</bpt>container<ept id=\"p1\">**</ept>","source":"**container**"},{"pos":[2238,2249],"content":"<bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept>","source":"**anytype**"},{"content":"Arrays of class objects","pos":[2254,2277]},{"pos":[2282,2314],"content":"Instances of the <bpt id=\"p1\">**</bpt>Array<ept id=\"p1\">**</ept> class","source":"Instances of the **Array** class"},{"pos":[2320,2327],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5257,5269],"content":"fieldId2Name","linkify":"fieldId2Name","nodes":[{"content":"fieldId2Name","pos":[0,12]}]},{"content":"Retrieves a string that represents the name of the field that is specified by a table ID number and a field ID number.","pos":[5270,5388]},{"pos":[5442,5452],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5456,5465]},{"content":"Description","pos":[5468,5479]},{"content":"tableid","pos":[5692,5699]},{"content":"The ID number of the table.","pos":[5704,5731]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[5732,5805],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldid","pos":[5810,5817]},{"content":"The ID number of the field.","pos":[5822,5849]},{"pos":[5931,5943],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the field.","pos":[5945,5967]},{"pos":[5973,5980],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5982,6066],"content":"To return a printable version of the field name, use the <bpt id=\"p1\">**</bpt>fieldId2PName<ept id=\"p1\">**</ept> function.","source":"To return a printable version of the field name, use the **fieldId2PName** function."},{"pos":[6072,6079],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6081,6199],"content":"The following example sets <bpt id=\"p1\">**</bpt>fn<ept id=\"p1\">**</ept> to the name of the field in the Customer (CustGroup) table that has a field ID of 7.","source":"The following example sets **fn** to the name of the field in the Customer (CustGroup) table that has a field ID of 7."},{"pos":[6343,6356],"content":"fieldId2PName","linkify":"fieldId2PName","nodes":[{"content":"fieldId2PName","pos":[0,13]}]},{"content":"Retrieves the printable name of the field that is specified by a table ID number and a field ID number.","pos":[6357,6460]},{"pos":[6515,6525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6529,6538]},{"content":"Description","pos":[6541,6552]},{"content":"tableid","pos":[6765,6772]},{"content":"The ID number of the table.","pos":[6777,6804]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[6805,6878],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldid","pos":[6883,6890]},{"content":"The ID number of the field.","pos":[6895,6922]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>fieldName2Id<ept id=\"p2\">**</ept> function to specify the ID of a field.","pos":[6923,6996],"source":"**Note:** Use the **fieldName2Id** function to specify the ID of a field."},{"pos":[7004,7016],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the field.","pos":[7018,7040]},{"pos":[7046,7053],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7383,7395],"content":"fieldName2Id","linkify":"fieldName2Id","nodes":[{"content":"fieldName2Id","pos":[0,12]}]},{"content":"Retrieves the field ID of the table field that is specified by a table ID number and a field ID number.","pos":[7396,7499]},{"pos":[7555,7565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[7569,7578]},{"content":"Description","pos":[7581,7592]},{"content":"tableid","pos":[7805,7812]},{"content":"The ID number of the table.","pos":[7817,7844]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[7845,7918],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldname","pos":[7923,7932]},{"content":"The name of the field.","pos":[7935,7957]},{"pos":[8044,8056],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[8058,8140],"content":"The ID of the field that is specified by the <bpt id=\"p1\">*</bpt>tableid<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>fieldname<ept id=\"p2\">*</ept> parameters.","source":"The ID of the field that is specified by the *tableid* and *fieldname* parameters."},{"pos":[8146,8153],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8395,8407],"content":"indexId2Name","linkify":"indexId2Name","nodes":[{"content":"indexId2Name","pos":[0,12]}]},{"content":"Retrieves the name of an index.","pos":[8408,8439]},{"pos":[8493,8503],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8507,8516]},{"content":"Description","pos":[8519,8530]},{"content":"tableid","pos":[8633,8640]},{"content":"The ID of the table that the index belongs to.","pos":[8645,8691]},{"content":"indexid","pos":[8696,8703]},{"content":"The ID of the index.","pos":[8708,8728]},{"pos":[8762,8774],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the index.","pos":[8776,8798]},{"pos":[8804,8811],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9138,9150],"content":"indexName2Id","linkify":"indexName2Id","nodes":[{"content":"indexName2Id","pos":[0,12]}]},{"content":"Retrieves the ID of an index.","pos":[9151,9180]},{"pos":[9236,9246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9250,9259]},{"content":"Description","pos":[9262,9273]},{"content":"tableid","pos":[9376,9383]},{"content":"The ID of the table that the index belongs to.","pos":[9388,9434]},{"content":"indexname","pos":[9439,9448]},{"content":"The name of the index.","pos":[9451,9473]},{"pos":[9505,9517],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The ID of the index.","pos":[9519,9539]},{"pos":[9545,9552],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9846,9870],"content":"refPrintAll (no content)","linkify":"refPrintAll (no content)","nodes":[{"content":"refPrintAll (no content)","pos":[0,24]}]},{"content":"Summary","pos":[9871,9878]},{"pos":[9945,9955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9959,9968]},{"content":"Description","pos":[9971,9982]},{"content":"object","pos":[10015,10021]},{"content":"Description","pos":[10027,10038]},{"content":"filename","pos":[10043,10051]},{"content":"Description","pos":[10055,10066]},{"content":"title","pos":[10071,10076]},{"content":"Description","pos":[10083,10094]},{"pos":[10101,10113],"content":"tableId2Name","linkify":"tableId2Name","nodes":[{"content":"tableId2Name","pos":[0,12]}]},{"content":"Retrieves a string that contains the name of a table.","pos":[10114,10167]},{"pos":[10209,10219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10223,10232]},{"content":"Description","pos":[10235,10246]},{"content":"<ph id=\"ph1\">\\_</ph>tableid","pos":[10297,10306],"source":"\\_tableid"},{"content":"The ID of the table.","pos":[10309,10329]},{"pos":[10337,10349],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the table.","pos":[10351,10373]},{"pos":[10379,10386],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10971,10984],"content":"tableId2PName","linkify":"tableId2PName","nodes":[{"content":"tableId2PName","pos":[0,13]}]},{"content":"Retrieves a string that contains the printable name (the label) of a table.","pos":[10985,11060]},{"pos":[11103,11113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11117,11126]},{"content":"Description","pos":[11129,11140]},{"content":"<ph id=\"ph1\">\\_</ph>fieldid","pos":[11191,11200],"source":"\\_fieldid"},{"content":"The ID of the table.","pos":[11203,11223]},{"pos":[11231,11243],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The label of the table.","pos":[11245,11268]},{"pos":[11274,11281],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11866,11878],"content":"tableName2Id","linkify":"tableName2Id","nodes":[{"content":"tableName2Id","pos":[0,12]}]},{"content":"Retrieves the ID of a table.","pos":[11879,11907]},{"pos":[11946,11956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11960,11969]},{"content":"Description","pos":[11972,11983]},{"content":"<ph id=\"ph1\">\\_</ph>name","pos":[12038,12044],"source":"\\_name"},{"content":"The name of the table.","pos":[12050,12072]},{"pos":[12080,12092],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The ID of the table.","pos":[12094,12114]},{"pos":[12120,12127],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12720,12726],"content":"typeOf","linkify":"typeOf","nodes":[{"content":"typeOf","pos":[0,6]}]},{"content":"Retrieves the type of an element.","pos":[12727,12760]},{"pos":[12800,12810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12814,12823]},{"content":"Description","pos":[12826,12837]},{"content":"<ph id=\"ph1\">\\_</ph>object","pos":[12918,12926],"source":"\\_object"},{"content":"The element to return the type for.","pos":[12930,12965]},{"pos":[12973,12985],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[12987,13024],"content":"A <bpt id=\"p1\">**</bpt>Types<ept id=\"p1\">**</ept> system enumeration value.","source":"A **Types** system enumeration value."},{"pos":[13030,13037],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13039,13168],"content":"The following example tests whether the first element in a container, <bpt id=\"p1\">**</bpt>c<ept id=\"p1\">**</ept>, is another container that contains a single integer.","source":"The following example tests whether the first element in a container, **c**, is another container that contains a single integer."}],"content":"---\n# required metadata\n\ntitle: X++ Reflection run-time functions | Microsoft Docs\ndescription: This wiki describes the reflection run-time functions.\nauthor: annbe\nmanager: AnnBe\nms.date: 2016-02-04 22:13:50\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: 61\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 31381\nms.assetid: ec888954-283c-458a-a201-aff6f217305d\n# ms.region: \n# ms.industry: \nms.author: RobinARH\n\n---\n\n# X++ Reflection run-time functions\n\nclassIdGet\n----------\n\nRetrieves the numeric identifier (the class ID) of the class that the object that is initialized belongs to.\n\n    int classIdGet(class object)\n\n### Parameters\n\n| Parameter | Description                         |\n|-----------|-------------------------------------|\n| object    | The object to get the class ID for. |\n\n### Return value\n\nThe class ID of the specified object.\n\n### Example\n\n    static void classIdGetExample(Args _args)\n    {\n            int i;\n            WorkTimeCheck w;\n\n            i = classIdGet(w);\n            print \"Class ID for object is \" + int2Str(i);\n    }\n\n## dimOf\nRetrieves the number of index elements that space has been allocated for in an X++ array.\n\n    int dimOf(anytype object)\n\n### Parameters\n\n| Parameter | Description                                   |\n|-----------|-----------------------------------------------|\n| object    | The array to determine the dimension size of. |\n\n### Return value\n\nIf the value of the *object* parameter is an array, the number of elements in the array; otherwise, **0** (zero).\n\n### Remarks\n\nThe **dimOf** function is intended for X++ arrays that are declared as the following X++ primitive types:\n\n-   boolean\n-   date\n-   int\n-   int64\n-   real\n-   utcDateTime\n\nAn example is **int iAmounts\\[6\\];**. Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as **int**). The **dimOf** function doesn't accept arrays of all X++ primitive types. Here are the array types that the **dimOf** function doesn't accept:\n\n-   **str**\n-   **container**\n-   **anytype**\n-   Arrays of class objects\n-   Instances of the **Array** class\n\n### Example\n\n    static void JobDimOfArrays(Args _args)\n    {\n            int iAmounts[20], iCounts[];\n            ABCModel enumAbcModel[22]; // Enum\n            ABCModelType exdtAbcModelType[24]; // Extended data type\n            anytype anyThings[26];\n            str sNames[28];\n            Array myArrayObj; // Class\n\n            info(\"Start of job.\");\n            info(\"--(Next, normal int array, dimOf() accepts it.)\");\n            info(int2Str(dimOf(iAmounts)));\n            info(\"--(Next, normal enum array, dimOf() accepts it.)\");\n            info(int2Str(dimOf(enumAbcModel)));\n            info(\"--(Next, normal extended data type array (based on enum), dimOf() accepts it.)\");\n            info(int2Str(dimOf(exdtAbcModelType)));\n            info(\"--(Next, dynamic int array, dimension not yet set.)\");\n            info(int2Str(dimOf(iCounts)));\n            info(\"--(Next, dynamic int array, after dimension established.)\");\n            \n            iCounts[13] = 13;\n            info(int2Str(dimOf(iCounts)));\n            info(\" == == == == == (Next, array types that dimOf() does not support.)\");\n            info(\"--(Next, normal anytype array, dimOf() always returns 0.)\");\n            info(int2Str(dimOf(anyThings)));\n            info(\"--(Next, an instance of class X++ Array, dimOf() always returns 0.)\");\n\n            myArrayObj = new Array(Types::Integer);\n            myArrayObj.value(1,501);\n            info(int2Str(dimOf(myArrayObj)));\n            info(\"--(Next, the lastIndex method provides size information about Array instances.)\");\n            info(int2Str(myArrayObj.lastIndex()));\n            info(\"--(Next, normal str array, dimOf() does not accept it, job is halted.)\");\n            info(int2Str(dimOf(sNames)));\n            info(\"End of job.\");\n\n    }\n    /************  Actual Infolog output\n    Message (11:10:06 am)\n    Start of job.\n    --(Next, normal int array, dimOf() accepts it.)\n    20\n    --(Next, normal enum array, dimOf() accepts it.)\n    22\n    --(Next, normal extended data type array (based on enum), dimOf() accepts it.)\n    24\n    --(Next, dynamic int array, dimension not yet set.)\n    0\n    --(Next, dynamic int array, after dimension established.)\n    16\n    == == == == == (Next, array types that dimOf() does not support.)\n    --(Next, normal anytype array, dimOf() always returns 0.)\n    0\n    --(Next, an instance of class X++ Array, dimOf() always returns 0.)\n    0\n    --(Next, the lastIndex method provides size information about Array instances.)\n    1\n    --(Next, normal str array, dimOf() does not accept it, job is halted.)\n    Error executing code: Illegal operation on this type of array. (C)JobsJobDimOfArrays - line 41\n    ************/\n    /***********  Pop-up error dialog box\n    \"Internal error number 25 in script.\"\n    This error is caused by the code line...\n    info(int2Str(dimOf(iCounts)));\n    ...before iCounts was assigned at any index.\n    ***********/\n\n## fieldId2Name\nRetrieves a string that represents the name of the field that is specified by a table ID number and a field ID number.\n\n    str fieldId2Name(int tableid, int fieldid)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldid   | The ID number of the field.                                                                           |\n\n### Return value\n\nThe name of the field.\n\n### Remarks\n\nTo return a printable version of the field name, use the **fieldId2PName** function.\n\n### Example\n\nThe following example sets **fn** to the name of the field in the Customer (CustGroup) table that has a field ID of 7.\n\n    static void fieldId2NameExample(Args _arg)\n    {\n            str fn;\n            fn = fieldId2Name(tableName2Id(\"Customer\"),7);\n    }\n\n## fieldId2PName\nRetrieves the printable name of the field that is specified by a table ID number and a field ID number.\n\n    str fieldId2PName(int tableid, int fieldid)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldid   | The ID number of the field. **Note:** Use the **fieldName2Id** function to specify the ID of a field. |\n\n### Return value\n\nThe name of the field.\n\n### Example\n\n    static void fieldId2PNameExample(Args _arg)\n    {\n            str name;\n            tableid _tableId;\n            fieldid _fieldid;\n\n            _tableId = tableName2Id(\"Address\");\n            _fieldId = fieldName2Id(_tableId, \"Name\");\n            name = fieldId2PName(_tableId, _fieldid);\n            print name;\n    }\n\n## fieldName2Id\nRetrieves the field ID of the table field that is specified by a table ID number and a field ID number.\n\n    int fieldName2Id(int tableid, str fieldname)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldname | The name of the field.                                                                                |\n\n### Return value\n\nThe ID of the field that is specified by the *tableid* and *fieldname* parameters.\n\n### Example\n\n    static void fieldName2IdExample(Args _arg)\n    {\n            int id;\n\n            id = fieldName2Id(tableName2Id(\"Address\"), \"Name\");\n            // Returns 6. Name is the 6th field in the Address table.\n            print id;\n    }\n\n## indexId2Name\nRetrieves the name of an index.\n\n    str indexId2Name(int tableid, int indexid)\n\n### Parameters\n\n| Parameter | Description                                    |\n|-----------|------------------------------------------------|\n| tableid   | The ID of the table that the index belongs to. |\n| indexid   | The ID of the index.                           |\n\n### Return value\n\nThe name of the index.\n\n### Example\n\n    static void indexId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n            indexid idx;\n\n            id  = tableName2Id(\"Address\");\n            idx = indexName2Id(id, \"AddrIdx\");\n            s = indexId2Name(id, idx);\n            print \"The result of calling indexId2Name is \" + s;\n    }\n\n## indexName2Id\nRetrieves the ID of an index.\n\n    int indexName2Id(int tableid, str indexname)\n\n### Parameters\n\n| Parameter | Description                                    |\n|-----------|------------------------------------------------|\n| tableid   | The ID of the table that the index belongs to. |\n| indexname | The name of the index.                         |\n\n### Return value\n\nThe ID of the index.\n\n### Example\n\n    static void indexName2IdExample(Args _arg)\n    {\n            indexid idx;\n            tableid id;\n\n            id  = tableName2Id(\"Address\");\n            idx = indexName2Id(id, \"AddrIdx\");\n            print \"Index ID for index name AddrIdx of table Address is \" + int2Str(idx);\n    }\n\n## refPrintAll (no content)\nSummary\n\n    void refPrintAll(class object, str filename, str title)\n\n### Parameters\n\n| Parameter | Description |\n|-----------|-------------|\n| object    | Description |\n| filename  | Description |\n| title     | Description |\n\n## tableId2Name\nRetrieves a string that contains the name of a table.\n\n    str tableId2Name(int _tableid)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_tableid | The ID of the table. |\n\n### Return value\n\nThe name of the table.\n\n### Example\n\n    static void tableId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for table name Address.\n            id = tableName2Id(\"Address\");\n            print \"ID for table name Address is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## tableId2PName\nRetrieves a string that contains the printable name (the label) of a table.\n\n    str tableId2PName(int _fieldid)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_fieldid | The ID of the table. |\n\n### Return value\n\nThe label of the table.\n\n### Example\n\n    static void tableId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for table name Address.\n            id = tableName2Id(\"Address\");\n            print \"ID for table name Address is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## tableName2Id\nRetrieves the ID of a table.\n\n    int tableName2Id(str _name)\n\n### Parameters\n\n| Parameter | Description            |\n|-----------|------------------------|\n| \\_name    | The name of the table. |\n\n### Return value\n\nThe ID of the table.\n\n### Example\n\n    static void tableName2IdExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for the Address table name.\n            id = tableName2Id(\"Address\");\n            print \"ID for the Address table name is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## typeOf\nRetrieves the type of an element.\n\n    enum typeOf(anytype _object)\n\n### Parameters\n\n| Parameter | Description                         |\n|-----------|-------------------------------------|\n| \\_object  | The element to return the type for. |\n\n### Return value\n\nA **Types** system enumeration value.\n\n### Example\n\nThe following example tests whether the first element in a container, **c**, is another container that contains a single integer.\n\n    if(typeof(conpeek(c, 1)) != Types::Container ||\n    conlen(conpeek(c, 1)) != 1 ||\n    typeof(conpeek(conpeek(c, 1), 1)) != Types::Integer)\n    {\n            // More code.\n    }\n\n"}