{"nodes":[{"pos":[32,100],"content":"F Classes - FieldBinding to FormBuildAnimateControl | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"F Classes - FieldBinding to FormBuildAnimateControl | Microsoft Docs","pos":[0,68]}]},{"pos":[114,162],"content":"System API classes that start with the letter F.","needQuote":true,"needEscape":true,"nodes":[{"content":"System API classes that start with the letter F.","pos":[0,48]}]},{"pos":[587,638],"content":"F Classes - FieldBinding to FormBuildAnimateControl","linkify":"F Classes - FieldBinding to FormBuildAnimateControl","nodes":[{"content":"F Classes - FieldBinding to FormBuildAnimateControl","pos":[0,51]}]},{"content":"System API classes that start with the letter F.","pos":[640,688]},{"pos":[690,708],"content":"Class FieldBinding","linkify":"Class FieldBinding","nodes":[{"content":"Class FieldBinding","pos":[0,18]}]},{"pos":[772,779],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[785,793],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[799,806],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[810,816]},{"content":"Description","pos":[869,880]},{"content":"public int fieldArrayIndex()","pos":[1054,1082]},{"content":"public int fieldId()","pos":[1176,1196]},{"content":"public str fieldName()","pos":[1298,1320]},{"content":"public boolean isEqualTo(FieldBinding otherFieldBinding)","pos":[1420,1476]},{"content":"public boolean isNull()","pos":[1542,1565]},{"content":"public boolean isValid()","pos":[1664,1688]},{"content":"public container pack()","pos":[1786,1809]},{"content":"Serializes the current instance of the FieldBinding class.","pos":[1845,1903]},{"content":"public int tableId()","pos":[1908,1928]},{"content":"public str tableName()","pos":[2030,2052]},{"content":"public void new()","pos":[2152,2169]},{"content":"Initializes a new instance of the FieldBinding class.","pos":[2211,2264]},{"pos":[2277,2299],"content":"Method fieldArrayIndex","linkify":"Method fieldArrayIndex","nodes":[{"content":"Method fieldArrayIndex","pos":[0,22]}]},{"pos":[2340,2352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2358,2372],"content":"Method fieldId","linkify":"Method fieldId","nodes":[{"content":"Method fieldId","pos":[0,14]}]},{"pos":[2405,2417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2423,2439],"content":"Method fieldName","linkify":"Method fieldName","nodes":[{"content":"Method fieldName","pos":[0,16]}]},{"pos":[2474,2486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2492,2508],"content":"Method isEqualTo","linkify":"Method isEqualTo","nodes":[{"content":"Method isEqualTo","pos":[0,16]}]},{"pos":[2577,2587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"otherFieldBinding","pos":[2589,2606]},{"pos":[2615,2627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2633,2646],"content":"Method isNull","linkify":"Method isNull","nodes":[{"content":"Method isNull","pos":[0,13]}]},{"pos":[2682,2694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2700,2714],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[2751,2763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2769,2780],"content":"Method pack","linkify":"Method pack","nodes":[{"content":"Method pack","pos":[0,11]}]},{"content":"Serializes the current instance of the FieldBinding class.","pos":[2782,2840]},{"pos":[2876,2888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that contains the current instance of the FieldBinding class.","pos":[2890,2963]},{"pos":[2969,2983],"content":"Method tableId","linkify":"Method tableId","nodes":[{"content":"Method tableId","pos":[0,14]}]},{"pos":[3016,3028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3034,3050],"content":"Method tableName","linkify":"Method tableName","nodes":[{"content":"Method tableName","pos":[0,16]}]},{"pos":[3085,3097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3103,3113],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the FieldBinding class.","pos":[3115,3168]},{"pos":[3196,3218],"content":"Class FieldFilterValue","linkify":"Class FieldFilterValue","nodes":[{"content":"Class FieldFilterValue","pos":[0,22]}]},{"pos":[3271,3278],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3284,3292],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[3298,3305],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[3309,3315]},{"content":"Description","pos":[3371,3382]},{"content":"public AnyType valueAnyType()","pos":[3537,3566]},{"content":"public void new(FieldBinding fieldBinding, str filterValue)","pos":[3651,3710]},{"content":"Initializes a new instance of the Object class.","pos":[3713,3760]},{"pos":[3768,3787],"content":"Method valueAnyType","linkify":"Method valueAnyType","nodes":[{"content":"Method valueAnyType","pos":[0,19]}]},{"pos":[3829,3841],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3847,3857],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[3859,3906]},{"pos":[3978,3988],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldBinding","pos":[3990,4002]},{"content":"filterValue","pos":[4016,4027]},{"pos":[4034,4056],"content":"Class FileIOPermission","linkify":"Class FileIOPermission","nodes":[{"content":"Class FileIOPermission","pos":[0,22]}]},{"content":"The FileIOPermission class controls the ability to access files and folders.","pos":[4114,4190]},{"pos":[4196,4203],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The FileIoPermission class is designed to check permissions for specific APIs.","pos":[4205,4283]},{"content":"For a list of all APIs that are protected by permissions, see Secured APIs.","pos":[4284,4359]},{"content":"Before the protected API is run, you must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission::demand method is called on.","pos":[4360,4540]},{"content":"Call a method on the server tier from one of the following:","pos":[4541,4600]},{"content":"A server static method","pos":[4606,4628]},{"content":"A class instance method that is set to run on the server by using the RunOn class property","pos":[4633,4723]},{"pos":[4729,4737],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example shows a new instance of the FileIoPermission class that specifies read access for the File.txt file.","pos":[4739,4866]},{"content":"The assert method is called to declare that the code can then call the AsciiIo.new method.","pos":[4867,4957]},{"pos":[5238,5245],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[5249,5255]},{"content":"Description","pos":[5306,5317]},{"content":"public CodeAccessPermission copy()","pos":[5533,5567]},{"content":"Creates and returns a copy of the current permission class object.","pos":[5590,5656]},{"content":"public boolean isSubsetOf(CodeAccessPermission target)","pos":[5675,5729]},{"content":"Determines whether the current permission is a subset of a specified permission.","pos":[5732,5812]},{"content":"public void new(str filename, str mode)","pos":[5817,5856]},{"content":"Initializes a new instance of the CodeAccessPermission class.","pos":[5874,5935]},{"pos":[5962,5973],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Creates and returns a copy of the current permission class object.","pos":[5975,6041]},{"pos":[6088,6100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the current permission object.","pos":[6102,6142]},{"pos":[6149,6156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You override this method when you derive a class from the CodeAccessPermission class.","pos":[6158,6243]},{"content":"For more information, see copy.","pos":[6244,6275]},{"pos":[6281,6298],"content":"Method isSubsetOf","linkify":"Method isSubsetOf","nodes":[{"content":"Method isSubsetOf","pos":[0,17]}]},{"content":"Determines whether the current permission is a subset of a specified permission.","pos":[6300,6380]},{"pos":[6447,6457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[6459,6465]},{"content":"A CodeAccessPermission class object.","pos":[6468,6504]},{"pos":[6511,6523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the current permission is a subset of the specified permission; otherwise, false.","pos":[6525,6614]},{"pos":[6621,6628],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You override this method when you derive a class from the CodeAccessPermission class.","pos":[6630,6715]},{"content":"For more information, see M: CodeAccessPermission.isSubsetOf.","pos":[6716,6777]},{"pos":[6783,6793],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the CodeAccessPermission class.","pos":[6795,6856]},{"pos":[6908,6918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[6920,6928]},{"content":"A String data type that specifies the type of access.","pos":[6931,6984]},{"content":"mode","pos":[6996,7000]},{"content":"A String data type that specifies the type of access.","pos":[7003,7056]},{"pos":[7063,7070],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table lists the possible values for the <ph id=\"ph1\">\\_</ph>mode parameter.","pos":[7072,7143],"source":"The following table lists the possible values for the \\_mode parameter."},{"content":"R","pos":[7197,7198]},{"content":"Read","pos":[7203,7207]},{"content":"W","pos":[7222,7223]},{"content":"Write","pos":[7228,7233]},{"content":"RW","pos":[7247,7249]},{"content":"Read and write","pos":[7253,7267]},{"pos":[7276,7284],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example shows a new instance of the FileIoPermission class that specifies read access for the File.txt file.","pos":[7286,7413]},{"pos":[7564,7581],"content":"Class FilterValue","linkify":"Class FilterValue","nodes":[{"content":"Class FilterValue","pos":[0,17]}]},{"pos":[7624,7631],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7637,7645],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[7651,7658],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[7662,7668]},{"content":"Description","pos":[7699,7710]},{"content":"public FieldBinding fieldBinding()","pos":[7768,7802]},{"content":"public str value(<ph id=\"ph1\">\\[</ph>str fvalue<ph id=\"ph2\">\\]</ph>)","pos":[7821,7853],"source":"public str value(\\[str fvalue\\])"},{"content":"public str valueForQueryRange()","pos":[7874,7905]},{"pos":[7930,7949],"content":"Method fieldBinding","linkify":"Method fieldBinding","nodes":[{"content":"Method fieldBinding","pos":[0,19]}]},{"pos":[7996,8008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8014,8026],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[8069,8079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fvalue","pos":[8081,8087]},{"pos":[8096,8108],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8114,8139],"content":"Method valueForQueryRange","linkify":"Method valueForQueryRange","nodes":[{"content":"Method valueForQueryRange","pos":[0,25]}]},{"pos":[8183,8195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8200,8210],"content":"Class Form","linkify":"Class Form","nodes":[{"content":"Class Form","pos":[0,10]}]},{"content":"The Form class represents an instance of a design-time form.","pos":[8244,8304]},{"pos":[8310,8317],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8323,8331],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[8337,8344],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[8348,8354]},{"content":"Description","pos":[8479,8490]},{"content":"public FormBuildControl addControl(FormControlType controlType, str controlName)","pos":[8862,8942]},{"content":"public FormBuildControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormBuildControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean pushFront<ph id=\"ph4\">\\]</ph>)","pos":[9119,9247],"source":"public FormBuildControl addControlEx(str controlClass, str controlName, \\[FormBuildControl insertAfter\\], \\[boolean pushFront\\])"},{"content":"public FormBuildDataSource addDataSource(str name, <ph id=\"ph1\">\\[</ph>str tableName<ph id=\"ph2\">\\]</ph>)","pos":[9376,9445],"source":"public FormBuildDataSource addDataSource(str name, \\[str tableName\\])"},{"content":"public List rootFormDataSources()","pos":[9633,9666]},{"content":"public FormBuildDesign addDesign(str name)","pos":[9890,9932]},{"content":"public Query query(str queryName)","pos":[10147,10180]},{"content":"public boolean allowPreLoading(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[10404,10453],"source":"public boolean allowPreLoading(\\[boolean value\\])"},{"content":"A Boolean value that determines whether a preloaded instance can be used when the associated FormRun instance is created.","pos":[10535,10656]},{"content":"public boolean autoCacheUpdate(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[10661,10710],"source":"public boolean autoCacheUpdate(\\[boolean value\\])"},{"content":"public str changedBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[10918,10953],"source":"public str changedBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[11049,11123]},{"content":"public Date changedDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[11175,11214],"source":"public Date changedDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was last changed.","pos":[11306,11367]},{"content":"public str changedTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[11432,11469],"source":"public str changedTime(\\[str value\\])"},{"content":"Gets or sets the time an application object was last changed.","pos":[11563,11624]},{"content":"public ChangeGroupMode changeGroupMode(<ph id=\"ph1\">\\[</ph>ChangeGroupMode value<ph id=\"ph2\">\\]</ph>)","pos":[11689,11754],"source":"public ChangeGroupMode changeGroupMode(\\[ChangeGroupMode value\\])"},{"content":"public str createdBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[11946,11981],"source":"public str createdBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who created the application object.","pos":[12077,12146]},{"content":"public Date creationDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[12203,12243],"source":"public Date creationDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was created.","pos":[12334,12390]},{"content":"public str creationTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[12460,12498],"source":"public str creationTime(\\[str value\\])"},{"content":"public FormBuildDataSource dataSource(AnyType objectSet)","pos":[12717,12773]},{"content":"public int dataSourceCount()","pos":[12974,13002]},{"content":"public FormBuildDesign design(<ph id=\"ph1\">\\[</ph>int designNo<ph id=\"ph2\">\\]</ph>)","pos":[13231,13278],"source":"public FormBuildDesign design(\\[int designNo\\])"},{"content":"public int formTemplate(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13488,13526],"source":"public int formTemplate(\\[int value\\])"},{"content":"public str interactionClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[13745,13787],"source":"public str interactionClass(\\[str value\\])"},{"content":"public boolean isLoadedForInference()","pos":[14002,14039]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[14259,14289],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.","pos":[14390,14511]},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[14516,14550],"source":"public Guid origin(\\[Guid value\\])"},{"content":"::public static boolean formKernelObjectHasMethod(Object kernelObject, str methodName)","pos":[14773,14859]},{"content":"::public static boolean formObjectSetHasMethod(FormObjectSet formObjectSet, str methodName)","pos":[15030,15121]},{"content":"::public static boolean formRunHasMethod(xFormRun formRun, str methodName)","pos":[15287,15361]},{"content":"::public static str getSetupUserQueryElementName(MenuItemType menuItemType, str menuItemName)","pos":[15544,15637]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean buildMode<ph id=\"ph4\">\\]</ph>)","pos":[15801,15853],"source":"public void new(\\[str name\\], \\[boolean buildMode\\])"},{"content":"Initializes a new instance of the Form class.","pos":[15932,15977]},{"content":"public void inInitializeDesign(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[16058,16107],"source":"public void inInitializeDesign(\\[boolean value\\])"},{"content":"public void save()","pos":[16315,16333]},{"content":"public void load(str name, <ph id=\"ph1\">\\[</ph>boolean buildMode<ph id=\"ph2\">\\]</ph>)","pos":[16572,16621],"source":"public void load(str name, \\[boolean buildMode\\])"},{"content":"public void finalize()","pos":[16829,16851]},{"pos":[17089,17106],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[17199,17209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[17211,17222]},{"content":"controlName","pos":[17236,17247]},{"pos":[17256,17268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17274,17293],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[17430,17440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[17442,17454]},{"content":"controlName","pos":[17468,17479]},{"content":"insertAfter","pos":[17493,17504]},{"content":"pushFront","pos":[17518,17527]},{"pos":[17536,17548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17554,17574],"content":"Method addDataSource","linkify":"Method addDataSource","nodes":[{"content":"Method addDataSource","pos":[0,20]}]},{"pos":[17654,17664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[17666,17670]},{"content":"tableName","pos":[17684,17693]},{"pos":[17702,17714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17720,17746],"content":"Method rootFormDataSources","linkify":"Method rootFormDataSources","nodes":[{"content":"Method rootFormDataSources","pos":[0,26]}]},{"pos":[17792,17804],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17810,17826],"content":"Method addDesign","linkify":"Method addDesign","nodes":[{"content":"Method addDesign","pos":[0,16]}]},{"pos":[17881,17891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[17893,17897]},{"pos":[17906,17918],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[17924,17936],"content":"Method query","linkify":"Method query","nodes":[{"content":"Method query","pos":[0,12]}]},{"pos":[17982,17992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"queryName","pos":[17994,18003]},{"pos":[18012,18024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18030,18052],"content":"Method allowPreLoading","linkify":"Method allowPreLoading","nodes":[{"content":"Method allowPreLoading","pos":[0,22]}]},{"content":"A Boolean value that determines whether a preloaded instance can be used when the associated FormRun instance is created.","pos":[18054,18175]},{"pos":[18235,18245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[18247,18252]},{"content":"true if a preloaded instance can be used when the associated FormRun instance is created; otherwise, false.","pos":[18255,18362]},{"pos":[18369,18381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a preloaded instance can be used when the associated FormRun instance is created; otherwise, false.","pos":[18383,18490]},{"pos":[18496,18518],"content":"Method autoCacheUpdate","linkify":"Method autoCacheUpdate","nodes":[{"content":"Method autoCacheUpdate","pos":[0,22]}]},{"pos":[18578,18588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[18590,18595]},{"pos":[18604,18616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18622,18638],"content":"Method changedBy","linkify":"Method changedBy","nodes":[{"content":"Method changedBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[18640,18714]},{"pos":[18760,18770],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[18772,18777]},{"pos":[18786,18798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[18800,18821]},{"pos":[18827,18845],"content":"Method changedDate","linkify":"Method changedDate","nodes":[{"content":"Method changedDate","pos":[0,18]}]},{"content":"Gets or sets the date an application object was last changed.","pos":[18847,18908]},{"pos":[18958,18968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[18970,18975]},{"pos":[18984,18996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was last changed.","pos":[18998,19046]},{"pos":[19052,19070],"content":"Method changedTime","linkify":"Method changedTime","nodes":[{"content":"Method changedTime","pos":[0,18]}]},{"content":"Gets or sets the time an application object was last changed.","pos":[19072,19133]},{"pos":[19181,19191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[19193,19198]},{"pos":[19207,19219],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The time an application object was last changed.","pos":[19221,19269]},{"pos":[19275,19297],"content":"Method changeGroupMode","linkify":"Method changeGroupMode","nodes":[{"content":"Method changeGroupMode","pos":[0,22]}]},{"pos":[19373,19383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[19385,19390]},{"pos":[19399,19411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19417,19433],"content":"Method createdBy","linkify":"Method createdBy","nodes":[{"content":"Method createdBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who created the application object.","pos":[19435,19504]},{"pos":[19550,19560],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[19562,19567]},{"pos":[19576,19588],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[19590,19611]},{"pos":[19617,19636],"content":"Method creationDate","linkify":"Method creationDate","nodes":[{"content":"Method creationDate","pos":[0,19]}]},{"content":"Gets or sets the date an application object was created.","pos":[19638,19694]},{"pos":[19745,19755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[19757,19762]},{"pos":[19771,19783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was created.","pos":[19785,19828]},{"pos":[19834,19853],"content":"Method creationTime","linkify":"Method creationTime","nodes":[{"content":"Method creationTime","pos":[0,19]}]},{"pos":[19902,19912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[19914,19919]},{"pos":[19928,19940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19946,19963],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"pos":[20032,20042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"objectSet","pos":[20044,20053]},{"pos":[20062,20074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20080,20102],"content":"Method dataSourceCount","linkify":"Method dataSourceCount","nodes":[{"content":"Method dataSourceCount","pos":[0,22]}]},{"pos":[20143,20155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20161,20174],"content":"Method design","linkify":"Method design","nodes":[{"content":"Method design","pos":[0,13]}]},{"pos":[20232,20242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"designNo","pos":[20244,20252]},{"pos":[20261,20273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20279,20298],"content":"Method formTemplate","linkify":"Method formTemplate","nodes":[{"content":"Method formTemplate","pos":[0,19]}]},{"pos":[20347,20357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[20359,20364]},{"pos":[20373,20385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20391,20414],"content":"Method interactionClass","linkify":"Method interactionClass","nodes":[{"content":"Method interactionClass","pos":[0,23]}]},{"pos":[20467,20477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[20479,20484]},{"pos":[20493,20505],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20511,20538],"content":"Method isLoadedForInference","linkify":"Method isLoadedForInference","nodes":[{"content":"Method isLoadedForInference","pos":[0,27]}]},{"pos":[20588,20600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20606,20617],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.","pos":[20619,20740]},{"pos":[20781,20791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[20793,20798]},{"pos":[20807,20819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[20821,20885]},{"pos":[20892,20899],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[20901,20995]},{"content":"Begins with a letter.","pos":[21001,21022]},{"content":"Doesn't exceed 250 characters.","pos":[21027,21057]},{"content":"Can include numbers and underscore characters.","pos":[21062,21108]},{"content":"Cannot include punctuation or spaces.","pos":[21113,21150]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[21155,21273]},{"pos":[21279,21292],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[21337,21347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[21349,21354]},{"pos":[21363,21375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21381,21413],"content":"Method formKernelObjectHasMethod","linkify":"Method formKernelObjectHasMethod","nodes":[{"content":"Method formKernelObjectHasMethod","pos":[0,32]}]},{"pos":[21510,21520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"kernelObject","pos":[21522,21534]},{"content":"methodName","pos":[21548,21558]},{"pos":[21567,21579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21585,21614],"content":"Method formObjectSetHasMethod","linkify":"Method formObjectSetHasMethod","nodes":[{"content":"Method formObjectSetHasMethod","pos":[0,29]}]},{"pos":[21716,21726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formObjectSet","pos":[21728,21741]},{"content":"methodName","pos":[21755,21765]},{"pos":[21774,21786],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21792,21815],"content":"Method formRunHasMethod","linkify":"Method formRunHasMethod","nodes":[{"content":"Method formRunHasMethod","pos":[0,23]}]},{"pos":[21900,21910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formRun","pos":[21912,21919]},{"content":"methodName","pos":[21933,21943]},{"pos":[21952,21964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21970,22005],"content":"Method getSetupUserQueryElementName","linkify":"Method getSetupUserQueryElementName","nodes":[{"content":"Method getSetupUserQueryElementName","pos":[0,35]}]},{"pos":[22109,22119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuItemType","pos":[22121,22133]},{"content":"menuItemName","pos":[22147,22159]},{"pos":[22168,22180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22186,22196],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Form class.","pos":[22198,22243]},{"pos":[22304,22314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[22316,22320]},{"content":"buildMode","pos":[22334,22343]},{"pos":[22351,22376],"content":"Method inInitializeDesign","linkify":"Method inInitializeDesign","nodes":[{"content":"Method inInitializeDesign","pos":[0,25]}]},{"pos":[22436,22446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22448,22453]},{"pos":[22461,22472],"content":"Method save","linkify":"Method save","nodes":[{"content":"Method save","pos":[0,11]}]},{"pos":[22502,22513],"content":"Method load","linkify":"Method load","nodes":[{"content":"Method load","pos":[0,11]}]},{"pos":[22573,22583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[22585,22589]},{"content":"buildMode","pos":[22603,22612]},{"pos":[22620,22635],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[22668,22695],"content":"Class FormActionPaneControl","linkify":"Class FormActionPaneControl","nodes":[{"content":"Class FormActionPaneControl","pos":[0,27]}]},{"pos":[22753,22760],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22766,22774],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[22780,22787],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[22791,22797]},{"content":"Description","pos":[22909,22920]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[23333,23437],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[23604,23699],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[23875,23990],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[24146,24190],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[24417,24464],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[24688,24734],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[24806,24846]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[24959,25002],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[25077,25144]},{"content":"public boolean allowSysSetup()","pos":[25230,25260]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[25348,25431]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[25501,25541],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[25772,25810],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[26043,26082],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[26314,26351],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[26585,26634],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[26703,26801]},{"content":"public int beginDrag(int x, int y)","pos":[26856,26890]},{"content":"Is called when the user starts to drag a form control.","pos":[26974,27028]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[27127,27184],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[27398,27449],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[27669,27712],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[27940,27994]},{"content":"Retrieves the size of the control.","pos":[28058,28092]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[28211,28296],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[28482,28528]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[28753,28786],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[28871,28910]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[29024,29079],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[29295,29347],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[29566,29622],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[29837,29887],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[30108,30150],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[30379,30417],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[30650,30722],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[30768,30835]},{"content":"public List configurationKeyEx()","pos":[30921,30953]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[31039,31135]},{"content":"public boolean contains(FormControl control)","pos":[31192,31236]},{"content":"public int controlCount()","pos":[31463,31488]},{"content":"public FormControl controlNum(int controlNo)","pos":[31734,31778]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[32005,32047],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[32123,32248]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[32276,32316],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[32394,32466]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[32547,32586],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[32665,32813]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[32818,32852],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[32936,33017]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[33089,33170]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[33207,33301]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[33360,33437]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[33478,33574]},{"content":"public str dragText()","pos":[33631,33652]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[33749,33819]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[33902,33943],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[34020,34071]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[34173,34215],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[34291,34379]},{"content":"public boolean hasUserSetting()","pos":[34444,34475]},{"content":"Indicates whether the control has custom user settings.","pos":[34562,34617]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[34715,34757],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[34833,34872]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[34986,35022],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[35104,35166]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[35257,35294],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[35375,35414]},{"content":"public str helpField()","pos":[35528,35550]},{"content":"Retrieves the Help text for the control.","pos":[35646,35686]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[35799,35833],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[35917,36021]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[36070,36115],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[36341,36382],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[36459,36522]},{"content":"public int hWnd()","pos":[36612,36629]},{"content":"Retrieves the Windows handle for the control.","pos":[36730,36775]},{"content":"public boolean isContainer()","pos":[36883,36911]},{"content":"public boolean isDisplayed()","pos":[37154,37182]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[37272,37338]},{"content":"public boolean isRestricted()","pos":[37425,37454]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[37543,37610]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[37696,37752]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[37814,37915]},{"content":"public boolean leave()","pos":[37967,37989]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[38238,38278],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[38356,38420]},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[38509,38564],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[38780,38829],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[39051,39092],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[39322,39356],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[39440,39501]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[39593,39628],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[39711,39775]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[39864,39911],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[39982,40035]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[40135,40214]},{"content":"Is called when the control is double-clicked by the user.","pos":[40253,40310]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[40406,40481]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[40524,40589]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[40677,40752]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[40795,40860]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[40948,41021]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[41066,41138]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[41219,41279],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[41490,41520],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[41608,41749]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[41761,41803],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[42032,42071]},{"content":"public FormControl parentControl()","pos":[42303,42337]},{"content":"Retrieves the parent control for the control.","pos":[42421,42466]},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[42574,42608],"source":"public int position(\\[int value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[42845,42901],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[43116,43166],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[43387,43429],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[43658,43715],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[43776,43835]},{"content":"public int showContextMenu(int menuHandle)","pos":[43929,43971]},{"content":"Shows the shortcut menu for the control.","pos":[44047,44087]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[44200,44238],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[44318,44445]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[44471,44515],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44742,44773],"source":"public int style(\\[int value\\])"},{"content":"public str toolTip()","pos":[45013,45033]},{"content":"Retrieves the tooltip text for the control.","pos":[45131,45174]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[45284,45323],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[45402,45464]},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[45555,45609],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[45826,45874],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[46097,46137],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[46368,46401],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[46486,46545]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[46639,46673],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[46757,46819]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[46910,46940],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[47181,47232]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[47452,47486],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[47570,47613]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[47723,47761],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[47841,47889]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[47994,48033],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[48112,48171]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[48265,48302],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[48383,48466]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[48536,48572],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[48654,48706]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[48807,48841],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[48925,49007]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[49078,49120],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[49196,49252]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[49349,49389],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[49467,49521]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[49620,49660],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[49738,49787]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[49891,49934],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[50009,50062]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50162,50196],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[50280,50428]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50433,50468],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[50551,50602]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[50704,50751],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[50975,51035],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[51093,51154]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[51246,51300],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[51364,51423]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[51517,51563],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[51635,51696]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[51788,51829],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[51906,51976]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[52059,52100],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[52177,52215]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[52330,52365],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[52448,52510]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[52601,52637],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[52719,52757]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[52872,52945]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[52990,53088]},{"content":"public void lostFocus()","pos":[53143,53166]},{"content":"Indicates that the control has lost focus.","pos":[53261,53303]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[53414,53451],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void dragLeave()","pos":[53685,53708]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[53803,53899]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[53956,54033]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[54074,54144]},{"content":"public void gotFocus()","pos":[54227,54249]},{"content":"Indicates that the control has received focus.","pos":[54345,54391]},{"content":"public void mouseLeave()","pos":[54498,54522]},{"content":"Indicates that the mouse pointer has left the control.","pos":[54616,54670]},{"content":"public void setArea(str area)","pos":[54769,54798]},{"content":"public void arrange()","pos":[55040,55061]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[55311,55385],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[55582,55657],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void jumpRef()","pos":[55853,55874]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[56124,56196],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void inputSearch(str searchStr)","pos":[56395,56433]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[56513,56584]},{"content":"public void endDrag()","pos":[56666,56687]},{"content":"Is called when the user has finished dragging a form control.","pos":[56784,56845]},{"content":"public void setFocus()","pos":[56937,56959]},{"content":"Sets the focus on the control.","pos":[57055,57085]},{"content":"public void tabChanged(str newTab)","pos":[57208,57242]},{"content":"Is called when the active tab is changed.","pos":[57326,57367]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[57479,57555],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void displayControl()","pos":[57750,57778]},{"content":"Displays the control.","pos":[57868,57889]},{"content":"public void prefColumnSize(int width, int height)","pos":[58021,58070]},{"content":"Specifies the preferred column width and height for the form control.","pos":[58139,58208]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[58292,58399],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void cut()","pos":[58563,58580]},{"content":"Cuts the contents of the control.","pos":[58681,58714]},{"content":"public void resetUserSetting()","pos":[58834,58864]},{"content":"Resets the user settings for the control.","pos":[58952,58993]},{"content":"private void OnTabChanged(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[59105,59182],"source":"private void OnTabChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void paste()","pos":[59376,59395]},{"content":"Pastes the contents of the clipboard into the control.","pos":[59494,59548]},{"content":"public void copy()","pos":[59647,59665]},{"content":"Copies the contents of the control to the clipboard.","pos":[59765,59817]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[59918,59987]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[60036,60136]},{"content":"public void context()","pos":[60189,60210]},{"content":"Shows the shortcut menu for the control.","pos":[60307,60347]},{"content":"public void enter()","pos":[60460,60479]},{"pos":[60734,60751],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[60866,60876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[60878,60889]},{"content":"controlName","pos":[60903,60914]},{"content":"insertAfter","pos":[60928,60939]},{"pos":[60948,60960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60966,60985],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[61091,61101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[61103,61115]},{"content":"controlName","pos":[61129,61140]},{"content":"insertAfter","pos":[61154,61165]},{"pos":[61174,61186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61192,61211],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[61335,61345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[61347,61359]},{"content":"fieldId","pos":[61373,61380]},{"content":"insertAfter","pos":[61394,61405]},{"content":"arrayIndex","pos":[61419,61429]},{"pos":[61438,61450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61456,61473],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[61528,61538],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[61540,61545]},{"pos":[61554,61566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61572,61592],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[61650,61660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[61662,61667]},{"pos":[61676,61688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61694,61713],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[61715,61755]},{"pos":[61812,61822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[61824,61829]},{"content":"The new value for the property; optional.","pos":[61832,61873]},{"pos":[61880,61892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[61894,61950]},{"pos":[61957,61964],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[61966,62045]},{"pos":[62051,62067],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[62069,62136]},{"pos":[62190,62200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62202,62207]},{"content":"The value to assign to the allowEdit property.","pos":[62210,62256]},{"pos":[62263,62275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[62277,62329]},{"pos":[62336,62343],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[62345,62467]},{"pos":[62473,62493],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[62495,62578]},{"pos":[62621,62633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control will be shown in the SysSetup form; otherwise, false.","pos":[62635,62708]},{"pos":[62714,62735],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[62786,62796],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62798,62803]},{"pos":[62812,62824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62830,62849],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[62898,62908],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62910,62915]},{"pos":[62924,62936],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62942,62962],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[63012,63022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63024,63029]},{"pos":[63038,63050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63056,63074],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[63122,63132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63134,63139]},{"pos":[63148,63160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63166,63188],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[63190,63288]},{"pos":[63348,63358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63360,63365]},{"content":"The property is set to this value; optional.","pos":[63368,63412]},{"pos":[63419,63431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[63433,63512]},{"pos":[63519,63526],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[63528,63565]},{"pos":[63571,63587],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[63589,63643]},{"pos":[63690,63700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[63702,63703]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[63706,63776]},{"content":"y","pos":[63788,63789]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[63792,63862]},{"pos":[63869,63881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[63883,63922]},{"pos":[63929,63936],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[63938,64019]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[64020,64124]},{"pos":[64130,64149],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[64215,64225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64227,64232]},{"content":"mode","pos":[64246,64250]},{"pos":[64259,64271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64277,64300],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[64362,64372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[64374,64378]},{"pos":[64387,64399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64405,64429],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[64483,64493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64495,64500]},{"pos":[64509,64521],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64527,64549],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[64551,64585]},{"pos":[64652,64662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[64664,64669]},{"content":"The number of lines to use to determine the height.","pos":[64672,64723]},{"content":"lines","pos":[64735,64740]},{"content":"The number of lines to use to determine the height.","pos":[64743,64794]},{"pos":[64801,64813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that has the width and height.","pos":[64815,64859]},{"pos":[64865,64887],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[64983,64993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[64995,65007]},{"content":"fieldId","pos":[65021,65028]},{"content":"arrayIndex","pos":[65042,65052]},{"pos":[65061,65073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65079,65096],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[65155,65165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[65167,65174]},{"pos":[65183,65195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65201,65215],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[65217,65256]},{"pos":[65300,65310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65312,65317]},{"pos":[65326,65338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[65340,65394]},{"pos":[65400,65414],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[65478,65488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65490,65495]},{"content":"mode","pos":[65509,65513]},{"pos":[65522,65534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65540,65558],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[65621,65631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[65633,65637]},{"pos":[65646,65658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65664,65682],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[65747,65757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65759,65764]},{"content":"mode","pos":[65778,65782]},{"pos":[65791,65803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65809,65831],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[65892,65902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[65904,65908]},{"pos":[65917,65929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65935,65958],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[66011,66021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66023,66028]},{"pos":[66037,66049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66055,66074],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[66123,66133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66135,66140]},{"pos":[66149,66161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66167,66190],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[66192,66259]},{"pos":[66342,66352],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66354,66359]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[66362,66429]},{"pos":[66436,66448],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the configuration key that is assigned to the control.","pos":[66450,66514]},{"pos":[66521,66528],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[66530,66611]},{"pos":[66617,66642],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[66644,66740]},{"pos":[66785,66797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[66799,66885]},{"pos":[66892,66899],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[66901,66950]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[66951,67099]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[67100,67234]},{"pos":[67240,67255],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[67312,67322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[67324,67331]},{"pos":[67340,67352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67358,67377],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[67415,67427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67433,67450],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[67507,67517],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[67519,67528]},{"pos":[67537,67549],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67555,67578],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[67580,67705]},{"pos":[67758,67768],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67770,67775]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[67778,67852]},{"pos":[67859,67871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[67873,67985]},{"pos":[67992,67999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[68001,68128]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[68129,68222]},{"pos":[68228,68245],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[68247,68319]},{"pos":[68370,68380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68382,68387]},{"pos":[68396,68408],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[68410,68462]},{"pos":[68468,68488],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[68490,68638]},{"pos":[68688,68698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68700,68705]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[68708,68782]},{"pos":[68789,68801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the client, in Enterprise Portal, or in both.","pos":[68803,68909]},{"pos":[68915,68930],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[68932,69013]},{"pos":[69058,69068],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69070,69075]},{"content":"An Integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[69078,69156]},{"pos":[69163,69175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[69177,69237]},{"pos":[69244,69251],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the FormControl::dragLeave method , the FormControl::dragOver method, and the FormControl::dragOverEx method to specify the behavior.","pos":[69253,69390]},{"pos":[69396,69411],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[69413,69507]},{"pos":[69601,69611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[69613,69623]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[69626,69711]},{"content":"dragMode","pos":[69723,69731]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[69734,69819]},{"content":"x","pos":[69831,69832]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[69835,69920]},{"content":"y","pos":[69932,69933]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[69936,70021]},{"pos":[70028,70040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[70042,70107]},{"pos":[70113,70130],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[70132,70228]},{"pos":[70318,70328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[70330,70340]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[70343,70428]},{"content":"dragMode","pos":[70440,70448]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[70451,70536]},{"content":"x","pos":[70548,70549]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[70552,70637]},{"content":"y","pos":[70649,70650]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[70653,70738]},{"pos":[70745,70757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[70759,70824]},{"pos":[70830,70845],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[70847,70917]},{"pos":[70951,70963],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[70965,71096]},{"pos":[71102,71116],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[71118,71169]},{"pos":[71221,71231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71233,71238]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[71241,71313]},{"pos":[71320,71332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[71334,71382]},{"pos":[71389,71396],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[71398,71477]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[71478,71573]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[71574,71708]},{"pos":[71714,71731],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[71733,71821]},{"pos":[71874,71884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[71886,71889]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[71892,71962]},{"pos":[71969,71981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[71983,72050]},{"pos":[72056,72077],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[72079,72134]},{"pos":[72178,72190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[72192,72255]},{"pos":[72261,72274],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[72276,72315]},{"pos":[72368,72378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72380,72385]},{"content":"An Integer that indicates how the height is calculated; optional.","pos":[72388,72453]},{"content":"mode","pos":[72465,72469]},{"content":"An Integer that indicates how the height is calculated; optional.","pos":[72472,72537]},{"pos":[72544,72556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[72558,72594]},{"pos":[72601,72608],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[72610,72717]},{"content":"Mode.","pos":[72721,72726]},{"content":"Height calculation.","pos":[72740,72759]},{"content":"-1 Exact.","pos":[72947,72956]},{"content":"The exact height in pixels of the controls is used.","pos":[72966,73017]},{"content":"0 Auto.","pos":[73060,73067]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[73079,73168]},{"content":"1 Column height.","pos":[73173,73189]},{"content":"The layout of the form determines the height of the control.","pos":[73192,73252]},{"content":"The height and height calculation mode can be set separately.","pos":[73285,73346]},{"pos":[73352,73369],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[73371,73433]},{"pos":[73480,73490],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73492,73497]},{"content":"An Integer value that indicates how the control height is calculated; optional.","pos":[73500,73579]},{"pos":[73586,73598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[73600,73621]},{"pos":[73628,73635],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[73637,73691]},{"content":"Mode.","pos":[73695,73700]},{"content":"Height Calculation.","pos":[73712,73731]},{"content":"Exact.","pos":[73917,73923]},{"content":"The exact height in pixels of the controls is used.","pos":[73934,73985]},{"content":"Auto.","pos":[74028,74033]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[74045,74134]},{"content":"Column height.","pos":[74139,74153]},{"content":"The layout of the form determines the height of the control.","pos":[74156,74216]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[74249,74334]},{"pos":[74340,74358],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[74360,74399]},{"pos":[74447,74457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74459,74464]},{"content":"An Integer that specifies the height in pixels; optional.","pos":[74467,74524]},{"pos":[74531,74543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[74545,74566]},{"pos":[74573,74580],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[74582,74672]},{"pos":[74678,74694],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[74696,74736]},{"pos":[74771,74783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[74785,74873]},{"pos":[74880,74887],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[74889,74959]},{"pos":[74965,74980],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[74982,75086]},{"pos":[75131,75141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75143,75148]},{"content":"The value that is assigned as the help text for the control.","pos":[75151,75211]},{"pos":[75218,75230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[75232,75287]},{"pos":[75294,75301],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.The help text must not exceed 250 characters.","pos":[75303,75421]},{"pos":[75427,75445],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[75501,75511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75513,75518]},{"pos":[75527,75539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75545,75567],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[75569,75632]},{"pos":[75684,75694],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75696,75701]},{"content":"The value to assign as the HierarchyParent value of the control.","pos":[75704,75768]},{"pos":[75775,75787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[75789,75839]},{"pos":[75845,75856],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[75858,75903]},{"pos":[75933,75945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[75947,75974]},{"pos":[75981,75988],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[75990,76034]},{"pos":[76040,76058],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[76099,76111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76117,76135],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[76137,76203]},{"pos":[76244,76256],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[76258,76309]},{"pos":[76316,76323],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[76325,76393]},{"pos":[76399,76418],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[76420,76487]},{"pos":[76529,76541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[76543,76595]},{"pos":[76601,76626],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[76628,76729]},{"pos":[76798,76808],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[76810,76827]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[76830,76958]},{"pos":[76965,76977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[76979,77138]},{"pos":[77145,77152],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[77154,77231]},{"content":"FormAllowUserSetup::No 0","pos":[77571,77595]},{"content":"No changes can be made to the control.","pos":[77606,77644]},{"content":"Using this value for the neededSetupRights parameter always returns true.","pos":[77645,77718]},{"content":"FormAllowUserSetup::Restricted 1","pos":[77739,77771]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[77774,77866]},{"content":"The user cannot move the control.","pos":[77867,77900]},{"content":"FormAllowUserSetup::Yes 2","pos":[77907,77932]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[77942,78034]},{"content":"The user can also move the control.","pos":[78035,78070]},{"content":"This method returns true only if the AllowUserSetup property for the design and all parent containers allows for the level of access that is specified by the neededSetupRights parameter.","pos":[78074,78260]},{"pos":[78266,78278],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[78313,78325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78331,78342],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[78344,78408]},{"pos":[78459,78469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78471,78476]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[78479,78565]},{"content":"mode","pos":[78577,78581]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[78584,78670]},{"pos":[78677,78689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[78691,78742]},{"pos":[78748,78765],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[78829,78839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78841,78846]},{"content":"mode","pos":[78860,78864]},{"pos":[78873,78885],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78891,78912],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[78972,78982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[78984,78988]},{"pos":[78997,79009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79015,79037],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[79089,79099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79101,79106]},{"pos":[79115,79127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79133,79148],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[79150,79211]},{"pos":[79256,79266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79268,79273]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[79276,79362]},{"pos":[79369,79381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[79383,79439]},{"pos":[79445,79461],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[79463,79527]},{"pos":[79573,79583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79585,79590]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[79593,79674]},{"pos":[79681,79693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[79695,79746]},{"pos":[79752,79772],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[79774,79827]},{"pos":[79885,79895],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79897,79902]},{"content":"A Boolean value that indicates whether the control should be marked as a user-added control.","pos":[79905,79997]},{"pos":[80004,80016],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[80018,80091]},{"pos":[80097,80117],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[80119,80176]},{"pos":[80268,80278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[80280,80281]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[80284,80345]},{"content":"y","pos":[80357,80358]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[80361,80422]},{"content":"button","pos":[80434,80440]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[80443,80504]},{"content":"Ctrl","pos":[80516,80520]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[80523,80584]},{"content":"Shift","pos":[80596,80601]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[80604,80665]},{"pos":[80672,80684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[80686,80725]},{"pos":[80732,80739],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[80741,80834]},{"pos":[80840,80856],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[80858,80923]},{"pos":[81011,81021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[81023,81024]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[81027,81088]},{"content":"y","pos":[81100,81101]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[81104,81165]},{"content":"button","pos":[81177,81183]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[81186,81247]},{"content":"Ctrl","pos":[81259,81263]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[81266,81327]},{"content":"Shift","pos":[81339,81344]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[81347,81408]},{"pos":[81415,81427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[81429,81468]},{"pos":[81475,81482],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[81484,81577]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[81578,81713]},{"pos":[81719,81735],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[81737,81802]},{"pos":[81890,81900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[81902,81903]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[81906,81967]},{"content":"y","pos":[81979,81980]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[81983,82044]},{"content":"button","pos":[82056,82062]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[82065,82126]},{"content":"Ctrl","pos":[82138,82142]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[82145,82206]},{"content":"Shift","pos":[82218,82223]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[82226,82287]},{"pos":[82294,82306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[82308,82347]},{"pos":[82354,82361],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[82363,82456]},{"pos":[82462,82476],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[82478,82550]},{"pos":[82636,82646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[82648,82649]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[82652,82713]},{"content":"y","pos":[82725,82726]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[82729,82790]},{"content":"button","pos":[82802,82808]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[82811,82872]},{"content":"Ctrl","pos":[82884,82888]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[82891,82952]},{"content":"Shift","pos":[82964,82969]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[82972,83033]},{"pos":[83040,83052],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[83054,83093]},{"pos":[83100,83107],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[83109,83202]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[83203,83338]},{"pos":[83344,83362],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[83433,83443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[83445,83454]},{"content":"insertAfterId","pos":[83468,83481]},{"pos":[83490,83502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83508,83519],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[83521,83662]},{"pos":[83703,83713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83715,83720]},{"content":"The name to assign to the control.","pos":[83723,83757]},{"pos":[83764,83776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[83778,83846]},{"pos":[83853,83860],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[83862,83956]},{"content":"Begins with a letter.","pos":[83962,83983]},{"content":"Doesn't exceed 250 characters.","pos":[83988,84018]},{"content":"Can include numbers and underscore characters.","pos":[84023,84069]},{"content":"Cannot include punctuation or spaces.","pos":[84074,84111]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[84116,84234]},{"pos":[84240,84263],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[84316,84326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84328,84333]},{"pos":[84342,84354],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84360,84387],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[84439,84451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84457,84477],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[84479,84524]},{"pos":[84571,84583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[84585,84620]},{"pos":[84626,84641],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[84686,84696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84698,84703]},{"pos":[84712,84724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84730,84748],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[84813,84823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84825,84830]},{"content":"mode","pos":[84844,84848]},{"pos":[84857,84869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84875,84897],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[84958,84968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[84970,84974]},{"pos":[84983,84995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85001,85024],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[85077,85087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85089,85094]},{"pos":[85103,85115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85121,85139],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[85141,85200]},{"pos":[85268,85278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85280,85285]},{"content":"The ID of the security key to assign to the control; optional.","pos":[85288,85350]},{"pos":[85357,85369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[85371,85470]},{"pos":[85476,85498],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[85500,85540]},{"pos":[85595,85605],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[85607,85617]},{"content":"The ID of the menu to show.","pos":[85620,85647]},{"pos":[85654,85666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[85668,85727]},{"pos":[85733,85744],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[85746,85873]},{"pos":[85922,85932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85934,85939]},{"content":"The value to assign to the skip property of the control; optional.","pos":[85942,86008]},{"pos":[86015,86027],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[86029,86135]},{"pos":[86142,86149],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[86151,86346]},{"pos":[86352,86363],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[86418,86428],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[86430,86443]},{"pos":[86452,86464],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86470,86482],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[86524,86534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86536,86541]},{"pos":[86550,86562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86568,86582],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[86584,86627]},{"pos":[86660,86672],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[86674,86776]},{"pos":[86783,86790],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[86792,86864]},{"pos":[86870,86880],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[86882,86944]},{"pos":[86994,87004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87006,87011]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[87014,87098]},{"content":"mode","pos":[87110,87114]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[87117,87201]},{"pos":[87208,87220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[87222,87271]},{"pos":[87277,87293],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[87356,87366],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87368,87373]},{"content":"mode","pos":[87387,87391]},{"pos":[87400,87412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87418,87438],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[87497,87507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[87509,87513]},{"pos":[87522,87534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87540,87561],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[87612,87622],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87624,87629]},{"pos":[87638,87650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87656,87670],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[87672,87731]},{"pos":[87775,87785],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87787,87792]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[87795,87879]},{"pos":[87886,87898],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[87900,87954]},{"pos":[87960,87975],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[87977,88039]},{"pos":[88084,88094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88096,88101]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[88104,88183]},{"pos":[88190,88202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[88204,88253]},{"pos":[88259,88270],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[88311,88321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88323,88328]},{"pos":[88337,88349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88355,88382],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[88446,88456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[88458,88462]},{"pos":[88471,88483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88489,88504],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[88506,88549]},{"pos":[88594,88604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88606,88611]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[88614,88686]},{"pos":[88693,88705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[88707,88737]},{"pos":[88743,88762],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[88764,88812]},{"pos":[88861,88871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88873,88878]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[88881,88958]},{"pos":[88965,88977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[88979,89014]},{"pos":[89020,89040],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[89042,89101]},{"pos":[89151,89161],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89163,89168]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[89171,89259]},{"pos":[89266,89278],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[89280,89326]},{"pos":[89332,89350],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[89352,89435]},{"pos":[89483,89493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89495,89500]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[89503,89583]},{"pos":[89590,89602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[89604,89660]},{"pos":[89666,89683],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[89685,89737]},{"pos":[89784,89794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89796,89801]},{"content":"The user height for the control; optional.","pos":[89804,89846]},{"pos":[89853,89865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[89867,89906]},{"pos":[89912,89927],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[89929,90011]},{"pos":[90056,90066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90068,90073]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[90076,90155]},{"pos":[90162,90174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[90176,90231]},{"pos":[90238,90245],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[90247,90417]},{"content":"Right-clicking invokes a menu that enables the control to be hidden or displayed.","pos":[90418,90499]},{"content":"This method lets you programmatically determine and set the value.","pos":[90500,90566]},{"pos":[90572,90595],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[90597,90653]},{"pos":[90706,90716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90718,90723]},{"content":"The organization container to set for the control; optional.","pos":[90726,90786]},{"pos":[90793,90805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[90807,90850]},{"pos":[90856,90877],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[90879,90933]},{"pos":[90984,90994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90996,91001]},{"content":"The organization sibling to set for the control; optional.","pos":[91004,91062]},{"pos":[91069,91081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[91083,91124]},{"pos":[91130,91151],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[91153,91202]},{"pos":[91253,91263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91265,91270]},{"content":"The user label text to set for the control; optional.","pos":[91273,91326]},{"pos":[91333,91345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[91347,91383]},{"pos":[91389,91413],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[91415,91468]},{"pos":[91522,91532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91534,91539]},{"content":"The user security level to set for the control; optional.","pos":[91542,91599]},{"pos":[91606,91618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[91620,91660]},{"pos":[91666,91681],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[91683,91831]},{"pos":[91876,91886],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91888,91893]},{"content":"The value to assign to the userSkip property; optional.","pos":[91896,91951]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[91952,92047]},{"pos":[92054,92066],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[92068,92137]},{"pos":[92143,92159],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[92161,92212]},{"pos":[92258,92268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92270,92275]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[92278,92344]},{"pos":[92351,92363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[92365,92494]},{"pos":[92501,92508],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[92510,92604]},{"content":"For example, if the user has specified 30 characters as the width for the control, the return is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[92605,92716],"source":" For example, if the user has specified 30 characters as the width for the control, the return is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to invoke the setup form in which the character specification is made.","pos":[92717,92872]},{"pos":[92878,92898],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[92956,92966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92968,92973]},{"pos":[92982,92994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93000,93022],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[93024,93085]},{"pos":[93154,93164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93166,93171]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[93174,93251]},{"content":"mode","pos":[93263,93267]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[93270,93347]},{"pos":[93354,93366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[93368,93416]},{"pos":[93422,93448],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[93450,93509]},{"pos":[93574,93584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[93586,93590]},{"pos":[93599,93611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[93613,93667]},{"pos":[93673,93700],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[93702,93763]},{"pos":[93820,93830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93832,93837]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[93840,93918]},{"pos":[93925,93937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[93939,93987]},{"pos":[93993,94007],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[94009,94079]},{"pos":[94131,94141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[94143,94148]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[94151,94223]},{"pos":[94230,94242],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[94244,94293]},{"pos":[94299,94311],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[94313,94351]},{"pos":[94403,94413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[94415,94420]},{"content":"An Integer that indicates how the width is calculated; optional.","pos":[94423,94487]},{"content":"mode","pos":[94499,94503]},{"content":"An Integer that indicates how the width is calculated; optional.","pos":[94506,94570]},{"pos":[94577,94589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[94591,94626]},{"pos":[94633,94640],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[94642,94695]},{"content":"Calculate the width according to the following table:","pos":[94696,94749]},{"content":"Mode.","pos":[94753,94758]},{"content":"Width calculation.","pos":[94771,94789]},{"content":"-1 Exact.","pos":[94975,94984]},{"content":"The exact width in pixels of the controls is used.","pos":[94993,95043]},{"content":"0 Auto.","pos":[95086,95093]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[95104,95192]},{"content":"1 Column width.","pos":[95197,95212]},{"content":"The layout of the form determines the width of the control.","pos":[95215,95274]},{"content":"The width and width calculation mode can be set separately.","pos":[95307,95366]},{"pos":[95372,95388],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[95390,95452]},{"pos":[95498,95508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95510,95515]},{"content":"An Integer value that indicates how control width is calculated; optional.","pos":[95518,95592]},{"pos":[95599,95611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[95613,95674]},{"pos":[95681,95688],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[95690,95743]},{"content":"Mode.","pos":[95747,95752]},{"content":"Width Calculation.","pos":[95763,95781]},{"content":"Exact.","pos":[95965,95971]},{"content":"The exact width in pixels of the controls is used.","pos":[95981,96031]},{"content":"Auto.","pos":[96074,96079]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[96090,96178]},{"content":"Column width.","pos":[96183,96196]},{"content":"The layout of the form determines the width of the control.","pos":[96199,96258]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[96291,96374]},{"pos":[96380,96397],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[96399,96437]},{"pos":[96484,96494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96496,96501]},{"content":"An Integer that specifies the width in pixels; optional.","pos":[96504,96560]},{"pos":[96567,96579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[96581,96616]},{"pos":[96623,96630],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[96632,96705]},{"pos":[96711,96722],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[96724,96822]},{"pos":[96908,96918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[96920,96930]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[96933,97018]},{"content":"dragMode","pos":[97030,97038]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[97041,97126]},{"content":"x","pos":[97138,97139]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[97142,97227]},{"content":"y","pos":[97239,97240]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[97243,97328]},{"pos":[97334,97350],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[97352,97394]},{"pos":[97429,97442],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[97490,97500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[97502,97511]},{"pos":[97519,97535],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[97537,97633]},{"pos":[97668,97685],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[97687,97757]},{"pos":[97847,97857],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[97859,97860]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[97863,97924]},{"content":"y","pos":[97936,97937]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[97940,98001]},{"content":"button","pos":[98013,98019]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[98022,98083]},{"content":"Ctrl","pos":[98095,98099]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[98102,98163]},{"content":"Shift","pos":[98175,98180]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[98183,98244]},{"pos":[98250,98265],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[98267,98313]},{"pos":[98347,98364],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[98366,98420]},{"pos":[98456,98470],"content":"Method setArea","linkify":"Method setArea","nodes":[{"content":"Method setArea","pos":[0,14]}]},{"pos":[98512,98522],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"area","pos":[98524,98528]},{"pos":[98536,98550],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[98583,98599],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[98682,98692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[98694,98700]},{"content":"e","pos":[98714,98715]},{"pos":[98723,98740],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[98824,98834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[98836,98842]},{"content":"e","pos":[98856,98857]},{"pos":[98865,98879],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[98912,98926],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[99007,99017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[99019,99025]},{"content":"e","pos":[99039,99040]},{"pos":[99048,99066],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[99068,99139]},{"pos":[99190,99200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[99202,99211]},{"content":"The string value to use to filter data; optional.","pos":[99214,99263]},{"pos":[99269,99283],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[99285,99346]},{"pos":[99380,99387],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[99389,99517]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[99518,99622]},{"pos":[99628,99643],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[99645,99675]},{"pos":[99709,99726],"content":"Method tabChanged","linkify":"Method tabChanged","nodes":[{"content":"Method tabChanged","pos":[0,17]}]},{"content":"Is called when the active tab is changed.","pos":[99728,99769]},{"pos":[99816,99826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newTab","pos":[99828,99834]},{"pos":[99842,99860],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[99945,99955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[99957,99963]},{"content":"e","pos":[99977,99978]},{"pos":[99986,100007],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[100009,100030]},{"pos":[100070,100091],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[100093,100162]},{"pos":[100224,100234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[100236,100241]},{"content":"The preferred height of the control.","pos":[100244,100280]},{"content":"height","pos":[100292,100298]},{"content":"The preferred height of the control.","pos":[100301,100337]},{"pos":[100343,100372],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[100490,100500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[100502,100518]},{"content":"objectMethodToCall","pos":[100532,100550]},{"content":"overrideObject","pos":[100564,100578]},{"pos":[100586,100596],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[100598,100631]},{"pos":[100660,100683],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[100685,100726]},{"pos":[100768,100787],"content":"Method OnTabChanged","linkify":"Method OnTabChanged","nodes":[{"content":"Method OnTabChanged","pos":[0,19]}]},{"pos":[100873,100883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[100885,100891]},{"content":"e","pos":[100905,100906]},{"pos":[100914,100926],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[100928,100982]},{"pos":[101013,101024],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[101026,101078]},{"pos":[101108,101121],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[101123,101223]},{"pos":[101305,101315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[101317,101327]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[101330,101415]},{"content":"dragMode","pos":[101427,101435]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[101438,101523]},{"content":"x","pos":[101535,101536]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[101539,101624]},{"content":"y","pos":[101636,101637]},{"content":"An Integer value that indicates the vertical client coordinate of the mouse position.","pos":[101640,101725]},{"pos":[101731,101745],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[101747,101787]},{"pos":[101820,101832],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[101862,101892],"content":"Class FormActionPaneTabControl","linkify":"Class FormActionPaneTabControl","nodes":[{"content":"Class FormActionPaneTabControl","pos":[0,30]}]},{"pos":[101953,101960],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[101966,101974],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[101980,101987],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[101991,101997]},{"content":"Description","pos":[102109,102120]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[102533,102637],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[102804,102899],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[103075,103190],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[103346,103390],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[103617,103664],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[103888,103934],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[104006,104046]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[104159,104202],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[104277,104344]},{"content":"public boolean allowSysSetup()","pos":[104430,104460]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[104548,104631]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[104701,104741],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[104972,105010],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[105243,105282],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[105514,105551],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[105785,105834],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[105903,106001]},{"content":"public int beginDrag(int x, int y)","pos":[106056,106090]},{"content":"Called when the user starts to drag a form control.","pos":[106174,106225]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[106327,106384],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[106598,106649],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[106869,106912],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[107140,107194]},{"content":"Retrieves the size of the control.","pos":[107258,107292]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[107411,107496],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[107682,107728]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[107953,107986],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[108071,108110]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[108224,108279],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[108495,108547],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[108766,108822],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[109037,109087],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[109308,109350],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[109579,109617],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[109850,109922],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[109968,110035]},{"content":"public List configurationKeyEx()","pos":[110121,110153]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[110239,110335]},{"content":"public boolean contains(FormControl control)","pos":[110392,110436]},{"content":"public int controlCount()","pos":[110663,110688]},{"content":"public FormControl controlNum(int controlNo)","pos":[110934,110978]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[111205,111249],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[111323,111401]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[111476,111535],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[111747,111789],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[111865,111990]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[112018,112058],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[112136,112201]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[112289,112328],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[112407,112552]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[112560,112594],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[112678,112759]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[112831,112912]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[112949,113043]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[113102,113179]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[113220,113316]},{"content":"public str dragText()","pos":[113373,113394]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[113491,113561]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[113644,113685],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[113762,113813]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[113915,113957],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[114033,114121]},{"content":"public boolean hasUserSetting()","pos":[114186,114217]},{"content":"Indicates whether the control has custom user settings.","pos":[114304,114359]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[114457,114499],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[114575,114614]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114728,114764],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[114846,114908]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114999,115036],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[115117,115156]},{"content":"public str helpField()","pos":[115270,115292]},{"content":"Retrieves the Help text for the control.","pos":[115388,115428]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[115541,115575],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[115659,115763]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[115812,115857],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[116083,116124],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[116201,116264]},{"content":"public int hWnd()","pos":[116354,116371]},{"content":"Retrieves the Windows handle for the control.","pos":[116472,116517]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[116625,116664],"source":"public int imageLocation(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[116896,116924]},{"content":"public boolean isDisplayed()","pos":[117167,117195]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[117285,117351]},{"content":"public boolean isRestricted()","pos":[117438,117467]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[117556,117623]},{"content":"public boolean isSelected()","pos":[117709,117736]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[117980,118036]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[118098,118199]},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[118251,118283],"source":"public str keyTip(\\[str value\\])"},{"content":"public boolean leave()","pos":[118522,118544]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[118793,118833],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[118911,118975]},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[119064,119119],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[119335,119384],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119606,119647],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119877,119911],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[119995,120056]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[120148,120183],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[120266,120330]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[120419,120466],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[120537,120590]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[120690,120769]},{"content":"Is called when the control is double-clicked by the user.","pos":[120808,120865]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[120961,121036]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[121079,121144]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[121232,121307]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[121350,121415]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[121503,121576]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[121621,121693]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[121774,121834],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[122045,122075],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[122163,122292]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122316,122358],"source":"public int neededPermission(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[122587,122624],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122858,122898],"source":"public int normalResource(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[123129,123168]},{"content":"public FormControl parentControl()","pos":[123400,123434]},{"content":"Retrieves the parent control for the control.","pos":[123518,123563]},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[123671,123727],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[123942,123992],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[124213,124255],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[124484,124541],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[124602,124661]},{"content":"public int showContextMenu(int menuHandle)","pos":[124755,124797]},{"content":"Shows the shortcut menu for the control.","pos":[124873,124913]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[125026,125064],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[125144,125271]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[125297,125341],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public str toolTip()","pos":[125568,125588]},{"content":"Retrieves the tooltip text for the control.","pos":[125686,125729]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[125839,125878],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[125957,126019]},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[126110,126164],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[126381,126429],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[126652,126692],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[126923,126956],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[127041,127100]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[127194,127228],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[127312,127374]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[127465,127495],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[127736,127787]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128007,128041],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[128125,128168]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128278,128316],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[128396,128444]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128549,128588],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[128667,128726]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128820,128857],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[128938,129021]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[129091,129127],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[129209,129261]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[129362,129396],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[129480,129562]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[129633,129675],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[129751,129807]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[129904,129944],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[130022,130076]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[130175,130215],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[130293,130342]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[130446,130489],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[130564,130617]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[130717,130751],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[130835,130983]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[130988,131023],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[131106,131157]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[131259,131306],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[131530,131590],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[131648,131709]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[131801,131855],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[131919,131978]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132072,132118],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[132190,132251]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[132343,132384],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[132461,132531]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[132614,132655],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[132732,132770]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132885,132920],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[133003,133065]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[133156,133192],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[133274,133312]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[133427,133499],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setFocus()","pos":[133698,133720]},{"content":"Sets the focus on the control.","pos":[133816,133846]},{"content":"public void resetUserSetting()","pos":[133969,133999]},{"content":"Resets the user settings for the control.","pos":[134087,134128]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[134240,134313]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[134358,134456]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[134511,134588]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[134629,134699]},{"content":"public void gotFocus()","pos":[134782,134804]},{"content":"Indicates that the control has received focus.","pos":[134900,134946]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[135053,135127],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void prefColumnSize(int width, int height)","pos":[135324,135373]},{"content":"Specifies the preferred column width and height for the form control.","pos":[135442,135511]},{"content":"public void endDrag()","pos":[135595,135616]},{"content":"Is called when the user has finished dragging a form control.","pos":[135713,135774]},{"content":"public void mouseLeave()","pos":[135866,135890]},{"content":"Indicates that the mouse pointer has left the control.","pos":[135984,136038]},{"content":"public void inputSearch(str searchStr)","pos":[136137,136175]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[136255,136326]},{"content":"public void enter()","pos":[136408,136427]},{"content":"public void context()","pos":[136679,136700]},{"content":"Shows the shortcut menu for the control.","pos":[136797,136837]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[136950,137019]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[137068,137168]},{"content":"public void jumpRef()","pos":[137221,137242]},{"content":"private void OnSelectionChanged(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[137492,137575],"source":"private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[137763,137870],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void cut()","pos":[138034,138051]},{"content":"Cuts the contents of the control.","pos":[138152,138185]},{"content":"public void lostFocus()","pos":[138305,138328]},{"content":"Indicates that the control has lost focus.","pos":[138423,138465]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[138576,138651],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void copy()","pos":[138847,138865]},{"content":"Copies the contents of the control to the clipboard.","pos":[138965,139017]},{"content":"public void dragLeave()","pos":[139118,139141]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[139236,139332]},{"content":"public void selectionChanged()","pos":[139389,139419]},{"content":"public void displayControl()","pos":[139660,139688]},{"content":"Displays the control.","pos":[139778,139799]},{"content":"public void paste()","pos":[139931,139950]},{"content":"Pastes the contents of the clipboard into the control.","pos":[140049,140103]},{"content":"public void arrange()","pos":[140202,140223]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[140473,140549],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[140744,140781],"source":"public void filter(\\[str filterStr\\])"},{"pos":[141018,141035],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[141150,141160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[141162,141173]},{"content":"controlName","pos":[141187,141198]},{"content":"insertAfter","pos":[141212,141223]},{"pos":[141232,141244],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141250,141269],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[141375,141385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[141387,141399]},{"content":"controlName","pos":[141413,141424]},{"content":"insertAfter","pos":[141438,141449]},{"pos":[141458,141470],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141476,141495],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[141619,141629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[141631,141643]},{"content":"fieldId","pos":[141657,141664]},{"content":"insertAfter","pos":[141678,141689]},{"content":"arrayIndex","pos":[141703,141713]},{"pos":[141722,141734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141740,141757],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[141812,141822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141824,141829]},{"pos":[141838,141850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141856,141876],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[141934,141944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141946,141951]},{"pos":[141960,141972],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141978,141997],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[141999,142039]},{"pos":[142096,142106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142108,142113]},{"content":"The new value for the property; optional.","pos":[142116,142157]},{"pos":[142164,142176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[142178,142234]},{"pos":[142241,142248],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[142250,142329]},{"pos":[142335,142351],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[142353,142420]},{"pos":[142474,142484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142486,142491]},{"content":"The value to be assigned to the allowEdit property.","pos":[142494,142545]},{"pos":[142552,142564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[142566,142618]},{"pos":[142625,142632],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[142634,142760]},{"pos":[142766,142786],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[142788,142871]},{"pos":[142914,142926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[142928,142996]},{"pos":[143002,143023],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[143074,143084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143086,143091]},{"pos":[143100,143112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143118,143137],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[143186,143196],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143198,143203]},{"pos":[143212,143224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143230,143250],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[143300,143310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143312,143317]},{"pos":[143326,143338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143344,143362],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[143410,143420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143422,143427]},{"pos":[143436,143448],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[143454,143476],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[143478,143576]},{"pos":[143636,143646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143648,143653]},{"content":"The property is set to this value, if supplied.","pos":[143656,143703]},{"pos":[143710,143722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[143724,143803]},{"pos":[143810,143817],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[143819,143856]},{"pos":[143862,143878],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Called when the user starts to drag a form control.","pos":[143880,143931]},{"pos":[143978,143988],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[143990,143991]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[143994,144064]},{"content":"y","pos":[144076,144077]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[144080,144150]},{"pos":[144157,144169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[144171,144210]},{"pos":[144217,144224],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event will not be raised unless the DragDrop property is enabled for the control.","pos":[144226,144312]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[144313,144417]},{"pos":[144423,144442],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[144508,144518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144520,144525]},{"content":"mode","pos":[144539,144543]},{"pos":[144552,144564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[144570,144593],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[144655,144665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[144667,144671]},{"pos":[144680,144692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[144698,144722],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[144776,144786],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144788,144793]},{"pos":[144802,144814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[144820,144842],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[144844,144878]},{"pos":[144945,144955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[144957,144962]},{"content":"The number of lines to use to determine the height.","pos":[144965,145016]},{"content":"lines","pos":[145028,145033]},{"content":"The number of lines to use to determine the height.","pos":[145036,145087]},{"pos":[145094,145106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that has the width and height.","pos":[145108,145152]},{"pos":[145158,145180],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[145276,145286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[145288,145300]},{"content":"fieldId","pos":[145314,145321]},{"content":"arrayIndex","pos":[145335,145345]},{"pos":[145354,145366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[145372,145389],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[145448,145458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[145460,145467]},{"pos":[145476,145488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[145494,145508],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[145510,145549]},{"pos":[145593,145603],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[145605,145610]},{"pos":[145619,145631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[145633,145687]},{"pos":[145693,145707],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[145771,145781],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[145783,145788]},{"content":"mode","pos":[145802,145806]},{"pos":[145815,145827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[145833,145851],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[145914,145924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[145926,145930]},{"pos":[145939,145951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[145957,145975],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[146040,146050],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146052,146057]},{"content":"mode","pos":[146071,146075]},{"pos":[146084,146096],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[146102,146124],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[146185,146195],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[146197,146201]},{"pos":[146210,146222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[146228,146251],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[146304,146314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146316,146321]},{"pos":[146330,146342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[146348,146367],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[146416,146426],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146428,146433]},{"pos":[146442,146454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[146460,146483],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[146485,146552]},{"pos":[146635,146645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146647,146652]},{"content":"The ID of the configuration key being assigned to the control; optional.","pos":[146655,146727]},{"pos":[146734,146746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[146748,146820]},{"pos":[146827,146834],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[146836,146917]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[146918,147011]},{"pos":[147017,147042],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[147044,147140]},{"pos":[147185,147197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[147199,147285]},{"pos":[147292,147299],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[147301,147350]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[147351,147499]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[147500,147634]},{"pos":[147640,147655],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[147712,147722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[147724,147731]},{"pos":[147740,147752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147758,147777],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[147815,147827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147833,147850],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[147907,147917],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[147919,147928]},{"pos":[147937,147949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147955,147980],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[147982,148060]},{"pos":[148115,148125],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148127,148132]},{"content":"The string that contains the country/region codes to set; optional.","pos":[148135,148202]},{"pos":[148209,148221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[148223,148288]},{"pos":[148294,148326],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[148396,148406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148408,148413]},{"pos":[148422,148434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148440,148463],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[148465,148590]},{"pos":[148643,148653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148655,148660]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[148663,148737]},{"pos":[148744,148756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[148758,148870]},{"pos":[148877,148884],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[148886,149013]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[149014,149107]},{"pos":[149113,149130],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[149132,149197]},{"pos":[149248,149258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149260,149265]},{"pos":[149274,149286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[149288,149333]},{"pos":[149339,149359],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[149361,149506]},{"pos":[149556,149566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149568,149573]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[149576,149650]},{"pos":[149657,149669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the client, in Enterprise Portal, or in both.","pos":[149671,149777]},{"pos":[149783,149798],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[149800,149881]},{"pos":[149926,149936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149938,149943]},{"content":"An Integer data type that indicates whether the drag-and-drop behavior is enabled; optional.","pos":[149946,150038]},{"pos":[150045,150057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[150059,150119]},{"pos":[150126,150133],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the FormControl::dragLeave, FormControl::dragOver, and FormControl::dragOverEx methods to specify the behavior.","pos":[150135,150250]},{"pos":[150256,150271],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[150273,150367]},{"pos":[150461,150471],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[150473,150483]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[150486,150571]},{"content":"dragMode","pos":[150583,150591]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[150594,150679]},{"content":"x","pos":[150691,150692]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[150695,150780]},{"content":"y","pos":[150792,150793]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[150796,150881]},{"pos":[150888,150900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[150902,150967]},{"pos":[150973,150990],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[150992,151088]},{"pos":[151178,151188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[151190,151200]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[151203,151288]},{"content":"dragMode","pos":[151300,151308]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[151311,151396]},{"content":"x","pos":[151408,151409]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[151412,151497]},{"content":"y","pos":[151509,151510]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[151513,151598]},{"pos":[151605,151617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[151619,151684]},{"pos":[151690,151705],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[151707,151777]},{"pos":[151811,151823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[151825,151956]},{"pos":[151962,151976],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[151978,152029]},{"pos":[152081,152091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[152093,152098]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[152101,152173]},{"pos":[152180,152192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[152194,152242]},{"pos":[152249,152256],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[152258,152333]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[152334,152429]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[152430,152564]},{"pos":[152570,152587],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[152589,152677]},{"pos":[152730,152740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[152742,152745]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[152748,152818]},{"pos":[152825,152837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[152839,152906]},{"pos":[152912,152933],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[152935,152990]},{"pos":[153034,153046],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[153048,153111]},{"pos":[153117,153130],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[153132,153171]},{"pos":[153224,153234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153236,153241]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[153244,153319]},{"content":"mode","pos":[153331,153335]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[153338,153413]},{"pos":[153420,153432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[153434,153470]},{"pos":[153477,153484],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[153486,153539]},{"content":"Calculate the height according to the following table:","pos":[153540,153594]},{"content":"Mode.","pos":[153598,153603]},{"content":"Height calculation.","pos":[153617,153636]},{"content":"-1 Exact.","pos":[153824,153833]},{"content":"The exact height in pixels of the controls is used.","pos":[153843,153894]},{"content":"0 Auto.","pos":[153937,153944]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[153956,154045]},{"content":"1 Column height.","pos":[154050,154066]},{"content":"The layout of the form determines the height of the control.","pos":[154069,154129]},{"content":"The height and height calculation mode can be set separately.","pos":[154162,154223]},{"pos":[154229,154246],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[154248,154310]},{"pos":[154357,154367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154369,154374]},{"content":"An Integer data type value that indicates how control height is calculated; optional.","pos":[154377,154462]},{"pos":[154469,154481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[154483,154504]},{"pos":[154511,154518],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[154520,154574]},{"content":"Mode.","pos":[154578,154583]},{"content":"Height Calculation.","pos":[154595,154614]},{"content":"Exact.","pos":[154800,154806]},{"content":"The exact height in pixels of the controls is used.","pos":[154817,154868]},{"content":"Auto.","pos":[154911,154916]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[154928,155017]},{"content":"Column height.","pos":[155022,155036]},{"content":"The layout of the form determines the height of the control.","pos":[155039,155099]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[155132,155217]},{"pos":[155223,155241],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[155243,155282]},{"pos":[155330,155340],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155342,155347]},{"content":"An Integer data type that specifies the height in pixels; optional.","pos":[155350,155417]},{"pos":[155424,155436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[155438,155459]},{"pos":[155466,155473],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[155475,155565]},{"pos":[155571,155587],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[155589,155629]},{"pos":[155664,155676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[155678,155766]},{"pos":[155773,155780],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[155782,155852]},{"pos":[155858,155873],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[155875,155979]},{"pos":[156024,156034],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156036,156041]},{"content":"The value that is assigned as the help text for the control.","pos":[156044,156104]},{"pos":[156111,156123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[156125,156180]},{"pos":[156187,156194],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[156196,156264]},{"content":"The help text must not exceed 250 characters.","pos":[156265,156310]},{"pos":[156316,156334],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[156390,156400],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156402,156407]},{"pos":[156416,156428],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156434,156456],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[156458,156521]},{"pos":[156573,156583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156585,156590]},{"content":"The value to assign as the HierarchyParent value of the control.","pos":[156593,156657]},{"pos":[156664,156676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[156678,156728]},{"pos":[156734,156745],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[156747,156792]},{"pos":[156822,156834],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[156836,156863]},{"pos":[156870,156877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[156879,156923]},{"pos":[156929,156949],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[156999,157009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157011,157016]},{"pos":[157025,157037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157043,157061],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[157102,157114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157120,157138],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[157140,157206]},{"pos":[157247,157259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[157261,157312]},{"pos":[157319,157326],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[157328,157396]},{"pos":[157402,157421],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[157423,157490]},{"pos":[157532,157544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[157546,157598]},{"pos":[157604,157621],"content":"Method isSelected","linkify":"Method isSelected","nodes":[{"content":"Method isSelected","pos":[0,17]}]},{"pos":[157661,157673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157679,157704],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[157706,157807]},{"pos":[157876,157886],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[157888,157905]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[157908,158036]},{"pos":[158043,158055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[158057,158216]},{"pos":[158223,158230],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[158232,158309]},{"content":"FormAllowUserSetup::No 0","pos":[158649,158673]},{"content":"No changes can be made to the control.","pos":[158684,158722]},{"content":"Using this value for the neededSetupRights parameter always returns true.","pos":[158723,158796]},{"content":"FormAllowUserSetup::Restricted 1","pos":[158817,158849]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[158852,158944]},{"content":"The user cannot move the control.","pos":[158945,158978]},{"content":"FormAllowUserSetup::Yes 2","pos":[158985,159010]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[159020,159112]},{"content":"The user can also move the control.","pos":[159113,159148]},{"content":"This method returns true only if the AllowUserSetup property for the design and all parent containers allows for the level of access that is specified by the neededSetupRights parameter.","pos":[159152,159338]},{"pos":[159344,159357],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[159400,159410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159412,159417]},{"pos":[159426,159438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[159444,159456],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[159491,159503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[159509,159520],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[159522,159586]},{"pos":[159637,159647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159649,159654]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[159657,159743]},{"content":"mode","pos":[159755,159759]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[159762,159848]},{"pos":[159855,159867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[159869,159920]},{"pos":[159926,159943],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[160007,160017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160019,160024]},{"content":"mode","pos":[160038,160042]},{"pos":[160051,160063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[160069,160090],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[160150,160160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[160162,160166]},{"pos":[160175,160187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[160193,160215],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[160267,160277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160279,160284]},{"pos":[160293,160305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[160311,160326],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[160328,160389]},{"pos":[160434,160444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160446,160451]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[160454,160540]},{"pos":[160547,160559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[160561,160617]},{"pos":[160623,160639],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[160641,160705]},{"pos":[160751,160761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160763,160768]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[160771,160852]},{"pos":[160859,160871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[160873,160924]},{"pos":[160930,160950],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[160952,161005]},{"pos":[161063,161073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[161075,161080]},{"content":"A Boolean value that indicates whether the control should be marked as a user-added control.","pos":[161083,161175]},{"pos":[161182,161194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[161196,161269]},{"pos":[161275,161295],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[161297,161354]},{"pos":[161446,161456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[161458,161459]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[161462,161523]},{"content":"y","pos":[161535,161536]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[161539,161600]},{"content":"button","pos":[161612,161618]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[161621,161682]},{"content":"Ctrl","pos":[161694,161698]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[161701,161762]},{"content":"Shift","pos":[161774,161779]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[161782,161843]},{"pos":[161850,161862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[161864,161903]},{"pos":[161910,161917],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[161919,162023]},{"pos":[162029,162045],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[162047,162112]},{"pos":[162200,162210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[162212,162213]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[162216,162277]},{"content":"y","pos":[162289,162290]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[162293,162354]},{"content":"button","pos":[162366,162372]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[162375,162436]},{"content":"Ctrl","pos":[162448,162452]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[162455,162516]},{"content":"Shift","pos":[162528,162533]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[162536,162597]},{"pos":[162604,162616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[162618,162657]},{"pos":[162664,162671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[162673,162766]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[162767,162902]},{"pos":[162908,162924],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[162926,162991]},{"pos":[163079,163089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[163091,163092]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[163095,163156]},{"content":"y","pos":[163168,163169]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[163172,163233]},{"content":"button","pos":[163245,163251]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[163254,163315]},{"content":"Ctrl","pos":[163327,163331]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[163334,163395]},{"content":"Shift","pos":[163407,163412]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[163415,163476]},{"pos":[163483,163495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[163497,163536]},{"pos":[163543,163550],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[163552,163645]},{"pos":[163651,163665],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[163667,163739]},{"pos":[163825,163835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[163837,163838]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[163841,163902]},{"content":"y","pos":[163914,163915]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[163918,163979]},{"content":"button","pos":[163991,163997]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[164000,164061]},{"content":"Ctrl","pos":[164073,164077]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[164080,164141]},{"content":"Shift","pos":[164153,164158]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[164161,164222]},{"pos":[164229,164241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[164243,164282]},{"pos":[164289,164296],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[164298,164391]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[164392,164527]},{"pos":[164533,164551],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[164622,164632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[164634,164643]},{"content":"insertAfterId","pos":[164657,164670]},{"pos":[164679,164691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[164697,164708],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[164710,164839]},{"pos":[164880,164890],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[164892,164897]},{"content":"The name assigned to the control.","pos":[164900,164933]},{"pos":[164940,164952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name used in code to identify an application object.","pos":[164954,165010]},{"pos":[165017,165024],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[165026,165120]},{"content":"Begins with a letter.","pos":[165126,165147]},{"content":"Doesn't exceed 250 characters.","pos":[165152,165182]},{"content":"Can include numbers and underscore characters.","pos":[165187,165233]},{"content":"Cannot include punctuation or spaces.","pos":[165238,165275]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.","pos":[165280,165410]},{"pos":[165416,165439],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[165492,165502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165504,165509]},{"pos":[165518,165530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165536,165554],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[165602,165612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165614,165619]},{"pos":[165628,165640],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165646,165667],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[165718,165728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165730,165735]},{"pos":[165744,165756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165762,165789],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[165841,165853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165859,165879],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[165881,165926]},{"pos":[165973,165985],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[165987,166022]},{"pos":[166028,166046],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[166111,166121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166123,166128]},{"content":"mode","pos":[166142,166146]},{"pos":[166155,166167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166173,166195],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[166256,166266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[166268,166272]},{"pos":[166281,166293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166299,166322],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[166375,166385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166387,166392]},{"pos":[166401,166413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166419,166437],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[166439,166498]},{"pos":[166566,166576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166578,166583]},{"content":"The ID of the security key to assign to the control; optional.","pos":[166586,166648]},{"pos":[166655,166667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[166669,166768]},{"pos":[166774,166796],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[166798,166838]},{"pos":[166893,166903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[166905,166915]},{"content":"The ID of the menu to show.","pos":[166918,166945]},{"pos":[166952,166964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[166966,167025]},{"pos":[167031,167042],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[167044,167171]},{"pos":[167220,167230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[167232,167237]},{"content":"The value to assign to the skip property of the control; optional.","pos":[167240,167306]},{"pos":[167313,167325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[167327,167433]},{"pos":[167440,167447],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[167449,167644]},{"pos":[167650,167661],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[167716,167726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[167728,167741]},{"pos":[167750,167762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167768,167782],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[167784,167827]},{"pos":[167860,167872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[167874,167976]},{"pos":[167983,167990],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[167992,168064]},{"pos":[168070,168080],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[168082,168144]},{"pos":[168194,168204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168206,168211]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[168214,168298]},{"content":"mode","pos":[168310,168314]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[168317,168401]},{"pos":[168408,168420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[168422,168471]},{"pos":[168477,168493],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[168556,168566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168568,168573]},{"content":"mode","pos":[168587,168591]},{"pos":[168600,168612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168618,168638],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[168697,168707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[168709,168713]},{"pos":[168722,168734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168740,168761],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[168812,168822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168824,168829]},{"pos":[168838,168850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168856,168870],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[168872,168931]},{"pos":[168975,168985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168987,168992]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[168995,169079]},{"pos":[169086,169098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[169100,169154]},{"pos":[169160,169175],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[169177,169239]},{"pos":[169284,169294],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[169296,169301]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[169304,169383]},{"pos":[169390,169402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[169404,169453]},{"pos":[169459,169470],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[169511,169521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[169523,169528]},{"pos":[169537,169549],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169555,169582],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[169646,169656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[169658,169662]},{"pos":[169671,169683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169689,169704],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[169706,169749]},{"pos":[169794,169804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[169806,169811]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[169814,169886]},{"pos":[169893,169905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[169907,169937]},{"pos":[169943,169962],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[169964,170012]},{"pos":[170061,170071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170073,170078]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[170081,170158]},{"pos":[170165,170177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[170179,170214]},{"pos":[170220,170240],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[170242,170301]},{"pos":[170351,170361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170363,170368]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[170371,170459]},{"pos":[170466,170478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[170480,170526]},{"pos":[170532,170550],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[170552,170635]},{"pos":[170683,170693],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170695,170700]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[170703,170783]},{"pos":[170790,170802],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[170804,170860]},{"pos":[170866,170883],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[170885,170937]},{"pos":[170984,170994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170996,171001]},{"content":"The user height for the control; optional.","pos":[171004,171046]},{"pos":[171053,171065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[171067,171106]},{"pos":[171112,171127],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[171129,171211]},{"pos":[171256,171266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171268,171273]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[171276,171355]},{"pos":[171362,171374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[171376,171431]},{"pos":[171438,171445],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[171447,171617]},{"content":"Right-clicking invokes a menu that enables the control to be hidden or displayed.","pos":[171618,171699]},{"content":"This method lets you programmatically determine and set the value.","pos":[171700,171766]},{"pos":[171772,171795],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[171797,171853]},{"pos":[171906,171916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171918,171923]},{"content":"The organization container to set for the control; optional.","pos":[171926,171986]},{"pos":[171993,172005],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[172007,172050]},{"pos":[172056,172077],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[172079,172133]},{"pos":[172184,172194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172196,172201]},{"content":"The organization sibling to set for the control; optional.","pos":[172204,172262]},{"pos":[172269,172281],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[172283,172324]},{"pos":[172330,172351],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[172353,172402]},{"pos":[172453,172463],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172465,172470]},{"content":"The user label text to set for the control; optional.","pos":[172473,172526]},{"pos":[172533,172545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[172547,172583]},{"pos":[172589,172613],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[172615,172668]},{"pos":[172722,172732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172734,172739]},{"content":"The user security level to set for the control; optional.","pos":[172742,172799]},{"pos":[172806,172818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[172820,172860]},{"pos":[172866,172881],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[172883,173031]},{"pos":[173076,173086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[173088,173093]},{"content":"The value to assign to the userSkip property; optional.","pos":[173096,173151]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[173152,173247]},{"pos":[173254,173266],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[173268,173337]},{"pos":[173343,173359],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[173361,173412]},{"pos":[173458,173468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[173470,173475]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[173478,173544]},{"pos":[173551,173563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[173565,173694]},{"pos":[173701,173708],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[173710,173804]},{"content":"For example, if the user has specified 30 characters as the width for the control, the return is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[173805,173916],"source":" For example, if the user has specified 30 characters as the width for the control, the return is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to invoke the setup form in which the character specification is made.","pos":[173917,174072]},{"pos":[174078,174098],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[174156,174166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[174168,174173]},{"pos":[174182,174194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174200,174222],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[174224,174285]},{"pos":[174354,174364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[174366,174371]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[174374,174451]},{"content":"mode","pos":[174463,174467]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[174470,174547]},{"pos":[174554,174566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[174568,174616]},{"pos":[174622,174648],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[174650,174709]},{"pos":[174774,174784],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[174786,174790]},{"pos":[174799,174811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[174813,174867]},{"pos":[174873,174900],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[174902,174963]},{"pos":[175020,175030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175032,175037]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[175040,175118]},{"pos":[175125,175137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[175139,175187]},{"pos":[175193,175207],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[175209,175279]},{"pos":[175331,175341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175343,175348]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[175351,175423]},{"pos":[175430,175442],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[175444,175493]},{"pos":[175499,175511],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[175513,175551]},{"pos":[175603,175613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175615,175620]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[175623,175697]},{"content":"mode","pos":[175709,175713]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[175716,175790]},{"pos":[175797,175809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[175811,175846]},{"pos":[175853,175860],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[175862,175915]},{"content":"Calculate the width according to the following table:","pos":[175916,175969]},{"content":"Mode.","pos":[175973,175978]},{"content":"Width calculation.","pos":[175991,176009]},{"content":"-1 Exact.","pos":[176195,176204]},{"content":"The exact width in pixels of the controls is used.","pos":[176213,176263]},{"content":"0 Auto.","pos":[176306,176313]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[176324,176412]},{"content":"1 Column width.","pos":[176417,176432]},{"content":"The layout of the form determines the width of the control.","pos":[176435,176494]},{"content":"The width and width calculation mode can be set separately.","pos":[176527,176586]},{"pos":[176592,176608],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[176610,176672]},{"pos":[176718,176728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[176730,176735]},{"content":"An Integer data type value that indicates how the control width is calculated; optional.","pos":[176738,176826]},{"pos":[176833,176845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[176847,176908]},{"pos":[176915,176922],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[176924,176977]},{"content":"Mode.","pos":[176981,176986]},{"content":"Width Calculation.","pos":[176997,177015]},{"content":"Exact.","pos":[177199,177205]},{"content":"The exact width in pixels of the controls is used.","pos":[177215,177265]},{"content":"Auto.","pos":[177308,177313]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[177324,177412]},{"content":"Column width.","pos":[177417,177430]},{"content":"The layout of the form determines the width of the control.","pos":[177433,177492]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[177525,177608]},{"pos":[177614,177631],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[177633,177671]},{"pos":[177718,177728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177730,177735]},{"content":"An Integer data type that specifies the width in pixels; optional.","pos":[177738,177804]},{"pos":[177811,177823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[177825,177860]},{"pos":[177867,177874],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[177876,177949]},{"pos":[177955,177969],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[178050,178060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[178062,178068]},{"content":"e","pos":[178082,178083]},{"pos":[178091,178106],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[178108,178138]},{"pos":[178172,178195],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[178197,178238]},{"pos":[178280,178291],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[178293,178391]},{"pos":[178477,178487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[178489,178499]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[178502,178587]},{"content":"dragMode","pos":[178599,178607]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[178610,178695]},{"content":"x","pos":[178707,178708]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[178711,178796]},{"content":"y","pos":[178808,178809]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[178812,178897]},{"pos":[178903,178920],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[178922,178992]},{"pos":[179082,179092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[179094,179095]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[179098,179159]},{"content":"y","pos":[179171,179172]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[179175,179236]},{"content":"button","pos":[179248,179254]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[179257,179318]},{"content":"Ctrl","pos":[179330,179334]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[179337,179398]},{"content":"Shift","pos":[179410,179415]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[179418,179479]},{"pos":[179485,179500],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[179502,179548]},{"pos":[179582,179598],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[179681,179691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[179693,179699]},{"content":"e","pos":[179713,179714]},{"pos":[179722,179743],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[179745,179814]},{"pos":[179876,179886],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[179888,179893]},{"content":"The preferred height of the control.","pos":[179896,179932]},{"content":"height","pos":[179944,179950]},{"content":"The preferred height of the control.","pos":[179953,179989]},{"pos":[179995,180009],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[180011,180072]},{"pos":[180106,180113],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[180115,180243]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[180244,180348]},{"pos":[180354,180371],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[180373,180427]},{"pos":[180463,180481],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[180483,180554]},{"pos":[180605,180615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[180617,180626]},{"content":"The string value to use to filter data; optional.","pos":[180629,180678]},{"pos":[180684,180696],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[180727,180741],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[180743,180783]},{"pos":[180816,180829],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[180831,180931]},{"pos":[181013,181023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[181025,181035]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[181038,181123]},{"content":"dragMode","pos":[181135,181143]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[181146,181231]},{"content":"x","pos":[181243,181244]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[181247,181332]},{"content":"y","pos":[181344,181345]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[181348,181433]},{"pos":[181439,181453],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[181486,181511],"content":"Method OnSelectionChanged","linkify":"Method OnSelectionChanged","nodes":[{"content":"Method OnSelectionChanged","pos":[0,25]}]},{"pos":[181603,181613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[181615,181621]},{"content":"e","pos":[181635,181636]},{"pos":[181644,181673],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[181791,181801],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[181803,181819]},{"content":"objectMethodToCall","pos":[181833,181851]},{"content":"overrideObject","pos":[181865,181879]},{"pos":[181887,181897],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[181899,181932]},{"pos":[181961,181977],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[181979,182021]},{"pos":[182056,182073],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[182157,182167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[182169,182175]},{"content":"e","pos":[182189,182190]},{"pos":[182198,182209],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[182211,182263]},{"pos":[182293,182309],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[182311,182407]},{"pos":[182442,182465],"content":"Method selectionChanged","linkify":"Method selectionChanged","nodes":[{"content":"Method selectionChanged","pos":[0,23]}]},{"pos":[182507,182528],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[182530,182551]},{"pos":[182591,182603],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[182605,182659]},{"pos":[182690,182704],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[182737,182755],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[182840,182850],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[182852,182858]},{"content":"e","pos":[182872,182873]},{"pos":[182881,182894],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[182942,182952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[182954,182963]},{"pos":[182970,182994],"content":"Class FormActiveXControl","linkify":"Class FormActiveXControl","nodes":[{"content":"Class FormActiveXControl","pos":[0,24]}]},{"pos":[183049,183056],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[183062,183070],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[183076,183083],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[183087,183093]},{"content":"Description","pos":[183197,183208]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[183613,183659],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[183723,183763]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[183876,183919],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[183986,184053]},{"content":"public boolean allowSysSetup()","pos":[184139,184169]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[184249,184332]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[184402,184451],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[184512,184610]},{"content":"public int beginDrag(int x, int y)","pos":[184665,184699]},{"content":"Is called when the user starts to drag a form control.","pos":[184775,184829]},{"content":"public container calcControlSize(int chars, int lines)","pos":[184928,184982]},{"content":"Retrieves the size of the control.","pos":[185038,185072]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[185191,185224],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[185301,185340]},{"content":"public str className(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[185454,185489],"source":"public str className(\\[str value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[185717,185789],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[185827,185894]},{"content":"public List configurationKeyEx()","pos":[185980,186012]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[186090,186186]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[186243,186287],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[186353,186431]},{"content":"public str custom(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[186506,186538],"source":"public str custom(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[186769,186811],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[186879,187004]},{"content":"public AnyType dispatch(VarArg )","pos":[187032,187064]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[187295,187334],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[187405,187553]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[187558,187592],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[187668,187749]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[187821,187902]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[187931,188025]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[188084,188161]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[188194,188290]},{"content":"public str dragText()","pos":[188347,188368]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[188457,188527]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[188610,188651],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[188720,188771]},{"content":"public COMError error()","pos":[188873,188896]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[189136,189178],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[189246,189334]},{"content":"public boolean hasUserSetting()","pos":[189399,189430]},{"content":"Indicates whether the control has custom user settings.","pos":[189509,189564]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[189662,189704],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[189772,189811]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[189925,189961],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[190035,190097]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[190188,190225],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[190298,190337]},{"content":"public str helpField()","pos":[190451,190473]},{"content":"Retrieves the Help text for the control.","pos":[190561,190601]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[190714,190748],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[190824,190928]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[190977,191018],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[191087,191150]},{"content":"public int hWnd()","pos":[191240,191257]},{"content":"Retrieves the Windows handle for the control.","pos":[191350,191395]},{"content":"public ComInterface interface()","pos":[191503,191534]},{"content":"public boolean isContainer()","pos":[191766,191794]},{"content":"public boolean isDisplayed()","pos":[192029,192057]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[192139,192205]},{"content":"public boolean isRestricted()","pos":[192292,192321]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[192402,192469]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[192555,192611]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[192665,192764]},{"content":"public boolean leave()","pos":[192818,192840]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[193081,193121],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[193191,193255]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[193344,193378],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[193454,193515]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[193607,193642],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[193717,193781]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[193870,193917],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[193980,194033]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[194133,194212]},{"content":"Is called when the control is double-clicked by the user.","pos":[194243,194300]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[194396,194471]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[194506,194571]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[194659,194734]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[194769,194834]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[194922,194995]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[195032,195104]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[195185,195215],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[195295,195430]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[195448,195490],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[195711,195750]},{"content":"public FormControl parentControl()","pos":[195974,196008]},{"content":"Retrieves the parent control for the control.","pos":[196084,196129]},{"content":"public boolean rTLCapable(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[196237,196281],"source":"public boolean rTLCapable(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[196500,196557],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[196610,196669]},{"content":"public int showContextMenu(int menuHandle)","pos":[196763,196805]},{"content":"Shows the shortcut menu for the control.","pos":[196873,196913]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[197026,197064],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[197136,197263]},{"content":"public str toolTip()","pos":[197289,197309]},{"content":"Retrieves the tooltip text for the control.","pos":[197399,197442]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[197552,197591],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[197662,197724]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[197815,197848],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[197925,197984]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[198078,198112],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[198188,198250]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[198341,198371],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[198604,198655]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[198867,198901],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[198977,199020]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[199130,199168],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[199240,199288]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[199393,199432],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[199503,199562]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[199656,199693],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[199766,199849]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[199919,199955],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[200029,200081]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[200182,200216],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[200292,200374]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[200445,200487],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[200555,200611]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[200708,200748],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[200818,200872]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[200971,201011],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[201081,201130]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[201234,201277],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[201344,201397]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[201497,201531],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls on the form.","pos":[201607,201755]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[201760,201795],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[201870,201921]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[202023,202083],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[202133,202194]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[202286,202340],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[202396,202455]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[202549,202595],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[202659,202720]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[202812,202853],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[202922,202992]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[203075,203116],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[203185,203223]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[203338,203373],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[203448,203510]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[203601,203637],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[203711,203749]},{"content":"public void inputSearch(str searchStr)","pos":[203864,203902]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[203974,204045]},{"content":"public void copy()","pos":[204127,204145]},{"content":"Copies the contents of the control to the clipboard.","pos":[204237,204289]},{"content":"public void dragLeave()","pos":[204390,204413]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[204500,204596]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[204653,204726]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[204763,204861]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[204916,204993]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[205026,205096]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[205179,205286],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void resetUserSetting()","pos":[205442,205472]},{"content":"Resets the user settings for the control.","pos":[205552,205593]},{"content":"public void context()","pos":[205705,205726]},{"content":"Shows the shortcut menu for the control.","pos":[205815,205855]},{"content":"public void enter()","pos":[205968,205987]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[206231,206306],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void displayControl()","pos":[206494,206522]},{"content":"Displays the control.","pos":[206604,206625]},{"content":"public void updateSize()","pos":[206757,206781]},{"content":"public void gotFocus()","pos":[207020,207042]},{"content":"Indicates that the control has received focus.","pos":[207130,207176]},{"content":"public void mouseLeave()","pos":[207283,207307]},{"content":"Is called when the user moves the mouse pointer out of the control area.","pos":[207393,207465]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[207546,207615]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[207656,207756]},{"content":"public void endDrag()","pos":[207809,207830]},{"content":"Is called when the user has finished dragging a form control.","pos":[207919,207980]},{"content":"public void cut()","pos":[208072,208089]},{"content":"Cuts the contents of the control.","pos":[208182,208215]},{"content":"public void paste()","pos":[208335,208354]},{"content":"Pastes the contents of the clipboard into the control.","pos":[208445,208499]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[208598,208672],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void prefColumnSize(int width, int height)","pos":[208861,208910]},{"content":"Specifies the preferred column width and height for the form control.","pos":[208971,209040]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[209124,209200],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[209387,209459],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setFocus()","pos":[209650,209672]},{"content":"Sets the focus on the control.","pos":[209760,209790]},{"content":"public void lostFocus()","pos":[209913,209936]},{"content":"Indicates that the control has lost focus.","pos":[210023,210065]},{"pos":[210179,210198],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[210200,210240]},{"pos":[210297,210307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210309,210314]},{"content":"The new value for the property; optional.","pos":[210317,210358]},{"pos":[210365,210377],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[210379,210435]},{"pos":[210442,210449],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[210451,210530]},{"pos":[210536,210552],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[210554,210621]},{"pos":[210675,210685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210687,210692]},{"content":"The value to be assigned to the allowEdit property.","pos":[210695,210746]},{"pos":[210753,210765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[210767,210819]},{"pos":[210826,210833],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[210835,210961]},{"pos":[210967,210987],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[210989,211072]},{"pos":[211115,211127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[211129,211197]},{"pos":[211203,211225],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[211227,211325]},{"pos":[211385,211395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211397,211402]},{"content":"The property is set to this value, if supplied.","pos":[211405,211452]},{"pos":[211459,211471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[211473,211552]},{"pos":[211559,211566],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[211568,211605]},{"pos":[211611,211627],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[211629,211683]},{"pos":[211730,211740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[211742,211743]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[211746,211816]},{"content":"y","pos":[211828,211829]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[211832,211902]},{"pos":[211909,211921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[211923,211962]},{"pos":[211969,211976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[211978,212059]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[212060,212164]},{"pos":[212170,212192],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[212194,212228]},{"pos":[212295,212305],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[212307,212312]},{"content":"The number of lines to use to determine the height.","pos":[212315,212366]},{"content":"lines","pos":[212378,212383]},{"content":"The number of lines to use to determine the height.","pos":[212386,212437]},{"pos":[212444,212456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that has the width and height.","pos":[212458,212502]},{"pos":[212508,212522],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[212524,212563]},{"pos":[212607,212617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212619,212624]},{"pos":[212633,212645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[212647,212701]},{"pos":[212707,212723],"content":"Method className","linkify":"Method className","nodes":[{"content":"Method className","pos":[0,16]}]},{"pos":[212769,212779],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212781,212786]},{"pos":[212795,212807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212813,212836],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[212838,212905]},{"pos":[212988,212998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[213000,213005]},{"content":"The ID of the configuration key that is being assigned to the control; optional.","pos":[213008,213088]},{"pos":[213095,213107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[213109,213181]},{"pos":[213188,213195],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[213197,213278]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[213279,213372]},{"pos":[213378,213403],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[213405,213501]},{"pos":[213546,213558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[213560,213646]},{"pos":[213653,213660],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[213662,213711]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[213712,213860]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[213861,213995]},{"pos":[214001,214026],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[214028,214106]},{"pos":[214161,214171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214173,214178]},{"content":"The string that contains the country/region codes to set; optional.","pos":[214181,214248]},{"pos":[214255,214267],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[214269,214334]},{"pos":[214340,214353],"content":"Method custom","linkify":"Method custom","nodes":[{"content":"Method custom","pos":[0,13]}]},{"pos":[214396,214406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214408,214413]},{"pos":[214422,214434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[214440,214463],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[214465,214590]},{"pos":[214643,214653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214655,214660]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[214663,214737]},{"pos":[214744,214756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[214758,214870]},{"pos":[214877,214884],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[214886,215013]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[215014,215107]},{"pos":[215113,215128],"content":"Method dispatch","linkify":"Method dispatch","nodes":[{"content":"Method dispatch","pos":[0,15]}]},{"pos":[215173,215183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[215194,215206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[215212,215232],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[215234,215382]},{"pos":[215432,215442],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[215444,215449]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[215452,215526]},{"pos":[215533,215545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the client, in Enterprise Portal, or in both.","pos":[215547,215653]},{"pos":[215659,215674],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[215676,215757]},{"pos":[215802,215812],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[215814,215819]},{"content":"An Integer data type that indicates whether the drag-and-drop behavior is enabled; optional.","pos":[215822,215914]},{"pos":[215921,215933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[215935,215995]},{"pos":[216002,216009],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the FormControl::dragLeave, FormControl::dragOver, and FormControl::dragOverEx methods to specify the behavior.","pos":[216011,216126]},{"pos":[216132,216147],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[216149,216243]},{"pos":[216337,216347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[216349,216359]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[216362,216447]},{"content":"dragMode","pos":[216459,216467]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[216470,216555]},{"content":"x","pos":[216567,216568]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[216571,216656]},{"content":"y","pos":[216668,216669]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[216672,216757]},{"pos":[216764,216776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[216778,216843]},{"pos":[216849,216866],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[216868,216964]},{"pos":[217054,217064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[217066,217076]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[217079,217164]},{"content":"dragMode","pos":[217176,217184]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[217187,217272]},{"content":"x","pos":[217284,217285]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[217288,217373]},{"content":"y","pos":[217385,217386]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[217389,217474]},{"pos":[217481,217493],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[217495,217560]},{"pos":[217566,217581],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[217583,217653]},{"pos":[217687,217699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[217701,217832]},{"pos":[217838,217852],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[217854,217905]},{"pos":[217957,217967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[217969,217974]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[217977,218049]},{"pos":[218056,218068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[218070,218118]},{"pos":[218125,218132],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[218134,218209]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[218210,218305]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[218306,218440]},{"pos":[218446,218458],"content":"Method error","linkify":"Method error","nodes":[{"content":"Method error","pos":[0,12]}]},{"pos":[218494,218506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[218512,218529],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[218531,218619]},{"pos":[218672,218682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[218684,218687]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[218690,218760]},{"pos":[218767,218779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[218781,218848]},{"pos":[218854,218875],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[218877,218932]},{"pos":[218976,218988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[218990,219053]},{"pos":[219059,219072],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[219074,219113]},{"pos":[219166,219176],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[219178,219183]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[219186,219261]},{"content":"mode","pos":[219273,219277]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[219280,219355]},{"pos":[219362,219374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[219376,219412]},{"pos":[219419,219426],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[219428,219535]},{"content":"Mode.","pos":[219539,219544]},{"content":"Height calculation.","pos":[219558,219577]},{"content":"-1 Exact.","pos":[219765,219774]},{"content":"The exact height in pixels of the controls is used.","pos":[219784,219835]},{"content":"0 Auto.","pos":[219878,219885]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[219897,219986]},{"content":"1 Column height.","pos":[219991,220007]},{"content":"The layout of the form determines the height of the control.","pos":[220010,220070]},{"content":"The height and height calculation mode can be set separately.","pos":[220103,220164]},{"pos":[220170,220187],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[220189,220251]},{"pos":[220298,220308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220310,220315]},{"content":"An Integer data type value that indicates how the control height is calculated; optional.","pos":[220318,220407]},{"pos":[220414,220426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[220428,220449]},{"pos":[220456,220463],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[220465,220519]},{"content":"Mode.","pos":[220523,220528]},{"content":"Height Calculation.","pos":[220540,220559]},{"content":"Exact.","pos":[220745,220751]},{"content":"The exact height in pixels of the controls is used.","pos":[220762,220813]},{"content":"Auto.","pos":[220856,220861]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[220873,220962]},{"content":"Column height.","pos":[220967,220981]},{"content":"The layout of the form determines the height of the control.","pos":[220984,221044]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[221077,221162]},{"pos":[221168,221186],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[221188,221227]},{"pos":[221275,221285],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221287,221292]},{"content":"An Integer data type that specifies the height in pixels; optional.","pos":[221295,221362]},{"pos":[221369,221381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[221383,221404]},{"pos":[221411,221418],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[221420,221510]},{"pos":[221516,221532],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[221534,221574]},{"pos":[221609,221621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[221623,221711]},{"pos":[221718,221725],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[221727,221797]},{"pos":[221803,221818],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[221820,221924]},{"pos":[221969,221979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221981,221986]},{"content":"The value that is assigned as the help text for the control.","pos":[221989,222049]},{"pos":[222056,222068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[222070,222125]},{"pos":[222132,222139],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[222141,222254]},{"pos":[222260,222282],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[222284,222347]},{"pos":[222399,222409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222411,222416]},{"content":"The value to assign as the HierarchyParent value of the control.","pos":[222419,222483]},{"pos":[222490,222502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[222504,222554]},{"pos":[222560,222571],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[222573,222618]},{"pos":[222648,222660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[222662,222689]},{"pos":[222696,222703],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[222705,222749]},{"pos":[222755,222771],"content":"Method interface","linkify":"Method interface","nodes":[{"content":"Method interface","pos":[0,16]}]},{"pos":[222815,222827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[222833,222851],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[222892,222904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[222910,222928],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[222930,222996]},{"pos":[223037,223049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[223051,223102]},{"pos":[223109,223116],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[223118,223186]},{"pos":[223192,223211],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[223213,223280]},{"pos":[223322,223334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[223336,223388]},{"pos":[223394,223419],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[223421,223520]},{"pos":[223589,223599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[223601,223618]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[223621,223749]},{"content":"For more information, see the “Remarks” section.","pos":[223750,223798]},{"pos":[223805,223817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent container allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[223819,223977]},{"pos":[223984,223991],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[223993,224070]},{"content":"FormAllowUserSetup::No 0","pos":[224408,224432]},{"content":"No changes can be made to the control.","pos":[224443,224481]},{"content":"Using this value for neededSetupRights always returns true.","pos":[224482,224541]},{"content":"FormAllowUserSetup::Restricted 1","pos":[224575,224607]},{"content":"The user can change the editable, visible, skip, label and width properties of the control.","pos":[224610,224701]},{"content":"The user cannot move the control.","pos":[224702,224735]},{"content":"FormAllowUserSetup::Yes 2","pos":[224742,224767]},{"content":"The user can change the editable, visible, skip, label and width properties of the control.","pos":[224777,224868]},{"content":"The user can also move the control.","pos":[224869,224904]},{"content":"This method returns true only if the AllowUserSetup property for the design and all parent containers is at least as high as the level that is specified by the neededSetupRights parameter.","pos":[224908,225096]},{"pos":[225102,225114],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[225149,225161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225167,225178],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[225180,225244]},{"pos":[225295,225305],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225307,225312]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[225315,225401]},{"content":"mode","pos":[225413,225417]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[225420,225506]},{"pos":[225513,225525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[225527,225578]},{"pos":[225584,225599],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[225601,225662]},{"pos":[225707,225717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225719,225724]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[225727,225813]},{"pos":[225820,225832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[225834,225890]},{"pos":[225896,225912],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[225914,225978]},{"pos":[226024,226034],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226036,226041]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[226044,226125]},{"pos":[226132,226144],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[226146,226197]},{"pos":[226203,226223],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[226225,226278]},{"pos":[226336,226346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226348,226353]},{"content":"A Boolean value that indicates whether the control should be marked as a user-added control.","pos":[226356,226448]},{"pos":[226455,226467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[226469,226542]},{"pos":[226548,226568],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[226570,226627]},{"pos":[226719,226729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[226731,226732]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[226735,226796]},{"content":"y","pos":[226808,226809]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[226812,226873]},{"content":"button","pos":[226885,226891]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[226894,226955]},{"content":"Ctrl","pos":[226967,226971]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[226974,227035]},{"content":"Shift","pos":[227047,227052]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[227055,227116]},{"pos":[227123,227135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[227137,227176]},{"pos":[227183,227190],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[227192,227296]},{"pos":[227302,227318],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[227320,227385]},{"pos":[227473,227483],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[227485,227486]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[227489,227550]},{"content":"y","pos":[227562,227563]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[227566,227627]},{"content":"button","pos":[227639,227645]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[227648,227709]},{"content":"Ctrl","pos":[227721,227725]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[227728,227789]},{"content":"Shift","pos":[227801,227806]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[227809,227870]},{"pos":[227877,227889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[227891,227930]},{"pos":[227937,227944],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[227946,228039]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[228040,228175]},{"pos":[228181,228197],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[228199,228264]},{"pos":[228352,228362],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[228364,228365]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[228368,228429]},{"content":"y","pos":[228441,228442]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[228445,228506]},{"content":"button","pos":[228518,228524]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[228527,228588]},{"content":"Ctrl","pos":[228600,228604]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[228607,228668]},{"content":"Shift","pos":[228680,228685]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[228688,228749]},{"pos":[228756,228768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[228770,228809]},{"pos":[228816,228823],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[228825,228929]},{"pos":[228935,228949],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[228951,229023]},{"pos":[229109,229119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[229121,229122]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[229125,229186]},{"content":"y","pos":[229198,229199]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[229202,229263]},{"content":"button","pos":[229275,229281]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[229284,229345]},{"content":"Ctrl","pos":[229357,229361]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[229364,229425]},{"content":"Shift","pos":[229437,229442]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[229445,229506]},{"pos":[229513,229525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[229527,229566]},{"pos":[229573,229580],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[229582,229675]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[229676,229811]},{"pos":[229817,229828],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[229830,229965]},{"pos":[230006,230016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[230018,230023]},{"content":"The name to assign to the control; optional.","pos":[230026,230070]},{"pos":[230077,230089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[230091,230155]},{"pos":[230162,230169],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[230171,230265]},{"content":"It must begin with a letter.","pos":[230271,230299]},{"content":"It cannot exceed 250 characters.","pos":[230304,230336]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[230341,230395],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[230400,230440]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[230445,230555]},{"pos":[230561,230584],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[230637,230647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[230649,230654]},{"pos":[230663,230675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[230681,230708],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[230760,230772],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[230778,230798],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[230800,230845]},{"pos":[230892,230904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[230906,230941]},{"pos":[230947,230964],"content":"Method rTLCapable","linkify":"Method rTLCapable","nodes":[{"content":"Method rTLCapable","pos":[0,17]}]},{"pos":[231019,231029],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[231031,231036]},{"pos":[231045,231057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[231063,231081],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[231083,231142]},{"pos":[231210,231220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[231222,231227]},{"content":"The ID of the security key to assign to the control; optional.","pos":[231230,231292]},{"pos":[231299,231311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[231313,231412]},{"pos":[231418,231440],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[231442,231482]},{"pos":[231537,231547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[231549,231559]},{"content":"The ID of the menu to show.","pos":[231562,231589]},{"pos":[231596,231608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[231610,231669]},{"pos":[231675,231686],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[231688,231815]},{"pos":[231864,231874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[231876,231881]},{"content":"The value to assign to the skip property of the control.","pos":[231884,231940]},{"pos":[231947,231959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[231961,232067]},{"pos":[232073,232087],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[232089,232132]},{"pos":[232165,232177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[232179,232281]},{"pos":[232288,232295],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[232297,232369]},{"pos":[232375,232385],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[232387,232449]},{"pos":[232499,232509],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[232511,232516]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[232519,232603]},{"content":"mode","pos":[232615,232619]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[232622,232706]},{"pos":[232713,232725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[232727,232776]},{"pos":[232782,232796],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[232798,232857]},{"pos":[232901,232911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[232913,232918]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[232921,233005]},{"pos":[233012,233024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[233026,233080]},{"pos":[233086,233101],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[233103,233165]},{"pos":[233210,233220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[233222,233227]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[233230,233309]},{"pos":[233316,233328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[233330,233379]},{"pos":[233385,233396],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[233437,233447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[233449,233454]},{"pos":[233463,233475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[233481,233508],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[233572,233582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[233584,233588]},{"pos":[233597,233609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[233615,233630],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[233632,233675]},{"pos":[233720,233730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[233732,233737]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[233740,233812]},{"pos":[233819,233831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[233833,233863]},{"pos":[233869,233888],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[233890,233938]},{"pos":[233987,233997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[233999,234004]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[234007,234084]},{"pos":[234091,234103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[234105,234140]},{"pos":[234146,234166],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[234168,234227]},{"pos":[234277,234287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234289,234294]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[234297,234385]},{"pos":[234392,234404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[234406,234452]},{"pos":[234458,234476],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[234478,234561]},{"pos":[234609,234619],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234621,234626]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[234629,234709]},{"pos":[234716,234728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[234730,234786]},{"pos":[234792,234809],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[234811,234863]},{"pos":[234910,234920],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234922,234927]},{"content":"The user height for the control; optional.","pos":[234930,234972]},{"pos":[234979,234991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[234993,235032]},{"pos":[235038,235053],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[235055,235137]},{"pos":[235182,235192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235194,235199]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[235202,235281]},{"pos":[235288,235300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[235302,235357]},{"pos":[235364,235371],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[235373,235543]},{"content":"Right-clicking invokes a menu that enables the control to be hidden or displayed.","pos":[235544,235625]},{"content":"This method lets you programmatically determine and set the value.","pos":[235626,235692]},{"pos":[235698,235721],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[235723,235779]},{"pos":[235832,235842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235844,235849]},{"content":"The organization container to set for the control; optional.","pos":[235852,235912]},{"pos":[235919,235931],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[235933,235976]},{"pos":[235982,236003],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[236005,236059]},{"pos":[236110,236120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236122,236127]},{"content":"The organization sibling to set for the control; optional.","pos":[236130,236188]},{"pos":[236195,236207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[236209,236250]},{"pos":[236256,236277],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[236279,236328]},{"pos":[236379,236389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236391,236396]},{"content":"The user label text to set for the control; optional.","pos":[236399,236452]},{"pos":[236459,236471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[236473,236509]},{"pos":[236515,236539],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[236541,236594]},{"pos":[236648,236658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236660,236665]},{"content":"The user security level to set for the control; optional.","pos":[236668,236725]},{"pos":[236732,236744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[236746,236786]},{"pos":[236792,236807],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls on the form.","pos":[236809,236957]},{"pos":[237002,237012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237014,237019]},{"content":"The value to assign to the userSkip property; optional.","pos":[237022,237077]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[237078,237173]},{"pos":[237180,237192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[237194,237263]},{"pos":[237269,237285],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[237287,237338]},{"pos":[237384,237394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237396,237401]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[237404,237470]},{"pos":[237477,237489],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[237491,237620]},{"pos":[237627,237634],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[237636,237730]},{"content":"For example, if the user has specified 30 characters as the width for the control, the return is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[237731,237842],"source":" For example, if the user has specified 30 characters as the width for the control, the return is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to invoke the setup form in which the character specification is made.","pos":[237843,237998]},{"pos":[238004,238026],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[238028,238089]},{"pos":[238158,238168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238170,238175]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[238178,238249]},{"content":"mode","pos":[238261,238265]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[238268,238339]},{"pos":[238346,238358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[238360,238408]},{"pos":[238414,238440],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[238442,238501]},{"pos":[238566,238576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[238578,238582]},{"pos":[238591,238603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[238605,238659]},{"pos":[238665,238692],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[238694,238755]},{"pos":[238812,238822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238824,238829]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[238832,238910]},{"pos":[238917,238929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[238931,238979]},{"pos":[238985,238999],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[239001,239071]},{"pos":[239123,239133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239135,239140]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[239143,239215]},{"pos":[239222,239234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[239236,239285]},{"pos":[239291,239303],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[239305,239343]},{"pos":[239395,239405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239407,239412]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[239415,239489]},{"content":"mode","pos":[239501,239505]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[239508,239582]},{"pos":[239589,239601],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[239603,239638]},{"pos":[239645,239652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[239654,239760]},{"content":"Mode.","pos":[239764,239769]},{"content":"Width calculation.","pos":[239782,239800]},{"content":"-1 Exact.","pos":[239986,239995]},{"content":"The exact width in pixels of the controls is used.","pos":[240004,240054]},{"content":"0 Auto.","pos":[240097,240104]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[240115,240203]},{"content":"1 Column width.","pos":[240208,240223]},{"content":"The layout of the form determines the width of the control.","pos":[240226,240285]},{"content":"The width and width calculation mode can be set separately.","pos":[240318,240377]},{"pos":[240383,240399],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[240401,240463]},{"pos":[240509,240519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[240521,240526]},{"content":"An Integer data type value that indicates how control width is calculated; optional.","pos":[240529,240613]},{"pos":[240620,240632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[240634,240695]},{"pos":[240702,240709],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[240711,240764]},{"content":"Mode.","pos":[240768,240773]},{"content":"Width Calculation.","pos":[240784,240802]},{"content":"Exact.","pos":[240986,240992]},{"content":"The exact width in pixels of the controls is used.","pos":[241002,241052]},{"content":"Auto.","pos":[241095,241100]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[241111,241199]},{"content":"Column width.","pos":[241204,241217]},{"content":"The layout of the form determines the width of the control.","pos":[241220,241279]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[241312,241395]},{"pos":[241401,241418],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[241420,241458]},{"pos":[241505,241515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[241517,241522]},{"content":"An Integer data type that specifies the width in pixels; optional.","pos":[241525,241591]},{"pos":[241598,241610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[241612,241647]},{"pos":[241654,241661],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[241663,241736]},{"pos":[241742,241760],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[241762,241833]},{"pos":[241884,241894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[241896,241905]},{"content":"The string value to use to filter data; optional.","pos":[241908,241957]},{"pos":[241963,241974],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[241976,242028]},{"pos":[242058,242074],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[242076,242172]},{"pos":[242207,242218],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[242220,242318]},{"pos":[242404,242414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[242416,242426]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[242429,242514]},{"content":"dragMode","pos":[242526,242534]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[242537,242622]},{"content":"x","pos":[242634,242635]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[242638,242723]},{"content":"y","pos":[242735,242736]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[242739,242824]},{"pos":[242830,242847],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[242849,242919]},{"pos":[243009,243019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[243021,243022]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243025,243086]},{"content":"y","pos":[243098,243099]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243102,243163]},{"content":"button","pos":[243175,243181]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243184,243245]},{"content":"Ctrl","pos":[243257,243261]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243264,243325]},{"content":"Shift","pos":[243337,243342]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243345,243406]},{"pos":[243412,243441],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[243559,243569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[243571,243587]},{"content":"objectMethodToCall","pos":[243601,243619]},{"content":"overrideObject","pos":[243633,243647]},{"pos":[243655,243678],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[243680,243721]},{"pos":[243763,243777],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[243779,243819]},{"pos":[243852,243864],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[243895,243912],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[243996,244006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[244008,244014]},{"content":"e","pos":[244028,244029]},{"pos":[244037,244058],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[244060,244081]},{"pos":[244121,244138],"content":"Method updateSize","linkify":"Method updateSize","nodes":[{"content":"Method updateSize","pos":[0,17]}]},{"pos":[244174,244189],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[244191,244237]},{"pos":[244271,244288],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer out of the control area.","pos":[244290,244362]},{"pos":[244399,244407],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example writes to the information log when the mouse pointer leaves the control.","pos":[244409,244503]},{"pos":[244677,244690],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[244692,244792]},{"pos":[244874,244884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[244886,244896]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[244899,244984]},{"content":"dragMode","pos":[244996,245004]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[245007,245092]},{"content":"x","pos":[245104,245105]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[245108,245193]},{"content":"y","pos":[245205,245206]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[245209,245294]},{"pos":[245300,245314],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[245316,245377]},{"pos":[245411,245418],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[245420,245548]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[245549,245653]},{"pos":[245659,245669],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[245671,245704]},{"pos":[245733,245745],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[245747,245801]},{"pos":[245832,245848],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[245931,245941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[245943,245949]},{"content":"e","pos":[245963,245964]},{"pos":[245972,245993],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[245995,246064]},{"pos":[246126,246136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[246138,246143]},{"content":"The preferred height of the control.","pos":[246146,246182]},{"content":"height","pos":[246194,246200]},{"content":"The preferred height of the control.","pos":[246203,246239]},{"pos":[246245,246263],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[246348,246358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[246360,246366]},{"content":"e","pos":[246380,246381]},{"pos":[246389,246403],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[246484,246494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[246496,246502]},{"content":"e","pos":[246516,246517]},{"pos":[246525,246540],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[246542,246572]},{"pos":[246606,246622],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[246624,246666]},{"pos":[246700,246724],"content":"Class FormAnimateControl","linkify":"Class FormAnimateControl","nodes":[{"content":"Class FormAnimateControl","pos":[0,24]}]},{"pos":[246779,246786],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[246792,246800],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[246806,246813],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[246817,246823]},{"content":"Description","pos":[246927,246938]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[247343,247389],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[247453,247493]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[247606,247649],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[247716,247783]},{"content":"public boolean allowSysSetup()","pos":[247869,247899]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[247979,248062]},{"content":"public str animateFile(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[248132,248169],"source":"public str animateFile(\\[str value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[248395,248444],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[248505,248603]},{"content":"public boolean autoPlay(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[248658,248700],"source":"public boolean autoPlay(\\[boolean value\\])"},{"content":"public int beginDrag(int x, int y)","pos":[248921,248955]},{"content":"Is called when the user starts to drag a form control.","pos":[249031,249085]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[249184,249216],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[249294,249350]},{"content":"public container calcControlSize(int chars, int lines)","pos":[249447,249501]},{"content":"Retrieves the size of the control.","pos":[249557,249591]},{"content":"public boolean center(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[249710,249750],"source":"public boolean center(\\[boolean value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[249973,250045],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[250083,250150]},{"content":"public List configurationKeyEx()","pos":[250236,250268]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[250346,250442]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[250499,250543],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[250609,250687]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[250762,250804],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[250872,250997]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[251025,251064],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[251135,251283]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[251288,251322],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[251398,251479]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[251551,251632]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[251661,251755]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[251814,251891]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[251924,252020]},{"content":"public str dragText()","pos":[252077,252098]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[252187,252257]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[252340,252381],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[252450,252501]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[252603,252645],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[252713,252801]},{"content":"public boolean hasUserSetting()","pos":[252866,252897]},{"content":"Indicates whether the control has custom user settings.","pos":[252976,253031]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[253129,253171],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[253239,253278]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[253392,253428],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[253502,253564]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[253655,253692],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[253765,253804]},{"content":"public str helpField()","pos":[253918,253940]},{"content":"Retrieves the Help text for the control.","pos":[254028,254068]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[254181,254215],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[254291,254395]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[254444,254485],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[254554,254617]},{"content":"public int hWnd()","pos":[254707,254724]},{"content":"Retrieves the Windows handle for the control.","pos":[254817,254862]},{"content":"public boolean isContainer()","pos":[254970,254998]},{"content":"public boolean isDisplayed()","pos":[255233,255261]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[255343,255409]},{"content":"public boolean isRestricted()","pos":[255496,255525]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[255606,255673]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[255759,255815]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[255869,255968]},{"content":"public boolean leave()","pos":[256022,256044]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[256285,256325],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[256395,256459]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[256548,256582],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[256658,256719]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[256811,256846],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[256921,256985]},{"content":"public int loops(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[257074,257105],"source":"public int loops(\\[int value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[257337,257384],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[257447,257500]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[257600,257679]},{"content":"Is called when the control is double-clicked by the user.","pos":[257710,257767]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[257863,257938]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[257973,258038]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[258126,258201]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[258236,258301]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[258389,258462]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[258499,258571]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[258652,258682],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[258762,258897]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[258915,258957],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[259178,259217]},{"content":"public FormControl parentControl()","pos":[259441,259475]},{"content":"Retrieves the parent control for the control.","pos":[259551,259596]},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[259704,259761],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[259814,259873]},{"content":"public int showContextMenu(int menuHandle)","pos":[259967,260009]},{"content":"Shows the shortcut menu for the control.","pos":[260077,260117]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[260230,260268],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[260340,260467]},{"content":"public str toolTip()","pos":[260493,260513]},{"content":"Retrieves the tooltip text for the control.","pos":[260603,260646]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[260756,260795],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[260866,260928]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[261019,261052],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[261129,261188]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[261282,261316],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[261392,261454]},{"content":"public boolean transparent(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[261545,261590],"source":"public boolean transparent(\\[boolean value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[261808,261838],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[262071,262122]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[262334,262368],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[262444,262487]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[262597,262635],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[262707,262755]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[262860,262899],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[262970,263029]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[263123,263160],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[263233,263316]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[263386,263422],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[263496,263548]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[263649,263683],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[263759,263841]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[263912,263954],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[264022,264078]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[264175,264215],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[264285,264339]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[264438,264478],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[264548,264597]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[264701,264744],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[264811,264864]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[264964,264998],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[265074,265222]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[265227,265262],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[265337,265388]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[265490,265550],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[265600,265661]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[265753,265807],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[265863,265922]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[266016,266062],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[266126,266187]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[266279,266320],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[266389,266459]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[266542,266583],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[266652,266690]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[266805,266840],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[266915,266977]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[267068,267104],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[267178,267216]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[267331,267405],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void inputSearch(str searchStr)","pos":[267594,267632]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[267704,267775]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[267857,267926]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[267967,268067]},{"content":"public void lostFocus()","pos":[268120,268143]},{"content":"Indicates that the control has lost focus.","pos":[268230,268272]},{"content":"public void setFocus()","pos":[268383,268405]},{"content":"Sets the focus on the control.","pos":[268493,268523]},{"content":"public void prefColumnSize(int width, int height)","pos":[268646,268695]},{"content":"Specifies the preferred column width and height for the form control.","pos":[268756,268825]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[268909,268986]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[269019,269089]},{"content":"public void paste()","pos":[269172,269191]},{"content":"Pastes the contents of the clipboard into the control.","pos":[269282,269336]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[269435,269508]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[269545,269643]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[269698,269770],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void enter()","pos":[269961,269980]},{"content":"public void mouseLeave()","pos":[270224,270248]},{"content":"Indicates that the mouse pointer has left the control.","pos":[270334,270388]},{"content":"public void dragLeave()","pos":[270487,270510]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[270597,270693]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[270750,270826],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void copy()","pos":[271013,271031]},{"content":"Copies the contents of the control to the clipboard.","pos":[271123,271175]},{"content":"public void context()","pos":[271276,271297]},{"content":"Shows the shortcut menu for the control.","pos":[271386,271426]},{"content":"public void endDrag()","pos":[271539,271560]},{"content":"Is called when the user has finished dragging a form control.","pos":[271649,271710]},{"content":"public void resetUserSetting()","pos":[271802,271832]},{"content":"Resets the user settings for the control.","pos":[271912,271953]},{"content":"public void play(<ph id=\"ph1\">\\[</ph>int firstFrame<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int lastFrame<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int loops<ph id=\"ph6\">\\]</ph>)","pos":[272065,272135],"source":"public void play(\\[int firstFrame\\], \\[int lastFrame\\], \\[int loops\\])"},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[272328,272403],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void displayControl()","pos":[272591,272619]},{"content":"Displays the control.","pos":[272701,272722]},{"content":"public void gotFocus()","pos":[272854,272876]},{"content":"Indicates that the control has received focus.","pos":[272964,273010]},{"content":"public void cut()","pos":[273117,273134]},{"content":"Cuts the contents of the control.","pos":[273227,273260]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[273380,273487],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void stop()","pos":[273643,273661]},{"pos":[273909,273928],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[273930,273970]},{"pos":[274027,274037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274039,274044]},{"content":"The new value for the property; optional.","pos":[274047,274088]},{"pos":[274095,274107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[274109,274165]},{"pos":[274172,274179],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[274181,274260]},{"pos":[274266,274282],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[274284,274351]},{"pos":[274405,274415],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274417,274422]},{"content":"The value to be assigned to the allowEdit property.","pos":[274425,274476]},{"pos":[274483,274495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[274497,274549]},{"pos":[274556,274563],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[274565,274691]},{"pos":[274697,274717],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[274719,274802]},{"pos":[274845,274857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[274859,274927]},{"pos":[274933,274951],"content":"Method animateFile","linkify":"Method animateFile","nodes":[{"content":"Method animateFile","pos":[0,18]}]},{"pos":[274999,275009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275011,275016]},{"pos":[275025,275037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275043,275065],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[275067,275165]},{"pos":[275225,275235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275237,275242]},{"content":"The property is set to this value, if supplied.","pos":[275245,275292]},{"pos":[275299,275311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[275313,275392]},{"pos":[275399,275406],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[275408,275445]},{"pos":[275451,275466],"content":"Method autoPlay","linkify":"Method autoPlay","nodes":[{"content":"Method autoPlay","pos":[0,15]}]},{"pos":[275519,275529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275531,275536]},{"pos":[275545,275557],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275563,275579],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[275581,275635]},{"pos":[275682,275692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[275694,275695]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[275698,275768]},{"content":"y","pos":[275780,275781]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[275784,275854]},{"pos":[275861,275873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[275875,275914]},{"pos":[275921,275928],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[275930,276011]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[276012,276116]},{"pos":[276122,276135],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[276137,276193]},{"pos":[276236,276246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276248,276253]},{"pos":[276262,276274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[276276,276320]},{"pos":[276327,276334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[276336,276428]},{"content":"Value.","pos":[276432,276438]},{"content":"Description.","pos":[276441,276453]},{"content":"0","pos":[276484,276485]},{"content":"Auto.","pos":[276493,276498]},{"content":"1","pos":[276510,276511]},{"content":"3D.","pos":[276519,276522]},{"content":"2","pos":[276536,276537]},{"content":"Single line.","pos":[276545,276557]},{"content":"3","pos":[276562,276563]},{"content":"Flat.","pos":[276571,276576]},{"content":"4","pos":[276588,276589]},{"content":"None.","pos":[276597,276602]},{"pos":[276617,276639],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[276641,276675]},{"pos":[276742,276752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[276754,276759]},{"content":"The number of lines to use to determine the height.","pos":[276762,276813]},{"content":"lines","pos":[276825,276830]},{"content":"The number of lines to use to determine the height.","pos":[276833,276884]},{"pos":[276891,276903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that has the width and height.","pos":[276905,276949]},{"pos":[276955,276968],"content":"Method center","linkify":"Method center","nodes":[{"content":"Method center","pos":[0,13]}]},{"pos":[277019,277029],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277031,277036]},{"pos":[277045,277057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277063,277086],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[277088,277155]},{"pos":[277238,277248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277250,277255]},{"content":"The ID of the configuration key that is being assigned to the control; optional.","pos":[277258,277338]},{"pos":[277345,277357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[277359,277431]},{"pos":[277438,277445],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[277447,277528]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[277529,277622]},{"pos":[277628,277653],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[277655,277751]},{"pos":[277796,277808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[277810,277896]},{"pos":[277903,277910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[277912,277961]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[277962,278110]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[278111,278245]},{"pos":[278251,278276],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[278278,278356]},{"pos":[278411,278421],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278423,278428]},{"content":"The string that contains the country/region codes to set; optional.","pos":[278431,278498]},{"pos":[278505,278517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[278519,278584]},{"pos":[278590,278613],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[278615,278740]},{"pos":[278793,278803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278805,278810]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[278813,278887]},{"pos":[278894,278906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[278908,279020]},{"pos":[279027,279034],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[279036,279163]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[279164,279257]},{"pos":[279263,279283],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[279285,279433]},{"pos":[279483,279493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279495,279500]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[279503,279577]},{"pos":[279584,279596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the client, in Enterprise Portal, or in both.","pos":[279598,279704]},{"pos":[279710,279725],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[279727,279808]},{"pos":[279853,279863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279865,279870]},{"content":"An Integer data type that indicates whether the drag-and-drop behavior is enabled; optional.","pos":[279873,279965]},{"pos":[279972,279984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[279986,280046]},{"pos":[280053,280060],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the FormControl::dragLeave, FormControl::dragOver, and FormControl::dragOverEx methods to specify the behavior.","pos":[280062,280177]},{"pos":[280183,280198],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[280200,280294]},{"pos":[280388,280398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[280400,280410]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[280413,280498]},{"content":"dragMode","pos":[280510,280518]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[280521,280606]},{"content":"x","pos":[280618,280619]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[280622,280707]},{"content":"y","pos":[280719,280720]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[280723,280808]},{"pos":[280815,280827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[280829,280894]},{"pos":[280900,280917],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[280919,281015]},{"pos":[281105,281115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[281117,281127]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[281130,281215]},{"content":"dragMode","pos":[281227,281235]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[281238,281323]},{"content":"x","pos":[281335,281336]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[281339,281424]},{"content":"y","pos":[281436,281437]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[281440,281525]},{"pos":[281532,281544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[281546,281611]},{"pos":[281617,281632],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[281634,281704]},{"pos":[281738,281750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[281752,281883]},{"pos":[281889,281903],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[281905,281956]},{"pos":[282008,282018],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[282020,282025]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[282028,282100]},{"pos":[282107,282119],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[282121,282169]},{"pos":[282176,282183],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[282185,282260]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[282261,282356]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[282357,282491]},{"pos":[282497,282514],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[282516,282604]},{"pos":[282657,282667],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[282669,282672]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[282675,282745]},{"pos":[282752,282764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[282766,282833]},{"pos":[282839,282860],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[282862,282917]},{"pos":[282961,282973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[282975,283038]},{"pos":[283044,283057],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[283059,283098]},{"pos":[283151,283161],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[283163,283168]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[283171,283246]},{"content":"mode","pos":[283258,283262]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[283265,283340]},{"pos":[283347,283359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[283361,283397]},{"pos":[283404,283411],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[283413,283520]},{"content":"Mode.","pos":[283524,283529]},{"content":"Height calculation.","pos":[283543,283562]},{"content":"-1 Exact.","pos":[283750,283759]},{"content":"The exact height in pixels of the controls is used.","pos":[283769,283820]},{"content":"0 Auto.","pos":[283863,283870]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[283882,283971]},{"content":"1 Column height.","pos":[283976,283992]},{"content":"The layout of the form determines the height of the control.","pos":[283995,284055]},{"content":"The height and height calculation mode can be set separately.","pos":[284088,284149]},{"pos":[284155,284172],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[284174,284236]},{"pos":[284283,284293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[284295,284300]},{"content":"An Integer data type value that indicates how the control height is calculated; optional.","pos":[284303,284392]},{"pos":[284399,284411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[284413,284434]},{"pos":[284441,284448],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[284450,284504]},{"content":"Mode.","pos":[284508,284513]},{"content":"Height Calculation.","pos":[284525,284544]},{"content":"Exact.","pos":[284730,284736]},{"content":"The exact height in pixels of the controls is used.","pos":[284747,284798]},{"content":"Auto.","pos":[284841,284846]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[284858,284947]},{"content":"Column height.","pos":[284952,284966]},{"content":"The layout of the form determines the height of the control.","pos":[284969,285029]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[285062,285147]},{"pos":[285153,285171],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[285173,285212]},{"pos":[285260,285270],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285272,285277]},{"content":"An Integer data type that specifies the height in pixels; optional.","pos":[285280,285347]},{"pos":[285354,285366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[285368,285389]},{"pos":[285396,285403],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[285405,285495]},{"pos":[285501,285517],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[285519,285559]},{"pos":[285594,285606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[285608,285696]},{"pos":[285703,285710],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[285712,285782]},{"pos":[285788,285803],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[285805,285909]},{"pos":[285954,285964],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285966,285971]},{"content":"The value that is assigned as the help text for the control.","pos":[285974,286034]},{"pos":[286041,286053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[286055,286110]},{"pos":[286117,286124],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[286126,286239]},{"pos":[286245,286267],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[286269,286332]},{"pos":[286384,286394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286396,286401]},{"content":"The value to assign as the HierarchyParent value of the control.","pos":[286404,286468]},{"pos":[286475,286487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[286489,286539]},{"pos":[286545,286556],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[286558,286603]},{"pos":[286633,286645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[286647,286674]},{"pos":[286681,286688],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[286690,286734]},{"pos":[286740,286758],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[286799,286811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[286817,286835],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[286837,286903]},{"pos":[286944,286956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[286958,287009]},{"pos":[287016,287023],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[287025,287093]},{"pos":[287099,287118],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[287120,287187]},{"pos":[287229,287241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[287243,287295]},{"pos":[287301,287326],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[287328,287427]},{"pos":[287496,287506],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[287508,287525]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[287528,287656]},{"content":"For more information, see “Remarks.”","pos":[287657,287693]},{"pos":[287700,287712],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent container allow for the level of customization that is specified by the neededSetupRights parameter; otherwise false.","pos":[287714,287871]},{"pos":[287878,287885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameters.","pos":[287887,287965]},{"content":"FormAllowUserSetup::No 0","pos":[288303,288327]},{"content":"No changes can be made to the control.","pos":[288338,288376]},{"content":"Using this value for neededSetupRights always returns true.","pos":[288377,288436]},{"content":"FormAllowUserSetup::Restricted 1","pos":[288470,288502]},{"content":"The user can change the editable, visible, skip, label and width properties of the control.","pos":[288505,288596]},{"content":"The user cannot move the control.","pos":[288597,288630]},{"content":"FormAllowUserSetup::Yes 2","pos":[288637,288662]},{"content":"The user can change the editable, visible, skip, label and width properties of the control.","pos":[288672,288763]},{"content":"The user can also move the control.","pos":[288764,288799]},{"content":"This method returns true only if the AllowUserSetup property for the design and all parent containers is at least as high as the level that is specified by the neededSetupRights parameter.","pos":[288803,288991]},{"pos":[288997,289009],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[289044,289056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[289062,289073],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[289075,289139]},{"pos":[289190,289200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289202,289207]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[289210,289296]},{"content":"mode","pos":[289308,289312]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[289315,289401]},{"pos":[289408,289420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[289422,289473]},{"pos":[289479,289494],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[289496,289557]},{"pos":[289602,289612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289614,289619]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[289622,289708]},{"pos":[289715,289727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[289729,289785]},{"pos":[289791,289807],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[289809,289873]},{"pos":[289919,289929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289931,289936]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[289939,290020]},{"pos":[290027,290039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[290041,290092]},{"pos":[290098,290110],"content":"Method loops","linkify":"Method loops","nodes":[{"content":"Method loops","pos":[0,12]}]},{"pos":[290152,290162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290164,290169]},{"pos":[290178,290190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[290196,290216],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[290218,290271]},{"pos":[290329,290339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290341,290346]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[290349,290443]},{"pos":[290450,290462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[290464,290537]},{"pos":[290543,290563],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[290565,290622]},{"pos":[290714,290724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[290726,290727]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[290730,290791]},{"content":"y","pos":[290803,290804]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[290807,290868]},{"content":"button","pos":[290880,290886]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[290889,290950]},{"content":"Ctrl","pos":[290962,290966]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[290969,291030]},{"content":"Shift","pos":[291042,291047]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291050,291111]},{"pos":[291118,291130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[291132,291171]},{"pos":[291178,291185],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[291187,291291]},{"pos":[291297,291313],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[291315,291380]},{"pos":[291468,291478],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[291480,291481]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291484,291545]},{"content":"y","pos":[291557,291558]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291561,291622]},{"content":"button","pos":[291634,291640]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291643,291704]},{"content":"Ctrl","pos":[291716,291720]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291723,291784]},{"content":"Shift","pos":[291796,291801]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291804,291865]},{"pos":[291872,291884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[291886,291925]},{"pos":[291932,291939],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[291941,292034]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[292035,292170]},{"pos":[292176,292192],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[292194,292259]},{"pos":[292347,292357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[292359,292360]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292363,292424]},{"content":"y","pos":[292436,292437]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292440,292501]},{"content":"button","pos":[292513,292519]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292522,292583]},{"content":"Ctrl","pos":[292595,292599]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292602,292663]},{"content":"Shift","pos":[292675,292680]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292683,292744]},{"pos":[292751,292763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[292765,292804]},{"pos":[292811,292818],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[292820,292924]},{"pos":[292930,292944],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[292946,293018]},{"pos":[293104,293114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[293116,293117]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293120,293181]},{"content":"y","pos":[293193,293194]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293197,293258]},{"content":"button","pos":[293270,293276]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293279,293340]},{"content":"Ctrl","pos":[293352,293356]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293359,293420]},{"content":"Shift","pos":[293432,293437]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293440,293501]},{"pos":[293508,293520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[293522,293561]},{"pos":[293568,293575],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[293577,293670]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[293671,293806]},{"pos":[293812,293823],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[293825,293960]},{"pos":[294001,294011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[294013,294018]},{"content":"The name to assign to the control; optional.","pos":[294021,294065]},{"pos":[294072,294084],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[294086,294150]},{"pos":[294157,294164],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[294166,294260]},{"content":"It must begin with a letter.","pos":[294266,294294]},{"content":"It cannot exceed 250 characters.","pos":[294299,294331]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[294336,294390],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[294395,294435]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[294440,294550]},{"pos":[294556,294579],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[294632,294642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[294644,294649]},{"pos":[294658,294670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[294676,294703],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[294755,294767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[294773,294793],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[294795,294840]},{"pos":[294887,294899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[294901,294936]},{"pos":[294942,294960],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[294962,295021]},{"pos":[295089,295099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295101,295106]},{"content":"The ID of the security key to assign to the control; optional.","pos":[295109,295171]},{"pos":[295178,295190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[295192,295291]},{"pos":[295297,295319],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[295321,295361]},{"pos":[295416,295426],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[295428,295438]},{"content":"The ID of the menu to show.","pos":[295441,295468]},{"pos":[295475,295487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[295489,295548]},{"pos":[295554,295565],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[295567,295694]},{"pos":[295743,295753],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295755,295760]},{"content":"The value to assign to the skip property of the control; optional.","pos":[295763,295829]},{"pos":[295836,295848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[295850,295956]},{"pos":[295962,295976],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[295978,296021]},{"pos":[296054,296066],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[296068,296170]},{"pos":[296177,296184],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[296186,296258]},{"pos":[296264,296274],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[296276,296338]},{"pos":[296388,296398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[296400,296405]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[296408,296492]},{"content":"mode","pos":[296504,296508]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[296511,296595]},{"pos":[296602,296614],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[296616,296665]},{"pos":[296671,296685],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[296687,296746]},{"pos":[296790,296800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[296802,296807]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[296810,296894]},{"pos":[296901,296913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[296915,296969]},{"pos":[296975,296990],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[296992,297054]},{"pos":[297099,297109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297111,297116]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[297119,297198]},{"pos":[297205,297217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[297219,297268]},{"pos":[297274,297292],"content":"Method transparent","linkify":"Method transparent","nodes":[{"content":"Method transparent","pos":[0,18]}]},{"pos":[297348,297358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297360,297365]},{"pos":[297374,297386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[297392,297403],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[297444,297454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297456,297461]},{"pos":[297470,297482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[297488,297515],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[297579,297589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[297591,297595]},{"pos":[297604,297616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[297622,297637],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[297639,297682]},{"pos":[297727,297737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297739,297744]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[297747,297819]},{"pos":[297826,297838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[297840,297870]},{"pos":[297876,297895],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[297897,297945]},{"pos":[297994,298004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298006,298011]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[298014,298091]},{"pos":[298098,298110],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[298112,298147]},{"pos":[298153,298173],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[298175,298234]},{"pos":[298284,298294],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298296,298301]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[298304,298392]},{"pos":[298399,298411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[298413,298459]},{"pos":[298465,298483],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[298485,298568]},{"pos":[298616,298626],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298628,298633]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[298636,298716]},{"pos":[298723,298735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[298737,298793]},{"pos":[298799,298816],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[298818,298870]},{"pos":[298917,298927],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298929,298934]},{"content":"The user height for the control; optional.","pos":[298937,298979]},{"pos":[298986,298998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[299000,299039]},{"pos":[299045,299060],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[299062,299144]},{"pos":[299189,299199],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299201,299206]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[299209,299288]},{"pos":[299295,299307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[299309,299364]},{"pos":[299371,299378],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[299380,299550]},{"content":"Right-clicking invokes a menu that enables the control to be hidden or displayed.","pos":[299551,299632]},{"content":"This method lets you programmatically determine and set the value.","pos":[299633,299699]},{"pos":[299705,299728],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[299730,299786]},{"pos":[299839,299849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299851,299856]},{"content":"The organization container to set for the control; optional.","pos":[299859,299919]},{"pos":[299926,299938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[299940,299983]},{"pos":[299989,300010],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[300012,300066]},{"pos":[300117,300127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300129,300134]},{"content":"The organization sibling to set for the control; optional.","pos":[300137,300195]},{"pos":[300202,300214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[300216,300257]},{"pos":[300263,300284],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[300286,300335]},{"pos":[300386,300396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300398,300403]},{"content":"The user label text to set for the control; optional.","pos":[300406,300459]},{"pos":[300466,300478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[300480,300516]},{"pos":[300522,300546],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[300548,300601]},{"pos":[300655,300665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300667,300672]},{"content":"The user security level to set for the control; optional.","pos":[300675,300732]},{"pos":[300739,300751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[300753,300793]},{"pos":[300799,300814],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[300816,300964]},{"pos":[301009,301019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301021,301026]},{"content":"The value to assign to the userSkip property; optional.","pos":[301029,301084]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[301085,301180]},{"pos":[301187,301199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[301201,301270]},{"pos":[301276,301292],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[301294,301345]},{"pos":[301391,301401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301403,301408]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[301411,301477]},{"pos":[301484,301496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[301498,301627]},{"pos":[301634,301641],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[301643,301737]},{"content":"For example, if the user has specified 30 characters as the width for the control, the return is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[301738,301849],"source":" For example, if the user has specified 30 characters as the width for the control, the return is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to invoke the setup form in which the character specification is made.","pos":[301850,302005]},{"pos":[302011,302033],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[302035,302096]},{"pos":[302165,302175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302177,302182]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[302185,302256]},{"content":"mode","pos":[302268,302272]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[302275,302346]},{"pos":[302353,302365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[302367,302415]},{"pos":[302421,302447],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[302449,302508]},{"pos":[302573,302583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[302585,302589]},{"pos":[302598,302610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[302612,302666]},{"pos":[302672,302699],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[302701,302762]},{"pos":[302819,302829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302831,302836]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[302839,302917]},{"pos":[302924,302936],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[302938,302986]},{"pos":[302992,303006],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[303008,303078]},{"pos":[303130,303140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303142,303147]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[303150,303222]},{"pos":[303229,303241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[303243,303292]},{"pos":[303298,303310],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[303312,303350]},{"pos":[303402,303412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303414,303419]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[303422,303496]},{"content":"mode","pos":[303508,303512]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[303515,303589]},{"pos":[303596,303608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[303610,303645]},{"pos":[303652,303659],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[303661,303767]},{"content":"Mode.","pos":[303771,303776]},{"content":"Width calculation.","pos":[303789,303807]},{"content":"-1 Exact.","pos":[303993,304002]},{"content":"The exact width in pixels of the controls is used.","pos":[304011,304061]},{"content":"0 Auto.","pos":[304104,304111]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[304122,304210]},{"content":"1 Column width.","pos":[304215,304230]},{"content":"The layout of the form determines the width of the control.","pos":[304233,304292]},{"content":"The width and width calculation mode can be set separately.","pos":[304325,304384]},{"pos":[304390,304406],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[304408,304470]},{"pos":[304516,304526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304528,304533]},{"content":"An Integer data type value that indicates how control width is calculated; optional.","pos":[304536,304620]},{"pos":[304627,304639],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[304641,304702]},{"pos":[304709,304716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[304718,304771]},{"content":"Mode.","pos":[304775,304780]},{"content":"Width Calculation.","pos":[304791,304809]},{"content":"Exact.","pos":[304993,304999]},{"content":"The exact width in pixels of the controls is used.","pos":[305009,305059]},{"content":"Auto.","pos":[305102,305107]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[305118,305206]},{"content":"Column width.","pos":[305211,305224]},{"content":"The layout of the form determines the width of the control.","pos":[305227,305286]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[305319,305402]},{"pos":[305408,305425],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[305427,305465]},{"pos":[305512,305522],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305524,305529]},{"content":"An Integer data type that specifies the width in pixels; optional.","pos":[305532,305598]},{"pos":[305605,305617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[305619,305654]},{"pos":[305661,305668],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[305670,305743]},{"pos":[305749,305765],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[305848,305858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[305860,305866]},{"content":"e","pos":[305880,305881]},{"pos":[305889,305907],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[305909,305980]},{"pos":[306031,306041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[306043,306052]},{"content":"The string value to use to filter data; optional.","pos":[306055,306104]},{"pos":[306110,306123],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[306125,306225]},{"pos":[306307,306317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[306319,306329]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[306332,306417]},{"content":"dragMode","pos":[306429,306437]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[306440,306525]},{"content":"x","pos":[306537,306538]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[306541,306626]},{"content":"y","pos":[306638,306639]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[306642,306727]},{"pos":[306733,306749],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[306751,306793]},{"pos":[306828,306843],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[306845,306875]},{"pos":[306909,306930],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[306932,307001]},{"pos":[307063,307073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[307075,307080]},{"content":"The preferred height of the control.","pos":[307083,307119]},{"content":"height","pos":[307131,307137]},{"content":"The preferred height of the control.","pos":[307140,307176]},{"pos":[307182,307199],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[307201,307271]},{"pos":[307361,307371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[307373,307374]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[307377,307438]},{"content":"y","pos":[307450,307451]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[307454,307515]},{"content":"button","pos":[307527,307533]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[307536,307597]},{"content":"Ctrl","pos":[307609,307613]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[307616,307677]},{"content":"Shift","pos":[307689,307694]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[307697,307758]},{"pos":[307764,307776],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[307778,307832]},{"pos":[307863,307874],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[307876,307974]},{"pos":[308060,308070],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[308072,308082]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[308085,308170]},{"content":"dragMode","pos":[308182,308190]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[308193,308278]},{"content":"x","pos":[308290,308291]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[308294,308379]},{"content":"y","pos":[308391,308392]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[308395,308480]},{"pos":[308486,308500],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[308581,308591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[308593,308599]},{"content":"e","pos":[308613,308614]},{"pos":[308622,308634],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[308665,308682],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[308684,308738]},{"pos":[308774,308790],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[308792,308888]},{"pos":[308923,308941],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[309026,309036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[309038,309044]},{"content":"e","pos":[309058,309059]},{"pos":[309067,309078],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[309080,309132]},{"pos":[309162,309176],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[309178,309218]},{"pos":[309251,309265],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[309267,309328]},{"pos":[309362,309369],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[309371,309499]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[309500,309604]},{"pos":[309610,309633],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[309635,309676]},{"pos":[309718,309729],"content":"Method play","linkify":"Method play","nodes":[{"content":"Method play","pos":[0,11]}]},{"pos":[309806,309816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"firstFrame","pos":[309818,309828]},{"content":"lastFrame","pos":[309842,309851]},{"content":"loops","pos":[309865,309870]},{"pos":[309878,309895],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[309979,309989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[309991,309997]},{"content":"e","pos":[310011,310012]},{"pos":[310020,310041],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[310043,310064]},{"pos":[310104,310119],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[310121,310167]},{"pos":[310201,310211],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[310213,310246]},{"pos":[310275,310304],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[310422,310432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[310434,310450]},{"content":"objectMethodToCall","pos":[310464,310482]},{"content":"overrideObject","pos":[310496,310510]},{"pos":[310518,310529],"content":"Method stop","linkify":"Method stop","nodes":[{"content":"Method stop","pos":[0,11]}]},{"pos":[310558,310585],"content":"Class FormAutoLookupFactory","linkify":"Class FormAutoLookupFactory","nodes":[{"content":"Class FormAutoLookupFactory","pos":[0,27]}]},{"pos":[310644,310651],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[310657,310665],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[310671,310678],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[310682,310688]},{"content":"Description","pos":[310864,310875]},{"content":"::public static xFormRun buildLookupFormByField(FormControl controlHostingLookup, FieldBinding fieldBinding)","pos":[311180,311288]},{"content":"::public static xFormRun buildLookupFromCustomForm(FormControl controlHostingLookup, Form customLookupForm, FieldBinding fieldBinding, <ph id=\"ph1\">\\[</ph>xArgs customArgs<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>Query customQuery<ph id=\"ph4\">\\]</ph>)","pos":[311429,311608],"source":"::public static xFormRun buildLookupFromCustomForm(FormControl controlHostingLookup, Form customLookupForm, FieldBinding fieldBinding, \\[xArgs customArgs\\], \\[Query customQuery\\])"},{"content":"::public static xFormRun buildReferenceLookupFromCustomForm(FormReferenceControl referenceControlHostingLookup, Form customLookupForm, <ph id=\"ph1\">\\[</ph>xArgs customArgs<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>Query customQuery<ph id=\"ph4\">\\]</ph>)","pos":[311678,311857],"source":"::public static xFormRun buildReferenceLookupFromCustomForm(FormReferenceControl referenceControlHostingLookup, Form customLookupForm, \\[xArgs customArgs\\], \\[Query customQuery\\])"},{"content":"::public static void createLookupForClientsideControl(xFormRun parentForm, str targetId, str controlName, int tableId, int fieldId, str controlValue, boolean isInFilterMode)","pos":[311927,312100]},{"content":"::public static void performFormLookup(xFormRun lookupForm, <ph id=\"ph1\">\\[</ph>boolean blockUntilLookupClosed<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControl controlHostingLookup<ph id=\"ph4\">\\]</ph>)","pos":[312176,312309],"source":"::public static void performFormLookup(xFormRun lookupForm, \\[boolean blockUntilLookupClosed\\], \\[FormControl controlHostingLookup\\])"},{"content":"private void new()","pos":[312425,312443]},{"content":"Initializes a new instance of the FormAutoLookupFactory class.","pos":[312607,312669]},{"pos":[312677,312706],"content":"Method buildLookupFormByField","linkify":"Method buildLookupFormByField","nodes":[{"content":"Method buildLookupFormByField","pos":[0,29]}]},{"pos":[312825,312835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlHostingLookup","pos":[312837,312857]},{"content":"fieldBinding","pos":[312871,312883]},{"pos":[312892,312904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312910,312942],"content":"Method buildLookupFromCustomForm","linkify":"Method buildLookupFromCustomForm","nodes":[{"content":"Method buildLookupFromCustomForm","pos":[0,32]}]},{"pos":[313128,313138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlHostingLookup","pos":[313140,313160]},{"content":"customLookupForm","pos":[313174,313190]},{"content":"fieldBinding","pos":[313204,313216]},{"content":"customArgs","pos":[313230,313240]},{"content":"customQuery","pos":[313254,313265]},{"pos":[313274,313286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313292,313333],"content":"Method buildReferenceLookupFromCustomForm","linkify":"Method buildReferenceLookupFromCustomForm","nodes":[{"content":"Method buildReferenceLookupFromCustomForm","pos":[0,41]}]},{"pos":[313519,313529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"referenceControlHostingLookup","pos":[313531,313560]},{"content":"customLookupForm","pos":[313574,313590]},{"content":"customArgs","pos":[313604,313614]},{"content":"customQuery","pos":[313628,313639]},{"pos":[313648,313660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313666,313705],"content":"Method createLookupForClientsideControl","linkify":"Method createLookupForClientsideControl","nodes":[{"content":"Method createLookupForClientsideControl","pos":[0,39]}]},{"pos":[313889,313899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parentForm","pos":[313901,313911]},{"content":"targetId","pos":[313925,313933]},{"content":"controlName","pos":[313947,313958]},{"content":"tableId","pos":[313972,313979]},{"content":"fieldId","pos":[313993,314000]},{"content":"controlValue","pos":[314014,314026]},{"content":"isInFilterMode","pos":[314040,314054]},{"pos":[314062,314086],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[314226,314236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lookupForm","pos":[314238,314248]},{"content":"blockUntilLookupClosed","pos":[314262,314284]},{"content":"controlHostingLookup","pos":[314298,314318]},{"pos":[314326,314336],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the FormAutoLookupFactory class.","pos":[314338,314400]},{"pos":[314429,314446],"content":"Class FormBinding","linkify":"Class FormBinding","nodes":[{"content":"Class FormBinding","pos":[0,17]}]},{"pos":[314474,314481],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[314487,314495],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[314501,314508],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[314512,314518]},{"content":"Description","pos":[314543,314554]},{"content":"public Object targetObject()","pos":[314606,314634]},{"content":"public str targetProperty()","pos":[314653,314680]},{"pos":[314703,314722],"content":"Method targetObject","linkify":"Method targetObject","nodes":[{"content":"Method targetObject","pos":[0,19]}]},{"pos":[314763,314775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314781,314802],"content":"Method targetProperty","linkify":"Method targetProperty","nodes":[{"content":"Method targetProperty","pos":[0,21]}]},{"pos":[314842,314854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314859,314891],"content":"Class FormBuildActionPaneControl","linkify":"Class FormBuildActionPaneControl","nodes":[{"content":"Class FormBuildActionPaneControl","pos":[0,32]}]},{"pos":[314959,314966],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[314972,314980],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[314986,314993],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[314997,315003]},{"content":"Description","pos":[315107,315118]},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[315509,315553],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[315765,315812],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[316021,316067],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[316131,316171]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[316277,316320],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[316387,316454]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[316533,316573],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[316789,316827],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[317045,317084],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[317301,317338],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[317557,317606],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[317667,317765]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[317813,317870],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[318069,318120],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[318325,318368],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[318581,318614],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[318691,318730]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[318837,318892],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[319093,319145],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[319349,319405],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[319605,319655],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[319861,319903],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[320117,320155],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[320373,320445],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[320483,320550]},{"content":"public int containerId()","pos":[320629,320653]},{"content":"Retrieves the ID of the parent container for the control.","pos":[320739,320796]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[320885,320927],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[321141,321181],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[321251,321323]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[321397,321436],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[321653,321687],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[321763,321844]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[321909,321950],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[322019,322070]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[322165,322207],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[322275,322314]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[322421,322457],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[322531,322593]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[322677,322714],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[322787,322826]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[322933,322967],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[323043,323147]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[323189,323234],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[323445,323486],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[323701,323716]},{"content":"Retrieves the ID of the control.","pos":[323811,323843]},{"content":"public boolean isContainer()","pos":[323957,323985]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[324067,324143]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[324213,324253],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[324469,324524],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[324725,324774],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[324981,325022],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[325237,325271],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[325493,325528],"source":"public int leftValue(\\[int value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[325749,325816],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"Moves a control that is specified by ID to the control.","pos":[325859,325914]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[326005,326035],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[326115,326256]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[326261,326303],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int position(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[326517,326551],"source":"public int position(\\[int value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[326773,326829],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[327029,327079],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[327285,327327],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[327541,327598],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[327797,327835],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[328053,328084],"source":"public int style(\\[int value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[328309,328348],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[328565,328619],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[328821,328869],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329077,329117],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329333,329366],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329589,329623],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329845,329875],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330101,330135],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330357,330395],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330613,330652],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[330869,330916],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[331125,331185],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[331381,331435],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331637,331683],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[331893,331934],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[332149,332190],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[332259,332297]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332405,332440],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[332515,332577]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332661,332697],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[332771,332809]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[332917,333024],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[333176,333193],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[333248,333258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[333260,333265]},{"pos":[333274,333286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[333292,333312],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[333370,333380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[333382,333387]},{"pos":[333396,333408],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[333414,333433],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[333435,333475]},{"pos":[333532,333542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[333544,333549]},{"pos":[333558,333570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[333572,333628]},{"pos":[333635,333642],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[333644,333723]},{"pos":[333729,333745],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[333747,333814]},{"pos":[333868,333878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[333880,333885]},{"pos":[333894,333906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[333908,333960]},{"pos":[333967,333974],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[333976,334098]},{"pos":[334104,334125],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[334176,334186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[334188,334193]},{"pos":[334202,334214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[334220,334239],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[334288,334298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[334300,334305]},{"pos":[334314,334326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[334332,334352],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[334402,334412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[334414,334419]},{"pos":[334428,334440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[334446,334464],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[334512,334522],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[334524,334529]},{"pos":[334538,334550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[334556,334578],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[334580,334678]},{"pos":[334738,334748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[334750,334755]},{"pos":[334764,334776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[334778,334857]},{"pos":[334864,334871],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[334873,334910]},{"pos":[334916,334935],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[335001,335011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[335013,335018]},{"content":"mode","pos":[335032,335036]},{"pos":[335045,335057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[335063,335086],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[335148,335158],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[335160,335164]},{"pos":[335173,335185],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[335191,335215],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[335269,335279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[335281,335286]},{"pos":[335295,335307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[335313,335327],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[335329,335368]},{"pos":[335412,335422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[335424,335429]},{"pos":[335438,335450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[335452,335506]},{"pos":[335512,335526],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[335590,335600],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[335602,335607]},{"content":"mode","pos":[335621,335625]},{"pos":[335634,335646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[335652,335670],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[335733,335743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[335745,335749]},{"pos":[335758,335770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[335776,335794],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[335859,335869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[335871,335876]},{"content":"mode","pos":[335890,335894]},{"pos":[335903,335915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[335921,335943],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[336004,336014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[336016,336020]},{"pos":[336029,336041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[336047,336070],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[336123,336133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[336135,336140]},{"pos":[336149,336161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[336167,336186],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[336235,336245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[336247,336252]},{"pos":[336261,336273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[336279,336302],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[336304,336371]},{"pos":[336454,336464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[336466,336471]},{"pos":[336480,336492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[336494,336566]},{"pos":[336573,336580],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[336582,336663]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[336664,336757]},{"pos":[336763,336781],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[336783,336840]},{"pos":[336877,336889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[336891,336922]},{"pos":[336928,336951],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[337004,337014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[337016,337021]},{"pos":[337030,337042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[337048,337065],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[337067,337139]},{"pos":[337190,337200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[337202,337207]},{"pos":[337216,337228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[337230,337282]},{"pos":[337288,337308],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[337358,337368],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[337370,337375]},{"pos":[337384,337396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[337402,337417],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[337419,337500]},{"pos":[337545,337555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[337557,337562]},{"pos":[337571,337583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[337585,337645]},{"pos":[337651,337665],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[337667,337718]},{"pos":[337770,337780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[337782,337787]},{"pos":[337796,337808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[337810,337858]},{"pos":[337865,337872],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[337874,337953]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[337954,338049]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[338050,338184]},{"pos":[338190,338203],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[338205,338244]},{"pos":[338297,338307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[338309,338314]},{"content":"mode","pos":[338328,338332]},{"pos":[338341,338353],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[338355,338391]},{"pos":[338398,338405],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[338407,338460]},{"content":"Calculate the height according to the following table:","pos":[338461,338515]},{"content":"Mode.","pos":[338519,338524]},{"content":"Height calculation.","pos":[338538,338557]},{"content":"-1 Exact.","pos":[338745,338754]},{"content":"The exact height in pixels of the controls is used.","pos":[338764,338815]},{"content":"0 Auto.","pos":[338858,338865]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[338877,338966]},{"content":"1 Column height.","pos":[338971,338987]},{"content":"The layout of the form determines the height of the control.","pos":[338990,339050]},{"content":"The height and height calculation mode can be set separately.","pos":[339083,339144]},{"pos":[339150,339167],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[339169,339231]},{"pos":[339278,339288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[339290,339295]},{"pos":[339304,339316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[339318,339339]},{"pos":[339346,339353],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[339355,339409]},{"content":"Mode.","pos":[339413,339418]},{"content":"Height Calculation.","pos":[339430,339449]},{"content":"Exact.","pos":[339635,339641]},{"content":"The exact height in pixels of the controls is used.","pos":[339652,339703]},{"content":"Auto.","pos":[339746,339751]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[339763,339852]},{"content":"Column height.","pos":[339857,339871]},{"content":"The layout of the form determines the height of the control.","pos":[339874,339934]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[339967,340052]},{"pos":[340058,340076],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[340078,340117]},{"pos":[340165,340175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[340177,340182]},{"pos":[340191,340203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[340205,340226]},{"pos":[340233,340240],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[340242,340332]},{"pos":[340338,340353],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[340355,340459]},{"pos":[340504,340514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[340516,340521]},{"pos":[340530,340542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[340544,340599]},{"pos":[340606,340613],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.The help text must not exceed 250 characters.","pos":[340615,340733]},{"pos":[340739,340757],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[340813,340823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[340825,340830]},{"pos":[340839,340851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[340857,340879],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[340931,340941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[340943,340948]},{"pos":[340957,340969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[340975,340984],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[340986,341018]},{"pos":[341046,341058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[341060,341082]},{"pos":[341088,341106],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[341108,341184]},{"pos":[341225,341237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[341239,341313]},{"pos":[341319,341330],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[341381,341391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341393,341398]},{"content":"mode","pos":[341412,341416]},{"pos":[341425,341437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341443,341460],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[341524,341534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341536,341541]},{"content":"mode","pos":[341555,341559]},{"pos":[341568,341580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341586,341607],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[341667,341677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[341679,341683]},{"pos":[341692,341704],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341710,341732],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[341784,341794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341796,341801]},{"pos":[341810,341822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341828,341843],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[341888,341898],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341900,341905]},{"pos":[341914,341926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341932,341948],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[341994,342004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342006,342011]},{"pos":[342020,342032],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342038,342056],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"content":"Moves a control that is specified by ID to the control.","pos":[342058,342113]},{"pos":[342191,342201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[342203,342212]},{"content":"insertAfterControlId","pos":[342226,342246]},{"pos":[342255,342267],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control was moved successfully; otherwise, 0.","pos":[342269,342323]},{"pos":[342330,342337],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed.","pos":[342339,342496]},{"content":"However, in some cases, such as for the reference group control instance, controls cannot be moved.","pos":[342497,342596]},{"pos":[342602,342613],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[342615,342756]},{"pos":[342797,342807],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342809,342814]},{"pos":[342823,342835],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[342837,342905]},{"pos":[342912,342919],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[342921,343015]},{"content":"Begins with a letter.","pos":[343021,343042]},{"content":"Doesn't exceed 250 characters.","pos":[343047,343077]},{"content":"Can include numbers and underscore characters.","pos":[343082,343128]},{"content":"Cannot include punctuation or spaces.","pos":[343133,343170]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[343175,343293]},{"pos":[343299,343322],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[343375,343385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[343387,343392]},{"pos":[343401,343413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343419,343434],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[343479,343489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[343491,343496]},{"pos":[343505,343517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343523,343541],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[343606,343616],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[343618,343623]},{"content":"mode","pos":[343637,343641]},{"pos":[343650,343662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343668,343690],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[343751,343761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[343763,343767]},{"pos":[343776,343788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343794,343817],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[343870,343880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[343882,343887]},{"pos":[343896,343908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343914,343932],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[344000,344010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344012,344017]},{"pos":[344026,344038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344044,344055],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[344104,344114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344116,344121]},{"pos":[344130,344142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344148,344160],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[344202,344212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344214,344219]},{"pos":[344228,344240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344246,344256],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[344306,344316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344318,344323]},{"content":"mode","pos":[344337,344341]},{"pos":[344350,344362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344368,344384],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[344447,344457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344459,344464]},{"content":"mode","pos":[344478,344482]},{"pos":[344491,344503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344509,344529],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[344588,344598],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[344600,344604]},{"pos":[344613,344625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344631,344652],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[344703,344713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344715,344720]},{"pos":[344729,344741],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344747,344761],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[344805,344815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344817,344822]},{"pos":[344831,344843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344849,344864],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[344909,344919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344921,344926]},{"pos":[344935,344947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344953,344964],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[345005,345015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345017,345022]},{"pos":[345031,345043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[345049,345064],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[345109,345119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345121,345126]},{"pos":[345135,345147],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[345153,345172],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[345221,345231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345233,345238]},{"pos":[345247,345259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[345265,345285],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[345335,345345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345347,345352]},{"pos":[345361,345373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[345379,345399],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[345457,345467],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345469,345474]},{"pos":[345483,345495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[345501,345523],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[345592,345602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345604,345609]},{"content":"mode","pos":[345623,345627]},{"pos":[345636,345648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[345654,345680],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[345745,345755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[345757,345761]},{"pos":[345770,345782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[345788,345815],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[345872,345882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345884,345889]},{"pos":[345898,345910],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[345916,345930],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[345982,345992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345994,345999]},{"pos":[346008,346020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346026,346038],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[346040,346078]},{"pos":[346130,346140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[346142,346147]},{"content":"mode","pos":[346161,346165]},{"pos":[346174,346186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[346188,346223]},{"pos":[346230,346237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[346239,346345]},{"content":"Mode.","pos":[346349,346354]},{"content":"Width calculation.","pos":[346367,346385]},{"content":"-1 Exact.","pos":[346571,346580]},{"content":"The exact width in pixels of the controls is used.","pos":[346589,346639]},{"content":"0 Auto.","pos":[346682,346689]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[346700,346788]},{"content":"1 Column width.","pos":[346793,346808]},{"content":"The layout of the form determines the width of the control.","pos":[346811,346870]},{"content":"The width and width calculation mode can be set separately.","pos":[346903,346962]},{"pos":[346968,346984],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[346986,347048]},{"pos":[347094,347104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[347106,347111]},{"pos":[347120,347132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[347134,347195]},{"pos":[347202,347209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[347211,347264]},{"content":"Mode.","pos":[347268,347273]},{"content":"Width Calculation.","pos":[347284,347302]},{"content":"Exact.","pos":[347486,347492]},{"content":"The exact width in pixels of the controls is used.","pos":[347502,347552]},{"content":"Auto.","pos":[347595,347600]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[347611,347699]},{"content":"Column width.","pos":[347704,347717]},{"content":"The layout of the form determines the width of the control.","pos":[347720,347779]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[347812,347895]},{"pos":[347901,347918],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[347920,347958]},{"pos":[348005,348015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348017,348022]},{"pos":[348031,348043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[348045,348080]},{"pos":[348087,348094],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[348096,348169]},{"pos":[348175,348204],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[348322,348332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[348334,348350]},{"content":"objectMethodToCall","pos":[348364,348382]},{"content":"overrideObject","pos":[348396,348410]},{"pos":[348417,348452],"content":"Class FormBuildActionPaneTabControl","linkify":"Class FormBuildActionPaneTabControl","nodes":[{"content":"Class FormBuildActionPaneTabControl","pos":[0,35]}]},{"pos":[348523,348530],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[348536,348544],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[348550,348557],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[348561,348567]},{"content":"Description","pos":[348671,348682]},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[349073,349117],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[349329,349376],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[349585,349631],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[349695,349735]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[349841,349884],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[349951,350018]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350097,350137],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350353,350391],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350609,350648],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350865,350902],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[351121,351170],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[351231,351329]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[351377,351434],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[351633,351684],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[351889,351932],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[352145,352178],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[352255,352294]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[352401,352456],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[352657,352709],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[352913,352969],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[353169,353219],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[353425,353467],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[353681,353719],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[353937,354009],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[354047,354114]},{"content":"public int containerId()","pos":[354193,354217]},{"content":"Retrieves the ID of the parent container for the control.","pos":[354303,354360]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[354449,354493],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[354705,354764],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[354961,355003],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[355217,355257],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[355327,355399]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[355473,355512],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[355729,355763],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[355839,355920]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[355985,356026],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[356095,356146]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[356241,356283],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[356351,356390]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[356497,356533],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[356607,356669]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[356753,356790],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[356863,356902]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[357009,357043],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[357119,357223]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[357265,357310],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[357521,357562],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[357777,357792]},{"content":"Retrieves the ID of the control.","pos":[357887,357919]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[358033,358072],"source":"public int imageLocation(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[358289,358317]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[358399,358475]},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[358545,358577],"source":"public str keyTip(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[358801,358841],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[359057,359112],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[359313,359362],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[359569,359610],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[359825,359859],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[360081,360116],"source":"public int leftValue(\\[int value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[360337,360404],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"Moves a control that is specified by ID to the control.","pos":[360447,360502]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[360593,360623],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[360703,360844]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[360849,360891],"source":"public int neededPermission(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[361105,361142],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[361361,361401],"source":"public int normalResource(\\[int value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[361617,361673],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[361873,361923],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[362129,362171],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[362385,362442],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[362641,362679],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[362897,362936],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[363153,363207],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[363409,363457],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[363665,363705],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[363921,363954],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[364177,364211],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[364433,364463],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[364689,364723],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[364945,364983],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[365201,365240],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[365457,365504],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[365713,365773],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[365969,366023],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[366225,366271],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[366481,366522],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[366737,366778],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[366847,366885]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[366993,367028],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[367103,367165]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[367249,367285],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[367359,367397]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[367505,367612],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[367764,367781],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[367836,367846],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367848,367853]},{"pos":[367862,367874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367880,367900],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[367958,367968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367970,367975]},{"pos":[367984,367996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368002,368021],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[368023,368063]},{"pos":[368120,368130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368132,368137]},{"pos":[368146,368158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[368160,368216]},{"pos":[368223,368230],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[368232,368311]},{"pos":[368317,368333],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[368335,368402]},{"pos":[368456,368466],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368468,368473]},{"pos":[368482,368494],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[368496,368548]},{"pos":[368555,368562],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[368564,368686]},{"pos":[368692,368713],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[368764,368774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368776,368781]},{"pos":[368790,368802],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368808,368827],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[368876,368886],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368888,368893]},{"pos":[368902,368914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368920,368940],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[368990,369000],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369002,369007]},{"pos":[369016,369028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369034,369052],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[369100,369110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369112,369117]},{"pos":[369126,369138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369144,369166],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[369168,369266]},{"pos":[369326,369336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369338,369343]},{"pos":[369352,369364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[369366,369445]},{"pos":[369452,369459],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[369461,369498]},{"pos":[369504,369523],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[369589,369599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369601,369606]},{"content":"mode","pos":[369620,369624]},{"pos":[369633,369645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369651,369674],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[369736,369746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[369748,369752]},{"pos":[369761,369773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369779,369803],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[369857,369867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369869,369874]},{"pos":[369883,369895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369901,369915],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[369917,369956]},{"pos":[370000,370010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370012,370017]},{"pos":[370026,370038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[370040,370094]},{"pos":[370100,370114],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[370178,370188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370190,370195]},{"content":"mode","pos":[370209,370213]},{"pos":[370222,370234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370240,370258],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[370321,370331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[370333,370337]},{"pos":[370346,370358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370364,370382],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[370447,370457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370459,370464]},{"content":"mode","pos":[370478,370482]},{"pos":[370491,370503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370509,370531],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[370592,370602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[370604,370608]},{"pos":[370617,370629],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370635,370658],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[370711,370721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370723,370728]},{"pos":[370737,370749],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370755,370774],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[370823,370833],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370835,370840]},{"pos":[370849,370861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370867,370890],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[370892,370959]},{"pos":[371042,371052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371054,371059]},{"pos":[371068,371080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[371082,371154]},{"pos":[371161,371168],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[371170,371251]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[371252,371345]},{"pos":[371351,371369],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[371371,371428]},{"pos":[371465,371477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[371479,371510]},{"pos":[371516,371541],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[371596,371606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371608,371613]},{"pos":[371622,371634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371640,371672],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[371742,371752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371754,371759]},{"pos":[371768,371780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371786,371809],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[371862,371872],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371874,371879]},{"pos":[371888,371900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371906,371923],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[371925,371997]},{"pos":[372048,372058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372060,372065]},{"pos":[372074,372086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[372088,372140]},{"pos":[372146,372166],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[372216,372226],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372228,372233]},{"pos":[372242,372254],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372260,372275],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[372277,372358]},{"pos":[372403,372413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372415,372420]},{"pos":[372429,372441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[372443,372503]},{"pos":[372509,372523],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[372525,372576]},{"pos":[372628,372638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372640,372645]},{"pos":[372654,372666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[372668,372716]},{"pos":[372723,372730],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[372732,372811]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[372812,372907]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[372908,373042]},{"pos":[373048,373061],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[373063,373102]},{"pos":[373155,373165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373167,373172]},{"content":"mode","pos":[373186,373190]},{"pos":[373199,373211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[373213,373249]},{"pos":[373256,373263],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[373265,373318]},{"content":"Calculate the height according to the following table:","pos":[373319,373373]},{"content":"Mode.","pos":[373377,373382]},{"content":"Height calculation.","pos":[373396,373415]},{"content":"-1 Exact.","pos":[373603,373612]},{"content":"The exact height in pixels of the controls is used.","pos":[373622,373673]},{"content":"0 Auto.","pos":[373716,373723]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[373735,373824]},{"content":"1 Column height.","pos":[373829,373845]},{"content":"The layout of the form determines the height of the control.","pos":[373848,373908]},{"content":"The height and height calculation mode can be set separately.","pos":[373941,374002]},{"pos":[374008,374025],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[374027,374089]},{"pos":[374136,374146],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374148,374153]},{"pos":[374162,374174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[374176,374197]},{"pos":[374204,374211],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[374213,374267]},{"content":"Mode.","pos":[374271,374276]},{"content":"Height Calculation.","pos":[374288,374307]},{"content":"Exact.","pos":[374493,374499]},{"content":"The exact height in pixels of the controls is used.","pos":[374510,374561]},{"content":"Auto.","pos":[374604,374609]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[374621,374710]},{"content":"Column height.","pos":[374715,374729]},{"content":"The layout of the form determines the height of the control.","pos":[374732,374792]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[374825,374910]},{"pos":[374916,374934],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[374936,374975]},{"pos":[375023,375033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375035,375040]},{"pos":[375049,375061],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[375063,375084]},{"pos":[375091,375098],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[375100,375190]},{"pos":[375196,375211],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[375213,375317]},{"pos":[375362,375372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375374,375379]},{"pos":[375388,375400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[375402,375457]},{"pos":[375464,375471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.","pos":[375473,375546]},{"content":"The help text must not exceed 250 characters.","pos":[375547,375592]},{"pos":[375598,375616],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[375672,375682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375684,375689]},{"pos":[375698,375710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[375716,375738],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[375790,375800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375802,375807]},{"pos":[375816,375828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[375834,375843],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[375845,375877]},{"pos":[375905,375917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[375919,375941]},{"pos":[375947,375967],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[376017,376027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[376029,376034]},{"pos":[376043,376055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[376061,376079],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[376081,376157]},{"pos":[376198,376210],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[376212,376286]},{"pos":[376292,376305],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[376348,376358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[376360,376365]},{"pos":[376374,376386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[376392,376403],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[376454,376464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[376466,376471]},{"content":"mode","pos":[376485,376489]},{"pos":[376498,376510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[376516,376533],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[376597,376607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[376609,376614]},{"content":"mode","pos":[376628,376632]},{"pos":[376641,376653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[376659,376680],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[376740,376750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[376752,376756]},{"pos":[376765,376777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[376783,376805],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[376857,376867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[376869,376874]},{"pos":[376883,376895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[376901,376916],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[376961,376971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[376973,376978]},{"pos":[376987,376999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[377005,377021],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[377067,377077],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[377079,377084]},{"pos":[377093,377105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[377111,377129],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"content":"Moves a control that is specified by ID to the control.","pos":[377131,377186]},{"pos":[377264,377274],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[377276,377285]},{"content":"insertAfterControlId","pos":[377299,377319]},{"pos":[377328,377340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control was moved successfully; otherwise, 0.","pos":[377342,377396]},{"pos":[377403,377410],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed.","pos":[377412,377569]},{"content":"However, in some cases, such as for the reference group control instance, controls cannot be moved.","pos":[377570,377669]},{"pos":[377675,377686],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[377688,377829]},{"pos":[377870,377880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[377882,377887]},{"pos":[377896,377908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[377910,377978]},{"pos":[377985,377992],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[377994,378088]},{"content":"Begins with a letter.","pos":[378094,378115]},{"content":"Doesn't exceed 250 characters.","pos":[378120,378150]},{"content":"Can include numbers and underscore characters.","pos":[378155,378201]},{"content":"Cannot include punctuation or spaces.","pos":[378206,378243]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[378248,378366]},{"pos":[378372,378395],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[378448,378458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[378460,378465]},{"pos":[378474,378486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[378492,378510],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[378558,378568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[378570,378575]},{"pos":[378584,378596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[378602,378623],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[378674,378684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[378686,378691]},{"pos":[378700,378712],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[378718,378736],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[378801,378811],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[378813,378818]},{"content":"mode","pos":[378832,378836]},{"pos":[378845,378857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[378863,378885],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[378946,378956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[378958,378962]},{"pos":[378971,378983],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[378989,379012],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[379065,379075],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[379077,379082]},{"pos":[379091,379103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379109,379127],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[379195,379205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[379207,379212]},{"pos":[379221,379233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379239,379250],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[379299,379309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[379311,379316]},{"pos":[379325,379337],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379343,379353],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[379403,379413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[379415,379420]},{"content":"mode","pos":[379434,379438]},{"pos":[379447,379459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379465,379481],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[379544,379554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[379556,379561]},{"content":"mode","pos":[379575,379579]},{"pos":[379588,379600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379606,379626],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[379685,379695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[379697,379701]},{"pos":[379710,379722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379728,379749],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[379800,379810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[379812,379817]},{"pos":[379826,379838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379844,379858],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[379902,379912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[379914,379919]},{"pos":[379928,379940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379946,379961],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[380006,380016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[380018,380023]},{"pos":[380032,380044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[380050,380061],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[380102,380112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[380114,380119]},{"pos":[380128,380140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[380146,380161],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[380206,380216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[380218,380223]},{"pos":[380232,380244],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[380250,380269],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[380318,380328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[380330,380335]},{"pos":[380344,380356],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[380362,380382],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[380432,380442],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[380444,380449]},{"pos":[380458,380470],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[380476,380496],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[380554,380564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[380566,380571]},{"pos":[380580,380592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[380598,380620],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[380689,380699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[380701,380706]},{"content":"mode","pos":[380720,380724]},{"pos":[380733,380745],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[380751,380777],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[380842,380852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[380854,380858]},{"pos":[380867,380879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[380885,380912],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[380969,380979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[380981,380986]},{"pos":[380995,381007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[381013,381027],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[381079,381089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[381091,381096]},{"pos":[381105,381117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[381123,381135],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[381137,381175]},{"pos":[381227,381237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[381239,381244]},{"content":"mode","pos":[381258,381262]},{"pos":[381271,381283],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[381285,381320]},{"pos":[381327,381334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[381336,381389]},{"content":"Calculate the width according to the following table:","pos":[381390,381443]},{"content":"Mode.","pos":[381447,381452]},{"content":"Width calculation.","pos":[381465,381483]},{"content":"-1 Exact.","pos":[381669,381678]},{"content":"The exact width in pixels of the controls is used.","pos":[381687,381737]},{"content":"0 Auto.","pos":[381780,381787]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[381798,381886]},{"content":"1 Column width.","pos":[381891,381906]},{"content":"The layout of the form determines the width of the control.","pos":[381909,381968]},{"content":"The width and width calculation mode can be set separately.","pos":[382001,382060]},{"pos":[382066,382082],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[382084,382146]},{"pos":[382192,382202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[382204,382209]},{"pos":[382218,382230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[382232,382293]},{"pos":[382300,382307],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[382309,382362]},{"content":"Mode.","pos":[382366,382371]},{"content":"Width Calculation.","pos":[382382,382400]},{"content":"Exact.","pos":[382584,382590]},{"content":"The exact width in pixels of the controls is used.","pos":[382600,382650]},{"content":"Auto.","pos":[382693,382698]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[382709,382797]},{"content":"Column width.","pos":[382802,382815]},{"content":"The layout of the form determines the width of the control.","pos":[382818,382877]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[382910,382993]},{"pos":[382999,383016],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[383018,383056]},{"pos":[383103,383113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[383115,383120]},{"pos":[383129,383141],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[383143,383178]},{"pos":[383185,383192],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[383194,383267]},{"pos":[383273,383302],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[383420,383430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[383432,383448]},{"content":"objectMethodToCall","pos":[383462,383480]},{"content":"overrideObject","pos":[383494,383508]},{"pos":[383515,383544],"content":"Class FormBuildActiveXControl","linkify":"Class FormBuildActiveXControl","nodes":[{"content":"Class FormBuildActiveXControl","pos":[0,29]}]},{"content":"The FormBuildActiveXControl class lets you create, read, update, and delete X++ code and metadata.","pos":[383605,383703]},{"pos":[383709,383716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[383718,383828]},{"pos":[383834,383842],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[383848,383855],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[383859,383865]},{"content":"Description","pos":[383969,383980]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[384359,384405],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[384469,384509]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[384609,384652],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[384719,384786]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[384859,384908],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[384969,385067]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[385109,385142],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[385219,385258]},{"content":"public str className(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[385359,385394],"source":"public str className(\\[str value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[385609,385681],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[385719,385786]},{"content":"public int containerId()","pos":[385859,385883]},{"content":"Retrieves the ID of the parent container for the control.","pos":[385969,386026]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[386109,386153],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str custom(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[386359,386391],"source":"public str custom(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[386609,386651],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[386859,386898],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[387109,387143],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[387219,387300]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[387359,387400],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[387469,387520]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[387609,387651],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[387719,387758]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[387859,387895],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[387969,388031]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[388109,388146],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[388219,388258]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[388359,388393],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[388469,388573]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[388609,388650],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[388859,388874]},{"content":"Retrieves the ID of the control.","pos":[388969,389001]},{"content":"public boolean isContainer()","pos":[389109,389137]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[389219,389295]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[389359,389399],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[389609,389643],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[389859,389894],"source":"public int leftValue(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[390109,390139],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[390219,390354]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[390359,390401],"source":"public int neededPermission(\\[int value\\])"},{"content":"public boolean rTLCapable(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[390609,390653],"source":"public boolean rTLCapable(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[390859,390916],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[391109,391147],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[391219,391346]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[391359,391398],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[391609,391642],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[391859,391893],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392109,392139],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392359,392393],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392609,392647],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392859,392898],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[393109,393169],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[393359,393413],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393609,393655],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[393859,393900],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[394109,394150],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[394219,394257]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[394359,394394],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[394469,394531]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[394609,394645],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[394719,394757]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[394859,394966],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[395112,395131],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[395133,395173]},{"pos":[395230,395240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395242,395247]},{"pos":[395256,395268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[395270,395326]},{"pos":[395333,395340],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[395342,395421]},{"pos":[395427,395443],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[395445,395512]},{"pos":[395566,395576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395578,395583]},{"pos":[395592,395604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[395606,395658]},{"pos":[395665,395672],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[395674,395800]},{"pos":[395806,395828],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[395830,395928]},{"pos":[395988,395998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[396000,396005]},{"pos":[396014,396026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[396028,396107]},{"pos":[396114,396121],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[396123,396160]},{"pos":[396166,396180],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[396182,396221]},{"pos":[396265,396275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[396277,396282]},{"pos":[396291,396303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[396305,396359]},{"pos":[396365,396381],"content":"Method className","linkify":"Method className","nodes":[{"content":"Method className","pos":[0,16]}]},{"pos":[396427,396437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[396439,396444]},{"pos":[396453,396465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[396471,396494],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[396496,396563]},{"pos":[396646,396656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[396658,396663]},{"pos":[396672,396684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[396686,396758]},{"pos":[396765,396772],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[396774,396855]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[396856,396949]},{"pos":[396955,396973],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[396975,397032]},{"pos":[397069,397081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[397083,397114]},{"pos":[397120,397145],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[397200,397210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397212,397217]},{"pos":[397226,397238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[397244,397257],"content":"Method custom","linkify":"Method custom","nodes":[{"content":"Method custom","pos":[0,13]}]},{"pos":[397300,397310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397312,397317]},{"pos":[397326,397338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[397344,397367],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[397420,397430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397432,397437]},{"pos":[397446,397458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[397464,397484],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[397534,397544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397546,397551]},{"pos":[397560,397572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[397578,397593],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[397595,397676]},{"pos":[397721,397731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397733,397738]},{"pos":[397747,397759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[397761,397821]},{"pos":[397827,397841],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[397843,397894]},{"pos":[397946,397956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397958,397963]},{"pos":[397972,397984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[397986,398034]},{"pos":[398041,398048],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[398050,398125]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[398126,398221]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[398222,398356]},{"pos":[398362,398375],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[398377,398416]},{"pos":[398469,398479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398481,398486]},{"content":"mode","pos":[398500,398504]},{"pos":[398513,398525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[398527,398563]},{"pos":[398570,398577],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[398579,398632]},{"content":"Calculate the height according to the following table:","pos":[398633,398687]},{"content":"Mode.","pos":[398691,398696]},{"content":"Height calculation.","pos":[398710,398729]},{"content":"-1 Exact.","pos":[398917,398926]},{"content":"The exact height in pixels of the controls is used.","pos":[398936,398987]},{"content":"0 Auto.","pos":[399030,399037]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[399049,399138]},{"content":"1 Column height.","pos":[399143,399159]},{"content":"The layout of the form determines the height of the control.","pos":[399162,399222]},{"content":"The height and height calculation mode can be set separately.","pos":[399255,399316]},{"pos":[399322,399339],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[399341,399403]},{"pos":[399450,399460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399462,399467]},{"pos":[399476,399488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[399490,399511]},{"pos":[399518,399525],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[399527,399581]},{"content":"Mode.","pos":[399585,399590]},{"content":"Height Calculation.","pos":[399602,399621]},{"content":"Exact.","pos":[399807,399813]},{"content":"The exact height in pixels of the controls is used.","pos":[399824,399875]},{"content":"Auto.","pos":[399918,399923]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[399935,400024]},{"content":"Column height.","pos":[400029,400043]},{"content":"The layout of the form determines the height of the control.","pos":[400046,400106]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[400139,400224]},{"pos":[400230,400248],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[400250,400289]},{"pos":[400337,400347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400349,400354]},{"pos":[400363,400375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[400377,400398]},{"pos":[400405,400412],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[400414,400504]},{"pos":[400510,400525],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[400527,400631]},{"pos":[400676,400686],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400688,400693]},{"pos":[400702,400714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[400716,400771]},{"pos":[400778,400785],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[400787,400855]},{"content":"The help text must not exceed 250 characters.","pos":[400856,400901]},{"pos":[400907,400929],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[400981,400991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400993,400998]},{"pos":[401007,401019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401025,401034],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[401036,401068]},{"pos":[401096,401108],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[401110,401132]},{"pos":[401138,401156],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[401158,401234]},{"pos":[401275,401287],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[401289,401363]},{"pos":[401369,401380],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[401431,401441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401443,401448]},{"content":"mode","pos":[401462,401466]},{"pos":[401475,401487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401493,401508],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[401553,401563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401565,401570]},{"pos":[401579,401591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401597,401613],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[401659,401669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401671,401676]},{"pos":[401685,401697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401703,401714],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[401716,401851]},{"pos":[401892,401902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401904,401909]},{"content":"The name to assign to the control.","pos":[401912,401946]},{"pos":[401953,401965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[401967,402031]},{"pos":[402038,402045],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[402047,402141]},{"content":"It must start with a letter.","pos":[402147,402175]},{"content":"It cannot exceed 250 characters.","pos":[402180,402212]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[402217,402271],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[402276,402316]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[402321,402431]},{"pos":[402437,402460],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[402513,402523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402525,402530]},{"pos":[402539,402551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[402557,402574],"content":"Method rTLCapable","linkify":"Method rTLCapable","nodes":[{"content":"Method rTLCapable","pos":[0,17]}]},{"pos":[402629,402639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402641,402646]},{"pos":[402655,402667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[402673,402691],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[402759,402769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402771,402776]},{"pos":[402785,402797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[402803,402814],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[402816,402943]},{"pos":[402992,403002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403004,403009]},{"content":"The value to assign to the skip property of the control.","pos":[403012,403068]},{"pos":[403075,403087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[403089,403195]},{"pos":[403201,403211],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[403261,403271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403273,403278]},{"content":"mode","pos":[403292,403296]},{"pos":[403305,403317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403323,403337],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[403381,403391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403393,403398]},{"pos":[403407,403419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403425,403440],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[403485,403495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403497,403502]},{"pos":[403511,403523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403529,403540],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[403581,403591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403593,403598]},{"pos":[403607,403619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403625,403640],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[403685,403695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403697,403702]},{"pos":[403711,403723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403729,403748],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[403797,403807],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403809,403814]},{"pos":[403823,403835],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403841,403861],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[403911,403921],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403923,403928]},{"pos":[403937,403949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403955,403977],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[404046,404056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404058,404063]},{"content":"mode","pos":[404077,404081]},{"pos":[404090,404102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404108,404134],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[404199,404209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[404211,404215]},{"pos":[404224,404236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404242,404269],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[404326,404336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404338,404343]},{"pos":[404352,404364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404370,404384],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[404436,404446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404448,404453]},{"pos":[404462,404474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404480,404492],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[404494,404532]},{"pos":[404584,404594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404596,404601]},{"content":"mode","pos":[404615,404619]},{"pos":[404628,404640],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[404642,404677]},{"pos":[404684,404691],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[404693,404746]},{"content":"Calculate the width according to the following table:","pos":[404747,404800]},{"content":"Mode.","pos":[404804,404809]},{"content":"Width calculation.","pos":[404822,404840]},{"content":"-1 Exact.","pos":[405026,405035]},{"content":"The exact width in pixels of the controls is used.","pos":[405044,405094]},{"content":"0 Auto.","pos":[405137,405144]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[405155,405243]},{"content":"1 Column width.","pos":[405248,405263]},{"content":"The layout of the form determines the width of the control.","pos":[405266,405325]},{"content":"The width and width calculation mode can be set separately.","pos":[405358,405417]},{"pos":[405423,405439],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[405441,405503]},{"pos":[405549,405559],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405561,405566]},{"pos":[405575,405587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[405589,405650]},{"pos":[405657,405664],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[405666,405719]},{"content":"Mode.","pos":[405723,405728]},{"content":"Width Calculation.","pos":[405739,405757]},{"content":"Exact.","pos":[405941,405947]},{"content":"The exact width in pixels of the controls is used.","pos":[405957,406007]},{"content":"Auto.","pos":[406050,406055]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[406066,406154]},{"content":"Column width.","pos":[406159,406172]},{"content":"The layout of the form determines the width of the control.","pos":[406175,406234]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[406267,406350]},{"pos":[406356,406373],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[406375,406413]},{"pos":[406460,406470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[406472,406477]},{"pos":[406486,406498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[406500,406535]},{"pos":[406542,406549],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[406551,406624]},{"pos":[406630,406659],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[406777,406787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[406789,406805]},{"content":"objectMethodToCall","pos":[406819,406837]},{"content":"overrideObject","pos":[406851,406865]},{"pos":[406872,406901],"content":"Class FormBuildAnimateControl","linkify":"Class FormBuildAnimateControl","nodes":[{"content":"Class FormBuildAnimateControl","pos":[0,29]}]},{"content":"The FormBuildAnimateControl class lets you create, read, update, and delete X++ code and metadata.","pos":[406962,407060]},{"pos":[407066,407073],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[407075,407185]},{"pos":[407191,407199],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[407205,407212],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[407216,407222]},{"content":"Description","pos":[407326,407337]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[407716,407762],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[407826,407866]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[407966,408009],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[408076,408143]},{"content":"public str animateFile(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[408216,408253],"source":"public str animateFile(\\[str value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[408466,408515],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[408576,408674]},{"content":"public boolean autoPlay(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[408716,408758],"source":"public boolean autoPlay(\\[boolean value\\])"},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[408966,408998],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[409076,409132]},{"content":"public boolean center(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[409216,409256],"source":"public boolean center(\\[boolean value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[409466,409538],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[409576,409643]},{"content":"public int containerId()","pos":[409716,409740]},{"content":"Retrieves the ID of the parent container for the control.","pos":[409826,409883]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[409966,410010],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[410216,410258],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[410466,410505],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[410716,410750],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[410826,410907]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[410966,411007],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[411076,411127]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[411216,411258],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[411326,411365]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[411466,411502],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[411576,411638]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[411716,411753],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[411826,411865]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[411966,412000],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[412076,412180]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[412216,412257],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[412466,412481]},{"content":"Retrieves the ID of the control.","pos":[412576,412608]},{"content":"public boolean isContainer()","pos":[412716,412744]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[412826,412902]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[412966,413006],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[413216,413250],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[413466,413501],"source":"public int leftValue(\\[int value\\])"},{"content":"public int loops(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[413716,413747],"source":"public int loops(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[413966,413996],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[414076,414211]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[414216,414258],"source":"public int neededPermission(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[414466,414523],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[414716,414754],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[414826,414953]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[414966,415005],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[415216,415249],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[415466,415500],"source":"public int topValue(\\[int value\\])"},{"content":"public boolean transparent(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[415716,415761],"source":"public boolean transparent(\\[boolean value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[415966,415996],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[416216,416250],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[416466,416504],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[416716,416755],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[416966,417026],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[417216,417270],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[417466,417512],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[417716,417757],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[417966,418007],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[418076,418114]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[418216,418251],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[418326,418388]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[418466,418502],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[418576,418614]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[418716,418823],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[418969,418988],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[418990,419030]},{"pos":[419087,419097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419099,419104]},{"pos":[419113,419125],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[419127,419183]},{"pos":[419190,419197],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[419199,419278]},{"pos":[419284,419300],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[419302,419369]},{"pos":[419423,419433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419435,419440]},{"pos":[419449,419461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[419463,419515]},{"pos":[419522,419529],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[419531,419653]},{"pos":[419659,419677],"content":"Method animateFile","linkify":"Method animateFile","nodes":[{"content":"Method animateFile","pos":[0,18]}]},{"pos":[419725,419735],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419737,419742]},{"pos":[419751,419763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[419769,419791],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[419793,419891]},{"pos":[419951,419961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419963,419968]},{"pos":[419977,419989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[419991,420070]},{"pos":[420077,420084],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[420086,420123]},{"pos":[420129,420144],"content":"Method autoPlay","linkify":"Method autoPlay","nodes":[{"content":"Method autoPlay","pos":[0,15]}]},{"pos":[420197,420207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420209,420214]},{"pos":[420223,420235],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[420241,420254],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[420256,420312]},{"pos":[420355,420365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420367,420372]},{"pos":[420381,420393],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[420395,420439]},{"pos":[420446,420453],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[420455,420547]},{"content":"Value.","pos":[420551,420557]},{"content":"Description.","pos":[420560,420572]},{"content":"0","pos":[420603,420604]},{"content":"Auto.","pos":[420612,420617]},{"content":"1","pos":[420629,420630]},{"content":"3D.","pos":[420638,420641]},{"content":"2","pos":[420655,420656]},{"content":"Single line.","pos":[420664,420676]},{"content":"3","pos":[420681,420682]},{"content":"Flat.","pos":[420690,420695]},{"content":"4","pos":[420707,420708]},{"content":"None.","pos":[420716,420721]},{"pos":[420736,420749],"content":"Method center","linkify":"Method center","nodes":[{"content":"Method center","pos":[0,13]}]},{"pos":[420800,420810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420812,420817]},{"pos":[420826,420838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[420844,420867],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[420869,420936]},{"pos":[421019,421029],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421031,421036]},{"pos":[421045,421057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[421059,421131]},{"pos":[421138,421145],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[421147,421228]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[421229,421322]},{"pos":[421328,421346],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[421348,421405]},{"pos":[421442,421454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[421456,421487]},{"pos":[421493,421518],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[421573,421583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421585,421590]},{"pos":[421599,421611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421617,421640],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[421693,421703],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421705,421710]},{"pos":[421719,421731],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421737,421757],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[421807,421817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421819,421824]},{"pos":[421833,421845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[421851,421866],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[421868,421949]},{"pos":[421994,422004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[422006,422011]},{"pos":[422020,422032],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[422034,422094]},{"pos":[422100,422114],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[422116,422167]},{"pos":[422219,422229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[422231,422236]},{"pos":[422245,422257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[422259,422307]},{"pos":[422314,422321],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[422323,422402]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[422403,422498]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[422499,422633]},{"pos":[422639,422652],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[422654,422693]},{"pos":[422746,422756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[422758,422763]},{"content":"mode","pos":[422777,422781]},{"pos":[422790,422802],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[422804,422840]},{"pos":[422847,422854],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[422856,422909]},{"content":"Calculate the height according to the following table:","pos":[422910,422964]},{"content":"Mode.","pos":[422968,422973]},{"content":"Height calculation.","pos":[422987,423006]},{"content":"-1 Exact.","pos":[423194,423203]},{"content":"The exact height in pixels of the controls is used.","pos":[423213,423264]},{"content":"0 Auto.","pos":[423307,423314]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[423326,423415]},{"content":"1 Column height.","pos":[423420,423436]},{"content":"The layout of the form determines the height of the control.","pos":[423439,423499]},{"content":"The height and height calculation mode can be set separately.","pos":[423532,423593]},{"pos":[423599,423616],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[423618,423680]},{"pos":[423727,423737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423739,423744]},{"pos":[423753,423765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[423767,423788]},{"pos":[423795,423802],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[423804,423858]},{"content":"Mode.","pos":[423862,423867]},{"content":"Height Calculation.","pos":[423879,423898]},{"content":"Exact.","pos":[424084,424090]},{"content":"The exact height in pixels of the controls is used.","pos":[424101,424152]},{"content":"Auto.","pos":[424195,424200]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[424212,424301]},{"content":"Column height.","pos":[424306,424320]},{"content":"The layout of the form determines the height of the control.","pos":[424323,424383]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[424416,424501]},{"pos":[424507,424525],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[424527,424566]},{"pos":[424614,424624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424626,424631]},{"pos":[424640,424652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[424654,424675]},{"pos":[424682,424689],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[424691,424781]},{"pos":[424787,424802],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[424804,424908]},{"pos":[424953,424963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424965,424970]},{"pos":[424979,424991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[424993,425048]},{"pos":[425055,425062],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[425064,425132]},{"content":"The help text must not exceed 250 characters.","pos":[425133,425178]},{"pos":[425184,425206],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[425258,425268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425270,425275]},{"pos":[425284,425296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425302,425311],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[425313,425345]},{"pos":[425373,425385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[425387,425409]},{"pos":[425415,425433],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[425435,425511]},{"pos":[425552,425564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[425566,425640]},{"pos":[425646,425657],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[425708,425718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425720,425725]},{"content":"mode","pos":[425739,425743]},{"pos":[425752,425764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425770,425785],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[425830,425840],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425842,425847]},{"pos":[425856,425868],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425874,425890],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[425936,425946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425948,425953]},{"pos":[425962,425974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425980,425992],"content":"Method loops","linkify":"Method loops","nodes":[{"content":"Method loops","pos":[0,12]}]},{"pos":[426034,426044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426046,426051]},{"pos":[426060,426072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426078,426089],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[426091,426226]},{"pos":[426267,426277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426279,426284]},{"content":"The name to assign to the control.","pos":[426287,426321]},{"pos":[426328,426340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[426342,426406]},{"pos":[426413,426420],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[426422,426516]},{"content":"It must start with a letter.","pos":[426522,426550]},{"content":"It cannot exceed 250 characters.","pos":[426555,426587]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[426592,426646],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[426651,426691]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[426696,426806]},{"pos":[426812,426835],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[426888,426898],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426900,426905]},{"pos":[426914,426926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426932,426950],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[427018,427028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427030,427035]},{"pos":[427044,427056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427062,427073],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[427075,427202]},{"pos":[427251,427261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427263,427268]},{"content":"The value to assign to the skip property of the control.","pos":[427271,427327]},{"pos":[427334,427346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[427348,427454]},{"pos":[427460,427470],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[427520,427530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427532,427537]},{"content":"mode","pos":[427551,427555]},{"pos":[427564,427576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427582,427596],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[427640,427650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427652,427657]},{"pos":[427666,427678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427684,427699],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[427744,427754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427756,427761]},{"pos":[427770,427782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427788,427806],"content":"Method transparent","linkify":"Method transparent","nodes":[{"content":"Method transparent","pos":[0,18]}]},{"pos":[427862,427872],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427874,427879]},{"pos":[427888,427900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427906,427917],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[427958,427968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427970,427975]},{"pos":[427984,427996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428002,428017],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[428062,428072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428074,428079]},{"pos":[428088,428100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428106,428125],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[428174,428184],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428186,428191]},{"pos":[428200,428212],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428218,428238],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[428288,428298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428300,428305]},{"pos":[428314,428326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428332,428354],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[428423,428433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428435,428440]},{"content":"mode","pos":[428454,428458]},{"pos":[428467,428479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428485,428511],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[428576,428586],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[428588,428592]},{"pos":[428601,428613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428619,428646],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[428703,428713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428715,428720]},{"pos":[428729,428741],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428747,428761],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[428813,428823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428825,428830]},{"pos":[428839,428851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428857,428869],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[428871,428909]},{"pos":[428961,428971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428973,428978]},{"content":"mode","pos":[428992,428996]},{"pos":[429005,429017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[429019,429054]},{"pos":[429061,429068],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[429070,429123]},{"content":"Calculate the width according to the following table:","pos":[429124,429177]},{"content":"Mode.","pos":[429181,429186]},{"content":"Width calculation.","pos":[429199,429217]},{"content":"-1 Exact.","pos":[429403,429412]},{"content":"The exact width in pixels of the controls is used.","pos":[429421,429471]},{"content":"0 Auto.","pos":[429514,429521]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[429532,429620]},{"content":"1 Column width.","pos":[429625,429640]},{"content":"The layout of the form determines the width of the control.","pos":[429643,429702]},{"content":"The width and width calculation mode can be set separately.","pos":[429735,429794]},{"pos":[429800,429816],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[429818,429880]},{"pos":[429926,429936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429938,429943]},{"pos":[429952,429964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[429966,430027]},{"pos":[430034,430041],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[430043,430096]},{"content":"Mode.","pos":[430100,430105]},{"content":"Width Calculation.","pos":[430116,430134]},{"content":"Exact.","pos":[430318,430324]},{"content":"The exact width in pixels of the controls is used.","pos":[430334,430384]},{"content":"Auto.","pos":[430427,430432]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[430443,430531]},{"content":"Column width.","pos":[430536,430549]},{"content":"The layout of the form determines the width of the control.","pos":[430552,430611]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[430644,430727]},{"pos":[430733,430750],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[430752,430790]},{"pos":[430837,430847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[430849,430854]},{"pos":[430863,430875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[430877,430912]},{"pos":[430919,430926],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[430928,431001]},{"pos":[431007,431036],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[431154,431164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[431166,431182]},{"content":"objectMethodToCall","pos":[431196,431214]},{"content":"overrideObject","pos":[431228,431242]}],"content":"---\n# required metadata\n\ntitle: F Classes - FieldBinding to FormBuildAnimateControl | Microsoft Docs\ndescription: System API classes that start with the letter F.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2016-02-24 14:32:08\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 52411\nms.assetid: 9023dffd-fe3d-4d8e-92c5-0089b4c7bf37\nms.region: Global\n# ms.industry: \nms.author: robinr\n\n---\n\n# F Classes - FieldBinding to FormBuildAnimateControl\n\nSystem API classes that start with the letter F.\n\nClass FieldBinding\n------------------\n\n    class FieldBinding extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                   | Description                                                |\n|----------------------------------------------------------|------------------------------------------------------------|\n| public int fieldArrayIndex()                             |                                                            |\n| public int fieldId()                                     |                                                            |\n| public str fieldName()                                   |                                                            |\n| public boolean isEqualTo(FieldBinding otherFieldBinding) |                                                            |\n| public boolean isNull()                                  |                                                            |\n| public boolean isValid()                                 |                                                            |\n| public container pack()                                  | Serializes the current instance of the FieldBinding class. |\n| public int tableId()                                     |                                                            |\n| public str tableName()                                   |                                                            |\n| public void new()                                        | Initializes a new instance of the FieldBinding class.      |\n\n### Method fieldArrayIndex\n\n    public int fieldArrayIndex()\n\n#### Return Value\n\n### Method fieldId\n\n    public int fieldId()\n\n#### Return Value\n\n### Method fieldName\n\n    public str fieldName()\n\n#### Return Value\n\n### Method isEqualTo\n\n    public boolean isEqualTo(FieldBinding otherFieldBinding)\n\n#### Parameters\n\notherFieldBinding  \n\n#### Return Value\n\n### Method isNull\n\n    public boolean isNull()\n\n#### Return Value\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method pack\n\nSerializes the current instance of the FieldBinding class.\n\n    public container pack()\n\n#### Return Value\n\nA container that contains the current instance of the FieldBinding class.\n\n### Method tableId\n\n    public int tableId()\n\n#### Return Value\n\n### Method tableName\n\n    public str tableName()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the FieldBinding class.\n\n    public void new()\n\n## Class FieldFilterValue\n    class FieldFilterValue extends FilterValue\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                      | Description                                     |\n|-------------------------------------------------------------|-------------------------------------------------|\n| public AnyType valueAnyType()                               |                                                 |\n| public void new(FieldBinding fieldBinding, str filterValue) | Initializes a new instance of the Object class. |\n\n### Method valueAnyType\n\n    public AnyType valueAnyType()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(FieldBinding fieldBinding, str filterValue)\n\n#### Parameters\n\nfieldBinding  \n\n<!-- -->\n\nfilterValue  \n\n## Class FileIOPermission\n    class FileIOPermission extends CodeAccessPermission\n\nThe FileIOPermission class controls the ability to access files and folders.\n\n### Remarks\n\nThe FileIoPermission class is designed to check permissions for specific APIs. For a list of all APIs that are protected by permissions, see Secured APIs. Before the protected API is run, you must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission::demand method is called on. Call a method on the server tier from one of the following:\n\n-   A server static method\n-   A class instance method that is set to run on the server by using the RunOn class property\n\n### Examples\n\nThe following code example shows a new instance of the FileIoPermission class that specifies read access for the File.txt file. The assert method is called to declare that the code can then call the AsciiIo.new method.\n\n    server static void main(Args args) \n    { \n        FileIoPermission _perm; \n        AsciiIo a; \n        _perm = new FileIoPermission(\"c:\\\\File.txt\",'r'); \n        _perm.assert(); \n        // Invoke the protected API. \n        a = new AsciiIo(\"c:\\\\File.txt\",'r'); \n    }\n\n### Methods\n\n| Method                                                 | Description                                                                      |\n|--------------------------------------------------------|----------------------------------------------------------------------------------|\n| public CodeAccessPermission copy()                     | Creates and returns a copy of the current permission class object.               |\n| public boolean isSubsetOf(CodeAccessPermission target) | Determines whether the current permission is a subset of a specified permission. |\n| public void new(str filename, str mode)                | Initializes a new instance of the CodeAccessPermission class.                    |\n\n### Method copy\n\nCreates and returns a copy of the current permission class object.\n\n    public CodeAccessPermission copy()\n\n#### Return Value\n\nA copy of the current permission object.\n\n#### Remarks\n\nYou override this method when you derive a class from the CodeAccessPermission class. For more information, see copy.\n\n### Method isSubsetOf\n\nDetermines whether the current permission is a subset of a specified permission.\n\n    public boolean isSubsetOf(CodeAccessPermission target)\n\n#### Parameters\n\ntarget  \nA CodeAccessPermission class object.\n\n#### Return Value\n\ntrue if the current permission is a subset of the specified permission; otherwise, false.\n\n#### Remarks\n\nYou override this method when you derive a class from the CodeAccessPermission class. For more information, see M: CodeAccessPermission.isSubsetOf.\n\n### Method new\n\nInitializes a new instance of the CodeAccessPermission class.\n\n    public void new(str filename, str mode)\n\n#### Parameters\n\nfilename  \nA String data type that specifies the type of access.\n\n<!-- -->\n\nmode  \nA String data type that specifies the type of access.\n\n#### Remarks\n\nThe following table lists the possible values for the \\_mode parameter.\n\n|     |                |\n|-----|----------------|\n| R   | Read           |\n| W   | Write          |\n| RW  | Read and write |\n\n#### Examples\n\nThe following code example shows a new instance of the FileIoPermission class that specifies read access for the File.txt file.\n\n    server static void main(Args args) \n    { \n        FileIoPermission _perm; \n        _perm = new FileIoPermission(\"c:\\\\File.txt\",'r'); \n    }\n\n## Class FilterValue\n    class FilterValue extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                             | Description |\n|------------------------------------|-------------|\n| public FieldBinding fieldBinding() |             |\n| public str value(\\[str fvalue\\])   |             |\n| public str valueForQueryRange()    |             |\n\n### Method fieldBinding\n\n    public FieldBinding fieldBinding()\n\n#### Return Value\n\n### Method value\n\n    public str value([str fvalue])\n\n#### Parameters\n\nfvalue  \n\n#### Return Value\n\n### Method valueForQueryRange\n\n    public str valueForQueryRange()\n\n#### Return Value\n\n## Class Form\n    class Form extends TreeNode\n\nThe Form class represents an instance of a design-time form.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                           | Description                                                                                                               |\n|----------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| public FormBuildControl addControl(FormControlType controlType, str controlName)                                                 |                                                                                                                           |\n| public FormBuildControl addControlEx(str controlClass, str controlName, \\[FormBuildControl insertAfter\\], \\[boolean pushFront\\]) |                                                                                                                           |\n| public FormBuildDataSource addDataSource(str name, \\[str tableName\\])                                                            |                                                                                                                           |\n| public List rootFormDataSources()                                                                                                |                                                                                                                           |\n| public FormBuildDesign addDesign(str name)                                                                                       |                                                                                                                           |\n| public Query query(str queryName)                                                                                                |                                                                                                                           |\n| public boolean allowPreLoading(\\[boolean value\\])                                                                                | A Boolean value that determines whether a preloaded instance can be used when the associated FormRun instance is created. |\n| public boolean autoCacheUpdate(\\[boolean value\\])                                                                                |                                                                                                                           |\n| public str changedBy(\\[str value\\])                                                                                              | Gets or sets the name of the user who last changed the application object.                                                |\n| public Date changedDate(\\[Date value\\])                                                                                          | Gets or sets the date an application object was last changed.                                                             |\n| public str changedTime(\\[str value\\])                                                                                            | Gets or sets the time an application object was last changed.                                                             |\n| public ChangeGroupMode changeGroupMode(\\[ChangeGroupMode value\\])                                                                |                                                                                                                           |\n| public str createdBy(\\[str value\\])                                                                                              | Gets or sets the name of the user who created the application object.                                                     |\n| public Date creationDate(\\[Date value\\])                                                                                         | Gets or sets the date an application object was created.                                                                  |\n| public str creationTime(\\[str value\\])                                                                                           |                                                                                                                           |\n| public FormBuildDataSource dataSource(AnyType objectSet)                                                                         |                                                                                                                           |\n| public int dataSourceCount()                                                                                                     |                                                                                                                           |\n| public FormBuildDesign design(\\[int designNo\\])                                                                                  |                                                                                                                           |\n| public int formTemplate(\\[int value\\])                                                                                           |                                                                                                                           |\n| public str interactionClass(\\[str value\\])                                                                                       |                                                                                                                           |\n| public boolean isLoadedForInference()                                                                                            |                                                                                                                           |\n| public str name(\\[str value\\])                                                                                                   | Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object. |\n| public Guid origin(\\[Guid value\\])                                                                                               |                                                                                                                           |\n| ::public static boolean formKernelObjectHasMethod(Object kernelObject, str methodName)                                           |                                                                                                                           |\n| ::public static boolean formObjectSetHasMethod(FormObjectSet formObjectSet, str methodName)                                      |                                                                                                                           |\n| ::public static boolean formRunHasMethod(xFormRun formRun, str methodName)                                                       |                                                                                                                           |\n| ::public static str getSetupUserQueryElementName(MenuItemType menuItemType, str menuItemName)                                    |                                                                                                                           |\n| public void new(\\[str name\\], \\[boolean buildMode\\])                                                                             | Initializes a new instance of the Form class.                                                                             |\n| public void inInitializeDesign(\\[boolean value\\])                                                                                |                                                                                                                           |\n| public void save()                                                                                                               |                                                                                                                           |\n| public void load(str name, \\[boolean buildMode\\])                                                                                |                                                                                                                           |\n| public void finalize()                                                                                                           |                                                                                                                           |\n\n### Method addControl\n\n    public FormBuildControl addControl(FormControlType controlType, str controlName)\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormBuildControl addControlEx(str controlClass, str controlName, [FormBuildControl insertAfter], [boolean pushFront])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\npushFront  \n\n#### Return Value\n\n### Method addDataSource\n\n    public FormBuildDataSource addDataSource(str name, [str tableName])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\ntableName  \n\n#### Return Value\n\n### Method rootFormDataSources\n\n    public List rootFormDataSources()\n\n#### Return Value\n\n### Method addDesign\n\n    public FormBuildDesign addDesign(str name)\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method query\n\n    public Query query(str queryName)\n\n#### Parameters\n\nqueryName  \n\n#### Return Value\n\n### Method allowPreLoading\n\nA Boolean value that determines whether a preloaded instance can be used when the associated FormRun instance is created.\n\n    public boolean allowPreLoading([boolean value])\n\n#### Parameters\n\nvalue  \ntrue if a preloaded instance can be used when the associated FormRun instance is created; otherwise, false.\n\n#### Return Value\n\ntrue if a preloaded instance can be used when the associated FormRun instance is created; otherwise, false.\n\n### Method autoCacheUpdate\n\n    public boolean autoCacheUpdate([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changedBy\n\nGets or sets the name of the user who last changed the application object.\n\n    public str changedBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method changedDate\n\nGets or sets the date an application object was last changed.\n\n    public Date changedDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was last changed.\n\n### Method changedTime\n\nGets or sets the time an application object was last changed.\n\n    public str changedTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe time an application object was last changed.\n\n### Method changeGroupMode\n\n    public ChangeGroupMode changeGroupMode([ChangeGroupMode value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method createdBy\n\nGets or sets the name of the user who created the application object.\n\n    public str createdBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method creationDate\n\nGets or sets the date an application object was created.\n\n    public Date creationDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was created.\n\n### Method creationTime\n\n    public str creationTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\n    public FormBuildDataSource dataSource(AnyType objectSet)\n\n#### Parameters\n\nobjectSet  \n\n#### Return Value\n\n### Method dataSourceCount\n\n    public int dataSourceCount()\n\n#### Return Value\n\n### Method design\n\n    public FormBuildDesign design([int designNo])\n\n#### Parameters\n\ndesignNo  \n\n#### Return Value\n\n### Method formTemplate\n\n    public int formTemplate([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method interactionClass\n\n    public str interactionClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isLoadedForInference\n\n    public boolean isLoadedForInference()\n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method formKernelObjectHasMethod\n\n    public static boolean formKernelObjectHasMethod(Object kernelObject, str methodName)\n\n#### Parameters\n\nkernelObject  \n\n<!-- -->\n\nmethodName  \n\n#### Return Value\n\n### Method formObjectSetHasMethod\n\n    public static boolean formObjectSetHasMethod(FormObjectSet formObjectSet, str methodName)\n\n#### Parameters\n\nformObjectSet  \n\n<!-- -->\n\nmethodName  \n\n#### Return Value\n\n### Method formRunHasMethod\n\n    public static boolean formRunHasMethod(xFormRun formRun, str methodName)\n\n#### Parameters\n\nformRun  \n\n<!-- -->\n\nmethodName  \n\n#### Return Value\n\n### Method getSetupUserQueryElementName\n\n    public static str getSetupUserQueryElementName(MenuItemType menuItemType, str menuItemName)\n\n#### Parameters\n\nmenuItemType  \n\n<!-- -->\n\nmenuItemName  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Form class.\n\n    public void new([str name], [boolean buildMode])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\nbuildMode  \n\n### Method inInitializeDesign\n\n    public void inInitializeDesign([boolean value])\n\n#### Parameters\n\nvalue  \n\n### Method save\n\n    public void save()\n\n### Method load\n\n    public void load(str name, [boolean buildMode])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\nbuildMode  \n\n### Method finalize\n\n    public void finalize()\n\n## Class FormActionPaneControl\n    class FormActionPaneControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                                                                                                          |\n|---------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |                                                                                                                                                      |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                                                                                                      |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |                                                                                                                                                      |\n| public boolean alignChild(\\[boolean value\\])                                                                        |                                                                                                                                                      |\n| public boolean alignChildren(\\[boolean value\\])                                                                     |                                                                                                                                                      |\n| public boolean alignControl(\\[boolean value\\])                                                                      | Determines whether to align the control.                                                                                                             |\n| public boolean allowEdit(\\[boolean value\\])                                                                         | Determines whether the user can change the contents of the control.                                                                                  |\n| public boolean allowSysSetup()                                                                                      | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                  |\n| public int allowUserSetup(\\[int value\\])                                                                            |                                                                                                                                                      |\n| public int arrangeGuide(\\[int value\\])                                                                              |                                                                                                                                                      |\n| public int arrangeMethod(\\[int value\\])                                                                             |                                                                                                                                                      |\n| public int arrangeWhen(\\[int value\\])                                                                               |                                                                                                                                                      |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   | Determines whether the system can declare a member variable that has the same name as the control.                                                   |\n| public int beginDrag(int x, int y)                                                                                  | Is called when the user starts to drag a form control.                                                                                               |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                           |                                                                                                                                                      |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                                 |                                                                                                                                                      |\n| public int bottomMarginValue(\\[int value\\])                                                                         |                                                                                                                                                      |\n| public container calcControlSize(int chars, int lines)                                                              | Retrieves the size of the control.                                                                                                                   |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |                                                                                                                                                      |\n| public boolean canContain(FormControl control)                                                                      |                                                                                                                                                      |\n| public str caption(\\[str value\\])                                                                                   | Gets or set the caption of the control.                                                                                                              |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                             |                                                                                                                                                      |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                                |                                                                                                                                                      |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                      |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                      |\n| public int columnspaceValue(\\[int value\\])                                                                          |                                                                                                                                                      |\n| public int columnsValue(\\[int value\\])                                                                              |                                                                                                                                                      |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            | Gets or sets the configuration key that is assigned to the control.                                                                                  |\n| public List configurationKeyEx()                                                                                    | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                     |\n| public boolean contains(FormControl control)                                                                        |                                                                                                                                                      |\n| public int controlCount()                                                                                           |                                                                                                                                                      |\n| public FormControl controlNum(int controlNo)                                                                        |                                                                                                                                                      |\n| public str dataRelationPath(\\[str value\\])                                                                          | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                        |\n| public int dataSource(\\[AnyType value\\])                                                                            | Gets or sets a data source that will be used by the control or the form.                                                                             |\n| public int displayTarget(\\[int value\\])                                                                             | Gets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                                  | Determines whether to enable or disable drag-and-drop operations for the control.                                                                    |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                       |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                     |\n| public str dragText()                                                                                               | Retrieves the text that is displayed when the form control is dragged.                                                                               |\n| public boolean enabled(\\[boolean value\\])                                                                           | Determines whether to enable or disable the object.                                                                                                  |\n| public boolean hasChanged(\\[boolean val\\])                                                                          | Sets or returns a value that indicates whether the contents of the control have changed.                                                             |\n| public boolean hasUserSetting()                                                                                     | Indicates whether the control has custom user settings.                                                                                              |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                                                                                                              |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.                                                                                       |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                                                                                                              |\n| public str helpField()                                                                                              | Retrieves the Help text for the control.                                                                                                             |\n| public str helpText(\\[str value\\])                                                                                  | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                             |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                       |                                                                                                                                                      |\n| public str hierarchyParent(\\[str value\\])                                                                           | Gets or sets the HierarchyParent property value of the control.                                                                                      |\n| public int hWnd()                                                                                                   | Retrieves the Windows handle for the control.                                                                                                        |\n| public boolean isContainer()                                                                                        |                                                                                                                                                      |\n| public boolean isDisplayed()                                                                                        | Retrieves a value that indicates whether the control is displayed.                                                                                   |\n| public boolean isRestricted()                                                                                       | Retrieves a value that indicates whether the control is restricted.                                                                                  |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                |\n| public boolean leave()                                                                                              |                                                                                                                                                      |\n| public int left(int value, \\[int mode\\])                                                                            | Gets or sets the horizontal position of the control in the form.                                                                                     |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                             |                                                                                                                                                      |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                                   |                                                                                                                                                      |\n| public int leftMarginValue(\\[int value\\])                                                                           |                                                                                                                                                      |\n| public int leftMode(\\[int value\\])                                                                                  | Sets the horizontal arrange mode for the control in the form.                                                                                        |\n| public int leftValue(\\[int value\\])                                                                                 | Gets or sets the horizontal position of the control in the form.                                                                                     |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     | Marks or unmarks the control as a user-added control.                                                                                                |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     | Is called when the control is double-clicked by the user.                                                                                            |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user clicks the mouse button over the control.                                                                                    |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user moves the mouse pointer over the control.                                                                                    |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           | Is called when the user releases the mouse button over the control area.                                                                             |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        |                                                                                                                                                      |\n| public str name(\\[str value\\])                                                                                      | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.        |\n| public int neededPermission(\\[int value\\])                                                                          |                                                                                                                                                      |\n| public container SysObsoleteAttribute()                                                                             |                                                                                                                                                      |\n| public FormControl parentControl()                                                                                  | Retrieves the parent control for the control.                                                                                                        |\n| public int position(\\[int value\\])                                                                                  |                                                                                                                                                      |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                      |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                      |\n| public int rightMarginValue(\\[int value\\])                                                                          |                                                                                                                                                      |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           | Sets or returns the ID of the security key for the control.                                                                                          |\n| public int showContextMenu(int menuHandle)                                                                          | Shows the shortcut menu for the control.                                                                                                             |\n| public boolean skip(\\[boolean value\\])                                                                              | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                      |\n| public int sort(\\[SortOrder sortDirection\\])                                                                        |                                                                                                                                                      |\n| public int style(\\[int value\\])                                                                                     |                                                                                                                                                      |\n| public str toolTip()                                                                                                | Retrieves the tooltip text for the control.                                                                                                          |\n| public int top(int value, \\[int mode\\])                                                                             | Gets or sets the vertical position of the control in the form.                                                                                       |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                              |                                                                                                                                                      |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                                    |                                                                                                                                                      |\n| public int topMarginValue(\\[int value\\])                                                                            |                                                                                                                                                      |\n| public int topMode(\\[int value\\])                                                                                   | Sets the vertical arrange mode for the control in the form.                                                                                          |\n| public int topValue(\\[int value\\])                                                                                  | Gets or sets the vertical position of the control in the form.                                                                                       |\n| public int type(\\[int value\\])                                                                                      |                                                                                                                                                      |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                                                                                                      |\n| public int userData(\\[int value\\])                                                                                  | Gets or sets the user data for the control.                                                                                                          |\n| public int userDataItem(\\[int value\\])                                                                              | Gets or sets the user data item for the control.                                                                                                     |\n| public int userDataItems(\\[int value\\])                                                                             | Gets or sets the number of user data items for the control.                                                                                          |\n| public int userDisable(\\[int value\\])                                                                               | Gets or sets the value that indicates whether the control is disabled for the user.                                                                  |\n| public int userHeight(\\[int value\\])                                                                                | Gets or sets the custom user height for the control.                                                                                                 |\n| public int userHide(\\[int value\\])                                                                                  | Gets or sets the value that indicates whether the control is hidden from the user.                                                                   |\n| public int userOrgContainer(\\[int value\\])                                                                          | Gets or sets the organization container for the control.                                                                                             |\n| public int userOrgSibling(\\[int value\\])                                                                            | Gets or sets the organization sibling for the control.                                                                                               |\n| public str userPromptText(\\[str value\\])                                                                            | Gets or sets the user label text for the control.                                                                                                    |\n| public int userSecurityLevel(\\[int value\\])                                                                         | Gets or sets the user security level for the control.                                                                                                |\n| public int userSkip(\\[int value\\])                                                                                  | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form. |\n| public int userWidth(\\[int value\\])                                                                                 | Sets or returns the width of the control in pixels.                                                                                                  |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |                                                                                                                                                      |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        | Gets or sets the vertical spacing of the control in the form.                                                                                        |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              | Sets the vertical spacing mode for the control in the form.                                                                                          |\n| public int verticalSpacingValue(\\[int value\\])                                                                      | Gets or sets the vertical spacing of the control in the form.                                                                                        |\n| public boolean visible(\\[boolean value\\])                                                                           | Sets or returns a value that indicates whether the control is visible.                                                                               |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                                                                                                               |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode of the width of the control.                                                                                       |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                                                                                                               |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                   |\n| public void lostFocus()                                                                                             | Indicates that the control has lost focus.                                                                                                           |\n| public void filter(\\[str filterStr\\])                                                                               |                                                                                                                                                      |\n| public void dragLeave()                                                                                             | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                     |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       | Is called when the user moves the mouse pointer into the control area.                                                                               |\n| public void gotFocus()                                                                                              | Indicates that the control has received focus.                                                                                                       |\n| public void mouseLeave()                                                                                            | Indicates that the mouse pointer has left the control.                                                                                               |\n| public void setArea(str area)                                                                                       |                                                                                                                                                      |\n| public void arrange()                                                                                               |                                                                                                                                                      |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                          |                                                                                                                                                      |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                      |\n| public void jumpRef()                                                                                               |                                                                                                                                                      |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                            |                                                                                                                                                      |\n| public void inputSearch(str searchStr)                                                                              | Performs data filtering for the control, based on the specified string.                                                                              |\n| public void endDrag()                                                                                               | Is called when the user has finished dragging a form control.                                                                                        |\n| public void setFocus()                                                                                              | Sets the focus on the control.                                                                                                                       |\n| public void tabChanged(str newTab)                                                                                  | Is called when the active tab is changed.                                                                                                            |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                      |\n| public void displayControl()                                                                                        | Displays the control.                                                                                                                                |\n| public void prefColumnSize(int width, int height)                                                                   | Specifies the preferred column width and height for the form control.                                                                                |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |                                                                                                                                                      |\n| public void cut()                                                                                                   | Cuts the contents of the control.                                                                                                                    |\n| public void resetUserSetting()                                                                                      | Resets the user settings for the control.                                                                                                            |\n| private void OnTabChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                       |                                                                                                                                                      |\n| public void paste()                                                                                                 | Pastes the contents of the clipboard into the control.                                                                                               |\n| public void copy()                                                                                                  | Copies the contents of the control to the clipboard.                                                                                                 |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                 |\n| public void context()                                                                                               | Shows the shortcut menu for the control.                                                                                                             |\n| public void enter()                                                                                                 |                                                                                                                                                      |\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control will be shown in the SysSetup form; otherwise, false.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe property is set to this value; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that has the width and height.\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the FormControl::dragLeave method , the FormControl::dragOver method, and the FormControl::dragOverEx method to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer value that indicates how the control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box.The help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the HierarchyParent value of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. Using this value for the neededSetupRights parameter always returns true.                 |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nThis method returns true only if the AllowUserSetup property for the design and all parent containers allows for the level of access that is specified by the neededSetupRights parameter.\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterId  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. Right-clicking invokes a menu that enables the control to be hidden or displayed. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width for the control, the return is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to invoke the setup form in which the character specification is made.\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method setArea\n\n    public void setArea(str area)\n\n#### Parameters\n\narea  \n\n### Method arrange\n\n    public void arrange()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method tabChanged\n\nIs called when the active tab is changed.\n\n    public void tabChanged(str newTab)\n\n#### Parameters\n\nnewTab  \n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method OnTabChanged\n\n    private void OnTabChanged([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn Integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method enter\n\n    public void enter()\n\n## Class FormActionPaneTabControl\n    class FormActionPaneTabControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                                                                                                          |\n|---------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |                                                                                                                                                      |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                                                                                                      |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |                                                                                                                                                      |\n| public boolean alignChild(\\[boolean value\\])                                                                        |                                                                                                                                                      |\n| public boolean alignChildren(\\[boolean value\\])                                                                     |                                                                                                                                                      |\n| public boolean alignControl(\\[boolean value\\])                                                                      | Determines whether to align the control.                                                                                                             |\n| public boolean allowEdit(\\[boolean value\\])                                                                         | Determines whether the user can change the contents of the control.                                                                                  |\n| public boolean allowSysSetup()                                                                                      | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                  |\n| public int allowUserSetup(\\[int value\\])                                                                            |                                                                                                                                                      |\n| public int arrangeGuide(\\[int value\\])                                                                              |                                                                                                                                                      |\n| public int arrangeMethod(\\[int value\\])                                                                             |                                                                                                                                                      |\n| public int arrangeWhen(\\[int value\\])                                                                               |                                                                                                                                                      |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   | Determines whether the system can declare a member variable that has the same name as the control.                                                   |\n| public int beginDrag(int x, int y)                                                                                  | Called when the user starts to drag a form control.                                                                                                  |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                           |                                                                                                                                                      |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                                 |                                                                                                                                                      |\n| public int bottomMarginValue(\\[int value\\])                                                                         |                                                                                                                                                      |\n| public container calcControlSize(int chars, int lines)                                                              | Retrieves the size of the control.                                                                                                                   |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |                                                                                                                                                      |\n| public boolean canContain(FormControl control)                                                                      |                                                                                                                                                      |\n| public str caption(\\[str value\\])                                                                                   | Gets or set the caption of the control.                                                                                                              |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                             |                                                                                                                                                      |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                                |                                                                                                                                                      |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                      |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                      |\n| public int columnspaceValue(\\[int value\\])                                                                          |                                                                                                                                                      |\n| public int columnsValue(\\[int value\\])                                                                              |                                                                                                                                                      |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            | Gets or sets the configuration key that is assigned to the control.                                                                                  |\n| public List configurationKeyEx()                                                                                    | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                     |\n| public boolean contains(FormControl control)                                                                        |                                                                                                                                                      |\n| public int controlCount()                                                                                           |                                                                                                                                                      |\n| public FormControl controlNum(int controlNo)                                                                        |                                                                                                                                                      |\n| public str countryRegionCodes(\\[str value\\])                                                                        | Gets or sets the comma-separated list of country/region codes for the control.                                                                       |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                         |                                                                                                                                                      |\n| public str dataRelationPath(\\[str value\\])                                                                          | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                        |\n| public int dataSource(\\[AnyType value\\])                                                                            | Gets or sets a data source to be used by the control or the form.                                                                                    |\n| public int displayTarget(\\[int value\\])                                                                             | Gets or sets the value that indicates whether the control is displayed in the client, in Enterprise Portal for Microsoft Dynamics AX, or in both.    |\n| public int dragDrop(\\[int value\\])                                                                                  | Determines whether to enable or disable drag-and-drop operations for the control.                                                                    |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                       |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                     |\n| public str dragText()                                                                                               | Retrieves the text that is displayed when the form control is dragged.                                                                               |\n| public boolean enabled(\\[boolean value\\])                                                                           | Determines whether to enable or disable the object.                                                                                                  |\n| public boolean hasChanged(\\[boolean val\\])                                                                          | Sets or returns a value that indicates whether the contents of the control have changed.                                                             |\n| public boolean hasUserSetting()                                                                                     | Indicates whether the control has custom user settings.                                                                                              |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                                                                                                              |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.                                                                                       |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                                                                                                              |\n| public str helpField()                                                                                              | Retrieves the Help text for the control.                                                                                                             |\n| public str helpText(\\[str value\\])                                                                                  | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                             |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                       |                                                                                                                                                      |\n| public str hierarchyParent(\\[str value\\])                                                                           | Gets or sets the HierarchyParent property value of the control.                                                                                      |\n| public int hWnd()                                                                                                   | Retrieves the Windows handle for the control.                                                                                                        |\n| public int imageLocation(\\[int value\\])                                                                             |                                                                                                                                                      |\n| public boolean isContainer()                                                                                        |                                                                                                                                                      |\n| public boolean isDisplayed()                                                                                        | Retrieves a value that indicates whether the control is displayed.                                                                                   |\n| public boolean isRestricted()                                                                                       | Retrieves a value that indicates whether the control is restricted.                                                                                  |\n| public boolean isSelected()                                                                                         |                                                                                                                                                      |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                |\n| public str keyTip(\\[str value\\])                                                                                    |                                                                                                                                                      |\n| public boolean leave()                                                                                              |                                                                                                                                                      |\n| public int left(int value, \\[int mode\\])                                                                            | Gets or sets the horizontal position of the control in the form.                                                                                     |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                             |                                                                                                                                                      |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                                   |                                                                                                                                                      |\n| public int leftMarginValue(\\[int value\\])                                                                           |                                                                                                                                                      |\n| public int leftMode(\\[int value\\])                                                                                  | Sets the horizontal arrange mode for the control in the form.                                                                                        |\n| public int leftValue(\\[int value\\])                                                                                 | Gets or sets the horizontal position of the control in the form.                                                                                     |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     | Marks or unmarks the control as a user-added control.                                                                                                |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     | Is called when the control is double-clicked by the user.                                                                                            |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user clicks the mouse button over the control.                                                                                    |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user moves the mouse pointer over the control.                                                                                    |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           | Is called when the user releases the mouse button over the control area.                                                                             |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        |                                                                                                                                                      |\n| public str name(\\[str value\\])                                                                                      | Gets or sets the name used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.                    |\n| public int neededPermission(\\[int value\\])                                                                          |                                                                                                                                                      |\n| public str normalImage(\\[str value\\])                                                                               |                                                                                                                                                      |\n| public int normalResource(\\[int value\\])                                                                            |                                                                                                                                                      |\n| public container SysObsoleteAttribute()                                                                             |                                                                                                                                                      |\n| public FormControl parentControl()                                                                                  | Retrieves the parent control for the control.                                                                                                        |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                      |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                      |\n| public int rightMarginValue(\\[int value\\])                                                                          |                                                                                                                                                      |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           | Sets or returns the ID of the security key for the control.                                                                                          |\n| public int showContextMenu(int menuHandle)                                                                          | Shows the shortcut menu for the control.                                                                                                             |\n| public boolean skip(\\[boolean value\\])                                                                              | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                      |\n| public int sort(\\[SortOrder sortDirection\\])                                                                        |                                                                                                                                                      |\n| public str toolTip()                                                                                                | Retrieves the tooltip text for the control.                                                                                                          |\n| public int top(int value, \\[int mode\\])                                                                             | Gets or sets the vertical position of the control in the form.                                                                                       |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                              |                                                                                                                                                      |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                                    |                                                                                                                                                      |\n| public int topMarginValue(\\[int value\\])                                                                            |                                                                                                                                                      |\n| public int topMode(\\[int value\\])                                                                                   | Sets the vertical arrange mode for the control in the form.                                                                                          |\n| public int topValue(\\[int value\\])                                                                                  | Gets or sets the vertical position of the control in the form.                                                                                       |\n| public int type(\\[int value\\])                                                                                      |                                                                                                                                                      |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                                                                                                      |\n| public int userData(\\[int value\\])                                                                                  | Gets or sets the user data for the control.                                                                                                          |\n| public int userDataItem(\\[int value\\])                                                                              | Gets or sets the user data item for the control.                                                                                                     |\n| public int userDataItems(\\[int value\\])                                                                             | Gets or sets the number of user data items for the control.                                                                                          |\n| public int userDisable(\\[int value\\])                                                                               | Gets or sets the value that indicates whether the control is disabled for the user.                                                                  |\n| public int userHeight(\\[int value\\])                                                                                | Gets or sets the custom user height for the control.                                                                                                 |\n| public int userHide(\\[int value\\])                                                                                  | Gets or sets the value that indicates whether the control is hidden from the user.                                                                   |\n| public int userOrgContainer(\\[int value\\])                                                                          | Gets or sets the organization container for the control.                                                                                             |\n| public int userOrgSibling(\\[int value\\])                                                                            | Gets or sets the organization sibling for the control.                                                                                               |\n| public str userPromptText(\\[str value\\])                                                                            | Gets or sets the user label text for the control.                                                                                                    |\n| public int userSecurityLevel(\\[int value\\])                                                                         | Gets or sets the user security level for the control.                                                                                                |\n| public int userSkip(\\[int value\\])                                                                                  | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form. |\n| public int userWidth(\\[int value\\])                                                                                 | Sets or returns the width of the control in pixels.                                                                                                  |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |                                                                                                                                                      |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        | Gets or sets the vertical spacing of the control in the form.                                                                                        |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              | Sets the vertical spacing mode for the control in the form.                                                                                          |\n| public int verticalSpacingValue(\\[int value\\])                                                                      | Gets or sets the vertical spacing of the control in the form.                                                                                        |\n| public boolean visible(\\[boolean value\\])                                                                           | Sets or returns a value that indicates whether the control is visible.                                                                               |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                                                                                                               |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode of the width of the control.                                                                                       |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                                                                                                               |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                            |                                                                                                                                                      |\n| public void setFocus()                                                                                              | Sets the focus on the control.                                                                                                                       |\n| public void resetUserSetting()                                                                                      | Resets the user settings for the control.                                                                                                            |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                   |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       | Is called when the user moves the mouse pointer into the control area.                                                                               |\n| public void gotFocus()                                                                                              | Indicates that the control has received focus.                                                                                                       |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                          |                                                                                                                                                      |\n| public void prefColumnSize(int width, int height)                                                                   | Specifies the preferred column width and height for the form control.                                                                                |\n| public void endDrag()                                                                                               | Is called when the user has finished dragging a form control.                                                                                        |\n| public void mouseLeave()                                                                                            | Indicates that the mouse pointer has left the control.                                                                                               |\n| public void inputSearch(str searchStr)                                                                              | Performs data filtering for the control, based on the specified string.                                                                              |\n| public void enter()                                                                                                 |                                                                                                                                                      |\n| public void context()                                                                                               | Shows the shortcut menu for the control.                                                                                                             |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                 |\n| public void jumpRef()                                                                                               |                                                                                                                                                      |\n| private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                      |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |                                                                                                                                                      |\n| public void cut()                                                                                                   | Cuts the contents of the control.                                                                                                                    |\n| public void lostFocus()                                                                                             | Indicates that the control has lost focus.                                                                                                           |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                      |\n| public void copy()                                                                                                  | Copies the contents of the control to the clipboard.                                                                                                 |\n| public void dragLeave()                                                                                             | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                     |\n| public void selectionChanged()                                                                                      |                                                                                                                                                      |\n| public void displayControl()                                                                                        | Displays the control.                                                                                                                                |\n| public void paste()                                                                                                 | Pastes the contents of the clipboard into the control.                                                                                               |\n| public void arrange()                                                                                               |                                                                                                                                                      |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                      |\n| public void filter(\\[str filterStr\\])                                                                               |                                                                                                                                                      |\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to be assigned to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe property is set to this value, if supplied.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method beginDrag\n\nCalled when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event will not be raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that has the width and height.\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key being assigned to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates whether the drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the FormControl::dragLeave, FormControl::dragOver, and FormControl::dragOverEx methods to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the HierarchyParent value of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isSelected\n\n    public boolean isSelected()\n\n#### Return Value\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. Using this value for the neededSetupRights parameter always returns true.                 |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nThis method returns true only if the AllowUserSetup property for the design and all parent containers allows for the level of access that is specified by the neededSetupRights parameter.\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterId  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name assigned to the control.\n\n#### Return Value\n\nThe name used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. Right-clicking invokes a menu that enables the control to be hidden or displayed. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width for the control, the return is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to invoke the setup form in which the character specification is made.\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how the control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method enter\n\n    public void enter()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method OnSelectionChanged\n\n    private void OnSelectionChanged([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method selectionChanged\n\n    public void selectionChanged()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method arrange\n\n    public void arrange()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n## Class FormActiveXControl\n    class FormActiveXControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                          |\n|-------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                             |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                  |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                  |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                   |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                               |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                   |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                              |\n| public str className(\\[str value\\])                                                                         |                                                                                                                                                      |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                  |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                     |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                       |\n| public str custom(\\[str value\\])                                                                            |                                                                                                                                                      |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                        |\n| public AnyType dispatch(VarArg )                                                                            |                                                                                                                                                      |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                    |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                       |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                     |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                               |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                  |\n| public COMError error()                                                                                     |                                                                                                                                                      |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                             |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                              |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                              |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                       |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                              |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                             |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                             |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                      |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                        |\n| public ComInterface interface()                                                                             |                                                                                                                                                      |\n| public boolean isContainer()                                                                                |                                                                                                                                                      |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                   |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                  |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                  |\n| public boolean leave()                                                                                      |                                                                                                                                                      |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                     |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                        |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                     |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                            |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                    |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                    |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                             |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.              |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                      |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                      |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                        |\n| public boolean rTLCapable(\\[boolean value\\])                                                                |                                                                                                                                                      |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                          |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                             |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                      |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                          |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                       |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                          |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                       |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                      |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                      |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                          |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                     |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                          |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                  |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                 |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                   |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                             |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                               |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                    |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls on the form. |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                  |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                        |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                          |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                        |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                               |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                               |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                       |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                               |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                              |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                 |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                     |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                   |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                               |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                      |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                            |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                             |\n| public void enter()                                                                                         |                                                                                                                                                      |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                      |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                |\n| public void updateSize()                                                                                    |                                                                                                                                                      |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                       |\n| public void mouseLeave()                                                                                    | Is called when the user moves the mouse pointer out of the control area.                                                                             |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                 |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                        |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                    |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                               |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                      |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                      |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                      |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                       |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                           |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to be assigned to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe property is set to this value, if supplied.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that has the width and height.\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method className\n\n    public str className([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key that is being assigned to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method custom\n\n    public str custom([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dispatch\n\n    public AnyType dispatch(VarArg )\n\n#### Parameters\n\n  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates whether the drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the FormControl::dragLeave, FormControl::dragOver, and FormControl::dragOverEx methods to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method error\n\n    public COMError error()\n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how the control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the HierarchyParent value of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method interface\n\n    public ComInterface interface()\n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control. For more information, see the “Remarks” section.\n\n#### Return Value\n\ntrue if the control, design, and parent container allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                 |\n|----------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. Using this value for neededSetupRights always returns true.                              |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label and width properties of the control. The user can also move the control. |\n\nThis method returns true only if the AllowUserSetup property for the design and all parent containers is at least as high as the level that is specified by the neededSetupRights parameter.\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must begin with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method rTLCapable\n\n    public boolean rTLCapable([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. Right-clicking invokes a menu that enables the control to be hidden or displayed. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls on the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width for the control, the return is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to invoke the setup form in which the character specification is made.\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method enter\n\n    public void enter()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method updateSize\n\n    public void updateSize()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method mouseLeave\n\nIs called when the user moves the mouse pointer out of the control area.\n\n    public void mouseLeave()\n\n#### Examples\n\nThe following example writes to the information log when the mouse pointer leaves the control.\n\n    public void mouseLeave() \n    { \n        info (strfmt(\"The mouse pointer has left the %1 control.\", \n                     this.name()) ); \n        super(); \n    }\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n## Class FormAnimateControl\n    class FormAnimateControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                          |\n|-------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                             |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                  |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                  |\n| public str animateFile(\\[str value\\])                                                                       |                                                                                                                                                      |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                   |\n| public boolean autoPlay(\\[boolean value\\])                                                                  |                                                                                                                                                      |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                               |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                             |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                   |\n| public boolean center(\\[boolean value\\])                                                                    |                                                                                                                                                      |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                  |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                     |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                       |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                        |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                    |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                       |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                     |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                               |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                  |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                             |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                              |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                              |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                       |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                              |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                             |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                             |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                      |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                        |\n| public boolean isContainer()                                                                                |                                                                                                                                                      |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                   |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                  |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                  |\n| public boolean leave()                                                                                      |                                                                                                                                                      |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                     |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                        |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                     |\n| public int loops(\\[int value\\])                                                                             |                                                                                                                                                      |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                            |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                    |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                    |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                             |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.              |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                      |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                      |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                        |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                          |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                             |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                      |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                          |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                       |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                          |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                       |\n| public boolean transparent(\\[boolean value\\])                                                               |                                                                                                                                                      |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                      |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                      |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                          |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                     |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                          |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                  |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                 |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                   |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                             |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                               |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                    |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form. |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                  |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                        |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                          |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                        |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                               |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                               |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                       |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                               |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                      |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                              |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                 |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                           |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                       |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                               |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                               |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                   |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                      |\n| public void enter()                                                                                         |                                                                                                                                                      |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                               |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                     |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                      |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                 |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                             |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                        |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                            |\n| public void play(\\[int firstFrame\\], \\[int lastFrame\\], \\[int loops\\])                                      |                                                                                                                                                      |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                      |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                       |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                    |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                      |\n| public void stop()                                                                                          |                                                                                                                                                      |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to be assigned to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method animateFile\n\n    public str animateFile([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe property is set to this value, if supplied.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoPlay\n\n    public boolean autoPlay([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that has the width and height.\n\n### Method center\n\n    public boolean center([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key that is being assigned to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the client, or in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates whether the drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the FormControl::dragLeave, FormControl::dragOver, and FormControl::dragOverEx methods to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how the control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the HierarchyParent value of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control. For more information, see “Remarks.”\n\n#### Return Value\n\ntrue if the control, design, and parent container allow for the level of customization that is specified by the neededSetupRights parameter; otherwise false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameters.\n\n|                                  |                                                                                                                                 |\n|----------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. Using this value for neededSetupRights always returns true.                              |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label and width properties of the control. The user can also move the control. |\n\nThis method returns true only if the AllowUserSetup property for the design and all parent containers is at least as high as the level that is specified by the neededSetupRights parameter.\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method loops\n\n    public int loops([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must begin with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method transparent\n\n    public boolean transparent([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. Right-clicking invokes a menu that enables the control to be hidden or displayed. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width for the control, the return is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to invoke the setup form in which the character specification is made.\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method enter\n\n    public void enter()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method play\n\n    public void play([int firstFrame], [int lastFrame], [int loops])\n\n#### Parameters\n\nfirstFrame  \n\n<!-- -->\n\nlastFrame  \n\n<!-- -->\n\nloops  \n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method stop\n\n    public void stop()\n\n## Class FormAutoLookupFactory\n    class FormAutoLookupFactory extends FieldBinding\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                              | Description                                                    |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------|\n| ::public static xFormRun buildLookupFormByField(FormControl controlHostingLookup, FieldBinding fieldBinding)                                                                        |                                                                |\n| ::public static xFormRun buildLookupFromCustomForm(FormControl controlHostingLookup, Form customLookupForm, FieldBinding fieldBinding, \\[xArgs customArgs\\], \\[Query customQuery\\]) |                                                                |\n| ::public static xFormRun buildReferenceLookupFromCustomForm(FormReferenceControl referenceControlHostingLookup, Form customLookupForm, \\[xArgs customArgs\\], \\[Query customQuery\\]) |                                                                |\n| ::public static void createLookupForClientsideControl(xFormRun parentForm, str targetId, str controlName, int tableId, int fieldId, str controlValue, boolean isInFilterMode)       |                                                                |\n| ::public static void performFormLookup(xFormRun lookupForm, \\[boolean blockUntilLookupClosed\\], \\[FormControl controlHostingLookup\\])                                               |                                                                |\n| private void new()                                                                                                                                                                  | Initializes a new instance of the FormAutoLookupFactory class. |\n\n### Method buildLookupFormByField\n\n    public static xFormRun buildLookupFormByField(FormControl controlHostingLookup, FieldBinding fieldBinding)\n\n#### Parameters\n\ncontrolHostingLookup  \n\n<!-- -->\n\nfieldBinding  \n\n#### Return Value\n\n### Method buildLookupFromCustomForm\n\n    public static xFormRun buildLookupFromCustomForm(FormControl controlHostingLookup, Form customLookupForm, FieldBinding fieldBinding, [xArgs customArgs], [Query customQuery])\n\n#### Parameters\n\ncontrolHostingLookup  \n\n<!-- -->\n\ncustomLookupForm  \n\n<!-- -->\n\nfieldBinding  \n\n<!-- -->\n\ncustomArgs  \n\n<!-- -->\n\ncustomQuery  \n\n#### Return Value\n\n### Method buildReferenceLookupFromCustomForm\n\n    public static xFormRun buildReferenceLookupFromCustomForm(FormReferenceControl referenceControlHostingLookup, Form customLookupForm, [xArgs customArgs], [Query customQuery])\n\n#### Parameters\n\nreferenceControlHostingLookup  \n\n<!-- -->\n\ncustomLookupForm  \n\n<!-- -->\n\ncustomArgs  \n\n<!-- -->\n\ncustomQuery  \n\n#### Return Value\n\n### Method createLookupForClientsideControl\n\n    public static void createLookupForClientsideControl(xFormRun parentForm, str targetId, str controlName, int tableId, int fieldId, str controlValue, boolean isInFilterMode)\n\n#### Parameters\n\nparentForm  \n\n<!-- -->\n\ntargetId  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ncontrolValue  \n\n<!-- -->\n\nisInFilterMode  \n\n### Method performFormLookup\n\n    public static void performFormLookup(xFormRun lookupForm, [boolean blockUntilLookupClosed], [FormControl controlHostingLookup])\n\n#### Parameters\n\nlookupForm  \n\n<!-- -->\n\nblockUntilLookupClosed  \n\n<!-- -->\n\ncontrolHostingLookup  \n\n### Method new\n\nInitializes a new instance of the FormAutoLookupFactory class.\n\n    private void new()\n\n## Class FormBinding\n    class FormBinding\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                       | Description |\n|------------------------------|-------------|\n| public Object targetObject() |             |\n| public str targetProperty()  |             |\n\n### Method targetObject\n\n    public Object targetObject()\n\n#### Return Value\n\n### Method targetProperty\n\n    public str targetProperty()\n\n#### Return Value\n\n## Class FormBuildActionPaneControl\n    class FormBuildActionPaneControl extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                   |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignChild(\\[boolean value\\])                                                                |                                                                                                                                               |\n| public boolean alignChildren(\\[boolean value\\])                                                             |                                                                                                                                               |\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                      |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                           |\n| public int allowUserSetup(\\[int value\\])                                                                    |                                                                                                                                               |\n| public int arrangeGuide(\\[int value\\])                                                                      |                                                                                                                                               |\n| public int arrangeMethod(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int arrangeWhen(\\[int value\\])                                                                       |                                                                                                                                               |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                            |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                   |                                                                                                                                               |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                         |                                                                                                                                               |\n| public int bottomMarginValue(\\[int value\\])                                                                 |                                                                                                                                               |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                       |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                     |                                                                                                                                               |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                        |                                                                                                                                               |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                               |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                          |                                                                                                                                               |\n| public int columnspaceValue(\\[int value\\])                                                                  |                                                                                                                                               |\n| public int columnsValue(\\[int value\\])                                                                      |                                                                                                                                               |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                           |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                     |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                               |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                      |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                             |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                           |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                       |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                       |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                      |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                               |                                                                                                                                               |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                               |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                              |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                                  |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                               |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                     |                                                                                                                                               |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                           |                                                                                                                                               |\n| public int leftMarginValue(\\[int value\\])                                                                   |                                                                                                                                               |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                               |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                         | Moves a control that is specified by ID to the control.                                                                                       |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                               |\n| public int position(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                               |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                          |                                                                                                                                               |\n| public int rightMarginValue(\\[int value\\])                                                                  |                                                                                                                                               |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                               |\n| public boolean skip(\\[boolean value\\])                                                                      |                                                                                                                                               |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                               |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                               |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                               |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                            |                                                                                                                                               |\n| public int topMarginValue(\\[int value\\])                                                                    |                                                                                                                                               |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                               |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                               |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                               |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                               |\n| public boolean useUserLayout(\\[boolean value\\])                                                             |                                                                                                                                               |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                               |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                               |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                               |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                               |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                        |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                        |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                               |\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box.The help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\nMoves a control that is specified by ID to the control.\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n1 if the control was moved successfully; otherwise, 0.\n\n#### Remarks\n\nIn general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed. However, in some cases, such as for the reference group control instance, controls cannot be moved.\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method position\n\n    public int position([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildActionPaneTabControl\n    class FormBuildActionPaneTabControl extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                   |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignChild(\\[boolean value\\])                                                                |                                                                                                                                               |\n| public boolean alignChildren(\\[boolean value\\])                                                             |                                                                                                                                               |\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                      |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                           |\n| public int allowUserSetup(\\[int value\\])                                                                    |                                                                                                                                               |\n| public int arrangeGuide(\\[int value\\])                                                                      |                                                                                                                                               |\n| public int arrangeMethod(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int arrangeWhen(\\[int value\\])                                                                       |                                                                                                                                               |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                            |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                   |                                                                                                                                               |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                         |                                                                                                                                               |\n| public int bottomMarginValue(\\[int value\\])                                                                 |                                                                                                                                               |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                       |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                     |                                                                                                                                               |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                        |                                                                                                                                               |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                               |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                          |                                                                                                                                               |\n| public int columnspaceValue(\\[int value\\])                                                                  |                                                                                                                                               |\n| public int columnsValue(\\[int value\\])                                                                      |                                                                                                                                               |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                           |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                     |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                               |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                               |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                               |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                      |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                             |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                           |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                       |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                       |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                      |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                               |                                                                                                                                               |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                               |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                              |\n| public int imageLocation(\\[int value\\])                                                                     |                                                                                                                                               |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                                  |\n| public str keyTip(\\[str value\\])                                                                            |                                                                                                                                               |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                               |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                     |                                                                                                                                               |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                           |                                                                                                                                               |\n| public int leftMarginValue(\\[int value\\])                                                                   |                                                                                                                                               |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                               |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                         | Moves a control that is specified by ID to the control.                                                                                       |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                               |\n| public str normalImage(\\[str value\\])                                                                       |                                                                                                                                               |\n| public int normalResource(\\[int value\\])                                                                    |                                                                                                                                               |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                               |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                          |                                                                                                                                               |\n| public int rightMarginValue(\\[int value\\])                                                                  |                                                                                                                                               |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                               |\n| public boolean skip(\\[boolean value\\])                                                                      |                                                                                                                                               |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                               |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                               |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                            |                                                                                                                                               |\n| public int topMarginValue(\\[int value\\])                                                                    |                                                                                                                                               |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                               |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                               |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                               |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                               |\n| public boolean useUserLayout(\\[boolean value\\])                                                             |                                                                                                                                               |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                               |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                               |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                               |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                               |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                        |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                        |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                               |\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box. The help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\nMoves a control that is specified by ID to the control.\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n1 if the control was moved successfully; otherwise, 0.\n\n#### Remarks\n\nIn general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed. However, in some cases, such as for the reference group control instance, controls cannot be moved.\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildActiveXControl\n    class FormBuildActiveXControl extends FormBuildControl\n\nThe FormBuildActiveXControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                 |\n| public str className(\\[str value\\])                                                                         |                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public str custom(\\[str value\\])                                                                            |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public boolean rTLCapable(\\[boolean value\\])                                                                |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method className\n\n    public str className([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method custom\n\n    public str custom([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rTLCapable\n\n    public boolean rTLCapable([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildAnimateControl\n    class FormBuildAnimateControl extends FormBuildControl\n\nThe FormBuildAnimateControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public str animateFile(\\[str value\\])                                                                       |                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public boolean autoPlay(\\[boolean value\\])                                                                  |                                                                                                                                         |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                |\n| public boolean center(\\[boolean value\\])                                                                    |                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int loops(\\[int value\\])                                                                             |                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public boolean transparent(\\[boolean value\\])                                                               |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method animateFile\n\n    public str animateFile([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoPlay\n\n    public boolean autoPlay([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method center\n\n    public boolean center([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method loops\n\n    public int loops([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method transparent\n\n    public boolean transparent([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n\n\n"}