{"nodes":[{"pos":[32,81],"content":"X++ container run-time functions | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ container run-time functions | Microsoft Docs","pos":[0,49]}]},{"pos":[95,148],"content":"This wiki describes the container run-time functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"This wiki describes the container run-time functions.","pos":[0,53]}]},{"pos":[573,605],"content":"X++ container run-time functions","linkify":"X++ container run-time functions","nodes":[{"content":"X++ container run-time functions","pos":[0,32]}]},{"content":"This wiki describes the container run-time functions.","pos":[607,660]},{"content":"These functions manipulate the contents of containers.","pos":[662,716]},{"pos":[721,727],"content":"conDel","linkify":"conDel","nodes":[{"content":"conDel","pos":[0,6]}]},{"content":"Removes the specified number of elements from a container.","pos":[728,786]},{"pos":[792,798],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[870,880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[884,893]},{"content":"Description","pos":[896,907]},{"content":"container","pos":[1036,1045]},{"content":"The container to remove elements from.","pos":[1048,1086]},{"content":"start","pos":[1112,1117]},{"content":"The one-based position at which to start removing elements.","pos":[1124,1183]},{"content":"number","pos":[1188,1194]},{"content":"The number of elements to delete.","pos":[1200,1233]},{"pos":[1267,1279],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"A new container that doesn't include the removed elements.","pos":[1281,1339]},{"pos":[1345,1352],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1560,1567],"content":"conFind","linkify":"conFind","nodes":[{"content":"conFind","pos":[0,7]}]},{"content":"Locates the first occurrence of an element or a sequence of elements in a container.","pos":[1568,1652]},{"pos":[1658,1664],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1731,1741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1745,1754]},{"content":"Description","pos":[1757,1768]},{"content":"container","pos":[1891,1900]},{"content":"The container to search.","pos":[1903,1927]},{"content":"element","pos":[1964,1971]},{"content":"One or more elements to search for, separated by commas.","pos":[1976,2032]},{"pos":[2040,2047],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If several elements are specified in the sequence, they must be separated by commas and specified in the correct sequence.","pos":[2049,2171]},{"content":"The elements can be of any data type.","pos":[2172,2209]},{"pos":[2215,2227],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[2229,2305],"content":"<bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> if the item was not found; otherwise, the sequence number of the item.","source":"**0** if the item was not found; otherwise, the sequence number of the item."},{"pos":[2311,2318],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2688,2694],"content":"conIns","linkify":"conIns","nodes":[{"content":"conIns","pos":[0,6]}]},{"content":"Inserts one or more elements into a container.","pos":[2695,2741]},{"pos":[2747,2753],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[2837,2847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2851,2860]},{"content":"Description","pos":[2863,2874]},{"content":"container","pos":[2989,2998]},{"content":"The container to insert elements into.","pos":[3001,3039]},{"content":"start","pos":[3058,3063]},{"content":"The position to insert elements at.","pos":[3070,3105]},{"content":"element","pos":[3127,3134]},{"content":"One or more elements to insert, separated by commas.","pos":[3139,3191]},{"pos":[3199,3211],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"A new container that contains the inserted elements.","pos":[3213,3265]},{"pos":[3271,3278],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The first element of the container is specified by the number <bpt id=\"p1\">**</bpt>1<ept id=\"p1\">**</ept>.","pos":[3280,3348],"source":"The first element of the container is specified by the number **1**."},{"content":"To insert after the n element, the <bpt id=\"p1\">*</bpt>start<ept id=\"p1\">*</ept> parameter should be n+1.","pos":[3349,3416],"source":" To insert after the n element, the *start* parameter should be n+1."},{"content":"You can also use the <bpt id=\"p1\">**</bpt><ph id=\"ph1\">+=</ph><ept id=\"p1\">**</ept> operator to add values of any type to a container.","pos":[3417,3495],"source":" You can also use the **+=** operator to add values of any type to a container."},{"content":"For example, to create a container that contains the squared values of the first 10 loop iterations, use the following code.","pos":[3496,3620]},{"pos":[3721,3728],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4080,4086],"content":"conLen","linkify":"conLen","nodes":[{"content":"conLen","pos":[0,6]}]},{"content":"Retrieves the number of elements in a container.","pos":[4087,4135]},{"pos":[4141,4147],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[4190,4200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[4204,4213]},{"content":"Description","pos":[4216,4227]},{"content":"container","pos":[4336,4345]},{"content":"The container to count the number of elements in.","pos":[4348,4397]},{"pos":[4405,4417],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The number of elements in the container.","pos":[4419,4459]},{"pos":[4465,4472],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4739,4746],"content":"conNull","linkify":"conNull","nodes":[{"content":"conNull","pos":[0,7]}]},{"content":"Retrieves an empty container.","pos":[4747,4776]},{"pos":[4807,4814],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this function to explicitly dispose of the contents of a container.","pos":[4816,4887]},{"pos":[4893,4905],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"An empty container.","pos":[4907,4926]},{"pos":[4932,4939],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5268,5275],"content":"conPeek","linkify":"conPeek","nodes":[{"content":"conPeek","pos":[0,7]}]},{"content":"Retrieves a specific element from a container and converts it into another data type, if conversion is required.","pos":[5276,5388]},{"pos":[5394,5400],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[5460,5470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5474,5483]},{"content":"Description","pos":[5486,5497]},{"content":"container","pos":[5956,5965]},{"content":"The container to return an element from.","pos":[5968,6008]},{"content":"number","pos":[6197,6203]},{"content":"The position of the element to return.","pos":[6209,6247]},{"content":"Specify <bpt id=\"p1\">**</bpt>1<ept id=\"p1\">**</ept> to get the first element.","pos":[6248,6287],"source":" Specify **1** to get the first element."},{"content":"An invalid position number, such as <bpt id=\"p1\">**</bpt>-3<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>0<ept id=\"p2\">**</ept>, or a number that is higher than the length of the container, might cause unpredictable errors.","pos":[6288,6433],"source":" An invalid position number, such as **-3**, **0**, or a number that is higher than the length of the container, might cause unpredictable errors."},{"pos":[6441,6453],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The element in the container at the position that is specified by the <bpt id=\"p1\">*</bpt>number<ept id=\"p1\">*</ept> parameter.","pos":[6455,6544],"source":"The element in the container at the position that is specified by the *number* parameter."},{"content":"The <bpt id=\"p1\">**</bpt>conPeek<ept id=\"p1\">**</ept> function automatically converts the peeked item into the expected return type.","pos":[6545,6639],"source":" The **conPeek** function automatically converts the peeked item into the expected return type."},{"content":"Strings can automatically be converted into integers and real numbers, and integers and real numbers can be converted into strings.","pos":[6640,6771]},{"pos":[6777,6784],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7645,7652],"content":"conPoke","linkify":"conPoke","nodes":[{"content":"conPoke","pos":[0,7]}]},{"content":"Modifies a container by replacing one or more of the existing elements.","pos":[7653,7724]},{"pos":[7730,7736],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[7819,7829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[7833,7842]},{"content":"Description","pos":[7845,7856]},{"content":"container","pos":[7973,7982]},{"content":"The container to modify.","pos":[7985,8009]},{"content":"start","pos":[8043,8048]},{"content":"The position of the first element to replace.","pos":[8055,8100]},{"content":"element","pos":[8113,8120]},{"content":"One or more elements to replace, separated by commas.","pos":[8125,8178]},{"pos":[8186,8198],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"A new container that includes the new elements.","pos":[8200,8247]},{"pos":[8253,8260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8262,8330],"content":"The first element of the container is specified by the number <bpt id=\"p1\">**</bpt>1<ept id=\"p1\">**</ept>.","source":"The first element of the container is specified by the number **1**."},{"pos":[8336,8343],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]}],"content":"---\n# required metadata\n\ntitle: X++ container run-time functions | Microsoft Docs\ndescription: This wiki describes the container run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2016-02-04 22:11:54\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 31301\nms.assetid: 0f30094b-0cd9-4334-b973-2507895fa53b\nms.region: Global\n# ms.industry: \nms.author: robinr\n\n---\n\n# X++ container run-time functions\n\nThis wiki describes the container run-time functions.\n\nThese functions manipulate the contents of containers.\n\n## conDel\nRemoves the specified number of elements from a container.\n\n### Syntax\n\n    container conDel(container container, int start, int number)\n\n### Parameters\n\n| Parameter | Description                                                 |\n|-----------|-------------------------------------------------------------|\n| container | The container to remove elements from.                      |\n| start     | The one-based position at which to start removing elements. |\n| number    | The number of elements to delete.                           |\n\n### Return value\n\nA new container that doesn't include the removed elements.\n\n### Example\n\n    static void conDelExample(Args _args)\n    {\n            container c = [\"Hello world\", 1, 3.14];\n            // Deletes the first two items from the container.\n            c = conDel(c, 1, 2);\n    }\n\n## conFind\nLocates the first occurrence of an element or a sequence of elements in a container.\n\n### Syntax\n\n    int conFind (container container, anytype element,... )\n\n### Parameters\n\n| Parameter | Description                                              |\n|-----------|----------------------------------------------------------|\n| container | The container to search.                                 |\n| element   | One or more elements to search for, separated by commas. |\n\n### Remarks\n\nIf several elements are specified in the sequence, they must be separated by commas and specified in the correct sequence. The elements can be of any data type.\n\n### Return value\n\n**0** if the item was not found; otherwise, the sequence number of the item.\n\n### Example\n\n    static void conFindExample(Args _args)\n    {\n            container c = [\"item1\", \"item2\", \"item3\"];\n            int i;\n            int j;\n            i = conFind(c, \"item2\");\n            j = conFind(c, \"item4\");\n            print \"Position of 'item2' in container is \" + int2Str(i);\n            print \"Position of 'item4' in container is \" + int2Str(j);\n    }\n\n## conIns\nInserts one or more elements into a container.\n\n### Syntax\n\n    container conIns (container container, int start, anytype element, ... )\n\n### Parameters\n\n| Parameter | Description                                          |\n|-----------|------------------------------------------------------|\n| container | The container to insert elements into.               |\n| start     | The position to insert elements at.                  |\n| element   | One or more elements to insert, separated by commas. |\n\n### Return value\n\nA new container that contains the inserted elements.\n\n### Remarks\n\nThe first element of the container is specified by the number **1**. To insert after the n element, the *start* parameter should be n+1. You can also use the **+=** operator to add values of any type to a container. For example, to create a container that contains the squared values of the first 10 loop iterations, use the following code.\n\n    int i;\n    container c;\n\n    for (i = 1; i < = 10; i++)\n    {\n            c += i*i;\n    }\n\n### Example\n\n    static void conInsExample(Args _arg)\n    {\n            container c;\n            int i;\n\n            c = conIns(c,1,\"item1\");\n            c = conIns(c,2,\"item2\");\n            for (i = 1 ; i <= conLen(c) ; i++)\n            {\n                    // Prints the content of a container.\n                    print conPeek(c, i);\n            }\n    }\n\n## conLen\nRetrieves the number of elements in a container.\n\n### Syntax\n\n    int conLen(container container)\n\n### Parameters\n\n| Parameter | Description                                       |\n|-----------|---------------------------------------------------|\n| container | The container to count the number of elements in. |\n\n### Return value\n\nThe number of elements in the container.\n\n### Example\n\n    static void conLenExample(Args _arg)\n    {\n            container c;\n            int i;\n\n            c = conins([\"item1\", \"item2\"], 1);\n            for (i = 1 ; i <= conLen(c) ; i++)\n            {\n                    print conPeek(c, i);\n            }\n    }\n\n## conNull\nRetrieves an empty container.\n\n    container conNull()\n\n### Remarks\n\nUse this function to explicitly dispose of the contents of a container.\n\n### Return value\n\nAn empty container.\n\n### Example\n\n    static void conNullExample(Args _arg)\n    {\n            container c = [\"item1\", \"item2\", \"item3\"];\n\n            print \"Size of container is \" + int2str(conLen(c));\n            // Set the container to null.\n            c = conNull();\n            print \"Size of container after conNull() is \" + int2Str(conLen(c));\n    }\n\n## conPeek\nRetrieves a specific element from a container and converts it into another data type, if conversion is required.\n\n### Syntax\n\n    anytype conPeek(container container, int number)\n\n### Parameters\n\n| Parameter | Description                                                                                                                                                                                                                      |\n|-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| container | The container to return an element from.                                                                                                                                                                                         |\n| number    | The position of the element to return. Specify **1** to get the first element. An invalid position number, such as **-3**, **0**, or a number that is higher than the length of the container, might cause unpredictable errors. |\n\n### Return value\n\nThe element in the container at the position that is specified by the *number* parameter. The **conPeek** function automatically converts the peeked item into the expected return type. Strings can automatically be converted into integers and real numbers, and integers and real numbers can be converted into strings.\n\n### Example\n\n    static void main(Args _args)\n    {\n            container cnI, cnJ;\n            int i, j;\n            anytype aty;\n            info(\"container cnI ...\");\n            cnI = [\"itemBlue\", \"itemYellow\"];\n            for (i=1; i <= conLen(cnI); i++)\n            {\n                    aty = conPeek(cnI, i);\n                    info(int2str(i) + \" :  \" + aty);\n            }\n\n            info(\"container cnJ ...\");\n            cnJ = conIns(cnI, 2, \"ItemInserted\");\n            for (j=1; j <= conLen(cnJ); j++)\n            {\n                    aty = conPeek(cnJ, j);\n                    info(int2str(j) + \" :  \" + aty);\n            }\n    }\n    /***  Output pasted from InfoLog ...\n    Message (10:20:03 am)\n    container cnI ...\n    1 :  itemBlue\n    2 :  itemYellow\n    container cnJ ...\n    1 :  itemBlue\n    2 :  ItemInserted\n    3 :  itemYellow\n    ***/\n\n## conPoke\nModifies a container by replacing one or more of the existing elements.\n\n### Syntax\n\n    container conPoke(container container, int start, anytype element, ...)\n\n### Parameters\n\n| Parameter | Description                                           |\n|-----------|-------------------------------------------------------|\n| container | The container to modify.                              |\n| start     | The position of the first element to replace.         |\n| element   | One or more elements to replace, separated by commas. |\n\n### Return value\n\nA new container that includes the new elements.\n\n### Remarks\n\nThe first element of the container is specified by the number **1**.\n\n### Example\n\n    static void conPokeExample(Args _arg)\n    {\n            container c1 = [\"item1\", \"item2\", \"item3\"];\n            container c2;\n            int i;\n            void conPrint(container c)\n            {\n                    for (i = 1 ; i <= conLen(c) ; i++)\n                    {\n                            print conPeek(c, i);\n                    }\n            }\n\n            conPrint(c1);\n            c2 = conPoke(c1, 2, \"PokedItem\");\n            print \"\";\n            conPrint(c2);\n    }\n\n"}