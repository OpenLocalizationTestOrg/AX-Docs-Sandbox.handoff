{"nodes":[{"pos":[32,78],"content":"Web API and OData controllers | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"Web API and OData controllers | Microsoft Docs","pos":[0,46]}]},{"pos":[92,215],"content":"This article provides code to extend the ApiController class so that you can create a Web API controller for Retail Server.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article provides code to extend the ApiController class so that you can create a Web API controller for Retail Server.","pos":[0,123]}]},{"pos":[626,655],"content":"Web API and OData controllers","linkify":"Web API and OData controllers","nodes":[{"content":"Web API and OData controllers","pos":[0,29]}]},{"content":"By default, all the Retail Server binaries in Microsoft Dynamics AX use only OData.","pos":[657,740]},{"content":"If you want to use a controller that uses a traditional Web API, you can create your own Web API controller and extend the Web API configuration.","pos":[741,886]},{"content":"The following example shows how to create a Web API controller for Retail Server.","pos":[887,968]},{"content":"To create the controller, create a new class that uses the <bpt id=\"p1\">**</bpt>Export<ept id=\"p1\">**</ept> attribute, and specify that the type is the <bpt id=\"p2\">**</bpt>IWebApiConfig<ept id=\"p2\">**</ept> interface.","pos":[1687,1829],"source":"To create the controller, create a new class that uses the **Export** attribute, and specify that the type is the **IWebApiConfig** interface."},{"content":"The <bpt id=\"p1\">**</bpt>IWebApiConfig<ept id=\"p1\">**</ept> interface has one method that you can override, the <bpt id=\"p2\">**</bpt>Register<ept id=\"p2\">**</ept> method.","pos":[1830,1924],"source":" The **IWebApiConfig** interface has one method that you can override, the **Register** method."},{"content":"After you override the <bpt id=\"p1\">**</bpt>Register<ept id=\"p1\">**</ept> method, you can call the base class to get the same mapping as an OData metadata controller.","pos":[1925,2053],"source":" After you override the **Register** method, you can call the base class to get the same mapping as an OData metadata controller."},{"content":"You must derive from the standard Web API controller.","pos":[2054,2107]},{"content":"You can then customize the controller to meet your business requirements.","pos":[2108,2181]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>ASP.NET Web API<ept id=\"p1\">](http://msdn.microsoft.com/en-us/library/hh833994(v=vs.108).aspx)</ept>.","pos":[2182,2291],"source":" For more information, see [ASP.NET Web API](http://msdn.microsoft.com/en-us/library/hh833994(v=vs.108).aspx)."}],"content":"---\n# required metadata\n\ntitle: Web API and OData controllers | Microsoft Docs\ndescription: This article provides code to extend the ApiController class so that you can create a Web API controller for Retail Server.\nauthor: annbe\nmanager: AnnBe\nms.date: 2016-02-05 00:38:12\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: \nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 31481\nms.assetid: cf277d2b-0cb0-4693-954d-0065db64a70e\n# ms.region: \n# ms.industry: \nms.author: kfend\n\n---\n\n# Web API and OData controllers\n\nBy default, all the Retail Server binaries in Microsoft Dynamics AX use only OData. If you want to use a controller that uses a traditional Web API, you can create your own Web API controller and extend the Web API configuration. The following example shows how to create a Web API controller for Retail Server.\n\n    namespace Microsoft.Dynamics.RetailServer.Samples.Extensions\n    {\n        using System.Collections.Generic;\n        using System.Runtime.InteropServices;\n        using System.Web.Http;\n        using Commerce.Runtime.DataModel;\n        using Retail.StoreServerServiceLibrary;\n        [ComVisible(false)]\n        [ExtendedController(\"Values\")]\n        [CommerceAuthorization(AllowedRetailRoles = new string[] { CommerceRoles.Anonymous }, CheckRetailOperation = false)]\n        public class ValuesController : ApiController\n        {\n            // GET /api/values\n            public IEnumerable<string> Get()\n            {\n                return new string[] { \"value1\", \"value2\" };\n            }\n        }\n    }\n\nTo create the controller, create a new class that uses the **Export** attribute, and specify that the type is the **IWebApiConfig** interface. The **IWebApiConfig** interface has one method that you can override, the **Register** method. After you override the **Register** method, you can call the base class to get the same mapping as an OData metadata controller. You must derive from the standard Web API controller. You can then customize the controller to meet your business requirements. For more information, see [ASP.NET Web API](http://msdn.microsoft.com/en-us/library/hh833994(v=vs.108).aspx).\n\n"}