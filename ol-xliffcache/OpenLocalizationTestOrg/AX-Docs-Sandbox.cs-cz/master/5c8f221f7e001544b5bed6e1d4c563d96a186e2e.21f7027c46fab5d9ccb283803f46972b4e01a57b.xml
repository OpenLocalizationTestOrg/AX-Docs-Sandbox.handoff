{"content":"---\n# required metadata\n\ntitle: X Classes\ndescription: System API classes that start with the letter X.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 55811\nms.assetid: bc7f3c76-9d89-4a32-a5c3-dfb783c4f4f3\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X Classes\n\n[!include[banner](../includes/banner.md)]\n\n\nSystem API classes that start with the letter X.\n\nClass xApplication\n------------------\n\n    class xApplication extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                                                                              | Description                                                                                                                                                                     |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean IsTablePerHierarchyMode()                                                                                                                                                                                            | Determines whether the system is being run with all table inheritance hierarchies flattened (Table per hierarchy mode).                                                         |\n| public str buildNo()                                                                                                                                                                                                                |                                                                                                                                                                                 |\n| public boolean canDeleteCompany(SelectableDataArea company)                                                                                                                                                                         |                                                                                                                                                                                 |\n| public int countOfTopLevelFormsOpened()                                                                                                                                                                                             |                                                                                                                                                                                 |\n| public Company company(\\[SelectableDataArea company\\])                                                                                                                                                                              |                                                                                                                                                                                 |\n| public Int64 curTransactionId(\\[boolean ForceTakeNumber\\])                                                                                                                                                                          |                                                                                                                                                                                 |\n| public boolean dbSynchronize(\\[TableId tableId\\], \\[boolean checkAsNeeded\\], \\[boolean continueOnError\\], \\[boolean showProgress\\], \\[container checkSyncTables\\], \\[boolean createAllIndexes\\], \\[boolean useLockForSingleTable\\]) |                                                                                                                                                                                 |\n| public str getSameNameDifferentIdFields()                                                                                                                                                                                           |                                                                                                                                                                                 |\n| public Map getServiceHostStatus()                                                                                                                                                                                                   |                                                                                                                                                                                 |\n| public boolean isCheckedMode()                                                                                                                                                                                                      |                                                                                                                                                                                 |\n| public boolean isConfigMode()                                                                                                                                                                                                       |                                                                                                                                                                                 |\n| public boolean isDemoMode()                                                                                                                                                                                                         |                                                                                                                                                                                 |\n| public boolean isSqlConnected()                                                                                                                                                                                                     |                                                                                                                                                                                 |\n| public int numberOfTreeNodesLoaded()                                                                                                                                                                                                |                                                                                                                                                                                 |\n| public str releaseVersion()                                                                                                                                                                                                         |                                                                                                                                                                                 |\n| public boolean setDefaultCompany(SelectableDataArea company)                                                                                                                                                                        |                                                                                                                                                                                 |\n| public int ttsLevel()                                                                                                                                                                                                               |                                                                                                                                                                                 |\n| public int ttsVersion()                                                                                                                                                                                                             |                                                                                                                                                                                 |\n| ::public static boolean CheckUserExistsInAnyPartition(str userId)                                                                                                                                                                   | Checks whether the given user is present in any partition.                                                                                                                      |\n| ::public static str getFolderPath(int folder)                                                                                                                                                                                       |                                                                                                                                                                                 |\n| ::public static str getVSAssembliesPath()                                                                                                                                                                                           |                                                                                                                                                                                 |\n| ::public static boolean ilCacheContains(str owner, str key)                                                                                                                                                                         |                                                                                                                                                                                 |\n| ::public static str ilCacheDelete(str owner, str key)                                                                                                                                                                               |                                                                                                                                                                                 |\n| ::public static str ilCacheFind(str owner, str key)                                                                                                                                                                                 |                                                                                                                                                                                 |\n| ::public static boolean initPartition(Partition partition)                                                                                                                                                                          | Initializes a given partition by creating the DAT company and the Admin user.                                                                                                   |\n| ::public static boolean isServiceRegisteredOnClient(ClassId classId)                                                                                                                                                                |                                                                                                                                                                                 |\n| ::public static boolean IsSinglePartitionSystem()                                                                                                                                                                                   | Evaluates whether the deployment has a single partition or multiple partitions.                                                                                                 |\n| ::public static CLRObject XppILAppDomain()                                                                                                                                                                                          |                                                                                                                                                                                 |\n| public boolean isInTransactionScope()                                                                                                                                                                                               |                                                                                                                                                                                 |\n| public Int64 transactionScopeCommitLevel()                                                                                                                                                                                          |                                                                                                                                                                                 |\n| public container Encrypt(str input)                                                                                                                                                                                                 |                                                                                                                                                                                 |\n| public str Decrypt(container cipher)                                                                                                                                                                                                |                                                                                                                                                                                 |\n| public System.Security.SecureString decryptToSecureString(container cipher)                                                                                                                                                         |                                                                                                                                                                                 |\n| public container encryptFromSecureString(System.Security.SecureString input)                                                                                                                                                        |                                                                                                                                                                                 |\n| public container EncryptForPurpose(str input, str purpose)                                                                                                                                                                          |                                                                                                                                                                                 |\n| public str DecryptForPurpose(container cipher, str purpose)                                                                                                                                                                         |                                                                                                                                                                                 |\n| public System.Security.SecureString decryptToSecureStringForPurpose(container cipher, str purpose)                                                                                                                                  |                                                                                                                                                                                 |\n| public container encryptFromSecureStringForPurpose(System.Security.SecureString input, str purpose)                                                                                                                                 |                                                                                                                                                                                 |\n| public str convertToUnsecureString(System.Security.SecureString secureString)                                                                                                                                                       |                                                                                                                                                                                 |\n| public System.Security.SecureString convertToSecureString(str unsecureString)                                                                                                                                                       |                                                                                                                                                                                 |\n| ::public static void startBatch()                                                                                                                                                                                                   |                                                                                                                                                                                 |\n| public void deleteCompany(SelectableDataArea company)                                                                                                                                                                               |                                                                                                                                                                                 |\n| public void ttsabort()                                                                                                                                                                                                              |                                                                                                                                                                                 |\n| public void transactionScopeCommit()                                                                                                                                                                                                |                                                                                                                                                                                 |\n| public void new()                                                                                                                                                                                                                   | Initializes a new instance of the xApplication class.                                                                                                                           |\n| ::public static void stopBatch()                                                                                                                                                                                                    |                                                                                                                                                                                 |\n| public void logRenameKey(Common recordOrig, Common recordUpdated, container changedFields)                                                                                                                                          |                                                                                                                                                                                 |\n| public void startup(str startupCmd, str buildNumber)                                                                                                                                                                                |                                                                                                                                                                                 |\n| public void RedirectToDashboard()                                                                                                                                                                                                   |                                                                                                                                                                                 |\n| public void insertXReferences()                                                                                                                                                                                                     | Is invoked by the framework when cross-reference information should be inserted into the database.                                                                              |\n| public void logUpdate(Common recordOrig, Common recordUpdated, container changedFields)                                                                                                                                             |                                                                                                                                                                                 |\n| public void setStartPage(\\[SysUserInfoStartPage startpage\\])                                                                                                                                                                        |                                                                                                                                                                                 |\n| ::public static void ilCacheInsert(str owner, str key, str value)                                                                                                                                                                   |                                                                                                                                                                                 |\n| public void clearManagedCaches()                                                                                                                                                                                                    |                                                                                                                                                                                 |\n| public void eventDelete(Common recordDeleted)                                                                                                                                                                                       | Serves as a callback that is called by the kernel when a record in a table is deleted, provided that the kernel has been set up to monitor records in that table.               |\n| public void enableCountryContextFilter()                                                                                                                                                                                            | Enables system-wide optimization in the data access layer, whereby fields that don't belong in the current company's country/region context are dropped from the SELECT query.  |\n| public void setTheme(\\[SysUserInfoTheme theme\\])                                                                                                                                                                                    |                                                                                                                                                                                 |\n| public void sysTrace(SysTraceType traceType, container traceInfo)                                                                                                                                                                   |                                                                                                                                                                                 |\n| public void initGlobal(Info infoObject, VersionControl versionControlObject)                                                                                                                                                        |                                                                                                                                                                                 |\n| public void transactionScopeRollback(Int64 commitLevel)                                                                                                                                                                             |                                                                                                                                                                                 |\n| public void ttsbegin()                                                                                                                                                                                                              |                                                                                                                                                                                 |\n| public void flushcompanycache(SelectableDataArea company)                                                                                                                                                                           |                                                                                                                                                                                 |\n| public void logDelete(Common recordDeleted)                                                                                                                                                                                         |                                                                                                                                                                                 |\n| ::public static void registerServiceOnClient(ClassId classId, str externalName)                                                                                                                                                     |                                                                                                                                                                                 |\n| public void eventUpdate(Common recordOrig, Common recordUpdated, container changedFields)                                                                                                                                           | Serves as a callback that is called by the kernel when a record in a table is updated, provided that the kernel has been set up to monitor records in that table.               |\n| public void transactionScopeBegin()                                                                                                                                                                                                 |                                                                                                                                                                                 |\n| ::public static void checkForNewBatchJobs()                                                                                                                                                                                         |                                                                                                                                                                                 |\n| public void disableCountryContextFilter()                                                                                                                                                                                           | Disables system-wide optimization in the data access layer, whereby fields that don't belong in the current company's country/region context are dropped from the SELECT query. |\n| public void xref(str path, xRef x)                                                                                                                                                                                                  |                                                                                                                                                                                 |\n| public void transactionScopeAbort()                                                                                                                                                                                                 |                                                                                                                                                                                 |\n| public void eventRenameKey(Common recordOrig, Common recordUpdated, container changedFields)                                                                                                                                        | Serves as a callback that is called by the kernel when a primary key is renamed, provided that the kernel has been set up to monitor records in that table.                     |\n| public void flushClientPerformanceOptions()                                                                                                                                                                                         |                                                                                                                                                                                 |\n| ::public static void flushClientServices()                                                                                                                                                                                          |                                                                                                                                                                                 |\n| public void restartServiceHost()                                                                                                                                                                                                    |                                                                                                                                                                                 |\n| public void updateXrefTreeNode(TreeNode treeNode)                                                                                                                                                                                   | Is invoked by the framework when cross-reference information for the various node types is updated.                                                                             |\n| public void ttscommit()                                                                                                                                                                                                             |                                                                                                                                                                                 |\n| public void RequestCompanyChange(\\[DataAreaSysCompany company\\])                                                                                                                                                                    |                                                                                                                                                                                 |\n| public void finalize()                                                                                                                                                                                                              |                                                                                                                                                                                 |\n| public void eventInsert(Common recordInserted)                                                                                                                                                                                      | Serves as a callback that is called by the kernel when a record in a table is inserted, provided that the kernel has been set up to monitor records in that table.              |\n| public void ttsNotifyBegin()                                                                                                                                                                                                        |                                                                                                                                                                                 |\n| public void closeAllForms()                                                                                                                                                                                                         |                                                                                                                                                                                 |\n| public void ttsNotifyCommit()                                                                                                                                                                                                       |                                                                                                                                                                                 |\n| public void ttsNotifyPreCommit()                                                                                                                                                                                                    |                                                                                                                                                                                 |\n| public void ttsNotifyPostBegin()                                                                                                                                                                                                    |                                                                                                                                                                                 |\n| public void ttsNotifyAbort()                                                                                                                                                                                                        |                                                                                                                                                                                 |\n| public void setDensity(\\[SysUserInfoDensity theme\\])                                                                                                                                                                                |                                                                                                                                                                                 |\n| public void logInsert(Common recordInserted)                                                                                                                                                                                        |                                                                                                                                                                                 |\n\n### Method IsTablePerHierarchyMode\n\nDetermines whether the system is being run with all table inheritance hierarchies flattened (Table per hierarchy mode).\n\n    public boolean IsTablePerHierarchyMode()\n\n#### Return Value\n\ntrue if system is being run in Table per hierarchy mode; otherwise, false.\n\n### Method buildNo\n\n    public str buildNo()\n\n#### Return Value\n\n### Method canDeleteCompany\n\n    public boolean canDeleteCompany(SelectableDataArea company)\n\n#### Parameters\n\ncompany  \n\n#### Return Value\n\n### Method countOfTopLevelFormsOpened\n\n    public int countOfTopLevelFormsOpened()\n\n#### Return Value\n\n### Method company\n\n    public Company company([SelectableDataArea company])\n\n#### Parameters\n\ncompany  \n\n#### Return Value\n\n### Method curTransactionId\n\n    public Int64 curTransactionId([boolean ForceTakeNumber])\n\n#### Parameters\n\nForceTakeNumber  \n\n#### Return Value\n\n### Method dbSynchronize\n\n    public boolean dbSynchronize([TableId tableId], [boolean checkAsNeeded], [boolean continueOnError], [boolean showProgress], [container checkSyncTables], [boolean createAllIndexes], [boolean useLockForSingleTable])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\ncheckAsNeeded  \n\n<!-- -->\n\ncontinueOnError  \n\n<!-- -->\n\nshowProgress  \n\n<!-- -->\n\ncheckSyncTables  \n\n<!-- -->\n\ncreateAllIndexes  \n\n<!-- -->\n\nuseLockForSingleTable  \n\n#### Return Value\n\n### Method getSameNameDifferentIdFields\n\n    public str getSameNameDifferentIdFields()\n\n#### Return Value\n\n### Method getServiceHostStatus\n\n    public Map getServiceHostStatus()\n\n#### Return Value\n\n### Method isCheckedMode\n\n    public boolean isCheckedMode()\n\n#### Return Value\n\n### Method isConfigMode\n\n    public boolean isConfigMode()\n\n#### Return Value\n\n### Method isDemoMode\n\n    public boolean isDemoMode()\n\n#### Return Value\n\n### Method isSqlConnected\n\n    public boolean isSqlConnected()\n\n#### Return Value\n\n### Method numberOfTreeNodesLoaded\n\n    public int numberOfTreeNodesLoaded()\n\n#### Return Value\n\n### Method releaseVersion\n\n    public str releaseVersion()\n\n#### Return Value\n\n### Method setDefaultCompany\n\n    public boolean setDefaultCompany(SelectableDataArea company)\n\n#### Parameters\n\ncompany  \n\n#### Return Value\n\n### Method ttsLevel\n\n    public int ttsLevel()\n\n#### Return Value\n\n### Method ttsVersion\n\n    public int ttsVersion()\n\n#### Return Value\n\n### Method CheckUserExistsInAnyPartition\n\nChecks whether the given user is present in any partition.\n\n    public static boolean CheckUserExistsInAnyPartition(str userId)\n\n#### Parameters\n\nuserId  \n\n#### Return Value\n\ntrue if the user exists in any of the partitions; otherwise, false.\n\n### Method getFolderPath\n\n    public static str getFolderPath(int folder)\n\n#### Parameters\n\nfolder  \n\n#### Return Value\n\n### Method getVSAssembliesPath\n\n    public static str getVSAssembliesPath()\n\n#### Return Value\n\n### Method ilCacheContains\n\n    public static boolean ilCacheContains(str owner, str key)\n\n#### Parameters\n\nowner  \n\n<!-- -->\n\nkey  \n\n#### Return Value\n\n### Method ilCacheDelete\n\n    public static str ilCacheDelete(str owner, str key)\n\n#### Parameters\n\nowner  \n\n<!-- -->\n\nkey  \n\n#### Return Value\n\n### Method ilCacheFind\n\n    public static str ilCacheFind(str owner, str key)\n\n#### Parameters\n\nowner  \n\n<!-- -->\n\nkey  \n\n#### Return Value\n\n### Method initPartition\n\nInitializes a given partition by creating the DAT company and the Admin user.\n\n    public static boolean initPartition(Partition partition)\n\n#### Parameters\n\npartition  \nThe record ID of the partition to initialize.\n\n#### Return Value\n\ntrue if the initialization is successful; otherwise, false.\n\n#### Remarks\n\nThis API is meant only for use by the upgrade framework. Using it in other contexts could cause unrecoverable impact to data.\n\n### Method isServiceRegisteredOnClient\n\n    public static boolean isServiceRegisteredOnClient(ClassId classId)\n\n#### Parameters\n\nclassId  \n\n#### Return Value\n\n### Method IsSinglePartitionSystem\n\nEvaluates whether the deployment has a single partition or multiple partitions.\n\n    public static boolean IsSinglePartitionSystem()\n\n#### Return Value\n\ntrue if the deployment has only one partition; false if the deployment has multiple partitions.\n\n### Method XppILAppDomain\n\n    public static CLRObject XppILAppDomain()\n\n#### Return Value\n\n### Method isInTransactionScope\n\n    public boolean isInTransactionScope()\n\n#### Return Value\n\n### Method transactionScopeCommitLevel\n\n    public Int64 transactionScopeCommitLevel()\n\n#### Return Value\n\n### Method Encrypt\n\n    public container Encrypt(str input)\n\n#### Parameters\n\ninput  \n\n#### Return Value\n\n### Method Decrypt\n\n    public str Decrypt(container cipher)\n\n#### Parameters\n\ncipher  \n\n#### Return Value\n\n### Method decryptToSecureString\n\n    public System.Security.SecureString decryptToSecureString(container cipher)\n\n#### Parameters\n\ncipher  \n\n#### Return Value\n\n### Method encryptFromSecureString\n\n    public container encryptFromSecureString(System.Security.SecureString input)\n\n#### Parameters\n\ninput  \n\n#### Return Value\n\n### Method EncryptForPurpose\n\n    public container EncryptForPurpose(str input, str purpose)\n\n#### Parameters\n\ninput  \n\n<!-- -->\n\npurpose  \n\n#### Return Value\n\n### Method DecryptForPurpose\n\n    public str DecryptForPurpose(container cipher, str purpose)\n\n#### Parameters\n\ncipher  \n\n<!-- -->\n\npurpose  \n\n#### Return Value\n\n### Method decryptToSecureStringForPurpose\n\n    public System.Security.SecureString decryptToSecureStringForPurpose(container cipher, str purpose)\n\n#### Parameters\n\ncipher  \n\n<!-- -->\n\npurpose  \n\n#### Return Value\n\n### Method encryptFromSecureStringForPurpose\n\n    public container encryptFromSecureStringForPurpose(System.Security.SecureString input, str purpose)\n\n#### Parameters\n\ninput  \n\n<!-- -->\n\npurpose  \n\n#### Return Value\n\n### Method convertToUnsecureString\n\n    public str convertToUnsecureString(System.Security.SecureString secureString)\n\n#### Parameters\n\nsecureString  \n\n#### Return Value\n\n### Method convertToSecureString\n\n    public System.Security.SecureString convertToSecureString(str unsecureString)\n\n#### Parameters\n\nunsecureString  \n\n#### Return Value\n\n### Method startBatch\n\n    public static void startBatch()\n\n### Method deleteCompany\n\n    public void deleteCompany(SelectableDataArea company)\n\n#### Parameters\n\ncompany  \n\n### Method ttsabort\n\n    public void ttsabort()\n\n### Method transactionScopeCommit\n\n    public void transactionScopeCommit()\n\n### Method new\n\nInitializes a new instance of the xApplication class.\n\n    public void new()\n\n### Method stopBatch\n\n    public static void stopBatch()\n\n### Method logRenameKey\n\n    public void logRenameKey(Common recordOrig, Common recordUpdated, container changedFields)\n\n#### Parameters\n\nrecordOrig  \n\n<!-- -->\n\nrecordUpdated  \n\n<!-- -->\n\nchangedFields  \n\n### Method startup\n\n    public void startup(str startupCmd, str buildNumber)\n\n#### Parameters\n\nstartupCmd  \n\n<!-- -->\n\nbuildNumber  \n\n### Method RedirectToDashboard\n\n    public void RedirectToDashboard()\n\n### Method insertXReferences\n\nIs invoked by the framework when cross-reference information should be inserted into the database.\n\n    public void insertXReferences()\n\n#### Remarks\n\nThe Application class provides the overloaded functionality.\n\n### Method logUpdate\n\n    public void logUpdate(Common recordOrig, Common recordUpdated, container changedFields)\n\n#### Parameters\n\nrecordOrig  \n\n<!-- -->\n\nrecordUpdated  \n\n<!-- -->\n\nchangedFields  \n\n### Method setStartPage\n\n    public void setStartPage([SysUserInfoStartPage startpage])\n\n#### Parameters\n\nstartpage  \n\n### Method ilCacheInsert\n\n    public static void ilCacheInsert(str owner, str key, str value)\n\n#### Parameters\n\nowner  \n\n<!-- -->\n\nkey  \n\n<!-- -->\n\nvalue  \n\n### Method clearManagedCaches\n\n    public void clearManagedCaches()\n\n### Method eventDelete\n\nServes as a callback that is called by the kernel when a record in a table is deleted, provided that the kernel has been set up to monitor records in that table.\n\n    public void eventDelete(Common recordDeleted)\n\n#### Parameters\n\nrecordDeleted  \nThe deleted record.\n\n#### Remarks\n\nA developer can set up the kernel to call back on deletes for a given table. This can be accomplished by inserting a record into the DatabaseLog kernel table with all fields set to relevant values, which includes setting the field logType to EventDelete. This is very similar to how the logDelete method is called and set up. The call of this method will be in the transaction in which the record is deleted.\n\n### Method enableCountryContextFilter\n\nEnables system-wide optimization in the data access layer, whereby fields that don't belong in the current company's country/region context are dropped from the SELECT query.\n\n    public void enableCountryContextFilter()\n\n### Method setTheme\n\n    public void setTheme([SysUserInfoTheme theme])\n\n#### Parameters\n\ntheme  \n\n### Method sysTrace\n\n    public void sysTrace(SysTraceType traceType, container traceInfo)\n\n#### Parameters\n\ntraceType  \n\n<!-- -->\n\ntraceInfo  \n\n### Method initGlobal\n\n    public void initGlobal(Info infoObject, VersionControl versionControlObject)\n\n#### Parameters\n\ninfoObject  \n\n<!-- -->\n\nversionControlObject  \n\n### Method transactionScopeRollback\n\n    public void transactionScopeRollback(Int64 commitLevel)\n\n#### Parameters\n\ncommitLevel  \n\n### Method ttsbegin\n\n    public void ttsbegin()\n\n### Method flushcompanycache\n\n    public void flushcompanycache(SelectableDataArea company)\n\n#### Parameters\n\ncompany  \n\n### Method logDelete\n\n    public void logDelete(Common recordDeleted)\n\n#### Parameters\n\nrecordDeleted  \n\n### Method registerServiceOnClient\n\n    public static void registerServiceOnClient(ClassId classId, str externalName)\n\n#### Parameters\n\nclassId  \n\n<!-- -->\n\nexternalName  \n\n### Method eventUpdate\n\nServes as a callback that is called by the kernel when a record in a table is updated, provided that the kernel has been set up to monitor records in that table.\n\n    public void eventUpdate(Common recordOrig, Common recordUpdated, container changedFields)\n\n#### Parameters\n\nrecordOrig  \nA container of all changed fields.\n\n<!-- -->\n\nrecordUpdated  \nA container of all changed fields.\n\n<!-- -->\n\nchangedFields  \nA container of all changed fields.\n\n#### Remarks\n\nA developer can set up the kernel to call back on updates for a given table. This is accomplished by inserting a record into the DatabaseLog kernel table with all fields set to relevant values, which includes setting the field logType to EventUpdate. It is possible to set up the kernel to call back whenever a record is updated or when a specific field is updated. This is very similar to how the logUpdate method is called and set up. The call of this method will be in the transaction in which the record is updated.\n\n### Method transactionScopeBegin\n\n    public void transactionScopeBegin()\n\n### Method checkForNewBatchJobs\n\n    public static void checkForNewBatchJobs()\n\n### Method disableCountryContextFilter\n\nDisables system-wide optimization in the data access layer, whereby fields that don't belong in the current company's country/region context are dropped from the SELECT query.\n\n    public void disableCountryContextFilter()\n\n### Method xref\n\n    public void xref(str path, xRef x)\n\n#### Parameters\n\npath  \n\n<!-- -->\n\nx  \n\n### Method transactionScopeAbort\n\n    public void transactionScopeAbort()\n\n### Method eventRenameKey\n\nServes as a callback that is called by the kernel when a primary key is renamed, provided that the kernel has been set up to monitor records in that table.\n\n    public void eventRenameKey(Common recordOrig, Common recordUpdated, container changedFields)\n\n#### Parameters\n\nrecordOrig  \nA container of all changed fields.\n\n<!-- -->\n\nrecordUpdated  \nA container of all changed fields.\n\n<!-- -->\n\nchangedFields  \nA container of all changed fields.\n\n#### Remarks\n\nA developer can set up the kernel to call back on primary key renames for a given table. This is accomplished by inserting a record into the DatabaseLog kernel table with all fields set to relevant values, which includes setting the field logType to EventRenameKey. This is very similar to how the logRenameKey method is called and set up. The call of this method will be in the transaction in which the primary key is renamed.\n\n### Method flushClientPerformanceOptions\n\n    public void flushClientPerformanceOptions()\n\n### Method flushClientServices\n\n    public static void flushClientServices()\n\n### Method restartServiceHost\n\n    public void restartServiceHost()\n\n### Method updateXrefTreeNode\n\nIs invoked by the framework when cross-reference information for the various node types is updated.\n\n    public void updateXrefTreeNode(TreeNode treeNode)\n\n#### Parameters\n\ntreeNode  \n\n#### Remarks\n\nThe Application class provides the overloaded functionality.\n\n### Method ttscommit\n\n    public void ttscommit()\n\n### Method RequestCompanyChange\n\n    public void RequestCompanyChange([DataAreaSysCompany company])\n\n#### Parameters\n\ncompany  \n\n### Method finalize\n\n    public void finalize()\n\n### Method eventInsert\n\nServes as a callback that is called by the kernel when a record in a table is inserted, provided that the kernel has been set up to monitor records in that table.\n\n    public void eventInsert(Common recordInserted)\n\n#### Parameters\n\nrecordInserted  \nThe inserted record.\n\n#### Remarks\n\nA developer can set up the kernel to call back on inserts for a given table. This is accomplished by inserting a record into the DatabaseLog kernel table with all fields set to relevant values, which includes setting the field logType to EventInsert. This is very similar to how logInsert method is called and set up. The call of this method will be in the transaction in which the record is inserted.\n\n### Method ttsNotifyBegin\n\n    public void ttsNotifyBegin()\n\n### Method closeAllForms\n\n    public void closeAllForms()\n\n### Method ttsNotifyCommit\n\n    public void ttsNotifyCommit()\n\n### Method ttsNotifyPreCommit\n\n    public void ttsNotifyPreCommit()\n\n### Method ttsNotifyPostBegin\n\n    public void ttsNotifyPostBegin()\n\n### Method ttsNotifyAbort\n\n    public void ttsNotifyAbort()\n\n### Method setDensity\n\n    public void setDensity([SysUserInfoDensity theme])\n\n#### Parameters\n\ntheme  \n\n### Method logInsert\n\n    public void logInsert(Common recordInserted)\n\n#### Parameters\n\nrecordInserted  \n\n## Class xArgs\n    class xArgs extends Object\n\nThe xArgs class is used to pass arguments such as a name, a caller, and parameters between application objects.\n\n### Remarks\n\nForms, reports and queries all use this class as their first argument in the constructor. The preferred way to use this class is to construct an xArgs object, supply a name-string, and then pass the xArgs object to the forms constructor or a ClassFactory method.If you want to refer to the xArgs object passed to one of these classes, it can be reached using args method of that class.There are four methods that can be used to pass extra information to the new class:\n\n-   The parm - to pass strings\n-   The parmEnum and parmEnumType methods - to pass enumeration values\n-   The parmObject method - to pass an object of any type\n\nThe instance of the xArgs class that is sent from the caller can be created automatically by the kernel or explicitly by the caller. When the caller uses a menu item to call an object, an instance of the xArgs class is created by the kernel code. The menu item name will be set to the name of the menu item used. If the menu item has values for the Parameters, EnumParameter, or EnumTypeParameter properties set, the kernel will set the values of the corresponding Parm, ParmEnum, or ParmEnumType properties for this instance of the xArgs class.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                       | Description                                                                                                                           |\n|--------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean allowUseOfPreloadedForm(\\[boolean value\\])                                                    | Determines if the form launched for this instance may come from the pre-loaded form pool.                                             |\n| public int arrIdx(\\[int value\\])                                                                             |                                                                                                                                       |\n| public Object caller(\\[Object value\\])                                                                       | Gets or sets the instance of the object that created this instance of the xArgs class.                                                |\n| public IDispatcherProxy callerDispatcher()                                                                   |                                                                                                                                       |\n| public FormControl callerFormControl(\\[FormControl value\\])                                                  |                                                                                                                                       |\n| public str callerName()                                                                                      |                                                                                                                                       |\n| public UtilElementType callerType()                                                                          |                                                                                                                                       |\n| public Guid callerId()                                                                                       |                                                                                                                                       |\n| public str clientId(\\[str value\\])                                                                           |                                                                                                                                       |\n| public CopyCallerQuery copyCallerQuery(\\[CopyCallerQuery value\\])                                            |                                                                                                                                       |\n| public TableId dataset()                                                                                     | Gets the table ID of the table in which the caller object is working.                                                                 |\n| public str designName(\\[str value\\])                                                                         | Gets or sets a string that indicates a design on a report or form.                                                                    |\n| public ExtendedTypeId extType(\\[ExtendedTypeId edt\\], \\[int arrayIndex\\])                                    |                                                                                                                                       |\n| public FormViewOption formViewOption(\\[FormViewOption value\\])                                               |                                                                                                                                       |\n| public InitialQueryParameter initialQuery(\\[InitialQueryParameter initialQueryParameter\\])                   |                                                                                                                                       |\n| public FieldId lookupField(\\[FieldId value\\])                                                                | Gets or sets the field ID in a table to use to look up a specified record.                                                            |\n| public Common lookupRecord(\\[Common value\\])                                                                 | Finds a record in the specified table.                                                                                                |\n| public TableId lookupTable(\\[TableId value\\])                                                                |                                                                                                                                       |\n| public str lookupValue(\\[str value\\])                                                                        | Gets or sets a string to use with the LookupField method to find a value in a field of a table.                                       |\n| public str managedContentItemName(\\[str value\\])                                                             |                                                                                                                                       |\n| public str menuItemName(\\[str value\\])                                                                       | Gets or sets the name of the menu item to use to start the application object.                                                        |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                                                     | Gets or sets the type of the menu item to use to start the called application object.                                                 |\n| public MultiSelectionContext multiSelectionContext()                                                         |                                                                                                                                       |\n| public str name(\\[str value\\])                                                                               | Gets or sets the name that is used in code to identify a form, report, table, query, or another MSDAX application object.             |\n| public Object object(\\[Object value\\])                                                                       | Gets and sets the application name of the object for which to open a new instance.                                                    |\n| public OpenMode openMode(\\[OpenMode value\\])                                                                 |                                                                                                                                       |\n| public Int64 parentWnd(\\[Int64 value\\])                                                                      |                                                                                                                                       |\n| public str parm(\\[str value\\])                                                                               | Gets or sets a string that specifies miscellaneous information for the called object.                                                 |\n| public AnyType parmEnum(\\[int value\\])                                                                       | Gets or sets the enumeration value of the enumeration type that is specified in the parmEnumType method.                              |\n| public int parmEnumType(\\[int value\\])                                                                       | Gets or sets the ID value of any enumeration type.                                                                                    |\n| public Object parmObject(\\[Object value\\])                                                                   | Gets or sets the instance of any object to pass to the called object.                                                                 |\n| public Common record(\\[Common value\\])                                                                       | Gets or sets the record from the table on which the caller object is working.                                                         |\n| public FieldId refField(\\[FieldId value\\])                                                                   |                                                                                                                                       |\n| public str getRequestContextQuery()                                                                          |                                                                                                                                       |\n| public str requestContextQuery(str value)                                                                    |                                                                                                                                       |\n| public FieldId selectField(\\[FieldId value\\])                                                                |                                                                                                                                       |\n| public str toString()                                                                                        | Retrieves a string representation of an instance of the xArgs.                                                                        |\n| public boolean applyRecordAsDynalink(\\[boolean applyAsDynalink\\])                                            |                                                                                                                                       |\n| public void onCallerChanged(\\[Object value\\])                                                                |                                                                                                                                       |\n| public void new(\\[AnyType nameOrCaller\\], \\[Object object\\])                                                 | Constructs an instance of this class, which is used to pass information to high-level classes such as the FormRun or ReportRun class. |\n| public void finalize()                                                                                       | Removes the current instance of the xArgs class from memory.                                                                          |\n| public void setupArgs(str parm, int enumType, AnyType enumValue, \\[str menuItemName\\], \\[int menuItemType\\]) |                                                                                                                                       |\n\n### Method allowUseOfPreloadedForm\n\nDetermines if the form launched for this instance may come from the pre-loaded form pool.\n\n    public boolean allowUseOfPreloadedForm([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that determines whether the loaded form can come from the pre-loaded form pool.\n\n#### Return Value\n\ntrue if the form launched for this instance may come from the pre-loaded form pool; otherwise, false.\n\n#### Remarks\n\nUse of a pre-loaded form is permitted by default. Set this to false only if there are undesired side-effects from the use of a pre-loaded form.\n\n### Method arrIdx\n\n    public int arrIdx([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method caller\n\nGets or sets the instance of the object that created this instance of the xArgs class.\n\n    public Object caller([Object value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe current instance of the caller object.\n\n### Method callerDispatcher\n\n    public IDispatcherProxy callerDispatcher()\n\n#### Return Value\n\n### Method callerFormControl\n\n    public FormControl callerFormControl([FormControl value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method callerName\n\n    public str callerName()\n\n#### Return Value\n\n### Method callerType\n\n    public UtilElementType callerType()\n\n#### Return Value\n\n### Method callerId\n\n    public Guid callerId()\n\n#### Return Value\n\n### Method clientId\n\n    public str clientId([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method copyCallerQuery\n\n    public CopyCallerQuery copyCallerQuery([CopyCallerQuery value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataset\n\nGets the table ID of the table in which the caller object is working.\n\n    public TableId dataset()\n\n#### Return Value\n\nThe table ID of the table in which the caller object is working.\n\n#### Remarks\n\nThe returned value is often used to identify which type of record is being transferred from the caller in the record method.\n\n### Method designName\n\nGets or sets a string that indicates a design on a report or form.\n\n    public str designName([str value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\n### Method extType\n\n    public ExtendedTypeId extType([ExtendedTypeId edt], [int arrayIndex])\n\n#### Parameters\n\nedt  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method formViewOption\n\n    public FormViewOption formViewOption([FormViewOption value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method initialQuery\n\n    public InitialQueryParameter initialQuery([InitialQueryParameter initialQueryParameter])\n\n#### Parameters\n\ninitialQueryParameter  \n\n#### Return Value\n\n### Method lookupField\n\nGets or sets the field ID in a table to use to look up a specified record.\n\n    public FieldId lookupField([FieldId value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe field ID of a field in a table to use to look up a specified record.\n\n#### Remarks\n\nThe returned value can be used by the called object to look up the specified record in the LookupRecord method or the string specified in the LookupValue method. For example, the field to look up could be set with the following: xArgs.lookupField(fieldnum(TableName, FieldName));\n\n### Method lookupRecord\n\nFinds a record in the specified table.\n\n    public Common lookupRecord([Common value])\n\n#### Parameters\n\nvalue  \nThe table in which to find a record.\n\n#### Return Value\n\nA record in the specified table.\n\n#### Remarks\n\nThis method can be used by the called object in combination with the field ID that is returned from the lookupField method to find the value of the field in the record that is returned by this method.\n\n### Method lookupTable\n\n    public TableId lookupTable([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lookupValue\n\nGets or sets a string to use with the LookupField method to find a value in a field of a table.\n\n    public str lookupValue([str value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nA string to use with the LookupField method to find a value.\n\n### Method managedContentItemName\n\n    public str managedContentItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\nGets or sets the name of the menu item to use to start the application object.\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe name of the menu item to use to start the application object.\n\n#### Remarks\n\nFor example, to set the menu item you could use the following: xArgs.menuItemName(menuitemdisplaystr(CostingVersionPeriodic));\n\n### Method menuItemType\n\nGets or sets the type of the menu item to use to start the called application object.\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe type of the menu item to use to start the called application object.\n\n#### Remarks\n\nThe menu item type will be one of the Display, Output, or Action enumeration values.\n\n### Method multiSelectionContext\n\n    public MultiSelectionContext multiSelectionContext()\n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another MSDAX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Does not exceed 250 characters.\n-   May include numbers and underscore characters.\n-   May include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\nFor example, to call a form from an application object you can use: args.name(formstr(FormName));\n\n### Method object\n\nGets and sets the application name of the object for which to open a new instance.\n\n    public Object object([Object value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe application name of the object for which to open a new instance.\n\n#### Remarks\n\nThe value parameter may be one of the following types of objects:\n\n-   Form\n-   Report\n-   Job\n-   Class\n-   Query.\n\n### Method openMode\n\n    public OpenMode openMode([OpenMode value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method parentWnd\n\n    public Int64 parentWnd([Int64 value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method parm\n\nGets or sets a string that specifies miscellaneous information for the called object.\n\n    public str parm([str value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe value of the string that specifies miscellaneous information for the called object.\n\n### Method parmEnum\n\nGets or sets the enumeration value of the enumeration type that is specified in the parmEnumType method.\n\n    public AnyType parmEnum([int value])\n\n#### Parameters\n\nvalue  \nThe key of an enumeration value to set; optional.\n\n#### Return Value\n\nThe enumeration value of the enumeration type that is specified in the parmEnumType method.\n\n#### Remarks\n\nThis method is often used with the parmEnumType method: args.parmEnumType(enumnum(AssetBookType));args.parmEnumType(enumnum(AssetBookType));\n\n### Method parmEnumType\n\nGets or sets the ID value of any enumeration type.\n\n    public int parmEnumType([int value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe ID value of the enumeration type.\n\n#### Remarks\n\nThis method is used with the parmEnum method to send a specific value of an enumeration type to the called object. For example: args.parmEnumType(enumnum(AssetBookType));args.parmEnum(AssetBookType::ValueModel);\n\n### Method parmObject\n\nGets or sets the instance of any object to pass to the called object.\n\n    public Object parmObject([Object value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe instance of an object to pass to the called object.\n\n#### Remarks\n\nThe object will often be a class.\n\n### Method record\n\nGets or sets the record from the table on which the caller object is working.\n\n    public Common record([Common value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe record from the table on which the caller object is working.\n\n#### Remarks\n\nThis method is used to access the values in the record that the calling object is currently using.\n\n### Method refField\n\n    public FieldId refField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method getRequestContextQuery\n\n    public str getRequestContextQuery()\n\n#### Return Value\n\n### Method requestContextQuery\n\n    public str requestContextQuery(str value)\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method selectField\n\n    public FieldId selectField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toString\n\nRetrieves a string representation of an instance of the xArgs.\n\n    public str toString()\n\n#### Return Value\n\nA string that contains a description of the instance of the xArgs class.\n\n### Method applyRecordAsDynalink\n\n    public boolean applyRecordAsDynalink([boolean applyAsDynalink])\n\n#### Parameters\n\napplyAsDynalink  \n\n#### Return Value\n\n### Method onCallerChanged\n\n    public void onCallerChanged([Object value])\n\n#### Parameters\n\nvalue  \n\n### Method new\n\nConstructs an instance of this class, which is used to pass information to high-level classes such as the FormRun or ReportRun class.\n\n    public void new([AnyType nameOrCaller], [Object object])\n\n#### Parameters\n\nnameOrCaller  \nAn object argument; optional. This parameter is used to create the instance of the xArgs class and is used when the nameOrCaller parameter is a caller argument.\n\n<!-- -->\n\nobject  \nAn object argument; optional. This parameter is used to create the instance of the xArgs class and is used when the nameOrCaller parameter is a caller argument.\n\n#### Remarks\n\nTo create an xArgs object, either supply a (Caller, Object) pair or a Name argument. Both arguments are optional and all values can be set after it is constructed by calling the appropriate methods.\n\n### Method finalize\n\nRemoves the current instance of the xArgs class from memory.\n\n    public void finalize()\n\n### Method setupArgs\n\n    public void setupArgs(str parm, int enumType, AnyType enumValue, [str menuItemName], [int menuItemType])\n\n#### Parameters\n\nparm  \n\n<!-- -->\n\nenumType  \n\n<!-- -->\n\nenumValue  \n\n<!-- -->\n\nmenuItemName  \n\n<!-- -->\n\nmenuItemType  \n\n## Class xAxaptaUserDetails\n    class xAxaptaUserDetails extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                           | Description                                                 |\n|--------------------------------------------------|-------------------------------------------------------------|\n| public UserAccountType getAccountType(int index) |                                                             |\n| public int getUserCount()                        |                                                             |\n| public str getUserDomain(int index)              |                                                             |\n| public str getUserLogin(int index)               |                                                             |\n| public str getUserMail(int index)                |                                                             |\n| public str getUserName(int index)                |                                                             |\n| public str getUserSid(int index)                 |                                                             |\n| public boolean isUserEnabled(int index)          |                                                             |\n| public boolean isUserExternal(int index)         |                                                             |\n| public void finalize()                           |                                                             |\n| public void new()                                | Initializes a new instance of the xAxaptaUserDetails class. |\n\n### Method getAccountType\n\n    public UserAccountType getAccountType(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method getUserCount\n\n    public int getUserCount()\n\n#### Return Value\n\n### Method getUserDomain\n\n    public str getUserDomain(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method getUserLogin\n\n    public str getUserLogin(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method getUserMail\n\n    public str getUserMail(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method getUserName\n\n    public str getUserName(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method getUserSid\n\n    public str getUserSid(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method isUserEnabled\n\n    public boolean isUserEnabled(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method isUserExternal\n\n    public boolean isUserExternal(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the xAxaptaUserDetails class.\n\n    public void new()\n\n## Class xAxaptaUserManager\n    class xAxaptaUserManager extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                               | Description                                                            |\n|------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| public container enumerateDomains(str server)                                                        |                                                                        |\n| public xAxaptaUserDetails enumerateDomainUsers(str domainName)                                       |                                                                        |\n| public str generatePassword()                                                                        |                                                                        |\n| public xAxaptaUserDetails getDomainUser(str domainName, str userLogin)                               |                                                                        |\n| public str getFQDN(str domainName, \\[boolean throwError\\])                                           |                                                                        |\n| public container getGroupsForUser(str userName)                                                      |                                                                        |\n| public container getRolesForUser(str userName, str company)                                          | Gets roles for the given user.                                         |\n| public xAxaptaUserDetails getSIDFromName(str userLogin, str domainName, UserAccountType accountType) | Gets user details from the given user logon, domain, and account type. |\n| public str getUserSid(str username, str domain)                                                      |                                                                        |\n| public boolean validateDomain(str domain)                                                            |                                                                        |\n| public boolean validateOrgUnit(str ouName)                                                           |                                                                        |\n| public boolean validatePassword(str username, str domain, str password)                              |                                                                        |\n| public boolean validateSecGroup(str secGroup)                                                        |                                                                        |\n| public void new()                                                                                    | Initializes a new instance of the xAxaptaUserManager class.            |\n| public void updateUserRoleAssignments(UserId userId, container roles, container removeRoles)         |                                                                        |\n| public void finalize()                                                                               |                                                                        |\n\n### Method enumerateDomains\n\n    public container enumerateDomains(str server)\n\n#### Parameters\n\nserver  \n\n#### Return Value\n\n### Method enumerateDomainUsers\n\n    public xAxaptaUserDetails enumerateDomainUsers(str domainName)\n\n#### Parameters\n\ndomainName  \n\n#### Return Value\n\n### Method generatePassword\n\n    public str generatePassword()\n\n#### Return Value\n\n### Method getDomainUser\n\n    public xAxaptaUserDetails getDomainUser(str domainName, str userLogin)\n\n#### Parameters\n\ndomainName  \n\n<!-- -->\n\nuserLogin  \n\n#### Return Value\n\n### Method getFQDN\n\n    public str getFQDN(str domainName, [boolean throwError])\n\n#### Parameters\n\ndomainName  \n\n<!-- -->\n\nthrowError  \n\n#### Return Value\n\n### Method getGroupsForUser\n\n    public container getGroupsForUser(str userName)\n\n#### Parameters\n\nuserName  \n\n#### Return Value\n\n### Method getRolesForUser\n\nGets roles for the given user.\n\n    public container getRolesForUser(str userName, str company)\n\n#### Parameters\n\nuserName  \n\n<!-- -->\n\ncompany  \n\n#### Return Value\n\nA container that holds roles for the given user.\n\n### Method getSIDFromName\n\nGets user details from the given user logon, domain, and account type.\n\n    public xAxaptaUserDetails getSIDFromName(str userLogin, str domainName, UserAccountType accountType)\n\n#### Parameters\n\nuserLogin  \n\n<!-- -->\n\ndomainName  \n\n<!-- -->\n\naccountType  \n\n#### Return Value\n\nA xAxaptaUserDetails class instance that contains user details.\n\n### Method getUserSid\n\n    public str getUserSid(str username, str domain)\n\n#### Parameters\n\nusername  \n\n<!-- -->\n\ndomain  \n\n#### Return Value\n\n### Method validateDomain\n\n    public boolean validateDomain(str domain)\n\n#### Parameters\n\ndomain  \n\n#### Return Value\n\n### Method validateOrgUnit\n\n    public boolean validateOrgUnit(str ouName)\n\n#### Parameters\n\nouName  \n\n#### Return Value\n\n### Method validatePassword\n\n    public boolean validatePassword(str username, str domain, str password)\n\n#### Parameters\n\nusername  \n\n<!-- -->\n\ndomain  \n\n<!-- -->\n\npassword  \n\n#### Return Value\n\n### Method validateSecGroup\n\n    public boolean validateSecGroup(str secGroup)\n\n#### Parameters\n\nsecGroup  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the xAxaptaUserManager class.\n\n    public void new()\n\n### Method updateUserRoleAssignments\n\n    public void updateUserRoleAssignments(UserId userId, container roles, container removeRoles)\n\n#### Parameters\n\nuserId  \n\n<!-- -->\n\nroles  \n\n<!-- -->\n\nremoveRoles  \n\n### Method finalize\n\n    public void finalize()\n\n## Class xBrowser\n    class xBrowser extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                       | Description |\n|----------------------------------------------------------------------------------------------|-------------|\n| public void navigate(str downloadUrl, \\[boolean openInNewTab\\], \\[boolean showExitWarning\\]) |             |\n| public void new()                                                                            |             |\n\n### Method navigate\n\n    public void navigate(str downloadUrl, [boolean openInNewTab], [boolean showExitWarning])\n\n#### Parameters\n\ndownloadUrl  \n\n<!-- -->\n\nopenInNewTab  \n\n<!-- -->\n\nshowExitWarning  \n\n### Method new\n\n    public void new()\n\n## Class xClassFactory\n    class xClassFactory extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                               | Description                                            |\n|------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------|\n| public xFormRun createAutoReportForm(xArgs args)                                                                                                     |                                                        |\n| public xFormRun createLabelForm(xArgs args)                                                                                                          |                                                        |\n| public xFormRun createRecInfoForm(xArgs args)                                                                                                        |                                                        |\n| public ReportViewer createReportViewer(PrintJobHeader jobsCursor, PrintJobPages pagesCursor, \\[ReportRun reportRun\\])                                |                                                        |\n| public xFormRun createSetupForm(xArgs args)                                                                                                          |                                                        |\n| public ReportOutputUser createViewer(PrintJobHeader jobsCursor, PrintJobPages pagesCursor, ReportOutputUserType viewerType, \\[ReportRun reportRun\\]) |                                                        |\n| public Object createWebPageEditor()                                                                                                                  |                                                        |\n| public xFormRun formRunClass(xArgs args)                                                                                                             |                                                        |\n| public container lastValueGet(SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, \\[str design\\])               |                                                        |\n| public QueryRun queryRunClass(xArgs args)                                                                                                            |                                                        |\n| public ReportRun reportRunClass(xArgs args)                                                                                                          |                                                        |\n| public Object startAOTWizard(TreeNode parent)                                                                                                        |                                                        |\n| public void projectDeleted(str projectName)                                                                                                          |                                                        |\n| public void lastValueDelete(SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, \\[str design\\])                 |                                                        |\n| public void lastValuePut(container value, SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, \\[str design\\])   |                                                        |\n| public void drillDown(OutputField outputField, MenuItemType menuItemType, str menuItemName)                                                          |                                                        |\n| public void new()                                                                                                                                    | Initializes a new instance of the xClassFactory class. |\n\n### Method createAutoReportForm\n\n    public xFormRun createAutoReportForm(xArgs args)\n\n#### Parameters\n\nargs  \n\n#### Return Value\n\n### Method createLabelForm\n\n    public xFormRun createLabelForm(xArgs args)\n\n#### Parameters\n\nargs  \n\n#### Return Value\n\n### Method createRecInfoForm\n\n    public xFormRun createRecInfoForm(xArgs args)\n\n#### Parameters\n\nargs  \n\n#### Return Value\n\n### Method createReportViewer\n\n    public ReportViewer createReportViewer(PrintJobHeader jobsCursor, PrintJobPages pagesCursor, [ReportRun reportRun])\n\n#### Parameters\n\njobsCursor  \n\n<!-- -->\n\npagesCursor  \n\n<!-- -->\n\nreportRun  \n\n#### Return Value\n\n### Method createSetupForm\n\n    public xFormRun createSetupForm(xArgs args)\n\n#### Parameters\n\nargs  \n\n#### Return Value\n\n### Method createViewer\n\n    public ReportOutputUser createViewer(PrintJobHeader jobsCursor, PrintJobPages pagesCursor, ReportOutputUserType viewerType, [ReportRun reportRun])\n\n#### Parameters\n\njobsCursor  \n\n<!-- -->\n\npagesCursor  \n\n<!-- -->\n\nviewerType  \n\n<!-- -->\n\nreportRun  \n\n#### Return Value\n\n### Method createWebPageEditor\n\n    public Object createWebPageEditor()\n\n#### Return Value\n\n### Method formRunClass\n\n    public xFormRun formRunClass(xArgs args)\n\n#### Parameters\n\nargs  \n\n#### Return Value\n\n### Method lastValueGet\n\n    public container lastValueGet(SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, [str design])\n\n#### Parameters\n\ncompany  \n\n<!-- -->\n\nuser  \n\n<!-- -->\n\nutilType  \n\n<!-- -->\n\nname  \n\n<!-- -->\n\ndesign  \n\n#### Return Value\n\n### Method queryRunClass\n\n    public QueryRun queryRunClass(xArgs args)\n\n#### Parameters\n\nargs  \n\n#### Return Value\n\n### Method reportRunClass\n\n    public ReportRun reportRunClass(xArgs args)\n\n#### Parameters\n\nargs  \n\n#### Return Value\n\n### Method startAOTWizard\n\n    public Object startAOTWizard(TreeNode parent)\n\n#### Parameters\n\nparent  \n\n#### Return Value\n\n### Method projectDeleted\n\n    public void projectDeleted(str projectName)\n\n#### Parameters\n\nprojectName  \n\n### Method lastValueDelete\n\n    public void lastValueDelete(SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, [str design])\n\n#### Parameters\n\ncompany  \n\n<!-- -->\n\nuser  \n\n<!-- -->\n\nutilType  \n\n<!-- -->\n\nname  \n\n<!-- -->\n\ndesign  \n\n### Method lastValuePut\n\n    public void lastValuePut(container value, SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, [str design])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\ncompany  \n\n<!-- -->\n\nuser  \n\n<!-- -->\n\nutilType  \n\n<!-- -->\n\nname  \n\n<!-- -->\n\ndesign  \n\n### Method drillDown\n\n    public void drillDown(OutputField outputField, MenuItemType menuItemType, str menuItemName)\n\n#### Parameters\n\noutputField  \n\n<!-- -->\n\nmenuItemType  \n\n<!-- -->\n\nmenuItemName  \n\n### Method new\n\nInitializes a new instance of the xClassFactory class.\n\n    public void new()\n\n## Class xClassTrace\n    class xClassTrace extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                             | Description                                          |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------|\n| ::public static boolean isTracingEnabled(\\[Int64 keyword\\], \\[int level\\])                                                                                                         |                                                      |\n| ::public static boolean isTracingStarted()                                                                                                                                         |                                                      |\n| ::public static str kernelCustomerId()                                                                                                                                             |                                                      |\n| ::public static Guid kernelRequestId()                                                                                                                                             |                                                      |\n| ::public static str kernelSessionId()                                                                                                                                              |                                                      |\n| ::public static str kernelUserId()                                                                                                                                                 |                                                      |\n| ::public static int start(str logFileName, \\[int logBufferSize\\], \\[int minBuffers\\], \\[int maxBuffers\\], \\[Int64 keywords\\], \\[int maxFileSize\\], \\[boolean useCircularLogging\\]) |                                                      |\n| ::public static int stop()                                                                                                                                                         |                                                      |\n| ::public static void logMessage(str message)                                                                                                                                       |                                                      |\n| public void endMarker(str transactionName)                                                                                                                                         |                                                      |\n| public void beginMarker(str transactionName)                                                                                                                                       |                                                      |\n| ::public static void logComponentMessage(str component, str message)                                                                                                               |                                                      |\n| public void finalize()                                                                                                                                                             |                                                      |\n| public void new()                                                                                                                                                                  | Initializes a new instance of the xClassTrace class. |\n\n### Method isTracingEnabled\n\n    public static boolean isTracingEnabled([Int64 keyword], [int level])\n\n#### Parameters\n\nkeyword  \n\n<!-- -->\n\nlevel  \n\n#### Return Value\n\n### Method isTracingStarted\n\n    public static boolean isTracingStarted()\n\n#### Return Value\n\n### Method kernelCustomerId\n\n    public static str kernelCustomerId()\n\n#### Return Value\n\n### Method kernelRequestId\n\n    public static Guid kernelRequestId()\n\n#### Return Value\n\n### Method kernelSessionId\n\n    public static str kernelSessionId()\n\n#### Return Value\n\n### Method kernelUserId\n\n    public static str kernelUserId()\n\n#### Return Value\n\n### Method start\n\n    public static int start(str logFileName, [int logBufferSize], [int minBuffers], [int maxBuffers], [Int64 keywords], [int maxFileSize], [boolean useCircularLogging])\n\n#### Parameters\n\nlogFileName  \n\n<!-- -->\n\nlogBufferSize  \n\n<!-- -->\n\nminBuffers  \n\n<!-- -->\n\nmaxBuffers  \n\n<!-- -->\n\nkeywords  \n\n<!-- -->\n\nmaxFileSize  \n\n<!-- -->\n\nuseCircularLogging  \n\n#### Return Value\n\n### Method stop\n\n    public static int stop()\n\n#### Return Value\n\n### Method logMessage\n\n    public static void logMessage(str message)\n\n#### Parameters\n\nmessage  \n\n### Method endMarker\n\n    public void endMarker(str transactionName)\n\n#### Parameters\n\ntransactionName  \n\n### Method beginMarker\n\n    public void beginMarker(str transactionName)\n\n#### Parameters\n\ntransactionName  \n\n### Method logComponentMessage\n\n    public static void logComponentMessage(str component, str message)\n\n#### Parameters\n\ncomponent  \n\n<!-- -->\n\nmessage  \n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the xClassTrace class.\n\n    public void new()\n\n## Class xCompany\n    class xCompany extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                              | Description                                        |\n|-------------------------------------------------------------------------------------|----------------------------------------------------|\n| public DataAreaId dataArea(TableId tableId)                                         |                                                    |\n| public SelectableDataArea ext()                                                     |                                                    |\n| public boolean log(DatabaseLogType typeOfLog, TableId tableId, \\[FieldId fieldId\\]) |                                                    |\n| public boolean logAlways(DatabaseLogType typeOfLog, \\[boolean log\\])                | Enables or disables logging for non-system tables. |\n| public boolean reindex(\\[TableId tableId\\])                                         |                                                    |\n| public void reloadLog()                                                             |                                                    |\n| public void new(SelectableDataArea company)                                         | Initializes a new instance of the Object class.    |\n| public void check()                                                                 |                                                    |\n| public void reloadRights()                                                          |                                                    |\n| public void flushCache(TableId tableId)                                             |                                                    |\n| public void reloadTableCollections()                                                |                                                    |\n\n### Method dataArea\n\n    public DataAreaId dataArea(TableId tableId)\n\n#### Parameters\n\ntableId  \n\n#### Return Value\n\n### Method ext\n\n    public SelectableDataArea ext()\n\n#### Return Value\n\n### Method log\n\n    public boolean log(DatabaseLogType typeOfLog, TableId tableId, [FieldId fieldId])\n\n#### Parameters\n\ntypeOfLog  \n\n<!-- -->\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n#### Return Value\n\n### Method logAlways\n\nEnables or disables logging for non-system tables.\n\n    public boolean logAlways(DatabaseLogType typeOfLog, [boolean log])\n\n#### Parameters\n\ntypeOfLog  \n\n<!-- -->\n\nlog  \n\n#### Return Value\n\nThe status of the database logging for the indicated operation before the call.\n\n#### Remarks\n\nWithout the optional typeOfLog parameter, this method will report the status of the database logging for the indicated operation. Note that if the optional parameter is provided, the method is guarded by CAS and the calling code must assert SysDatabaselogPermission.\n\n### Method reindex\n\n    public boolean reindex([TableId tableId])\n\n#### Parameters\n\ntableId  \n\n#### Return Value\n\n### Method reloadLog\n\n    public void reloadLog()\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(SelectableDataArea company)\n\n#### Parameters\n\ncompany  \n\n### Method check\n\n    public void check()\n\n### Method reloadRights\n\n    public void reloadRights()\n\n### Method flushCache\n\n    public void flushCache(TableId tableId)\n\n#### Parameters\n\ntableId  \n\n### Method reloadTableCollections\n\n    public void reloadTableCollections()\n\n## Class xCompilerOutput\n    class xCompilerOutput extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                         | Description                                              |\n|--------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------|\n| public str getErrorMessage(int errorCode, int severity, str errorString)                                                       |                                                          |\n| public container getSquiggleInfo(str treeNodePath)                                                                             |                                                          |\n| public void compilerStatus(UtilElementType utilElementType, str utilElementName)                                               |                                                          |\n| public void setActiveTab(int tab)                                                                                              |                                                          |\n| public void startCompilationObject(str path)                                                                                   |                                                          |\n| public void endCompilation()                                                                                                   |                                                          |\n| public void startExport()                                                                                                      |                                                          |\n| public void startCompilation(int flag, str path, int activeWindowHandle)                                                       |                                                          |\n| public void importOutput(str buffer)                                                                                           |                                                          |\n| public void endExport()                                                                                                        |                                                          |\n| public void endCompilationObject(str path)                                                                                     |                                                          |\n| public void startImport()                                                                                                      |                                                          |\n| public void new()                                                                                                              | Initializes a new instance of the xCompilerOutput class. |\n| public void compilerOutputMessage(str path, int errorCode, int line, int col, int severity, str errorString, str propertyName) |                                                          |\n| public void exportOutput(str buffer)                                                                                           |                                                          |\n| public void endCILGenerationOutput()                                                                                           |                                                          |\n| public void cilGenerationOutput(str msg, str path, int severity, int line, int col)                                            |                                                          |\n| public void endImport()                                                                                                        |                                                          |\n| public void nextError()                                                                                                        |                                                          |\n| public void startCILGenerationOutput()                                                                                         |                                                          |\n\n### Method getErrorMessage\n\n    public str getErrorMessage(int errorCode, int severity, str errorString)\n\n#### Parameters\n\nerrorCode  \n\n<!-- -->\n\nseverity  \n\n<!-- -->\n\nerrorString  \n\n#### Return Value\n\n### Method getSquiggleInfo\n\n    public container getSquiggleInfo(str treeNodePath)\n\n#### Parameters\n\ntreeNodePath  \n\n#### Return Value\n\n### Method compilerStatus\n\n    public void compilerStatus(UtilElementType utilElementType, str utilElementName)\n\n#### Parameters\n\nutilElementType  \n\n<!-- -->\n\nutilElementName  \n\n### Method setActiveTab\n\n    public void setActiveTab(int tab)\n\n#### Parameters\n\ntab  \n\n### Method startCompilationObject\n\n    public void startCompilationObject(str path)\n\n#### Parameters\n\npath  \n\n### Method endCompilation\n\n    public void endCompilation()\n\n### Method startExport\n\n    public void startExport()\n\n### Method startCompilation\n\n    public void startCompilation(int flag, str path, int activeWindowHandle)\n\n#### Parameters\n\nflag  \n\n<!-- -->\n\npath  \n\n<!-- -->\n\nactiveWindowHandle  \n\n### Method importOutput\n\n    public void importOutput(str buffer)\n\n#### Parameters\n\nbuffer  \n\n### Method endExport\n\n    public void endExport()\n\n### Method endCompilationObject\n\n    public void endCompilationObject(str path)\n\n#### Parameters\n\npath  \n\n### Method startImport\n\n    public void startImport()\n\n### Method new\n\nInitializes a new instance of the xCompilerOutput class.\n\n    public void new()\n\n### Method compilerOutputMessage\n\n    public void compilerOutputMessage(str path, int errorCode, int line, int col, int severity, str errorString, str propertyName)\n\n#### Parameters\n\npath  \n\n<!-- -->\n\nerrorCode  \n\n<!-- -->\n\nline  \n\n<!-- -->\n\ncol  \n\n<!-- -->\n\nseverity  \n\n<!-- -->\n\nerrorString  \n\n<!-- -->\n\npropertyName  \n\n### Method exportOutput\n\n    public void exportOutput(str buffer)\n\n#### Parameters\n\nbuffer  \n\n### Method endCILGenerationOutput\n\n    public void endCILGenerationOutput()\n\n### Method cilGenerationOutput\n\n    public void cilGenerationOutput(str msg, str path, int severity, int line, int col)\n\n#### Parameters\n\nmsg  \n\n<!-- -->\n\npath  \n\n<!-- -->\n\nseverity  \n\n<!-- -->\n\nline  \n\n<!-- -->\n\ncol  \n\n### Method endImport\n\n    public void endImport()\n\n### Method nextError\n\n    public void nextError()\n\n### Method startCILGenerationOutput\n\n    public void startCILGenerationOutput()\n\n## Class XDSServices\n    class XDSServices extends Object\n\nThe XDSServices class provides APIs to manage the extensible data security (XDS) behavior.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                 | Description                                                                                                                       |\n|------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| public int flushXDSMyConstructs(int reserved, str tablename)           | Flushes the MyConstruct table that is used with XDS.                                                                              |\n| public str getQuerySQL(str queryname)                                  |                                                                                                                                   |\n| public str getTableSQL(str tablename, \\[str policyname\\])              |                                                                                                                                   |\n| public str getXDSBinding(str name)                                     |                                                                                                                                   |\n| public str getXDSContext(int reserved)                                 |                                                                                                                                   |\n| public int getXDSToFlushPerServiceSession(int reserved)                | Checks whether the MyConstruct tables will be flushed when the service session is returned to the pool.                           |\n| public void finalize()                                                 |                                                                                                                                   |\n| public void new()                                                      | Initializes a new instance of the XDSServices class.                                                                              |\n| public void setXDSContext(int reserved, str contextstring)             |                                                                                                                                   |\n| public void setXDSBinding(str name, str value)                         |                                                                                                                                   |\n| public void setXDSState(int finalState)                                |                                                                                                                                   |\n| public void setXDSToFlushPerServiceSession(int reserved, int newstate) | Sets the setting that determines whether the MyConstruct tables will be flushed when the service session is returned to the pool. |\n| public void setXDSTrace(int flag, str value)                           |                                                                                                                                   |\n\n### Method flushXDSMyConstructs\n\nFlushes the MyConstruct table that is used with XDS.\n\n    public int flushXDSMyConstructs(int reserved, str tablename)\n\n#### Parameters\n\nreserved  \nThe name of the MyConstruct table to flush. It no value is passed in, or if an empty string is passed in, all MyConstruct tables are flushed.\n\n<!-- -->\n\ntablename  \nThe name of the MyConstruct table to flush. It no value is passed in, or if an empty string is passed in, all MyConstruct tables are flushed.\n\n#### Return Value\n\n### Method getQuerySQL\n\n    public str getQuerySQL(str queryname)\n\n#### Parameters\n\nqueryname  \n\n#### Return Value\n\n### Method getTableSQL\n\n    public str getTableSQL(str tablename, [str policyname])\n\n#### Parameters\n\ntablename  \n\n<!-- -->\n\npolicyname  \n\n#### Return Value\n\n### Method getXDSBinding\n\n    public str getXDSBinding(str name)\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method getXDSContext\n\n    public str getXDSContext(int reserved)\n\n#### Parameters\n\nreserved  \n\n#### Return Value\n\n### Method getXDSToFlushPerServiceSession\n\nChecks whether the MyConstruct tables will be flushed when the service session is returned to the pool.\n\n    public int getXDSToFlushPerServiceSession(int reserved)\n\n#### Parameters\n\nreserved  \nA reserved flag; not currently used.\n\n#### Return Value\n\n1 if the MyConstruct tables will be flushed when the service session is returned to the pool; otherwise, 0.\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the XDSServices class.\n\n    public void new()\n\n### Method setXDSContext\n\n    public void setXDSContext(int reserved, str contextstring)\n\n#### Parameters\n\nreserved  \n\n<!-- -->\n\ncontextstring  \n\n### Method setXDSBinding\n\n    public void setXDSBinding(str name, str value)\n\n#### Parameters\n\nname  \n\n<!-- -->\n\nvalue  \n\n### Method setXDSState\n\n    public void setXDSState(int finalState)\n\n#### Parameters\n\nfinalState  \n\n### Method setXDSToFlushPerServiceSession\n\nSets the setting that determines whether the MyConstruct tables will be flushed when the service session is returned to the pool.\n\n    public void setXDSToFlushPerServiceSession(int reserved, int newstate)\n\n#### Parameters\n\nreserved  \nA value that indicates whether to flush the MyConstruct tables when the service session is returned to the pool. Pass 1 to flush the tables and 0 not to flush them.\n\n<!-- -->\n\nnewstate  \nA value that indicates whether to flush the MyConstruct tables when the service session is returned to the pool. Pass 1 to flush the tables and 0 not to flush them.\n\n### Method setXDSTrace\n\n    public void setXDSTrace(int flag, str value)\n\n#### Parameters\n\nflag  \n\n<!-- -->\n\nvalue  \n\n## Class xDynamicVarSet\n    class xDynamicVarSet extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method            | Description |\n|-------------------|-------------|\n| public void new() |             |\n\n### Method new\n\n    public void new()\n\n## Class xExportToExcelController\n    class xExportToExcelController extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                             | Description |\n|------------------------------------------------------------------------------------------------------------------------------------|-------------|\n| public boolean export()                                                                                                            |             |\n| public boolean exportGrid(FormGridControl gridControl, boolean onlyMarkedRows)                                                     |             |\n| public boolean performStaticExport(xFormRun formRun, FormGridControl gridControl, System.IO.Stream stream, boolean onlyMarkedRows) |             |\n| public void new()                                                                                                                  |             |\n\n### Method export\n\n    public boolean export()\n\n#### Return Value\n\n### Method exportGrid\n\n    public boolean exportGrid(FormGridControl gridControl, boolean onlyMarkedRows)\n\n#### Parameters\n\ngridControl  \n\n<!-- -->\n\nonlyMarkedRows  \n\n#### Return Value\n\n### Method performStaticExport\n\n    public boolean performStaticExport(xFormRun formRun, FormGridControl gridControl, System.IO.Stream stream, boolean onlyMarkedRows)\n\n#### Parameters\n\nformRun  \n\n<!-- -->\n\ngridControl  \n\n<!-- -->\n\nstream  \n\n<!-- -->\n\nonlyMarkedRows  \n\n#### Return Value\n\n### Method new\n\n    public void new()\n\n## Class xFormRun\n    class xFormRun extends ObjectRun\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                                                                                                                                                                                                         | Description |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------|\n| public boolean allowPrimaryKeyPreview(\\[boolean display\\])                                                                                                                                                                                                                                                                                                     |             |\n| public boolean canClose()                                                                                                                                                                                                                                                                                                                                      |             |\n| public boolean canSubmitToWorkflow()                                                                                                                                                                                                                                                                                                                           |             |\n| public boolean checkViewOption(int viewOption)                                                                                                                                                                                                                                                                                                                 |             |\n| public boolean closed()                                                                                                                                                                                                                                                                                                                                        |             |\n| public boolean closedCancel()                                                                                                                                                                                                                                                                                                                                  |             |\n| public boolean closedOk()                                                                                                                                                                                                                                                                                                                                      |             |\n| public boolean contains(FormControl control)                                                                                                                                                                                                                                                                                                                   |             |\n| public FormControl control(int controlId)                                                                                                                                                                                                                                                                                                                      |             |\n| public FormControl controlCallingMethod()                                                                                                                                                                                                                                                                                                                      |             |\n| public int controlId(str controlName)                                                                                                                                                                                                                                                                                                                          |             |\n| public boolean controlMethodOverload(\\[boolean value\\])                                                                                                                                                                                                                                                                                                        |             |\n| public Object controlMethodOverloadObject(\\[Object value\\])                                                                                                                                                                                                                                                                                                    |             |\n| public boolean copy()                                                                                                                                                                                                                                                                                                                                          |             |\n| public boolean cut()                                                                                                                                                                                                                                                                                                                                           |             |\n| public FormObjectSet dataSource(\\[AnyType objectSet\\])                                                                                                                                                                                                                                                                                                         |             |\n| public int dataSourceCount()                                                                                                                                                                                                                                                                                                                                   |             |\n| public FormObjectSet defaultDataSource(\\[FormObjectSet value\\])                                                                                                                                                                                                                                                                                                |             |\n| public boolean defaultInitialQueryValuesOnCreate(\\[boolean value\\])                                                                                                                                                                                                                                                                                            |             |\n| public FormDesign design(\\[int reserved\\])                                                                                                                                                                                                                                                                                                                     |             |\n| public Common docCursor()                                                                                                                                                                                                                                                                                                                                      |             |\n| public boolean enableCountryRegion(\\[boolean flag\\])                                                                                                                                                                                                                                                                                                           |             |\n| public Form form()                                                                                                                                                                                                                                                                                                                                             |             |\n| public Common getActiveWorkflowConfiguration()                                                                                                                                                                                                                                                                                                                 |             |\n| public Common getActiveWorkflowTrackingStatus()                                                                                                                                                                                                                                                                                                                |             |\n| public Common getActiveWorkflowWorkItem()                                                                                                                                                                                                                                                                                                                      |             |\n| public container getAutoCompleteString(int startIdx, \\[FormControl control\\], \\[str searchString\\])                                                                                                                                                                                                                                                            |             |\n| public str getFormHelpTopic()                                                                                                                                                                                                                                                                                                                                  |             |\n| public FormControl getNextField(FormControl control, \\[int flags\\])                                                                                                                                                                                                                                                                                            |             |\n| public FormControl getPrevField(FormControl control, \\[int flags\\])                                                                                                                                                                                                                                                                                            |             |\n| public boolean hasExecutedInit()                                                                                                                                                                                                                                                                                                                               |             |\n| public int hWnd()                                                                                                                                                                                                                                                                                                                                              |             |\n| public int installMessageProc(int message, int handle, str method)                                                                                                                                                                                                                                                                                             |             |\n| public boolean inViewMode()                                                                                                                                                                                                                                                                                                                                    |             |\n| public boolean isDataInteractionSupported()                                                                                                                                                                                                                                                                                                                    |             |\n| public boolean isPreloadedInstance()                                                                                                                                                                                                                                                                                                                           |             |\n| public boolean isFormPart()                                                                                                                                                                                                                                                                                                                                    |             |\n| public boolean isFactBox()                                                                                                                                                                                                                                                                                                                                     |             |\n| public boolean isLookupForm()                                                                                                                                                                                                                                                                                                                                  |             |\n| public boolean isPartRemote()                                                                                                                                                                                                                                                                                                                                  |             |\n| public boolean isPartLocal()                                                                                                                                                                                                                                                                                                                                   |             |\n| public boolean isWorkflowEnabled()                                                                                                                                                                                                                                                                                                                             |             |\n| public Common loadWorkflowConfiguration()                                                                                                                                                                                                                                                                                                                      |             |\n| public boolean lockWindowUpdate(boolean lock)                                                                                                                                                                                                                                                                                                                  |             |\n| public str name()                                                                                                                                                                                                                                                                                                                                              |             |\n| public FormObjectSet objectSet(\\[AnyType objectSet\\])                                                                                                                                                                                                                                                                                                          |             |\n| public boolean resetAsyncOperationsPendingState()                                                                                                                                                                                                                                                                                                              |             |\n| public PageInteraction pageInteraction()                                                                                                                                                                                                                                                                                                                       |             |\n| public boolean paste()                                                                                                                                                                                                                                                                                                                                         |             |\n| public str recordingScopeId()                                                                                                                                                                                                                                                                                                                                  |             |\n| public boolean removeMessageProc(int message, int handle)                                                                                                                                                                                                                                                                                                      |             |\n| public List rootFormDataSources()                                                                                                                                                                                                                                                                                                                              |             |\n| public boolean selectControl(FormControl control)                                                                                                                                                                                                                                                                                                              |             |\n| public FormControl selectedControl()                                                                                                                                                                                                                                                                                                                           |             |\n| public Common selectRecordModeSelectedRecord(\\[Common selectedRecord\\])                                                                                                                                                                                                                                                                                        |             |\n| public FormControl selectTarget(\\[FormControl target\\])                                                                                                                                                                                                                                                                                                        |             |\n| public Array tabOrder(\\[Array newValue\\])                                                                                                                                                                                                                                                                                                                      |             |\n| public int task(int taskId)                                                                                                                                                                                                                                                                                                                                    |             |\n| public str toString()                                                                                                                                                                                                                                                                                                                                          |             |\n| public FormObjectSet workflowDataSource()                                                                                                                                                                                                                                                                                                                      |             |\n| public str workflowType()                                                                                                                                                                                                                                                                                                                                      |             |\n| public System.Threading.Tasks.Task runAsync(int runAsClassId, str runAsStaticMethodName, container parms, \\[System.Threading.CancellationToken cancellationToken\\], \\[str callbackFormMethodName\\], \\[container asyncState\\], \\[str userId\\], \\[str company\\], \\[str language\\], \\[str partitionKey\\], \\[System.Threading.Tasks.TaskCreationOptions options\\]) |             |\n| public System.Threading.Tasks.Task setTimeoutEx(\\[str formMethodName\\], \\[container parms\\], \\[int delay\\], \\[System.Threading.CancellationToken cancellationToken\\])                                                                                                                                                                                          |             |\n| public void setParentHandle(int hwnd)                                                                                                                                                                                                                                                                                                                          |             |\n| public void setFormHelpTopic(str formHelpTopic)                                                                                                                                                                                                                                                                                                                |             |\n| public void setFactBoxEditable()                                                                                                                                                                                                                                                                                                                               |             |\n| public void setAutoCompleteString(str string, AnyType control)                                                                                                                                                                                                                                                                                                 |             |\n| public void RaiseOnClosing(\\[FormEventArgs e\\])                                                                                                                                                                                                                                                                                                                |             |\n| public void inlineLoadingKey(FormControl parentControl)                                                                                                                                                                                                                                                                                                        |             |\n| public void closeSelect(str selectString)                                                                                                                                                                                                                                                                                                                      |             |\n| public void RaiseOnActivated(\\[FormEventArgs e\\])                                                                                                                                                                                                                                                                                                              |             |\n| public void prevField(\\[int flags\\])                                                                                                                                                                                                                                                                                                                           |             |\n| public void send()                                                                                                                                                                                                                                                                                                                                             |             |\n| public void RaiseOnInitializing(\\[FormEventArgs e\\])                                                                                                                                                                                                                                                                                                           |             |\n| public void updateWorkflowControls()                                                                                                                                                                                                                                                                                                                           |             |\n| public void closeCancel()                                                                                                                                                                                                                                                                                                                                      |             |\n| public void lastField(\\[int flags\\])                                                                                                                                                                                                                                                                                                                           |             |\n| public void wait(\\[boolean modal\\])                                                                                                                                                                                                                                                                                                                            |             |\n| public void unLock(\\[boolean arrangeNow\\])                                                                                                                                                                                                                                                                                                                     |             |\n| private void OnInitialized(\\[xFormRun sender\\], \\[FormEventArgs e\\])                                                                                                                                                                                                                                                                                           |             |\n| public void detach()                                                                                                                                                                                                                                                                                                                                           |             |\n| public void resetStatusBarBackgroundColor()                                                                                                                                                                                                                                                                                                                    |             |\n| private void OnClosing(\\[xFormRun sender\\], \\[FormEventArgs e\\])                                                                                                                                                                                                                                                                                               |             |\n| public void addDisplayMethod(str name, int displayKind, int displayType, int displayXType, int displayRecord, \\[str dataSourceName\\], \\[boolean isTableDisplayMethod\\])                                                                                                                                                                                        |             |\n| public void print()                                                                                                                                                                                                                                                                                                                                            |             |\n| public void activate(boolean active)                                                                                                                                                                                                                                                                                                                           |             |\n| public void resize(int width, int height)                                                                                                                                                                                                                                                                                                                      |             |\n| public void reload(\\[xArgs args\\])                                                                                                                                                                                                                                                                                                                             |             |\n| public void finalize()                                                                                                                                                                                                                                                                                                                                         |             |\n| public void RaiseOnInitialized(\\[FormEventArgs e\\])                                                                                                                                                                                                                                                                                                            |             |\n| public void resetSize()                                                                                                                                                                                                                                                                                                                                        |             |\n| public void clientId(str clientId)                                                                                                                                                                                                                                                                                                                             |             |\n| public void createRecord(str formDataSourceName, \\[boolean append\\])                                                                                                                                                                                                                                                                                           |             |\n| public void firstField(\\[int flags\\])                                                                                                                                                                                                                                                                                                                          |             |\n| public void savePersonalization(str controlName, str propertyKey, str propertyValue)                                                                                                                                                                                                                                                                           |             |\n| public void expandFactBoxPaneAtStart()                                                                                                                                                                                                                                                                                                                         |             |\n| public void redraw()                                                                                                                                                                                                                                                                                                                                           |             |\n| public void arrange()                                                                                                                                                                                                                                                                                                                                          |             |\n| public void blockPersonalization(boolean blockPersonalization)                                                                                                                                                                                                                                                                                                 |             |\n| public void nextField(\\[int flags\\])                                                                                                                                                                                                                                                                                                                           |             |\n| public void nextGroup()                                                                                                                                                                                                                                                                                                                                        |             |\n| public void prevGroup()                                                                                                                                                                                                                                                                                                                                        |             |\n| public void setFormPartStyle(boolean isFactBox)                                                                                                                                                                                                                                                                                                                |             |\n| public void run()                                                                                                                                                                                                                                                                                                                                              |             |\n| public void setActive()                                                                                                                                                                                                                                                                                                                                        |             |\n| public void closeSelectRecord(Common selectedRecord)                                                                                                                                                                                                                                                                                                           |             |\n| public void registerFormSpecializedCustomControl(str customControlName)                                                                                                                                                                                                                                                                                        |             |\n| public void setApply(Object object, \\[Object parm\\])                                                                                                                                                                                                                                                                                                           |             |\n| public void new(xArgs args)                                                                                                                                                                                                                                                                                                                                    |             |\n| public void RegisterXppILImplementation(str className)                                                                                                                                                                                                                                                                                                         |             |\n| public void sysColorChanged()                                                                                                                                                                                                                                                                                                                                  |             |\n| public void selectRecordMode(\\[FormControl control\\])                                                                                                                                                                                                                                                                                                          |             |\n| private void OnPostRun(\\[xFormRun sender\\], \\[FormEventArgs e\\])                                                                                                                                                                                                                                                                                               |             |\n| public void skipSaveUserSetting(boolean skip)                                                                                                                                                                                                                                                                                                                  |             |\n| public void selectMode(\\[FormControl control\\])                                                                                                                                                                                                                                                                                                                |             |\n| public void printPreview()                                                                                                                                                                                                                                                                                                                                     |             |\n| private void OnActivated(\\[xFormRun sender\\], \\[FormEventArgs e\\])                                                                                                                                                                                                                                                                                             |             |\n| public void collapseFactBoxPaneAtStart()                                                                                                                                                                                                                                                                                                                       |             |\n| public void lock()                                                                                                                                                                                                                                                                                                                                             |             |\n| public void init()                                                                                                                                                                                                                                                                                                                                             |             |\n| public void formOnTop()                                                                                                                                                                                                                                                                                                                                        |             |\n| public void close()                                                                                                                                                                                                                                                                                                                                            |             |\n| public void delAutoCompleteString(\\[AnyType control\\])                                                                                                                                                                                                                                                                                                         |             |\n| public void closeOk()                                                                                                                                                                                                                                                                                                                                          |             |\n| public void modeledQueryName(str queryName)                                                                                                                                                                                                                                                                                                                    |             |\n| public void initWorkflowControls()                                                                                                                                                                                                                                                                                                                             |             |\n| public void setOrder(FormControl control, FormControl control1, \\[boolean before\\])                                                                                                                                                                                                                                                                            |             |\n| public void allowCrossFormLinks(boolean allowCrossFormLinks)                                                                                                                                                                                                                                                                                                   |             |\n| public void RaiseOnPostRun(\\[FormEventArgs e\\])                                                                                                                                                                                                                                                                                                                |             |\n| public void setStatusBarBackgroundColor(int a, int r, int g, int b)                                                                                                                                                                                                                                                                                            |             |\n| public void loadPersonalization()                                                                                                                                                                                                                                                                                                                              |             |\n| public void doApply()                                                                                                                                                                                                                                                                                                                                          |             |\n| private void OnInitializing(\\[xFormRun sender\\], \\[FormEventArgs e\\])                                                                                                                                                                                                                                                                                          |             |\n| public void flushCountryRegionCodeCache()                                                                                                                                                                                                                                                                                                                      |             |\n| public void localRefresh()                                                                                                                                                                                                                                                                                                                                     |             |\n\n### Method allowPrimaryKeyPreview\n\n    public boolean allowPrimaryKeyPreview([boolean display])\n\n#### Parameters\n\ndisplay  \n\n#### Return Value\n\n### Method canClose\n\n    public boolean canClose()\n\n#### Return Value\n\n### Method canSubmitToWorkflow\n\n    public boolean canSubmitToWorkflow()\n\n#### Return Value\n\n### Method checkViewOption\n\n    public boolean checkViewOption(int viewOption)\n\n#### Parameters\n\nviewOption  \n\n#### Return Value\n\n### Method closed\n\n    public boolean closed()\n\n#### Return Value\n\n### Method closedCancel\n\n    public boolean closedCancel()\n\n#### Return Value\n\n### Method closedOk\n\n    public boolean closedOk()\n\n#### Return Value\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method control\n\n    public FormControl control(int controlId)\n\n#### Parameters\n\ncontrolId  \n\n#### Return Value\n\n### Method controlCallingMethod\n\n    public FormControl controlCallingMethod()\n\n#### Return Value\n\n### Method controlId\n\n    public int controlId(str controlName)\n\n#### Parameters\n\ncontrolName  \n\n#### Return Value\n\n### Method controlMethodOverload\n\n    public boolean controlMethodOverload([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method controlMethodOverloadObject\n\n    public Object controlMethodOverloadObject([Object value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method copy\n\n    public boolean copy()\n\n#### Return Value\n\n### Method cut\n\n    public boolean cut()\n\n#### Return Value\n\n### Method dataSource\n\n    public FormObjectSet dataSource([AnyType objectSet])\n\n#### Parameters\n\nobjectSet  \n\n#### Return Value\n\n### Method dataSourceCount\n\n    public int dataSourceCount()\n\n#### Return Value\n\n### Method defaultDataSource\n\n    public FormObjectSet defaultDataSource([FormObjectSet value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method defaultInitialQueryValuesOnCreate\n\n    public boolean defaultInitialQueryValuesOnCreate([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method design\n\n    public FormDesign design([int reserved])\n\n#### Parameters\n\nreserved  \n\n#### Return Value\n\n### Method docCursor\n\n    public Common docCursor()\n\n#### Return Value\n\n### Method enableCountryRegion\n\n    public boolean enableCountryRegion([boolean flag])\n\n#### Parameters\n\nflag  \n\n#### Return Value\n\n### Method form\n\n    public Form form()\n\n#### Return Value\n\n### Method getActiveWorkflowConfiguration\n\n    public Common getActiveWorkflowConfiguration()\n\n#### Return Value\n\n### Method getActiveWorkflowTrackingStatus\n\n    public Common getActiveWorkflowTrackingStatus()\n\n#### Return Value\n\n### Method getActiveWorkflowWorkItem\n\n    public Common getActiveWorkflowWorkItem()\n\n#### Return Value\n\n### Method getAutoCompleteString\n\n    public container getAutoCompleteString(int startIdx, [FormControl control], [str searchString])\n\n#### Parameters\n\nstartIdx  \n\n<!-- -->\n\ncontrol  \n\n<!-- -->\n\nsearchString  \n\n#### Return Value\n\n### Method getFormHelpTopic\n\n    public str getFormHelpTopic()\n\n#### Return Value\n\n### Method getNextField\n\n    public FormControl getNextField(FormControl control, [int flags])\n\n#### Parameters\n\ncontrol  \n\n<!-- -->\n\nflags  \n\n#### Return Value\n\n### Method getPrevField\n\n    public FormControl getPrevField(FormControl control, [int flags])\n\n#### Parameters\n\ncontrol  \n\n<!-- -->\n\nflags  \n\n#### Return Value\n\n### Method hasExecutedInit\n\n    public boolean hasExecutedInit()\n\n#### Return Value\n\n### Method hWnd\n\n    public int hWnd()\n\n#### Return Value\n\n### Method installMessageProc\n\n    public int installMessageProc(int message, int handle, str method)\n\n#### Parameters\n\nmessage  \n\n<!-- -->\n\nhandle  \n\n<!-- -->\n\nmethod  \n\n#### Return Value\n\n### Method inViewMode\n\n    public boolean inViewMode()\n\n#### Return Value\n\n### Method isDataInteractionSupported\n\n    public boolean isDataInteractionSupported()\n\n#### Return Value\n\n### Method isPreloadedInstance\n\n    public boolean isPreloadedInstance()\n\n#### Return Value\n\n### Method isFormPart\n\n    public boolean isFormPart()\n\n#### Return Value\n\n### Method isFactBox\n\n    public boolean isFactBox()\n\n#### Return Value\n\n### Method isLookupForm\n\n    public boolean isLookupForm()\n\n#### Return Value\n\n### Method isPartRemote\n\n    public boolean isPartRemote()\n\n#### Return Value\n\n### Method isPartLocal\n\n    public boolean isPartLocal()\n\n#### Return Value\n\n### Method isWorkflowEnabled\n\n    public boolean isWorkflowEnabled()\n\n#### Return Value\n\n### Method loadWorkflowConfiguration\n\n    public Common loadWorkflowConfiguration()\n\n#### Return Value\n\n### Method lockWindowUpdate\n\n    public boolean lockWindowUpdate(boolean lock)\n\n#### Parameters\n\nlock  \n\n#### Return Value\n\n### Method name\n\n    public str name()\n\n#### Return Value\n\n### Method objectSet\n\n    public FormObjectSet objectSet([AnyType objectSet])\n\n#### Parameters\n\nobjectSet  \n\n#### Return Value\n\n### Method resetAsyncOperationsPendingState\n\n    public boolean resetAsyncOperationsPendingState()\n\n#### Return Value\n\n### Method pageInteraction\n\n    public PageInteraction pageInteraction()\n\n#### Return Value\n\n### Method paste\n\n    public boolean paste()\n\n#### Return Value\n\n### Method recordingScopeId\n\n    public str recordingScopeId()\n\n#### Return Value\n\n### Method removeMessageProc\n\n    public boolean removeMessageProc(int message, int handle)\n\n#### Parameters\n\nmessage  \n\n<!-- -->\n\nhandle  \n\n#### Return Value\n\n### Method rootFormDataSources\n\n    public List rootFormDataSources()\n\n#### Return Value\n\n### Method selectControl\n\n    public boolean selectControl(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method selectedControl\n\n    public FormControl selectedControl()\n\n#### Return Value\n\n### Method selectRecordModeSelectedRecord\n\n    public Common selectRecordModeSelectedRecord([Common selectedRecord])\n\n#### Parameters\n\nselectedRecord  \n\n#### Return Value\n\n### Method selectTarget\n\n    public FormControl selectTarget([FormControl target])\n\n#### Parameters\n\ntarget  \n\n#### Return Value\n\n### Method tabOrder\n\n    public Array tabOrder([Array newValue])\n\n#### Parameters\n\nnewValue  \n\n#### Return Value\n\n### Method task\n\n    public int task(int taskId)\n\n#### Parameters\n\ntaskId  \n\n#### Return Value\n\n### Method toString\n\n    public str toString()\n\n#### Return Value\n\n### Method workflowDataSource\n\n    public FormObjectSet workflowDataSource()\n\n#### Return Value\n\n### Method workflowType\n\n    public str workflowType()\n\n#### Return Value\n\n### Method runAsync\n\n    public System.Threading.Tasks.Task runAsync(int runAsClassId, str runAsStaticMethodName, container parms, [System.Threading.CancellationToken cancellationToken], [str callbackFormMethodName], [container asyncState], [str userId], [str company], [str language], [str partitionKey], [System.Threading.Tasks.TaskCreationOptions options])\n\n#### Parameters\n\nrunAsClassId  \n\n<!-- -->\n\nrunAsStaticMethodName  \n\n<!-- -->\n\nparms  \n\n<!-- -->\n\ncancellationToken  \n\n<!-- -->\n\ncallbackFormMethodName  \n\n<!-- -->\n\nasyncState  \n\n<!-- -->\n\nuserId  \n\n<!-- -->\n\ncompany  \n\n<!-- -->\n\nlanguage  \n\n<!-- -->\n\npartitionKey  \n\n<!-- -->\n\noptions  \n\n#### Return Value\n\n### Method setTimeoutEx\n\n    public System.Threading.Tasks.Task setTimeoutEx([str formMethodName], [container parms], [int delay], [System.Threading.CancellationToken cancellationToken])\n\n#### Parameters\n\nformMethodName  \n\n<!-- -->\n\nparms  \n\n<!-- -->\n\ndelay  \n\n<!-- -->\n\ncancellationToken  \n\n#### Return Value\n\n### Method setParentHandle\n\n    public void setParentHandle(int hwnd)\n\n#### Parameters\n\nhwnd  \n\n### Method setFormHelpTopic\n\n    public void setFormHelpTopic(str formHelpTopic)\n\n#### Parameters\n\nformHelpTopic  \n\n### Method setFactBoxEditable\n\n    public void setFactBoxEditable()\n\n### Method setAutoCompleteString\n\n    public void setAutoCompleteString(str string, AnyType control)\n\n#### Parameters\n\nstring  \n\n<!-- -->\n\ncontrol  \n\n### Method RaiseOnClosing\n\n    public void RaiseOnClosing([FormEventArgs e])\n\n#### Parameters\n\ne  \n\n### Method inlineLoadingKey\n\n    public void inlineLoadingKey(FormControl parentControl)\n\n#### Parameters\n\nparentControl  \n\n### Method closeSelect\n\n    public void closeSelect(str selectString)\n\n#### Parameters\n\nselectString  \n\n### Method RaiseOnActivated\n\n    public void RaiseOnActivated([FormEventArgs e])\n\n#### Parameters\n\ne  \n\n### Method prevField\n\n    public void prevField([int flags])\n\n#### Parameters\n\nflags  \n\n### Method send\n\n    public void send()\n\n### Method RaiseOnInitializing\n\n    public void RaiseOnInitializing([FormEventArgs e])\n\n#### Parameters\n\ne  \n\n### Method updateWorkflowControls\n\n    public void updateWorkflowControls()\n\n### Method closeCancel\n\n    public void closeCancel()\n\n### Method lastField\n\n    public void lastField([int flags])\n\n#### Parameters\n\nflags  \n\n### Method wait\n\n    public void wait([boolean modal])\n\n#### Parameters\n\nmodal  \n\n### Method unLock\n\n    public void unLock([boolean arrangeNow])\n\n#### Parameters\n\narrangeNow  \n\n### Method OnInitialized\n\n    private void OnInitialized([xFormRun sender], [FormEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method detach\n\n    public void detach()\n\n### Method resetStatusBarBackgroundColor\n\n    public void resetStatusBarBackgroundColor()\n\n### Method OnClosing\n\n    private void OnClosing([xFormRun sender], [FormEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method addDisplayMethod\n\n    public void addDisplayMethod(str name, int displayKind, int displayType, int displayXType, int displayRecord, [str dataSourceName], [boolean isTableDisplayMethod])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\ndisplayKind  \n\n<!-- -->\n\ndisplayType  \n\n<!-- -->\n\ndisplayXType  \n\n<!-- -->\n\ndisplayRecord  \n\n<!-- -->\n\ndataSourceName  \n\n<!-- -->\n\nisTableDisplayMethod  \n\n### Method print\n\n    public void print()\n\n### Method activate\n\n    public void activate(boolean active)\n\n#### Parameters\n\nactive  \n\n### Method resize\n\n    public void resize(int width, int height)\n\n#### Parameters\n\nwidth  \n\n<!-- -->\n\nheight  \n\n### Method reload\n\n    public void reload([xArgs args])\n\n#### Parameters\n\nargs  \n\n### Method finalize\n\n    public void finalize()\n\n### Method RaiseOnInitialized\n\n    public void RaiseOnInitialized([FormEventArgs e])\n\n#### Parameters\n\ne  \n\n### Method resetSize\n\n    public void resetSize()\n\n### Method clientId\n\n    public void clientId(str clientId)\n\n#### Parameters\n\nclientId  \n\n### Method createRecord\n\n    public void createRecord(str formDataSourceName, [boolean append])\n\n#### Parameters\n\nformDataSourceName  \n\n<!-- -->\n\nappend  \n\n### Method firstField\n\n    public void firstField([int flags])\n\n#### Parameters\n\nflags  \n\n### Method savePersonalization\n\n    public void savePersonalization(str controlName, str propertyKey, str propertyValue)\n\n#### Parameters\n\ncontrolName  \n\n<!-- -->\n\npropertyKey  \n\n<!-- -->\n\npropertyValue  \n\n### Method expandFactBoxPaneAtStart\n\n    public void expandFactBoxPaneAtStart()\n\n### Method redraw\n\n    public void redraw()\n\n### Method arrange\n\n    public void arrange()\n\n### Method blockPersonalization\n\n    public void blockPersonalization(boolean blockPersonalization)\n\n#### Parameters\n\nblockPersonalization  \n\n### Method nextField\n\n    public void nextField([int flags])\n\n#### Parameters\n\nflags  \n\n### Method nextGroup\n\n    public void nextGroup()\n\n### Method prevGroup\n\n    public void prevGroup()\n\n### Method setFormPartStyle\n\n    public void setFormPartStyle(boolean isFactBox)\n\n#### Parameters\n\nisFactBox  \n\n### Method run\n\n    public void run()\n\n### Method setActive\n\n    public void setActive()\n\n### Method closeSelectRecord\n\n    public void closeSelectRecord(Common selectedRecord)\n\n#### Parameters\n\nselectedRecord  \n\n### Method registerFormSpecializedCustomControl\n\n    public void registerFormSpecializedCustomControl(str customControlName)\n\n#### Parameters\n\ncustomControlName  \n\n### Method setApply\n\n    public void setApply(Object object, [Object parm])\n\n#### Parameters\n\nobject  \n\n<!-- -->\n\nparm  \n\n### Method new\n\n    public void new(xArgs args)\n\n#### Parameters\n\nargs  \n\n### Method RegisterXppILImplementation\n\n    public void RegisterXppILImplementation(str className)\n\n#### Parameters\n\nclassName  \n\n### Method sysColorChanged\n\n    public void sysColorChanged()\n\n### Method selectRecordMode\n\n    public void selectRecordMode([FormControl control])\n\n#### Parameters\n\ncontrol  \n\n### Method OnPostRun\n\n    private void OnPostRun([xFormRun sender], [FormEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method skipSaveUserSetting\n\n    public void skipSaveUserSetting(boolean skip)\n\n#### Parameters\n\nskip  \n\n### Method selectMode\n\n    public void selectMode([FormControl control])\n\n#### Parameters\n\ncontrol  \n\n### Method printPreview\n\n    public void printPreview()\n\n### Method OnActivated\n\n    private void OnActivated([xFormRun sender], [FormEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method collapseFactBoxPaneAtStart\n\n    public void collapseFactBoxPaneAtStart()\n\n### Method lock\n\n    public void lock()\n\n### Method init\n\n    public void init()\n\n### Method formOnTop\n\n    public void formOnTop()\n\n### Method close\n\n    public void close()\n\n### Method delAutoCompleteString\n\n    public void delAutoCompleteString([AnyType control])\n\n#### Parameters\n\ncontrol  \n\n### Method closeOk\n\n    public void closeOk()\n\n### Method modeledQueryName\n\n    public void modeledQueryName(str queryName)\n\n#### Parameters\n\nqueryName  \n\n### Method initWorkflowControls\n\n    public void initWorkflowControls()\n\n### Method setOrder\n\n    public void setOrder(FormControl control, FormControl control1, [boolean before])\n\n#### Parameters\n\ncontrol  \n\n<!-- -->\n\ncontrol1  \n\n<!-- -->\n\nbefore  \n\n### Method allowCrossFormLinks\n\n    public void allowCrossFormLinks(boolean allowCrossFormLinks)\n\n#### Parameters\n\nallowCrossFormLinks  \n\n### Method RaiseOnPostRun\n\n    public void RaiseOnPostRun([FormEventArgs e])\n\n#### Parameters\n\ne  \n\n### Method setStatusBarBackgroundColor\n\n    public void setStatusBarBackgroundColor(int a, int r, int g, int b)\n\n#### Parameters\n\na  \n\n<!-- -->\n\nr  \n\n<!-- -->\n\ng  \n\n<!-- -->\n\nb  \n\n### Method loadPersonalization\n\n    public void loadPersonalization()\n\n### Method doApply\n\n    public void doApply()\n\n### Method OnInitializing\n\n    private void OnInitializing([xFormRun sender], [FormEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method flushCountryRegionCodeCache\n\n    public void flushCountryRegionCodeCache()\n\n### Method localRefresh\n\n    public void localRefresh()\n\n## Class xGlobal\n    class xGlobal extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                                                                                                                                                                                                                                             | Description                                        |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------|\n| ::public static ClientType clientKind()                                                                                                                                                                                                                                                                                                                                                            |                                                    |\n| ::public static SelectableDataArea company(TableId tableid, \\[SelectableDataArea company\\])                                                                                                                                                                                                                                                                                                        |                                                    |\n| ::public static str computerName()                                                                                                                                                                                                                                                                                                                                                                 |                                                    |\n| ::public static boolean hasClient()                                                                                                                                                                                                                                                                                                                                                                |                                                    |\n| ::public static int infologLine()                                                                                                                                                                                                                                                                                                                                                                  | Returns the number of lines in the Infolog buffer. |\n| ::public static boolean isAOS()                                                                                                                                                                                                                                                                                                                                                                    |                                                    |\n| ::public static boolean isGuest()                                                                                                                                                                                                                                                                                                                                                                  |                                                    |\n| ::public static boolean isUserLanguageRTL()                                                                                                                                                                                                                                                                                                                                                        |                                                    |\n| ::public static container languageList()                                                                                                                                                                                                                                                                                                                                                           |                                                    |\n| ::public static str machineTzDisplayName()                                                                                                                                                                                                                                                                                                                                                         |                                                    |\n| ::public static boolean isObjectOnServer(AnyType object)                                                                                                                                                                                                                                                                                                                                           |                                                    |\n| ::public static int randomPositiveInt32()                                                                                                                                                                                                                                                                                                                                                          |                                                    |\n| ::public static boolean terminalServer()                                                                                                                                                                                                                                                                                                                                                           |                                                    |\n| ::public static WorkerSessionType workerSessionType()                                                                                                                                                                                                                                                                                                                                              |                                                    |\n| ::public static System.Threading.Tasks.Task runAsync(int runAsClassId, str runAsStaticMethodName, container parms, \\[System.Threading.CancellationToken cancellationToken\\], \\[int callbackClassId\\], \\[str callbackStaticMethodName\\], \\[container asyncState\\], \\[str userId\\], \\[str company\\], \\[str language\\], \\[str partitionKey\\], \\[System.Threading.Tasks.TaskCreationOptions options\\]) |                                                    |\n| ::public static System.Threading.Tasks.Task runAsyncWithObjectCallback(int runAsClassId, str runAsStaticMethodName, container parms, Object callbackObject, str callbackStaticMethodName)                                                                                                                                                                                                          |                                                    |\n| ::public static void forceFormPreload()                                                                                                                                                                                                                                                                                                                                                            | Forces form preloading to occur immediately.       |\n| private void new()                                                                                                                                                                                                                                                                                                                                                                                 | Initializes a new instance of the xGlobal class.   |\n\n### Method clientKind\n\n    public static ClientType clientKind()\n\n#### Return Value\n\n### Method company\n\n    public static SelectableDataArea company(TableId tableid, [SelectableDataArea company])\n\n#### Parameters\n\ntableid  \n\n<!-- -->\n\ncompany  \n\n#### Return Value\n\n### Method computerName\n\n    public static str computerName()\n\n#### Return Value\n\n### Method hasClient\n\n    public static boolean hasClient()\n\n#### Return Value\n\n### Method infologLine\n\nReturns the number of lines in the Infolog buffer.\n\n    public static int infologLine()\n\n#### Return Value\n\n#### Remarks\n\nThis method has similar functionality to the xInfo.line method, but it improves performance and lowers network load when you are executing server-side code. When xInfo.line is run on the server, it makes a call to the client to retrieve the number of lines in the Infolog buffer. The xGlobal::infologLine method retrieves the line count of the server-side Infolog buffer, so that you do not have to call to the client. When the xGlobal::infologLine method is called on the client, it returns the count directly from the Infolog buffer on the client. This method is especially useful when you are writing server-side code that processes exceptions. The number of lines in the Infolog is typically stored before a try/catch block is entered. If an exception occurs, the number of lines that were previously stored is used to determine which messages were logged during the code in the try block. If no exceptions occur, the stored Infolog buffer line count is often unused. By using the xGlobal::infologLine method instead of the xInfo.line method to retrieve the Infolog lines, you avoid a round trip to the client.\n\n### Method isAOS\n\n    public static boolean isAOS()\n\n#### Return Value\n\n### Method isGuest\n\n    public static boolean isGuest()\n\n#### Return Value\n\n### Method isUserLanguageRTL\n\n    public static boolean isUserLanguageRTL()\n\n#### Return Value\n\n### Method languageList\n\n    public static container languageList()\n\n#### Return Value\n\n### Method machineTzDisplayName\n\n    public static str machineTzDisplayName()\n\n#### Return Value\n\n### Method isObjectOnServer\n\n    public static boolean isObjectOnServer(AnyType object)\n\n#### Parameters\n\nobject  \n\n#### Return Value\n\n### Method randomPositiveInt32\n\n    public static int randomPositiveInt32()\n\n#### Return Value\n\n### Method terminalServer\n\n    public static boolean terminalServer()\n\n#### Return Value\n\n### Method workerSessionType\n\n    public static WorkerSessionType workerSessionType()\n\n#### Return Value\n\n### Method runAsync\n\n    public static System.Threading.Tasks.Task runAsync(int runAsClassId, str runAsStaticMethodName, container parms, [System.Threading.CancellationToken cancellationToken], [int callbackClassId], [str callbackStaticMethodName], [container asyncState], [str userId], [str company], [str language], [str partitionKey], [System.Threading.Tasks.TaskCreationOptions options])\n\n#### Parameters\n\nrunAsClassId  \n\n<!-- -->\n\nrunAsStaticMethodName  \n\n<!-- -->\n\nparms  \n\n<!-- -->\n\ncancellationToken  \n\n<!-- -->\n\ncallbackClassId  \n\n<!-- -->\n\ncallbackStaticMethodName  \n\n<!-- -->\n\nasyncState  \n\n<!-- -->\n\nuserId  \n\n<!-- -->\n\ncompany  \n\n<!-- -->\n\nlanguage  \n\n<!-- -->\n\npartitionKey  \n\n<!-- -->\n\noptions  \n\n#### Return Value\n\n### Method runAsyncWithObjectCallback\n\n    public static System.Threading.Tasks.Task runAsyncWithObjectCallback(int runAsClassId, str runAsStaticMethodName, container parms, Object callbackObject, str callbackStaticMethodName)\n\n#### Parameters\n\nrunAsClassId  \n\n<!-- -->\n\nrunAsStaticMethodName  \n\n<!-- -->\n\nparms  \n\n<!-- -->\n\ncallbackObject  \n\n<!-- -->\n\ncallbackStaticMethodName  \n\n#### Return Value\n\n### Method forceFormPreload\n\nForces form preloading to occur immediately.\n\n    public static void forceFormPreload()\n\n#### Remarks\n\nNormally, preloading occurs only when the client has gone idle. In scenarios where long-running X++ execution is occurring, this method can be used to force form preloading.\n\n### Method new\n\nInitializes a new instance of the xGlobal class.\n\n    private void new()\n\n## Class xInfo\n    class xInfo extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                                                       | Description                                                                                                                                                                             |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public int removeMessage(Int64 messageId)                                                                                                                                                                    |                                                                                                                                                                                         |\n| public Int64 insertMessage(MessageSeverity type, str message)                                                                                                                                                |                                                                                                                                                                                         |\n| public Exception add(Exception exceptionType, str string, \\[str helpURL\\], \\[Object obj\\], \\[boolean buildprefix\\])                                                                                          | Adds a string to the Infolog buffer.                                                                                                                                                    |\n| public Exception addException(str string, str stackTrace)                                                                                                                                                    |                                                                                                                                                                                         |\n| public container breakpoint(\\[container breakpoint\\])                                                                                                                                                        | Gets or sets information about breakpoints.                                                                                                                                             |\n| public boolean canShowCreateRuleMenuItem(xFormRun caller)                                                                                                                                                    | Determines whether the menu item for the Create alert rule form should be displayed for a form.                                                                                         |\n| public boolean canShutdown(boolean silent)                                                                                                                                                                   | Tests whether the system can be shut down. Do not use this method. Use the version that is overridden on the Info class instead.                                                        |\n| public boolean canViewAlertInbox()                                                                                                                                                                           | Determines whether the current user has permission to view the View alerts form.                                                                                                        |\n| public xCompilerOutput compilerOutput(\\[Object compilerOut\\])                                                                                                                                                | Gets or sets the compiler output object. The compiler output object is the Compiler output window by default.                                                                           |\n| public container copy(int from, int to)                                                                                                                                                                      | Copies lines from the Infolog buffer.                                                                                                                                                   |\n| public int createDevelopmentWorkspaceWindow()                                                                                                                                                                |                                                                                                                                                                                         |\n| public int createWorkspaceWindow()                                                                                                                                                                           | Opens a new workspace window. For example, this enables you to open different sets of application objects in different windows, or to work with two different sets of company accounts. |\n| public UtilEntryLevel currentAOLayer()                                                                                                                                                                       | Retrieves the current layer you are running in such as SYS, or USR.                                                                                                                     |\n| public container cut(int from, int to)                                                                                                                                                                       | Cuts lines from the Infolog buffer.                                                                                                                                                     |\n| public str documentationLanguage(\\[str languageCode\\])                                                                                                                                                       | Gets or sets the language that is used for the Finance and Operations documentation.                                                                                                     |\n| public container export()                                                                                                                                                                                    |                                                                                                                                                                                         |\n| public TreeNode findNode(str nodePath)                                                                                                                                                                       | Retrieves the specified a tree node.                                                                                                                                                    |\n| public TreeNode getDocNode(UtilFileType helpType, int UtilType, str Name, \\[UtilElementId ParentId\\], \\[int Type\\], \\[UtilEntryLevel UtilLevel\\], \\[boolean ForceLevel\\], \\[int Mode\\], \\[boolean OldUtil\\]) | Retrieves the specified documentation nodes from the AOT.                                                                                                                               |\n| public TreeNode getImportedNode(int id, int utilfiletype, UtilElementType utiltype, str name, int fileposition, int Flag)                                                                                    | Creates an instance of a tree node from an XPO file but does not import it into the AOT. For example, this allows you to compare it with another version of the same tree node.         |\n| public TreeNode getNode(UtilElementType UtilType, str Name, \\[UtilElementId ParentId\\], \\[int Type\\], \\[UtilEntryLevel Utillevel\\], \\[boolean Forcelevel\\], \\[int Mode\\], \\[boolean OldUtil\\])               | Retrieves a tree node that corresponds to a node in the AOT.                                                                                                                            |\n| public int getNodeResid(UtilElementType nodeType)                                                                                                                                                            | Retrieves the resource ID for the icon that is used to display nodes of the specified type.                                                                                             |\n| public Struct getTaskInfo(int taskNumber)                                                                                                                                                                    |                                                                                                                                                                                         |\n| public UserSetup getUserSetup()                                                                                                                                                                              | Retrieves a UserSetup object that is used to set user parameters.                                                                                                                       |\n| public container getWorkspaceList()                                                                                                                                                                          |                                                                                                                                                                                         |\n| public int hWnd(\\[int workspaceNum\\])                                                                                                                                                                        | Retrieves a handle to the Finance and OperationsNavigation Pane window.                                                                                                                  |\n| public boolean import(container infologContainer, \\[boolean clearExistingInfolog\\])                                                                                                                          |                                                                                                                                                                                         |\n| public int importElement(int id, int utilfiletype, UtilElementType utiltype, str name, int fileposition, int Flag)                                                                                           | Specifies the object to be imported.                                                                                                                                                    |\n| public int importString(str source, UtilElementType kind, str name)                                                                                                                                          | Imports an object from a file.                                                                                                                                                          |\n| public int instance()                                                                                                                                                                                        | Retrieves a handle to the current instance of the application.                                                                                                                          |\n| public str isoCurrencyCode(\\[str code\\])                                                                                                                                                                     | Gets or sets the currency code.                                                                                                                                                         |\n| public boolean IsVisible()                                                                                                                                                                                   | Determines whether the client window is not minimized.                                                                                                                                  |\n| public str language(\\[str languageCode\\])                                                                                                                                                                    | Gets or sets the language for the GUI.                                                                                                                                                  |\n| public Exception level(int line)                                                                                                                                                                             | Retrieves the exception level of a line in the Infolog buffer.                                                                                                                          |\n| public int line()                                                                                                                                                                                            | Retrieves the number of lines in the Infolog buffer.                                                                                                                                    |\n| public MessageWin messageWin()                                                                                                                                                                               | Enables you to send output from the Infolog to the Message window.                                                                                                                      |\n| public Real nationalCurrencyFactor(\\[Real factor\\])                                                                                                                                                          |                                                                                                                                                                                         |\n| public str nationalCurrencyPostfix(\\[str string\\])                                                                                                                                                           |                                                                                                                                                                                         |\n| public str nationalCurrencyPrefix(\\[str string\\])                                                                                                                                                            |                                                                                                                                                                                         |\n| public xNavPane navPane()                                                                                                                                                                                    | Retrieves an xNavPane object, the primary navigation control class.                                                                                                                     |\n| public int num(\\[Exception exceptionType\\])                                                                                                                                                                  | Retrieves the number of exceptions of the specified type in the Infolog buffer.                                                                                                         |\n| public int prevInstance()                                                                                                                                                                                    | Retrieves a handle to the previous instance of the application.                                                                                                                         |\n| public int processId()                                                                                                                                                                                       | Retrieves the ID for the Finance and Operations process.                                                                                                                                 |\n| public TreeNode projectRootNode()                                                                                                                                                                            | Returns the X++ Projects node.                                                                                                                                                          |\n| public TreeNode rootNode()                                                                                                                                                                                   | Retrieves the root of the application object tree.                                                                                                                                      |\n| public int startImport(str file, int flag, \\[str labelSubstitutes\\])                                                                                                                                         | Creates an import context.                                                                                                                                                              |\n| public str text(\\[int line\\])                                                                                                                                                                                | Retrieves a line of text from the Infolog.                                                                                                                                              |\n| public TreeNode userNode()                                                                                                                                                                                   |                                                                                                                                                                                         |\n| public AnyType webSession(\\[AnyType value\\])                                                                                                                                                                 |                                                                                                                                                                                         |\n| ::public static container activeXControls()                                                                                                                                                                  | Retrieves a list of the ActiveX controls that are in Finance and Operations.                                                                                                             |\n| ::public static str AOTLogDirectory()                                                                                                                                                                        | Gets the path to the log directory for the current installation.                                                                                                                        |\n| ::public static container automationObjects()                                                                                                                                                                | Retrieves the list of COM objects that are available in Finance and Operations.                                                                                                          |\n| ::public static str buildNo()                                                                                                                                                                                | Retrieves the kernel build number of the current Finance and Operations executable.                                                                                                      |\n| ::public static str compilationDate()                                                                                                                                                                        | Retrieves the date on which the current version of Finance and Operations was last compiled.                                                                                             |\n| ::public static str compilationTime()                                                                                                                                                                        | Retrieves the time at which the current version of Finance and Operations was last compiled.                                                                                             |\n| ::public static str componentName()                                                                                                                                                                          | Retrieves the path to the component.                                                                                                                                                    |\n| ::public static str configuration()                                                                                                                                                                          | Retrieves the current client configuration.                                                                                                                                             |\n| ::public static int currentWorkspaceNum()                                                                                                                                                                    | Retrieves the application window ID of the current workspace.                                                                                                                           |\n| ::public static str directory(DirectoryType type)                                                                                                                                                            | Retrieves the path to the directory where the Finance and Operations client has been installed.                                                                                          |\n| ::public static Date expireDate()                                                                                                                                                                            | Retrieves the date on which the license for the current installation expires.                                                                                                           |\n| ::public static ApplicationObjectTreeWindow getApplicationObjectTreeWindow()                                                                                                                                 |                                                                                                                                                                                         |\n| ::public static int getCurrentModelId()                                                                                                                                                                      |                                                                                                                                                                                         |\n| ::public static int getNumberOfDecimals(Real number)                                                                                                                                                         | Retrieves the number of decimal places in the specified number.                                                                                                                         |\n| ::public static PropertiesWindow getPropertiesWindow()                                                                                                                                                       |                                                                                                                                                                                         |\n| ::public static int getSystemGeneratedModelId(UtilEntryLevel layer)                                                                                                                                          |                                                                                                                                                                                         |\n| ::public static str licenseName()                                                                                                                                                                            | Retrieves the name of the current Finance and Operations license.                                                                                                                        |\n| ::public static str productName()                                                                                                                                                                            | Retrieves the name of the product.                                                                                                                                                      |\n| ::public static str productRegisteredName()                                                                                                                                                                  |                                                                                                                                                                                         |\n| ::public static str releaseVersion()                                                                                                                                                                         | Retrieves the version number of the current Finance and Operations executable; for example: 3.0, or 4.0.                                                                                 |\n| ::public static str releaseYear()                                                                                                                                                                            |                                                                                                                                                                                         |\n| ::public static str serialNo()                                                                                                                                                                               | Retrieves the serial number of the current Finance and Operations license.                                                                                                               |\n| public void new()                                                                                                                                                                                            | Initializes a new xInfo object.                                                                                                                                                         |\n| public void workspaceWindowDestroyed(int hWnd)                                                                                                                                                               | Executes when a workspace is closed.                                                                                                                                                    |\n| public void writeCustomStatlineItem(str text)                                                                                                                                                                | Writes a line of text to the status bar.                                                                                                                                                |\n| public void reloadRunningMode()                                                                                                                                                                              |                                                                                                                                                                                         |\n| public void setWindowOrder(int window, \\[int afterWindow\\])                                                                                                                                                  | Sets the order in which windows should be displayed.                                                                                                                                    |\n| public void shutDown(boolean force)                                                                                                                                                                          | Shuts down the client.                                                                                                                                                                  |\n| public void xref(str path, xRef x)                                                                                                                                                                           | Executes when the cross-reference system is used.                                                                                                                                       |\n| public void updateCurrentCompany()                                                                                                                                                                           |                                                                                                                                                                                         |\n| public void redrawAllWindows()                                                                                                                                                                               | Redraws all windows.                                                                                                                                                                    |\n| public void formNotify(xFormRun form, FormNotify notification, \\[FormNotifyEventArgs formNotifyEventArgs\\])                                                                                                  | Executes based on a particular type of change to a specific form, allowing custom code to run.                                                                                          |\n| public void mayReloadMenu(boolean value)                                                                                                                                                                     | Prevents the UI from refreshing.                                                                                                                                                        |\n| public void startLengthyOperation()                                                                                                                                                                          | Sets the mouse cursor to idle.                                                                                                                                                          |\n| public void breakpointNotify(BreakpointNotify notification)                                                                                                                                                  | Implements a notification system when a breakpoint is changed.                                                                                                                          |\n| public void initializeInfolog(int window)                                                                                                                                                                    |                                                                                                                                                                                         |\n| public void startup(str startupCmd)                                                                                                                                                                          | Executes when the client starts.                                                                                                                                                        |\n| public void endImport(int id, int elements)                                                                                                                                                                  | Completes an import process.                                                                                                                                                            |\n| public void yield()                                                                                                                                                                                          |                                                                                                                                                                                         |\n| public void viewAlertInbox(\\[int selectedTab\\])                                                                                                                                                              | Launches the View alerts form.                                                                                                                                                          |\n| public void reportSendMailServer(PrintJobSettings settings)                                                                                                                                                  |                                                                                                                                                                                         |\n| public void endLengthyOperation(\\[boolean endAll\\])                                                                                                                                                          | Sets the mouse cursor back to normal after a call to startLengthyOperation.                                                                                                             |\n| public void setNumUnreadAlerts(\\[int n\\])                                                                                                                                                                    | Refreshes the status bar text when the number of unread Alert e-mails changes.                                                                                                          |\n| public void truncate(str prefix)                                                                                                                                                                             | Removes the items with the specified prefix from the Infolog.                                                                                                                           |\n| public void formNoteButton(boolean enable, boolean value)                                                                                                                                                    | Controls the Document handling button on the toolbar.                                                                                                                                   |\n| public void viewCreateRuleDialog(xFormRun caller)                                                                                                                                                            | Launches the Create alert rule form.                                                                                                                                                    |\n| public void view(\\[container container\\])                                                                                                                                                                    |                                                                                                                                                                                         |\n| public void clear(\\[int linesLeft\\])                                                                                                                                                                         | Deletes lines from the Infolog buffer.                                                                                                                                                  |\n| public void workspaceWindowCreated(int hWnd)                                                                                                                                                                 | Executes when a new workspace is created.                                                                                                                                               |\n| ::public static void setCurrentModelId(int currentModelId)                                                                                                                                                   |                                                                                                                                                                                         |\n| public void activateMenubarTask(int command)                                                                                                                                                                 |                                                                                                                                                                                         |\n| public void finalize()                                                                                                                                                                                       |                                                                                                                                                                                         |\n| public void insertXReferences()                                                                                                                                                                              |                                                                                                                                                                                         |\n| public void activateButton(int command)                                                                                                                                                                      |                                                                                                                                                                                         |\n| public void activateWindow(int window)                                                                                                                                                                       | Sets the focus on a form or Window.                                                                                                                                                     |\n| public void reportSendMail(PrintJobSettings settings)                                                                                                                                                        | Generates the settings for sending a report by email.                                                                                                                                   |\n\n### Method removeMessage\n\n    public int removeMessage(Int64 messageId)\n\n#### Parameters\n\nmessageId  \n\n#### Return Value\n\n### Method insertMessage\n\n    public Int64 insertMessage(MessageSeverity type, str message)\n\n#### Parameters\n\ntype  \n\n<!-- -->\n\nmessage  \n\n#### Return Value\n\n### Method add\n\nAdds a string to the Infolog buffer.\n\n    public Exception add(Exception exceptionType, str string, [str helpURL], [Object obj], [boolean buildprefix])\n\n#### Parameters\n\nexceptionType  \nOptional parameter, that enables you to turn off the generation of prefix information that is used to provide context to Infolog messages.\n\n<!-- -->\n\nstring  \nOptional parameter, that enables you to turn off the generation of prefix information that is used to provide context to Infolog messages.\n\n<!-- -->\n\nhelpURL  \nOptional parameter, that enables you to turn off the generation of prefix information that is used to provide context to Infolog messages.\n\n<!-- -->\n\nobj  \nOptional parameter, that enables you to turn off the generation of prefix information that is used to provide context to Infolog messages.\n\n<!-- -->\n\nbuildprefix  \nOptional parameter, that enables you to turn off the generation of prefix information that is used to provide context to Infolog messages.\n\n#### Return Value\n\nAn Exception system enumeration value. For more information, see Exception Handling with try and catch Keywords.\n\n#### Remarks\n\nAn example value for the helpURL parameter is 'KernDoc:\\\\\\\\\\\\\\\\Functions\\\\\\\\substr'. This method should not be used directly. Instead, use the infolog.info, infolog.warning, infolog.error, or infolog.checkFailed method instead. For more information about the exceptionType parameter, see Exception Handling with try and catch Keywords.\n\n### Method addException\n\n    public Exception addException(str string, str stackTrace)\n\n#### Parameters\n\nstring  \n\n<!-- -->\n\nstackTrace  \n\n#### Return Value\n\n### Method breakpoint\n\nGets or sets information about breakpoints.\n\n    public container breakpoint([container breakpoint])\n\n#### Parameters\n\nbreakpoint  \nA container that holds information about the current breakpoints.\n\n#### Return Value\n\nA container holding information about the current breakpoints.\n\n#### Remarks\n\nThe container that holds information about breakpoints is of the format:\n\n-   Item 1: Version number\n-   Items 2 - 4, 5-7, … n - n+2: Information about each breakpoint, consisting of:\n    -   the AOT path\n    -   the line number on which the breakpoint is set\n    -   whether the breakpoint is enabled or disabled\n\nIn the application, this method is used by the Breakpoints form. When the form is opened it calls the getBreakpoints method on the form. This calls the xInfo.breakpoint method, and uses a container with the breakpoint information as a parameter. When a breakpoint is disabled, enabled, or deleted from the form, the setBreakpoints method is called. This updates the information about the breakpoints and returns this as a container using the xInfo.breakpoint method without using the breakpoint parameter. The container is used to update the breakpoint information in the Code Editor window.\n\n### Method canShowCreateRuleMenuItem\n\nDetermines whether the menu item for the Create alert rule form should be displayed for a form.\n\n    public boolean canShowCreateRuleMenuItem(xFormRun caller)\n\n#### Parameters\n\ncaller  \nThe current form: the form from which the Create alert rule menu item can be displayed.\n\n#### Return Value\n\ntrue if the current form supports the creation of alerts; otherwise false.\n\n### Method canShutdown\n\nTests whether the system can be shut down. Do not use this method. Use the version that is overridden on the Info class instead.\n\n    public boolean canShutdown(boolean silent)\n\n#### Parameters\n\nsilent  \nA Boolean that determines whether users are asked if they want to exit the system.\n\n#### Return Value\n\ntrue of the system can be shut down; otherwise false.\n\n### Method canViewAlertInbox\n\nDetermines whether the current user has permission to view the View alerts form.\n\n    public boolean canViewAlertInbox()\n\n#### Return Value\n\ntrue if the user has permission to view the form; otherwise, false.\n\n#### Remarks\n\nCall this method before calling xInfo.viewAlertInbox.\n\n### Method compilerOutput\n\nGets or sets the compiler output object. The compiler output object is the Compiler output window by default.\n\n    public xCompilerOutput compilerOutput([Object compilerOut])\n\n#### Parameters\n\ncompilerOut  \nA compiler output object; optional. Optional parameter.\n\n#### Return Value\n\nAn xCompilerOutput object.\n\n#### Remarks\n\nThe default value of the compilerOut parameter is the Compiler output window, but it can also be the Message window.\n\n### Method copy\n\nCopies lines from the Infolog buffer.\n\n    public container copy(int from, int to)\n\n#### Parameters\n\nfrom  \nThe last line to copy.\n\n<!-- -->\n\nto  \nThe last line to copy.\n\n#### Return Value\n\nContainer that contains the Infolog lines between from and to.\n\n#### Examples\n\nThe following example uses the copy method to copy the content of the Infolog into a log.\n\n    boolean validateRecord() \n    { \n        boolean     ok = true; \n        ok = intrastat.validateRecord(); \n        if (ok) \n            intrastat.log = ''; \n        else \n        { \n            intrastat.log = Info::infoCon2Str( \n                infolog.copy(infoLogCounter+1,infolog.num())); \n            infoLogCounter = infolog.num(); \n            errorFound = true; \n        } \n        intrastat.update(); \n        return ok; \n    }\n\n### Method createDevelopmentWorkspaceWindow\n\n    public int createDevelopmentWorkspaceWindow()\n\n#### Return Value\n\n### Method createWorkspaceWindow\n\nOpens a new workspace window. For example, this enables you to open different sets of application objects in different windows, or to work with two different sets of company accounts.\n\n    public int createWorkspaceWindow()\n\n#### Return Value\n\nReturns a handle to the new window.\n\n### Method currentAOLayer\n\nRetrieves the current layer you are running in such as SYS, or USR.\n\n    public UtilEntryLevel currentAOLayer()\n\n#### Return Value\n\nA UtilEntryLevel system enumeration value that indicates the current layer you are working in.\n\n#### Remarks\n\nFor more information, see Layers.\n\n### Method cut\n\nCuts lines from the Infolog buffer.\n\n    public container cut(int from, int to)\n\n#### Parameters\n\nfrom  \nThe last line to cut.\n\n<!-- -->\n\nto  \nThe last line to cut.\n\n#### Return Value\n\nA container that contains the Infolog lines between the lines specified by the from and to parameters.\n\n#### Examples\n\nThe following example cuts the lines in the Infolog from the line specified by the fromLine value, up to the last line.\n\n    private void cutInfolog(int fromLine) \n    { \n        infolog.cut(fromLine+1, Global::infologLine()); \n    }\n\n### Method documentationLanguage\n\nGets or sets the language that is used for the Finance and Operations documentation.\n\n    public str documentationLanguage([str languageCode])\n\n#### Parameters\n\nlanguageCode  \nThe ID of the language you want to set; optional.\n\n#### Return Value\n\nThe ID of the language that is currently used for the documentation.\n\n#### Remarks\n\nUse the xInfo.language Method to set the language for the GUI. To set the documentation language for a particular session, use the xSession.documentationLanguage Method. An example value for the languageCode parameter is \"en-us\", which will set the language to US English.\n\n### Method export\n\n    public container export()\n\n#### Return Value\n\n### Method findNode\n\nRetrieves the specified a tree node.\n\n    public TreeNode findNode(str nodePath)\n\n#### Parameters\n\nnodePath  \nA string that contains the path to the node.\n\n#### Return Value\n\nReturns the tree node that is specified by the nodePath parameter.\n\n#### Remarks\n\nThis method is obsolete. Use the TreeNode::findNode Method instead.\n\n### Method getDocNode\n\nRetrieves the specified documentation nodes from the AOT.\n\n    public TreeNode getDocNode(UtilFileType helpType, int UtilType, str Name, [UtilElementId ParentId], [int Type], [UtilEntryLevel UtilLevel], [boolean ForceLevel], [int Mode], [boolean OldUtil])\n\n#### Parameters\n\nhelpType  \nA Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.\n\n<!-- -->\n\nUtilType  \nA Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.\n\n<!-- -->\n\nName  \nA Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.\n\n<!-- -->\n\nParentId  \nA Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.\n\n<!-- -->\n\nType  \nA Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.\n\n<!-- -->\n\nUtilLevel  \nA Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.\n\n<!-- -->\n\nForceLevel  \nA Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.\n\n<!-- -->\n\nMode  \nA Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.\n\n<!-- -->\n\nOldUtil  \nA Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.\n\n#### Return Value\n\nA documentation node from the AOT.\n\n#### Remarks\n\nThe possible values for the helpType parameter are values of the UtilFileType system enumeration:\n\n-   KernelHelp: the System Documentation node\n-   ApplicationHelp: the Application Documentation node\n-   ApplicationCodeDocumentation: the Application Developer Documentation node.\n\nAn example value of the utilType parameter is the Functions node within the System Documentation node. The default value of the ForceLevel parameter is false. If it is set to false, and there is no content in the layer specified, the node will be taken from the next layer below this that does have content. If it is set to true, and there is no content in the layer, the method will return nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n### Method getImportedNode\n\nCreates an instance of a tree node from an XPO file but does not import it into the AOT. For example, this allows you to compare it with another version of the same tree node.\n\n    public TreeNode getImportedNode(int id, int utilfiletype, UtilElementType utiltype, str name, int fileposition, int Flag)\n\n#### Parameters\n\nid  \n\n<!-- -->\n\nutilfiletype  \n\n<!-- -->\n\nutiltype  \n\n<!-- -->\n\nname  \n\n<!-- -->\n\nfileposition  \n\n<!-- -->\n\nFlag  \n\n#### Return Value\n\nA tree node.\n\n#### Remarks\n\nThe possible values for the utilfiletype parameter are those that are available in the UtilFileType Enumeration. The possible values for the utiltype parameter are those that are available in the UtilElementType Enumeration. For a list of the possible values for the Flag parameter, see the AOTExport macro. The values are listed under the System import flags comment.\n\n#### Examples\n\nThe following example uses the getImportedNode method to create a virtual tree node.\n\n    public TreeNode getVirtualTreenode( \n        Filename _filename = this.fileName()) \n    { \n        #AOT \n        #AotExport \n        TmpAotImport      tmpImportAot; \n        SysImportElements sysImportElements = new SysImportElements(); \n        TreeNode treeNodeImport  = null; \n        int      exportId; \n        int      flag = (#impGetCompareNode + #impKeepIds); \n        str      name; \n        ; \n        // Set the filename. \n        sysImportElements.newFile(_filename); \n        // Get info from the file \n        tmpImportAot = sysImportElements.getTmpImportAot(); \n        // Create an import context \n        exportId     = infolog.startImport(_filename, flag); \n        // Get the right name \n        // for doc nodes it is the path excl. the first part \n        switch (tmpImportAot.UtilFileType) \n        { \n            case UtilFileType::Application: \n                name = tmpImportAot.TreeNodeName; \n                break; \n            case UtilFileType::ApplicationCodeDocumentation: \n                name = strdel(tmpImportAot.TreeNodePath, 1, strlen(#ApplicationDeveloperDocPath)); \n                break; \n            case UtilFileType::ApplicationHelp: \n                name = strdel(tmpImportAot.TreeNodePath, 1, strlen(#ApplicationDocPath)); \n                break; \n            case UtilFileType::KernelHelp: \n                name = strdel(tmpImportAot.TreeNodePath, 1, strlen(#SystemDocPath)); \n                break; \n            default: \n                name = tmpImportAot.TreeNodeName; \n                break; \n        } \n        // Import the node in memory \n        treeNodeImport  = infolog.getImportedNode( \n            exportId, \n            tmpImportAot.UtilFileType, \n            tmpImportAot.UtilElementType, \n            name, \n            tmpImportAot.FilePos, \n            flag); \n        // Close the import context \n        infolog.endImport(exportId, 1); \n        return treeNodeImport; \n    }\n\n### Method getNode\n\nRetrieves a tree node that corresponds to a node in the AOT.\n\n    public TreeNode getNode(UtilElementType UtilType, str Name, [UtilElementId ParentId], [int Type], [UtilEntryLevel Utillevel], [boolean Forcelevel], [int Mode], [boolean OldUtil])\n\n#### Parameters\n\nUtilType  \nA Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.\n\n<!-- -->\n\nName  \nA Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.\n\n<!-- -->\n\nParentId  \nA Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.\n\n<!-- -->\n\nType  \nA Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.\n\n<!-- -->\n\nUtillevel  \nA Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.\n\n<!-- -->\n\nForcelevel  \nA Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.\n\n<!-- -->\n\nMode  \nA Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.\n\n<!-- -->\n\nOldUtil  \nA Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.\n\n#### Return Value\n\nThe tree node that is specified by the UtilType and Name parameters.\n\n#### Remarks\n\nThe node returned is not linked into the AOT, so you cannot perform operations on the node. To perform operations on a node, use the findNode or rootNode method instead. The default value for the UtilLevel parameter is the current layer. The possible values for the Mode parameter are:\n\n-   0x001: Load for run\n-   0x002: Load for edit\n\nThe default value of the ForceLevel parameter is false. If it is set to false, and there is no content in the layer specified, the node will be taken from the next layer below this that does have content. If it is set to true, and there is no content in the layer, the method will return nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n### Method getNodeResid\n\nRetrieves the resource ID for the icon that is used to display nodes of the specified type.\n\n    public int getNodeResid(UtilElementType nodeType)\n\n#### Parameters\n\nnodeType  \nA UtilElementType system enumeration value that indicates the type of node to retrieve.\n\n#### Return Value\n\nAn integer that represents the Resource ID for the node.\n\n### Method getTaskInfo\n\n    public Struct getTaskInfo(int taskNumber)\n\n#### Parameters\n\ntaskNumber  \n\n#### Return Value\n\n### Method getUserSetup\n\nRetrieves a UserSetup object that is used to set user parameters.\n\n    public UserSetup getUserSetup()\n\n#### Return Value\n\nA UserSetup object.\n\n#### Remarks\n\nThe UserSetup system class provides an interface for setting user parameters.\n\n### Method getWorkspaceList\n\n    public container getWorkspaceList()\n\n#### Return Value\n\n### Method hWnd\n\nRetrieves a handle to the Finance and OperationsNavigation Pane window.\n\n    public int hWnd([int workspaceNum])\n\n#### Parameters\n\nworkspaceNum  \nThe handle to the workspace from which to get the Navigation Pane handle.\n\n#### Return Value\n\nAn integer that represents the handle to the Finance and OperationsNavigation Pane window.\n\n### Method import\n\n    public boolean import(container infologContainer, [boolean clearExistingInfolog])\n\n#### Parameters\n\ninfologContainer  \n\n<!-- -->\n\nclearExistingInfolog  \n\n#### Return Value\n\n### Method importElement\n\nSpecifies the object to be imported.\n\n    public int importElement(int id, int utilfiletype, UtilElementType utiltype, str name, int fileposition, int Flag)\n\n#### Parameters\n\nid  \n\n<!-- -->\n\nutilfiletype  \n\n<!-- -->\n\nutiltype  \n\n<!-- -->\n\nname  \n\n<!-- -->\n\nfileposition  \n\n<!-- -->\n\nFlag  \n\n#### Return Value\n\nThis method is obsolete. Use the SysImportElements class instead.\n\n### Method importString\n\nImports an object from a file.\n\n    public int importString(str source, UtilElementType kind, str name)\n\n#### Parameters\n\nsource  \nThe name of the object.\n\n<!-- -->\n\nkind  \nThe name of the object.\n\n<!-- -->\n\nname  \nThe name of the object.\n\n#### Return Value\n\n### Method instance\n\nRetrieves a handle to the current instance of the application.\n\n    public int instance()\n\n#### Return Value\n\nThe handle of the current instance of the application.\n\n### Method isoCurrencyCode\n\nGets or sets the currency code.\n\n    public str isoCurrencyCode([str code])\n\n#### Parameters\n\ncode  \nA string that contains the ISO currency code to set.\n\n#### Return Value\n\nA string that contains the currency code for the current application.\n\n### Method IsVisible\n\nDetermines whether the client window is not minimized.\n\n    public boolean IsVisible()\n\n#### Return Value\n\nfalse if the client window is minimized; otherwise, true.\n\n### Method language\n\nGets or sets the language for the GUI.\n\n    public str language([str languageCode])\n\n#### Parameters\n\nlanguageCode  \nA string that contains the language code to set.\n\n#### Return Value\n\nA string that contains the current language code.\n\n#### Remarks\n\nTo set the language for the documentation, use the xInfo.documentationLanguage Method. To set the GUI language for a particular session, use the xSession.interfaceLanguage Method.\n\n#### Examples\n\nThe following example prints the code for the language that is currently set. For example, if the interface was in US English, it would print \"en-us\".\n\n    { \n        print infolog.language(); \n        pause; \n    }\n\n### Method level\n\nRetrieves the exception level of a line in the Infolog buffer.\n\n    public Exception level(int line)\n\n#### Parameters\n\nline  \nThe line in the Infolog for which to retrieve the exception level.\n\n#### Return Value\n\nA Exception system enumeration value.\n\n#### Remarks\n\nFor more information, see Exception Handling with try and catch Keywords.\n\n### Method line\n\nRetrieves the number of lines in the Infolog buffer.\n\n    public int line()\n\n#### Return Value\n\nAn integer that represents the number of lines in the Infolog buffer.\n\n#### Remarks\n\nIf you are running code on the server, use the xGlobal::infologLine method instead. It eliminates calls between the server and client. To get the number of exceptions of a specific type in the Infolog, use the xInfo.num Method.\n\n### Method messageWin\n\nEnables you to send output from the Infolog to the Message window.\n\n    public MessageWin messageWin()\n\n#### Return Value\n\nA MessageWin object.\n\n#### Remarks\n\nYou may want to send output to the Message window if you have a lengthy process. If you send output to the Infolog, nothing will be displayed until the process is completed. If you send output to the Message window, content is displayed as the operation proceeds.\n\n### Method nationalCurrencyFactor\n\n    public Real nationalCurrencyFactor([Real factor])\n\n#### Parameters\n\nfactor  \n\n#### Return Value\n\n### Method nationalCurrencyPostfix\n\n    public str nationalCurrencyPostfix([str string])\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method nationalCurrencyPrefix\n\n    public str nationalCurrencyPrefix([str string])\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method navPane\n\nRetrieves an xNavPane object, the primary navigation control class.\n\n    public xNavPane navPane()\n\n#### Return Value\n\nAn instance of the xNavPane class.\n\n#### Remarks\n\nYou can only have one instance of this class per workspace.\n\n### Method num\n\nRetrieves the number of exceptions of the specified type in the Infolog buffer.\n\n    public int num([Exception exceptionType])\n\n#### Parameters\n\nexceptionType  \nA Exception system enumeration value that indicates the exception type to count; optional.\n\n#### Return Value\n\nAn integer that represents the number of exceptions of the type specified by the exceptionType parameter, or the total number of lines in the Infolog if no parameter is specified.\n\n#### Remarks\n\nFor more information, see Exception Handling with try and catch Keywords.\n\n#### Examples\n\nThe following example returns the number of warnings in the Infolog.\n\n    { \n        print infolog.num(Exception::Warning); \n        pause; \n    }\n\n### Method prevInstance\n\nRetrieves a handle to the previous instance of the application.\n\n    public int prevInstance()\n\n#### Return Value\n\nThe handle of the previous instance of the application.\n\n#### Remarks\n\nThis method should not be used.\n\n### Method processId\n\nRetrieves the ID for the Finance and Operations process.\n\n    public int processId()\n\n#### Return Value\n\nThe ID for the Finance and Operations process.\n\n### Method projectRootNode\n\nReturns the X++ Projects node.\n\n    public TreeNode projectRootNode()\n\n#### Return Value\n\nThe tree node that contains the X++ projects.\n\n#### Examples\n\nThe following example prints out the names of all the projects in the Shared projects folder.\n\n    void ProjectNames() \n    { \n        Treenode treenode; \n        TreenodeIterator it; \n        treenode = infolog.projectRootNode(); \n        treenode = treenode.AOTfindChild(\"Shared\"); \n        it = treenode.AOTiterator(); \n        while (treenode) \n        { \n           print treenode.treeNodeName(); \n           treenode = it.next(); \n        } \n        pause; \n    }\n\n### Method rootNode\n\nRetrieves the root of the application object tree.\n\n    public TreeNode rootNode()\n\n#### Return Value\n\nThe root of the application object tree.\n\n#### Examples\n\nThe following example prints out all the names of the methods in the AddressSelectForm class. The rootnode method is used to set the treenode object to the AOT root before selecting a child node.\n\n    { \n        Treenode treenode; \n        TreenodeIterator it; \n        treenode = infolog.rootNode(); \n        treenode = treenode.AOTfindChild(\"Classes\"); \n        treenode = treenode.AOTfindChild(\"AddressSelectForm\"); \n        it = treenode.AOTiterator(); \n        while (treenode) \n        { \n           print treenode.treeNodeName(); \n           treenode = it.next(); \n        } \n        pause; \n    }\n\n### Method startImport\n\nCreates an import context.\n\n    public int startImport(str file, int flag, [str labelSubstitutes])\n\n#### Parameters\n\nfile  \n\n<!-- -->\n\nflag  \n\n<!-- -->\n\nlabelSubstitutes  \n\n#### Return Value\n\n#### Remarks\n\nThis method is obsolete. Use the SysImportElements class instead.\n\n### Method text\n\nRetrieves a line of text from the Infolog.\n\n    public str text([int line])\n\n#### Parameters\n\nline  \nThe line in the Infolog with the text to retrieve.\n\n#### Return Value\n\nA string that contains the text from the Infolog.\n\n### Method userNode\n\n    public TreeNode userNode()\n\n#### Return Value\n\n### Method webSession\n\n    public AnyType webSession([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method activeXControls\n\nRetrieves a list of the ActiveX controls that are in Finance and Operations.\n\n    public static container activeXControls()\n\n#### Return Value\n\nA nested container that holds information about each of the ActiveX controls.\n\n#### Remarks\n\nThe returned container contains four containers. The first inner container contains the names of all the controls. The second inner container contains the ID for each control, which is a GUID. The third inner container contains the security setting for each control. The fourth inner container contains a description of each control.\n\n#### Examples\n\nThe following example prints a description of each of the ActiveX controls in Finance and Operations.\n\n    static void activeXcontents(Args _args) \n    { \n        int       i; \n        str       strClsName, strTypeLibHelp, strClsId, strSafeForBits; \n        container c; \n        container clsName, clsId, safeForBits, typeLibHelp; \n        c = xinfo::activeXControls(); \n        clsName = conpeek(c, 1); \n        clsId = conpeek(c, 2); \n        safeForBits = conpeek(c, 3); \n        typeLibHelp = conpeek(c, 4); \n        for (i=1; i<conlen(clsName); i++) \n        { \n            strClsName = conpeek(clsName, i); \n            strClsId = conpeek(clsId, i); \n            strSafeForBits = conpeek(safeForBits, i); \n            strTypeLibHelp = conpeek(typeLibHelp, i); \n            print strClsName, \" \", strClsId, \" \", strSafeForBits, \n                \" \", strTypeLibHelp; \n        } \n        pause; \n    }\n\n### Method AOTLogDirectory\n\nGets the path to the log directory for the current installation.\n\n    public static str AOTLogDirectory()\n\n#### Return Value\n\nA string that contains the path to the log directory for the current installation.\n\n#### Remarks\n\nIf you turn on the AOT Log option, information will be stored in the log directory each time you compile. To turn on this option:\n\n1.  Open a developer workspace.\n2.  Select Tools &gt; Options &gt; Development &gt; Compiler.\n3.  Select the AOT log check box.\n\n### Method automationObjects\n\nRetrieves the list of COM objects that are available in Finance and Operations.\n\n    public static container automationObjects()\n\n#### Return Value\n\nA nested container that holds a description of each COM object.\n\n#### Examples\n\nThe following example unpacks the nested container that is returned from automationObjects to get a list of COM objects.\n\n    void getAutomationObjects() \n    { \n        int idx; \n        FormListItem listItem; \n        int itemPos; \n        container clsGUID,clsDesc,clsVersion,clsPath; \n        [clsGUID,clsDesc,clsVersion,clsPath] = xInfo::automationObjects(); \n        for (idx = 1; idx < conlen(clsGUID); idx++) \n        { \n            itemPos = formListControl.add(conpeek(clsDesc,idx)); \n            listItem = formListControl.getItem(itemPos); \n            listItem.data(conpeek(clsPath,idx)); \n            formListControl.setItem(listItem); \n        } \n    }\n\n### Method buildNo\n\nRetrieves the kernel build number of the current Finance and Operations executable.\n\n    public static str buildNo()\n\n#### Return Value\n\nA string that contains the kernel build number.\n\n#### Examples\n\nThe following example uses this method to return the kernel build number as part of a string that contains Finance and Operations version information.\n\n    static client str axaptaReleaseID() \n    { \n        #define.versionPrefix('v') \n        #define.versionNumber('#') \n        #define.versionPartition('/') \n        return    #versionprefix+xInfo::releaseVersion()+ \n                  #versionNumber+xInfo::buildNo()+ \n                  #versionPartition+ApplicationVersion::buildNo(); \n    }\n\n### Method compilationDate\n\nRetrieves the date on which the current version of Finance and Operations was last compiled.\n\n    public static str compilationDate()\n\n#### Return Value\n\nA string that contains the date on which Finance and Operations was last compiled.\n\n#### Examples\n\nThe following example returns system information, including the date on which the application was last compiled:\n\n    str environment() \n    { \n        return xInfo::buildNo() + ' - '  \n            + xInfo::compilationDate() + ' - '  \n            + xInfo::dbName() + ' - '  \n            + xInfo::osName() + ' - '  \n            + xInfo::productName() + ' - '  \n            + xInfo::releaseVersion(); \n    }\n\n### Method compilationTime\n\nRetrieves the time at which the current version of Finance and Operations was last compiled.\n\n    public static str compilationTime()\n\n#### Return Value\n\nA string that contains the time at which Finance and Operations was last compiled.\n\n### Method componentName\n\nRetrieves the path to the component.\n\n    public static str componentName()\n\n#### Return Value\n\nA string that contains the path to the executable.\n\n#### Remarks\n\nIf this method is run on the client, it returns the path to the .exe file for the Finance and Operations client. If it is run on the server, it returns the path to the .exe file for the AOS.\n\n### Method configuration\n\nRetrieves the current client configuration.\n\n    public static str configuration()\n\n#### Return Value\n\nA string that represents the current client configuration.\n\n#### Remarks\n\nThis is the configuration that is selected in the Configuration box in the Client Configuration Utility program. An example string that could be returned is \"Original (installed configuration)\".\n\n### Method currentWorkspaceNum\n\nRetrieves the application window ID of the current workspace.\n\n    public static int currentWorkspaceNum()\n\n#### Return Value\n\nThe application window ID of the current workspace.\n\n#### Remarks\n\nThe createWorkspaceWindow method allows you to open additional workspaces in the application.\n\n### Method directory\n\nRetrieves the path to the directory where the Finance and Operations client has been installed.\n\n    public static str directory(DirectoryType type)\n\n#### Parameters\n\ntype  \nA DirectoryType enumeration value that indicates one of the subfolders of the client installation.\n\n#### Return Value\n\nA string that contains the path to the directory that is specified by the DirectoryType parameter.\n\n#### Examples\n\nThe following example prints the path to the Bin directory for the current client installation.\n\n    { \n        print xInfo::directory(DirectoryType::Bin); \n        pause; \n    }\n\n### Method expireDate\n\nRetrieves the date on which the license for the current installation expires.\n\n    public static Date expireDate()\n\n#### Return Value\n\nA date that represents the date on which the license expires.\n\n### Method getApplicationObjectTreeWindow\n\n    public static ApplicationObjectTreeWindow getApplicationObjectTreeWindow()\n\n#### Return Value\n\n### Method getCurrentModelId\n\n    public static int getCurrentModelId()\n\n#### Return Value\n\n### Method getNumberOfDecimals\n\nRetrieves the number of decimal places in the specified number.\n\n    public static int getNumberOfDecimals(Real number)\n\n#### Parameters\n\nnumber  \nA real number.\n\n#### Return Value\n\nThe number of decimal places in the number parameter.\n\n### Method getPropertiesWindow\n\n    public static PropertiesWindow getPropertiesWindow()\n\n#### Return Value\n\n### Method getSystemGeneratedModelId\n\n    public static int getSystemGeneratedModelId(UtilEntryLevel layer)\n\n#### Parameters\n\nlayer  \n\n#### Return Value\n\n### Method licenseName\n\nRetrieves the name of the current Finance and Operations license.\n\n    public static str licenseName()\n\n#### Return Value\n\nA string that contains the name of the license.\n\n#### Remarks\n\nThe xInfo::expireDate Method returns the date on which the license expires. The xInfo::serialNo Method returns the serial number of the license.\n\n### Method productName\n\nRetrieves the name of the product.\n\n    public static str productName()\n\n#### Return Value\n\nA string that contains the name of the product.\n\n#### Examples\n\nThe following example returns system information, including the name of the product.\n\n    str environment() \n    { \n        return xInfo::buildNo() + ' - '  \n            + xInfo::compilationDate() + ' - '  \n            + xInfo::dbName() + ' - '  \n            + xInfo::osName() + ' - '  \n            + xInfo::productName() + ' - '  \n            + xInfo::releaseVersion(); \n    }\n\n### Method productRegisteredName\n\n    public static str productRegisteredName()\n\n#### Return Value\n\n### Method releaseVersion\n\nRetrieves the version number of the current Finance and Operations executable; for example: 3.0, or 4.0.\n\n    public static str releaseVersion()\n\n#### Return Value\n\nA string containing the Finance and Operations version number.\n\n#### Remarks\n\nPossible version numbers include 3.0 and 4.0.\n\n#### Examples\n\nThe following example uses this return the version number as part of a string that contains Finance and Operations version information.\n\n    static client str axaptaReleaseID() \n    { \n        #define.versionPrefix('v') \n        #define.versionNumber('#') \n        #define.versionPartition('/') \n        return    #versionprefix+xInfo::releaseVersion()+ \n                  #versionNumber+xInfo::buildNo()+ \n                  #versionPartition+ApplicationVersion::buildNo(); \n    }\n\n### Method releaseYear\n\n    public static str releaseYear()\n\n#### Return Value\n\n### Method serialNo\n\nRetrieves the serial number of the current Finance and Operations license.\n\n    public static str serialNo()\n\n#### Return Value\n\nA string that contains the serial number of the Finance and Operations license.\n\n### Method new\n\nInitializes a new xInfo object.\n\n    public void new()\n\n#### Remarks\n\nNote: Do not use this method. You should use the global instance of the xInfo class, infolog, instead. For more information, see the xInfo class.\n\n### Method workspaceWindowDestroyed\n\nExecutes when a workspace is closed.\n\n    public void workspaceWindowDestroyed(int hWnd)\n\n#### Parameters\n\nhWnd  \nThe handle of the workspace.\n\n#### Remarks\n\nThis method is called when a new workspace is closed. It allows you to perform an action when this occurs.\n\n### Method writeCustomStatlineItem\n\nWrites a line of text to the status bar.\n\n    public void writeCustomStatlineItem(str text)\n\n#### Parameters\n\ntext  \nThe line of text to put on the status bar.\n\n### Method reloadRunningMode\n\n    public void reloadRunningMode()\n\n### Method setWindowOrder\n\nSets the order in which windows should be displayed.\n\n    public void setWindowOrder(int window, [int afterWindow])\n\n#### Parameters\n\nwindow  \nThe handle to the window to place after the window specified by the window parameter; optional.\n\n<!-- -->\n\nafterWindow  \nThe handle to the window to place after the window specified by the window parameter; optional.\n\n#### Examples\n\nThe following example sets focus on a window and brings it to the front.\n\n    void setFocus() \n    { \n        infolog.activateWindow(element.hWnd()); \n        infolog.setWindowOrder(element.hWnd()); \n    }\n\n### Method shutDown\n\nShuts down the client.\n\n    public void shutDown(boolean force)\n\n#### Parameters\n\nforce  \nA Boolean value that indicates whether the user is given the option to prevent the shutdown.\n\n### Method xref\n\nExecutes when the cross-reference system is used.\n\n    public void xref(str path, xRef x)\n\n#### Parameters\n\npath  \n\n<!-- -->\n\nx  \n\n#### Remarks\n\nDo not use this method.\n\n### Method updateCurrentCompany\n\n    public void updateCurrentCompany()\n\n### Method redrawAllWindows\n\nRedraws all windows.\n\n    public void redrawAllWindows()\n\n#### Remarks\n\nThis method can be used to update the display during a long process.\n\n### Method formNotify\n\nExecutes based on a particular type of change to a specific form, allowing custom code to run.\n\n    public void formNotify(xFormRun form, FormNotify notification, [FormNotifyEventArgs formNotifyEventArgs])\n\n#### Parameters\n\nform  \n\n<!-- -->\n\nnotification  \n\n<!-- -->\n\nformNotifyEventArgs  \n\n#### Remarks\n\nPossible values for the notification parameter are:\n\n-   Activate\n-   DeActivate\n-   Open\n-   Close\n-   RecordChange\n-   NoteClicked\n\nFor an example of the usage of this method, see the formNotify method of the Info class, where this method has been overridden.\n\n### Method mayReloadMenu\n\nPrevents the UI from refreshing.\n\n    public void mayReloadMenu(boolean value)\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether to prevent the UI from refreshing.\n\n#### Remarks\n\nSet the value to false to prevent the UI from refreshing when a process is executing, and then set it to true after the process has finished. The mayReloadMenu method can be useful to prevent the UI from flickering, for example when many nodes in the AOT are being read.\n\n### Method startLengthyOperation\n\nSets the mouse cursor to idle.\n\n    public void startLengthyOperation()\n\n#### Remarks\n\nUse at the start of a lengthy operation to indicate that a process is in progress. When the operation has finished, the system automatically calls the endLengthyOperation method.\n\n### Method breakpointNotify\n\nImplements a notification system when a breakpoint is changed.\n\n    public void breakpointNotify(BreakpointNotify notification)\n\n#### Parameters\n\nnotification  \nA BreakpointNotify system enumeration value that specifies the type of change that has occurred to the breakpoints.\n\n#### Remarks\n\nIn the application, this method is used to update the Breakpoints form when a change is made to a breakpoint in the Code Editor window. The following values of the BreakpointNotify enumeration type are valid for the notification parameter:\n\n-   BreakpointForm: Notifies the client that the breakpoint list should be reloaded.\n-   BreakpointChange: Notifies the client and server that the status of a breakpoint has changed (enabled, disabled, or deleted).\n\n### Method initializeInfolog\n\n    public void initializeInfolog(int window)\n\n#### Parameters\n\nwindow  \n\n### Method startup\n\nExecutes when the client starts.\n\n    public void startup(str startupCmd)\n\n#### Parameters\n\nstartupCmd  \n\n#### Remarks\n\nDo not use this method. Use one following methods instead. Use the Info.startupPost Method to pass startup commands to the client. Use the Application.startupPost Method to pass startup commands to the server. Do not use the Application.startup or Info.startup methods. This might affect code in a new version of Finance and Operations, which could prevent the client or server from starting.\n\n### Method endImport\n\nCompletes an import process.\n\n    public void endImport(int id, int elements)\n\n#### Parameters\n\nid  \n\n<!-- -->\n\nelements  \n\n#### Remarks\n\nThis method is obsolete. Use the SysImportElements class instead.\n\n### Method yield\n\n    public void yield()\n\n### Method viewAlertInbox\n\nLaunches the View alerts form.\n\n    public void viewAlertInbox([int selectedTab])\n\n#### Parameters\n\nselectedTab  \nDetermines which tab the View alerts form opens on; optional.\n\n#### Remarks\n\nThe default value for the selectedTab parameter is Overview, the first tab. Call the xInfo.canViewAlertInbox Method to check whether the user has permission to view this form.\n\n### Method reportSendMailServer\n\n    public void reportSendMailServer(PrintJobSettings settings)\n\n#### Parameters\n\nsettings  \n\n### Method endLengthyOperation\n\nSets the mouse cursor back to normal after a call to startLengthyOperation.\n\n    public void endLengthyOperation([boolean endAll])\n\n#### Parameters\n\nendAll  \nReserved.\n\n#### Remarks\n\nIt is best practice not to call this method. It will be called automatically by the system when the operation has ended. If you call this method explicitly and there are other processes, or looping code, that use the method, it could lead to the mouse pointer flickering.\n\n### Method setNumUnreadAlerts\n\nRefreshes the status bar text when the number of unread Alert e-mails changes.\n\n    public void setNumUnreadAlerts([int n])\n\n#### Parameters\n\nn  \nAllows you to set the number of unread e-mails to a specific number.\n\n### Method truncate\n\nRemoves the items with the specified prefix from the Infolog.\n\n    public void truncate(str prefix)\n\n#### Parameters\n\nprefix  \nThe prefix for the items that you want to remove from the Infolog.\n\n### Method formNoteButton\n\nControls the Document handling button on the toolbar.\n\n    public void formNoteButton(boolean enable, boolean value)\n\n#### Parameters\n\nenable  \nA Boolean data type that indicates the appearance of the icon.\n\n<!-- -->\n\nvalue  \nA Boolean data type that indicates the appearance of the icon.\n\n#### Examples\n\nThe following example shows how to disable the Document handling button.\n\n    void disableNoteButton() \n        { \n            infolog.formNoteButton(false, false); \n        }\n\n### Method viewCreateRuleDialog\n\nLaunches the Create alert rule form.\n\n    public void viewCreateRuleDialog(xFormRun caller)\n\n#### Parameters\n\ncaller  \nThe current form.\n\n#### Remarks\n\nThe Create alert rule form will be launched from the current form, as specified by the caller parameter.\n\n### Method view\n\n    public void view([container container])\n\n#### Parameters\n\ncontainer  \n\n### Method clear\n\nDeletes lines from the Infolog buffer.\n\n    public void clear([int linesLeft])\n\n#### Parameters\n\nlinesLeft  \nNumber of lines to leave in the buffer; optional.\n\n#### Remarks\n\nDo not call this with method with the default value of zero unless another process has not put information into the Infolog.\n\n#### Examples\n\nUse this pattern to clear the Infolog cache:\n\n    int line = Global::infologLine();\n    try \n    { \n        // \n    } \n    catch \n    { \n        infolog.clear(line); \n    }\n\n### Method workspaceWindowCreated\n\nExecutes when a new workspace is created.\n\n    public void workspaceWindowCreated(int hWnd)\n\n#### Parameters\n\nhWnd  \nThe handle of the new workspace.\n\n#### Remarks\n\nThis method is called when a new workspace is created. It allows you to perform an action when this occurs.\n\n### Method setCurrentModelId\n\n    public static void setCurrentModelId(int currentModelId)\n\n#### Parameters\n\ncurrentModelId  \n\n### Method activateMenubarTask\n\n    public void activateMenubarTask(int command)\n\n#### Parameters\n\ncommand  \n\n### Method finalize\n\n    public void finalize()\n\n### Method insertXReferences\n\n    public void insertXReferences()\n\n### Method activateButton\n\n    public void activateButton(int command)\n\n#### Parameters\n\ncommand  \n\n### Method activateWindow\n\nSets the focus on a form or Window.\n\n    public void activateWindow(int window)\n\n#### Parameters\n\nwindow  \nThe handle to the form or window that you want to bring into focus.\n\n### Method reportSendMail\n\nGenerates the settings for sending a report by email.\n\n    public void reportSendMail(PrintJobSettings settings)\n\n#### Parameters\n\nsettings  \nThe email settings for the user.\n\n## Class xLanguage\n    class xLanguage extends Object\n\nThe xLanguage class provides access to a list of language IDs and information about existing label files.\n\n### Remarks\n\nISO 639 defines the names of languages, such as \"en\" for English. Microsoft has listed a set of language codes, such \"en-us\" for English (United States). These language codes are referred to in Finance and Operations as Language IDs. Finance and Operations uses \"ko-jo\" for Korean (Johab). In the Microsoft list, \"ko\" is both Korean and Korean (Johab). Finance and Operations uses \"no-ny\" for Norwegian (Nynorsk). In the Microsoft list, \"no\" is both Norwegian (Bokmal) and Norwegian (Nynorsk). Finance and Operations uses \"es-tr\" to represent Spanish (Spain - Traditional Sort). In the Microsoft list, \"es\" is both Spanish (Spain - Modern Sort) and Spanish (Spain - Traditional Sort). A language name in the following format, such as \"English (United States)\", is referred to as the description in Finance and Operations.\n\n### Examples\n\nThe following example prints all the language IDs from the Microsoft list and a list of existing label files.\n\n    static void aaaTestLanguage(args a) \n    { \n        int i; \n        int cnt; \n        str languageID; \n        str description; \n        str shortName; \n        cnt = xlanguage::languageCount(); \n        for (i = 0; i<=cnt; i++) \n        { \n            languageID =xLanguage::index2languageID(i); \n            print \"Language \", i, \":\", languageID, \":\"; \n        } \n        cnt = xLanguage::labelFileCount(); \n        for (i = 0; i<=cnt; i++) \n        { \n            shortName =xLanguage::labelFileNumber2LanguageID(i); \n            languageID =xLanguage::index2languageID(i); \n            description = xLanguage::languageID2Description(languageID); \n            print i, \":\", shortName, \":\", description; \n        } \n        pause; \n    }\n\n### Methods\n\n| Method                                                     | Description                                                                                                 |\n|------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|\n| ::public static str index2languageID(int number)           | Retrieves the language ID (for example, \"en-us\") of the specified language.                                 |\n| ::public static int labelFileCount()                       | Returns the number of label files.                                                                          |\n| ::public static str labelFileNumber2LanguageID(int number) |                                                                                                             |\n| ::public static int languageCount()                        |                                                                                                             |\n| ::public static str languageID2Description(str languageID) | Returns the name of the specified language (for example, \"English (United States)\"), given the language ID. |\n| ::public static int languageID2LCID(str languageID)        |                                                                                                             |\n| ::public static str lcid2languageID(int lcid)              |                                                                                                             |\n\n### Method index2languageID\n\nRetrieves the language ID (for example, \"en-us\") of the specified language.\n\n    public static str index2languageID(int number)\n\n#### Parameters\n\nnumber  \nA number between 1 and the return value of the languageCount method.\n\n#### Return Value\n\nThe language ID.\n\n### Method labelFileCount\n\nReturns the number of label files.\n\n    public static int labelFileCount()\n\n#### Return Value\n\nThe number of label files (that is, the number of files that have names in the form ax???\\*.ald).\n\n### Method labelFileNumber2LanguageID\n\n    public static str labelFileNumber2LanguageID(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method languageCount\n\n    public static int languageCount()\n\n#### Return Value\n\n### Method languageID2Description\n\nReturns the name of the specified language (for example, \"English (United States)\"), given the language ID.\n\n    public static str languageID2Description(str languageID)\n\n#### Parameters\n\nlanguageID  \nThe ID of the language (for example, \"en-us\").\n\n#### Return Value\n\nA string that contains the description of a language.\n\n### Method languageID2LCID\n\n    public static int languageID2LCID(str languageID)\n\n#### Parameters\n\nlanguageID  \n\n#### Return Value\n\n### Method lcid2languageID\n\n    public static str lcid2languageID(int lcid)\n\n#### Parameters\n\nlcid  \n\n#### Return Value\n\n## Class xMenuFunction\n    class xMenuFunction extends SecureNode\n\nThe xMenuFunction class represents an interface to other Finance and Operations Application objects, providing an easy way to access and run any Form, Report, Job, Class, and Query.\n\n### Remarks\n\nYou refer to an Application object using a xMenuFunction object and its methods and properties. For example, you can:\n\n-   Use the Run Method to run the object referenced in the property\n-   Create a xMenuFunction object and make a reference to the object it runs (or references to). This enables you to manipulate the arguments passed to the object before running it\n\nNote: This system class represents MenuItem nodes in the AOT. This class enables you to create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before calling this API.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                  | Description                                                                                                                               |\n|---------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public str changedBy(\\[str value\\])                                                                     | Gets or sets the name of the user who last changed the application object.                                                                |\n| public Date changedDate(\\[Date value\\])                                                                 | Gets or sets the date when an application object was last changed.                                                                        |\n| public str changedTime(\\[str value\\])                                                                   | Gets or sets the time when an application object was last changed.                                                                        |\n| public boolean checkAccessRights()                                                                      |                                                                                                                                           |\n| public int copyCallerQuery(\\[int value\\])                                                               |                                                                                                                                           |\n| public int correctPermissions(\\[int value\\])                                                            |                                                                                                                                           |\n| public str countryRegionCodes(\\[str value\\])                                                            |                                                                                                                                           |\n| public ObjectRun create(\\[xArgs args\\])                                                                 | Creates and returns a reference to an Finance and Operations application object.                                                           |\n| public str createdBy(\\[str value\\])                                                                     | Gets or sets the name of the user who created the application object.                                                                     |\n| public int createPermissions(\\[int value\\])                                                             |                                                                                                                                           |\n| public Date creationDate(\\[Date value\\])                                                                | Gets or sets the date an application object was created.                                                                                  |\n| public str creationTime(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int deletePermissions(\\[int value\\])                                                             |                                                                                                                                           |\n| public str disabledImage(\\[str value\\])                                                                 | Gets or sets the disabled image of the button.                                                                                            |\n| public int disabledImageLocation(\\[int value\\])                                                         |                                                                                                                                           |\n| public int disabledResource(\\[int value\\])                                                              | Gets or sets the resource ID of the image to use as the disabled button image.                                                            |\n| public int enumParameter(\\[int value\\])                                                                 | Gets or sets the enumParameter property that is passed to the object that is run by the MenuFunction class.                               |\n| public EnumId enumTypeParameter(\\[EnumId value\\])                                                       | Gets or sets the enumTypeParameter property for the MenuFunction class.                                                                   |\n| public int formViewOption(\\[int value\\])                                                                |                                                                                                                                           |\n| public Query getRootQuery()                                                                             |                                                                                                                                           |\n| public boolean hasRunPermissions(\\[xArgs args\\])                                                        | Checks if the xMenuFunction object has execute permissions and run() may be called successfully.                                          |\n| public str helpText(\\[str value\\])                                                                      | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                  |\n| public int imageLocation(\\[int value\\])                                                                 |                                                                                                                                           |\n| public str label(\\[str value\\])                                                                         | Gets or sets the label for a control.                                                                                                     |\n| public str linkedPermissionObject(\\[str value\\])                                                        |                                                                                                                                           |\n| public str linkedPermissionObjectChild(\\[str value\\])                                                   |                                                                                                                                           |\n| public int linkedPermissionType(\\[int value\\])                                                          |                                                                                                                                           |\n| public int maintainUserLicense(\\[int value\\])                                                           |                                                                                                                                           |\n| public boolean multiSelect(\\[boolean value\\])                                                           |                                                                                                                                           |\n| public str name(\\[str value\\])                                                                          | Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int needsRecord(\\[int value\\])                                                                   |                                                                                                                                           |\n| public str normalImage(\\[str value\\])                                                                   |                                                                                                                                           |\n| public int normalResource(\\[int value\\])                                                                |                                                                                                                                           |\n| public str object(\\[str value\\])                                                                        | Gets or sets the object that is run by the MenuFunction class.                                                                            |\n| public int objectType(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int openMode(\\[int value\\])                                                                      |                                                                                                                                           |\n| public Guid origin(\\[Guid value\\])                                                                      |                                                                                                                                           |\n| public str parameters(\\[str value\\])                                                                    | Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.                                    |\n| public str query(\\[str value\\])                                                                         |                                                                                                                                           |\n| public int readPermissions(\\[int value\\])                                                               |                                                                                                                                           |\n| public str reportDesign(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int runOn(\\[int value\\])                                                                         |                                                                                                                                           |\n| public MenuItemType type()                                                                              |                                                                                                                                           |\n| public int updatePermissions(\\[int value\\])                                                             |                                                                                                                                           |\n| public int viewUserLicense(\\[int value\\])                                                               |                                                                                                                                           |\n| public str web(\\[str value\\])                                                                           |                                                                                                                                           |\n| public int webAccess(\\[int value\\])                                                                     |                                                                                                                                           |\n| public str webMenuItemName(\\[str value\\])                                                               |                                                                                                                                           |\n| public str webPage(\\[str value\\])                                                                       |                                                                                                                                           |\n| public boolean webSecureTransaction(\\[boolean value\\])                                                  |                                                                                                                                           |\n| public void run(\\[xArgs args\\])                                                                         | Runs the xMenuFunction object.                                                                                                            |\n| ::public static void runCalled(str Name, MenuItemType type, \\[boolean setContextMenu\\], \\[xArgs args\\]) |                                                                                                                                           |\n| ::public static void runClient(str Name, MenuItemType type, \\[boolean setContextMenu\\], \\[xArgs args\\]) |                                                                                                                                           |\n| ::public static void runServer(str Name, MenuItemType type, \\[boolean setContextMenu\\], \\[xArgs args\\]) |                                                                                                                                           |\n| public void new(str Name, MenuItemType type)                                                            | Creates a new xMenuFunction object by passing xMenuFunction's name and MenuItemType to the xMenuFunction constructor.                     |\n| public void AOTrun(\\[xArgs args\\])                                                                      | Compiles this node and its subtree in the Application Object Tree (AOT).                                                                  |\n\n### Method changedBy\n\nGets or sets the name of the user who last changed the application object.\n\n    public str changedBy([str value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe name of the user.\n\n### Method changedDate\n\nGets or sets the date when an application object was last changed.\n\n    public Date changedDate([Date value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe date when an application object was last changed.\n\n### Method changedTime\n\nGets or sets the time when an application object was last changed.\n\n    public str changedTime([str value])\n\n#### Parameters\n\nvalue  \nThe value to set; optional.\n\n#### Return Value\n\nThe time when an application object was last changed.\n\n### Method checkAccessRights\n\n    public boolean checkAccessRights()\n\n#### Return Value\n\n### Method copyCallerQuery\n\n    public int copyCallerQuery([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method correctPermissions\n\n    public int correctPermissions([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method create\n\nCreates and returns a reference to an Finance and Operations application object.\n\n    public ObjectRun create([xArgs args])\n\n#### Parameters\n\nargs  \nAn xArgs class object; optional.\n\n#### Return Value\n\nA reference to an Finance and Operations application object.\n\n#### Remarks\n\nThis method is used to create an application object. The object that is returned is assigned to an object variable. Note that the init function is invoked by the create function. Therefore you should not invoke it.\n\n### Method createdBy\n\nGets or sets the name of the user who created the application object.\n\n    public str createdBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method createPermissions\n\n    public int createPermissions([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method creationDate\n\nGets or sets the date an application object was created.\n\n    public Date creationDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was created.\n\n### Method creationTime\n\n    public str creationTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method deletePermissions\n\n    public int deletePermissions([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledImage\n\nGets or sets the disabled image of the button.\n\n    public str disabledImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe full name of an image file; the system supports all of the GDI-supported image formats.\n\n#### Remarks\n\nThis property has precedence over the disabledResource property value. It is used if both of these properties are set.\n\n### Method disabledImageLocation\n\n    public int disabledImageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledResource\n\nGets or sets the resource ID of the image to use as the disabled button image.\n\n    public int disabledResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe resource ID of the image to use as the disabled button image. Both icon and bitmap images are supported.\n\n### Method enumParameter\n\nGets or sets the enumParameter property that is passed to the object that is run by the MenuFunction class.\n\n    public int enumParameter([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe enumParameter property that is passed to the object that is run by the MenuFunction class.\n\n### Method enumTypeParameter\n\nGets or sets the enumTypeParameter property for the MenuFunction class.\n\n    public EnumId enumTypeParameter([EnumId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe enumTypeParameter property for the MenuFunction class.\n\n### Method formViewOption\n\n    public int formViewOption([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method getRootQuery\n\n    public Query getRootQuery()\n\n#### Return Value\n\n### Method hasRunPermissions\n\nChecks if the xMenuFunction object has execute permissions and run() may be called successfully.\n\n    public boolean hasRunPermissions([xArgs args])\n\n#### Parameters\n\nargs  \nAn xArgs class object as would be passed to the run() method; optional.\n\n#### Return Value\n\ntrue if neccessary permissions exist to successfully call run().\n\n#### Remarks\n\nThis function may throw in case of permissions failure.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box.The help text must not exceed 250 characters.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method linkedPermissionObject\n\n    public str linkedPermissionObject([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method linkedPermissionObjectChild\n\n    public str linkedPermissionObjectChild([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method linkedPermissionType\n\n    public int linkedPermissionType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method maintainUserLicense\n\n    public int maintainUserLicense([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method multiSelect\n\n    public boolean multiSelect([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method needsRecord\n\n    public int needsRecord([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method object\n\nGets or sets the object that is run by the MenuFunction class.\n\n    public str object([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe object that is run by the MenuFunction class.\n\n#### Remarks\n\nThe property value may be one of the following objects:\n\n-   Form.\n-   Report.\n-   Job.\n-   Class.\n-   Query.\n\n### Method objectType\n\n    public int objectType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method openMode\n\n    public int openMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method parameters\n\nGets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.\n\n    public str parameters([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe list of parameters that are passed to the object.\n\n#### Remarks\n\nThe parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.cts ignore passed, unrecognized parameters.\n\n### Method query\n\n    public str query([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method readPermissions\n\n    public int readPermissions([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method reportDesign\n\n    public str reportDesign([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method runOn\n\n    public int runOn([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public MenuItemType type()\n\n#### Return Value\n\n### Method updatePermissions\n\n    public int updatePermissions([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewUserLicense\n\n    public int viewUserLicense([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method web\n\n    public str web([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webAccess\n\n    public int webAccess([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webMenuItemName\n\n    public str webMenuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webPage\n\n    public str webPage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webSecureTransaction\n\n    public boolean webSecureTransaction([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method run\n\nRuns the xMenuFunction object.\n\n    public void run([xArgs args])\n\n#### Parameters\n\nargs  \nAn xArgs class object; optional.\n\n#### Remarks\n\nThis function is used to run a xMenuFunction object from code.\n\n### Method runCalled\n\n    public static void runCalled(str Name, MenuItemType type, [boolean setContextMenu], [xArgs args])\n\n#### Parameters\n\nName  \n\n<!-- -->\n\ntype  \n\n<!-- -->\n\nsetContextMenu  \n\n<!-- -->\n\nargs  \n\n### Method runClient\n\n    public static void runClient(str Name, MenuItemType type, [boolean setContextMenu], [xArgs args])\n\n#### Parameters\n\nName  \n\n<!-- -->\n\ntype  \n\n<!-- -->\n\nsetContextMenu  \n\n<!-- -->\n\nargs  \n\n### Method runServer\n\n    public static void runServer(str Name, MenuItemType type, [boolean setContextMenu], [xArgs args])\n\n#### Parameters\n\nName  \n\n<!-- -->\n\ntype  \n\n<!-- -->\n\nsetContextMenu  \n\n<!-- -->\n\nargs  \n\n### Method new\n\nCreates a new xMenuFunction object by passing xMenuFunction's name and MenuItemType to the xMenuFunction constructor.\n\n    public void new(str Name, MenuItemType type)\n\n#### Parameters\n\nName  \nA constant in the MenuItemType system enumeration: MenuItemType::Display, MenuItemType::Output, or MenuItemType::Action.\n\n<!-- -->\n\ntype  \nA constant in the MenuItemType system enumeration: MenuItemType::Display, MenuItemType::Output, or MenuItemType::Action.\n\n#### Remarks\n\nWhen creating a xMenuFunction object, the parameters must uniquely identify an existing xMenuFunction. If not, Exception::Internal is thrown.\n\n### Method AOTrun\n\nCompiles this node and its subtree in the Application Object Tree (AOT).\n\n    public void AOTrun([xArgs args])\n\n#### Parameters\n\nargs  \n\n## Class xNavPane\n    class xNavPane extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                | Description                                       |\n|-------------------------------------------------------------------------------------------------------|---------------------------------------------------|\n| public boolean collapseFavoriteNode(str path)                                                         |                                                   |\n| public boolean collapseNode(str path)                                                                 |                                                   |\n| public boolean expandFavoriteNode(str path)                                                           |                                                   |\n| public boolean expandNode(str path)                                                                   |                                                   |\n| public boolean favPaneVisible(\\[boolean value\\])                                                      |                                                   |\n| public container getButtons()                                                                         |                                                   |\n| public str getCurrMenuName()                                                                          |                                                   |\n| public TreeNode getSelectedFavoriteNode()                                                             |                                                   |\n| public TreeNode getSelectedNode()                                                                     |                                                   |\n| public boolean navPaneVisible(\\[boolean value\\])                                                      |                                                   |\n| public boolean runFavoriteNode(str path)                                                              |                                                   |\n| public boolean runNode(str path)                                                                      |                                                   |\n| public str selectedFavoriteGroup(\\[str groupName\\])                                                   |                                                   |\n| public str selectedGroup(\\[str groupName\\])                                                           |                                                   |\n| public boolean setSelectedFavoriteNode(str path)                                                      |                                                   |\n| public boolean setSelectedNode(str path)                                                              |                                                   |\n| public void refreshFavorites(\\[str selectFavoriteGroup\\], \\[int workspaceNum\\], \\[boolean saveToDB\\]) |                                                   |\n| public void setCurrMenuButtons(container buttons)                                                     |                                                   |\n| public void loadStartupButtons()                                                                      |                                                   |\n| public void new()                                                                                     | Initializes a new instance of the xNavPane class. |\n\n### Method collapseFavoriteNode\n\n    public boolean collapseFavoriteNode(str path)\n\n#### Parameters\n\npath  \n\n#### Return Value\n\n### Method collapseNode\n\n    public boolean collapseNode(str path)\n\n#### Parameters\n\npath  \n\n#### Return Value\n\n### Method expandFavoriteNode\n\n    public boolean expandFavoriteNode(str path)\n\n#### Parameters\n\npath  \n\n#### Return Value\n\n### Method expandNode\n\n    public boolean expandNode(str path)\n\n#### Parameters\n\npath  \n\n#### Return Value\n\n### Method favPaneVisible\n\n    public boolean favPaneVisible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method getButtons\n\n    public container getButtons()\n\n#### Return Value\n\n### Method getCurrMenuName\n\n    public str getCurrMenuName()\n\n#### Return Value\n\n### Method getSelectedFavoriteNode\n\n    public TreeNode getSelectedFavoriteNode()\n\n#### Return Value\n\n### Method getSelectedNode\n\n    public TreeNode getSelectedNode()\n\n#### Return Value\n\n### Method navPaneVisible\n\n    public boolean navPaneVisible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method runFavoriteNode\n\n    public boolean runFavoriteNode(str path)\n\n#### Parameters\n\npath  \n\n#### Return Value\n\n### Method runNode\n\n    public boolean runNode(str path)\n\n#### Parameters\n\npath  \n\n#### Return Value\n\n### Method selectedFavoriteGroup\n\n    public str selectedFavoriteGroup([str groupName])\n\n#### Parameters\n\ngroupName  \n\n#### Return Value\n\n### Method selectedGroup\n\n    public str selectedGroup([str groupName])\n\n#### Parameters\n\ngroupName  \n\n#### Return Value\n\n### Method setSelectedFavoriteNode\n\n    public boolean setSelectedFavoriteNode(str path)\n\n#### Parameters\n\npath  \n\n#### Return Value\n\n### Method setSelectedNode\n\n    public boolean setSelectedNode(str path)\n\n#### Parameters\n\npath  \n\n#### Return Value\n\n### Method refreshFavorites\n\n    public void refreshFavorites([str selectFavoriteGroup], [int workspaceNum], [boolean saveToDB])\n\n#### Parameters\n\nselectFavoriteGroup  \n\n<!-- -->\n\nworkspaceNum  \n\n<!-- -->\n\nsaveToDB  \n\n### Method setCurrMenuButtons\n\n    public void setCurrMenuButtons(container buttons)\n\n#### Parameters\n\nbuttons  \n\n### Method loadStartupButtons\n\n    public void loadStartupButtons()\n\n### Method new\n\nInitializes a new instance of the xNavPane class.\n\n    public void new()\n\n## Class XppCompiler\n    class XppCompiler extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                 | Description                                                                                                       |\n|----------------------------------------|-------------------------------------------------------------------------------------------------------------------|\n| public boolean compile(str source)     |                                                                                                                   |\n| public boolean compileExpr(str source) |                                                                                                                   |\n| public str dumpClass(str className)    | Creates an XML string that contains the X++ compiler information for a class.                                     |\n| public str dumpEnums()                 | Creates an XML string that contains the X++ compiler information for all enumerations in the current application. |\n| public str dumpTable(str tableName)    | Creates an XML string that contains the X++ compiler information for a table.                                     |\n| public str errorText()                 |                                                                                                                   |\n| public AnyType execute(VarArg )        |                                                                                                                   |\n| public AnyType executeEx()             |                                                                                                                   |\n| public void setGuidArg(Guid arg)       |                                                                                                                   |\n| public void setInt64Arg(Int64 arg)     |                                                                                                                   |\n| public void setDateArg(Date arg)       |                                                                                                                   |\n| public void new()                      | Initializes a new instance of the XppCompiler class.                                                              |\n| public void endArgs()                  |                                                                                                                   |\n| public void startArgs()                |                                                                                                                   |\n| public void setRealArg(Real arg)       |                                                                                                                   |\n| public void setIntArg(int arg)         |                                                                                                                   |\n| public void setStrArg(str arg)         |                                                                                                                   |\n\n### Method compile\n\n    public boolean compile(str source)\n\n#### Parameters\n\nsource  \n\n#### Return Value\n\n### Method compileExpr\n\n    public boolean compileExpr(str source)\n\n#### Parameters\n\nsource  \n\n#### Return Value\n\n### Method dumpClass\n\nCreates an XML string that contains the X++ compiler information for a class.\n\n    public str dumpClass(str className)\n\n#### Parameters\n\nclassName  \n\n#### Return Value\n\nThe X++ compiler information for the specified class\n\n#### Remarks\n\nGeneral use of this method is discouraged, because the output format might change without warning from version to version.\n\n### Method dumpEnums\n\nCreates an XML string that contains the X++ compiler information for all enumerations in the current application.\n\n    public str dumpEnums()\n\n#### Return Value\n\nThe X++ compiler information for all enumerations in the current application\n\n#### Remarks\n\nGeneral use of this method is discouraged, because the output format might change without warning from version to version.\n\n### Method dumpTable\n\nCreates an XML string that contains the X++ compiler information for a table.\n\n    public str dumpTable(str tableName)\n\n#### Parameters\n\ntableName  \n\n#### Return Value\n\nThe X++ compiler information for the specified table\n\n#### Remarks\n\nGeneral use of this method is discouraged, because the output format might change without warning from version to version.\n\n### Method errorText\n\n    public str errorText()\n\n#### Return Value\n\n### Method execute\n\n    public AnyType execute(VarArg )\n\n#### Parameters\n\n  \n\n#### Return Value\n\n#### Remarks\n\nXppCompiler objects can compile code at run time. This presents a security risk. Therefore, execute method runs under Code Access Security. Calls to this method on the server require permission from the ExecutePermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n#### Examples\n\nThe following example calls the execute method to compile and execute the supplied buffer.\n\n    void XppCompilerExecuteExample(Common _buf) \n    { \n        XppCompiler       xpp; \n        ExecutePermission perm; \n        perm = new ExecutePermission(); \n        if (perm == null) \n        { \n            return; \n        } \n        perm.assert(); \n        xpp = new XppCompiler(); \n        if (xpp != null) \n        { \n            xpp.execute(_buf); \n        } \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method executeEx\n\n    public AnyType executeEx()\n\n#### Return Value\n\n#### Remarks\n\nXppCompiler objects can compile code at run time. This presents a security risk. Therefore, the executeEx method runs under Code Access Security. Calls to this method on the server require permission from the ExecutePermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n#### Examples\n\n    void XppCompilerExecuteExExample() \n    { \n        XppCompiler       xpp; \n        ExecutePermission perm; \n        perm = new ExecutePermission(); \n        if (perm == null) \n        { \n            return; \n        } \n        perm.assert(); \n        xpp = new XppCompiler(); \n        if (xpp != null) \n        { \n            xpp.executeEx(); \n        } \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method setGuidArg\n\n    public void setGuidArg(Guid arg)\n\n#### Parameters\n\narg  \n\n### Method setInt64Arg\n\n    public void setInt64Arg(Int64 arg)\n\n#### Parameters\n\narg  \n\n### Method setDateArg\n\n    public void setDateArg(Date arg)\n\n#### Parameters\n\narg  \n\n### Method new\n\nInitializes a new instance of the XppCompiler class.\n\n    public void new()\n\n#### Remarks\n\nInstances of the XppCompiler class can compile code at run time. Because this presents a security risk, the new method runs under Code Access Security. Calls to this method on the server require permission from the ExecutePermission Class.\n\n### Method endArgs\n\n    public void endArgs()\n\n### Method startArgs\n\n    public void startArgs()\n\n### Method setRealArg\n\n    public void setRealArg(Real arg)\n\n#### Parameters\n\narg  \n\n### Method setIntArg\n\n    public void setIntArg(int arg)\n\n#### Parameters\n\narg  \n\n### Method setStrArg\n\n    public void setStrArg(str arg)\n\n#### Parameters\n\narg  \n\n## Class XppPrePostArgs\n    class XppPrePostArgs extends XppEventArgs\n\nThe XppPrePostArgs class provides information about a publisher's arguments and return values for pre-handlers and post-handlers.\n\n### Remarks\n\nA publisher is a method that exposes pre-events and post-events.\n\n### Examples\n\n### Methods\n\n| Method                                                                                       | Description                                                                                                 |\n|----------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|\n| public boolean wrapper(str fieldName, AnyType value)                                         |                                                                                                             |\n| public struct args()                                                                         |                                                                                                             |\n| public boolean existsArg(str fieldName)                                                      | Checks the existence of the publisher's argument by name.                                                   |\n| public AnyType getArgNum(int argIndex)                                                       | Retrieves the ;publisher's argument by index.                                                               |\n| public int setArgNum(int argIndex, AnyType value)                                            | Sets the publisher's argument by index.                                                                     |\n| public AnyType value(str fieldName)                                                          |                                                                                                             |\n| public XppEventHandlerCalledWhen getCalledWhen()                                             | Retrieves a value that indicates whether the instance is currently serving a pre-handler or a post-handler. |\n| public AnyType getReturnValue()                                                              | Gets the publisher's return value.                                                                          |\n| public AnyType getThis()                                                                     | Gets the publisher's \"this\" reference.                                                                      |\n| public boolean removeArg(str fieldName)                                                      |                                                                                                             |\n| public int wrapper(str fieldName, AnyType value)                                             |                                                                                                             |\n| public int setReturnValue(AnyType retval)                                                    | Sets the publisher's return value.                                                                          |\n| public str isFirst()                                                                         |                                                                                                             |\n| public void setCalledWhen(XppEventHandlerCalledWhen calledWhen)                              | Sets whether the instance is currently serving a pre-handler or a post-handler.                             |\n| ::public static void setReturnValueEx(AnyType retval, XppPrePostArgs args)                   |                                                                                                             |\n| public void new(\\[AnyType thisPtr\\], \\[str args\\], \\[XppEventHandlerCalledWhen calledWhen\\]) | Initializes a new instance of the Object class.                                                             |\n\n### Method wrapper\n\n    public boolean wrapper(str fieldName, AnyType value)\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\nvalue  \n\n#### Return Value\n\n### Method args\n\n    public struct args()\n\n#### Return Value\n\n### Method existsArg\n\nChecks the existence of the publisher's argument by name.\n\n    public boolean existsArg(str fieldName)\n\n#### Parameters\n\nfieldName  \n\n#### Return Value\n\nA Boolean data type value that indicates whether the specified argument exists.\n\n#### Remarks\n\nArgument names are case insensitive.\n\n### Method getArgNum\n\nRetrieves the ;publisher's argument by index.\n\n    public AnyType getArgNum(int argIndex)\n\n#### Parameters\n\nargIndex  \nAn int index of the target argument.\n\n#### Return Value\n\nAn anytype value of the specified argument.\n\n#### Remarks\n\nThe index range is 0-based for static publishers but 1-based for instance publishers.\n\n### Method setArgNum\n\nSets the publisher's argument by index.\n\n    public int setArgNum(int argIndex, AnyType value)\n\n#### Parameters\n\nargIndex  \nAn anytype value to assign to the specified argument.\n\n<!-- -->\n\nvalue  \nAn anytype value to assign to the specified argument.\n\n#### Return Value\n\nAn int data type value of 1.\n\n#### Remarks\n\nThe index range is 0-based for static publishers but 1-based for instance publishers.\n\n### Method value\n\n    public AnyType value(str fieldName)\n\n#### Parameters\n\nfieldName  \n\n#### Return Value\n\n### Method getCalledWhen\n\nRetrieves a value that indicates whether the instance is currently serving a pre-handler or a post-handler.\n\n    public XppEventHandlerCalledWhen getCalledWhen()\n\n#### Return Value\n\nAn XppEventHandlerCalledWhen data type value that indicates whether the XppPrePostArgs instance is serving the pre-handlers or the post-handlers.\n\n### Method getReturnValue\n\nGets the publisher's return value.\n\n    public AnyType getReturnValue()\n\n#### Return Value\n\nAn anytype data type value that represents the publisher's return value.\n\n#### Remarks\n\nThis method is not intended for pre-handlers.\n\n### Method getThis\n\nGets the publisher's \"this\" reference.\n\n    public AnyType getThis()\n\n#### Return Value\n\nAn anytype data type value that represents the publisher's \"this\" reference.\n\n#### Remarks\n\nReturns a nullNothingnullptrunita null reference (Nothing in Visual Basic) reference if the publisher is static.\n\n### Method removeArg\n\n    public boolean removeArg(str fieldName)\n\n#### Parameters\n\nfieldName  \n\n#### Return Value\n\n### Method wrapper\n\n    public int wrapper(str fieldName, AnyType value)\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\nvalue  \n\n#### Return Value\n\n### Method setReturnValue\n\nSets the publisher's return value.\n\n    public int setReturnValue(AnyType retval)\n\n#### Parameters\n\nretval  \n\n#### Return Value\n\nAn int data type value of 1.\n\n#### Remarks\n\nThis method is not intended for pre-handlers or for publishers that return void.\n\n### Method isFirst\n\n    public str isFirst()\n\n#### Return Value\n\n### Method setCalledWhen\n\nSets whether the instance is currently serving a pre-handler or a post-handler.\n\n    public void setCalledWhen(XppEventHandlerCalledWhen calledWhen)\n\n#### Parameters\n\ncalledWhen  \n\n#### Remarks\n\nThis method must never be called explicitly from the pre-handler or post-handler code. This method is reserved for unit testing and auto-generated code only.\n\n### Method setReturnValueEx\n\n    public static void setReturnValueEx(AnyType retval, XppPrePostArgs args)\n\n#### Parameters\n\nretval  \n\n<!-- -->\n\nargs  \n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new([AnyType thisPtr], [str args], [XppEventHandlerCalledWhen calledWhen])\n\n#### Parameters\n\nthisPtr  \n\n<!-- -->\n\nargs  \n\n<!-- -->\n\ncalledWhen  \n\n## Class xRecord\n    class xRecord extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                     | Description                                                                                                                    |\n|----------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------|\n| public boolean aosValidateDelete()                                                                                         | Validates on the server that the specified record can be deleted from a table.                                                 |\n| public boolean aosValidateInsert()                                                                                         | Validates on the server that the specified record can be inserted.                                                             |\n| public boolean aosValidateRead()                                                                                           | Validates on the server that the specified record can be read.                                                                 |\n| public boolean aosValidateUpdate()                                                                                         | Validates on the server that the specified record can be updated.                                                              |\n| public container buf2con(\\[boolean packOrigBuffer\\])                                                                       | Packs the table buffers of an xRecord instance into an X++ container.                                                          |\n| public boolean canSubmitToWorkflow(\\[str workflowType\\])                                                                   | Indicates whether submission to workflow is possible.                                                                          |\n| public str caption()                                                                                                       | Gets and sets the caption property of a table.                                                                                 |\n| public boolean checkInvalidFieldAccess(\\[boolean checkInvalidFieldAccess\\])                                                | Gets and sets invalid field access.                                                                                            |\n| public boolean checkRecord(\\[boolean checkMandatoryFields\\])                                                               | Gets and sets the property that indicates whether to check mandatory fields.                                                   |\n| public boolean checkRestrictedDeleteActions(\\[boolean checkRestrictedDeleteActions\\])                                      | Gets and sets the property that indicates whether a record can be deleted.                                                     |\n| public SelectableDataArea company(\\[SelectableDataArea company\\])                                                          | Gets and sets the property that indicates a legal entity for the record.                                                       |\n| public Common con2buf(container container)                                                                                 | Unpacks a container into the table buffers.                                                                                    |\n| public ConcurrencyModel concurrencyModel(\\[ConcurrencyModel concurrencyModel\\])                                            | Gets and sets the default concurrency model to use to update records.                                                          |\n| public int context(\\[int newValue\\])                                                                                       | Gets and sets the context property.                                                                                            |\n| public Common data(\\[Common cursor\\])                                                                                      | Retrieves a row from the table.                                                                                                |\n| public FormObjectSet dataSource()                                                                                          | Retrieves the data source of the table.                                                                                        |\n| public boolean disableCache(\\[boolean newValue\\])                                                                          | Gets and sets the property that indicates whether caching is disabled.                                                         |\n| public boolean doValidateDelete()                                                                                          | Performs the action to validate that a record can be deleted.                                                                  |\n| public boolean equal(Common cursor)                                                                                        | Determines whether the specified object is equal to the current one.                                                           |\n| public AccessRight fieldAccessRight(FieldName fieldName)                                                                   | Returns the field access right.                                                                                                |\n| public AccessRight fieldBufferAccessRight(FieldName fieldName)                                                             | Returns the field access right for the current record.                                                                         |\n| public FieldState fieldState(FieldId fieldId, \\[FieldState state\\])                                                        | Sets or returns the state of a field in the table buffer.                                                                      |\n| public container getAllowRedefault()                                                                                       | Returns the list of fields that are allowed to re-default.                                                                     |\n| public container getDefaultingDependencies()                                                                               | Returns the container that holds defaulting dependencies.                                                                      |\n| public TableExtension getExtension()                                                                                       | Returns the table extension.                                                                                                   |\n| public AnyType getFieldValue(str fieldName, \\[int arrayIndex\\])                                                            | Gets the value of the specified field from a table buffer.                                                                     |\n| public str getInstanceRelationType()                                                                                       | Returns the table name that corresponds to the InstanceRelationType ID.                                                        |\n| public str getPhysicalTableName()                                                                                          | Return the physical table name, which, in the case of the SQL Temp DB table, is the table instance name.                       |\n| public PresenceInfo getPresenceFieldData(FieldId fieldId, AnyType fieldValue)                                              | Retrieves the PresenceInfo value from the specified field.                                                                     |\n| public str getSQLStatement()                                                                                               | Gets the SQL statement that is used to return records from the database.                                                       |\n| public Common getTableInInstanceHierarchy(TableId tableId)                                                                 |                                                                                                                                |\n| public TableType getTableType()                                                                                            | Indicates the type of the table.                                                                                               |\n| public boolean hasRelatedTable(str relatedRoleName)                                                                        | Indicates whether a foreign key constraint buffer is linked with the table.                                                    |\n| public str helpField(FieldId fieldId)                                                                                      | Retrieves a string that contains the Help text for the specified field.                                                        |\n| public FieldState inputStatus(\\[FieldState inputStatus\\])                                                                  | Sets or returns the current input status of the table buffer.                                                                  |\n| public boolean interactiveContext(\\[boolean context\\])                                                                     | Sets or returns the current interactive context of the table buffer.                                                           |\n| public boolean isFieldDataRetrieved(str fieldName, \\[int arrayIndex\\])                                                     | Checks whether the data of the given field has been retrieved.                                                                 |\n| public boolean isFieldSet(FieldId fieldId)                                                                                 | Checks whether a field has a Set or Defaulted state.                                                                           |\n| public boolean isFormDataSource()                                                                                          | Indicates whether the data source is a form.                                                                                   |\n| public boolean isNewRecord()                                                                                               | Returns true if the record is a new record that hasn't been persisted yet.                                                     |\n| public boolean isPartOfUOWSaveChanges()                                                                                    |                                                                                                                                |\n| public boolean isTempDb()                                                                                                  | Indicates whether the type of the table is SQL TempDB.                                                                         |\n| public boolean isTmp()                                                                                                     | Indicates whether this is a temporary table.                                                                                   |\n| public Common joinChild()                                                                                                  | Finds the join child of the current record.                                                                                    |\n| public Common joinParent()                                                                                                 | Finds the join parent of the current record.                                                                                   |\n| public boolean linkPhysicalTableInstance(\\[Common record\\])                                                                | Checks whether there is a link for the physical table instance for the record.                                                 |\n| public Common orig()                                                                                                       | Retrieves the original values of the current record.                                                                           |\n| public boolean overwriteSystemfields(\\[boolean allowOverwrite\\])                                                           | Gets and sets the property that indicates whether system fields can be overwritten.                                            |\n| public boolean queryTimedOut()                                                                                             | Indicates whether the query exceeded the time limit for execution.                                                             |\n| public int queryTimeout(\\[int seconds\\], \\[boolean raiseException\\])                                                       | Gets and sets the property that indicates the time limit for the execution of a query.                                         |\n| public boolean readCommittedLock(\\[boolean readCommittedLock\\])                                                            |                                                                                                                                |\n| public boolean readPast(\\[boolean skipLockedRows\\])                                                                        | Gets and sets the property that indicates whether to skip rows that are locked by other processes when a record is read.       |\n| public boolean recordLevelSecurity(\\[boolean newValue\\])                                                                   | Gets and sets the property that indicates whether to apply security on a record level.                                         |\n| public Common relatedTable(str name, \\[Common buffer\\])                                                                    | Sets or returns the related buffer of a link of a table buffer.                                                                |\n| public Int64 RowCount()                                                                                                    | Retrieves the number of rows in the table.                                                                                     |\n| public boolean selectForUpdate(\\[boolean lockRecordsExclusive\\])                                                           | Gets and sets the property that indicates whether to select records for update when they are read.                             |\n| public boolean selectLocked(\\[boolean lockRecordsShared\\])                                                                 | Indicates whether to select locked records.                                                                                    |\n| public Common selectRefRecord(FieldId referenceFieldId)                                                                    | Selects the record by referenced field ID.                                                                                     |\n| public boolean selectWithRepeatableRead(\\[boolean useRepeatableRead\\])                                                     | Gets and sets the property that indicates whether repeatable read is enabled.                                                  |\n| public boolean setTempDB()                                                                                                 |                                                                                                                                |\n| public boolean setTmp()                                                                                                    | Sets the table so that it is not persisted to the database.                                                                    |\n| public boolean skipAosValidation(\\[boolean newValue\\])                                                                     | Gets and sets the property that indicates whether to skip validation of Finance and Operations Application Object Server (AOS). |\n| public boolean skipDatabaseLog(\\[boolean newValue\\])                                                                       | Gets and sets the property that indicates whether to skip database log requests.                                               |\n| public boolean skipDataMethods(\\[boolean newValue\\])                                                                       | Gets and sets the property that indicates whether to discard overloaded methods.                                               |\n| public boolean skipDeleteActions(\\[boolean newValue\\])                                                                     | Gets and sets the property that indicates whether to skip delete actions on the table.                                         |\n| public boolean skipDeleteMethod(\\[boolean newValue\\])                                                                      | Gets and sets the property that indicates whether to discard overloaded methods.                                               |\n| public boolean skipEvents(\\[boolean newValue\\])                                                                            | Provides an option to turn off calling the Application.event\\* methods for the lifetime of an xRecord object.                  |\n| public boolean skipPostLoad(\\[boolean newValue\\])                                                                          | Gets and sets the property that indicates whether to skip executing the xRecord.postLoad method on the table.                  |\n| public boolean skipTTSCheck(\\[boolean newValue\\])                                                                          | Gets and sets the property that indicates whether to skip the check to determine whether the record is selected for update.    |\n| public boolean suppressWarnings(\\[boolean newValue\\])                                                                      | Gets and sets the property that indicates whether to suppress warnings for this pointer.                                       |\n| public AccessRight tableAccessRight()                                                                                      | Returns the table access right.                                                                                                |\n| public AccessRight tableBufferAccessRight()                                                                                | Returns the table access right for the current record.                                                                         |\n| public boolean takeOwnershipOfTempDBTable(boolean newValue)                                                                |                                                                                                                                |\n| public str toolTipField(FieldId fieldId)                                                                                   | Retrieves the HelpText value for the specified field.                                                                          |\n| public str toolTipRecord()                                                                                                 | Retrieves the ToolTip value for the current record.                                                                            |\n| public int usageCount()                                                                                                    | Retrieves the current number of references (the value of the reference counter) that the object has.                           |\n| public boolean useExistingTempDBTable(str physicalTempTableName)                                                           |                                                                                                                                |\n| public boolean validateDelete()                                                                                            | Determines whether the current record is valid and ready to be deleted from the database.                                      |\n| public boolean validateField(FieldId fieldIdToCheck)                                                                       | Determines whether the specified field is valid.                                                                               |\n| public boolean validateFieldValue(FieldName fieldName, \\[int arrayIndex\\])                                                 |                                                                                                                                |\n| private container validateRelations(\\[boolean onlyValidateCompositeRelations\\], \\[boolean onlyValidateModifiedRelations\\]) |                                                                                                                                |\n| public boolean validateWrite()                                                                                             | Determines whether the current record is valid and ready to be written.                                                        |\n| public ValidTimeStateUpdate validTimeStateUpdateMode(ValidTimeStateUpdate validTimeStateUpdateMode)                        | Sets a valid time state update mode on the cursor.                                                                             |\n| public CachedHow wasCached()                                                                                               | Specifies the location from which the data was retrieved.                                                                      |\n| public str xml(\\[int indent\\])                                                                                             | Retrieves an XML string that represents the current object.                                                                    |\n| public void doDelete()                                                                                                     | Deletes the current record from the table and bypasses any additional logic in the delete method of the table.                 |\n| public void update()                                                                                                       | Updates the current record.                                                                                                    |\n| public void merge(Common mergeInto)                                                                                        | Merges the current table with the specified table.                                                                             |\n| public void clear()                                                                                                        | Removes all rows from the table buffer.                                                                                        |\n| public void setXDSContext(\\[str contextString\\])                                                                           | Sets new XDS context.                                                                                                          |\n| public void renamePrimaryKey()                                                                                             | Renames the foreign keys in other tables according to the change of the corresponding primary key value in this table.         |\n| public void dispose()                                                                                                      | Releases resources that are used by the xRecord object.                                                                        |\n| public void setConnection(Connection connection)                                                                           | Sets the user connection for this table.                                                                                       |\n| public void delete()                                                                                                       | Deletes the current record from the table.                                                                                     |\n| public void defaultField(FieldId fieldId)                                                                                  | Populates default values in a field in the table.                                                                              |\n| private void dbOpInTransaction(\\[boolean isWriteOperation\\])                                                               | Makes sure that database operations are correctly closed if they fail.                                                         |\n| public void write()                                                                                                        | Updates a record if it exists; otherwise, inserts a record.                                                                    |\n| public void preRemoting()                                                                                                  | Is executed before a cross-tier call is about to be executed for the table that would pack its state to the other tier.        |\n| public void modifiedFieldValue(FieldName fieldName, \\[int arrayIndex\\])                                                    | Modifies the specified field to the original value.                                                                            |\n| public void defaultRow()                                                                                                   | Populates default values in fields in the table in the non-interactive case.                                                   |\n| public void reread()                                                                                                       | Rereads the record from the table.                                                                                             |\n| public void modifiedField(FieldId fieldId)                                                                                 | Modifies the specified field to the original.                                                                                  |\n| public void ttsabort()                                                                                                     | Aborts a transaction that was started by a call to the ttsbegin method.                                                        |\n| public void insert()                                                                                                       | Inserts the record into the table.                                                                                             |\n| public void doClear()                                                                                                      | Removes all rows from the table buffer and bypasses any additional logic in the clear method of the table.                     |\n| public void initValue()                                                                                                    | Initializes a field to the default value.                                                                                      |\n| public void doUpdate()                                                                                                     | Updates the current record and bypasses any additional logic in the update method of the table.                                |\n| public void ttsbegin()                                                                                                     | Starts a transaction that can be either committed by the ttscommit method or aborted by the ttsabort method.                   |\n| public void setCrossPartition(boolean newValue)                                                                            | Sets or resets cross-partitioning for the table.                                                                               |\n| public void setTmpData(Common cursor)                                                                                      | Sets the contents of the temporary table to the specified data.                                                                |\n| public void ttscommit()                                                                                                    | Commits a transaction that was started by a call to the ttsbegin method.                                                       |\n| public void setFieldValue(str fieldName, AnyType value, \\[int arrayIndex\\])                                                | Sets the field value in the record buffer.                                                                                     |\n| public void doInsert()                                                                                                     | Inserts the record into the table and bypasses any additional logic in the insert method of the table.                         |\n| public void setSQLTracing(\\[boolean tracingmode\\])                                                                         | Enables or disables SQL tracing mode.                                                                                          |\n| public void postLoad()                                                                                                     | Is executed after a record is read.                                                                                            |\n\n### Method aosValidateDelete\n\nValidates on the server that the specified record can be deleted from a table.\n\n    public boolean aosValidateDelete()\n\n#### Return Value\n\ntrue if the record can be deleted; otherwise, false.\n\n### Method aosValidateInsert\n\nValidates on the server that the specified record can be inserted.\n\n    public boolean aosValidateInsert()\n\n#### Return Value\n\ntrue if the record can be inserted; otherwise, false.\n\n### Method aosValidateRead\n\nValidates on the server that the specified record can be read.\n\n    public boolean aosValidateRead()\n\n#### Return Value\n\ntrue if the record can be read; otherwise, false.\n\n### Method aosValidateUpdate\n\nValidates on the server that the specified record can be updated.\n\n    public boolean aosValidateUpdate()\n\n#### Return Value\n\ntrue if the record can be updated; otherwise, false.\n\n### Method buf2con\n\nPacks the table buffers of an xRecord instance into an X++ container.\n\n    public container buf2con([boolean packOrigBuffer])\n\n#### Parameters\n\npackOrigBuffer  \n\n#### Return Value\n\nA container that holds packed buffers.\n\n### Method canSubmitToWorkflow\n\nIndicates whether submission to workflow is possible.\n\n    public boolean canSubmitToWorkflow([str workflowType])\n\n#### Parameters\n\nworkflowType  \n\n#### Return Value\n\ntrue if submission is possible; otherwise, false.\n\n### Method caption\n\nGets and sets the caption property of a table.\n\n    public str caption()\n\n#### Return Value\n\nThe caption of the table.\n\n### Method checkInvalidFieldAccess\n\nGets and sets invalid field access.\n\n    public boolean checkInvalidFieldAccess([boolean checkInvalidFieldAccess])\n\n#### Parameters\n\ncheckInvalidFieldAccess  \nThe value to set; optional.\n\n#### Return Value\n\ntrue if invalid field access is set; otherwise, false.\n\n### Method checkRecord\n\nGets and sets the property that indicates whether to check mandatory fields.\n\n    public boolean checkRecord([boolean checkMandatoryFields])\n\n#### Parameters\n\ncheckMandatoryFields  \nA Boolean value that indicates whether to check mandatory fields; optional.\n\n#### Return Value\n\ntrue if mandatory fields are checked; otherwise, false.\n\n### Method checkRestrictedDeleteActions\n\nGets and sets the property that indicates whether a record can be deleted.\n\n    public boolean checkRestrictedDeleteActions([boolean checkRestrictedDeleteActions])\n\n#### Parameters\n\ncheckRestrictedDeleteActions  \nA Boolean value that indicates whether a record can be deleted; optional.\n\n#### Return Value\n\ntrue if the record can be deleted; otherwise, false.\n\n#### Remarks\n\nThe property is based on delete actions for a table, and whether the table allows for delete actions when corresponding records are in corresponding tables.\n\n### Method company\n\nGets and sets the property that indicates a legal entity for the record.\n\n    public SelectableDataArea company([SelectableDataArea company])\n\n#### Parameters\n\ncompany  \nA new legal entity for the record; optional.\n\n#### Return Value\n\nThe legal entity ID.\n\n### Method con2buf\n\nUnpacks a container into the table buffers.\n\n    public Common con2buf(container container)\n\n#### Parameters\n\ncontainer  \n\n#### Return Value\n\n### Method concurrencyModel\n\nGets and sets the default concurrency model to use to update records.\n\n    public ConcurrencyModel concurrencyModel([ConcurrencyModel concurrencyModel])\n\n#### Parameters\n\nconcurrencyModel  \nThe new concurrency model, by default; optional.\n\n#### Return Value\n\nThe current value of the concurrency model property, by default.\n\n### Method context\n\nGets and sets the context property.\n\n    public int context([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value of the context property; optional.\n\n#### Return Value\n\nThe current value of the context property.\n\n### Method data\n\nRetrieves a row from the table.\n\n    public Common data([Common cursor])\n\n#### Parameters\n\ncursor  \nThe row to retrieve; optional.\n\n#### Return Value\n\nThe record buffer.\n\n#### Remarks\n\nPartly because scenarios that involve table inheritance, we recommend that you instead use the following methods on the Global class: con2buf, buf2con, and buf2buf.\n\n### Method dataSource\n\nRetrieves the data source of the table.\n\n    public FormObjectSet dataSource()\n\n#### Return Value\n\nThe data source of the table.\n\n### Method disableCache\n\nGets and sets the property that indicates whether caching is disabled.\n\n    public boolean disableCache([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether caching is disabled.\n\n#### Return Value\n\nThe new value of the disable cache property.\n\n### Method doValidateDelete\n\nPerforms the action to validate that a record can be deleted.\n\n    public boolean doValidateDelete()\n\n#### Return Value\n\n### Method equal\n\nDetermines whether the specified object is equal to the current one.\n\n    public boolean equal(Common cursor)\n\n#### Parameters\n\ncursor  \nThe object to check for equality.\n\n#### Return Value\n\ntrue if the objects are equal; otherwise, false.\n\n#### Remarks\n\nThis method is overridden. The default implementation of the Object::equal method supports only reference equality. Derived classes can override the Object::equal method to support value equality.\n\n### Method fieldAccessRight\n\nReturns the field access right.\n\n    public AccessRight fieldAccessRight(FieldName fieldName)\n\n#### Parameters\n\nfieldName  \nThe name of the field for which to obtain the field access right.\n\n#### Return Value\n\nThe field access right for the field.\n\n### Method fieldBufferAccessRight\n\nReturns the field access right for the current record.\n\n    public AccessRight fieldBufferAccessRight(FieldName fieldName)\n\n#### Parameters\n\nfieldName  \nThe name of the field for which to obtain the field access right.\n\n#### Return Value\n\nThe field access right.\n\n### Method fieldState\n\nSets or returns the state of a field in the table buffer.\n\n    public FieldState fieldState(FieldId fieldId, [FieldState state])\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\nstate  \n\n#### Return Value\n\nThe old state of the field.\n\n### Method getAllowRedefault\n\nReturns the list of fields that are allowed to re-default.\n\n    public container getAllowRedefault()\n\n#### Return Value\n\nThe container that holds the fields.\n\n### Method getDefaultingDependencies\n\nReturns the container that holds defaulting dependencies.\n\n    public container getDefaultingDependencies()\n\n#### Return Value\n\nThe container that holds defaulting dependencies.\n\n### Method getExtension\n\nReturns the table extension.\n\n    public TableExtension getExtension()\n\n#### Return Value\n\nThe table extension.\n\n### Method getFieldValue\n\nGets the value of the specified field from a table buffer.\n\n    public AnyType getFieldValue(str fieldName, [int arrayIndex])\n\n#### Parameters\n\nfieldName  \nThe array index of the field; optional.\n\n<!-- -->\n\narrayIndex  \nThe array index of the field; optional.\n\n#### Return Value\n\nThe value of a field.\n\n#### Remarks\n\nThe arrayIndex parameter only applies to array fields. Either omit this parameter or specify 0 (zero) for fields that are not arrays.This method throws an ArgumentOutOfRange exception if the specified field is unknown.\n\n### Method getInstanceRelationType\n\nReturns the table name that corresponds to the InstanceRelationType ID.\n\n    public str getInstanceRelationType()\n\n#### Return Value\n\nThe table name that corresponds to the InstanceRelationType ID.\n\n### Method getPhysicalTableName\n\nReturn the physical table name, which, in the case of the SQL Temp DB table, is the table instance name.\n\n    public str getPhysicalTableName()\n\n#### Return Value\n\nThe physical table name or the table instance name.\n\n### Method getPresenceFieldData\n\nRetrieves the PresenceInfo value from the specified field.\n\n    public PresenceInfo getPresenceFieldData(FieldId fieldId, AnyType fieldValue)\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\nfieldValue  \n\n#### Return Value\n\n### Method getSQLStatement\n\nGets the SQL statement that is used to return records from the database.\n\n    public str getSQLStatement()\n\n#### Return Value\n\nThe string that contains the SQL statement.\n\n### Method getTableInInstanceHierarchy\n\n    public Common getTableInInstanceHierarchy(TableId tableId)\n\n#### Parameters\n\ntableId  \n\n#### Return Value\n\n### Method getTableType\n\nIndicates the type of the table.\n\n    public TableType getTableType()\n\n#### Return Value\n\nThe type of the table (Regular, InMemory, or TempDB).\n\n### Method hasRelatedTable\n\nIndicates whether a foreign key constraint buffer is linked with the table.\n\n    public boolean hasRelatedTable(str relatedRoleName)\n\n#### Parameters\n\nrelatedRoleName  \n\n#### Return Value\n\ntrue if a foreign key constraint buffer is linked with the table; otherwise, false.\n\n### Method helpField\n\nRetrieves a string that contains the Help text for the specified field.\n\n    public str helpField(FieldId fieldId)\n\n#### Parameters\n\nfieldId  \nThe field for which to retrieve the Help text.\n\n#### Return Value\n\nThe Help text for the specified field.\n\n### Method inputStatus\n\nSets or returns the current input status of the table buffer.\n\n    public FieldState inputStatus([FieldState inputStatus])\n\n#### Parameters\n\ninputStatus  \n\n#### Return Value\n\nThe old input status.\n\n### Method interactiveContext\n\nSets or returns the current interactive context of the table buffer.\n\n    public boolean interactiveContext([boolean context])\n\n#### Parameters\n\ncontext  \n\n#### Return Value\n\nThe current interactive context of the table buffer.\n\n### Method isFieldDataRetrieved\n\nChecks whether the data of the given field has been retrieved.\n\n    public boolean isFieldDataRetrieved(str fieldName, [int arrayIndex])\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\ntrue if the data has been retrieved; otherwise, false.\n\n### Method isFieldSet\n\nChecks whether a field has a Set or Defaulted state.\n\n    public boolean isFieldSet(FieldId fieldId)\n\n#### Parameters\n\nfieldId  \n\n#### Return Value\n\ntrue if field is has a Set or Defaulted state; otherwise, false.\n\n### Method isFormDataSource\n\nIndicates whether the data source is a form.\n\n    public boolean isFormDataSource()\n\n#### Return Value\n\ntrue if the data source is a form; otherwise, false.\n\n### Method isNewRecord\n\nReturns true if the record is a new record that hasn't been persisted yet.\n\n    public boolean isNewRecord()\n\n#### Return Value\n\ntrue if the record is a new record that hasn't been persisted yet; otherwise, false.\n\n### Method isPartOfUOWSaveChanges\n\n    public boolean isPartOfUOWSaveChanges()\n\n#### Return Value\n\n### Method isTempDb\n\nIndicates whether the type of the table is SQL TempDB.\n\n    public boolean isTempDb()\n\n#### Return Value\n\ntrue if the type of the table is SQL TempDB; otherwise, false.\n\n### Method isTmp\n\nIndicates whether this is a temporary table.\n\n    public boolean isTmp()\n\n#### Return Value\n\ntrue if this is a temporary table; otherwise, false.\n\n### Method joinChild\n\nFinds the join child of the current record.\n\n    public Common joinChild()\n\n#### Return Value\n\nThe join child of the current record.\n\n### Method joinParent\n\nFinds the join parent of the current record.\n\n    public Common joinParent()\n\n#### Return Value\n\nThe join parent of the current record.\n\n### Method linkPhysicalTableInstance\n\nChecks whether there is a link for the physical table instance for the record.\n\n    public boolean linkPhysicalTableInstance([Common record])\n\n#### Parameters\n\nrecord  \n\n#### Return Value\n\nA Boolean value that indicates whether a link is available.\n\n### Method orig\n\nRetrieves the original values of the current record.\n\n    public Common orig()\n\n#### Return Value\n\n#### Remarks\n\nPartly because of scenarios that involve table inheritance, we recommend that you instead use the following methods on the Global class: con2buf, buf2con, and buf2buf.\n\n### Method overwriteSystemfields\n\nGets and sets the property that indicates whether system fields can be overwritten.\n\n    public boolean overwriteSystemfields([boolean allowOverwrite])\n\n#### Parameters\n\nallowOverwrite  \nA Boolean value that indicates whether system fields can be overwritten; optional.\n\n#### Return Value\n\ntrue if system fields can be overwritten; otherwise, false.\n\n### Method queryTimedOut\n\nIndicates whether the query exceeded the time limit for execution.\n\n    public boolean queryTimedOut()\n\n#### Return Value\n\ntrue if the query exceeded the time limit for execution; otherwise, false.\n\n### Method queryTimeout\n\nGets and sets the property that indicates the time limit for the execution of a query.\n\n    public int queryTimeout([int seconds], [boolean raiseException])\n\n#### Parameters\n\nseconds  \n\n<!-- -->\n\nraiseException  \n\n#### Return Value\n\nThe current value of the query time-out property.\n\n### Method readCommittedLock\n\n    public boolean readCommittedLock([boolean readCommittedLock])\n\n#### Parameters\n\nreadCommittedLock  \n\n#### Return Value\n\n### Method readPast\n\nGets and sets the property that indicates whether to skip rows that are locked by other processes when a record is read.\n\n    public boolean readPast([boolean skipLockedRows])\n\n#### Parameters\n\nskipLockedRows  \nA Boolean value that indicates whether to skip rows that are locked; optional.\n\n#### Return Value\n\ntrue if locked rows should be skipped; otherwise, false.\n\n### Method recordLevelSecurity\n\nGets and sets the property that indicates whether to apply security on a record level.\n\n    public boolean recordLevelSecurity([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether to apply security on a record level; optional.\n\n#### Return Value\n\ntrue if security should be applied on a record level; otherwise, false.\n\n### Method relatedTable\n\nSets or returns the related buffer of a link of a table buffer.\n\n    public Common relatedTable(str name, [Common buffer])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\nbuffer  \n\n#### Return Value\n\nThe related buffer of a link of a table buffer.\n\n### Method RowCount\n\nRetrieves the number of rows in the table.\n\n    public Int64 RowCount()\n\n#### Return Value\n\nThe number of rows in the table.\n\n### Method selectForUpdate\n\nGets and sets the property that indicates whether to select records for update when they are read.\n\n    public boolean selectForUpdate([boolean lockRecordsExclusive])\n\n#### Parameters\n\nlockRecordsExclusive  \nA Boolean value that indicates whether to read records for update; optional.\n\n#### Return Value\n\ntrue if records should be read for update; otherwise, false.\n\n### Method selectLocked\n\nIndicates whether to select locked records.\n\n    public boolean selectLocked([boolean lockRecordsShared])\n\n#### Parameters\n\nlockRecordsShared  \nA Boolean value that indicates whether to select locked records.\n\n#### Return Value\n\ntrue if locked records should be selected; otherwise, false.\n\n### Method selectRefRecord\n\nSelects the record by referenced field ID.\n\n    public Common selectRefRecord(FieldId referenceFieldId)\n\n#### Parameters\n\nreferenceFieldId  \nThe referenced field ID.\n\n#### Return Value\n\nThe record buffer.\n\n### Method selectWithRepeatableRead\n\nGets and sets the property that indicates whether repeatable read is enabled.\n\n    public boolean selectWithRepeatableRead([boolean useRepeatableRead])\n\n#### Parameters\n\nuseRepeatableRead  \nA Boolean value that indicates whether repeatable read is enabled; optional.\n\n#### Return Value\n\ntrue if repeatable read is enabled; otherwise, false.\n\n### Method setTempDB\n\n    public boolean setTempDB()\n\n#### Return Value\n\n### Method setTmp\n\nSets the table so that it is not persisted to the database.\n\n    public boolean setTmp()\n\n#### Return Value\n\ntrue if the operation was successful; otherwise, false.\n\n### Method skipAosValidation\n\nGets and sets the property that indicates whether to skip validation of Finance and Operations Application Object Server (AOS).\n\n    public boolean skipAosValidation([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether to skip AOS validation.\n\n#### Return Value\n\ntrue if AOS validation should be skipped; otherwise, false.\n\n#### Remarks\n\nIf an attacker can control input to the skipAosValidation method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the SkipAOSValidationPermission class. Make sure that the user has development user rights by setting the security key to SysDevelopment on the control that calls this method.\n\n### Method skipDatabaseLog\n\nGets and sets the property that indicates whether to skip database log requests.\n\n    public boolean skipDatabaseLog([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether to skip database log requests; optional.\n\n#### Return Value\n\ntrue if database log requests should be skipped; otherwise, false.\n\n### Method skipDataMethods\n\nGets and sets the property that indicates whether to discard overloaded methods.\n\n    public boolean skipDataMethods([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether to discard overloaded methods; optional.\n\n#### Return Value\n\ntrue if overloaded methods should be discarded; otherwise, false.\n\n### Method skipDeleteActions\n\nGets and sets the property that indicates whether to skip delete actions on the table.\n\n    public boolean skipDeleteActions([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether to ignore requests to delete records; optional.\n\n#### Return Value\n\ntrue if requests to delete records should be ignored; otherwise, false.\n\n#### Remarks\n\nThis method works only when you are using a set-based operation, such as the delete\\_from statement. If you use it on a row-based operation, such as the xRecord.delete method, the property will not be respected, and the delete action will still be called.\n\n### Method skipDeleteMethod\n\nGets and sets the property that indicates whether to discard overloaded methods.\n\n    public boolean skipDeleteMethod([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether to discard overloaded methods; optional.\n\n#### Return Value\n\ntrue if overloaded methods should be discarded; otherwise, false.\n\n### Method skipEvents\n\nProvides an option to turn off calling the Application.event\\* methods for the lifetime of an xRecord object.\n\n    public boolean skipEvents([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether to skip events; optional.\n\n#### Return Value\n\ntrue if events are skipped; otherwise, false.\n\n#### Remarks\n\nThis method resembles the xRecord.skipDatabaseLog method. The skipEvents method is also used internally in the kernel to skip events that make no sense to generate; this is consistent with the current behavior of the xRecord.skipDatabaseLog method:\n\n-   The Application.deleteCompany method: Event generation is turned off for the duration of a company delete operation. This is an admin operation, and it could cause performance issues to support events in this case.\n-   The SqlDataDictionary.tableDelete method: Event generation is turned off for the duration of a table delete. This is an admin operation, and it could cause performance issues to support events in this case.\n-   The RecordInsertList class, which implements array insert capabilities in the kernel, takes an optional argument, \\_skipEvents = false, in the new method that will conditionally skip events as specified by a developer. Even if events are not skipped, this will not make the kernel rewrite the SQL.\n-   When a primary key is renamed, event generation is turned off for the duration of the rename operation. This includes a primary key in one record and can include a foreign key in many records. After the rename operation, the eventRenameKey method is called.\n\n### Method skipPostLoad\n\nGets and sets the property that indicates whether to skip executing the xRecord.postLoad method on the table.\n\n    public boolean skipPostLoad([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether to skip executing the postLoad method on the table; optional.\n\n#### Return Value\n\ntrue to skip executing the postLoad method; otherwise, false.\n\n### Method skipTTSCheck\n\nGets and sets the property that indicates whether to skip the check to determine whether the record is selected for update.\n\n    public boolean skipTTSCheck([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether to skip the check; optional.\n\n#### Return Value\n\ntrue if the TTS check should be skipped; otherwise, false.\n\n### Method suppressWarnings\n\nGets and sets the property that indicates whether to suppress warnings for this pointer.\n\n    public boolean suppressWarnings([boolean newValue])\n\n#### Parameters\n\nnewValue  \nA Boolean value that indicates whether to suppress warnings for this pointer; optional.\n\n#### Return Value\n\ntrue if warnings for this pointer should be suppressed; otherwise, false.\n\n### Method tableAccessRight\n\nReturns the table access right.\n\n    public AccessRight tableAccessRight()\n\n#### Return Value\n\nThe table access right value.\n\n### Method tableBufferAccessRight\n\nReturns the table access right for the current record.\n\n    public AccessRight tableBufferAccessRight()\n\n#### Return Value\n\nThe table access right for the current record.\n\n### Method takeOwnershipOfTempDBTable\n\n    public boolean takeOwnershipOfTempDBTable(boolean newValue)\n\n#### Parameters\n\nnewValue  \n\n#### Return Value\n\n### Method toolTipField\n\nRetrieves the HelpText value for the specified field.\n\n    public str toolTipField(FieldId fieldId)\n\n#### Parameters\n\nfieldId  \nThe field for which to retrieve the HelpText value.\n\n#### Return Value\n\nThe HelpText value of the specified field.\n\n### Method toolTipRecord\n\nRetrieves the ToolTip value for the current record.\n\n    public str toolTipRecord()\n\n#### Return Value\n\nThe ToolTip value for the current record.\n\n### Method usageCount\n\nRetrieves the current number of references (the value of the reference counter) that the object has.\n\n    public int usageCount()\n\n#### Return Value\n\nThe current number of references that the object has.\n\n#### Remarks\n\nThis method is overridden. When an object is created, its reference counter equals 1. When a new reference is created, its value increases. As a reference goes out of scope, its value decreases.\n\n### Method useExistingTempDBTable\n\n    public boolean useExistingTempDBTable(str physicalTempTableName)\n\n#### Parameters\n\nphysicalTempTableName  \n\n#### Return Value\n\n### Method validateDelete\n\nDetermines whether the current record is valid and ready to be deleted from the database.\n\n    public boolean validateDelete()\n\n#### Return Value\n\ntrue if the current record can be deleted; otherwise, false.\n\n### Method validateField\n\nDetermines whether the specified field is valid.\n\n    public boolean validateField(FieldId fieldIdToCheck)\n\n#### Parameters\n\nfieldIdToCheck  \nThe field ID of the field to validate.\n\n#### Return Value\n\ntrue if the specified field is valid; otherwise, false.\n\n### Method validateFieldValue\n\n    public boolean validateFieldValue(FieldName fieldName, [int arrayIndex])\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method validateRelations\n\n    private container validateRelations([boolean onlyValidateCompositeRelations], [boolean onlyValidateModifiedRelations])\n\n#### Parameters\n\nonlyValidateCompositeRelations  \n\n<!-- -->\n\nonlyValidateModifiedRelations  \n\n#### Return Value\n\n### Method validateWrite\n\nDetermines whether the current record is valid and ready to be written.\n\n    public boolean validateWrite()\n\n#### Return Value\n\ntrue if the current record can be written; otherwise, false.\n\n### Method validTimeStateUpdateMode\n\nSets a valid time state update mode on the cursor.\n\n    public ValidTimeStateUpdate validTimeStateUpdateMode(ValidTimeStateUpdate validTimeStateUpdateMode)\n\n#### Parameters\n\nvalidTimeStateUpdateMode  \n\n#### Return Value\n\nThe old value of the valid time state update mode.\n\n### Method wasCached\n\nSpecifies the location from which the data was retrieved.\n\n    public CachedHow wasCached()\n\n#### Return Value\n\nA CachedHow enumeration value that indicates the location from which the data was retrieved.\n\n### Method xml\n\nRetrieves an XML string that represents the current object.\n\n    public str xml([int indent])\n\n#### Parameters\n\nindent  \nAn integer that indicates the number of spaces to use for indentation in the XML string.\n\n#### Return Value\n\nAn XML string that represents the current object.\n\n#### Remarks\n\nThis method can be overridden to return values that are meaningful for that type.\n\n### Method doDelete\n\nDeletes the current record from the table and bypasses any additional logic in the delete method of the table.\n\n    public void doDelete()\n\n### Method update\n\nUpdates the current record.\n\n    public void update()\n\n### Method merge\n\nMerges the current table with the specified table.\n\n    public void merge(Common mergeInto)\n\n#### Parameters\n\nmergeInto  \nThe table to merge with.\n\n### Method clear\n\nRemoves all rows from the table buffer.\n\n    public void clear()\n\n### Method setXDSContext\n\nSets new XDS context.\n\n    public void setXDSContext([str contextString])\n\n#### Parameters\n\ncontextString  \n\n### Method renamePrimaryKey\n\nRenames the foreign keys in other tables according to the change of the corresponding primary key value in this table.\n\n    public void renamePrimaryKey()\n\n### Method dispose\n\nReleases resources that are used by the xRecord object.\n\n    public void dispose()\n\n### Method setConnection\n\nSets the user connection for this table.\n\n    public void setConnection(Connection connection)\n\n#### Parameters\n\nconnection  \n\n### Method delete\n\nDeletes the current record from the table.\n\n    public void delete()\n\n### Method defaultField\n\nPopulates default values in a field in the table.\n\n    public void defaultField(FieldId fieldId)\n\n#### Parameters\n\nfieldId  \n\n### Method dbOpInTransaction\n\nMakes sure that database operations are correctly closed if they fail.\n\n    private void dbOpInTransaction([boolean isWriteOperation])\n\n#### Parameters\n\nisWriteOperation  \nA Boolean value that indicates whether the operation is a write operation; optional.\n\n### Method write\n\nUpdates a record if it exists; otherwise, inserts a record.\n\n    public void write()\n\n### Method preRemoting\n\nIs executed before a cross-tier call is about to be executed for the table that would pack its state to the other tier.\n\n    public void preRemoting()\n\n### Method modifiedFieldValue\n\nModifies the specified field to the original value.\n\n    public void modifiedFieldValue(FieldName fieldName, [int arrayIndex])\n\n#### Parameters\n\nfieldName  \nThe array index of the field; optional.\n\n<!-- -->\n\narrayIndex  \nThe array index of the field; optional.\n\n### Method defaultRow\n\nPopulates default values in fields in the table in the non-interactive case.\n\n    public void defaultRow()\n\n### Method reread\n\nRereads the record from the table.\n\n    public void reread()\n\n### Method modifiedField\n\nModifies the specified field to the original.\n\n    public void modifiedField(FieldId fieldId)\n\n#### Parameters\n\nfieldId  \nThe field ID to modify.\n\n### Method ttsabort\n\nAborts a transaction that was started by a call to the ttsbegin method.\n\n    public void ttsabort()\n\n### Method insert\n\nInserts the record into the table.\n\n    public void insert()\n\n### Method doClear\n\nRemoves all rows from the table buffer and bypasses any additional logic in the clear method of the table.\n\n    public void doClear()\n\n### Method initValue\n\nInitializes a field to the default value.\n\n    public void initValue()\n\n### Method doUpdate\n\nUpdates the current record and bypasses any additional logic in the update method of the table.\n\n    public void doUpdate()\n\n### Method ttsbegin\n\nStarts a transaction that can be either committed by the ttscommit method or aborted by the ttsabort method.\n\n    public void ttsbegin()\n\n### Method setCrossPartition\n\nSets or resets cross-partitioning for the table.\n\n    public void setCrossPartition(boolean newValue)\n\n#### Parameters\n\nnewValue  \nA new Boolean value to set or reset cross-partitioning.\n\n### Method setTmpData\n\nSets the contents of the temporary table to the specified data.\n\n    public void setTmpData(Common cursor)\n\n#### Parameters\n\ncursor  \nThe new data for the temporary table.\n\n### Method ttscommit\n\nCommits a transaction that was started by a call to the ttsbegin method.\n\n    public void ttscommit()\n\n### Method setFieldValue\n\nSets the field value in the record buffer.\n\n    public void setFieldValue(str fieldName, AnyType value, [int arrayIndex])\n\n#### Parameters\n\nfieldName  \nThe array index of the field; optional.\n\n<!-- -->\n\nvalue  \nThe array index of the field; optional.\n\n<!-- -->\n\narrayIndex  \nThe array index of the field; optional.\n\n#### Remarks\n\nThe arrayIndex parameter applies only to array fields. Either omit this parameter or specify0 (zero) for fields that are not arrays.This method throws an ArgumentOutOfRange exception if the specified field is unknown or a TypeMismatch exception if the value parameter is incompatible with the specified field..\n\n### Method doInsert\n\nInserts the record into the table and bypasses any additional logic in the insert method of the table.\n\n    public void doInsert()\n\n### Method setSQLTracing\n\nEnables or disables SQL tracing mode.\n\n    public void setSQLTracing([boolean tracingmode])\n\n#### Parameters\n\ntracingmode  \n\n### Method postLoad\n\nIs executed after a record is read.\n\n    public void postLoad()\n\n## Class xRef\n    class xRef extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                         | Description                                     |\n|------------------------------------------------|-------------------------------------------------|\n| public AccessLevel accessLevel()               |                                                 |\n| public int column()                            |                                                 |\n| public container contents()                    |                                                 |\n| public xRefKind kind()                         |                                                 |\n| public int line()                              |                                                 |\n| public XRefMode mode()                         |                                                 |\n| public str name()                              |                                                 |\n| public str path()                              |                                                 |\n| public XRefReference reference()               |                                                 |\n| public int typeHandle()                        |                                                 |\n| public str typeName(xRefKind kind, int handle) |                                                 |\n| public void new(container data)                | Initializes a new instance of the Object class. |\n| public void init()                             |                                                 |\n| public void finalize()                         |                                                 |\n| public void next()                             |                                                 |\n\n### Method accessLevel\n\n    public AccessLevel accessLevel()\n\n#### Return Value\n\n### Method column\n\n    public int column()\n\n#### Return Value\n\n### Method contents\n\n    public container contents()\n\n#### Return Value\n\n### Method kind\n\n    public xRefKind kind()\n\n#### Return Value\n\n### Method line\n\n    public int line()\n\n#### Return Value\n\n### Method mode\n\n    public XRefMode mode()\n\n#### Return Value\n\n### Method name\n\n    public str name()\n\n#### Return Value\n\n### Method path\n\n    public str path()\n\n#### Return Value\n\n### Method reference\n\n    public XRefReference reference()\n\n#### Return Value\n\n### Method typeHandle\n\n    public int typeHandle()\n\n#### Return Value\n\n### Method typeName\n\n    public str typeName(xRefKind kind, int handle)\n\n#### Parameters\n\nkind  \n\n<!-- -->\n\nhandle  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(container data)\n\n#### Parameters\n\ndata  \n\n### Method init\n\n    public void init()\n\n### Method finalize\n\n    public void finalize()\n\n### Method next\n\n    public void next()\n\n## Class xResourceNode\n    class xResourceNode extends TreeNode\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description |\n|--------------------------------------------------------------------------|-------------|\n| public BinData AOTGetData()                                              |             |\n| public Image AOTGetImage()                                               |             |\n| public str changedBy(\\[str value\\])                                      |             |\n| public Date changedDate(\\[Date value\\])                                  |             |\n| public str changedTime(\\[str value\\])                                    |             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) |             |\n| public str createdBy(\\[str value\\])                                      |             |\n| public Date creationDate(\\[Date value\\])                                 |             |\n| public str creationTime(\\[str value\\])                                   |             |\n| public str filename(\\[str value\\])                                       |             |\n| public str helpText(\\[str value\\])                                       |             |\n| public str label(\\[str value\\])                                          |             |\n| public str name(\\[str value\\])                                           |             |\n| public Guid origin(\\[Guid value\\])                                       |             |\n| ::public static Image AOTCreateImage(str imageName)                      |             |\n| public void AOTSetData(BinData data)                                     |             |\n| public void AOTSetImage(Image image)                                     |             |\n\n### Method AOTGetData\n\n    public BinData AOTGetData()\n\n#### Return Value\n\n### Method AOTGetImage\n\n    public Image AOTGetImage()\n\n#### Return Value\n\n### Method changedBy\n\n    public str changedBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changedDate\n\n    public Date changedDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changedTime\n\n    public str changedTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method createdBy\n\n    public str createdBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method creationDate\n\n    public Date creationDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method creationTime\n\n    public str creationTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method filename\n\n    public str filename([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method helpText\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method AOTCreateImage\n\n    public static Image AOTCreateImage(str imageName)\n\n#### Parameters\n\nimageName  \n\n#### Return Value\n\n### Method AOTSetData\n\n    public void AOTSetData(BinData data)\n\n#### Parameters\n\ndata  \n\n### Method AOTSetImage\n\n    public void AOTSetImage(Image image)\n\n#### Parameters\n\nimage  \n\n## Class xSession\n    class xSession extends Object\n\nGets information about Finance and Operations sessions.\n\n### Remarks\n\nTo get information about the current session, create a new xSession session without parameters. The only way to get information about all active sessions (AOS only) is to traverse from session ID 1 to xSession.maxSessionId. The IDs are not an unbroken list, but will never exceed the maximum number of sessions as specified in the maxSessionId method.\n\n### Examples\n\nThe following example creates a new xSession object, and then uses it to find the name of the server for the current session.\n\n    xSession xSession; \n    xSession = new xSession();   \n    // Prints the name of server for the current session. \n    print xSession.AOSName();\n\n### Methods\n\n| Method                                                                            | Description                                                                                                                    |\n|-----------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------|\n| public str AOSName()                                                              | Retrieves the name of the Application Object Server (AOS) that is responsible for servicing the session.                       |\n| public str clientComputerName()                                                   | Retrieves the network name of the client computer that is responsible for servicing the session.                               |\n| public ClientType clientKind()                                                    | Retrieves the type of the client that is responsible for servicing the session.                                                |\n| public str databaseSpid()                                                         | Retrieves a comma-separated list of active connection IDs.                                                                     |\n| public str documentationLanguage()                                                | Retrieves the language ID of the documentation that is shown for the session.                                                  |\n| public str interfaceLanguage()                                                    | Retrieves the ID for the language that is used on menus and dialogs for the session.                                           |\n| public boolean isWorkerThread()                                                   | Determines whether the session is a worker thread.                                                                             |\n| public Date loginDate()                                                           | Retrieves the date on which the user of the session logged on.                                                                 |\n| public DateTime loginDateTime()                                                   |                                                                                                                                |\n| public TimeOfDay loginTime()                                                      | Retrieves the time at which the user of the session logged on.                                                                 |\n| public int masterSessionId()                                                      | Retrieves the master session ID for the session that the xSession object covers.                                               |\n| public int serverId()                                                             |                                                                                                                                |\n| public int sessionId()                                                            | Retrieves the session ID of the session that the xSession object covers.                                                       |\n| public boolean terminate(\\[Date loginDate\\], \\[TimeOfDay loginTime\\])             | Terminates the session ID that the object was instantiated with.                                                               |\n| public UserId userId()                                                            | Retrieves the user ID that this session is logged on with.                                                                     |\n| ::public static int currentRetryCount()                                           | Counts the number of times a try block has been retried after a deadlock, an update conflict, or another exception.            |\n| ::public static Uncheck currentUnCheck()                                          |                                                                                                                                |\n| ::public static str getDbSchema()                                                 | Retrieves the schema part of the database object name for the session.                                                         |\n| ::public static COM getIISObject(IISObject object)                                | Instantiates and returns a COM object for an IIS object.                                                                       |\n| ::public static boolean getSysTraceActive()                                       | Enables you to determine whether system tracing is turned on for the session.                                                  |\n| ::public static str getXRefAssembyTempFolder()                                    |                                                                                                                                |\n| ::public static boolean isCLRSession()                                            |                                                                                                                                |\n| ::public static boolean isUserPreferredTzSameAsLocalMachine()                     |                                                                                                                                |\n| ::public static int lastDuplicateKeyViolatingTable()                              |                                                                                                                                |\n| ::public static int lastUpdateConflictingTable()                                  | Retrieves an instance of the table that most recently had an update conflict.                                                  |\n| ::public static int maxSessionId()                                                | Retrieves the maximum number of sessions that are permitted by the current license codes.                                      |\n| ::public static int numSession()                                                  | Retrieves the current number of registered sessions.                                                                           |\n| public PreferredLocale preferredLocale()                                          |                                                                                                                                |\n| ::public static int pseudoBandwidth(\\[int bandwidth\\])                            | Determines whether bandwidth simulation is turned on for the session, and enables bandwidth simulation to be turned on or off. |\n| ::public static int pseudoLatency(\\[int latency\\])                                | Determines whether latency simulation is turned on for the session, and enables latency simulation to be turned on or off.     |\n| ::public static int pseudoSimMode(\\[int simMode\\])                                | Determines whether delay simulation is turned on for the session, and enables delay simulation to be turned on or off.         |\n| ::public static int systemSessionId()                                             | Retrieves the system session ID for the session that the xSession object covers.                                               |\n| ::public static container xppCallStack()                                          | Retrieves the current call stack.                                                                                              |\n| ::public static void removeAOC()                                                  | Removes the Application Object Server client-side cache (AOC) for the current session.                                         |\n| ::public static void updateAOC()                                                  | Updates the Application Object Server client-side cache (AOC) for the current session.                                         |\n| ::public static void setAutoUpdateRecVersion(boolean autoUpdateRecVersion)        |                                                                                                                                |\n| ::public static void setSysTraceActive(boolean nValue)                            | Switches system tracing on or off.                                                                                             |\n| ::private static void clientSetAutoUpdateRecVersion(boolean autoUpdateRecVersion) |                                                                                                                                |\n| ::private static void serverSetAutoUpdateRecVersion(boolean autoUpdateRecVersion) |                                                                                                                                |\n| public void new(\\[int sessionId\\], \\[boolean checkSession\\])                      | Instantiates the xSession object, either for current session or for the session ID passed in as a parameter.                   |\n| ::public static void reloadTableCollectionOnClient()                              |                                                                                                                                |\n\n### Method AOSName\n\nRetrieves the name of the Application Object Server (AOS) that is responsible for servicing the session.\n\n    public str AOSName()\n\n#### Return Value\n\nA string that indicates the name of the AOS.\n\n#### Remarks\n\nFor non–AOS connected clients, this method returns an empty string.\n\n#### Examples\n\nThe following example prints the name of the AOS that is running the current session.\n\n    xSession xSession; \n    xSession = new xSession(); \n    // Prints the name of server for the current session. \n    print xSession.AOSName();\n\n### Method clientComputerName\n\nRetrieves the network name of the client computer that is responsible for servicing the session.\n\n    public str clientComputerName()\n\n#### Return Value\n\nA string that indicates the name of the client computer.\n\n#### Examples\n\nThe following example prints the name of the client that is running the current session.\n\n    { \n        xSession xSession; \n        xSession = new xSession(); \n        print xSession.clientComputerName(); \n        pause; \n    }\n\n### Method clientKind\n\nRetrieves the type of the client that is responsible for servicing the session.\n\n    public ClientType clientKind()\n\n#### Return Value\n\nThe type of the client.\n\n#### Remarks\n\nThe possible values are those in the ClientType system enumeration:\n\n-   COMObject\n-   Client\n-   Server\n-   WorkerThread\n\n#### Examples\n\nThe following example prints the type of the client that is running the current session.\n\n    { \n        xSession xSession; \n        xSession = new xSession(); \n        print xSession.clientKind(); \n        pause; \n    }\n\n### Method databaseSpid\n\nRetrieves a comma-separated list of active connection IDs.\n\n    public str databaseSpid()\n\n#### Return Value\n\nA comma-separated list of active connection IDs.\n\n#### Remarks\n\nThis method is used to populate the Online users form (SysUsersOnline). To retrieve the number of active connections, use xSession::numSession.\n\n### Method documentationLanguage\n\nRetrieves the language ID of the documentation that is shown for the session.\n\n    public str documentationLanguage()\n\n#### Return Value\n\nA string that contains the ID of the language that is used for the documentation in the session.\n\n#### Remarks\n\nFor example, this method returns \"en-us\" if the language is set to US English. The documentation language can be selected separately and is not necessarily identical to the language used in menus and dialogs. To retrieve the language ID for menus and dialogs, use xSession.interfaceLanguage. xInfo.documentationLanguage enables you to set the documentation language.\n\n### Method interfaceLanguage\n\nRetrieves the ID for the language that is used on menus and dialogs for the session.\n\n    public str interfaceLanguage()\n\n#### Return Value\n\nA string that contains the ID of the language used on menus and dialogs in the session.\n\n#### Remarks\n\nFor example, this method returns \"en-us\" if the language is set to US English. The documentation language can be selected separately and is not necessarily identical to the language used in menus and dialogs. To retrieve the language ID for documentation, use .\n\n### Method isWorkerThread\n\nDetermines whether the session is a worker thread.\n\n    public boolean isWorkerThread()\n\n#### Return Value\n\ntrue if the session is a worker thread; otherwise, false.\n\n#### Remarks\n\nA worker thread is an instance of the Thread class, which creates a new instance of Finance and Operations without UI. If this method is called inside such a session, it will return true.\n\n### Method loginDate\n\nRetrieves the date on which the user of the session logged on.\n\n    public Date loginDate()\n\n#### Return Value\n\nThe date that the user of the session logged on.\n\n### Method loginDateTime\n\n    public DateTime loginDateTime()\n\n#### Return Value\n\n### Method loginTime\n\nRetrieves the time at which the user of the session logged on.\n\n    public TimeOfDay loginTime()\n\n#### Return Value\n\nThe time that the user of the session logged on.\n\n### Method masterSessionId\n\nRetrieves the master session ID for the session that the xSession object covers.\n\n    public int masterSessionId()\n\n#### Return Value\n\nAn integer that represents the session ID.\n\n#### Remarks\n\nSome sessions have a master session ID, such as a COM session or a worker thread session.\n\n#### Examples\n\nThe following example creates an xSession object by using the normal session ID (or the master session ID, if there is one).\n\n    static xSession getThisSession() \n    { \n        xSession xSession = new xSession(sessionid()); \n        if (xSession.masterSessionId()) \n        { \n            xSession = new xSession(xSession.masterSessionId()); \n        } \n        return xSession; \n    }\n\n### Method serverId\n\n    public int serverId()\n\n#### Return Value\n\n### Method sessionId\n\nRetrieves the session ID of the session that the xSession object covers.\n\n    public int sessionId()\n\n#### Return Value\n\nAn integer that represents the session ID.\n\n### Method terminate\n\nTerminates the session ID that the object was instantiated with.\n\n    public boolean terminate([Date loginDate], [TimeOfDay loginTime])\n\n#### Parameters\n\nloginDate  \nThe time that the user of the session logged on; optional.\n\n<!-- -->\n\nloginTime  \nThe time that the user of the session logged on; optional.\n\n#### Return Value\n\nfalse if the user is not authorized to perform this function; otherwise, true.\n\n#### Remarks\n\nThis API has a built-in authorization check that is invoked at run time. An exception is thrown if calls to the terminate method are made by users who do not have access to the development security key (SysDevelopment). The optional parameters allow you to put a timestamp on the session to ensure that it is the session you intend to terminate. The same session ID could be used at two different times. The terminate method is used in the Online users form to allow administrators to terminate sessions. An administrator might decide to terminate a session because it has stopped responding, is consuming a lot of resources, or its license needs to be freed for another user.\n\n#### Examples\n\nThe following example confirms whether the user has permission to terminate the session. If so, the session is terminated.\n\n    server static public void Main(Args _args) \n    { \n        Session session; \n        session = new Session(); \n        if (session) \n        { \n            session.terminate(); \n        } \n    }\n\n### Method userId\n\nRetrieves the user ID that this session is logged on with.\n\n    public UserId userId()\n\n#### Return Value\n\nThe ID for the user of the session.\n\n#### Examples\n\nThe following example determines whether a particular user is online.\n\n    server static boolean isUserOnline(userId userId) \n    { \n        xSession    session; \n        int counter; \n        int maxSessions = Info::licensedUsersTotal(); \n        if (!userId) \n        { \n            return false; \n        } \n        for(counter = 1; counter < maxSessions;counter++) \n        { \n            session = new xSession(counter, true); \n            if(session && session.userId() == userId) \n            { \n                return true; \n            } \n        } \n        return false; \n    }\n\n### Method currentRetryCount\n\nCounts the number of times a try block has been retried after a deadlock, an update conflict, or another exception.\n\n    public static int currentRetryCount()\n\n#### Return Value\n\nThe number of times that the try block has been retried.\n\n#### Examples\n\nThe following example uses the currentRetryCount method to test how many times that a transaction has been retried to determine the exception handling for a CUD transaction.\n\n    catch (Exception::UpdateConflict) \n        { \n            if (appl.ttsLevel() == 0) \n            { \n                if (xSession::currentRetryCount() >= #RetryNum) \n                { \n                    throw Exception::UpdateConflictNotRecovered; \n                } \n                else \n                { \n                    retry; \n                } \n            } \n            else \n            { \n                throw Exception::UpdateConflict; \n            } \n        }\n\n### Method currentUnCheck\n\n    public static Uncheck currentUnCheck()\n\n#### Return Value\n\n### Method getDbSchema\n\nRetrieves the schema part of the database object name for the session.\n\n    public static str getDbSchema()\n\n#### Return Value\n\nReturns the schema part of the database object name.\n\n### Method getIISObject\n\nInstantiates and returns a COM object for an IIS object.\n\n    public static COM getIISObject(IISObject object)\n\n#### Parameters\n\nobject  \nThe IIS object that you want to create a COM object for.\n\n#### Return Value\n\nA COM object.\n\n#### Remarks\n\nThe IIS object can be one of the possible values supplied by the IISObject system enumeration:\n\n-   ApplicationObject\n-   Request\n-   Response\n-   Server\n-   SessionObject\n\n### Method getSysTraceActive\n\nEnables you to determine whether system tracing is turned on for the session.\n\n    public static boolean getSysTraceActive()\n\n#### Return Value\n\ntrue if system tracing is active; otherwise, false.\n\n#### Remarks\n\nTo turn on system tracing, use xSession::setSysTraceActive.\n\n#### Examples\n\nThe following example uses the getSysTraceActive method to determine the original setting for system tracing and to reset the setting after tracing is temporarily set to false.\n\n    server static void main(Args a) \n    { \n        SysDataImport sysDataImport; \n        boolean       sysTraceActive = xSession::getSysTraceActive(); \n        sysDataImport = SysDataImport::newTmpFilename(''); \n        sysDataImport.addTmpExpImpTable( \n            tablenum(SysTraceTableSQL), \n            false); \n        sysDataImport.addTmpExpImpTable( \n            tablenum(SysTraceTableSQLExecPlan), \n            false); \n        sysDataImport.addTmpExpImpTable( \n            tablenum(SysTraceTableSQLTabRef), \n            false); \n        xSession::setSysTraceActive(FALSE); \n        if (sysDataImport.prompt()) \n            sysDataImport.run(); \n        xSession::setSysTraceActive(sysTraceActive); \n    }\n\n### Method getXRefAssembyTempFolder\n\n    public static str getXRefAssembyTempFolder()\n\n#### Return Value\n\n### Method isCLRSession\n\n    public static boolean isCLRSession()\n\n#### Return Value\n\n### Method isUserPreferredTzSameAsLocalMachine\n\n    public static boolean isUserPreferredTzSameAsLocalMachine()\n\n#### Return Value\n\n### Method lastDuplicateKeyViolatingTable\n\n    public static int lastDuplicateKeyViolatingTable()\n\n#### Return Value\n\n### Method lastUpdateConflictingTable\n\nRetrieves an instance of the table that most recently had an update conflict.\n\n    public static int lastUpdateConflictingTable()\n\n#### Return Value\n\nAn instance of the table that most recently had an update conflict.\n\n#### Examples\n\nThe following example demonstrates the general use of the lastUpdateConflictingTable method—it enables you to abort or retry transactions according to which table has an update conflict.\n\n    try \n    { \n        // ... \n        table1.update(); \n        // ... \n        table2.update(); \n    } \n    catch(Exception::UpdateConflict) \n    { \n        if(xSession::lastUpdateConflictingTable() == table1) \n        { \n            ttsabort; \n        } \n        else if(xSession::lastUpdateConflictingTable() == table2) \n        { \n            // Compensate here. \n            // ... \n            retry; \n        } \n    }\n\n### Method maxSessionId\n\nRetrieves the maximum number of sessions that are permitted by the current license codes.\n\n    public static int maxSessionId()\n\n#### Return Value\n\nAn integer that indicates the maximum number of sessions that are permitted by the current license code.\n\n### Method numSession\n\nRetrieves the current number of registered sessions.\n\n    public static int numSession()\n\n#### Return Value\n\nAn integer that indicates the number of currently registered sessions.\n\n### Method preferredLocale\n\n    public PreferredLocale preferredLocale()\n\n#### Return Value\n\n### Method pseudoBandwidth\n\nDetermines whether bandwidth simulation is turned on for the session, and enables bandwidth simulation to be turned on or off.\n\n    public static int pseudoBandwidth([int bandwidth])\n\n#### Parameters\n\nbandwidth  \nTurns bandwidth simulation on or off. Set to zero to turn simulation off. Other values turn simulation on.\n\n#### Return Value\n\nAn integer that indicates whether bandwidth simulation is turned on. If the return value is zero, there is no bandwidth simulation.\n\n#### Remarks\n\nYou can run pseudo simulations of remote connections from the System monitoring tool:\n\n-   On the toolbar, select Tools, point to Development tools, point to System monitoring, and then click the Remote connection tab.\n\n### Method pseudoLatency\n\nDetermines whether latency simulation is turned on for the session, and enables latency simulation to be turned on or off.\n\n    public static int pseudoLatency([int latency])\n\n#### Parameters\n\nlatency  \nTurns latency simulation on or off. Set to zero to turn simulation off. Other values turn simulation on.\n\n#### Return Value\n\nAn integer that indicates whether latency simulation is turned on. If the return value is zero, there is no latency simulation.\n\n#### Remarks\n\nYou can run pseudo simulations of remote connections from the System monitoring tool:\n\n-   On the toolbar, select Tools, point to Development tools, point to System monitoring, and then click the Remote connection tab\n\n### Method pseudoSimMode\n\nDetermines whether delay simulation is turned on for the session, and enables delay simulation to be turned on or off.\n\n    public static int pseudoSimMode([int simMode])\n\n#### Parameters\n\nsimMode  \nTurns delay simulation on or off. Set to zero to turn simulation off. Set to 1 to simulate delays for application calls. Set to 2 to simulate delays for all calls.\n\n#### Return Value\n\nAn integer that indicates whether delay simulation is turned on. If the return value is zero, there is no delay simulation. If the return value is 1, delays are simulated only for application-controlled calls. If the return value is 2, delays are simulated for all calls.\n\n#### Remarks\n\nYou can run pseudo simulations of remote connections from the System monitoring tool:\n\n-   On the toolbar, select Tools, point to Development tools, point to System monitoring, and then click the Remote connection tab\n\n### Method systemSessionId\n\nRetrieves the system session ID for the session that the xSession object covers.\n\n    public static int systemSessionId()\n\n#### Return Value\n\nAn integer that represents the session ID.\n\n#### Remarks\n\nSome sessions, such as a COM session or a worker thread session, have a parent system session.\n\n### Method xppCallStack\n\nRetrieves the current call stack.\n\n    public static container xppCallStack()\n\n#### Return Value\n\nA container that holds the contents of the current call stack.\n\n### Method removeAOC\n\nRemoves the Application Object Server client-side cache (AOC) for the current session.\n\n    public static void removeAOC()\n\n### Method updateAOC\n\nUpdates the Application Object Server client-side cache (AOC) for the current session.\n\n    public static void updateAOC()\n\n#### Remarks\n\nAOC is a client-side cache that consists of metadata that is loaded by the client, and then saved to disk when the client is closed. It is saved under the user’s local settings folder. The file has an .auc filename extension and is saved in a user's Local Settings folder. When the client is started, it reads from the cache, and then deletes the cache from the disk.\n\n### Method setAutoUpdateRecVersion\n\n    public static void setAutoUpdateRecVersion(boolean autoUpdateRecVersion)\n\n#### Parameters\n\nautoUpdateRecVersion  \n\n### Method setSysTraceActive\n\nSwitches system tracing on or off.\n\n    public static void setSysTraceActive(boolean nValue)\n\n#### Parameters\n\nnValue  \nA Boolean value that determines whether tracing should be switched on or off. Set to true to switch tracing on.\n\n#### Examples\n\nThe following example uses the setSysTraceActive method to turn system tracing off when data is imported.\n\n    server static void main(Args a) \n    { \n        SysDataImport sysDataImport; \n        boolean       sysTraceActive = xSession::getSysTraceActive(); \n        sysDataImport = SysDataImport::newTmpFilename(''); \n        sysDataImport.addTmpExpImpTable( \n            tablenum(SysTraceTableSQL), \n            false); \n        sysDataImport.addTmpExpImpTable( \n            tablenum(SysTraceTableSQLExecPlan), \n            false); \n        sysDataImport.addTmpExpImpTable( \n            tablenum(SysTraceTableSQLTabRef), \n            false); \n        xSession::setSysTraceActive(FALSE); \n        if (sysDataImport.prompt()) \n            sysDataImport.run(); \n        xSession::setSysTraceActive(sysTraceActive); \n    }\n\n### Method clientSetAutoUpdateRecVersion\n\n    private static void clientSetAutoUpdateRecVersion(boolean autoUpdateRecVersion)\n\n#### Parameters\n\nautoUpdateRecVersion  \n\n### Method serverSetAutoUpdateRecVersion\n\n    private static void serverSetAutoUpdateRecVersion(boolean autoUpdateRecVersion)\n\n#### Parameters\n\nautoUpdateRecVersion  \n\n### Method new\n\nInstantiates the xSession object, either for current session or for the session ID passed in as a parameter.\n\n    public void new([int sessionId], [boolean checkSession])\n\n#### Parameters\n\nsessionId  \nA boolean flag that, if set to true, checks to determine whether the session specified by the \\_SessionId parameter exists. The operation that checks whether a session exists might use a lot of system resources. This parameter is therefore set to false by default.\n\n<!-- -->\n\ncheckSession  \nA boolean flag that, if set to true, checks to determine whether the session specified by the \\_SessionId parameter exists. The operation that checks whether a session exists might use a lot of system resources. This parameter is therefore set to false by default.\n\n#### Examples\n\nThe following example returns a count of all the active sessions.\n\n    server static Integer getAllOnlineUserCount() \n    { \n        int      counter; \n        int      num = 0; \n        int      maxSessions = Info::licensedUsersTotal(); \n        xSession session; \n        UserInfo userInfo; \n        for(counter = 1; counter < maxSessions;counter++) \n        { \n            session = new xSession(counter, true); \n            if(session && session.userId()) \n            { \n                select firstonly userInfo \n                    where userInfo.Id == session.userId(); \n                if (userInfo) \n                    num++; \n            } \n        } \n        return num; \n    }\n\n### Method reloadTableCollectionOnClient\n\n    public static void reloadTableCollectionOnClient()\n\n## Class xSqlEnumerator\n    class xSqlEnumerator extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                               | Description                                             |\n|------------------------------------------------------|---------------------------------------------------------|\n| public str getConnStr(str database)                  |                                                         |\n| public List getDatabases(str server, \\[str driver\\]) |                                                         |\n| public List getServers(str driver)                   |                                                         |\n| public void new()                                    | Initializes a new instance of the xSqlEnumerator class. |\n\n### Method getConnStr\n\n    public str getConnStr(str database)\n\n#### Parameters\n\ndatabase  \n\n#### Return Value\n\n### Method getDatabases\n\n    public List getDatabases(str server, [str driver])\n\n#### Parameters\n\nserver  \n\n<!-- -->\n\ndriver  \n\n#### Return Value\n\n### Method getServers\n\n    public List getServers(str driver)\n\n#### Parameters\n\ndriver  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the xSqlEnumerator class.\n\n    public void new()\n\n## Class xToastNotification\n    class xToastNotification extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                      | Description                                                 |\n|---------------------------------------------|-------------------------------------------------------------|\n| public int duration(\\[int duration\\])       |                                                             |\n| public int imageResId(\\[int imageResId\\])   |                                                             |\n| public str messageText(\\[str messageText\\]) |                                                             |\n| public str subject(\\[str subject\\])         |                                                             |\n| public void new()                           | Initializes a new instance of the xToastNotification class. |\n| public void onClosed()                      |                                                             |\n| public void show()                          |                                                             |\n| public void finalize()                      |                                                             |\n| public void onClicked()                     |                                                             |\n\n### Method duration\n\n    public int duration([int duration])\n\n#### Parameters\n\nduration  \n\n#### Return Value\n\n### Method imageResId\n\n    public int imageResId([int imageResId])\n\n#### Parameters\n\nimageResId  \n\n#### Return Value\n\n### Method messageText\n\n    public str messageText([str messageText])\n\n#### Parameters\n\nmessageText  \n\n#### Return Value\n\n### Method subject\n\n    public str subject([str subject])\n\n#### Parameters\n\nsubject  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the xToastNotification class.\n\n    public void new()\n\n### Method onClosed\n\n    public void onClosed()\n\n### Method show\n\n    public void show()\n\n### Method finalize\n\n    public void finalize()\n\n### Method onClicked\n\n    public void onClicked()\n\n## Class xVersionControl\n    class xVersionControl extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                            | Description                                              |\n|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------|\n| public boolean allowCreate(TreeNode node)                                                                                                                         |                                                          |\n| public boolean allowDelete(TreeNode node)                                                                                                                         |                                                          |\n| public boolean allowEdit(TreeNode node)                                                                                                                           |                                                          |\n| public boolean allowRename(TreeNode node)                                                                                                                         |                                                          |\n| public boolean checkOut(TreeNode node)                                                                                                                            |                                                          |\n| public boolean create(TreeNode node)                                                                                                                              |                                                          |\n| public boolean delete(TreeNode node)                                                                                                                              |                                                          |\n| public int getAvailableId(UtilElementType objectType, UtilEntryLevel layer, \\[int parentId\\], \\[IdAllocationSchema idAllocationSchema\\], \\[boolean inheritance\\]) |                                                          |\n| public int getAvailableLabelId(str labelFile, str language, \\[IdAllocationSchema idAllocationSchema\\])                                                            |                                                          |\n| public boolean ideIntegration()                                                                                                                                   |                                                          |\n| public boolean moveToModel(TreeNode node, int modelId)                                                                                                            |                                                          |\n| public boolean rename(TreeNode node, str newname)                                                                                                                 |                                                          |\n| public boolean undoCheckOut(TreeNode node, \\[boolean showDialog\\])                                                                                                |                                                          |\n| public Set unwantedObjectTypes()                                                                                                                                  |                                                          |\n| public void colorAOT()                                                                                                                                            |                                                          |\n| public void save(TreeNode node)                                                                                                                                   |                                                          |\n| public void showHistory(TreeNode node)                                                                                                                            |                                                          |\n| public void updateCheckedOutList(Set checkedOutObjects)                                                                                                           |                                                          |\n| public void getLatestVersion(\\[TreeNode node\\], \\[boolean delLocalFiles\\])                                                                                        |                                                          |\n| public void checkIn(TreeNode node)                                                                                                                                |                                                          |\n| public void new()                                                                                                                                                 | Initializes a new instance of the xVersionControl class. |\n| public void reload()                                                                                                                                              |                                                          |\n| public void getLabelVersion(\\[TreeNode node\\], \\[str label\\])                                                                                                     |                                                          |\n\n### Method allowCreate\n\n    public boolean allowCreate(TreeNode node)\n\n#### Parameters\n\nnode  \n\n#### Return Value\n\n### Method allowDelete\n\n    public boolean allowDelete(TreeNode node)\n\n#### Parameters\n\nnode  \n\n#### Return Value\n\n### Method allowEdit\n\n    public boolean allowEdit(TreeNode node)\n\n#### Parameters\n\nnode  \n\n#### Return Value\n\n### Method allowRename\n\n    public boolean allowRename(TreeNode node)\n\n#### Parameters\n\nnode  \n\n#### Return Value\n\n### Method checkOut\n\n    public boolean checkOut(TreeNode node)\n\n#### Parameters\n\nnode  \n\n#### Return Value\n\n### Method create\n\n    public boolean create(TreeNode node)\n\n#### Parameters\n\nnode  \n\n#### Return Value\n\n### Method delete\n\n    public boolean delete(TreeNode node)\n\n#### Parameters\n\nnode  \n\n#### Return Value\n\n### Method getAvailableId\n\n    public int getAvailableId(UtilElementType objectType, UtilEntryLevel layer, [int parentId], [IdAllocationSchema idAllocationSchema], [boolean inheritance])\n\n#### Parameters\n\nobjectType  \n\n<!-- -->\n\nlayer  \n\n<!-- -->\n\nparentId  \n\n<!-- -->\n\nidAllocationSchema  \n\n<!-- -->\n\ninheritance  \n\n#### Return Value\n\n### Method getAvailableLabelId\n\n    public int getAvailableLabelId(str labelFile, str language, [IdAllocationSchema idAllocationSchema])\n\n#### Parameters\n\nlabelFile  \n\n<!-- -->\n\nlanguage  \n\n<!-- -->\n\nidAllocationSchema  \n\n#### Return Value\n\n### Method ideIntegration\n\n    public boolean ideIntegration()\n\n#### Return Value\n\n### Method moveToModel\n\n    public boolean moveToModel(TreeNode node, int modelId)\n\n#### Parameters\n\nnode  \n\n<!-- -->\n\nmodelId  \n\n#### Return Value\n\n### Method rename\n\n    public boolean rename(TreeNode node, str newname)\n\n#### Parameters\n\nnode  \n\n<!-- -->\n\nnewname  \n\n#### Return Value\n\n### Method undoCheckOut\n\n    public boolean undoCheckOut(TreeNode node, [boolean showDialog])\n\n#### Parameters\n\nnode  \n\n<!-- -->\n\nshowDialog  \n\n#### Return Value\n\n### Method unwantedObjectTypes\n\n    public Set unwantedObjectTypes()\n\n#### Return Value\n\n### Method colorAOT\n\n    public void colorAOT()\n\n### Method save\n\n    public void save(TreeNode node)\n\n#### Parameters\n\nnode  \n\n### Method showHistory\n\n    public void showHistory(TreeNode node)\n\n#### Parameters\n\nnode  \n\n### Method updateCheckedOutList\n\n    public void updateCheckedOutList(Set checkedOutObjects)\n\n#### Parameters\n\ncheckedOutObjects  \n\n### Method getLatestVersion\n\n    public void getLatestVersion([TreeNode node], [boolean delLocalFiles])\n\n#### Parameters\n\nnode  \n\n<!-- -->\n\ndelLocalFiles  \n\n### Method checkIn\n\n    public void checkIn(TreeNode node)\n\n#### Parameters\n\nnode  \n\n### Method new\n\nInitializes a new instance of the xVersionControl class.\n\n    public void new()\n\n### Method reload\n\n    public void reload()\n\n### Method getLabelVersion\n\n    public void getLabelVersion([TreeNode node], [str label])\n\n#### Parameters\n\nnode  \n\n<!-- -->\n\nlabel  \n\n\n\n\n\n","nodes":[{"pos":[32,41],"content":"X Classes","needQuote":true,"needEscape":true,"nodes":[{"content":"X Classes","pos":[0,9]}]},{"pos":[55,103],"content":"System API classes that start with the letter X.","needQuote":true,"needEscape":true,"nodes":[{"content":"System API classes that start with the letter X.","pos":[0,48]}]},{"pos":[602,611],"content":"X Classes","linkify":"X Classes","nodes":[{"content":"X Classes","pos":[0,9]}]},{"content":"System API classes that start with the letter X.","pos":[657,705]},{"pos":[707,725],"content":"Class xApplication","linkify":"Class xApplication","nodes":[{"content":"Class xApplication","pos":[0,18]}]},{"pos":[789,796],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[802,810],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[816,823],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[827,833]},{"content":"Description","pos":[1057,1068]},{"content":"public boolean IsTablePerHierarchyMode()","pos":[1647,1687]},{"content":"Determines whether the system is being run with all table inheritance hierarchies flattened (Table per hierarchy mode).","pos":[1877,1996]},{"content":"public str buildNo()","pos":[2057,2077]},{"content":"public boolean canDeleteCompany(SelectableDataArea company)","pos":[2467,2526]},{"content":"public int countOfTopLevelFormsOpened()","pos":[2877,2916]},{"content":"public Company company(<ph id=\"ph1\">\\[</ph>SelectableDataArea company<ph id=\"ph2\">\\]</ph>)","pos":[3287,3341],"source":"public Company company(\\[SelectableDataArea company\\])"},{"content":"public Int64 curTransactionId(<ph id=\"ph1\">\\[</ph>boolean ForceTakeNumber<ph id=\"ph2\">\\]</ph>)","pos":[3697,3755],"source":"public Int64 curTransactionId(\\[boolean ForceTakeNumber\\])"},{"content":"public boolean dbSynchronize(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean checkAsNeeded<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean continueOnError<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>boolean showProgress<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>container checkSyncTables<ph id=\"ph10\">\\]</ph>, <ph id=\"ph11\">\\[</ph>boolean createAllIndexes<ph id=\"ph12\">\\]</ph>, <ph id=\"ph13\">\\[</ph>boolean useLockForSingleTable<ph id=\"ph14\">\\]</ph>)","pos":[4107,4334],"source":"public boolean dbSynchronize(\\[TableId tableId\\], \\[boolean checkAsNeeded\\], \\[boolean continueOnError\\], \\[boolean showProgress\\], \\[container checkSyncTables\\], \\[boolean createAllIndexes\\], \\[boolean useLockForSingleTable\\])"},{"content":"public str getSameNameDifferentIdFields()","pos":[4517,4558]},{"content":"public Map getServiceHostStatus()","pos":[4927,4960]},{"content":"public boolean isCheckedMode()","pos":[5337,5367]},{"content":"public boolean isConfigMode()","pos":[5747,5776]},{"content":"public boolean isDemoMode()","pos":[6157,6184]},{"content":"public boolean isSqlConnected()","pos":[6567,6598]},{"content":"public int numberOfTreeNodesLoaded()","pos":[6977,7013]},{"content":"public str releaseVersion()","pos":[7387,7414]},{"content":"public boolean setDefaultCompany(SelectableDataArea company)","pos":[7797,7857]},{"content":"public int ttsLevel()","pos":[8207,8228]},{"content":"public int ttsVersion()","pos":[8617,8640]},{"content":"::public static boolean CheckUserExistsInAnyPartition(str userId)","pos":[9027,9092]},{"content":"Checks whether the given user is present in any partition.","pos":[9257,9315]},{"content":"::public static str getFolderPath(int folder)","pos":[9437,9482]},{"content":"::public static str getVSAssembliesPath()","pos":[9847,9888]},{"content":"::public static boolean ilCacheContains(str owner, str key)","pos":[10257,10316]},{"content":"::public static str ilCacheDelete(str owner, str key)","pos":[10667,10720]},{"content":"::public static str ilCacheFind(str owner, str key)","pos":[11077,11128]},{"content":"::public static boolean initPartition(Partition partition)","pos":[11487,11545]},{"content":"Initializes a given partition by creating the DAT company and the Admin user.","pos":[11717,11794]},{"content":"::public static boolean isServiceRegisteredOnClient(ClassId classId)","pos":[11897,11965]},{"content":"::public static boolean IsSinglePartitionSystem()","pos":[12307,12356]},{"content":"Evaluates whether the deployment has a single partition or multiple partitions.","pos":[12537,12616]},{"content":"::public static CLRObject XppILAppDomain()","pos":[12717,12759]},{"content":"public boolean isInTransactionScope()","pos":[13127,13164]},{"content":"public Int64 transactionScopeCommitLevel()","pos":[13537,13579]},{"content":"public container Encrypt(str input)","pos":[13947,13982]},{"content":"public str Decrypt(container cipher)","pos":[14357,14393]},{"content":"public System.Security.SecureString decryptToSecureString(container cipher)","pos":[14767,14842]},{"content":"public container encryptFromSecureString(System.Security.SecureString input)","pos":[15177,15253]},{"content":"public container EncryptForPurpose(str input, str purpose)","pos":[15587,15645]},{"content":"public str DecryptForPurpose(container cipher, str purpose)","pos":[15997,16056]},{"content":"public System.Security.SecureString decryptToSecureStringForPurpose(container cipher, str purpose)","pos":[16407,16505]},{"content":"public container encryptFromSecureStringForPurpose(System.Security.SecureString input, str purpose)","pos":[16817,16916]},{"content":"public str convertToUnsecureString(System.Security.SecureString secureString)","pos":[17227,17304]},{"content":"public System.Security.SecureString convertToSecureString(str unsecureString)","pos":[17637,17714]},{"content":"::public static void startBatch()","pos":[18047,18080]},{"content":"public void deleteCompany(SelectableDataArea company)","pos":[18457,18510]},{"content":"public void ttsabort()","pos":[18867,18889]},{"content":"public void transactionScopeCommit()","pos":[19277,19313]},{"content":"public void new()","pos":[19687,19704]},{"content":"Initializes a new instance of the xApplication class.","pos":[19917,19970]},{"content":"::public static void stopBatch()","pos":[20097,20129]},{"content":"public void logRenameKey(Common recordOrig, Common recordUpdated, container changedFields)","pos":[20507,20597]},{"content":"public void startup(str startupCmd, str buildNumber)","pos":[20917,20969]},{"content":"public void RedirectToDashboard()","pos":[21327,21360]},{"content":"public void insertXReferences()","pos":[21737,21768]},{"content":"Is invoked by the framework when cross-reference information should be inserted into the database.","pos":[21967,22065]},{"content":"public void logUpdate(Common recordOrig, Common recordUpdated, container changedFields)","pos":[22147,22234]},{"content":"public void setStartPage(<ph id=\"ph1\">\\[</ph>SysUserInfoStartPage startpage<ph id=\"ph2\">\\]</ph>)","pos":[22557,22617],"source":"public void setStartPage(\\[SysUserInfoStartPage startpage\\])"},{"content":"::public static void ilCacheInsert(str owner, str key, str value)","pos":[22967,23032]},{"content":"public void clearManagedCaches()","pos":[23377,23409]},{"content":"public void eventDelete(Common recordDeleted)","pos":[23787,23832]},{"content":"Serves as a callback that is called by the kernel when a record in a table is deleted, provided that the kernel has been set up to monitor records in that table.","pos":[24017,24178]},{"content":"public void enableCountryContextFilter()","pos":[24197,24237]},{"content":"Enables system-wide optimization in the data access layer, whereby fields that don't belong in the current company's country/region context are dropped from the SELECT query.","pos":[24427,24601]},{"content":"public void setTheme(<ph id=\"ph1\">\\[</ph>SysUserInfoTheme theme<ph id=\"ph2\">\\]</ph>)","pos":[24607,24655],"source":"public void setTheme(\\[SysUserInfoTheme theme\\])"},{"content":"public void sysTrace(SysTraceType traceType, container traceInfo)","pos":[25017,25082]},{"content":"public void initGlobal(Info infoObject, VersionControl versionControlObject)","pos":[25427,25503]},{"content":"public void transactionScopeRollback(Int64 commitLevel)","pos":[25837,25892]},{"content":"public void ttsbegin()","pos":[26247,26269]},{"content":"public void flushcompanycache(SelectableDataArea company)","pos":[26657,26714]},{"content":"public void logDelete(Common recordDeleted)","pos":[27067,27110]},{"content":"::public static void registerServiceOnClient(ClassId classId, str externalName)","pos":[27477,27556]},{"content":"public void eventUpdate(Common recordOrig, Common recordUpdated, container changedFields)","pos":[27887,27976]},{"content":"Serves as a callback that is called by the kernel when a record in a table is updated, provided that the kernel has been set up to monitor records in that table.","pos":[28117,28278]},{"content":"public void transactionScopeBegin()","pos":[28297,28332]},{"content":"::public static void checkForNewBatchJobs()","pos":[28707,28750]},{"content":"public void disableCountryContextFilter()","pos":[29117,29158]},{"content":"Disables system-wide optimization in the data access layer, whereby fields that don't belong in the current company's country/region context are dropped from the SELECT query.","pos":[29347,29522]},{"content":"public void xref(str path, xRef x)","pos":[29527,29561]},{"content":"public void transactionScopeAbort()","pos":[29937,29972]},{"content":"public void eventRenameKey(Common recordOrig, Common recordUpdated, container changedFields)","pos":[30347,30439]},{"content":"Serves as a callback that is called by the kernel when a primary key is renamed, provided that the kernel has been set up to monitor records in that table.","pos":[30577,30732]},{"content":"public void flushClientPerformanceOptions()","pos":[30757,30800]},{"content":"::public static void flushClientServices()","pos":[31167,31209]},{"content":"public void restartServiceHost()","pos":[31577,31609]},{"content":"public void updateXrefTreeNode(TreeNode treeNode)","pos":[31987,32036]},{"content":"Is invoked by the framework when cross-reference information for the various node types is updated.","pos":[32217,32316]},{"content":"public void ttscommit()","pos":[32397,32420]},{"content":"public void RequestCompanyChange(<ph id=\"ph1\">\\[</ph>DataAreaSysCompany company<ph id=\"ph2\">\\]</ph>)","pos":[32807,32871],"source":"public void RequestCompanyChange(\\[DataAreaSysCompany company\\])"},{"content":"public void finalize()","pos":[33217,33239]},{"content":"public void eventInsert(Common recordInserted)","pos":[33627,33673]},{"content":"Serves as a callback that is called by the kernel when a record in a table is inserted, provided that the kernel has been set up to monitor records in that table.","pos":[33857,34019]},{"content":"public void ttsNotifyBegin()","pos":[34037,34065]},{"content":"public void closeAllForms()","pos":[34447,34474]},{"content":"public void ttsNotifyCommit()","pos":[34857,34886]},{"content":"public void ttsNotifyPreCommit()","pos":[35267,35299]},{"content":"public void ttsNotifyPostBegin()","pos":[35677,35709]},{"content":"public void ttsNotifyAbort()","pos":[36087,36115]},{"content":"public void setDensity(<ph id=\"ph1\">\\[</ph>SysUserInfoDensity theme<ph id=\"ph2\">\\]</ph>)","pos":[36497,36549],"source":"public void setDensity(\\[SysUserInfoDensity theme\\])"},{"content":"public void logInsert(Common recordInserted)","pos":[36907,36951]},{"pos":[37320,37350],"content":"Method IsTablePerHierarchyMode","linkify":"Method IsTablePerHierarchyMode","nodes":[{"content":"Method IsTablePerHierarchyMode","pos":[0,30]}]},{"content":"Determines whether the system is being run with all table inheritance hierarchies flattened (Table per hierarchy mode).","pos":[37352,37471]},{"pos":[37524,37536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if system is being run in Table per hierarchy mode; otherwise, false.","pos":[37538,37612]},{"pos":[37618,37632],"content":"Method buildNo","linkify":"Method buildNo","nodes":[{"content":"Method buildNo","pos":[0,14]}]},{"pos":[37665,37677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37683,37706],"content":"Method canDeleteCompany","linkify":"Method canDeleteCompany","nodes":[{"content":"Method canDeleteCompany","pos":[0,23]}]},{"pos":[37778,37788],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"company","pos":[37790,37797]},{"pos":[37806,37818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37824,37857],"content":"Method countOfTopLevelFormsOpened","linkify":"Method countOfTopLevelFormsOpened","nodes":[{"content":"Method countOfTopLevelFormsOpened","pos":[0,33]}]},{"pos":[37909,37921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37927,37941],"content":"Method company","linkify":"Method company","nodes":[{"content":"Method company","pos":[0,14]}]},{"pos":[38006,38016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"company","pos":[38018,38025]},{"pos":[38034,38046],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38052,38075],"content":"Method curTransactionId","linkify":"Method curTransactionId","nodes":[{"content":"Method curTransactionId","pos":[0,23]}]},{"pos":[38144,38154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ForceTakeNumber","pos":[38156,38171]},{"pos":[38180,38192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38198,38218],"content":"Method dbSynchronize","linkify":"Method dbSynchronize","nodes":[{"content":"Method dbSynchronize","pos":[0,20]}]},{"pos":[38444,38454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[38456,38463]},{"content":"checkAsNeeded","pos":[38477,38490]},{"content":"continueOnError","pos":[38504,38519]},{"content":"showProgress","pos":[38533,38545]},{"content":"checkSyncTables","pos":[38559,38574]},{"content":"createAllIndexes","pos":[38588,38604]},{"content":"useLockForSingleTable","pos":[38618,38639]},{"pos":[38648,38660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38666,38701],"content":"Method getSameNameDifferentIdFields","linkify":"Method getSameNameDifferentIdFields","nodes":[{"content":"Method getSameNameDifferentIdFields","pos":[0,35]}]},{"pos":[38755,38767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38773,38800],"content":"Method getServiceHostStatus","linkify":"Method getServiceHostStatus","nodes":[{"content":"Method getServiceHostStatus","pos":[0,27]}]},{"pos":[38846,38858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38864,38884],"content":"Method isCheckedMode","linkify":"Method isCheckedMode","nodes":[{"content":"Method isCheckedMode","pos":[0,20]}]},{"pos":[38927,38939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38945,38964],"content":"Method isConfigMode","linkify":"Method isConfigMode","nodes":[{"content":"Method isConfigMode","pos":[0,19]}]},{"pos":[39006,39018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39024,39041],"content":"Method isDemoMode","linkify":"Method isDemoMode","nodes":[{"content":"Method isDemoMode","pos":[0,17]}]},{"pos":[39081,39093],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39099,39120],"content":"Method isSqlConnected","linkify":"Method isSqlConnected","nodes":[{"content":"Method isSqlConnected","pos":[0,21]}]},{"pos":[39164,39176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39182,39212],"content":"Method numberOfTreeNodesLoaded","linkify":"Method numberOfTreeNodesLoaded","nodes":[{"content":"Method numberOfTreeNodesLoaded","pos":[0,30]}]},{"pos":[39261,39273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39279,39300],"content":"Method releaseVersion","linkify":"Method releaseVersion","nodes":[{"content":"Method releaseVersion","pos":[0,21]}]},{"pos":[39340,39352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39358,39382],"content":"Method setDefaultCompany","linkify":"Method setDefaultCompany","nodes":[{"content":"Method setDefaultCompany","pos":[0,24]}]},{"pos":[39455,39465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"company","pos":[39467,39474]},{"pos":[39483,39495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39501,39516],"content":"Method ttsLevel","linkify":"Method ttsLevel","nodes":[{"content":"Method ttsLevel","pos":[0,15]}]},{"pos":[39550,39562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39568,39585],"content":"Method ttsVersion","linkify":"Method ttsVersion","nodes":[{"content":"Method ttsVersion","pos":[0,17]}]},{"pos":[39621,39633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39639,39675],"content":"Method CheckUserExistsInAnyPartition","linkify":"Method CheckUserExistsInAnyPartition","nodes":[{"content":"Method CheckUserExistsInAnyPartition","pos":[0,36]}]},{"content":"Checks whether the given user is present in any partition.","pos":[39677,39735]},{"pos":[39811,39821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userId","pos":[39823,39829]},{"pos":[39838,39850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the user exists in any of the partitions; otherwise, false.","pos":[39852,39919]},{"pos":[39925,39945],"content":"Method getFolderPath","linkify":"Method getFolderPath","nodes":[{"content":"Method getFolderPath","pos":[0,20]}]},{"pos":[40001,40011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"folder","pos":[40013,40019]},{"pos":[40028,40040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40046,40072],"content":"Method getVSAssembliesPath","linkify":"Method getVSAssembliesPath","nodes":[{"content":"Method getVSAssembliesPath","pos":[0,26]}]},{"pos":[40124,40136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40142,40164],"content":"Method ilCacheContains","linkify":"Method ilCacheContains","nodes":[{"content":"Method ilCacheContains","pos":[0,22]}]},{"pos":[40234,40244],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"owner","pos":[40246,40251]},{"content":"key","pos":[40265,40268]},{"pos":[40277,40289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40295,40315],"content":"Method ilCacheDelete","linkify":"Method ilCacheDelete","nodes":[{"content":"Method ilCacheDelete","pos":[0,20]}]},{"pos":[40379,40389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"owner","pos":[40391,40396]},{"content":"key","pos":[40410,40413]},{"pos":[40422,40434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40440,40458],"content":"Method ilCacheFind","linkify":"Method ilCacheFind","nodes":[{"content":"Method ilCacheFind","pos":[0,18]}]},{"pos":[40520,40530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"owner","pos":[40532,40537]},{"content":"key","pos":[40551,40554]},{"pos":[40563,40575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40581,40601],"content":"Method initPartition","linkify":"Method initPartition","nodes":[{"content":"Method initPartition","pos":[0,20]}]},{"content":"Initializes a given partition by creating the DAT company and the Admin user.","pos":[40603,40680]},{"pos":[40749,40759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"partition","pos":[40761,40770]},{"content":"The record ID of the partition to initialize.","pos":[40773,40818]},{"pos":[40825,40837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the initialization is successful; otherwise, false.","pos":[40839,40898]},{"pos":[40905,40912],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This API is meant only for use by the upgrade framework.","pos":[40914,40970]},{"content":"Using it in other contexts could cause unrecoverable impact to data.","pos":[40971,41039]},{"pos":[41045,41079],"content":"Method isServiceRegisteredOnClient","linkify":"Method isServiceRegisteredOnClient","nodes":[{"content":"Method isServiceRegisteredOnClient","pos":[0,34]}]},{"pos":[41158,41168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"classId","pos":[41170,41177]},{"pos":[41186,41198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41204,41234],"content":"Method IsSinglePartitionSystem","linkify":"Method IsSinglePartitionSystem","nodes":[{"content":"Method IsSinglePartitionSystem","pos":[0,30]}]},{"content":"Evaluates whether the deployment has a single partition or multiple partitions.","pos":[41236,41315]},{"pos":[41375,41387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the deployment has only one partition; false if the deployment has multiple partitions.","pos":[41389,41484]},{"pos":[41490,41511],"content":"Method XppILAppDomain","linkify":"Method XppILAppDomain","nodes":[{"content":"Method XppILAppDomain","pos":[0,21]}]},{"pos":[41564,41576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41582,41609],"content":"Method isInTransactionScope","linkify":"Method isInTransactionScope","nodes":[{"content":"Method isInTransactionScope","pos":[0,27]}]},{"pos":[41659,41671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41677,41711],"content":"Method transactionScopeCommitLevel","linkify":"Method transactionScopeCommitLevel","nodes":[{"content":"Method transactionScopeCommitLevel","pos":[0,34]}]},{"pos":[41766,41778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41784,41798],"content":"Method Encrypt","linkify":"Method Encrypt","nodes":[{"content":"Method Encrypt","pos":[0,14]}]},{"pos":[41846,41856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"input","pos":[41858,41863]},{"pos":[41872,41884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41890,41904],"content":"Method Decrypt","linkify":"Method Decrypt","nodes":[{"content":"Method Decrypt","pos":[0,14]}]},{"pos":[41953,41963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cipher","pos":[41965,41971]},{"pos":[41980,41992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[41998,42026],"content":"Method decryptToSecureString","linkify":"Method decryptToSecureString","nodes":[{"content":"Method decryptToSecureString","pos":[0,28]}]},{"pos":[42114,42124],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cipher","pos":[42126,42132]},{"pos":[42141,42153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42159,42189],"content":"Method encryptFromSecureString","linkify":"Method encryptFromSecureString","nodes":[{"content":"Method encryptFromSecureString","pos":[0,30]}]},{"pos":[42278,42288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"input","pos":[42290,42295]},{"pos":[42304,42316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42322,42346],"content":"Method EncryptForPurpose","linkify":"Method EncryptForPurpose","nodes":[{"content":"Method EncryptForPurpose","pos":[0,24]}]},{"pos":[42417,42427],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"input","pos":[42429,42434]},{"content":"purpose","pos":[42448,42455]},{"pos":[42464,42476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42482,42506],"content":"Method DecryptForPurpose","linkify":"Method DecryptForPurpose","nodes":[{"content":"Method DecryptForPurpose","pos":[0,24]}]},{"pos":[42578,42588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cipher","pos":[42590,42596]},{"content":"purpose","pos":[42610,42617]},{"pos":[42626,42638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42644,42682],"content":"Method decryptToSecureStringForPurpose","linkify":"Method decryptToSecureStringForPurpose","nodes":[{"content":"Method decryptToSecureStringForPurpose","pos":[0,38]}]},{"pos":[42793,42803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cipher","pos":[42805,42811]},{"content":"purpose","pos":[42825,42832]},{"pos":[42841,42853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42859,42899],"content":"Method encryptFromSecureStringForPurpose","linkify":"Method encryptFromSecureStringForPurpose","nodes":[{"content":"Method encryptFromSecureStringForPurpose","pos":[0,40]}]},{"pos":[43011,43021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"input","pos":[43023,43028]},{"content":"purpose","pos":[43042,43049]},{"pos":[43058,43070],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43076,43106],"content":"Method convertToUnsecureString","linkify":"Method convertToUnsecureString","nodes":[{"content":"Method convertToUnsecureString","pos":[0,30]}]},{"pos":[43196,43206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"secureString","pos":[43208,43220]},{"pos":[43229,43241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43247,43275],"content":"Method convertToSecureString","linkify":"Method convertToSecureString","nodes":[{"content":"Method convertToSecureString","pos":[0,28]}]},{"pos":[43365,43375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"unsecureString","pos":[43377,43391]},{"pos":[43400,43412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43418,43435],"content":"Method startBatch","linkify":"Method startBatch","nodes":[{"content":"Method startBatch","pos":[0,17]}]},{"pos":[43478,43498],"content":"Method deleteCompany","linkify":"Method deleteCompany","nodes":[{"content":"Method deleteCompany","pos":[0,20]}]},{"pos":[43564,43574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"company","pos":[43576,43583]},{"pos":[43591,43606],"content":"Method ttsabort","linkify":"Method ttsabort","nodes":[{"content":"Method ttsabort","pos":[0,15]}]},{"pos":[43640,43669],"content":"Method transactionScopeCommit","linkify":"Method transactionScopeCommit","nodes":[{"content":"Method transactionScopeCommit","pos":[0,29]}]},{"pos":[43717,43727],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xApplication class.","pos":[43729,43782]},{"pos":[43811,43827],"content":"Method stopBatch","linkify":"Method stopBatch","nodes":[{"content":"Method stopBatch","pos":[0,16]}]},{"pos":[43869,43888],"content":"Method logRenameKey","linkify":"Method logRenameKey","nodes":[{"content":"Method logRenameKey","pos":[0,19]}]},{"pos":[43991,44001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recordOrig","pos":[44003,44013]},{"content":"recordUpdated","pos":[44027,44040]},{"content":"changedFields","pos":[44054,44067]},{"pos":[44075,44089],"content":"Method startup","linkify":"Method startup","nodes":[{"content":"Method startup","pos":[0,14]}]},{"pos":[44154,44164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"startupCmd","pos":[44166,44176]},{"content":"buildNumber","pos":[44190,44201]},{"pos":[44209,44235],"content":"Method RedirectToDashboard","linkify":"Method RedirectToDashboard","nodes":[{"content":"Method RedirectToDashboard","pos":[0,26]}]},{"pos":[44280,44304],"content":"Method insertXReferences","linkify":"Method insertXReferences","nodes":[{"content":"Method insertXReferences","pos":[0,24]}]},{"content":"Is invoked by the framework when cross-reference information should be inserted into the database.","pos":[44306,44404]},{"pos":[44448,44455],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Application class provides the overloaded functionality.","pos":[44457,44517]},{"pos":[44523,44539],"content":"Method logUpdate","linkify":"Method logUpdate","nodes":[{"content":"Method logUpdate","pos":[0,16]}]},{"pos":[44639,44649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recordOrig","pos":[44651,44661]},{"content":"recordUpdated","pos":[44675,44688]},{"content":"changedFields","pos":[44702,44715]},{"pos":[44723,44742],"content":"Method setStartPage","linkify":"Method setStartPage","nodes":[{"content":"Method setStartPage","pos":[0,19]}]},{"pos":[44813,44823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"startpage","pos":[44825,44834]},{"pos":[44842,44862],"content":"Method ilCacheInsert","linkify":"Method ilCacheInsert","nodes":[{"content":"Method ilCacheInsert","pos":[0,20]}]},{"pos":[44938,44948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"owner","pos":[44950,44955]},{"content":"key","pos":[44969,44972]},{"content":"value","pos":[44986,44991]},{"pos":[44999,45024],"content":"Method clearManagedCaches","linkify":"Method clearManagedCaches","nodes":[{"content":"Method clearManagedCaches","pos":[0,25]}]},{"pos":[45068,45086],"content":"Method eventDelete","linkify":"Method eventDelete","nodes":[{"content":"Method eventDelete","pos":[0,18]}]},{"content":"Serves as a callback that is called by the kernel when a record in a table is deleted, provided that the kernel has been set up to monitor records in that table.","pos":[45088,45249]},{"pos":[45307,45317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recordDeleted","pos":[45319,45332]},{"content":"The deleted record.","pos":[45335,45354]},{"pos":[45361,45368],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A developer can set up the kernel to call back on deletes for a given table.","pos":[45370,45446]},{"content":"This can be accomplished by inserting a record into the DatabaseLog kernel table with all fields set to relevant values, which includes setting the field logType to EventDelete.","pos":[45447,45624]},{"content":"This is very similar to how the logDelete method is called and set up.","pos":[45625,45695]},{"content":"The call of this method will be in the transaction in which the record is deleted.","pos":[45696,45778]},{"pos":[45784,45817],"content":"Method enableCountryContextFilter","linkify":"Method enableCountryContextFilter","nodes":[{"content":"Method enableCountryContextFilter","pos":[0,33]}]},{"content":"Enables system-wide optimization in the data access layer, whereby fields that don't belong in the current company's country/region context are dropped from the SELECT query.","pos":[45819,45993]},{"pos":[46045,46060],"content":"Method setTheme","linkify":"Method setTheme","nodes":[{"content":"Method setTheme","pos":[0,15]}]},{"pos":[46119,46129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"theme","pos":[46131,46136]},{"pos":[46144,46159],"content":"Method sysTrace","linkify":"Method sysTrace","nodes":[{"content":"Method sysTrace","pos":[0,15]}]},{"pos":[46237,46247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"traceType","pos":[46249,46258]},{"content":"traceInfo","pos":[46272,46281]},{"pos":[46289,46306],"content":"Method initGlobal","linkify":"Method initGlobal","nodes":[{"content":"Method initGlobal","pos":[0,17]}]},{"pos":[46395,46405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"infoObject","pos":[46407,46417]},{"content":"versionControlObject","pos":[46431,46451]},{"pos":[46459,46490],"content":"Method transactionScopeRollback","linkify":"Method transactionScopeRollback","nodes":[{"content":"Method transactionScopeRollback","pos":[0,31]}]},{"pos":[46558,46568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"commitLevel","pos":[46570,46581]},{"pos":[46589,46604],"content":"Method ttsbegin","linkify":"Method ttsbegin","nodes":[{"content":"Method ttsbegin","pos":[0,15]}]},{"pos":[46638,46662],"content":"Method flushcompanycache","linkify":"Method flushcompanycache","nodes":[{"content":"Method flushcompanycache","pos":[0,24]}]},{"pos":[46732,46742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"company","pos":[46744,46751]},{"pos":[46759,46775],"content":"Method logDelete","linkify":"Method logDelete","nodes":[{"content":"Method logDelete","pos":[0,16]}]},{"pos":[46831,46841],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recordDeleted","pos":[46843,46856]},{"pos":[46864,46894],"content":"Method registerServiceOnClient","linkify":"Method registerServiceOnClient","nodes":[{"content":"Method registerServiceOnClient","pos":[0,30]}]},{"pos":[46984,46994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"classId","pos":[46996,47003]},{"content":"externalName","pos":[47017,47029]},{"pos":[47037,47055],"content":"Method eventUpdate","linkify":"Method eventUpdate","nodes":[{"content":"Method eventUpdate","pos":[0,18]}]},{"content":"Serves as a callback that is called by the kernel when a record in a table is updated, provided that the kernel has been set up to monitor records in that table.","pos":[47057,47218]},{"pos":[47320,47330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recordOrig","pos":[47332,47342]},{"content":"A container of all changed fields.","pos":[47345,47379]},{"content":"recordUpdated","pos":[47391,47404]},{"content":"A container of all changed fields.","pos":[47407,47441]},{"content":"changedFields","pos":[47453,47466]},{"content":"A container of all changed fields.","pos":[47469,47503]},{"pos":[47510,47517],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A developer can set up the kernel to call back on updates for a given table.","pos":[47519,47595]},{"content":"This is accomplished by inserting a record into the DatabaseLog kernel table with all fields set to relevant values, which includes setting the field logType to EventUpdate.","pos":[47596,47769]},{"content":"It is possible to set up the kernel to call back whenever a record is updated or when a specific field is updated.","pos":[47770,47884]},{"content":"This is very similar to how the logUpdate method is called and set up.","pos":[47885,47955]},{"content":"The call of this method will be in the transaction in which the record is updated.","pos":[47956,48038]},{"pos":[48044,48072],"content":"Method transactionScopeBegin","linkify":"Method transactionScopeBegin","nodes":[{"content":"Method transactionScopeBegin","pos":[0,28]}]},{"pos":[48119,48146],"content":"Method checkForNewBatchJobs","linkify":"Method checkForNewBatchJobs","nodes":[{"content":"Method checkForNewBatchJobs","pos":[0,27]}]},{"pos":[48199,48233],"content":"Method disableCountryContextFilter","linkify":"Method disableCountryContextFilter","nodes":[{"content":"Method disableCountryContextFilter","pos":[0,34]}]},{"content":"Disables system-wide optimization in the data access layer, whereby fields that don't belong in the current company's country/region context are dropped from the SELECT query.","pos":[48235,48410]},{"pos":[48463,48474],"content":"Method xref","linkify":"Method xref","nodes":[{"content":"Method xref","pos":[0,11]}]},{"pos":[48521,48531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[48533,48537]},{"content":"x","pos":[48551,48552]},{"pos":[48560,48588],"content":"Method transactionScopeAbort","linkify":"Method transactionScopeAbort","nodes":[{"content":"Method transactionScopeAbort","pos":[0,28]}]},{"pos":[48635,48656],"content":"Method eventRenameKey","linkify":"Method eventRenameKey","nodes":[{"content":"Method eventRenameKey","pos":[0,21]}]},{"content":"Serves as a callback that is called by the kernel when a primary key is renamed, provided that the kernel has been set up to monitor records in that table.","pos":[48658,48813]},{"pos":[48918,48928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recordOrig","pos":[48930,48940]},{"content":"A container of all changed fields.","pos":[48943,48977]},{"content":"recordUpdated","pos":[48989,49002]},{"content":"A container of all changed fields.","pos":[49005,49039]},{"content":"changedFields","pos":[49051,49064]},{"content":"A container of all changed fields.","pos":[49067,49101]},{"pos":[49108,49115],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A developer can set up the kernel to call back on primary key renames for a given table.","pos":[49117,49205]},{"content":"This is accomplished by inserting a record into the DatabaseLog kernel table with all fields set to relevant values, which includes setting the field logType to EventRenameKey.","pos":[49206,49382]},{"content":"This is very similar to how the logRenameKey method is called and set up.","pos":[49383,49456]},{"content":"The call of this method will be in the transaction in which the primary key is renamed.","pos":[49457,49544]},{"pos":[49550,49586],"content":"Method flushClientPerformanceOptions","linkify":"Method flushClientPerformanceOptions","nodes":[{"content":"Method flushClientPerformanceOptions","pos":[0,36]}]},{"pos":[49641,49667],"content":"Method flushClientServices","linkify":"Method flushClientServices","nodes":[{"content":"Method flushClientServices","pos":[0,26]}]},{"pos":[49719,49744],"content":"Method restartServiceHost","linkify":"Method restartServiceHost","nodes":[{"content":"Method restartServiceHost","pos":[0,25]}]},{"pos":[49788,49813],"content":"Method updateXrefTreeNode","linkify":"Method updateXrefTreeNode","nodes":[{"content":"Method updateXrefTreeNode","pos":[0,25]}]},{"content":"Is invoked by the framework when cross-reference information for the various node types is updated.","pos":[49815,49914]},{"pos":[49976,49986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"treeNode","pos":[49988,49996]},{"pos":[50005,50012],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Application class provides the overloaded functionality.","pos":[50014,50074]},{"pos":[50080,50096],"content":"Method ttscommit","linkify":"Method ttscommit","nodes":[{"content":"Method ttscommit","pos":[0,16]}]},{"pos":[50131,50158],"content":"Method RequestCompanyChange","linkify":"Method RequestCompanyChange","nodes":[{"content":"Method RequestCompanyChange","pos":[0,27]}]},{"pos":[50233,50243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"company","pos":[50245,50252]},{"pos":[50260,50275],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[50309,50327],"content":"Method eventInsert","linkify":"Method eventInsert","nodes":[{"content":"Method eventInsert","pos":[0,18]}]},{"content":"Serves as a callback that is called by the kernel when a record in a table is inserted, provided that the kernel has been set up to monitor records in that table.","pos":[50329,50491]},{"pos":[50550,50560],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recordInserted","pos":[50562,50576]},{"content":"The inserted record.","pos":[50579,50599]},{"pos":[50606,50613],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A developer can set up the kernel to call back on inserts for a given table.","pos":[50615,50691]},{"content":"This is accomplished by inserting a record into the DatabaseLog kernel table with all fields set to relevant values, which includes setting the field logType to EventInsert.","pos":[50692,50865]},{"content":"This is very similar to how logInsert method is called and set up.","pos":[50866,50932]},{"content":"The call of this method will be in the transaction in which the record is inserted.","pos":[50933,51016]},{"pos":[51022,51043],"content":"Method ttsNotifyBegin","linkify":"Method ttsNotifyBegin","nodes":[{"content":"Method ttsNotifyBegin","pos":[0,21]}]},{"pos":[51083,51103],"content":"Method closeAllForms","linkify":"Method closeAllForms","nodes":[{"content":"Method closeAllForms","pos":[0,20]}]},{"pos":[51142,51164],"content":"Method ttsNotifyCommit","linkify":"Method ttsNotifyCommit","nodes":[{"content":"Method ttsNotifyCommit","pos":[0,22]}]},{"pos":[51205,51230],"content":"Method ttsNotifyPreCommit","linkify":"Method ttsNotifyPreCommit","nodes":[{"content":"Method ttsNotifyPreCommit","pos":[0,25]}]},{"pos":[51274,51299],"content":"Method ttsNotifyPostBegin","linkify":"Method ttsNotifyPostBegin","nodes":[{"content":"Method ttsNotifyPostBegin","pos":[0,25]}]},{"pos":[51343,51364],"content":"Method ttsNotifyAbort","linkify":"Method ttsNotifyAbort","nodes":[{"content":"Method ttsNotifyAbort","pos":[0,21]}]},{"pos":[51404,51421],"content":"Method setDensity","linkify":"Method setDensity","nodes":[{"content":"Method setDensity","pos":[0,17]}]},{"pos":[51484,51494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"theme","pos":[51496,51501]},{"pos":[51509,51525],"content":"Method logInsert","linkify":"Method logInsert","nodes":[{"content":"Method logInsert","pos":[0,16]}]},{"pos":[51582,51592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recordInserted","pos":[51594,51608]},{"pos":[51615,51626],"content":"Class xArgs","linkify":"Class xArgs","nodes":[{"content":"Class xArgs","pos":[0,11]}]},{"content":"The xArgs class is used to pass arguments such as a name, a caller, and parameters between application objects.","pos":[51659,51770]},{"pos":[51776,51783],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Forms, reports and queries all use this class as their first argument in the constructor.","pos":[51785,51874]},{"content":"The preferred way to use this class is to construct an xArgs object, supply a name-string, and then pass the xArgs object to the forms constructor or a ClassFactory method.If you want to refer to the xArgs object passed to one of these classes, it can be reached using args method of that class.There are four methods that can be used to pass extra information to the new class:","pos":[51875,52253]},{"content":"The parm - to pass strings","pos":[52259,52285]},{"content":"The parmEnum and parmEnumType methods - to pass enumeration values","pos":[52290,52356]},{"content":"The parmObject method - to pass an object of any type","pos":[52361,52414]},{"content":"The instance of the xArgs class that is sent from the caller can be created automatically by the kernel or explicitly by the caller.","pos":[52416,52548]},{"content":"When the caller uses a menu item to call an object, an instance of the xArgs class is created by the kernel code.","pos":[52549,52662]},{"content":"The menu item name will be set to the name of the menu item used.","pos":[52663,52728]},{"content":"If the menu item has values for the Parameters, EnumParameter, or EnumTypeParameter properties set, the kernel will set the values of the corresponding Parm, ParmEnum, or ParmEnumType properties for this instance of the xArgs class.","pos":[52729,52961]},{"pos":[52967,52975],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[52981,52988],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[52992,52998]},{"content":"Description","pos":[53103,53114]},{"content":"public boolean allowUseOfPreloadedForm(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[53490,53547],"source":"public boolean allowUseOfPreloadedForm(\\[boolean value\\])"},{"content":"Determines if the form launched for this instance may come from the pre-loaded form pool.","pos":[53601,53690]},{"content":"public int arrIdx(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[53739,53771],"source":"public int arrIdx(\\[int value\\])"},{"content":"public Object caller(<ph id=\"ph1\">\\[</ph>Object value<ph id=\"ph2\">\\]</ph>)","pos":[53988,54026],"source":"public Object caller(\\[Object value\\])"},{"content":"Gets or sets the instance of the object that created this instance of the xArgs class.","pos":[54099,54185]},{"content":"public IDispatcherProxy callerDispatcher()","pos":[54237,54279]},{"content":"public FormControl callerFormControl(<ph id=\"ph1\">\\[</ph>FormControl value<ph id=\"ph2\">\\]</ph>)","pos":[54486,54545],"source":"public FormControl callerFormControl(\\[FormControl value\\])"},{"content":"public str callerName()","pos":[54735,54758]},{"content":"public UtilElementType callerType()","pos":[54984,55019]},{"content":"public Guid callerId()","pos":[55233,55255]},{"content":"public str clientId(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[55482,55516],"source":"public str clientId(\\[str value\\])"},{"content":"public CopyCallerQuery copyCallerQuery(<ph id=\"ph1\">\\[</ph>CopyCallerQuery value<ph id=\"ph2\">\\]</ph>)","pos":[55731,55796],"source":"public CopyCallerQuery copyCallerQuery(\\[CopyCallerQuery value\\])"},{"content":"public TableId dataset()","pos":[55980,56004]},{"content":"Gets the table ID of the table in which the caller object is working.","pos":[56091,56160]},{"content":"public str designName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[56229,56265],"source":"public str designName(\\[str value\\])"},{"content":"Gets or sets a string that indicates a design on a report or form.","pos":[56340,56406]},{"content":"public ExtendedTypeId extType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId edt<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[56478,56551],"source":"public ExtendedTypeId extType(\\[ExtendedTypeId edt\\], \\[int arrayIndex\\])"},{"content":"public FormViewOption formViewOption(<ph id=\"ph1\">\\[</ph>FormViewOption value<ph id=\"ph2\">\\]</ph>)","pos":[56727,56789],"source":"public FormViewOption formViewOption(\\[FormViewOption value\\])"},{"content":"public InitialQueryParameter initialQuery(<ph id=\"ph1\">\\[</ph>InitialQueryParameter initialQueryParameter<ph id=\"ph2\">\\]</ph>)","pos":[56976,57066],"source":"public InitialQueryParameter initialQuery(\\[InitialQueryParameter initialQueryParameter\\])"},{"content":"public FieldId lookupField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[57225,57270],"source":"public FieldId lookupField(\\[FieldId value\\])"},{"content":"Gets or sets the field ID in a table to use to look up a specified record.","pos":[57336,57410]},{"content":"public Common lookupRecord(<ph id=\"ph1\">\\[</ph>Common value<ph id=\"ph2\">\\]</ph>)","pos":[57474,57518],"source":"public Common lookupRecord(\\[Common value\\])"},{"content":"Finds a record in the specified table.","pos":[57585,57623]},{"content":"public TableId lookupTable(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[57723,57768],"source":"public TableId lookupTable(\\[TableId value\\])"},{"content":"public str lookupValue(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[57972,58009],"source":"public str lookupValue(\\[str value\\])"},{"content":"Gets or sets a string to use with the LookupField method to find a value in a field of a table.","pos":[58083,58178]},{"content":"public str managedContentItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[58221,58269],"source":"public str managedContentItemName(\\[str value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[58470,58508],"source":"public str menuItemName(\\[str value\\])"},{"content":"Gets or sets the name of the menu item to use to start the application object.","pos":[58581,58659]},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[58719,58775],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"Gets or sets the type of the menu item to use to start the called application object.","pos":[58830,58915]},{"content":"public MultiSelectionContext multiSelectionContext()","pos":[58968,59020]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[59217,59247],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another MSDAX application object.","pos":[59328,59449]},{"content":"public Object object(<ph id=\"ph1\">\\[</ph>Object value<ph id=\"ph2\">\\]</ph>)","pos":[59466,59504],"source":"public Object object(\\[Object value\\])"},{"content":"Gets and sets the application name of the object for which to open a new instance.","pos":[59577,59659]},{"content":"public OpenMode openMode(<ph id=\"ph1\">\\[</ph>OpenMode value<ph id=\"ph2\">\\]</ph>)","pos":[59715,59759],"source":"public OpenMode openMode(\\[OpenMode value\\])"},{"content":"public Int64 parentWnd(<ph id=\"ph1\">\\[</ph>Int64 value<ph id=\"ph2\">\\]</ph>)","pos":[59964,60003],"source":"public Int64 parentWnd(\\[Int64 value\\])"},{"content":"public str parm(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[60213,60243],"source":"public str parm(\\[str value\\])"},{"content":"Gets or sets a string that specifies miscellaneous information for the called object.","pos":[60324,60409]},{"content":"public AnyType parmEnum(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60462,60500],"source":"public AnyType parmEnum(\\[int value\\])"},{"content":"Gets or sets the enumeration value of the enumeration type that is specified in the parmEnumType method.","pos":[60573,60677]},{"content":"public int parmEnumType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60711,60749],"source":"public int parmEnumType(\\[int value\\])"},{"content":"Gets or sets the ID value of any enumeration type.","pos":[60822,60872]},{"content":"public Object parmObject(<ph id=\"ph1\">\\[</ph>Object value<ph id=\"ph2\">\\]</ph>)","pos":[60960,61002],"source":"public Object parmObject(\\[Object value\\])"},{"content":"Gets or sets the instance of any object to pass to the called object.","pos":[61071,61140]},{"content":"public Common record(<ph id=\"ph1\">\\[</ph>Common value<ph id=\"ph2\">\\]</ph>)","pos":[61209,61247],"source":"public Common record(\\[Common value\\])"},{"content":"Gets or sets the record from the table on which the caller object is working.","pos":[61320,61397]},{"content":"public FieldId refField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[61458,61500],"source":"public FieldId refField(\\[FieldId value\\])"},{"content":"public str getRequestContextQuery()","pos":[61707,61742]},{"content":"public str requestContextQuery(str value)","pos":[61956,61997]},{"content":"public FieldId selectField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[62205,62250],"source":"public FieldId selectField(\\[FieldId value\\])"},{"content":"public str toString()","pos":[62454,62475]},{"content":"Retrieves a string representation of an instance of the xArgs.","pos":[62565,62627]},{"content":"public boolean applyRecordAsDynalink(<ph id=\"ph1\">\\[</ph>boolean applyAsDynalink<ph id=\"ph2\">\\]</ph>)","pos":[62703,62768],"source":"public boolean applyRecordAsDynalink(\\[boolean applyAsDynalink\\])"},{"content":"public void onCallerChanged(<ph id=\"ph1\">\\[</ph>Object value<ph id=\"ph2\">\\]</ph>)","pos":[62952,62997],"source":"public void onCallerChanged(\\[Object value\\])"},{"content":"public void new(<ph id=\"ph1\">\\[</ph>AnyType nameOrCaller<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>Object object<ph id=\"ph4\">\\]</ph>)","pos":[63201,63261],"source":"public void new(\\[AnyType nameOrCaller\\], \\[Object object\\])"},{"content":"Constructs an instance of this class, which is used to pass information to high-level classes such as the FormRun or ReportRun class.","pos":[63312,63445]},{"content":"public void finalize()","pos":[63450,63472]},{"content":"Removes the current instance of the xArgs class from memory.","pos":[63561,63621]},{"content":"public void setupArgs(str parm, int enumType, AnyType enumValue, <ph id=\"ph1\">\\[</ph>str menuItemName<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int menuItemType<ph id=\"ph4\">\\]</ph>)","pos":[63699,63807],"source":"public void setupArgs(str parm, int enumType, AnyType enumValue, \\[str menuItemName\\], \\[int menuItemType\\])"},{"pos":[63951,63981],"content":"Method allowUseOfPreloadedForm","linkify":"Method allowUseOfPreloadedForm","nodes":[{"content":"Method allowUseOfPreloadedForm","pos":[0,30]}]},{"content":"Determines if the form launched for this instance may come from the pre-loaded form pool.","pos":[63983,64072]},{"pos":[64140,64150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64152,64157]},{"content":"A Boolean value that determines whether the loaded form can come from the pre-loaded form pool.","pos":[64160,64255]},{"pos":[64262,64274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the form launched for this instance may come from the pre-loaded form pool; otherwise, false.","pos":[64276,64377]},{"pos":[64384,64391],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use of a pre-loaded form is permitted by default.","pos":[64393,64442]},{"content":"Set this to false only if there are undesired side-effects from the use of a pre-loaded form.","pos":[64443,64536]},{"pos":[64542,64555],"content":"Method arrIdx","linkify":"Method arrIdx","nodes":[{"content":"Method arrIdx","pos":[0,13]}]},{"pos":[64598,64608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64610,64615]},{"pos":[64624,64636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64642,64655],"content":"Method caller","linkify":"Method caller","nodes":[{"content":"Method caller","pos":[0,13]}]},{"content":"Gets or sets the instance of the object that created this instance of the xArgs class.","pos":[64657,64743]},{"pos":[64792,64802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64804,64809]},{"content":"The value to set; optional.","pos":[64812,64839]},{"pos":[64846,64858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current instance of the caller object.","pos":[64860,64902]},{"pos":[64908,64931],"content":"Method callerDispatcher","linkify":"Method callerDispatcher","nodes":[{"content":"Method callerDispatcher","pos":[0,23]}]},{"pos":[64986,64998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65004,65028],"content":"Method callerFormControl","linkify":"Method callerFormControl","nodes":[{"content":"Method callerFormControl","pos":[0,24]}]},{"pos":[65098,65108],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65110,65115]},{"pos":[65124,65136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65142,65159],"content":"Method callerName","linkify":"Method callerName","nodes":[{"content":"Method callerName","pos":[0,17]}]},{"pos":[65195,65207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65213,65230],"content":"Method callerType","linkify":"Method callerType","nodes":[{"content":"Method callerType","pos":[0,17]}]},{"pos":[65278,65290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65296,65311],"content":"Method callerId","linkify":"Method callerId","nodes":[{"content":"Method callerId","pos":[0,15]}]},{"pos":[65346,65358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65364,65379],"content":"Method clientId","linkify":"Method clientId","nodes":[{"content":"Method clientId","pos":[0,15]}]},{"pos":[65424,65434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65436,65441]},{"pos":[65450,65462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65468,65490],"content":"Method copyCallerQuery","linkify":"Method copyCallerQuery","nodes":[{"content":"Method copyCallerQuery","pos":[0,22]}]},{"pos":[65566,65576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65578,65583]},{"pos":[65592,65604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65610,65624],"content":"Method dataset","linkify":"Method dataset","nodes":[{"content":"Method dataset","pos":[0,14]}]},{"content":"Gets the table ID of the table in which the caller object is working.","pos":[65626,65695]},{"pos":[65732,65744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The table ID of the table in which the caller object is working.","pos":[65746,65810]},{"pos":[65817,65824],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned value is often used to identify which type of record is being transferred from the caller in the record method.","pos":[65826,65950]},{"pos":[65956,65973],"content":"Method designName","linkify":"Method designName","nodes":[{"content":"Method designName","pos":[0,17]}]},{"content":"Gets or sets a string that indicates a design on a report or form.","pos":[65975,66041]},{"pos":[66088,66098],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66100,66105]},{"content":"The value to set; optional.","pos":[66108,66135]},{"pos":[66142,66154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66160,66174],"content":"Method extType","linkify":"Method extType","nodes":[{"content":"Method extType","pos":[0,14]}]},{"pos":[66256,66266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"edt","pos":[66268,66271]},{"content":"arrayIndex","pos":[66285,66295]},{"pos":[66304,66316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66322,66343],"content":"Method formViewOption","linkify":"Method formViewOption","nodes":[{"content":"Method formViewOption","pos":[0,21]}]},{"pos":[66416,66426],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66428,66433]},{"pos":[66442,66454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66460,66479],"content":"Method initialQuery","linkify":"Method initialQuery","nodes":[{"content":"Method initialQuery","pos":[0,19]}]},{"pos":[66580,66590],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"initialQueryParameter","pos":[66592,66613]},{"pos":[66622,66634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66640,66658],"content":"Method lookupField","linkify":"Method lookupField","nodes":[{"content":"Method lookupField","pos":[0,18]}]},{"content":"Gets or sets the field ID in a table to use to look up a specified record.","pos":[66660,66734]},{"pos":[66790,66800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66802,66807]},{"content":"The value to set; optional.","pos":[66810,66837]},{"pos":[66844,66856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The field ID of a field in a table to use to look up a specified record.","pos":[66858,66930]},{"pos":[66937,66944],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned value can be used by the called object to look up the specified record in the LookupRecord method or the string specified in the LookupValue method.","pos":[66946,67107]},{"content":"For example, the field to look up could be set with the following: xArgs.lookupField(fieldnum(TableName, FieldName));","pos":[67108,67225]},{"pos":[67231,67250],"content":"Method lookupRecord","linkify":"Method lookupRecord","nodes":[{"content":"Method lookupRecord","pos":[0,19]}]},{"content":"Finds a record in the specified table.","pos":[67252,67290]},{"pos":[67345,67355],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67357,67362]},{"content":"The table in which to find a record.","pos":[67365,67401]},{"pos":[67408,67420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A record in the specified table.","pos":[67422,67454]},{"pos":[67461,67468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be used by the called object in combination with the field ID that is returned from the lookupField method to find the value of the field in the record that is returned by this method.","pos":[67470,67670]},{"pos":[67676,67694],"content":"Method lookupTable","linkify":"Method lookupTable","nodes":[{"content":"Method lookupTable","pos":[0,18]}]},{"pos":[67750,67760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67762,67767]},{"pos":[67776,67788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67794,67812],"content":"Method lookupValue","linkify":"Method lookupValue","nodes":[{"content":"Method lookupValue","pos":[0,18]}]},{"content":"Gets or sets a string to use with the LookupField method to find a value in a field of a table.","pos":[67814,67909]},{"pos":[67957,67967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67969,67974]},{"content":"The value to set; optional.","pos":[67977,68004]},{"pos":[68011,68023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string to use with the LookupField method to find a value.","pos":[68025,68085]},{"pos":[68091,68120],"content":"Method managedContentItemName","linkify":"Method managedContentItemName","nodes":[{"content":"Method managedContentItemName","pos":[0,29]}]},{"pos":[68179,68189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68191,68196]},{"pos":[68205,68217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68223,68242],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"content":"Gets or sets the name of the menu item to use to start the application object.","pos":[68244,68322]},{"pos":[68371,68381],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68383,68388]},{"content":"The value to set; optional.","pos":[68391,68418]},{"pos":[68425,68437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the menu item to use to start the application object.","pos":[68439,68504]},{"pos":[68511,68518],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For example, to set the menu item you could use the following: xArgs.menuItemName(menuitemdisplaystr(CostingVersionPeriodic));","pos":[68520,68646]},{"pos":[68652,68671],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"content":"Gets or sets the type of the menu item to use to start the called application object.","pos":[68673,68758]},{"pos":[68825,68835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68837,68842]},{"content":"The value to set; optional.","pos":[68845,68872]},{"pos":[68879,68891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of the menu item to use to start the called application object.","pos":[68893,68965]},{"pos":[68972,68979],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The menu item type will be one of the Display, Output, or Action enumeration values.","pos":[68981,69065]},{"pos":[69071,69099],"content":"Method multiSelectionContext","linkify":"Method multiSelectionContext","nodes":[{"content":"Method multiSelectionContext","pos":[0,28]}]},{"pos":[69164,69176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69182,69193],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another MSDAX application object.","pos":[69195,69316]},{"pos":[69357,69367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69369,69374]},{"content":"The value to set; optional.","pos":[69377,69404]},{"pos":[69411,69423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[69425,69489]},{"pos":[69496,69503],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[69505,69599]},{"content":"Begins with a letter.","pos":[69605,69626]},{"content":"Does not exceed 250 characters.","pos":[69631,69662]},{"content":"May include numbers and underscore characters.","pos":[69667,69713]},{"content":"May include punctuation or spaces.","pos":[69718,69752]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[69757,69875]},{"content":"For example, to call a form from an application object you can use: args.name(formstr(FormName));","pos":[69877,69974]},{"pos":[69980,69993],"content":"Method object","linkify":"Method object","nodes":[{"content":"Method object","pos":[0,13]}]},{"content":"Gets and sets the application name of the object for which to open a new instance.","pos":[69995,70077]},{"pos":[70126,70136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70138,70143]},{"content":"The value to set; optional.","pos":[70146,70173]},{"pos":[70180,70192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The application name of the object for which to open a new instance.","pos":[70194,70262]},{"pos":[70269,70276],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value parameter may be one of the following types of objects:","pos":[70278,70343]},{"content":"Form","pos":[70349,70353]},{"content":"Report","pos":[70358,70364]},{"content":"Job","pos":[70369,70372]},{"content":"Class","pos":[70377,70382]},{"content":"Query.","pos":[70387,70393]},{"pos":[70399,70414],"content":"Method openMode","linkify":"Method openMode","nodes":[{"content":"Method openMode","pos":[0,15]}]},{"pos":[70469,70479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70481,70486]},{"pos":[70495,70507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70513,70529],"content":"Method parentWnd","linkify":"Method parentWnd","nodes":[{"content":"Method parentWnd","pos":[0,16]}]},{"pos":[70579,70589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70591,70596]},{"pos":[70605,70617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70623,70634],"content":"Method parm","linkify":"Method parm","nodes":[{"content":"Method parm","pos":[0,11]}]},{"content":"Gets or sets a string that specifies miscellaneous information for the called object.","pos":[70636,70721]},{"pos":[70762,70772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70774,70779]},{"content":"The value to set; optional.","pos":[70782,70809]},{"pos":[70816,70828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the string that specifies miscellaneous information for the called object.","pos":[70830,70917]},{"pos":[70923,70938],"content":"Method parmEnum","linkify":"Method parmEnum","nodes":[{"content":"Method parmEnum","pos":[0,15]}]},{"content":"Gets or sets the enumeration value of the enumeration type that is specified in the parmEnumType method.","pos":[70940,71044]},{"pos":[71093,71103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71105,71110]},{"content":"The key of an enumeration value to set; optional.","pos":[71113,71162]},{"pos":[71169,71181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The enumeration value of the enumeration type that is specified in the parmEnumType method.","pos":[71183,71274]},{"pos":[71281,71288],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is often used with the parmEnumType method: args.parmEnumType(enumnum(AssetBookType));args.parmEnumType(enumnum(AssetBookType));","pos":[71290,71430]},{"pos":[71436,71455],"content":"Method parmEnumType","linkify":"Method parmEnumType","nodes":[{"content":"Method parmEnumType","pos":[0,19]}]},{"content":"Gets or sets the ID value of any enumeration type.","pos":[71457,71507]},{"pos":[71556,71566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71568,71573]},{"content":"The value to set; optional.","pos":[71576,71603]},{"pos":[71610,71622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID value of the enumeration type.","pos":[71624,71661]},{"pos":[71668,71675],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used with the parmEnum method to send a specific value of an enumeration type to the called object.","pos":[71677,71791]},{"content":"For example: args.parmEnumType(enumnum(AssetBookType));args.parmEnum(AssetBookType::ValueModel);","pos":[71792,71888]},{"pos":[71894,71911],"content":"Method parmObject","linkify":"Method parmObject","nodes":[{"content":"Method parmObject","pos":[0,17]}]},{"content":"Gets or sets the instance of any object to pass to the called object.","pos":[71913,71982]},{"pos":[72035,72045],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72047,72052]},{"content":"The value to set; optional.","pos":[72055,72082]},{"pos":[72089,72101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The instance of an object to pass to the called object.","pos":[72103,72158]},{"pos":[72165,72172],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The object will often be a class.","pos":[72174,72207]},{"pos":[72213,72226],"content":"Method record","linkify":"Method record","nodes":[{"content":"Method record","pos":[0,13]}]},{"content":"Gets or sets the record from the table on which the caller object is working.","pos":[72228,72305]},{"pos":[72354,72364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72366,72371]},{"content":"The value to set; optional.","pos":[72374,72401]},{"pos":[72408,72420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The record from the table on which the caller object is working.","pos":[72422,72486]},{"pos":[72493,72500],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used to access the values in the record that the calling object is currently using.","pos":[72502,72600]},{"pos":[72606,72621],"content":"Method refField","linkify":"Method refField","nodes":[{"content":"Method refField","pos":[0,15]}]},{"pos":[72674,72684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72686,72691]},{"pos":[72700,72712],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72718,72747],"content":"Method getRequestContextQuery","linkify":"Method getRequestContextQuery","nodes":[{"content":"Method getRequestContextQuery","pos":[0,29]}]},{"pos":[72795,72807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72813,72839],"content":"Method requestContextQuery","linkify":"Method requestContextQuery","nodes":[{"content":"Method requestContextQuery","pos":[0,26]}]},{"pos":[72893,72903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72905,72910]},{"pos":[72919,72931],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72937,72955],"content":"Method selectField","linkify":"Method selectField","nodes":[{"content":"Method selectField","pos":[0,18]}]},{"pos":[73011,73021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73023,73028]},{"pos":[73037,73049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73055,73070],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Retrieves a string representation of an instance of the xArgs.","pos":[73072,73134]},{"pos":[73168,73180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains a description of the instance of the xArgs class.","pos":[73182,73254]},{"pos":[73260,73288],"content":"Method applyRecordAsDynalink","linkify":"Method applyRecordAsDynalink","nodes":[{"content":"Method applyRecordAsDynalink","pos":[0,28]}]},{"pos":[73364,73374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"applyAsDynalink","pos":[73376,73391]},{"pos":[73400,73412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73418,73440],"content":"Method onCallerChanged","linkify":"Method onCallerChanged","nodes":[{"content":"Method onCallerChanged","pos":[0,22]}]},{"pos":[73496,73506],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73508,73513]},{"pos":[73521,73531],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Constructs an instance of this class, which is used to pass information to high-level classes such as the FormRun or ReportRun class.","pos":[73533,73666]},{"pos":[73735,73745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nameOrCaller","pos":[73747,73759]},{"content":"An object argument; optional.","pos":[73762,73791]},{"content":"This parameter is used to create the instance of the xArgs class and is used when the nameOrCaller parameter is a caller argument.","pos":[73792,73922]},{"content":"object","pos":[73934,73940]},{"content":"An object argument; optional.","pos":[73943,73972]},{"content":"This parameter is used to create the instance of the xArgs class and is used when the nameOrCaller parameter is a caller argument.","pos":[73973,74103]},{"pos":[74110,74117],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To create an xArgs object, either supply a (Caller, Object) pair or a Name argument.","pos":[74119,74203]},{"content":"Both arguments are optional and all values can be set after it is constructed by calling the appropriate methods.","pos":[74204,74317]},{"pos":[74323,74338],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"content":"Removes the current instance of the xArgs class from memory.","pos":[74340,74400]},{"pos":[74434,74450],"content":"Method setupArgs","linkify":"Method setupArgs","nodes":[{"content":"Method setupArgs","pos":[0,16]}]},{"pos":[74567,74577],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parm","pos":[74579,74583]},{"content":"enumType","pos":[74597,74605]},{"content":"enumValue","pos":[74619,74628]},{"content":"menuItemName","pos":[74642,74654]},{"content":"menuItemType","pos":[74668,74680]},{"pos":[74687,74711],"content":"Class xAxaptaUserDetails","linkify":"Class xAxaptaUserDetails","nodes":[{"content":"Class xAxaptaUserDetails","pos":[0,24]}]},{"pos":[74761,74768],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[74774,74782],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[74788,74795],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[74799,74805]},{"content":"Description","pos":[74850,74861]},{"content":"public UserAccountType getAccountType(int index)","pos":[75029,75077]},{"content":"public int getUserCount()","pos":[75144,75169]},{"content":"public str getUserDomain(int index)","pos":[75259,75294]},{"content":"public str getUserLogin(int index)","pos":[75374,75408]},{"content":"public str getUserMail(int index)","pos":[75489,75522]},{"content":"public str getUserName(int index)","pos":[75604,75637]},{"content":"public str getUserSid(int index)","pos":[75719,75751]},{"content":"public boolean isUserEnabled(int index)","pos":[75834,75873]},{"content":"public boolean isUserExternal(int index)","pos":[75949,75989]},{"content":"public void finalize()","pos":[76064,76086]},{"content":"public void new()","pos":[76179,76196]},{"content":"Initializes a new instance of the xAxaptaUserDetails class.","pos":[76230,76289]},{"pos":[76297,76318],"content":"Method getAccountType","linkify":"Method getAccountType","nodes":[{"content":"Method getAccountType","pos":[0,21]}]},{"pos":[76379,76389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[76391,76396]},{"pos":[76405,76417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76423,76442],"content":"Method getUserCount","linkify":"Method getUserCount","nodes":[{"content":"Method getUserCount","pos":[0,19]}]},{"pos":[76480,76492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76498,76518],"content":"Method getUserDomain","linkify":"Method getUserDomain","nodes":[{"content":"Method getUserDomain","pos":[0,20]}]},{"pos":[76566,76576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[76578,76583]},{"pos":[76592,76604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76610,76629],"content":"Method getUserLogin","linkify":"Method getUserLogin","nodes":[{"content":"Method getUserLogin","pos":[0,19]}]},{"pos":[76676,76686],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[76688,76693]},{"pos":[76702,76714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76720,76738],"content":"Method getUserMail","linkify":"Method getUserMail","nodes":[{"content":"Method getUserMail","pos":[0,18]}]},{"pos":[76784,76794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[76796,76801]},{"pos":[76810,76822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76828,76846],"content":"Method getUserName","linkify":"Method getUserName","nodes":[{"content":"Method getUserName","pos":[0,18]}]},{"pos":[76892,76902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[76904,76909]},{"pos":[76918,76930],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76936,76953],"content":"Method getUserSid","linkify":"Method getUserSid","nodes":[{"content":"Method getUserSid","pos":[0,17]}]},{"pos":[76998,77008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[77010,77015]},{"pos":[77024,77036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[77042,77062],"content":"Method isUserEnabled","linkify":"Method isUserEnabled","nodes":[{"content":"Method isUserEnabled","pos":[0,20]}]},{"pos":[77114,77124],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[77126,77131]},{"pos":[77140,77152],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[77158,77179],"content":"Method isUserExternal","linkify":"Method isUserExternal","nodes":[{"content":"Method isUserExternal","pos":[0,21]}]},{"pos":[77232,77242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[77244,77249]},{"pos":[77258,77270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[77276,77291],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[77325,77335],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xAxaptaUserDetails class.","pos":[77337,77396]},{"pos":[77424,77448],"content":"Class xAxaptaUserManager","linkify":"Class xAxaptaUserManager","nodes":[{"content":"Class xAxaptaUserManager","pos":[0,24]}]},{"pos":[77498,77505],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[77511,77519],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[77525,77532],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[77536,77542]},{"content":"Description","pos":[77639,77650]},{"content":"public container enumerateDomains(str server)","pos":[77892,77937]},{"content":"public xAxaptaUserDetails enumerateDomainUsers(str domainName)","pos":[78070,78132]},{"content":"public str generatePassword()","pos":[78248,78277]},{"content":"public xAxaptaUserDetails getDomainUser(str domainName, str userLogin)","pos":[78426,78496]},{"content":"public str getFQDN(str domainName, <ph id=\"ph1\">\\[</ph>boolean throwError<ph id=\"ph2\">\\]</ph>)","pos":[78604,78662],"source":"public str getFQDN(str domainName, \\[boolean throwError\\])"},{"content":"public container getGroupsForUser(str userName)","pos":[78782,78829]},{"content":"public container getRolesForUser(str userName, str company)","pos":[78960,79019]},{"content":"Gets roles for the given user.","pos":[79063,79093]},{"content":"public xAxaptaUserDetails getSIDFromName(str userLogin, str domainName, UserAccountType accountType)","pos":[79138,79238]},{"content":"Gets user details from the given user logon, domain, and account type.","pos":[79241,79311]},{"content":"public str getUserSid(str username, str domain)","pos":[79316,79363]},{"content":"public boolean validateDomain(str domain)","pos":[79494,79535]},{"content":"public boolean validateOrgUnit(str ouName)","pos":[79672,79714]},{"content":"public boolean validatePassword(str username, str domain, str password)","pos":[79850,79921]},{"content":"public boolean validateSecGroup(str secGroup)","pos":[80028,80073]},{"content":"public void new()","pos":[80206,80223]},{"content":"Initializes a new instance of the xAxaptaUserManager class.","pos":[80309,80368]},{"content":"public void updateUserRoleAssignments(UserId userId, container roles, container removeRoles)","pos":[80384,80476]},{"content":"public void finalize()","pos":[80562,80584]},{"pos":[80743,80766],"content":"Method enumerateDomains","linkify":"Method enumerateDomains","nodes":[{"content":"Method enumerateDomains","pos":[0,23]}]},{"pos":[80824,80834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"server","pos":[80836,80842]},{"pos":[80851,80863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80869,80896],"content":"Method enumerateDomainUsers","linkify":"Method enumerateDomainUsers","nodes":[{"content":"Method enumerateDomainUsers","pos":[0,27]}]},{"pos":[80971,80981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"domainName","pos":[80983,80993]},{"pos":[81002,81014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81020,81043],"content":"Method generatePassword","linkify":"Method generatePassword","nodes":[{"content":"Method generatePassword","pos":[0,23]}]},{"pos":[81085,81097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81103,81123],"content":"Method getDomainUser","linkify":"Method getDomainUser","nodes":[{"content":"Method getDomainUser","pos":[0,20]}]},{"pos":[81206,81216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"domainName","pos":[81218,81228]},{"content":"userLogin","pos":[81242,81251]},{"pos":[81260,81272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81278,81292],"content":"Method getFQDN","linkify":"Method getFQDN","nodes":[{"content":"Method getFQDN","pos":[0,14]}]},{"pos":[81361,81371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"domainName","pos":[81373,81383]},{"content":"throwError","pos":[81397,81407]},{"pos":[81416,81428],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81434,81457],"content":"Method getGroupsForUser","linkify":"Method getGroupsForUser","nodes":[{"content":"Method getGroupsForUser","pos":[0,23]}]},{"pos":[81517,81527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userName","pos":[81529,81537]},{"pos":[81546,81558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81564,81586],"content":"Method getRolesForUser","linkify":"Method getRolesForUser","nodes":[{"content":"Method getRolesForUser","pos":[0,22]}]},{"content":"Gets roles for the given user.","pos":[81588,81618]},{"pos":[81690,81700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userName","pos":[81702,81710]},{"content":"company","pos":[81724,81731]},{"pos":[81740,81752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that holds roles for the given user.","pos":[81754,81802]},{"pos":[81808,81829],"content":"Method getSIDFromName","linkify":"Method getSIDFromName","nodes":[{"content":"Method getSIDFromName","pos":[0,21]}]},{"content":"Gets user details from the given user logon, domain, and account type.","pos":[81831,81901]},{"pos":[82014,82024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userLogin","pos":[82026,82035]},{"content":"domainName","pos":[82049,82059]},{"content":"accountType","pos":[82073,82084]},{"pos":[82093,82105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A xAxaptaUserDetails class instance that contains user details.","pos":[82107,82170]},{"pos":[82176,82193],"content":"Method getUserSid","linkify":"Method getUserSid","nodes":[{"content":"Method getUserSid","pos":[0,17]}]},{"pos":[82253,82263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"username","pos":[82265,82273]},{"content":"domain","pos":[82287,82293]},{"pos":[82302,82314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82320,82341],"content":"Method validateDomain","linkify":"Method validateDomain","nodes":[{"content":"Method validateDomain","pos":[0,21]}]},{"pos":[82395,82405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"domain","pos":[82407,82413]},{"pos":[82422,82434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82440,82462],"content":"Method validateOrgUnit","linkify":"Method validateOrgUnit","nodes":[{"content":"Method validateOrgUnit","pos":[0,22]}]},{"pos":[82517,82527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ouName","pos":[82529,82535]},{"pos":[82544,82556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82562,82585],"content":"Method validatePassword","linkify":"Method validatePassword","nodes":[{"content":"Method validatePassword","pos":[0,23]}]},{"pos":[82669,82679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"username","pos":[82681,82689]},{"content":"domain","pos":[82703,82709]},{"content":"password","pos":[82723,82731]},{"pos":[82740,82752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82758,82781],"content":"Method validateSecGroup","linkify":"Method validateSecGroup","nodes":[{"content":"Method validateSecGroup","pos":[0,23]}]},{"pos":[82839,82849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"secGroup","pos":[82851,82859]},{"pos":[82868,82880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82886,82896],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xAxaptaUserManager class.","pos":[82898,82957]},{"pos":[82986,83018],"content":"Method updateUserRoleAssignments","linkify":"Method updateUserRoleAssignments","nodes":[{"content":"Method updateUserRoleAssignments","pos":[0,32]}]},{"pos":[83123,83133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userId","pos":[83135,83141]},{"content":"roles","pos":[83155,83160]},{"content":"removeRoles","pos":[83174,83185]},{"pos":[83193,83208],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[83241,83255],"content":"Class xBrowser","linkify":"Class xBrowser","nodes":[{"content":"Class xBrowser","pos":[0,14]}]},{"pos":[83295,83302],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[83308,83316],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[83322,83329],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[83333,83339]},{"content":"Description","pos":[83428,83439]},{"content":"public void navigate(str downloadUrl, <ph id=\"ph1\">\\[</ph>boolean openInNewTab<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean showExitWarning<ph id=\"ph4\">\\]</ph>)","pos":[83555,83647],"source":"public void navigate(str downloadUrl, \\[boolean openInNewTab\\], \\[boolean showExitWarning\\])"},{"content":"public void new()","pos":[83666,83683]},{"pos":[83780,83795],"content":"Method navigate","linkify":"Method navigate","nodes":[{"content":"Method navigate","pos":[0,15]}]},{"pos":[83896,83906],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"downloadUrl","pos":[83908,83919]},{"content":"openInNewTab","pos":[83933,83945]},{"content":"showExitWarning","pos":[83959,83974]},{"pos":[83982,83992],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[84020,84039],"content":"Class xClassFactory","linkify":"Class xClassFactory","nodes":[{"content":"Class xClassFactory","pos":[0,19]}]},{"pos":[84084,84091],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[84097,84105],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[84111,84118],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[84122,84128]},{"content":"Description","pos":[84273,84284]},{"content":"public xFormRun createAutoReportForm(xArgs args)","pos":[84542,84590]},{"content":"public xFormRun createLabelForm(xArgs args)","pos":[84752,84795]},{"content":"public xFormRun createRecInfoForm(xArgs args)","pos":[84962,85007]},{"content":"public ReportViewer createReportViewer(PrintJobHeader jobsCursor, PrintJobPages pagesCursor, <ph id=\"ph1\">\\[</ph>ReportRun reportRun<ph id=\"ph2\">\\]</ph>)","pos":[85172,85289],"source":"public ReportViewer createReportViewer(PrintJobHeader jobsCursor, PrintJobPages pagesCursor, \\[ReportRun reportRun\\])"},{"content":"public xFormRun createSetupForm(xArgs args)","pos":[85382,85425]},{"content":"public ReportOutputUser createViewer(PrintJobHeader jobsCursor, PrintJobPages pagesCursor, ReportOutputUserType viewerType, <ph id=\"ph1\">\\[</ph>ReportRun reportRun<ph id=\"ph2\">\\]</ph>)","pos":[85592,85740],"source":"public ReportOutputUser createViewer(PrintJobHeader jobsCursor, PrintJobPages pagesCursor, ReportOutputUserType viewerType, \\[ReportRun reportRun\\])"},{"content":"public Object createWebPageEditor()","pos":[85802,85837]},{"content":"public xFormRun formRunClass(xArgs args)","pos":[86012,86052]},{"content":"public container lastValueGet(SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, <ph id=\"ph1\">\\[</ph>str design<ph id=\"ph2\">\\]</ph>)","pos":[86222,86356],"source":"public container lastValueGet(SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, \\[str design\\])"},{"content":"public QueryRun queryRunClass(xArgs args)","pos":[86432,86473]},{"content":"public ReportRun reportRunClass(xArgs args)","pos":[86642,86685]},{"content":"public Object startAOTWizard(TreeNode parent)","pos":[86852,86897]},{"content":"public void projectDeleted(str projectName)","pos":[87062,87105]},{"content":"public void lastValueDelete(SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, <ph id=\"ph1\">\\[</ph>str design<ph id=\"ph2\">\\]</ph>)","pos":[87272,87404],"source":"public void lastValueDelete(SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, \\[str design\\])"},{"content":"public void lastValuePut(container value, SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, <ph id=\"ph1\">\\[</ph>str design<ph id=\"ph2\">\\]</ph>)","pos":[87482,87628],"source":"public void lastValuePut(container value, SelectableDataArea company, UserId user, UtilElementType utilType, UtilElementName name, \\[str design\\])"},{"content":"public void drillDown(OutputField outputField, MenuItemType menuItemType, str menuItemName)","pos":[87692,87783]},{"content":"public void new()","pos":[87902,87919]},{"content":"Initializes a new instance of the xClassFactory class.","pos":[88053,88107]},{"pos":[88115,88142],"content":"Method createAutoReportForm","linkify":"Method createAutoReportForm","nodes":[{"content":"Method createAutoReportForm","pos":[0,27]}]},{"pos":[88203,88213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[88215,88219]},{"pos":[88228,88240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88246,88268],"content":"Method createLabelForm","linkify":"Method createLabelForm","nodes":[{"content":"Method createLabelForm","pos":[0,22]}]},{"pos":[88324,88334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[88336,88340]},{"pos":[88349,88361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88367,88391],"content":"Method createRecInfoForm","linkify":"Method createRecInfoForm","nodes":[{"content":"Method createRecInfoForm","pos":[0,24]}]},{"pos":[88449,88459],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[88461,88465]},{"pos":[88474,88486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88492,88517],"content":"Method createReportViewer","linkify":"Method createReportViewer","nodes":[{"content":"Method createReportViewer","pos":[0,25]}]},{"pos":[88645,88655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"jobsCursor","pos":[88657,88667]},{"content":"pagesCursor","pos":[88681,88692]},{"content":"reportRun","pos":[88706,88715]},{"pos":[88724,88736],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88742,88764],"content":"Method createSetupForm","linkify":"Method createSetupForm","nodes":[{"content":"Method createSetupForm","pos":[0,22]}]},{"pos":[88820,88830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[88832,88836]},{"pos":[88845,88857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88863,88882],"content":"Method createViewer","linkify":"Method createViewer","nodes":[{"content":"Method createViewer","pos":[0,19]}]},{"pos":[89041,89051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"jobsCursor","pos":[89053,89063]},{"content":"pagesCursor","pos":[89077,89088]},{"content":"viewerType","pos":[89102,89112]},{"content":"reportRun","pos":[89126,89135]},{"pos":[89144,89156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89162,89188],"content":"Method createWebPageEditor","linkify":"Method createWebPageEditor","nodes":[{"content":"Method createWebPageEditor","pos":[0,26]}]},{"pos":[89236,89248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89254,89273],"content":"Method formRunClass","linkify":"Method formRunClass","nodes":[{"content":"Method formRunClass","pos":[0,19]}]},{"pos":[89326,89336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[89338,89342]},{"pos":[89351,89363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89369,89388],"content":"Method lastValueGet","linkify":"Method lastValueGet","nodes":[{"content":"Method lastValueGet","pos":[0,19]}]},{"pos":[89533,89543],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"company","pos":[89545,89552]},{"content":"user","pos":[89566,89570]},{"content":"utilType","pos":[89584,89592]},{"content":"name","pos":[89606,89610]},{"content":"design","pos":[89624,89630]},{"pos":[89639,89651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89657,89677],"content":"Method queryRunClass","linkify":"Method queryRunClass","nodes":[{"content":"Method queryRunClass","pos":[0,20]}]},{"pos":[89731,89741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[89743,89747]},{"pos":[89756,89768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89774,89795],"content":"Method reportRunClass","linkify":"Method reportRunClass","nodes":[{"content":"Method reportRunClass","pos":[0,21]}]},{"pos":[89851,89861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[89863,89867]},{"pos":[89876,89888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89894,89915],"content":"Method startAOTWizard","linkify":"Method startAOTWizard","nodes":[{"content":"Method startAOTWizard","pos":[0,21]}]},{"pos":[89973,89983],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parent","pos":[89985,89991]},{"pos":[90000,90012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90018,90039],"content":"Method projectDeleted","linkify":"Method projectDeleted","nodes":[{"content":"Method projectDeleted","pos":[0,21]}]},{"pos":[90095,90105],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"projectName","pos":[90107,90118]},{"pos":[90126,90148],"content":"Method lastValueDelete","linkify":"Method lastValueDelete","nodes":[{"content":"Method lastValueDelete","pos":[0,22]}]},{"pos":[90291,90301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"company","pos":[90303,90310]},{"content":"user","pos":[90324,90328]},{"content":"utilType","pos":[90342,90350]},{"content":"name","pos":[90364,90368]},{"content":"design","pos":[90382,90388]},{"pos":[90396,90415],"content":"Method lastValuePut","linkify":"Method lastValuePut","nodes":[{"content":"Method lastValuePut","pos":[0,19]}]},{"pos":[90572,90582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90584,90589]},{"content":"company","pos":[90603,90610]},{"content":"user","pos":[90624,90628]},{"content":"utilType","pos":[90642,90650]},{"content":"name","pos":[90664,90668]},{"content":"design","pos":[90682,90688]},{"pos":[90696,90712],"content":"Method drillDown","linkify":"Method drillDown","nodes":[{"content":"Method drillDown","pos":[0,16]}]},{"pos":[90816,90826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"outputField","pos":[90828,90839]},{"content":"menuItemType","pos":[90853,90865]},{"content":"menuItemName","pos":[90879,90891]},{"pos":[90899,90909],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xClassFactory class.","pos":[90911,90965]},{"pos":[90993,91010],"content":"Class xClassTrace","linkify":"Class xClassTrace","nodes":[{"content":"Class xClassTrace","pos":[0,17]}]},{"pos":[91053,91060],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[91066,91074],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[91080,91087],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[91091,91097]},{"content":"Description","pos":[91272,91283]},{"content":"::public static boolean isTracingEnabled(<ph id=\"ph1\">\\[</ph>Int64 keyword<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int level<ph id=\"ph4\">\\]</ph>)","pos":[91567,91641],"source":"::public static boolean isTracingEnabled(\\[Int64 keyword\\], \\[int level\\])"},{"content":"::public static boolean isTracingStarted()","pos":[91805,91847]},{"content":"::public static str kernelCustomerId()","pos":[92043,92081]},{"content":"::public static Guid kernelRequestId()","pos":[92281,92319]},{"content":"::public static str kernelSessionId()","pos":[92519,92556]},{"content":"::public static str kernelUserId()","pos":[92757,92791]},{"content":"::public static int start(str logFileName, <ph id=\"ph1\">\\[</ph>int logBufferSize<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int minBuffers<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int maxBuffers<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>Int64 keywords<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>int maxFileSize<ph id=\"ph10\">\\]</ph>, <ph id=\"ph11\">\\[</ph>boolean useCircularLogging<ph id=\"ph12\">\\]</ph>)","pos":[92995,93173],"source":"::public static int start(str logFileName, \\[int logBufferSize\\], \\[int minBuffers\\], \\[int maxBuffers\\], \\[Int64 keywords\\], \\[int maxFileSize\\], \\[boolean useCircularLogging\\])"},{"content":"::public static int stop()","pos":[93233,93259]},{"content":"::public static void logMessage(str message)","pos":[93471,93515]},{"content":"public void endMarker(str transactionName)","pos":[93709,93751]},{"content":"public void beginMarker(str transactionName)","pos":[93947,93991]},{"content":"::public static void logComponentMessage(str component, str message)","pos":[94185,94253]},{"content":"public void finalize()","pos":[94423,94445]},{"content":"public void new()","pos":[94661,94678]},{"content":"Initializes a new instance of the xClassTrace class.","pos":[94842,94894]},{"pos":[94902,94925],"content":"Method isTracingEnabled","linkify":"Method isTracingEnabled","nodes":[{"content":"Method isTracingEnabled","pos":[0,23]}]},{"pos":[95006,95016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"keyword","pos":[95018,95025]},{"content":"level","pos":[95039,95044]},{"pos":[95053,95065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95071,95094],"content":"Method isTracingStarted","linkify":"Method isTracingStarted","nodes":[{"content":"Method isTracingStarted","pos":[0,23]}]},{"pos":[95147,95159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95165,95188],"content":"Method kernelCustomerId","linkify":"Method kernelCustomerId","nodes":[{"content":"Method kernelCustomerId","pos":[0,23]}]},{"pos":[95237,95249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95255,95277],"content":"Method kernelRequestId","linkify":"Method kernelRequestId","nodes":[{"content":"Method kernelRequestId","pos":[0,22]}]},{"pos":[95326,95338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95344,95366],"content":"Method kernelSessionId","linkify":"Method kernelSessionId","nodes":[{"content":"Method kernelSessionId","pos":[0,22]}]},{"pos":[95414,95426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95432,95451],"content":"Method kernelUserId","linkify":"Method kernelUserId","nodes":[{"content":"Method kernelUserId","pos":[0,19]}]},{"pos":[95496,95508],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95514,95526],"content":"Method start","linkify":"Method start","nodes":[{"content":"Method start","pos":[0,12]}]},{"pos":[95703,95713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"logFileName","pos":[95715,95726]},{"content":"logBufferSize","pos":[95740,95753]},{"content":"minBuffers","pos":[95767,95777]},{"content":"maxBuffers","pos":[95791,95801]},{"content":"keywords","pos":[95815,95823]},{"content":"maxFileSize","pos":[95837,95848]},{"content":"useCircularLogging","pos":[95862,95880]},{"pos":[95889,95901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95907,95918],"content":"Method stop","linkify":"Method stop","nodes":[{"content":"Method stop","pos":[0,11]}]},{"pos":[95955,95967],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95973,95990],"content":"Method logMessage","linkify":"Method logMessage","nodes":[{"content":"Method logMessage","pos":[0,17]}]},{"pos":[96045,96055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"message","pos":[96057,96064]},{"pos":[96072,96088],"content":"Method endMarker","linkify":"Method endMarker","nodes":[{"content":"Method endMarker","pos":[0,16]}]},{"pos":[96143,96153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"transactionName","pos":[96155,96170]},{"pos":[96178,96196],"content":"Method beginMarker","linkify":"Method beginMarker","nodes":[{"content":"Method beginMarker","pos":[0,18]}]},{"pos":[96253,96263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"transactionName","pos":[96265,96280]},{"pos":[96288,96314],"content":"Method logComponentMessage","linkify":"Method logComponentMessage","nodes":[{"content":"Method logComponentMessage","pos":[0,26]}]},{"pos":[96393,96403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"component","pos":[96405,96414]},{"content":"message","pos":[96428,96435]},{"pos":[96443,96458],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[96492,96502],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xClassTrace class.","pos":[96504,96556]},{"pos":[96584,96598],"content":"Class xCompany","linkify":"Class xCompany","nodes":[{"content":"Class xCompany","pos":[0,14]}]},{"pos":[96638,96645],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[96651,96659],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[96665,96672],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[96676,96682]},{"content":"Description","pos":[96762,96773]},{"content":"public DataAreaId dataArea(TableId tableId)","pos":[96958,97001]},{"content":"public SelectableDataArea ext()","pos":[97099,97130]},{"content":"public boolean log(DatabaseLogType typeOfLog, TableId tableId, <ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>)","pos":[97240,97323],"source":"public boolean log(DatabaseLogType typeOfLog, TableId tableId, \\[FieldId fieldId\\])"},{"content":"public boolean logAlways(DatabaseLogType typeOfLog, <ph id=\"ph1\">\\[</ph>boolean log<ph id=\"ph2\">\\]</ph>)","pos":[97381,97449],"source":"public boolean logAlways(DatabaseLogType typeOfLog, \\[boolean log\\])"},{"content":"Enables or disables logging for non-system tables.","pos":[97467,97517]},{"content":"public boolean reindex(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[97522,97565],"source":"public boolean reindex(\\[TableId tableId\\])"},{"content":"public void reloadLog()","pos":[97663,97686]},{"content":"public void new(SelectableDataArea company)","pos":[97804,97847]},{"content":"Initializes a new instance of the Object class.","pos":[97890,97937]},{"content":"public void check()","pos":[97945,97964]},{"content":"public void reloadRights()","pos":[98086,98112]},{"content":"public void flushCache(TableId tableId)","pos":[98227,98266]},{"content":"public void reloadTableCollections()","pos":[98368,98404]},{"pos":[98512,98527],"content":"Method dataArea","linkify":"Method dataArea","nodes":[{"content":"Method dataArea","pos":[0,15]}]},{"pos":[98583,98593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[98595,98602]},{"pos":[98611,98623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[98629,98639],"content":"Method ext","linkify":"Method ext","nodes":[{"content":"Method ext","pos":[0,10]}]},{"pos":[98683,98695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[98701,98711],"content":"Method log","linkify":"Method log","nodes":[{"content":"Method log","pos":[0,10]}]},{"pos":[98805,98815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"typeOfLog","pos":[98817,98826]},{"content":"tableId","pos":[98840,98847]},{"content":"fieldId","pos":[98861,98868]},{"pos":[98877,98889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[98895,98911],"content":"Method logAlways","linkify":"Method logAlways","nodes":[{"content":"Method logAlways","pos":[0,16]}]},{"content":"Enables or disables logging for non-system tables.","pos":[98913,98963]},{"pos":[99042,99052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"typeOfLog","pos":[99054,99063]},{"content":"log","pos":[99077,99080]},{"pos":[99089,99101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status of the database logging for the indicated operation before the call.","pos":[99103,99182]},{"pos":[99189,99196],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Without the optional typeOfLog parameter, this method will report the status of the database logging for the indicated operation.","pos":[99198,99327]},{"content":"Note that if the optional parameter is provided, the method is guarded by CAS and the calling code must assert SysDatabaselogPermission.","pos":[99328,99464]},{"pos":[99470,99484],"content":"Method reindex","linkify":"Method reindex","nodes":[{"content":"Method reindex","pos":[0,14]}]},{"pos":[99538,99548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[99550,99557]},{"pos":[99566,99578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[99584,99600],"content":"Method reloadLog","linkify":"Method reloadLog","nodes":[{"content":"Method reloadLog","pos":[0,16]}]},{"pos":[99635,99645],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[99647,99694]},{"pos":[99750,99760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"company","pos":[99762,99769]},{"pos":[99777,99789],"content":"Method check","linkify":"Method check","nodes":[{"content":"Method check","pos":[0,12]}]},{"pos":[99820,99839],"content":"Method reloadRights","linkify":"Method reloadRights","nodes":[{"content":"Method reloadRights","pos":[0,19]}]},{"pos":[99877,99894],"content":"Method flushCache","linkify":"Method flushCache","nodes":[{"content":"Method flushCache","pos":[0,17]}]},{"pos":[99946,99956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[99958,99965]},{"pos":[99973,100002],"content":"Method reloadTableCollections","linkify":"Method reloadTableCollections","nodes":[{"content":"Method reloadTableCollections","pos":[0,29]}]},{"pos":[100049,100070],"content":"Class xCompilerOutput","linkify":"Class xCompilerOutput","nodes":[{"content":"Class xCompilerOutput","pos":[0,21]}]},{"pos":[100117,100124],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[100130,100138],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[100144,100151],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[100155,100161]},{"content":"Description","pos":[100284,100295]},{"content":"public str getErrorMessage(int errorCode, int severity, str errorString)","pos":[100535,100607]},{"content":"public container getSquiggleInfo(str treeNodePath)","pos":[100725,100775]},{"content":"public void compilerStatus(UtilElementType utilElementType, str utilElementName)","pos":[100915,100995]},{"content":"public void setActiveTab(int tab)","pos":[101105,101138]},{"content":"public void startCompilationObject(str path)","pos":[101295,101339]},{"content":"public void endCompilation()","pos":[101485,101513]},{"content":"public void startExport()","pos":[101675,101700]},{"content":"public void startCompilation(int flag, str path, int activeWindowHandle)","pos":[101865,101937]},{"content":"public void importOutput(str buffer)","pos":[102055,102091]},{"content":"public void endExport()","pos":[102245,102268]},{"content":"public void endCompilationObject(str path)","pos":[102435,102477]},{"content":"public void startImport()","pos":[102625,102650]},{"content":"public void new()","pos":[102815,102832]},{"content":"Initializes a new instance of the xCompilerOutput class.","pos":[102944,103000]},{"content":"public void compilerOutputMessage(str path, int errorCode, int line, int col, int severity, str errorString, str propertyName)","pos":[103005,103131]},{"content":"public void exportOutput(str buffer)","pos":[103195,103231]},{"content":"public void endCILGenerationOutput()","pos":[103385,103421]},{"content":"public void cilGenerationOutput(str msg, str path, int severity, int line, int col)","pos":[103575,103658]},{"content":"public void endImport()","pos":[103765,103788]},{"content":"public void nextError()","pos":[103955,103978]},{"content":"public void startCILGenerationOutput()","pos":[104145,104183]},{"pos":[104338,104360],"content":"Method getErrorMessage","linkify":"Method getErrorMessage","nodes":[{"content":"Method getErrorMessage","pos":[0,22]}]},{"pos":[104445,104455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"errorCode","pos":[104457,104466]},{"content":"severity","pos":[104480,104488]},{"content":"errorString","pos":[104502,104513]},{"pos":[104522,104534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104540,104562],"content":"Method getSquiggleInfo","linkify":"Method getSquiggleInfo","nodes":[{"content":"Method getSquiggleInfo","pos":[0,22]}]},{"pos":[104625,104635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"treeNodePath","pos":[104637,104649]},{"pos":[104658,104670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104676,104697],"content":"Method compilerStatus","linkify":"Method compilerStatus","nodes":[{"content":"Method compilerStatus","pos":[0,21]}]},{"pos":[104790,104800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"utilElementType","pos":[104802,104817]},{"content":"utilElementName","pos":[104831,104846]},{"pos":[104854,104873],"content":"Method setActiveTab","linkify":"Method setActiveTab","nodes":[{"content":"Method setActiveTab","pos":[0,19]}]},{"pos":[104919,104929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tab","pos":[104931,104934]},{"pos":[104942,104971],"content":"Method startCompilationObject","linkify":"Method startCompilationObject","nodes":[{"content":"Method startCompilationObject","pos":[0,29]}]},{"pos":[105028,105038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[105040,105044]},{"pos":[105052,105073],"content":"Method endCompilation","linkify":"Method endCompilation","nodes":[{"content":"Method endCompilation","pos":[0,21]}]},{"pos":[105113,105131],"content":"Method startExport","linkify":"Method startExport","nodes":[{"content":"Method startExport","pos":[0,18]}]},{"pos":[105168,105191],"content":"Method startCompilation","linkify":"Method startCompilation","nodes":[{"content":"Method startCompilation","pos":[0,23]}]},{"pos":[105276,105286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flag","pos":[105288,105292]},{"content":"path","pos":[105306,105310]},{"content":"activeWindowHandle","pos":[105324,105342]},{"pos":[105350,105369],"content":"Method importOutput","linkify":"Method importOutput","nodes":[{"content":"Method importOutput","pos":[0,19]}]},{"pos":[105418,105428],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"buffer","pos":[105430,105436]},{"pos":[105444,105460],"content":"Method endExport","linkify":"Method endExport","nodes":[{"content":"Method endExport","pos":[0,16]}]},{"pos":[105495,105522],"content":"Method endCompilationObject","linkify":"Method endCompilationObject","nodes":[{"content":"Method endCompilationObject","pos":[0,27]}]},{"pos":[105577,105587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[105589,105593]},{"pos":[105601,105619],"content":"Method startImport","linkify":"Method startImport","nodes":[{"content":"Method startImport","pos":[0,18]}]},{"pos":[105656,105666],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xCompilerOutput class.","pos":[105668,105724]},{"pos":[105753,105781],"content":"Method compilerOutputMessage","linkify":"Method compilerOutputMessage","nodes":[{"content":"Method compilerOutputMessage","pos":[0,28]}]},{"pos":[105920,105930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[105932,105936]},{"content":"errorCode","pos":[105950,105959]},{"content":"line","pos":[105973,105977]},{"content":"col","pos":[105991,105994]},{"content":"severity","pos":[106008,106016]},{"content":"errorString","pos":[106030,106041]},{"content":"propertyName","pos":[106055,106067]},{"pos":[106075,106094],"content":"Method exportOutput","linkify":"Method exportOutput","nodes":[{"content":"Method exportOutput","pos":[0,19]}]},{"pos":[106143,106153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"buffer","pos":[106155,106161]},{"pos":[106169,106198],"content":"Method endCILGenerationOutput","linkify":"Method endCILGenerationOutput","nodes":[{"content":"Method endCILGenerationOutput","pos":[0,29]}]},{"pos":[106246,106272],"content":"Method cilGenerationOutput","linkify":"Method cilGenerationOutput","nodes":[{"content":"Method cilGenerationOutput","pos":[0,26]}]},{"pos":[106368,106378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"msg","pos":[106380,106383]},{"content":"path","pos":[106397,106401]},{"content":"severity","pos":[106415,106423]},{"content":"line","pos":[106437,106441]},{"content":"col","pos":[106455,106458]},{"pos":[106466,106482],"content":"Method endImport","linkify":"Method endImport","nodes":[{"content":"Method endImport","pos":[0,16]}]},{"pos":[106517,106533],"content":"Method nextError","linkify":"Method nextError","nodes":[{"content":"Method nextError","pos":[0,16]}]},{"pos":[106568,106599],"content":"Method startCILGenerationOutput","linkify":"Method startCILGenerationOutput","nodes":[{"content":"Method startCILGenerationOutput","pos":[0,31]}]},{"pos":[106648,106665],"content":"Class XDSServices","linkify":"Class XDSServices","nodes":[{"content":"Class XDSServices","pos":[0,17]}]},{"content":"The XDSServices class provides APIs to manage the extensible data security (XDS) behavior.","pos":[106704,106794]},{"pos":[106800,106807],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[106813,106821],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[106827,106834],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[106838,106844]},{"content":"Description","pos":[106911,106922]},{"content":"public int flushXDSMyConstructs(int reserved, str tablename)","pos":[107252,107312]},{"content":"Flushes the MyConstruct table that is used with XDS.","pos":[107325,107377]},{"content":"public str getQuerySQL(str queryname)","pos":[107459,107496]},{"content":"public str getTableSQL(str tablename, <ph id=\"ph1\">\\[</ph>str policyname<ph id=\"ph2\">\\]</ph>)","pos":[107666,107723],"source":"public str getTableSQL(str tablename, \\[str policyname\\])"},{"content":"public str getXDSBinding(str name)","pos":[107873,107907]},{"content":"public str getXDSContext(int reserved)","pos":[108080,108118]},{"content":"public int getXDSToFlushPerServiceSession(int reserved)","pos":[108287,108342]},{"content":"Checks whether the MyConstruct tables will be flushed when the service session is returned to the pool.","pos":[108360,108463]},{"content":"public void finalize()","pos":[108494,108516]},{"content":"public void new()","pos":[108701,108718]},{"content":"Initializes a new instance of the XDSServices class.","pos":[108774,108826]},{"content":"public void setXDSContext(int reserved, str contextstring)","pos":[108908,108966]},{"content":"public void setXDSBinding(str name, str value)","pos":[109115,109161]},{"content":"public void setXDSState(int finalState)","pos":[109322,109361]},{"content":"public void setXDSToFlushPerServiceSession(int reserved, int newstate)","pos":[109529,109599]},{"content":"Sets the setting that determines whether the MyConstruct tables will be flushed when the service session is returned to the pool.","pos":[109602,109731]},{"content":"public void setXDSTrace(int flag, str value)","pos":[109736,109780]},{"pos":[109946,109973],"content":"Method flushXDSMyConstructs","linkify":"Method flushXDSMyConstructs","nodes":[{"content":"Method flushXDSMyConstructs","pos":[0,27]}]},{"content":"Flushes the MyConstruct table that is used with XDS.","pos":[109975,110027]},{"pos":[110100,110110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"reserved","pos":[110112,110120]},{"content":"The name of the MyConstruct table to flush.","pos":[110123,110166]},{"content":"It no value is passed in, or if an empty string is passed in, all MyConstruct tables are flushed.","pos":[110167,110264]},{"content":"tablename","pos":[110276,110285]},{"content":"The name of the MyConstruct table to flush.","pos":[110288,110331]},{"content":"It no value is passed in, or if an empty string is passed in, all MyConstruct tables are flushed.","pos":[110332,110429]},{"pos":[110436,110448],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[110454,110472],"content":"Method getQuerySQL","linkify":"Method getQuerySQL","nodes":[{"content":"Method getQuerySQL","pos":[0,18]}]},{"pos":[110522,110532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"queryname","pos":[110534,110543]},{"pos":[110552,110564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[110570,110588],"content":"Method getTableSQL","linkify":"Method getTableSQL","nodes":[{"content":"Method getTableSQL","pos":[0,18]}]},{"pos":[110656,110666],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tablename","pos":[110668,110677]},{"content":"policyname","pos":[110691,110701]},{"pos":[110710,110722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[110728,110748],"content":"Method getXDSBinding","linkify":"Method getXDSBinding","nodes":[{"content":"Method getXDSBinding","pos":[0,20]}]},{"pos":[110795,110805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[110807,110811]},{"pos":[110820,110832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[110838,110858],"content":"Method getXDSContext","linkify":"Method getXDSContext","nodes":[{"content":"Method getXDSContext","pos":[0,20]}]},{"pos":[110909,110919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"reserved","pos":[110921,110929]},{"pos":[110938,110950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[110956,110993],"content":"Method getXDSToFlushPerServiceSession","linkify":"Method getXDSToFlushPerServiceSession","nodes":[{"content":"Method getXDSToFlushPerServiceSession","pos":[0,37]}]},{"content":"Checks whether the MyConstruct tables will be flushed when the service session is returned to the pool.","pos":[110995,111098]},{"pos":[111166,111176],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"reserved","pos":[111178,111186]},{"content":"A reserved flag; not currently used.","pos":[111189,111225]},{"pos":[111232,111244],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the MyConstruct tables will be flushed when the service session is returned to the pool; otherwise, 0.","pos":[111246,111353]},{"pos":[111359,111374],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[111408,111418],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the XDSServices class.","pos":[111420,111472]},{"pos":[111501,111521],"content":"Method setXDSContext","linkify":"Method setXDSContext","nodes":[{"content":"Method setXDSContext","pos":[0,20]}]},{"pos":[111592,111602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"reserved","pos":[111604,111612]},{"content":"contextstring","pos":[111626,111639]},{"pos":[111647,111667],"content":"Method setXDSBinding","linkify":"Method setXDSBinding","nodes":[{"content":"Method setXDSBinding","pos":[0,20]}]},{"pos":[111726,111736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[111738,111742]},{"content":"value","pos":[111756,111761]},{"pos":[111769,111787],"content":"Method setXDSState","linkify":"Method setXDSState","nodes":[{"content":"Method setXDSState","pos":[0,18]}]},{"pos":[111839,111849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"finalState","pos":[111851,111861]},{"pos":[111869,111906],"content":"Method setXDSToFlushPerServiceSession","linkify":"Method setXDSToFlushPerServiceSession","nodes":[{"content":"Method setXDSToFlushPerServiceSession","pos":[0,37]}]},{"content":"Sets the setting that determines whether the MyConstruct tables will be flushed when the service session is returned to the pool.","pos":[111908,112037]},{"pos":[112120,112130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"reserved","pos":[112132,112140]},{"content":"A value that indicates whether to flush the MyConstruct tables when the service session is returned to the pool.","pos":[112143,112255]},{"content":"Pass 1 to flush the tables and 0 not to flush them.","pos":[112256,112307]},{"content":"newstate","pos":[112319,112327]},{"content":"A value that indicates whether to flush the MyConstruct tables when the service session is returned to the pool.","pos":[112330,112442]},{"content":"Pass 1 to flush the tables and 0 not to flush them.","pos":[112443,112494]},{"pos":[112500,112518],"content":"Method setXDSTrace","linkify":"Method setXDSTrace","nodes":[{"content":"Method setXDSTrace","pos":[0,18]}]},{"pos":[112575,112585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flag","pos":[112587,112591]},{"content":"value","pos":[112605,112610]},{"pos":[112617,112637],"content":"Class xDynamicVarSet","linkify":"Class xDynamicVarSet","nodes":[{"content":"Class xDynamicVarSet","pos":[0,20]}]},{"pos":[112683,112690],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[112696,112704],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[112710,112717],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[112721,112727]},{"content":"Description","pos":[112741,112752]},{"content":"public void new()","pos":[112793,112810]},{"pos":[112832,112842],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[112870,112900],"content":"Class xExportToExcelController","linkify":"Class xExportToExcelController","nodes":[{"content":"Class xExportToExcelController","pos":[0,30]}]},{"pos":[112956,112963],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[112969,112977],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[112983,112990],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[112994,113000]},{"content":"Description","pos":[113127,113138]},{"content":"public boolean export()","pos":[113292,113315]},{"content":"public boolean exportGrid(FormGridControl gridControl, boolean onlyMarkedRows)","pos":[113441,113519]},{"content":"public boolean performStaticExport(xFormRun formRun, FormGridControl gridControl, System.IO.Stream stream, boolean onlyMarkedRows)","pos":[113590,113720]},{"content":"public void new()","pos":[113739,113756]},{"pos":[113891,113904],"content":"Method export","linkify":"Method export","nodes":[{"content":"Method export","pos":[0,13]}]},{"pos":[113940,113952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[113958,113975],"content":"Method exportGrid","linkify":"Method exportGrid","nodes":[{"content":"Method exportGrid","pos":[0,17]}]},{"pos":[114066,114076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"gridControl","pos":[114078,114089]},{"content":"onlyMarkedRows","pos":[114103,114117]},{"pos":[114126,114138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[114144,114170],"content":"Method performStaticExport","linkify":"Method performStaticExport","nodes":[{"content":"Method performStaticExport","pos":[0,26]}]},{"pos":[114313,114323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formRun","pos":[114325,114332]},{"content":"gridControl","pos":[114346,114357]},{"content":"stream","pos":[114371,114377]},{"content":"onlyMarkedRows","pos":[114391,114405]},{"pos":[114414,114426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[114432,114442],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[114470,114484],"content":"Class xFormRun","linkify":"Class xFormRun","nodes":[{"content":"Class xFormRun","pos":[0,14]}]},{"pos":[114527,114534],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[114540,114548],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[114554,114561],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[114565,114571]},{"content":"Description","pos":[114918,114929]},{"content":"public boolean allowPrimaryKeyPreview(<ph id=\"ph1\">\\[</ph>boolean display<ph id=\"ph2\">\\]</ph>)","pos":[115303,115361],"source":"public boolean allowPrimaryKeyPreview(\\[boolean display\\])"},{"content":"public boolean canClose()","pos":[115672,115697]},{"content":"public boolean canSubmitToWorkflow()","pos":[116041,116077]},{"content":"public boolean checkViewOption(int viewOption)","pos":[116410,116456]},{"content":"public boolean closed()","pos":[116779,116802]},{"content":"public boolean closedCancel()","pos":[117148,117177]},{"content":"public boolean closedOk()","pos":[117517,117542]},{"content":"public boolean contains(FormControl control)","pos":[117886,117930]},{"content":"public FormControl control(int controlId)","pos":[118255,118296]},{"content":"public FormControl controlCallingMethod()","pos":[118624,118665]},{"content":"public int controlId(str controlName)","pos":[118993,119030]},{"content":"public boolean controlMethodOverload(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[119362,119417],"source":"public boolean controlMethodOverload(\\[boolean value\\])"},{"content":"public Object controlMethodOverloadObject(<ph id=\"ph1\">\\[</ph>Object value<ph id=\"ph2\">\\]</ph>)","pos":[119731,119790],"source":"public Object controlMethodOverloadObject(\\[Object value\\])"},{"content":"public boolean copy()","pos":[120100,120121]},{"content":"public boolean cut()","pos":[120469,120489]},{"content":"public FormObjectSet dataSource(<ph id=\"ph1\">\\[</ph>AnyType objectSet<ph id=\"ph2\">\\]</ph>)","pos":[120838,120892],"source":"public FormObjectSet dataSource(\\[AnyType objectSet\\])"},{"content":"public int dataSourceCount()","pos":[121207,121235]},{"content":"public FormObjectSet defaultDataSource(<ph id=\"ph1\">\\[</ph>FormObjectSet value<ph id=\"ph2\">\\]</ph>)","pos":[121576,121639],"source":"public FormObjectSet defaultDataSource(\\[FormObjectSet value\\])"},{"content":"public boolean defaultInitialQueryValuesOnCreate(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[121945,122012],"source":"public boolean defaultInitialQueryValuesOnCreate(\\[boolean value\\])"},{"content":"public FormDesign design(<ph id=\"ph1\">\\[</ph>int reserved<ph id=\"ph2\">\\]</ph>)","pos":[122314,122356],"source":"public FormDesign design(\\[int reserved\\])"},{"content":"public Common docCursor()","pos":[122683,122708]},{"content":"public boolean enableCountryRegion(<ph id=\"ph1\">\\[</ph>boolean flag<ph id=\"ph2\">\\]</ph>)","pos":[123052,123104],"source":"public boolean enableCountryRegion(\\[boolean flag\\])"},{"content":"public Form form()","pos":[123421,123439]},{"content":"public Common getActiveWorkflowConfiguration()","pos":[123790,123836]},{"content":"public Common getActiveWorkflowTrackingStatus()","pos":[124159,124206]},{"content":"public Common getActiveWorkflowWorkItem()","pos":[124528,124569]},{"content":"public container getAutoCompleteString(int startIdx, <ph id=\"ph1\">\\[</ph>FormControl control<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>str searchString<ph id=\"ph4\">\\]</ph>)","pos":[124897,124996],"source":"public container getAutoCompleteString(int startIdx, \\[FormControl control\\], \\[str searchString\\])"},{"content":"public str getFormHelpTopic()","pos":[125266,125295]},{"content":"public FormControl getNextField(FormControl control, <ph id=\"ph1\">\\[</ph>int flags<ph id=\"ph2\">\\]</ph>)","pos":[125635,125702],"source":"public FormControl getNextField(FormControl control, \\[int flags\\])"},{"content":"public FormControl getPrevField(FormControl control, <ph id=\"ph1\">\\[</ph>int flags<ph id=\"ph2\">\\]</ph>)","pos":[126004,126071],"source":"public FormControl getPrevField(FormControl control, \\[int flags\\])"},{"content":"public boolean hasExecutedInit()","pos":[126373,126405]},{"content":"public int hWnd()","pos":[126742,126759]},{"content":"public int installMessageProc(int message, int handle, str method)","pos":[127111,127177]},{"content":"public boolean inViewMode()","pos":[127480,127507]},{"content":"public boolean isDataInteractionSupported()","pos":[127849,127892]},{"content":"public boolean isPreloadedInstance()","pos":[128218,128254]},{"content":"public boolean isFormPart()","pos":[128587,128614]},{"content":"public boolean isFactBox()","pos":[128956,128982]},{"content":"public boolean isLookupForm()","pos":[129325,129354]},{"content":"public boolean isPartRemote()","pos":[129694,129723]},{"content":"public boolean isPartLocal()","pos":[130063,130091]},{"content":"public boolean isWorkflowEnabled()","pos":[130432,130466]},{"content":"public Common loadWorkflowConfiguration()","pos":[130801,130842]},{"content":"public boolean lockWindowUpdate(boolean lock)","pos":[131170,131215]},{"content":"public str name()","pos":[131539,131556]},{"content":"public FormObjectSet objectSet(<ph id=\"ph1\">\\[</ph>AnyType objectSet<ph id=\"ph2\">\\]</ph>)","pos":[131908,131961],"source":"public FormObjectSet objectSet(\\[AnyType objectSet\\])"},{"content":"public boolean resetAsyncOperationsPendingState()","pos":[132277,132326]},{"content":"public PageInteraction pageInteraction()","pos":[132646,132686]},{"content":"public boolean paste()","pos":[133015,133037]},{"content":"public str recordingScopeId()","pos":[133384,133413]},{"content":"public boolean removeMessageProc(int message, int handle)","pos":[133753,133810]},{"content":"public List rootFormDataSources()","pos":[134122,134155]},{"content":"public boolean selectControl(FormControl control)","pos":[134491,134540]},{"content":"public FormControl selectedControl()","pos":[134860,134896]},{"content":"public Common selectRecordModeSelectedRecord(<ph id=\"ph1\">\\[</ph>Common selectedRecord<ph id=\"ph2\">\\]</ph>)","pos":[135229,135300],"source":"public Common selectRecordModeSelectedRecord(\\[Common selectedRecord\\])"},{"content":"public FormControl selectTarget(<ph id=\"ph1\">\\[</ph>FormControl target<ph id=\"ph2\">\\]</ph>)","pos":[135598,135653],"source":"public FormControl selectTarget(\\[FormControl target\\])"},{"content":"public Array tabOrder(<ph id=\"ph1\">\\[</ph>Array newValue<ph id=\"ph2\">\\]</ph>)","pos":[135967,136008],"source":"public Array tabOrder(\\[Array newValue\\])"},{"content":"public int task(int taskId)","pos":[136336,136363]},{"content":"public str toString()","pos":[136705,136726]},{"content":"public FormObjectSet workflowDataSource()","pos":[137074,137115]},{"content":"public str workflowType()","pos":[137443,137468]},{"content":"public System.Threading.Tasks.Task runAsync(int runAsClassId, str runAsStaticMethodName, container parms, <ph id=\"ph1\">\\[</ph>System.Threading.CancellationToken cancellationToken<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>str callbackFormMethodName<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>container asyncState<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>str userId<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>str company<ph id=\"ph10\">\\]</ph>, <ph id=\"ph11\">\\[</ph>str language<ph id=\"ph12\">\\]</ph>, <ph id=\"ph13\">\\[</ph>str partitionKey<ph id=\"ph14\">\\]</ph>, <ph id=\"ph15\">\\[</ph>System.Threading.Tasks.TaskCreationOptions options<ph id=\"ph16\">\\]</ph>)","pos":[137812,138162],"source":"public System.Threading.Tasks.Task runAsync(int runAsClassId, str runAsStaticMethodName, container parms, \\[System.Threading.CancellationToken cancellationToken\\], \\[str callbackFormMethodName\\], \\[container asyncState\\], \\[str userId\\], \\[str company\\], \\[str language\\], \\[str partitionKey\\], \\[System.Threading.Tasks.TaskCreationOptions options\\])"},{"content":"public System.Threading.Tasks.Task setTimeoutEx(<ph id=\"ph1\">\\[</ph>str formMethodName<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>container parms<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int delay<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>System.Threading.CancellationToken cancellationToken<ph id=\"ph8\">\\]</ph>)","pos":[138181,138346],"source":"public System.Threading.Tasks.Task setTimeoutEx(\\[str formMethodName\\], \\[container parms\\], \\[int delay\\], \\[System.Threading.CancellationToken cancellationToken\\])"},{"content":"public void setParentHandle(int hwnd)","pos":[138550,138587]},{"content":"public void setFormHelpTopic(str formHelpTopic)","pos":[138919,138966]},{"content":"public void setFactBoxEditable()","pos":[139288,139320]},{"content":"public void setAutoCompleteString(str string, AnyType control)","pos":[139657,139719]},{"content":"public void RaiseOnClosing(<ph id=\"ph1\">\\[</ph>FormEventArgs e<ph id=\"ph2\">\\]</ph>)","pos":[140026,140073],"source":"public void RaiseOnClosing(\\[FormEventArgs e\\])"},{"content":"public void inlineLoadingKey(FormControl parentControl)","pos":[140395,140450]},{"content":"public void closeSelect(str selectString)","pos":[140764,140805]},{"content":"public void RaiseOnActivated(<ph id=\"ph1\">\\[</ph>FormEventArgs e<ph id=\"ph2\">\\]</ph>)","pos":[141133,141182],"source":"public void RaiseOnActivated(\\[FormEventArgs e\\])"},{"content":"public void prevField(<ph id=\"ph1\">\\[</ph>int flags<ph id=\"ph2\">\\]</ph>)","pos":[141502,141538],"source":"public void prevField(\\[int flags\\])"},{"content":"public void send()","pos":[141871,141889]},{"content":"public void RaiseOnInitializing(<ph id=\"ph1\">\\[</ph>FormEventArgs e<ph id=\"ph2\">\\]</ph>)","pos":[142240,142292],"source":"public void RaiseOnInitializing(\\[FormEventArgs e\\])"},{"content":"public void updateWorkflowControls()","pos":[142609,142645]},{"content":"public void closeCancel()","pos":[142978,143003]},{"content":"public void lastField(<ph id=\"ph1\">\\[</ph>int flags<ph id=\"ph2\">\\]</ph>)","pos":[143347,143383],"source":"public void lastField(\\[int flags\\])"},{"content":"public void wait(<ph id=\"ph1\">\\[</ph>boolean modal<ph id=\"ph2\">\\]</ph>)","pos":[143716,143751],"source":"public void wait(\\[boolean modal\\])"},{"content":"public void unLock(<ph id=\"ph1\">\\[</ph>boolean arrangeNow<ph id=\"ph2\">\\]</ph>)","pos":[144085,144127],"source":"public void unLock(\\[boolean arrangeNow\\])"},{"content":"private void OnInitialized(<ph id=\"ph1\">\\[</ph>xFormRun sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[144454,144522],"source":"private void OnInitialized(\\[xFormRun sender\\], \\[FormEventArgs e\\])"},{"content":"public void detach()","pos":[144823,144843]},{"content":"public void resetStatusBarBackgroundColor()","pos":[145192,145235]},{"content":"private void OnClosing(<ph id=\"ph1\">\\[</ph>xFormRun sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[145561,145625],"source":"private void OnClosing(\\[xFormRun sender\\], \\[FormEventArgs e\\])"},{"content":"public void addDisplayMethod(str name, int displayKind, int displayType, int displayXType, int displayRecord, <ph id=\"ph1\">\\[</ph>str dataSourceName<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean isTableDisplayMethod<ph id=\"ph4\">\\]</ph>)","pos":[145930,146097],"source":"public void addDisplayMethod(str name, int displayKind, int displayType, int displayXType, int displayRecord, \\[str dataSourceName\\], \\[boolean isTableDisplayMethod\\])"},{"content":"public void print()","pos":[146299,146318]},{"content":"public void activate(boolean active)","pos":[146668,146704]},{"content":"public void resize(int width, int height)","pos":[147037,147078]},{"content":"public void reload(<ph id=\"ph1\">\\[</ph>xArgs args<ph id=\"ph2\">\\]</ph>)","pos":[147406,147440],"source":"public void reload(\\[xArgs args\\])"},{"content":"public void finalize()","pos":[147775,147797]},{"content":"public void RaiseOnInitialized(<ph id=\"ph1\">\\[</ph>FormEventArgs e<ph id=\"ph2\">\\]</ph>)","pos":[148144,148195],"source":"public void RaiseOnInitialized(\\[FormEventArgs e\\])"},{"content":"public void resetSize()","pos":[148513,148536]},{"content":"public void clientId(str clientId)","pos":[148882,148916]},{"content":"public void createRecord(str formDataSourceName, <ph id=\"ph1\">\\[</ph>boolean append<ph id=\"ph2\">\\]</ph>)","pos":[149251,149319],"source":"public void createRecord(str formDataSourceName, \\[boolean append\\])"},{"content":"public void firstField(<ph id=\"ph1\">\\[</ph>int flags<ph id=\"ph2\">\\]</ph>)","pos":[149620,149657],"source":"public void firstField(\\[int flags\\])"},{"content":"public void savePersonalization(str controlName, str propertyKey, str propertyValue)","pos":[149989,150073]},{"content":"public void expandFactBoxPaneAtStart()","pos":[150358,150396]},{"content":"public void redraw()","pos":[150727,150747]},{"content":"public void arrange()","pos":[151096,151117]},{"content":"public void blockPersonalization(boolean blockPersonalization)","pos":[151465,151527]},{"content":"public void nextField(<ph id=\"ph1\">\\[</ph>int flags<ph id=\"ph2\">\\]</ph>)","pos":[151834,151870],"source":"public void nextField(\\[int flags\\])"},{"content":"public void nextGroup()","pos":[152203,152226]},{"content":"public void prevGroup()","pos":[152572,152595]},{"content":"public void setFormPartStyle(boolean isFactBox)","pos":[152941,152988]},{"content":"public void run()","pos":[153310,153327]},{"content":"public void setActive()","pos":[153679,153702]},{"content":"public void closeSelectRecord(Common selectedRecord)","pos":[154048,154100]},{"content":"public void registerFormSpecializedCustomControl(str customControlName)","pos":[154417,154488]},{"content":"public void setApply(Object object, <ph id=\"ph1\">\\[</ph>Object parm<ph id=\"ph2\">\\]</ph>)","pos":[154786,154838],"source":"public void setApply(Object object, \\[Object parm\\])"},{"content":"public void new(xArgs args)","pos":[155155,155182]},{"content":"public void RegisterXppILImplementation(str className)","pos":[155524,155578]},{"content":"public void sysColorChanged()","pos":[155893,155922]},{"content":"public void selectRecordMode(<ph id=\"ph1\">\\[</ph>FormControl control<ph id=\"ph2\">\\]</ph>)","pos":[156262,156315],"source":"public void selectRecordMode(\\[FormControl control\\])"},{"content":"private void OnPostRun(<ph id=\"ph1\">\\[</ph>xFormRun sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[156631,156695],"source":"private void OnPostRun(\\[xFormRun sender\\], \\[FormEventArgs e\\])"},{"content":"public void skipSaveUserSetting(boolean skip)","pos":[157000,157045]},{"content":"public void selectMode(<ph id=\"ph1\">\\[</ph>FormControl control<ph id=\"ph2\">\\]</ph>)","pos":[157369,157416],"source":"public void selectMode(\\[FormControl control\\])"},{"content":"public void printPreview()","pos":[157738,157764]},{"content":"private void OnActivated(<ph id=\"ph1\">\\[</ph>xFormRun sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[158107,158173],"source":"private void OnActivated(\\[xFormRun sender\\], \\[FormEventArgs e\\])"},{"content":"public void collapseFactBoxPaneAtStart()","pos":[158476,158516]},{"content":"public void lock()","pos":[158845,158863]},{"content":"public void init()","pos":[159214,159232]},{"content":"public void formOnTop()","pos":[159583,159606]},{"content":"public void close()","pos":[159952,159971]},{"content":"public void delAutoCompleteString(<ph id=\"ph1\">\\[</ph>AnyType control<ph id=\"ph2\">\\]</ph>)","pos":[160321,160375],"source":"public void delAutoCompleteString(\\[AnyType control\\])"},{"content":"public void closeOk()","pos":[160690,160711]},{"content":"public void modeledQueryName(str queryName)","pos":[161059,161102]},{"content":"public void initWorkflowControls()","pos":[161428,161462]},{"content":"public void setOrder(FormControl control, FormControl control1, <ph id=\"ph1\">\\[</ph>boolean before<ph id=\"ph2\">\\]</ph>)","pos":[161797,161880],"source":"public void setOrder(FormControl control, FormControl control1, \\[boolean before\\])"},{"content":"public void allowCrossFormLinks(boolean allowCrossFormLinks)","pos":[162166,162226]},{"content":"public void RaiseOnPostRun(<ph id=\"ph1\">\\[</ph>FormEventArgs e<ph id=\"ph2\">\\]</ph>)","pos":[162535,162582],"source":"public void RaiseOnPostRun(\\[FormEventArgs e\\])"},{"content":"public void setStatusBarBackgroundColor(int a, int r, int g, int b)","pos":[162904,162971]},{"content":"public void loadPersonalization()","pos":[163273,163306]},{"content":"public void doApply()","pos":[163642,163663]},{"content":"private void OnInitializing(<ph id=\"ph1\">\\[</ph>xFormRun sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[164011,164080],"source":"private void OnInitializing(\\[xFormRun sender\\], \\[FormEventArgs e\\])"},{"content":"public void flushCountryRegionCodeCache()","pos":[164380,164421]},{"content":"public void localRefresh()","pos":[164749,164775]},{"pos":[165121,165150],"content":"Method allowPrimaryKeyPreview","linkify":"Method allowPrimaryKeyPreview","nodes":[{"content":"Method allowPrimaryKeyPreview","pos":[0,29]}]},{"pos":[165219,165229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"display","pos":[165231,165238]},{"pos":[165247,165259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165265,165280],"content":"Method canClose","linkify":"Method canClose","nodes":[{"content":"Method canClose","pos":[0,15]}]},{"pos":[165318,165330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165336,165362],"content":"Method canSubmitToWorkflow","linkify":"Method canSubmitToWorkflow","nodes":[{"content":"Method canSubmitToWorkflow","pos":[0,26]}]},{"pos":[165411,165423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165429,165451],"content":"Method checkViewOption","linkify":"Method checkViewOption","nodes":[{"content":"Method checkViewOption","pos":[0,22]}]},{"pos":[165510,165520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"viewOption","pos":[165522,165532]},{"pos":[165541,165553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165559,165572],"content":"Method closed","linkify":"Method closed","nodes":[{"content":"Method closed","pos":[0,13]}]},{"pos":[165608,165620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165626,165645],"content":"Method closedCancel","linkify":"Method closedCancel","nodes":[{"content":"Method closedCancel","pos":[0,19]}]},{"pos":[165687,165699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165705,165720],"content":"Method closedOk","linkify":"Method closedOk","nodes":[{"content":"Method closedOk","pos":[0,15]}]},{"pos":[165758,165770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165776,165791],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[165848,165858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[165860,165867]},{"pos":[165876,165888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165894,165908],"content":"Method control","linkify":"Method control","nodes":[{"content":"Method control","pos":[0,14]}]},{"pos":[165962,165972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[165974,165983]},{"pos":[165992,166004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166010,166037],"content":"Method controlCallingMethod","linkify":"Method controlCallingMethod","nodes":[{"content":"Method controlCallingMethod","pos":[0,27]}]},{"pos":[166091,166103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166109,166125],"content":"Method controlId","linkify":"Method controlId","nodes":[{"content":"Method controlId","pos":[0,16]}]},{"pos":[166175,166185],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlName","pos":[166187,166198]},{"pos":[166207,166219],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166225,166253],"content":"Method controlMethodOverload","linkify":"Method controlMethodOverload","nodes":[{"content":"Method controlMethodOverload","pos":[0,28]}]},{"pos":[166319,166329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166331,166336]},{"pos":[166345,166357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166363,166397],"content":"Method controlMethodOverloadObject","linkify":"Method controlMethodOverloadObject","nodes":[{"content":"Method controlMethodOverloadObject","pos":[0,34]}]},{"pos":[166467,166477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166479,166484]},{"pos":[166493,166505],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166511,166522],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"pos":[166556,166568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166574,166584],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"pos":[166617,166629],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166635,166652],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"pos":[166717,166727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"objectSet","pos":[166729,166738]},{"pos":[166747,166759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166765,166787],"content":"Method dataSourceCount","linkify":"Method dataSourceCount","nodes":[{"content":"Method dataSourceCount","pos":[0,22]}]},{"pos":[166828,166840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166846,166870],"content":"Method defaultDataSource","linkify":"Method defaultDataSource","nodes":[{"content":"Method defaultDataSource","pos":[0,24]}]},{"pos":[166944,166954],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166956,166961]},{"pos":[166970,166982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166988,167028],"content":"Method defaultInitialQueryValuesOnCreate","linkify":"Method defaultInitialQueryValuesOnCreate","nodes":[{"content":"Method defaultInitialQueryValuesOnCreate","pos":[0,40]}]},{"pos":[167106,167116],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[167118,167123]},{"pos":[167132,167144],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167150,167163],"content":"Method design","linkify":"Method design","nodes":[{"content":"Method design","pos":[0,13]}]},{"pos":[167216,167226],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"reserved","pos":[167228,167236]},{"pos":[167245,167257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167263,167279],"content":"Method docCursor","linkify":"Method docCursor","nodes":[{"content":"Method docCursor","pos":[0,16]}]},{"pos":[167317,167329],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167335,167361],"content":"Method enableCountryRegion","linkify":"Method enableCountryRegion","nodes":[{"content":"Method enableCountryRegion","pos":[0,26]}]},{"pos":[167424,167434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flag","pos":[167436,167440]},{"pos":[167449,167461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167467,167478],"content":"Method form","linkify":"Method form","nodes":[{"content":"Method form","pos":[0,11]}]},{"pos":[167509,167521],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167527,167564],"content":"Method getActiveWorkflowConfiguration","linkify":"Method getActiveWorkflowConfiguration","nodes":[{"content":"Method getActiveWorkflowConfiguration","pos":[0,37]}]},{"pos":[167623,167635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167641,167679],"content":"Method getActiveWorkflowTrackingStatus","linkify":"Method getActiveWorkflowTrackingStatus","nodes":[{"content":"Method getActiveWorkflowTrackingStatus","pos":[0,38]}]},{"pos":[167739,167751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167757,167789],"content":"Method getActiveWorkflowWorkItem","linkify":"Method getActiveWorkflowWorkItem","nodes":[{"content":"Method getActiveWorkflowWorkItem","pos":[0,32]}]},{"pos":[167843,167855],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167861,167889],"content":"Method getAutoCompleteString","linkify":"Method getAutoCompleteString","nodes":[{"content":"Method getAutoCompleteString","pos":[0,28]}]},{"pos":[167997,168007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"startIdx","pos":[168009,168017]},{"content":"control","pos":[168031,168038]},{"content":"searchString","pos":[168052,168064]},{"pos":[168073,168085],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168091,168114],"content":"Method getFormHelpTopic","linkify":"Method getFormHelpTopic","nodes":[{"content":"Method getFormHelpTopic","pos":[0,23]}]},{"pos":[168156,168168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168174,168193],"content":"Method getNextField","linkify":"Method getNextField","nodes":[{"content":"Method getNextField","pos":[0,19]}]},{"pos":[168271,168281],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[168283,168290]},{"content":"flags","pos":[168304,168309]},{"pos":[168318,168330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168336,168355],"content":"Method getPrevField","linkify":"Method getPrevField","nodes":[{"content":"Method getPrevField","pos":[0,19]}]},{"pos":[168433,168443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[168445,168452]},{"content":"flags","pos":[168466,168471]},{"pos":[168480,168492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168498,168520],"content":"Method hasExecutedInit","linkify":"Method hasExecutedInit","nodes":[{"content":"Method hasExecutedInit","pos":[0,22]}]},{"pos":[168565,168577],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168583,168594],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"pos":[168624,168636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168642,168667],"content":"Method installMessageProc","linkify":"Method installMessageProc","nodes":[{"content":"Method installMessageProc","pos":[0,25]}]},{"pos":[168746,168756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"message","pos":[168758,168765]},{"content":"handle","pos":[168779,168785]},{"content":"method","pos":[168799,168805]},{"pos":[168814,168826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168832,168849],"content":"Method inViewMode","linkify":"Method inViewMode","nodes":[{"content":"Method inViewMode","pos":[0,17]}]},{"pos":[168889,168901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168907,168940],"content":"Method isDataInteractionSupported","linkify":"Method isDataInteractionSupported","nodes":[{"content":"Method isDataInteractionSupported","pos":[0,33]}]},{"pos":[168996,169008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169014,169040],"content":"Method isPreloadedInstance","linkify":"Method isPreloadedInstance","nodes":[{"content":"Method isPreloadedInstance","pos":[0,26]}]},{"pos":[169089,169101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169107,169124],"content":"Method isFormPart","linkify":"Method isFormPart","nodes":[{"content":"Method isFormPart","pos":[0,17]}]},{"pos":[169164,169176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169182,169198],"content":"Method isFactBox","linkify":"Method isFactBox","nodes":[{"content":"Method isFactBox","pos":[0,16]}]},{"pos":[169237,169249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169255,169274],"content":"Method isLookupForm","linkify":"Method isLookupForm","nodes":[{"content":"Method isLookupForm","pos":[0,19]}]},{"pos":[169316,169328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169334,169353],"content":"Method isPartRemote","linkify":"Method isPartRemote","nodes":[{"content":"Method isPartRemote","pos":[0,19]}]},{"pos":[169395,169407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169413,169431],"content":"Method isPartLocal","linkify":"Method isPartLocal","nodes":[{"content":"Method isPartLocal","pos":[0,18]}]},{"pos":[169472,169484],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169490,169514],"content":"Method isWorkflowEnabled","linkify":"Method isWorkflowEnabled","nodes":[{"content":"Method isWorkflowEnabled","pos":[0,24]}]},{"pos":[169561,169573],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169579,169611],"content":"Method loadWorkflowConfiguration","linkify":"Method loadWorkflowConfiguration","nodes":[{"content":"Method loadWorkflowConfiguration","pos":[0,32]}]},{"pos":[169665,169677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169683,169706],"content":"Method lockWindowUpdate","linkify":"Method lockWindowUpdate","nodes":[{"content":"Method lockWindowUpdate","pos":[0,23]}]},{"pos":[169764,169774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lock","pos":[169776,169780]},{"pos":[169789,169801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169807,169818],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"pos":[169848,169860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169866,169882],"content":"Method objectSet","linkify":"Method objectSet","nodes":[{"content":"Method objectSet","pos":[0,16]}]},{"pos":[169946,169956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"objectSet","pos":[169958,169967]},{"pos":[169976,169988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169994,170033],"content":"Method resetAsyncOperationsPendingState","linkify":"Method resetAsyncOperationsPendingState","nodes":[{"content":"Method resetAsyncOperationsPendingState","pos":[0,39]}]},{"pos":[170095,170107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170113,170135],"content":"Method pageInteraction","linkify":"Method pageInteraction","nodes":[{"content":"Method pageInteraction","pos":[0,22]}]},{"pos":[170188,170200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170206,170218],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"pos":[170253,170265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170271,170294],"content":"Method recordingScopeId","linkify":"Method recordingScopeId","nodes":[{"content":"Method recordingScopeId","pos":[0,23]}]},{"pos":[170336,170348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170354,170378],"content":"Method removeMessageProc","linkify":"Method removeMessageProc","nodes":[{"content":"Method removeMessageProc","pos":[0,24]}]},{"pos":[170448,170458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"message","pos":[170460,170467]},{"content":"handle","pos":[170481,170487]},{"pos":[170496,170508],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170514,170540],"content":"Method rootFormDataSources","linkify":"Method rootFormDataSources","nodes":[{"content":"Method rootFormDataSources","pos":[0,26]}]},{"pos":[170586,170598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170604,170624],"content":"Method selectControl","linkify":"Method selectControl","nodes":[{"content":"Method selectControl","pos":[0,20]}]},{"pos":[170686,170696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[170698,170705]},{"pos":[170714,170726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170732,170754],"content":"Method selectedControl","linkify":"Method selectedControl","nodes":[{"content":"Method selectedControl","pos":[0,22]}]},{"pos":[170803,170815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170821,170858],"content":"Method selectRecordModeSelectedRecord","linkify":"Method selectRecordModeSelectedRecord","nodes":[{"content":"Method selectRecordModeSelectedRecord","pos":[0,37]}]},{"pos":[170940,170950],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"selectedRecord","pos":[170952,170966]},{"pos":[170975,170987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170993,171012],"content":"Method selectTarget","linkify":"Method selectTarget","nodes":[{"content":"Method selectTarget","pos":[0,19]}]},{"pos":[171078,171088],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[171090,171096]},{"pos":[171105,171117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171123,171138],"content":"Method tabOrder","linkify":"Method tabOrder","nodes":[{"content":"Method tabOrder","pos":[0,15]}]},{"pos":[171190,171200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[171202,171210]},{"pos":[171219,171231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171237,171248],"content":"Method task","linkify":"Method task","nodes":[{"content":"Method task","pos":[0,11]}]},{"pos":[171288,171298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"taskId","pos":[171300,171306]},{"pos":[171315,171327],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171333,171348],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"pos":[171382,171394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171400,171425],"content":"Method workflowDataSource","linkify":"Method workflowDataSource","nodes":[{"content":"Method workflowDataSource","pos":[0,25]}]},{"pos":[171479,171491],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171497,171516],"content":"Method workflowType","linkify":"Method workflowType","nodes":[{"content":"Method workflowType","pos":[0,19]}]},{"pos":[171554,171566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171572,171587],"content":"Method runAsync","linkify":"Method runAsync","nodes":[{"content":"Method runAsync","pos":[0,15]}]},{"pos":[171934,171944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"runAsClassId","pos":[171946,171958]},{"content":"runAsStaticMethodName","pos":[171972,171993]},{"content":"parms","pos":[172007,172012]},{"content":"cancellationToken","pos":[172026,172043]},{"content":"callbackFormMethodName","pos":[172057,172079]},{"content":"asyncState","pos":[172093,172103]},{"content":"userId","pos":[172117,172123]},{"content":"company","pos":[172137,172144]},{"content":"language","pos":[172158,172166]},{"content":"partitionKey","pos":[172180,172192]},{"content":"options","pos":[172206,172213]},{"pos":[172222,172234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[172240,172259],"content":"Method setTimeoutEx","linkify":"Method setTimeoutEx","nodes":[{"content":"Method setTimeoutEx","pos":[0,19]}]},{"pos":[172429,172439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formMethodName","pos":[172441,172455]},{"content":"parms","pos":[172469,172474]},{"content":"delay","pos":[172488,172493]},{"content":"cancellationToken","pos":[172507,172524]},{"pos":[172533,172545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[172551,172573],"content":"Method setParentHandle","linkify":"Method setParentHandle","nodes":[{"content":"Method setParentHandle","pos":[0,22]}]},{"pos":[172623,172633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"hwnd","pos":[172635,172639]},{"pos":[172647,172670],"content":"Method setFormHelpTopic","linkify":"Method setFormHelpTopic","nodes":[{"content":"Method setFormHelpTopic","pos":[0,23]}]},{"pos":[172730,172740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formHelpTopic","pos":[172742,172755]},{"pos":[172763,172788],"content":"Method setFactBoxEditable","linkify":"Method setFactBoxEditable","nodes":[{"content":"Method setFactBoxEditable","pos":[0,25]}]},{"pos":[172832,172860],"content":"Method setAutoCompleteString","linkify":"Method setAutoCompleteString","nodes":[{"content":"Method setAutoCompleteString","pos":[0,28]}]},{"pos":[172935,172945],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[172947,172953]},{"content":"control","pos":[172967,172974]},{"pos":[172982,173003],"content":"Method RaiseOnClosing","linkify":"Method RaiseOnClosing","nodes":[{"content":"Method RaiseOnClosing","pos":[0,21]}]},{"pos":[173061,173071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"e","pos":[173073,173074]},{"pos":[173082,173105],"content":"Method inlineLoadingKey","linkify":"Method inlineLoadingKey","nodes":[{"content":"Method inlineLoadingKey","pos":[0,23]}]},{"pos":[173173,173183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parentControl","pos":[173185,173198]},{"pos":[173206,173224],"content":"Method closeSelect","linkify":"Method closeSelect","nodes":[{"content":"Method closeSelect","pos":[0,18]}]},{"pos":[173278,173288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"selectString","pos":[173290,173302]},{"pos":[173310,173333],"content":"Method RaiseOnActivated","linkify":"Method RaiseOnActivated","nodes":[{"content":"Method RaiseOnActivated","pos":[0,23]}]},{"pos":[173393,173403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"e","pos":[173405,173406]},{"pos":[173414,173430],"content":"Method prevField","linkify":"Method prevField","nodes":[{"content":"Method prevField","pos":[0,16]}]},{"pos":[173477,173487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flags","pos":[173489,173494]},{"pos":[173502,173513],"content":"Method send","linkify":"Method send","nodes":[{"content":"Method send","pos":[0,11]}]},{"pos":[173543,173569],"content":"Method RaiseOnInitializing","linkify":"Method RaiseOnInitializing","nodes":[{"content":"Method RaiseOnInitializing","pos":[0,26]}]},{"pos":[173632,173642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"e","pos":[173644,173645]},{"pos":[173653,173682],"content":"Method updateWorkflowControls","linkify":"Method updateWorkflowControls","nodes":[{"content":"Method updateWorkflowControls","pos":[0,29]}]},{"pos":[173730,173748],"content":"Method closeCancel","linkify":"Method closeCancel","nodes":[{"content":"Method closeCancel","pos":[0,18]}]},{"pos":[173785,173801],"content":"Method lastField","linkify":"Method lastField","nodes":[{"content":"Method lastField","pos":[0,16]}]},{"pos":[173848,173858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flags","pos":[173860,173865]},{"pos":[173873,173884],"content":"Method wait","linkify":"Method wait","nodes":[{"content":"Method wait","pos":[0,11]}]},{"pos":[173930,173940],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"modal","pos":[173942,173947]},{"pos":[173955,173968],"content":"Method unLock","linkify":"Method unLock","nodes":[{"content":"Method unLock","pos":[0,13]}]},{"pos":[174021,174031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"arrangeNow","pos":[174033,174043]},{"pos":[174051,174071],"content":"Method OnInitialized","linkify":"Method OnInitialized","nodes":[{"content":"Method OnInitialized","pos":[0,20]}]},{"pos":[174148,174158],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[174160,174166]},{"content":"e","pos":[174180,174181]},{"pos":[174189,174202],"content":"Method detach","linkify":"Method detach","nodes":[{"content":"Method detach","pos":[0,13]}]},{"pos":[174234,174270],"content":"Method resetStatusBarBackgroundColor","linkify":"Method resetStatusBarBackgroundColor","nodes":[{"content":"Method resetStatusBarBackgroundColor","pos":[0,36]}]},{"pos":[174325,174341],"content":"Method OnClosing","linkify":"Method OnClosing","nodes":[{"content":"Method OnClosing","pos":[0,16]}]},{"pos":[174414,174424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[174426,174432]},{"content":"e","pos":[174446,174447]},{"pos":[174455,174478],"content":"Method addDisplayMethod","linkify":"Method addDisplayMethod","nodes":[{"content":"Method addDisplayMethod","pos":[0,23]}]},{"pos":[174654,174664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[174666,174670]},{"content":"displayKind","pos":[174684,174695]},{"content":"displayType","pos":[174709,174720]},{"content":"displayXType","pos":[174734,174746]},{"content":"displayRecord","pos":[174760,174773]},{"content":"dataSourceName","pos":[174787,174801]},{"content":"isTableDisplayMethod","pos":[174815,174835]},{"pos":[174843,174855],"content":"Method print","linkify":"Method print","nodes":[{"content":"Method print","pos":[0,12]}]},{"pos":[174886,174901],"content":"Method activate","linkify":"Method activate","nodes":[{"content":"Method activate","pos":[0,15]}]},{"pos":[174950,174960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"active","pos":[174962,174968]},{"pos":[174976,174989],"content":"Method resize","linkify":"Method resize","nodes":[{"content":"Method resize","pos":[0,13]}]},{"pos":[175043,175053],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[175055,175060]},{"content":"height","pos":[175074,175080]},{"pos":[175088,175101],"content":"Method reload","linkify":"Method reload","nodes":[{"content":"Method reload","pos":[0,13]}]},{"pos":[175146,175156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[175158,175162]},{"pos":[175170,175185],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[175219,175244],"content":"Method RaiseOnInitialized","linkify":"Method RaiseOnInitialized","nodes":[{"content":"Method RaiseOnInitialized","pos":[0,25]}]},{"pos":[175306,175316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"e","pos":[175318,175319]},{"pos":[175327,175343],"content":"Method resetSize","linkify":"Method resetSize","nodes":[{"content":"Method resetSize","pos":[0,16]}]},{"pos":[175378,175393],"content":"Method clientId","linkify":"Method clientId","nodes":[{"content":"Method clientId","pos":[0,15]}]},{"pos":[175440,175450],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"clientId","pos":[175452,175460]},{"pos":[175468,175487],"content":"Method createRecord","linkify":"Method createRecord","nodes":[{"content":"Method createRecord","pos":[0,19]}]},{"pos":[175566,175576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formDataSourceName","pos":[175578,175596]},{"content":"append","pos":[175610,175616]},{"pos":[175624,175641],"content":"Method firstField","linkify":"Method firstField","nodes":[{"content":"Method firstField","pos":[0,17]}]},{"pos":[175689,175699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flags","pos":[175701,175706]},{"pos":[175714,175740],"content":"Method savePersonalization","linkify":"Method savePersonalization","nodes":[{"content":"Method savePersonalization","pos":[0,26]}]},{"pos":[175837,175847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlName","pos":[175849,175860]},{"content":"propertyKey","pos":[175874,175885]},{"content":"propertyValue","pos":[175899,175912]},{"pos":[175920,175951],"content":"Method expandFactBoxPaneAtStart","linkify":"Method expandFactBoxPaneAtStart","nodes":[{"content":"Method expandFactBoxPaneAtStart","pos":[0,31]}]},{"pos":[176001,176014],"content":"Method redraw","linkify":"Method redraw","nodes":[{"content":"Method redraw","pos":[0,13]}]},{"pos":[176046,176060],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[176093,176120],"content":"Method blockPersonalization","linkify":"Method blockPersonalization","nodes":[{"content":"Method blockPersonalization","pos":[0,27]}]},{"pos":[176195,176205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"blockPersonalization","pos":[176207,176227]},{"pos":[176235,176251],"content":"Method nextField","linkify":"Method nextField","nodes":[{"content":"Method nextField","pos":[0,16]}]},{"pos":[176298,176308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flags","pos":[176310,176315]},{"pos":[176323,176339],"content":"Method nextGroup","linkify":"Method nextGroup","nodes":[{"content":"Method nextGroup","pos":[0,16]}]},{"pos":[176374,176390],"content":"Method prevGroup","linkify":"Method prevGroup","nodes":[{"content":"Method prevGroup","pos":[0,16]}]},{"pos":[176425,176448],"content":"Method setFormPartStyle","linkify":"Method setFormPartStyle","nodes":[{"content":"Method setFormPartStyle","pos":[0,23]}]},{"pos":[176508,176518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"isFactBox","pos":[176520,176529]},{"pos":[176537,176547],"content":"Method run","linkify":"Method run","nodes":[{"content":"Method run","pos":[0,10]}]},{"pos":[176576,176592],"content":"Method setActive","linkify":"Method setActive","nodes":[{"content":"Method setActive","pos":[0,16]}]},{"pos":[176627,176651],"content":"Method closeSelectRecord","linkify":"Method closeSelectRecord","nodes":[{"content":"Method closeSelectRecord","pos":[0,24]}]},{"pos":[176716,176726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"selectedRecord","pos":[176728,176742]},{"pos":[176750,176793],"content":"Method registerFormSpecializedCustomControl","linkify":"Method registerFormSpecializedCustomControl","nodes":[{"content":"Method registerFormSpecializedCustomControl","pos":[0,43]}]},{"pos":[176877,176887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"customControlName","pos":[176889,176906]},{"pos":[176914,176929],"content":"Method setApply","linkify":"Method setApply","nodes":[{"content":"Method setApply","pos":[0,15]}]},{"pos":[176992,177002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"object","pos":[177004,177010]},{"content":"parm","pos":[177024,177028]},{"pos":[177036,177046],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[177086,177096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[177098,177102]},{"pos":[177110,177144],"content":"Method RegisterXppILImplementation","linkify":"Method RegisterXppILImplementation","nodes":[{"content":"Method RegisterXppILImplementation","pos":[0,34]}]},{"pos":[177211,177221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"className","pos":[177223,177232]},{"pos":[177240,177262],"content":"Method sysColorChanged","linkify":"Method sysColorChanged","nodes":[{"content":"Method sysColorChanged","pos":[0,22]}]},{"pos":[177303,177326],"content":"Method selectRecordMode","linkify":"Method selectRecordMode","nodes":[{"content":"Method selectRecordMode","pos":[0,23]}]},{"pos":[177390,177400],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[177402,177409]},{"pos":[177417,177433],"content":"Method OnPostRun","linkify":"Method OnPostRun","nodes":[{"content":"Method OnPostRun","pos":[0,16]}]},{"pos":[177506,177516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[177518,177524]},{"content":"e","pos":[177538,177539]},{"pos":[177547,177573],"content":"Method skipSaveUserSetting","linkify":"Method skipSaveUserSetting","nodes":[{"content":"Method skipSaveUserSetting","pos":[0,26]}]},{"pos":[177631,177641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"skip","pos":[177643,177647]},{"pos":[177655,177672],"content":"Method selectMode","linkify":"Method selectMode","nodes":[{"content":"Method selectMode","pos":[0,17]}]},{"pos":[177730,177740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[177742,177749]},{"pos":[177757,177776],"content":"Method printPreview","linkify":"Method printPreview","nodes":[{"content":"Method printPreview","pos":[0,19]}]},{"pos":[177814,177832],"content":"Method OnActivated","linkify":"Method OnActivated","nodes":[{"content":"Method OnActivated","pos":[0,18]}]},{"pos":[177907,177917],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[177919,177925]},{"content":"e","pos":[177939,177940]},{"pos":[177948,177981],"content":"Method collapseFactBoxPaneAtStart","linkify":"Method collapseFactBoxPaneAtStart","nodes":[{"content":"Method collapseFactBoxPaneAtStart","pos":[0,33]}]},{"pos":[178033,178044],"content":"Method lock","linkify":"Method lock","nodes":[{"content":"Method lock","pos":[0,11]}]},{"pos":[178074,178085],"content":"Method init","linkify":"Method init","nodes":[{"content":"Method init","pos":[0,11]}]},{"pos":[178115,178131],"content":"Method formOnTop","linkify":"Method formOnTop","nodes":[{"content":"Method formOnTop","pos":[0,16]}]},{"pos":[178166,178178],"content":"Method close","linkify":"Method close","nodes":[{"content":"Method close","pos":[0,12]}]},{"pos":[178209,178237],"content":"Method delAutoCompleteString","linkify":"Method delAutoCompleteString","nodes":[{"content":"Method delAutoCompleteString","pos":[0,28]}]},{"pos":[178302,178312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[178314,178321]},{"pos":[178329,178343],"content":"Method closeOk","linkify":"Method closeOk","nodes":[{"content":"Method closeOk","pos":[0,14]}]},{"pos":[178376,178399],"content":"Method modeledQueryName","linkify":"Method modeledQueryName","nodes":[{"content":"Method modeledQueryName","pos":[0,23]}]},{"pos":[178455,178465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"queryName","pos":[178467,178476]},{"pos":[178484,178511],"content":"Method initWorkflowControls","linkify":"Method initWorkflowControls","nodes":[{"content":"Method initWorkflowControls","pos":[0,27]}]},{"pos":[178557,178572],"content":"Method setOrder","linkify":"Method setOrder","nodes":[{"content":"Method setOrder","pos":[0,15]}]},{"pos":[178666,178676],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[178678,178685]},{"content":"control1","pos":[178699,178707]},{"content":"before","pos":[178721,178727]},{"pos":[178735,178761],"content":"Method allowCrossFormLinks","linkify":"Method allowCrossFormLinks","nodes":[{"content":"Method allowCrossFormLinks","pos":[0,26]}]},{"pos":[178834,178844],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"allowCrossFormLinks","pos":[178846,178865]},{"pos":[178873,178894],"content":"Method RaiseOnPostRun","linkify":"Method RaiseOnPostRun","nodes":[{"content":"Method RaiseOnPostRun","pos":[0,21]}]},{"pos":[178952,178962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"e","pos":[178964,178965]},{"pos":[178973,179007],"content":"Method setStatusBarBackgroundColor","linkify":"Method setStatusBarBackgroundColor","nodes":[{"content":"Method setStatusBarBackgroundColor","pos":[0,34]}]},{"pos":[179087,179097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"a","pos":[179099,179100]},{"content":"r","pos":[179114,179115]},{"content":"g","pos":[179129,179130]},{"content":"b","pos":[179144,179145]},{"pos":[179153,179179],"content":"Method loadPersonalization","linkify":"Method loadPersonalization","nodes":[{"content":"Method loadPersonalization","pos":[0,26]}]},{"pos":[179224,179238],"content":"Method doApply","linkify":"Method doApply","nodes":[{"content":"Method doApply","pos":[0,14]}]},{"pos":[179271,179292],"content":"Method OnInitializing","linkify":"Method OnInitializing","nodes":[{"content":"Method OnInitializing","pos":[0,21]}]},{"pos":[179370,179380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[179382,179388]},{"content":"e","pos":[179402,179403]},{"pos":[179411,179445],"content":"Method flushCountryRegionCodeCache","linkify":"Method flushCountryRegionCodeCache","nodes":[{"content":"Method flushCountryRegionCodeCache","pos":[0,34]}]},{"pos":[179498,179517],"content":"Method localRefresh","linkify":"Method localRefresh","nodes":[{"content":"Method localRefresh","pos":[0,19]}]},{"pos":[179554,179567],"content":"Class xGlobal","linkify":"Class xGlobal","nodes":[{"content":"Class xGlobal","pos":[0,13]}]},{"pos":[179606,179613],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[179619,179627],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[179633,179640],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[179644,179650]},{"content":"Description","pos":[180033,180044]},{"content":"::public static ClientType clientKind()","pos":[180532,180571]},{"content":"::public static SelectableDataArea company(TableId tableid, <ph id=\"ph1\">\\[</ph>SelectableDataArea company<ph id=\"ph2\">\\]</ph>)","pos":[180976,181067],"source":"::public static SelectableDataArea company(TableId tableid, \\[SelectableDataArea company\\])"},{"content":"::public static str computerName()","pos":[181420,181454]},{"content":"::public static boolean hasClient()","pos":[181864,181899]},{"content":"::public static int infologLine()","pos":[182308,182341]},{"content":"Returns the number of lines in the Infolog buffer.","pos":[182697,182747]},{"content":"::public static boolean isAOS()","pos":[182752,182783]},{"content":"::public static boolean isGuest()","pos":[183196,183229]},{"content":"::public static boolean isUserLanguageRTL()","pos":[183640,183683]},{"content":"::public static container languageList()","pos":[184084,184124]},{"content":"::public static str machineTzDisplayName()","pos":[184528,184570]},{"content":"::public static boolean isObjectOnServer(AnyType object)","pos":[184972,185028]},{"content":"::public static int randomPositiveInt32()","pos":[185416,185457]},{"content":"::public static boolean terminalServer()","pos":[185860,185900]},{"content":"::public static WorkerSessionType workerSessionType()","pos":[186304,186357]},{"content":"::public static System.Threading.Tasks.Task runAsync(int runAsClassId, str runAsStaticMethodName, container parms, <ph id=\"ph1\">\\[</ph>System.Threading.CancellationToken cancellationToken<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int callbackClassId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>str callbackStaticMethodName<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>container asyncState<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>str userId<ph id=\"ph10\">\\]</ph>, <ph id=\"ph11\">\\[</ph>str company<ph id=\"ph12\">\\]</ph>, <ph id=\"ph13\">\\[</ph>str language<ph id=\"ph14\">\\]</ph>, <ph id=\"ph15\">\\[</ph>str partitionKey<ph id=\"ph16\">\\]</ph>, <ph id=\"ph17\">\\[</ph>System.Threading.Tasks.TaskCreationOptions options<ph id=\"ph18\">\\]</ph>)","pos":[186748,187134],"source":"::public static System.Threading.Tasks.Task runAsync(int runAsClassId, str runAsStaticMethodName, container parms, \\[System.Threading.CancellationToken cancellationToken\\], \\[int callbackClassId\\], \\[str callbackStaticMethodName\\], \\[container asyncState\\], \\[str userId\\], \\[str company\\], \\[str language\\], \\[str partitionKey\\], \\[System.Threading.Tasks.TaskCreationOptions options\\])"},{"content":"::public static System.Threading.Tasks.Task runAsyncWithObjectCallback(int runAsClassId, str runAsStaticMethodName, container parms, Object callbackObject, str callbackStaticMethodName)","pos":[187192,187377]},{"content":"::public static void forceFormPreload()","pos":[187636,187675]},{"content":"Forces form preloading to occur immediately.","pos":[188025,188069]},{"content":"private void new()","pos":[188080,188098]},{"content":"Initializes a new instance of the xGlobal class.","pos":[188469,188517]},{"pos":[188527,188544],"content":"Method clientKind","linkify":"Method clientKind","nodes":[{"content":"Method clientKind","pos":[0,17]}]},{"pos":[188594,188606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[188612,188626],"content":"Method company","linkify":"Method company","nodes":[{"content":"Method company","pos":[0,14]}]},{"pos":[188726,188736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableid","pos":[188738,188745]},{"content":"company","pos":[188759,188766]},{"pos":[188775,188787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[188793,188812],"content":"Method computerName","linkify":"Method computerName","nodes":[{"content":"Method computerName","pos":[0,19]}]},{"pos":[188857,188869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[188875,188891],"content":"Method hasClient","linkify":"Method hasClient","nodes":[{"content":"Method hasClient","pos":[0,16]}]},{"pos":[188937,188949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[188955,188973],"content":"Method infologLine","linkify":"Method infologLine","nodes":[{"content":"Method infologLine","pos":[0,18]}]},{"content":"Returns the number of lines in the Infolog buffer.","pos":[188975,189025]},{"pos":[189069,189081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189088,189095],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method has similar functionality to the xInfo.line method, but it improves performance and lowers network load when you are executing server-side code.","pos":[189097,189253]},{"content":"When xInfo.line is run on the server, it makes a call to the client to retrieve the number of lines in the Infolog buffer.","pos":[189254,189376]},{"content":"The xGlobal::infologLine method retrieves the line count of the server-side Infolog buffer, so that you do not have to call to the client.","pos":[189377,189515]},{"content":"When the xGlobal::infologLine method is called on the client, it returns the count directly from the Infolog buffer on the client.","pos":[189516,189646]},{"content":"This method is especially useful when you are writing server-side code that processes exceptions.","pos":[189647,189744]},{"content":"The number of lines in the Infolog is typically stored before a try/catch block is entered.","pos":[189745,189836]},{"content":"If an exception occurs, the number of lines that were previously stored is used to determine which messages were logged during the code in the try block.","pos":[189837,189990]},{"content":"If no exceptions occur, the stored Infolog buffer line count is often unused.","pos":[189991,190068]},{"content":"By using the xGlobal::infologLine method instead of the xInfo.line method to retrieve the Infolog lines, you avoid a round trip to the client.","pos":[190069,190211]},{"pos":[190217,190229],"content":"Method isAOS","linkify":"Method isAOS","nodes":[{"content":"Method isAOS","pos":[0,12]}]},{"pos":[190271,190283],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190289,190303],"content":"Method isGuest","linkify":"Method isGuest","nodes":[{"content":"Method isGuest","pos":[0,14]}]},{"pos":[190347,190359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190365,190389],"content":"Method isUserLanguageRTL","linkify":"Method isUserLanguageRTL","nodes":[{"content":"Method isUserLanguageRTL","pos":[0,24]}]},{"pos":[190443,190455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190461,190480],"content":"Method languageList","linkify":"Method languageList","nodes":[{"content":"Method languageList","pos":[0,19]}]},{"pos":[190531,190543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190549,190576],"content":"Method machineTzDisplayName","linkify":"Method machineTzDisplayName","nodes":[{"content":"Method machineTzDisplayName","pos":[0,27]}]},{"pos":[190629,190641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190647,190670],"content":"Method isObjectOnServer","linkify":"Method isObjectOnServer","nodes":[{"content":"Method isObjectOnServer","pos":[0,23]}]},{"pos":[190737,190747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"object","pos":[190749,190755]},{"pos":[190764,190776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190782,190808],"content":"Method randomPositiveInt32","linkify":"Method randomPositiveInt32","nodes":[{"content":"Method randomPositiveInt32","pos":[0,26]}]},{"pos":[190860,190872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190878,190899],"content":"Method terminalServer","linkify":"Method terminalServer","nodes":[{"content":"Method terminalServer","pos":[0,21]}]},{"pos":[190950,190962],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190968,190992],"content":"Method workerSessionType","linkify":"Method workerSessionType","nodes":[{"content":"Method workerSessionType","pos":[0,24]}]},{"pos":[191056,191068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191074,191089],"content":"Method runAsync","linkify":"Method runAsync","nodes":[{"content":"Method runAsync","pos":[0,15]}]},{"pos":[191468,191478],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"runAsClassId","pos":[191480,191492]},{"content":"runAsStaticMethodName","pos":[191506,191527]},{"content":"parms","pos":[191541,191546]},{"content":"cancellationToken","pos":[191560,191577]},{"content":"callbackClassId","pos":[191591,191606]},{"content":"callbackStaticMethodName","pos":[191620,191644]},{"content":"asyncState","pos":[191658,191668]},{"content":"userId","pos":[191682,191688]},{"content":"company","pos":[191702,191709]},{"content":"language","pos":[191723,191731]},{"content":"partitionKey","pos":[191745,191757]},{"content":"options","pos":[191771,191778]},{"pos":[191787,191799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191805,191838],"content":"Method runAsyncWithObjectCallback","linkify":"Method runAsyncWithObjectCallback","nodes":[{"content":"Method runAsyncWithObjectCallback","pos":[0,33]}]},{"pos":[192034,192044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"runAsClassId","pos":[192046,192058]},{"content":"runAsStaticMethodName","pos":[192072,192093]},{"content":"parms","pos":[192107,192112]},{"content":"callbackObject","pos":[192126,192140]},{"content":"callbackStaticMethodName","pos":[192154,192178]},{"pos":[192187,192199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192205,192228],"content":"Method forceFormPreload","linkify":"Method forceFormPreload","nodes":[{"content":"Method forceFormPreload","pos":[0,23]}]},{"content":"Forces form preloading to occur immediately.","pos":[192230,192274]},{"pos":[192324,192331],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Normally, preloading occurs only when the client has gone idle.","pos":[192333,192396]},{"content":"In scenarios where long-running X++ execution is occurring, this method can be used to force form preloading.","pos":[192397,192506]},{"pos":[192512,192522],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xGlobal class.","pos":[192524,192572]},{"pos":[192601,192612],"content":"Class xInfo","linkify":"Class xInfo","nodes":[{"content":"Class xInfo","pos":[0,11]}]},{"pos":[192649,192656],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[192662,192670],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[192676,192683],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[192687,192693]},{"content":"Description","pos":[192894,192905]},{"content":"public int removeMessage(Int64 messageId)","pos":[193477,193518]},{"content":"public Int64 insertMessage(MessageSeverity type, str message)","pos":[193872,193933]},{"content":"public Exception add(Exception exceptionType, str string, <ph id=\"ph1\">\\[</ph>str helpURL<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>Object obj<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean buildprefix<ph id=\"ph6\">\\]</ph>)","pos":[194267,194382],"source":"public Exception add(Exception exceptionType, str string, \\[str helpURL\\], \\[Object obj\\], \\[boolean buildprefix\\])"},{"content":"Adds a string to the Infolog buffer.","pos":[194474,194510]},{"content":"public Exception addException(str string, str stackTrace)","pos":[194662,194719]},{"content":"public container breakpoint(<ph id=\"ph1\">\\[</ph>container breakpoint<ph id=\"ph2\">\\]</ph>)","pos":[195057,195110],"source":"public container breakpoint(\\[container breakpoint\\])"},{"content":"Gets or sets information about breakpoints.","pos":[195264,195307]},{"content":"public boolean canShowCreateRuleMenuItem(xFormRun caller)","pos":[195452,195509]},{"content":"Determines whether the menu item for the Create alert rule form should be displayed for a form.","pos":[195659,195754]},{"content":"public boolean canShutdown(boolean silent)","pos":[195847,195889]},{"content":"Tests whether the system can be shut down.","pos":[196054,196096]},{"content":"Do not use this method.","pos":[196097,196120]},{"content":"Use the version that is overridden on the Info class instead.","pos":[196121,196182]},{"content":"public boolean canViewAlertInbox()","pos":[196242,196276]},{"content":"Determines whether the current user has permission to view the View alerts form.","pos":[196449,196529]},{"content":"public xCompilerOutput compilerOutput(<ph id=\"ph1\">\\[</ph>Object compilerOut<ph id=\"ph2\">\\]</ph>)","pos":[196637,196698],"source":"public xCompilerOutput compilerOutput(\\[Object compilerOut\\])"},{"content":"Gets or sets the compiler output object.","pos":[196844,196884]},{"content":"The compiler output object is the Compiler output window by default.","pos":[196885,196953]},{"content":"public container copy(int from, int to)","pos":[197032,197071]},{"content":"Copies lines from the Infolog buffer.","pos":[197239,197276]},{"content":"public int createDevelopmentWorkspaceWindow()","pos":[197427,197472]},{"content":"public int createWorkspaceWindow()","pos":[197822,197856]},{"content":"Opens a new workspace window.","pos":[198029,198058]},{"content":"For example, this enables you to open different sets of application objects in different windows, or to work with two different sets of company accounts.","pos":[198059,198212]},{"content":"public UtilEntryLevel currentAOLayer()","pos":[198217,198255]},{"content":"Retrieves the current layer you are running in such as SYS, or USR.","pos":[198424,198491]},{"content":"public container cut(int from, int to)","pos":[198612,198650]},{"content":"Cuts lines from the Infolog buffer.","pos":[198819,198854]},{"content":"public str documentationLanguage(<ph id=\"ph1\">\\[</ph>str languageCode<ph id=\"ph2\">\\]</ph>)","pos":[199007,199061],"source":"public str documentationLanguage(\\[str languageCode\\])"},{"content":"Gets or sets the language that is used for the Finance and Operations documentation.","pos":[199214,199298]},{"content":"public container export()","pos":[199403,199428]},{"content":"public TreeNode findNode(str nodePath)","pos":[199798,199836]},{"content":"Retrieves the specified a tree node.","pos":[200005,200041]},{"content":"public TreeNode getDocNode(UtilFileType helpType, int UtilType, str Name, <ph id=\"ph1\">\\[</ph>UtilElementId ParentId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int Type<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>UtilEntryLevel UtilLevel<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>boolean ForceLevel<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>int Mode<ph id=\"ph10\">\\]</ph>, <ph id=\"ph11\">\\[</ph>boolean OldUtil<ph id=\"ph12\">\\]</ph>)","pos":[200193,200397],"source":"public TreeNode getDocNode(UtilFileType helpType, int UtilType, str Name, \\[UtilElementId ParentId\\], \\[int Type\\], \\[UtilEntryLevel UtilLevel\\], \\[boolean ForceLevel\\], \\[int Mode\\], \\[boolean OldUtil\\])"},{"content":"Retrieves the specified documentation nodes from the AOT.","pos":[200400,200457]},{"content":"public TreeNode getImportedNode(int id, int utilfiletype, UtilElementType utiltype, str name, int fileposition, int Flag)","pos":[200588,200709]},{"content":"Creates an instance of a tree node from an XPO file but does not import it into the AOT.","pos":[200795,200883]},{"content":"For example, this allows you to compare it with another version of the same tree node.","pos":[200884,200970]},{"content":"public TreeNode getNode(UtilElementType UtilType, str Name, <ph id=\"ph1\">\\[</ph>UtilElementId ParentId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int Type<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>UtilEntryLevel Utillevel<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>boolean Forcelevel<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>int Mode<ph id=\"ph10\">\\]</ph>, <ph id=\"ph11\">\\[</ph>boolean OldUtil<ph id=\"ph12\">\\]</ph>)","pos":[200983,201173],"source":"public TreeNode getNode(UtilElementType UtilType, str Name, \\[UtilElementId ParentId\\], \\[int Type\\], \\[UtilEntryLevel Utillevel\\], \\[boolean Forcelevel\\], \\[int Mode\\], \\[boolean OldUtil\\])"},{"content":"Retrieves a tree node that corresponds to a node in the AOT.","pos":[201190,201250]},{"content":"public int getNodeResid(UtilElementType nodeType)","pos":[201378,201427]},{"content":"Retrieves the resource ID for the icon that is used to display nodes of the specified type.","pos":[201585,201676]},{"content":"public Struct getTaskInfo(int taskNumber)","pos":[201773,201814]},{"content":"public UserSetup getUserSetup()","pos":[202168,202199]},{"content":"Retrieves a UserSetup object that is used to set user parameters.","pos":[202375,202440]},{"content":"public container getWorkspaceList()","pos":[202563,202598]},{"content":"public int hWnd(<ph id=\"ph1\">\\[</ph>int workspaceNum<ph id=\"ph2\">\\]</ph>)","pos":[202958,202995],"source":"public int hWnd(\\[int workspaceNum\\])"},{"content":"Retrieves a handle to the Finance and OperationsNavigation Pane window.","pos":[203165,203236]},{"content":"public boolean import(container infologContainer, <ph id=\"ph1\">\\[</ph>boolean clearExistingInfolog<ph id=\"ph2\">\\]</ph>)","pos":[203354,203437],"source":"public boolean import(container infologContainer, \\[boolean clearExistingInfolog\\])"},{"content":"public int importElement(int id, int utilfiletype, UtilElementType utiltype, str name, int fileposition, int Flag)","pos":[203749,203863]},{"content":"Specifies the object to be imported.","pos":[203956,203992]},{"content":"public int importString(str source, UtilElementType kind, str name)","pos":[204144,204211]},{"content":"Imports an object from a file.","pos":[204351,204381]},{"content":"public int instance()","pos":[204539,204560]},{"content":"Retrieves a handle to the current instance of the application.","pos":[204746,204808]},{"content":"public str isoCurrencyCode(<ph id=\"ph1\">\\[</ph>str code<ph id=\"ph2\">\\]</ph>)","pos":[204934,204974],"source":"public str isoCurrencyCode(\\[str code\\])"},{"content":"Gets or sets the currency code.","pos":[205141,205172]},{"content":"public boolean IsVisible()","pos":[205329,205355]},{"content":"Determines whether the client window is not minimized.","pos":[205536,205590]},{"content":"public str language(<ph id=\"ph1\">\\[</ph>str languageCode<ph id=\"ph2\">\\]</ph>)","pos":[205724,205765],"source":"public str language(\\[str languageCode\\])"},{"content":"Gets or sets the language for the GUI.","pos":[205931,205969]},{"content":"public Exception level(int line)","pos":[206119,206151]},{"content":"Retrieves the exception level of a line in the Infolog buffer.","pos":[206326,206388]},{"content":"public int line()","pos":[206514,206531]},{"content":"Retrieves the number of lines in the Infolog buffer.","pos":[206721,206773]},{"content":"public MessageWin messageWin()","pos":[206909,206939]},{"content":"Enables you to send output from the Infolog to the Message window.","pos":[207116,207182]},{"content":"public Real nationalCurrencyFactor(<ph id=\"ph1\">\\[</ph>Real factor<ph id=\"ph2\">\\]</ph>)","pos":[207304,207355],"source":"public Real nationalCurrencyFactor(\\[Real factor\\])"},{"content":"public str nationalCurrencyPostfix(<ph id=\"ph1\">\\[</ph>str string<ph id=\"ph2\">\\]</ph>)","pos":[207699,207749],"source":"public str nationalCurrencyPostfix(\\[str string\\])"},{"content":"public str nationalCurrencyPrefix(<ph id=\"ph1\">\\[</ph>str string<ph id=\"ph2\">\\]</ph>)","pos":[208094,208143],"source":"public str nationalCurrencyPrefix(\\[str string\\])"},{"content":"public xNavPane navPane()","pos":[208489,208514]},{"content":"Retrieves an xNavPane object, the primary navigation control class.","pos":[208696,208763]},{"content":"public int num(<ph id=\"ph1\">\\[</ph>Exception exceptionType<ph id=\"ph2\">\\]</ph>)","pos":[208884,208927],"source":"public int num(\\[Exception exceptionType\\])"},{"content":"Retrieves the number of exceptions of the specified type in the Infolog buffer.","pos":[209091,209170]},{"content":"public int prevInstance()","pos":[209279,209304]},{"content":"Retrieves a handle to the previous instance of the application.","pos":[209486,209549]},{"content":"public int processId()","pos":[209674,209696]},{"content":"Retrieves the ID for the Finance and Operations process.","pos":[209881,209937]},{"content":"public TreeNode projectRootNode()","pos":[210070,210103]},{"content":"Returns the X++ Projects node.","pos":[210277,210307]},{"content":"public TreeNode rootNode()","pos":[210465,210491]},{"content":"Retrieves the root of the application object tree.","pos":[210672,210722]},{"content":"public int startImport(str file, int flag, <ph id=\"ph1\">\\[</ph>str labelSubstitutes<ph id=\"ph2\">\\]</ph>)","pos":[210860,210928],"source":"public int startImport(str file, int flag, \\[str labelSubstitutes\\])"},{"content":"Creates an import context.","pos":[211067,211093]},{"content":"public str text(<ph id=\"ph1\">\\[</ph>int line<ph id=\"ph2\">\\]</ph>)","pos":[211255,211284],"source":"public str text(\\[int line\\])"},{"content":"Retrieves a line of text from the Infolog.","pos":[211462,211504]},{"content":"public TreeNode userNode()","pos":[211650,211676]},{"content":"public AnyType webSession(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[212045,212089],"source":"public AnyType webSession(\\[AnyType value\\])"},{"content":"::public static container activeXControls()","pos":[212440,212483]},{"content":"Retrieves a list of the ActiveX controls that are in Finance and Operations.","pos":[212647,212723]},{"content":"::public static str AOTLogDirectory()","pos":[212836,212873]},{"content":"Gets the path to the log directory for the current installation.","pos":[213043,213107]},{"content":"::public static container automationObjects()","pos":[213231,213276]},{"content":"Retrieves the list of COM objects that are available in Finance and Operations.","pos":[213438,213517]},{"content":"::public static str buildNo()","pos":[213627,213656]},{"content":"Retrieves the kernel build number of the current Finance and Operations executable.","pos":[213834,213917]},{"content":"::public static str compilationDate()","pos":[214023,214060]},{"content":"Retrieves the date on which the current version of Finance and Operations was last compiled.","pos":[214230,214322]},{"content":"::public static str compilationTime()","pos":[214419,214456]},{"content":"Retrieves the time at which the current version of Finance and Operations was last compiled.","pos":[214626,214718]},{"content":"::public static str componentName()","pos":[214815,214850]},{"content":"Retrieves the path to the component.","pos":[215022,215058]},{"content":"::public static str configuration()","pos":[215210,215245]},{"content":"Retrieves the current client configuration.","pos":[215417,215460]},{"content":"::public static int currentWorkspaceNum()","pos":[215605,215646]},{"content":"Retrieves the application window ID of the current workspace.","pos":[215812,215873]},{"content":"::public static str directory(DirectoryType type)","pos":[216000,216049]},{"content":"Retrieves the path to the directory where the Finance and Operations client has been installed.","pos":[216207,216302]},{"content":"::public static Date expireDate()","pos":[216396,216429]},{"content":"Retrieves the date on which the license for the current installation expires.","pos":[216603,216680]},{"content":"::public static ApplicationObjectTreeWindow getApplicationObjectTreeWindow()","pos":[216791,216867]},{"content":"::public static int getCurrentModelId()","pos":[217186,217225]},{"content":"::public static int getNumberOfDecimals(Real number)","pos":[217581,217633]},{"content":"Retrieves the number of decimal places in the specified number.","pos":[217788,217851]},{"content":"::public static PropertiesWindow getPropertiesWindow()","pos":[217976,218030]},{"content":"::public static int getSystemGeneratedModelId(UtilEntryLevel layer)","pos":[218371,218438]},{"content":"::public static str licenseName()","pos":[218766,218799]},{"content":"Retrieves the name of the current Finance and Operations license.","pos":[218973,219038]},{"content":"::public static str productName()","pos":[219162,219195]},{"content":"Retrieves the name of the product.","pos":[219369,219403]},{"content":"::public static str productRegisteredName()","pos":[219557,219600]},{"content":"::public static str releaseVersion()","pos":[219952,219988]},{"content":"Retrieves the version number of the current Finance and Operations executable; for example: 3.0, or 4.0.","pos":[220159,220263]},{"content":"::public static str releaseYear()","pos":[220348,220381]},{"content":"::public static str serialNo()","pos":[220743,220773]},{"content":"Retrieves the serial number of the current Finance and Operations license.","pos":[220950,221024]},{"content":"public void new()","pos":[221139,221156]},{"content":"Initializes a new xInfo object.","pos":[221346,221377]},{"content":"public void workspaceWindowDestroyed(int hWnd)","pos":[221534,221580]},{"content":"Executes when a workspace is closed.","pos":[221741,221777]},{"content":"public void writeCustomStatlineItem(str text)","pos":[221929,221974]},{"content":"Writes a line of text to the status bar.","pos":[222136,222176]},{"content":"public void reloadRunningMode()","pos":[222324,222355]},{"content":"public void setWindowOrder(int window, <ph id=\"ph1\">\\[</ph>int afterWindow<ph id=\"ph2\">\\]</ph>)","pos":[222719,222778],"source":"public void setWindowOrder(int window, \\[int afterWindow\\])"},{"content":"Sets the order in which windows should be displayed.","pos":[222926,222978]},{"content":"public void shutDown(boolean force)","pos":[223114,223149]},{"content":"Shuts down the client.","pos":[223321,223343]},{"content":"public void xref(str path, xRef x)","pos":[223509,223543]},{"content":"Executes when the cross-reference system is used.","pos":[223716,223765]},{"content":"public void updateCurrentCompany()","pos":[223904,223938]},{"content":"public void redrawAllWindows()","pos":[224299,224329]},{"content":"Redraws all windows.","pos":[224506,224526]},{"content":"public void formNotify(xFormRun form, FormNotify notification, <ph id=\"ph1\">\\[</ph>FormNotifyEventArgs formNotifyEventArgs<ph id=\"ph2\">\\]</ph>)","pos":[224694,224801],"source":"public void formNotify(xFormRun form, FormNotify notification, \\[FormNotifyEventArgs formNotifyEventArgs\\])"},{"content":"Executes based on a particular type of change to a specific form, allowing custom code to run.","pos":[224901,224995]},{"content":"public void mayReloadMenu(boolean value)","pos":[225089,225129]},{"content":"Prevents the UI from refreshing.","pos":[225296,225328]},{"content":"public void startLengthyOperation()","pos":[225484,225519]},{"content":"Sets the mouse cursor to idle.","pos":[225691,225721]},{"content":"public void breakpointNotify(BreakpointNotify notification)","pos":[225879,225938]},{"content":"Implements a notification system when a breakpoint is changed.","pos":[226086,226148]},{"content":"public void initializeInfolog(int window)","pos":[226274,226315]},{"content":"public void startup(str startupCmd)","pos":[226669,226704]},{"content":"Executes when the client starts.","pos":[226876,226908]},{"content":"public void endImport(int id, int elements)","pos":[227064,227107]},{"content":"Completes an import process.","pos":[227271,227299]},{"content":"public void yield()","pos":[227459,227478]},{"content":"public void viewAlertInbox(<ph id=\"ph1\">\\[</ph>int selectedTab<ph id=\"ph2\">\\]</ph>)","pos":[227854,227901],"source":"public void viewAlertInbox(\\[int selectedTab\\])"},{"content":"Launches the View alerts form.","pos":[228061,228091]},{"content":"public void reportSendMailServer(PrintJobSettings settings)","pos":[228249,228308]},{"content":"public void endLengthyOperation(<ph id=\"ph1\">\\[</ph>boolean endAll<ph id=\"ph2\">\\]</ph>)","pos":[228644,228695],"source":"public void endLengthyOperation(\\[boolean endAll\\])"},{"content":"Sets the mouse cursor back to normal after a call to startLengthyOperation.","pos":[228851,228926]},{"content":"public void setNumUnreadAlerts(<ph id=\"ph1\">\\[</ph>int n<ph id=\"ph2\">\\]</ph>)","pos":[229039,229080],"source":"public void setNumUnreadAlerts(\\[int n\\])"},{"content":"Refreshes the status bar text when the number of unread Alert e-mails changes.","pos":[229246,229324]},{"content":"public void truncate(str prefix)","pos":[229434,229466]},{"content":"Removes the items with the specified prefix from the Infolog.","pos":[229641,229702]},{"content":"public void formNoteButton(boolean enable, boolean value)","pos":[229829,229886]},{"content":"Controls the Document handling button on the toolbar.","pos":[230036,230089]},{"content":"public void viewCreateRuleDialog(xFormRun caller)","pos":[230224,230273]},{"content":"Launches the Create alert rule form.","pos":[230431,230467]},{"content":"public void view(<ph id=\"ph1\">\\[</ph>container container<ph id=\"ph2\">\\]</ph>)","pos":[230619,230660],"source":"public void view(\\[container container\\])"},{"content":"public void clear(<ph id=\"ph1\">\\[</ph>int linesLeft<ph id=\"ph2\">\\]</ph>)","pos":[231014,231050],"source":"public void clear(\\[int linesLeft\\])"},{"content":"Deletes lines from the Infolog buffer.","pos":[231221,231259]},{"content":"public void workspaceWindowCreated(int hWnd)","pos":[231409,231453]},{"content":"Executes when a new workspace is created.","pos":[231616,231657]},{"content":"::public static void setCurrentModelId(int currentModelId)","pos":[231804,231862]},{"content":"public void activateMenubarTask(int command)","pos":[232199,232243]},{"content":"public void finalize()","pos":[232594,232616]},{"content":"public void insertXReferences()","pos":[232989,233020]},{"content":"public void activateButton(int command)","pos":[233384,233423]},{"content":"public void activateWindow(int window)","pos":[233779,233817]},{"content":"Sets the focus on a form or Window.","pos":[233986,234021]},{"content":"public void reportSendMail(PrintJobSettings settings)","pos":[234174,234227]},{"content":"Generates the settings for sending a report by email.","pos":[234381,234434]},{"pos":[234572,234592],"content":"Method removeMessage","linkify":"Method removeMessage","nodes":[{"content":"Method removeMessage","pos":[0,20]}]},{"pos":[234646,234656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"messageId","pos":[234658,234667]},{"pos":[234676,234688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234694,234714],"content":"Method insertMessage","linkify":"Method insertMessage","nodes":[{"content":"Method insertMessage","pos":[0,20]}]},{"pos":[234788,234798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[234800,234804]},{"content":"message","pos":[234818,234825]},{"pos":[234834,234846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234852,234862],"content":"Method add","linkify":"Method add","nodes":[{"content":"Method add","pos":[0,10]}]},{"content":"Adds a string to the Infolog buffer.","pos":[234864,234900]},{"pos":[235022,235032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"exceptionType","pos":[235034,235047]},{"content":"Optional parameter, that enables you to turn off the generation of prefix information that is used to provide context to Infolog messages.","pos":[235050,235188]},{"content":"string","pos":[235200,235206]},{"content":"Optional parameter, that enables you to turn off the generation of prefix information that is used to provide context to Infolog messages.","pos":[235209,235347]},{"content":"helpURL","pos":[235359,235366]},{"content":"Optional parameter, that enables you to turn off the generation of prefix information that is used to provide context to Infolog messages.","pos":[235369,235507]},{"content":"obj","pos":[235519,235522]},{"content":"Optional parameter, that enables you to turn off the generation of prefix information that is used to provide context to Infolog messages.","pos":[235525,235663]},{"content":"buildprefix","pos":[235675,235686]},{"content":"Optional parameter, that enables you to turn off the generation of prefix information that is used to provide context to Infolog messages.","pos":[235689,235827]},{"pos":[235834,235846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Exception system enumeration value.","pos":[235848,235886]},{"content":"For more information, see Exception Handling with try and catch Keywords.","pos":[235887,235960]},{"pos":[235967,235974],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An example value for the helpURL parameter is 'KernDoc:<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">\\\\</ph><ph id=\"ph4\">\\\\</ph>Functions<ph id=\"ph5\">\\\\</ph><ph id=\"ph6\">\\\\</ph>substr'.","pos":[235976,236060],"source":"An example value for the helpURL parameter is 'KernDoc:\\\\\\\\\\\\\\\\Functions\\\\\\\\substr'."},{"content":"This method should not be used directly.","pos":[236061,236101]},{"content":"Instead, use the infolog.info, infolog.warning, infolog.error, or infolog.checkFailed method instead.","pos":[236102,236203]},{"content":"For more information about the exceptionType parameter, see Exception Handling with try and catch Keywords.","pos":[236204,236311]},{"pos":[236317,236336],"content":"Method addException","linkify":"Method addException","nodes":[{"content":"Method addException","pos":[0,19]}]},{"pos":[236406,236416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[236418,236424]},{"content":"stackTrace","pos":[236438,236448]},{"pos":[236457,236469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236475,236492],"content":"Method breakpoint","linkify":"Method breakpoint","nodes":[{"content":"Method breakpoint","pos":[0,17]}]},{"content":"Gets or sets information about breakpoints.","pos":[236494,236537]},{"pos":[236601,236611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"breakpoint","pos":[236613,236623]},{"content":"A container that holds information about the current breakpoints.","pos":[236626,236691]},{"pos":[236698,236710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container holding information about the current breakpoints.","pos":[236712,236774]},{"pos":[236781,236788],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The container that holds information about breakpoints is of the format:","pos":[236790,236862]},{"content":"Item 1: Version number","pos":[236868,236890]},{"content":"Items 2 - 4, 5-7, …","pos":[236895,236914]},{"content":"n - n+2: Information about each breakpoint, consisting of:","pos":[236915,236973]},{"content":"the AOT path","pos":[236982,236994]},{"content":"the line number on which the breakpoint is set","pos":[237003,237049]},{"content":"whether the breakpoint is enabled or disabled","pos":[237058,237103]},{"content":"In the application, this method is used by the Breakpoints form.","pos":[237105,237169]},{"content":"When the form is opened it calls the getBreakpoints method on the form.","pos":[237170,237241]},{"content":"This calls the xInfo.breakpoint method, and uses a container with the breakpoint information as a parameter.","pos":[237242,237350]},{"content":"When a breakpoint is disabled, enabled, or deleted from the form, the setBreakpoints method is called.","pos":[237351,237453]},{"content":"This updates the information about the breakpoints and returns this as a container using the xInfo.breakpoint method without using the breakpoint parameter.","pos":[237454,237610]},{"content":"The container is used to update the breakpoint information in the Code Editor window.","pos":[237611,237696]},{"pos":[237702,237734],"content":"Method canShowCreateRuleMenuItem","linkify":"Method canShowCreateRuleMenuItem","nodes":[{"content":"Method canShowCreateRuleMenuItem","pos":[0,32]}]},{"content":"Determines whether the menu item for the Create alert rule form should be displayed for a form.","pos":[237736,237831]},{"pos":[237901,237911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"caller","pos":[237913,237919]},{"content":"The current form: the form from which the Create alert rule menu item can be displayed.","pos":[237922,238009]},{"pos":[238016,238028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the current form supports the creation of alerts; otherwise false.","pos":[238030,238104]},{"pos":[238110,238128],"content":"Method canShutdown","linkify":"Method canShutdown","nodes":[{"content":"Method canShutdown","pos":[0,18]}]},{"content":"Tests whether the system can be shut down.","pos":[238130,238172]},{"content":"Do not use this method.","pos":[238173,238196]},{"content":"Use the version that is overridden on the Info class instead.","pos":[238197,238258]},{"pos":[238313,238323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"silent","pos":[238325,238331]},{"content":"A Boolean that determines whether users are asked if they want to exit the system.","pos":[238334,238416]},{"pos":[238423,238435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true of the system can be shut down; otherwise false.","pos":[238437,238490]},{"pos":[238496,238520],"content":"Method canViewAlertInbox","linkify":"Method canViewAlertInbox","nodes":[{"content":"Method canViewAlertInbox","pos":[0,24]}]},{"content":"Determines whether the current user has permission to view the View alerts form.","pos":[238522,238602]},{"pos":[238649,238661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the user has permission to view the form; otherwise, false.","pos":[238663,238730]},{"pos":[238737,238744],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method before calling xInfo.viewAlertInbox.","pos":[238746,238799]},{"pos":[238805,238826],"content":"Method compilerOutput","linkify":"Method compilerOutput","nodes":[{"content":"Method compilerOutput","pos":[0,21]}]},{"content":"Gets or sets the compiler output object.","pos":[238828,238868]},{"content":"The compiler output object is the Compiler output window by default.","pos":[238869,238937]},{"pos":[239009,239019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"compilerOut","pos":[239021,239032]},{"content":"A compiler output object; optional.","pos":[239035,239070]},{"content":"Optional parameter.","pos":[239071,239090]},{"pos":[239097,239109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An xCompilerOutput object.","pos":[239111,239137]},{"pos":[239144,239151],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default value of the compilerOut parameter is the Compiler output window, but it can also be the Message window.","pos":[239153,239269]},{"pos":[239275,239286],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies lines from the Infolog buffer.","pos":[239288,239325]},{"pos":[239377,239387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"from","pos":[239389,239393]},{"content":"The last line to copy.","pos":[239396,239418]},{"content":"to","pos":[239430,239432]},{"content":"The last line to copy.","pos":[239435,239457]},{"pos":[239464,239476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Container that contains the Infolog lines between from and to.","pos":[239478,239540]},{"pos":[239547,239555],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the copy method to copy the content of the Infolog into a log.","pos":[239557,239646]},{"pos":[240094,240133],"content":"Method createDevelopmentWorkspaceWindow","linkify":"Method createDevelopmentWorkspaceWindow","nodes":[{"content":"Method createDevelopmentWorkspaceWindow","pos":[0,39]}]},{"pos":[240191,240203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[240209,240237],"content":"Method createWorkspaceWindow","linkify":"Method createWorkspaceWindow","nodes":[{"content":"Method createWorkspaceWindow","pos":[0,28]}]},{"content":"Opens a new workspace window.","pos":[240239,240268]},{"content":"For example, this enables you to open different sets of application objects in different windows, or to work with two different sets of company accounts.","pos":[240269,240422]},{"pos":[240469,240481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a handle to the new window.","pos":[240483,240518]},{"pos":[240524,240545],"content":"Method currentAOLayer","linkify":"Method currentAOLayer","nodes":[{"content":"Method currentAOLayer","pos":[0,21]}]},{"content":"Retrieves the current layer you are running in such as SYS, or USR.","pos":[240547,240614]},{"pos":[240665,240677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A UtilEntryLevel system enumeration value that indicates the current layer you are working in.","pos":[240679,240773]},{"pos":[240780,240787],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For more information, see Layers.","pos":[240789,240822]},{"pos":[240828,240838],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts lines from the Infolog buffer.","pos":[240840,240875]},{"pos":[240926,240936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"from","pos":[240938,240942]},{"content":"The last line to cut.","pos":[240945,240966]},{"content":"to","pos":[240978,240980]},{"content":"The last line to cut.","pos":[240983,241004]},{"pos":[241011,241023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that contains the Infolog lines between the lines specified by the from and to parameters.","pos":[241025,241127]},{"pos":[241134,241142],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example cuts the lines in the Infolog from the line specified by the fromLine value, up to the last line.","pos":[241144,241263]},{"pos":[241383,241411],"content":"Method documentationLanguage","linkify":"Method documentationLanguage","nodes":[{"content":"Method documentationLanguage","pos":[0,28]}]},{"content":"Gets or sets the language that is used for the Finance and Operations documentation.","pos":[241413,241497]},{"pos":[241562,241572],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"languageCode","pos":[241574,241586]},{"content":"The ID of the language you want to set; optional.","pos":[241589,241638]},{"pos":[241645,241657],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the language that is currently used for the documentation.","pos":[241659,241727]},{"pos":[241734,241741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the xInfo.language Method to set the language for the GUI.","pos":[241743,241805]},{"content":"To set the documentation language for a particular session, use the xSession.documentationLanguage Method.","pos":[241806,241912]},{"content":"An example value for the languageCode parameter is \"en-us\", which will set the language to US English.","pos":[241913,242015]},{"pos":[242021,242034],"content":"Method export","linkify":"Method export","nodes":[{"content":"Method export","pos":[0,13]}]},{"pos":[242072,242084],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[242090,242105],"content":"Method findNode","linkify":"Method findNode","nodes":[{"content":"Method findNode","pos":[0,15]}]},{"content":"Retrieves the specified a tree node.","pos":[242107,242143]},{"pos":[242194,242204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nodePath","pos":[242206,242214]},{"content":"A string that contains the path to the node.","pos":[242217,242261]},{"pos":[242268,242280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the tree node that is specified by the nodePath parameter.","pos":[242282,242348]},{"pos":[242355,242362],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is obsolete.","pos":[242364,242388]},{"content":"Use the TreeNode::findNode Method instead.","pos":[242389,242431]},{"pos":[242437,242454],"content":"Method getDocNode","linkify":"Method getDocNode","nodes":[{"content":"Method getDocNode","pos":[0,17]}]},{"content":"Retrieves the specified documentation nodes from the AOT.","pos":[242456,242513]},{"pos":[242718,242728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"helpType","pos":[242730,242738]},{"content":"A Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.","pos":[242741,242839]},{"content":"UtilType","pos":[242851,242859]},{"content":"A Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.","pos":[242862,242960]},{"content":"Name","pos":[242972,242976]},{"content":"A Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.","pos":[242979,243077]},{"content":"ParentId","pos":[243089,243097]},{"content":"A Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.","pos":[243100,243198]},{"content":"Type","pos":[243210,243214]},{"content":"A Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.","pos":[243217,243315]},{"content":"UtilLevel","pos":[243327,243336]},{"content":"A Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.","pos":[243339,243437]},{"content":"ForceLevel","pos":[243449,243459]},{"content":"A Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.","pos":[243462,243560]},{"content":"Mode","pos":[243572,243576]},{"content":"A Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.","pos":[243579,243677]},{"content":"OldUtil","pos":[243689,243696]},{"content":"A Boolean value that indicates whether to retrieve the node from the old AOT in the oldAOT folder.","pos":[243699,243797]},{"pos":[243804,243816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A documentation node from the AOT.","pos":[243818,243852]},{"pos":[243859,243866],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible values for the helpType parameter are values of the UtilFileType system enumeration:","pos":[243868,243965]},{"content":"KernelHelp: the System Documentation node","pos":[243971,244012]},{"content":"ApplicationHelp: the Application Documentation node","pos":[244017,244068]},{"content":"ApplicationCodeDocumentation: the Application Developer Documentation node.","pos":[244073,244148]},{"content":"An example value of the utilType parameter is the Functions node within the System Documentation node.","pos":[244150,244252]},{"content":"The default value of the ForceLevel parameter is false.","pos":[244253,244308]},{"content":"If it is set to false, and there is no content in the layer specified, the node will be taken from the next layer below this that does have content.","pos":[244309,244457]},{"content":"If it is set to true, and there is no content in the layer, the method will return nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[244458,244606]},{"pos":[244612,244634],"content":"Method getImportedNode","linkify":"Method getImportedNode","nodes":[{"content":"Method getImportedNode","pos":[0,22]}]},{"content":"Creates an instance of a tree node from an XPO file but does not import it into the AOT.","pos":[244636,244724]},{"content":"For example, this allows you to compare it with another version of the same tree node.","pos":[244725,244811]},{"pos":[244945,244955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"id","pos":[244957,244959]},{"content":"utilfiletype","pos":[244973,244985]},{"content":"utiltype","pos":[244999,245007]},{"content":"name","pos":[245021,245025]},{"content":"fileposition","pos":[245039,245051]},{"content":"Flag","pos":[245065,245069]},{"pos":[245078,245090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A tree node.","pos":[245092,245104]},{"pos":[245111,245118],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible values for the utilfiletype parameter are those that are available in the UtilFileType Enumeration.","pos":[245120,245232]},{"content":"The possible values for the utiltype parameter are those that are available in the UtilElementType Enumeration.","pos":[245233,245344]},{"content":"For a list of the possible values for the Flag parameter, see the AOTExport macro.","pos":[245345,245427]},{"content":"The values are listed under the System import flags comment.","pos":[245428,245488]},{"pos":[245495,245503],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the getImportedNode method to create a virtual tree node.","pos":[245505,245589]},{"pos":[247542,247556],"content":"Method getNode","linkify":"Method getNode","nodes":[{"content":"Method getNode","pos":[0,14]}]},{"content":"Retrieves a tree node that corresponds to a node in the AOT.","pos":[247558,247618]},{"pos":[247809,247819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"UtilType","pos":[247821,247829]},{"content":"A Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.","pos":[247832,247927]},{"content":"Name","pos":[247939,247943]},{"content":"A Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.","pos":[247946,248041]},{"content":"ParentId","pos":[248053,248061]},{"content":"A Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.","pos":[248064,248159]},{"content":"Type","pos":[248171,248175]},{"content":"A Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.","pos":[248178,248273]},{"content":"Utillevel","pos":[248285,248294]},{"content":"A Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.","pos":[248297,248392]},{"content":"Forcelevel","pos":[248404,248414]},{"content":"A Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.","pos":[248417,248512]},{"content":"Mode","pos":[248524,248528]},{"content":"A Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.","pos":[248531,248626]},{"content":"OldUtil","pos":[248638,248645]},{"content":"A Boolean value that indicates whether to take the node from the old AOT in the old AOT folder.","pos":[248648,248743]},{"pos":[248750,248762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tree node that is specified by the UtilType and Name parameters.","pos":[248764,248832]},{"pos":[248839,248846],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The node returned is not linked into the AOT, so you cannot perform operations on the node.","pos":[248848,248939]},{"content":"To perform operations on a node, use the findNode or rootNode method instead.","pos":[248940,249017]},{"content":"The default value for the UtilLevel parameter is the current layer.","pos":[249018,249085]},{"content":"The possible values for the Mode parameter are:","pos":[249086,249133]},{"content":"0x001: Load for run","pos":[249139,249158]},{"content":"0x002: Load for edit","pos":[249163,249183]},{"content":"The default value of the ForceLevel parameter is false.","pos":[249185,249240]},{"content":"If it is set to false, and there is no content in the layer specified, the node will be taken from the next layer below this that does have content.","pos":[249241,249389]},{"content":"If it is set to true, and there is no content in the layer, the method will return nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[249390,249538]},{"pos":[249544,249563],"content":"Method getNodeResid","linkify":"Method getNodeResid","nodes":[{"content":"Method getNodeResid","pos":[0,19]}]},{"content":"Retrieves the resource ID for the icon that is used to display nodes of the specified type.","pos":[249565,249656]},{"pos":[249718,249728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nodeType","pos":[249730,249738]},{"content":"A UtilElementType system enumeration value that indicates the type of node to retrieve.","pos":[249741,249828]},{"pos":[249835,249847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that represents the Resource ID for the node.","pos":[249849,249905]},{"pos":[249911,249929],"content":"Method getTaskInfo","linkify":"Method getTaskInfo","nodes":[{"content":"Method getTaskInfo","pos":[0,18]}]},{"pos":[249983,249993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"taskNumber","pos":[249995,250005]},{"pos":[250014,250026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[250032,250051],"content":"Method getUserSetup","linkify":"Method getUserSetup","nodes":[{"content":"Method getUserSetup","pos":[0,19]}]},{"content":"Retrieves a UserSetup object that is used to set user parameters.","pos":[250053,250118]},{"pos":[250162,250174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A UserSetup object.","pos":[250176,250195]},{"pos":[250202,250209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The UserSetup system class provides an interface for setting user parameters.","pos":[250211,250288]},{"pos":[250294,250317],"content":"Method getWorkspaceList","linkify":"Method getWorkspaceList","nodes":[{"content":"Method getWorkspaceList","pos":[0,23]}]},{"pos":[250365,250377],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[250383,250394],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves a handle to the Finance and OperationsNavigation Pane window.","pos":[250396,250467]},{"pos":[250515,250525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"workspaceNum","pos":[250527,250539]},{"content":"The handle to the workspace from which to get the Navigation Pane handle.","pos":[250542,250615]},{"pos":[250622,250634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that represents the handle to the Finance and OperationsNavigation Pane window.","pos":[250636,250726]},{"pos":[250732,250745],"content":"Method import","linkify":"Method import","nodes":[{"content":"Method import","pos":[0,13]}]},{"pos":[250839,250849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"infologContainer","pos":[250851,250867]},{"content":"clearExistingInfolog","pos":[250881,250901]},{"pos":[250910,250922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[250928,250948],"content":"Method importElement","linkify":"Method importElement","nodes":[{"content":"Method importElement","pos":[0,20]}]},{"content":"Specifies the object to be imported.","pos":[250950,250986]},{"pos":[251113,251123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"id","pos":[251125,251127]},{"content":"utilfiletype","pos":[251141,251153]},{"content":"utiltype","pos":[251167,251175]},{"content":"name","pos":[251189,251193]},{"content":"fileposition","pos":[251207,251219]},{"content":"Flag","pos":[251233,251237]},{"pos":[251246,251258],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"This method is obsolete.","pos":[251260,251284]},{"content":"Use the SysImportElements class instead.","pos":[251285,251325]},{"pos":[251331,251350],"content":"Method importString","linkify":"Method importString","nodes":[{"content":"Method importString","pos":[0,19]}]},{"content":"Imports an object from a file.","pos":[251352,251382]},{"pos":[251462,251472],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"source","pos":[251474,251480]},{"content":"The name of the object.","pos":[251483,251506]},{"content":"kind","pos":[251518,251522]},{"content":"The name of the object.","pos":[251525,251548]},{"content":"name","pos":[251560,251564]},{"content":"The name of the object.","pos":[251567,251590]},{"pos":[251597,251609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[251615,251630],"content":"Method instance","linkify":"Method instance","nodes":[{"content":"Method instance","pos":[0,15]}]},{"content":"Retrieves a handle to the current instance of the application.","pos":[251632,251694]},{"pos":[251728,251740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle of the current instance of the application.","pos":[251742,251796]},{"pos":[251802,251824],"content":"Method isoCurrencyCode","linkify":"Method isoCurrencyCode","nodes":[{"content":"Method isoCurrencyCode","pos":[0,22]}]},{"content":"Gets or sets the currency code.","pos":[251826,251857]},{"pos":[251908,251918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"code","pos":[251920,251924]},{"content":"A string that contains the ISO currency code to set.","pos":[251927,251979]},{"pos":[251986,251998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the currency code for the current application.","pos":[252000,252069]},{"pos":[252075,252091],"content":"Method IsVisible","linkify":"Method IsVisible","nodes":[{"content":"Method IsVisible","pos":[0,16]}]},{"content":"Determines whether the client window is not minimized.","pos":[252093,252147]},{"pos":[252186,252198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"false if the client window is minimized; otherwise, true.","pos":[252200,252257]},{"pos":[252263,252278],"content":"Method language","linkify":"Method language","nodes":[{"content":"Method language","pos":[0,15]}]},{"content":"Gets or sets the language for the GUI.","pos":[252280,252318]},{"pos":[252370,252380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"languageCode","pos":[252382,252394]},{"content":"A string that contains the language code to set.","pos":[252397,252445]},{"pos":[252452,252464],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the current language code.","pos":[252466,252515]},{"pos":[252522,252529],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To set the language for the documentation, use the xInfo.documentationLanguage Method.","pos":[252531,252617]},{"content":"To set the GUI language for a particular session, use the xSession.interfaceLanguage Method.","pos":[252618,252710]},{"pos":[252717,252725],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints the code for the language that is currently set.","pos":[252727,252804]},{"content":"For example, if the interface was in US English, it would print \"en-us\".","pos":[252805,252877]},{"pos":[252948,252960],"content":"Method level","linkify":"Method level","nodes":[{"content":"Method level","pos":[0,12]}]},{"content":"Retrieves the exception level of a line in the Infolog buffer.","pos":[252962,253024]},{"pos":[253069,253079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"line","pos":[253081,253085]},{"content":"The line in the Infolog for which to retrieve the exception level.","pos":[253088,253154]},{"pos":[253161,253173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Exception system enumeration value.","pos":[253175,253212]},{"pos":[253219,253226],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For more information, see Exception Handling with try and catch Keywords.","pos":[253228,253301]},{"pos":[253307,253318],"content":"Method line","linkify":"Method line","nodes":[{"content":"Method line","pos":[0,11]}]},{"content":"Retrieves the number of lines in the Infolog buffer.","pos":[253320,253372]},{"pos":[253402,253414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that represents the number of lines in the Infolog buffer.","pos":[253416,253485]},{"pos":[253492,253499],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you are running code on the server, use the xGlobal::infologLine method instead.","pos":[253501,253584]},{"content":"It eliminates calls between the server and client.","pos":[253585,253635]},{"content":"To get the number of exceptions of a specific type in the Infolog, use the xInfo.num Method.","pos":[253636,253728]},{"pos":[253734,253751],"content":"Method messageWin","linkify":"Method messageWin","nodes":[{"content":"Method messageWin","pos":[0,17]}]},{"content":"Enables you to send output from the Infolog to the Message window.","pos":[253753,253819]},{"pos":[253862,253874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A MessageWin object.","pos":[253876,253896]},{"pos":[253903,253910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You may want to send output to the Message window if you have a lengthy process.","pos":[253912,253992]},{"content":"If you send output to the Infolog, nothing will be displayed until the process is completed.","pos":[253993,254085]},{"content":"If you send output to the Message window, content is displayed as the operation proceeds.","pos":[254086,254175]},{"pos":[254181,254210],"content":"Method nationalCurrencyFactor","linkify":"Method nationalCurrencyFactor","nodes":[{"content":"Method nationalCurrencyFactor","pos":[0,29]}]},{"pos":[254272,254282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"factor","pos":[254284,254290]},{"pos":[254299,254311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254317,254347],"content":"Method nationalCurrencyPostfix","linkify":"Method nationalCurrencyPostfix","nodes":[{"content":"Method nationalCurrencyPostfix","pos":[0,30]}]},{"pos":[254408,254418],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[254420,254426]},{"pos":[254435,254447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254453,254482],"content":"Method nationalCurrencyPrefix","linkify":"Method nationalCurrencyPrefix","nodes":[{"content":"Method nationalCurrencyPrefix","pos":[0,29]}]},{"pos":[254542,254552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[254554,254560]},{"pos":[254569,254581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254587,254601],"content":"Method navPane","linkify":"Method navPane","nodes":[{"content":"Method navPane","pos":[0,14]}]},{"content":"Retrieves an xNavPane object, the primary navigation control class.","pos":[254603,254670]},{"pos":[254708,254720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An instance of the xNavPane class.","pos":[254722,254756]},{"pos":[254763,254770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can only have one instance of this class per workspace.","pos":[254772,254831]},{"pos":[254837,254847],"content":"Method num","linkify":"Method num","nodes":[{"content":"Method num","pos":[0,10]}]},{"content":"Retrieves the number of exceptions of the specified type in the Infolog buffer.","pos":[254849,254928]},{"pos":[254982,254992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"exceptionType","pos":[254994,255007]},{"content":"A Exception system enumeration value that indicates the exception type to count; optional.","pos":[255010,255100]},{"pos":[255107,255119],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that represents the number of exceptions of the type specified by the exceptionType parameter, or the total number of lines in the Infolog if no parameter is specified.","pos":[255121,255300]},{"pos":[255307,255314],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For more information, see Exception Handling with try and catch Keywords.","pos":[255316,255389]},{"pos":[255396,255404],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example returns the number of warnings in the Infolog.","pos":[255406,255474]},{"pos":[255558,255577],"content":"Method prevInstance","linkify":"Method prevInstance","nodes":[{"content":"Method prevInstance","pos":[0,19]}]},{"content":"Retrieves a handle to the previous instance of the application.","pos":[255579,255642]},{"pos":[255680,255692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle of the previous instance of the application.","pos":[255694,255749]},{"pos":[255756,255763],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method should not be used.","pos":[255765,255796]},{"pos":[255802,255818],"content":"Method processId","linkify":"Method processId","nodes":[{"content":"Method processId","pos":[0,16]}]},{"content":"Retrieves the ID for the Finance and Operations process.","pos":[255820,255876]},{"pos":[255911,255923],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID for the Finance and Operations process.","pos":[255925,255971]},{"pos":[255977,255999],"content":"Method projectRootNode","linkify":"Method projectRootNode","nodes":[{"content":"Method projectRootNode","pos":[0,22]}]},{"content":"Returns the X++ Projects node.","pos":[256001,256031]},{"pos":[256077,256089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tree node that contains the X++ projects.","pos":[256091,256136]},{"pos":[256143,256151],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints out the names of all the projects in the Shared projects folder.","pos":[256153,256246]},{"pos":[256628,256643],"content":"Method rootNode","linkify":"Method rootNode","nodes":[{"content":"Method rootNode","pos":[0,15]}]},{"content":"Retrieves the root of the application object tree.","pos":[256645,256695]},{"pos":[256734,256746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The root of the application object tree.","pos":[256748,256788]},{"pos":[256795,256803],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints out all the names of the methods in the AddressSelectForm class.","pos":[256805,256898]},{"content":"The rootnode method is used to set the treenode object to the AOT root before selecting a child node.","pos":[256899,257000]},{"pos":[257415,257433],"content":"Method startImport","linkify":"Method startImport","nodes":[{"content":"Method startImport","pos":[0,18]}]},{"content":"Creates an import context.","pos":[257435,257461]},{"pos":[257540,257550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"file","pos":[257552,257556]},{"content":"flag","pos":[257570,257574]},{"content":"labelSubstitutes","pos":[257588,257604]},{"pos":[257613,257625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257632,257639],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is obsolete.","pos":[257641,257665]},{"content":"Use the SysImportElements class instead.","pos":[257666,257706]},{"pos":[257712,257723],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"content":"Retrieves a line of text from the Infolog.","pos":[257725,257767]},{"pos":[257807,257817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"line","pos":[257819,257823]},{"content":"The line in the Infolog with the text to retrieve.","pos":[257826,257876]},{"pos":[257883,257895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the text from the Infolog.","pos":[257897,257946]},{"pos":[257952,257967],"content":"Method userNode","linkify":"Method userNode","nodes":[{"content":"Method userNode","pos":[0,15]}]},{"pos":[258006,258018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[258024,258041],"content":"Method webSession","linkify":"Method webSession","nodes":[{"content":"Method webSession","pos":[0,17]}]},{"pos":[258096,258106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[258108,258113]},{"pos":[258122,258134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[258140,258162],"content":"Method activeXControls","linkify":"Method activeXControls","nodes":[{"content":"Method activeXControls","pos":[0,22]}]},{"content":"Retrieves a list of the ActiveX controls that are in Finance and Operations.","pos":[258164,258240]},{"pos":[258294,258306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A nested container that holds information about each of the ActiveX controls.","pos":[258308,258385]},{"pos":[258392,258399],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned container contains four containers.","pos":[258401,258449]},{"content":"The first inner container contains the names of all the controls.","pos":[258450,258515]},{"content":"The second inner container contains the ID for each control, which is a GUID.","pos":[258516,258593]},{"content":"The third inner container contains the security setting for each control.","pos":[258594,258667]},{"content":"The fourth inner container contains a description of each control.","pos":[258668,258734]},{"pos":[258741,258749],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints a description of each of the ActiveX controls in Finance and Operations.","pos":[258751,258852]},{"pos":[259662,259684],"content":"Method AOTLogDirectory","linkify":"Method AOTLogDirectory","nodes":[{"content":"Method AOTLogDirectory","pos":[0,22]}]},{"content":"Gets the path to the log directory for the current installation.","pos":[259686,259750]},{"pos":[259798,259810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the path to the log directory for the current installation.","pos":[259812,259894]},{"pos":[259901,259908],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you turn on the AOT Log option, information will be stored in the log directory each time you compile.","pos":[259910,260015]},{"content":"To turn on this option:","pos":[260016,260039]},{"content":"Open a developer workspace.","pos":[260045,260072]},{"content":"Select Tools <ph id=\"ph1\">&amp;gt;</ph> Options <ph id=\"ph2\">&amp;gt;</ph> Development <ph id=\"ph3\">&amp;gt;</ph> Compiler.","pos":[260077,260134],"source":"Select Tools &gt; Options &gt; Development &gt; Compiler."},{"content":"Select the AOT log check box.","pos":[260139,260168]},{"pos":[260174,260198],"content":"Method automationObjects","linkify":"Method automationObjects","nodes":[{"content":"Method automationObjects","pos":[0,24]}]},{"content":"Retrieves the list of COM objects that are available in Finance and Operations.","pos":[260200,260279]},{"pos":[260335,260347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A nested container that holds a description of each COM object.","pos":[260349,260412]},{"pos":[260419,260427],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example unpacks the nested container that is returned from automationObjects to get a list of COM objects.","pos":[260429,260549]},{"pos":[261102,261116],"content":"Method buildNo","linkify":"Method buildNo","nodes":[{"content":"Method buildNo","pos":[0,14]}]},{"content":"Retrieves the kernel build number of the current Finance and Operations executable.","pos":[261118,261201]},{"pos":[261241,261253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the kernel build number.","pos":[261255,261302]},{"pos":[261309,261317],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses this method to return the kernel build number as part of a string that contains Finance and Operations version information.","pos":[261319,261469]},{"pos":[261820,261842],"content":"Method compilationDate","linkify":"Method compilationDate","nodes":[{"content":"Method compilationDate","pos":[0,22]}]},{"content":"Retrieves the date on which the current version of Finance and Operations was last compiled.","pos":[261844,261936]},{"pos":[261984,261996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the date on which Finance and Operations was last compiled.","pos":[261998,262080]},{"pos":[262087,262095],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example returns system information, including the date on which the application was last compiled:","pos":[262097,262209]},{"pos":[262508,262530],"content":"Method compilationTime","linkify":"Method compilationTime","nodes":[{"content":"Method compilationTime","pos":[0,22]}]},{"content":"Retrieves the time at which the current version of Finance and Operations was last compiled.","pos":[262532,262624]},{"pos":[262672,262684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the time at which Finance and Operations was last compiled.","pos":[262686,262768]},{"pos":[262774,262794],"content":"Method componentName","linkify":"Method componentName","nodes":[{"content":"Method componentName","pos":[0,20]}]},{"content":"Retrieves the path to the component.","pos":[262796,262832]},{"pos":[262878,262890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the path to the executable.","pos":[262892,262942]},{"pos":[262949,262956],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this method is run on the client, it returns the path to the .exe file for the Finance and Operations client.","pos":[262958,263070]},{"content":"If it is run on the server, it returns the path to the .exe file for the AOS.","pos":[263071,263148]},{"pos":[263154,263174],"content":"Method configuration","linkify":"Method configuration","nodes":[{"content":"Method configuration","pos":[0,20]}]},{"content":"Retrieves the current client configuration.","pos":[263176,263219]},{"pos":[263265,263277],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that represents the current client configuration.","pos":[263279,263337]},{"pos":[263344,263351],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is the configuration that is selected in the Configuration box in the Client Configuration Utility program.","pos":[263353,263465]},{"content":"An example string that could be returned is \"Original (installed configuration)\".","pos":[263466,263547]},{"pos":[263553,263579],"content":"Method currentWorkspaceNum","linkify":"Method currentWorkspaceNum","nodes":[{"content":"Method currentWorkspaceNum","pos":[0,26]}]},{"content":"Retrieves the application window ID of the current workspace.","pos":[263581,263642]},{"pos":[263694,263706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The application window ID of the current workspace.","pos":[263708,263759]},{"pos":[263766,263773],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The createWorkspaceWindow method allows you to open additional workspaces in the application.","pos":[263775,263868]},{"pos":[263874,263890],"content":"Method directory","linkify":"Method directory","nodes":[{"content":"Method directory","pos":[0,16]}]},{"content":"Retrieves the path to the directory where the Finance and Operations client has been installed.","pos":[263892,263987]},{"pos":[264047,264057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[264059,264063]},{"content":"A DirectoryType enumeration value that indicates one of the subfolders of the client installation.","pos":[264066,264164]},{"pos":[264171,264183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the path to the directory that is specified by the DirectoryType parameter.","pos":[264185,264283]},{"pos":[264290,264298],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints the path to the Bin directory for the current client installation.","pos":[264300,264395]},{"pos":[264484,264501],"content":"Method expireDate","linkify":"Method expireDate","nodes":[{"content":"Method expireDate","pos":[0,17]}]},{"content":"Retrieves the date on which the license for the current installation expires.","pos":[264503,264580]},{"pos":[264624,264636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A date that represents the date on which the license expires.","pos":[264638,264699]},{"pos":[264705,264742],"content":"Method getApplicationObjectTreeWindow","linkify":"Method getApplicationObjectTreeWindow","nodes":[{"content":"Method getApplicationObjectTreeWindow","pos":[0,37]}]},{"pos":[264829,264841],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264847,264871],"content":"Method getCurrentModelId","linkify":"Method getCurrentModelId","nodes":[{"content":"Method getCurrentModelId","pos":[0,24]}]},{"pos":[264921,264933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264939,264965],"content":"Method getNumberOfDecimals","linkify":"Method getNumberOfDecimals","nodes":[{"content":"Method getNumberOfDecimals","pos":[0,26]}]},{"content":"Retrieves the number of decimal places in the specified number.","pos":[264967,265030]},{"pos":[265093,265103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[265105,265111]},{"content":"A real number.","pos":[265114,265128]},{"pos":[265135,265147],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of decimal places in the number parameter.","pos":[265149,265202]},{"pos":[265208,265234],"content":"Method getPropertiesWindow","linkify":"Method getPropertiesWindow","nodes":[{"content":"Method getPropertiesWindow","pos":[0,26]}]},{"pos":[265299,265311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[265317,265349],"content":"Method getSystemGeneratedModelId","linkify":"Method getSystemGeneratedModelId","nodes":[{"content":"Method getSystemGeneratedModelId","pos":[0,32]}]},{"pos":[265427,265437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"layer","pos":[265439,265444]},{"pos":[265453,265465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[265471,265489],"content":"Method licenseName","linkify":"Method licenseName","nodes":[{"content":"Method licenseName","pos":[0,18]}]},{"content":"Retrieves the name of the current Finance and Operations license.","pos":[265491,265556]},{"pos":[265600,265612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the name of the license.","pos":[265614,265661]},{"pos":[265668,265675],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The xInfo::expireDate Method returns the date on which the license expires.","pos":[265677,265752]},{"content":"The xInfo::serialNo Method returns the serial number of the license.","pos":[265753,265821]},{"pos":[265827,265845],"content":"Method productName","linkify":"Method productName","nodes":[{"content":"Method productName","pos":[0,18]}]},{"content":"Retrieves the name of the product.","pos":[265847,265881]},{"pos":[265925,265937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the name of the product.","pos":[265939,265986]},{"pos":[265993,266001],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example returns system information, including the name of the product.","pos":[266003,266087]},{"pos":[266386,266414],"content":"Method productRegisteredName","linkify":"Method productRegisteredName","nodes":[{"content":"Method productRegisteredName","pos":[0,28]}]},{"pos":[266468,266480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[266486,266507],"content":"Method releaseVersion","linkify":"Method releaseVersion","nodes":[{"content":"Method releaseVersion","pos":[0,21]}]},{"content":"Retrieves the version number of the current Finance and Operations executable; for example: 3.0, or 4.0.","pos":[266509,266613]},{"pos":[266660,266672],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string containing the Finance and Operations version number.","pos":[266674,266736]},{"pos":[266743,266750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Possible version numbers include 3.0 and 4.0.","pos":[266752,266797]},{"pos":[266804,266812],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses this return the version number as part of a string that contains Finance and Operations version information.","pos":[266814,266949]},{"pos":[267300,267318],"content":"Method releaseYear","linkify":"Method releaseYear","nodes":[{"content":"Method releaseYear","pos":[0,18]}]},{"pos":[267362,267374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[267380,267395],"content":"Method serialNo","linkify":"Method serialNo","nodes":[{"content":"Method serialNo","pos":[0,15]}]},{"content":"Retrieves the serial number of the current Finance and Operations license.","pos":[267397,267471]},{"pos":[267512,267524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the serial number of the Finance and Operations license.","pos":[267526,267605]},{"pos":[267611,267621],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new xInfo object.","pos":[267623,267654]},{"pos":[267684,267691],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Note: Do not use this method.","pos":[267693,267722]},{"content":"You should use the global instance of the xInfo class, infolog, instead.","pos":[267723,267795]},{"content":"For more information, see the xInfo class.","pos":[267796,267838]},{"pos":[267844,267875],"content":"Method workspaceWindowDestroyed","linkify":"Method workspaceWindowDestroyed","nodes":[{"content":"Method workspaceWindowDestroyed","pos":[0,31]}]},{"content":"Executes when a workspace is closed.","pos":[267877,267913]},{"pos":[267972,267982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"hWnd","pos":[267984,267988]},{"content":"The handle of the workspace.","pos":[267991,268019]},{"pos":[268026,268033],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a new workspace is closed.","pos":[268035,268088]},{"content":"It allows you to perform an action when this occurs.","pos":[268089,268141]},{"pos":[268147,268177],"content":"Method writeCustomStatlineItem","linkify":"Method writeCustomStatlineItem","nodes":[{"content":"Method writeCustomStatlineItem","pos":[0,30]}]},{"content":"Writes a line of text to the status bar.","pos":[268179,268219]},{"pos":[268277,268287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[268289,268293]},{"content":"The line of text to put on the status bar.","pos":[268296,268338]},{"pos":[268344,268368],"content":"Method reloadRunningMode","linkify":"Method reloadRunningMode","nodes":[{"content":"Method reloadRunningMode","pos":[0,24]}]},{"pos":[268411,268432],"content":"Method setWindowOrder","linkify":"Method setWindowOrder","nodes":[{"content":"Method setWindowOrder","pos":[0,21]}]},{"content":"Sets the order in which windows should be displayed.","pos":[268434,268486]},{"pos":[268556,268566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"window","pos":[268568,268574]},{"content":"The handle to the window to place after the window specified by the window parameter; optional.","pos":[268577,268672]},{"content":"afterWindow","pos":[268684,268695]},{"content":"The handle to the window to place after the window specified by the window parameter; optional.","pos":[268698,268793]},{"pos":[268800,268808],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example sets focus on a window and brings it to the front.","pos":[268810,268882]},{"pos":[269021,269036],"content":"Method shutDown","linkify":"Method shutDown","nodes":[{"content":"Method shutDown","pos":[0,15]}]},{"content":"Shuts down the client.","pos":[269038,269060]},{"pos":[269108,269118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"force","pos":[269120,269125]},{"content":"A Boolean value that indicates whether the user is given the option to prevent the shutdown.","pos":[269128,269220]},{"pos":[269226,269237],"content":"Method xref","linkify":"Method xref","nodes":[{"content":"Method xref","pos":[0,11]}]},{"content":"Executes when the cross-reference system is used.","pos":[269239,269288]},{"pos":[269335,269345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[269347,269351]},{"content":"x","pos":[269365,269366]},{"pos":[269375,269382],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Do not use this method.","pos":[269384,269407]},{"pos":[269413,269440],"content":"Method updateCurrentCompany","linkify":"Method updateCurrentCompany","nodes":[{"content":"Method updateCurrentCompany","pos":[0,27]}]},{"pos":[269486,269509],"content":"Method redrawAllWindows","linkify":"Method redrawAllWindows","nodes":[{"content":"Method redrawAllWindows","pos":[0,23]}]},{"content":"Redraws all windows.","pos":[269511,269531]},{"pos":[269574,269581],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be used to update the display during a long process.","pos":[269583,269651]},{"pos":[269657,269674],"content":"Method formNotify","linkify":"Method formNotify","nodes":[{"content":"Method formNotify","pos":[0,17]}]},{"content":"Executes based on a particular type of change to a specific form, allowing custom code to run.","pos":[269676,269770]},{"pos":[269888,269898],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[269900,269904]},{"content":"notification","pos":[269918,269930]},{"content":"formNotifyEventArgs","pos":[269944,269963]},{"pos":[269972,269979],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Possible values for the notification parameter are:","pos":[269981,270032]},{"content":"Activate","pos":[270038,270046]},{"content":"DeActivate","pos":[270051,270061]},{"content":"Open","pos":[270066,270070]},{"content":"Close","pos":[270075,270080]},{"content":"RecordChange","pos":[270085,270097]},{"content":"NoteClicked","pos":[270102,270113]},{"content":"For an example of the usage of this method, see the formNotify method of the Info class, where this method has been overridden.","pos":[270115,270242]},{"pos":[270248,270268],"content":"Method mayReloadMenu","linkify":"Method mayReloadMenu","nodes":[{"content":"Method mayReloadMenu","pos":[0,20]}]},{"content":"Prevents the UI from refreshing.","pos":[270270,270302]},{"pos":[270355,270365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[270367,270372]},{"content":"A Boolean value that indicates whether to prevent the UI from refreshing.","pos":[270375,270448]},{"pos":[270455,270462],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the value to false to prevent the UI from refreshing when a process is executing, and then set it to true after the process has finished.","pos":[270464,270605]},{"content":"The mayReloadMenu method can be useful to prevent the UI from flickering, for example when many nodes in the AOT are being read.","pos":[270606,270734]},{"pos":[270740,270768],"content":"Method startLengthyOperation","linkify":"Method startLengthyOperation","nodes":[{"content":"Method startLengthyOperation","pos":[0,28]}]},{"content":"Sets the mouse cursor to idle.","pos":[270770,270800]},{"pos":[270848,270855],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use at the start of a lengthy operation to indicate that a process is in progress.","pos":[270857,270939]},{"content":"When the operation has finished, the system automatically calls the endLengthyOperation method.","pos":[270940,271035]},{"pos":[271041,271064],"content":"Method breakpointNotify","linkify":"Method breakpointNotify","nodes":[{"content":"Method breakpointNotify","pos":[0,23]}]},{"content":"Implements a notification system when a breakpoint is changed.","pos":[271066,271128]},{"pos":[271200,271210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"notification","pos":[271212,271224]},{"content":"A BreakpointNotify system enumeration value that specifies the type of change that has occurred to the breakpoints.","pos":[271227,271342]},{"pos":[271349,271356],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In the application, this method is used to update the Breakpoints form when a change is made to a breakpoint in the Code Editor window.","pos":[271358,271493]},{"content":"The following values of the BreakpointNotify enumeration type are valid for the notification parameter:","pos":[271494,271597]},{"content":"BreakpointForm: Notifies the client that the breakpoint list should be reloaded.","pos":[271603,271683]},{"content":"BreakpointChange: Notifies the client and server that the status of a breakpoint has changed (enabled, disabled, or deleted).","pos":[271688,271813]},{"pos":[271819,271843],"content":"Method initializeInfolog","linkify":"Method initializeInfolog","nodes":[{"content":"Method initializeInfolog","pos":[0,24]}]},{"pos":[271897,271907],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"window","pos":[271909,271915]},{"pos":[271923,271937],"content":"Method startup","linkify":"Method startup","nodes":[{"content":"Method startup","pos":[0,14]}]},{"content":"Executes when the client starts.","pos":[271939,271971]},{"pos":[272019,272029],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"startupCmd","pos":[272031,272041]},{"pos":[272050,272057],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Do not use this method.","pos":[272059,272082]},{"content":"Use one following methods instead.","pos":[272083,272117]},{"content":"Use the Info.startupPost Method to pass startup commands to the client.","pos":[272118,272189]},{"content":"Use the Application.startupPost Method to pass startup commands to the server.","pos":[272190,272268]},{"content":"Do not use the Application.startup or Info.startup methods.","pos":[272269,272328]},{"content":"This might affect code in a new version of Finance and Operations, which could prevent the client or server from starting.","pos":[272329,272451]},{"pos":[272457,272473],"content":"Method endImport","linkify":"Method endImport","nodes":[{"content":"Method endImport","pos":[0,16]}]},{"content":"Completes an import process.","pos":[272475,272503]},{"pos":[272559,272569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"id","pos":[272571,272573]},{"content":"elements","pos":[272587,272595]},{"pos":[272604,272611],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is obsolete.","pos":[272613,272637]},{"content":"Use the SysImportElements class instead.","pos":[272638,272678]},{"pos":[272684,272696],"content":"Method yield","linkify":"Method yield","nodes":[{"content":"Method yield","pos":[0,12]}]},{"pos":[272727,272748],"content":"Method viewAlertInbox","linkify":"Method viewAlertInbox","nodes":[{"content":"Method viewAlertInbox","pos":[0,21]}]},{"content":"Launches the View alerts form.","pos":[272750,272780]},{"pos":[272838,272848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"selectedTab","pos":[272850,272861]},{"content":"Determines which tab the View alerts form opens on; optional.","pos":[272864,272925]},{"pos":[272932,272939],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default value for the selectedTab parameter is Overview, the first tab.","pos":[272941,273016]},{"content":"Call the xInfo.canViewAlertInbox Method to check whether the user has permission to view this form.","pos":[273017,273116]},{"pos":[273122,273149],"content":"Method reportSendMailServer","linkify":"Method reportSendMailServer","nodes":[{"content":"Method reportSendMailServer","pos":[0,27]}]},{"pos":[273221,273231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"settings","pos":[273233,273241]},{"pos":[273249,273275],"content":"Method endLengthyOperation","linkify":"Method endLengthyOperation","nodes":[{"content":"Method endLengthyOperation","pos":[0,26]}]},{"content":"Sets the mouse cursor back to normal after a call to startLengthyOperation.","pos":[273277,273352]},{"pos":[273414,273424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"endAll","pos":[273426,273432]},{"content":"Reserved.","pos":[273435,273444]},{"pos":[273451,273458],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It is best practice not to call this method.","pos":[273460,273504]},{"content":"It will be called automatically by the system when the operation has ended.","pos":[273505,273580]},{"content":"If you call this method explicitly and there are other processes, or looping code, that use the method, it could lead to the mouse pointer flickering.","pos":[273581,273731]},{"pos":[273737,273762],"content":"Method setNumUnreadAlerts","linkify":"Method setNumUnreadAlerts","nodes":[{"content":"Method setNumUnreadAlerts","pos":[0,25]}]},{"content":"Refreshes the status bar text when the number of unread Alert e-mails changes.","pos":[273764,273842]},{"pos":[273894,273904],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Allows you to set the number of unread e-mails to a specific number.","pos":[273910,273978]},{"pos":[273984,273999],"content":"Method truncate","linkify":"Method truncate","nodes":[{"content":"Method truncate","pos":[0,15]}]},{"content":"Removes the items with the specified prefix from the Infolog.","pos":[274001,274062]},{"pos":[274107,274117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"prefix","pos":[274119,274125]},{"content":"The prefix for the items that you want to remove from the Infolog.","pos":[274128,274194]},{"pos":[274200,274221],"content":"Method formNoteButton","linkify":"Method formNoteButton","nodes":[{"content":"Method formNoteButton","pos":[0,21]}]},{"content":"Controls the Document handling button on the toolbar.","pos":[274223,274276]},{"pos":[274346,274356],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enable","pos":[274358,274364]},{"content":"A Boolean data type that indicates the appearance of the icon.","pos":[274367,274429]},{"content":"value","pos":[274441,274446]},{"content":"A Boolean data type that indicates the appearance of the icon.","pos":[274449,274511]},{"pos":[274518,274526],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to disable the Document handling button.","pos":[274528,274600]},{"pos":[274709,274736],"content":"Method viewCreateRuleDialog","linkify":"Method viewCreateRuleDialog","nodes":[{"content":"Method viewCreateRuleDialog","pos":[0,27]}]},{"content":"Launches the Create alert rule form.","pos":[274738,274774]},{"pos":[274836,274846],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"caller","pos":[274848,274854]},{"content":"The current form.","pos":[274857,274874]},{"pos":[274881,274888],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Create alert rule form will be launched from the current form, as specified by the caller parameter.","pos":[274890,274994]},{"pos":[275000,275011],"content":"Method view","linkify":"Method view","nodes":[{"content":"Method view","pos":[0,11]}]},{"pos":[275063,275073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[275075,275084]},{"pos":[275092,275104],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"content":"Deletes lines from the Infolog buffer.","pos":[275106,275144]},{"pos":[275191,275201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"linesLeft","pos":[275203,275212]},{"content":"Number of lines to leave in the buffer; optional.","pos":[275215,275264]},{"pos":[275271,275278],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Do not call this with method with the default value of zero unless another process has not put information into the Infolog.","pos":[275280,275404]},{"pos":[275411,275419],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Use this pattern to clear the Infolog cache:","pos":[275421,275465]},{"pos":[275599,275628],"content":"Method workspaceWindowCreated","linkify":"Method workspaceWindowCreated","nodes":[{"content":"Method workspaceWindowCreated","pos":[0,29]}]},{"content":"Executes when a new workspace is created.","pos":[275630,275671]},{"pos":[275728,275738],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"hWnd","pos":[275740,275744]},{"content":"The handle of the new workspace.","pos":[275747,275779]},{"pos":[275786,275793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a new workspace is created.","pos":[275795,275849]},{"content":"It allows you to perform an action when this occurs.","pos":[275850,275902]},{"pos":[275908,275932],"content":"Method setCurrentModelId","linkify":"Method setCurrentModelId","nodes":[{"content":"Method setCurrentModelId","pos":[0,24]}]},{"pos":[276001,276011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"currentModelId","pos":[276013,276027]},{"pos":[276035,276061],"content":"Method activateMenubarTask","linkify":"Method activateMenubarTask","nodes":[{"content":"Method activateMenubarTask","pos":[0,26]}]},{"pos":[276118,276128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"command","pos":[276130,276137]},{"pos":[276145,276160],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[276194,276218],"content":"Method insertXReferences","linkify":"Method insertXReferences","nodes":[{"content":"Method insertXReferences","pos":[0,24]}]},{"pos":[276261,276282],"content":"Method activateButton","linkify":"Method activateButton","nodes":[{"content":"Method activateButton","pos":[0,21]}]},{"pos":[276334,276344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"command","pos":[276346,276353]},{"pos":[276361,276382],"content":"Method activateWindow","linkify":"Method activateWindow","nodes":[{"content":"Method activateWindow","pos":[0,21]}]},{"content":"Sets the focus on a form or Window.","pos":[276384,276419]},{"pos":[276470,276480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"window","pos":[276482,276488]},{"content":"The handle to the form or window that you want to bring into focus.","pos":[276491,276558]},{"pos":[276564,276585],"content":"Method reportSendMail","linkify":"Method reportSendMail","nodes":[{"content":"Method reportSendMail","pos":[0,21]}]},{"content":"Generates the settings for sending a report by email.","pos":[276587,276640]},{"pos":[276706,276716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"settings","pos":[276718,276726]},{"content":"The email settings for the user.","pos":[276729,276761]},{"pos":[276766,276781],"content":"Class xLanguage","linkify":"Class xLanguage","nodes":[{"content":"Class xLanguage","pos":[0,15]}]},{"content":"The xLanguage class provides access to a list of language IDs and information about existing label files.","pos":[276818,276923]},{"pos":[276929,276936],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"ISO 639 defines the names of languages, such as \"en\" for English.","pos":[276938,277003]},{"content":"Microsoft has listed a set of language codes, such \"en-us\" for English (United States).","pos":[277004,277091]},{"content":"These language codes are referred to in Finance and Operations as Language IDs.","pos":[277092,277171]},{"content":"Finance and Operations uses \"ko-jo\" for Korean (Johab).","pos":[277172,277227]},{"content":"In the Microsoft list, \"ko\" is both Korean and Korean (Johab).","pos":[277228,277290]},{"content":"Finance and Operations uses \"no-ny\" for Norwegian (Nynorsk).","pos":[277291,277351]},{"content":"In the Microsoft list, \"no\" is both Norwegian (Bokmal) and Norwegian (Nynorsk).","pos":[277352,277431]},{"content":"Finance and Operations uses \"es-tr\" to represent Spanish (Spain - Traditional Sort).","pos":[277432,277516]},{"content":"In the Microsoft list, \"es\" is both Spanish (Spain - Modern Sort) and Spanish (Spain - Traditional Sort).","pos":[277517,277622]},{"content":"A language name in the following format, such as \"English (United States)\", is referred to as the description in Finance and Operations.","pos":[277623,277759]},{"pos":[277765,277773],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints all the language IDs from the Microsoft list and a list of existing label files.","pos":[277775,277884]},{"pos":[278636,278643],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[278647,278653]},{"content":"Description","pos":[278708,278719]},{"content":"::public static str index2languageID(int number)","pos":[278993,279041]},{"content":"Retrieves the language ID (for example, \"en-us\") of the specified language.","pos":[279054,279129]},{"content":"::public static int labelFileCount()","pos":[279166,279202]},{"content":"Returns the number of label files.","pos":[279227,279261]},{"content":"::public static str labelFileNumber2LanguageID(int number)","pos":[279339,279397]},{"content":"::public static int languageCount()","pos":[279512,279547]},{"content":"::public static str languageID2Description(str languageID)","pos":[279685,279743]},{"content":"Returns the name of the specified language (for example, \"English (United States)\"), given the language ID.","pos":[279746,279853]},{"content":"::public static int languageID2LCID(str languageID)","pos":[279858,279909]},{"content":"::public static str lcid2languageID(int lcid)","pos":[280031,280076]},{"pos":[280207,280230],"content":"Method index2languageID","linkify":"Method index2languageID","nodes":[{"content":"Method index2languageID","pos":[0,23]}]},{"content":"Retrieves the language ID (for example, \"en-us\") of the specified language.","pos":[280232,280307]},{"pos":[280366,280376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[280378,280384]},{"content":"A number between 1 and the return value of the languageCount method.","pos":[280387,280455]},{"pos":[280462,280474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The language ID.","pos":[280476,280492]},{"pos":[280498,280519],"content":"Method labelFileCount","linkify":"Method labelFileCount","nodes":[{"content":"Method labelFileCount","pos":[0,21]}]},{"content":"Returns the number of label files.","pos":[280521,280555]},{"pos":[280602,280614],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of label files (that is, the number of files that have names in the form ax???<ph id=\"ph1\">\\*</ph>.ald).","pos":[280616,280713],"source":"The number of label files (that is, the number of files that have names in the form ax???\\*.ald)."},{"pos":[280719,280752],"content":"Method labelFileNumber2LanguageID","linkify":"Method labelFileNumber2LanguageID","nodes":[{"content":"Method labelFileNumber2LanguageID","pos":[0,33]}]},{"pos":[280821,280831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[280833,280839]},{"pos":[280848,280860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[280866,280886],"content":"Method languageCount","linkify":"Method languageCount","nodes":[{"content":"Method languageCount","pos":[0,20]}]},{"pos":[280932,280944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[280950,280979],"content":"Method languageID2Description","linkify":"Method languageID2Description","nodes":[{"content":"Method languageID2Description","pos":[0,29]}]},{"content":"Returns the name of the specified language (for example, \"English (United States)\"), given the language ID.","pos":[280981,281088]},{"pos":[281157,281167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"languageID","pos":[281169,281179]},{"content":"The ID of the language (for example, \"en-us\").","pos":[281182,281228]},{"pos":[281235,281247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the description of a language.","pos":[281249,281302]},{"pos":[281308,281330],"content":"Method languageID2LCID","linkify":"Method languageID2LCID","nodes":[{"content":"Method languageID2LCID","pos":[0,22]}]},{"pos":[281392,281402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"languageID","pos":[281404,281414]},{"pos":[281423,281435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[281441,281463],"content":"Method lcid2languageID","linkify":"Method lcid2languageID","nodes":[{"content":"Method lcid2languageID","pos":[0,22]}]},{"pos":[281519,281529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lcid","pos":[281531,281535]},{"pos":[281544,281556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[281561,281580],"content":"Class xMenuFunction","linkify":"Class xMenuFunction","nodes":[{"content":"Class xMenuFunction","pos":[0,19]}]},{"content":"The xMenuFunction class represents an interface to other Finance and Operations Application objects, providing an easy way to access and run any Form, Report, Job, Class, and Query.","pos":[281625,281806]},{"pos":[281812,281819],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You refer to an Application object using a xMenuFunction object and its methods and properties.","pos":[281821,281916]},{"content":"For example, you can:","pos":[281917,281938]},{"content":"Use the Run Method to run the object referenced in the property","pos":[281944,282007]},{"content":"Create a xMenuFunction object and make a reference to the object it runs (or references to).","pos":[282012,282104]},{"content":"This enables you to manipulate the arguments passed to the object before running it","pos":[282105,282188]},{"content":"Note: This system class represents MenuItem nodes in the AOT.","pos":[282190,282251]},{"content":"This class enables you to create, read, update, and delete X++ code and metadata.","pos":[282252,282333]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before calling this API.","pos":[282334,282442]},{"pos":[282448,282456],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[282462,282469],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[282473,282479]},{"content":"Description","pos":[282579,282590]},{"content":"public str changedBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[282969,283004],"source":"public str changedBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[283075,283149]},{"content":"public Date changedDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[283217,283256],"source":"public Date changedDate(\\[Date value\\])"},{"content":"Gets or sets the date when an application object was last changed.","pos":[283323,283389]},{"content":"public str changedTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[283465,283502],"source":"public str changedTime(\\[str value\\])"},{"content":"Gets or sets the time when an application object was last changed.","pos":[283571,283637]},{"content":"public boolean checkAccessRights()","pos":[283713,283747]},{"content":"public int copyCallerQuery(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[283961,284002],"source":"public int copyCallerQuery(\\[int value\\])"},{"content":"public int correctPermissions(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[284209,284253],"source":"public int correctPermissions(\\[int value\\])"},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[284457,284501],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public ObjectRun create(<ph id=\"ph1\">\\[</ph>xArgs args<ph id=\"ph2\">\\]</ph>)","pos":[284705,284744],"source":"public ObjectRun create(\\[xArgs args\\])"},{"content":"Creates and returns a reference to an Finance and Operations application object.","pos":[284811,284891]},{"content":"public str createdBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[284954,284989],"source":"public str createdBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who created the application object.","pos":[285060,285129]},{"content":"public int createPermissions(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[285202,285245],"source":"public int createPermissions(\\[int value\\])"},{"content":"public Date creationDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[285450,285490],"source":"public Date creationDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was created.","pos":[285556,285612]},{"content":"public str creationTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[285698,285736],"source":"public str creationTime(\\[str value\\])"},{"content":"public int deletePermissions(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[285946,285989],"source":"public int deletePermissions(\\[int value\\])"},{"content":"public str disabledImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[286194,286233],"source":"public str disabledImage(\\[str value\\])"},{"content":"Gets or sets the disabled image of the button.","pos":[286300,286346]},{"content":"public int disabledImageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[286442,286489],"source":"public int disabledImageLocation(\\[int value\\])"},{"content":"public int disabledResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[286690,286732],"source":"public int disabledResource(\\[int value\\])"},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[286796,286874]},{"content":"public int enumParameter(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[286938,286977],"source":"public int enumParameter(\\[int value\\])"},{"content":"Gets or sets the enumParameter property that is passed to the object that is run by the MenuFunction class.","pos":[287044,287151]},{"content":"public EnumId enumTypeParameter(<ph id=\"ph1\">\\[</ph>EnumId value<ph id=\"ph2\">\\]</ph>)","pos":[287186,287235],"source":"public EnumId enumTypeParameter(\\[EnumId value\\])"},{"content":"Gets or sets the enumTypeParameter property for the MenuFunction class.","pos":[287292,287363]},{"content":"public int formViewOption(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[287434,287474],"source":"public int formViewOption(\\[int value\\])"},{"content":"public Query getRootQuery()","pos":[287682,287709]},{"content":"public boolean hasRunPermissions(<ph id=\"ph1\">\\[</ph>xArgs args<ph id=\"ph2\">\\]</ph>)","pos":[287930,287978],"source":"public boolean hasRunPermissions(\\[xArgs args\\])"},{"content":"Checks if the xMenuFunction object has execute permissions and run() may be called successfully.","pos":[288036,288132]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[288178,288212],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[288284,288388]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[288426,288465],"source":"public int imageLocation(\\[int value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[288674,288705],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[288780,288817]},{"content":"public str linkedPermissionObject(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[288922,288970],"source":"public str linkedPermissionObject(\\[str value\\])"},{"content":"public str linkedPermissionObjectChild(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[289170,289223],"source":"public str linkedPermissionObjectChild(\\[str value\\])"},{"content":"public int linkedPermissionType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[289418,289464],"source":"public int linkedPermissionType(\\[int value\\])"},{"content":"public int maintainUserLicense(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[289666,289711],"source":"public int maintainUserLicense(\\[int value\\])"},{"content":"public boolean multiSelect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[289914,289959],"source":"public boolean multiSelect(\\[boolean value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[290162,290192],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[290268,290406]},{"content":"public int needsRecord(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[290411,290448],"source":"public int needsRecord(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[290659,290696],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[290907,290947],"source":"public int normalResource(\\[int value\\])"},{"content":"public str object(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[291155,291187],"source":"public str object(\\[str value\\])"},{"content":"Gets or sets the object that is run by the MenuFunction class.","pos":[291261,291323]},{"content":"public int objectType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[291403,291439],"source":"public int objectType(\\[int value\\])"},{"content":"public int openMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[291651,291685],"source":"public int openMode(\\[int value\\])"},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[291899,291933],"source":"public Guid origin(\\[Guid value\\])"},{"content":"public str parameters(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[292147,292183],"source":"public str parameters(\\[str value\\])"},{"content":"Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.","pos":[292253,292355]},{"content":"public str query(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[292395,292426],"source":"public str query(\\[str value\\])"},{"content":"public int readPermissions(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[292643,292684],"source":"public int readPermissions(\\[int value\\])"},{"content":"public str reportDesign(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[292891,292929],"source":"public str reportDesign(\\[str value\\])"},{"content":"public int runOn(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[293139,293170],"source":"public int runOn(\\[int value\\])"},{"content":"public MenuItemType type()","pos":[293387,293413]},{"content":"public int updatePermissions(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[293635,293678],"source":"public int updatePermissions(\\[int value\\])"},{"content":"public int viewUserLicense(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[293883,293924],"source":"public int viewUserLicense(\\[int value\\])"},{"content":"public str web(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[294131,294160],"source":"public str web(\\[str value\\])"},{"content":"public int webAccess(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[294379,294414],"source":"public int webAccess(\\[int value\\])"},{"content":"public str webMenuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[294627,294668],"source":"public str webMenuItemName(\\[str value\\])"},{"content":"public str webPage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[294875,294908],"source":"public str webPage(\\[str value\\])"},{"content":"public boolean webSecureTransaction(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[295123,295177],"source":"public boolean webSecureTransaction(\\[boolean value\\])"},{"content":"public void run(<ph id=\"ph1\">\\[</ph>xArgs args<ph id=\"ph2\">\\]</ph>)","pos":[295371,295402],"source":"public void run(\\[xArgs args\\])"},{"content":"Runs the xMenuFunction object.","pos":[295477,295507]},{"content":"::public static void runCalled(str Name, MenuItemType type, <ph id=\"ph1\">\\[</ph>boolean setContextMenu<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>xArgs args<ph id=\"ph4\">\\]</ph>)","pos":[295619,295722],"source":"::public static void runCalled(str Name, MenuItemType type, \\[boolean setContextMenu\\], \\[xArgs args\\])"},{"content":"::public static void runClient(str Name, MenuItemType type, <ph id=\"ph1\">\\[</ph>boolean setContextMenu<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>xArgs args<ph id=\"ph4\">\\]</ph>)","pos":[295867,295970],"source":"::public static void runClient(str Name, MenuItemType type, \\[boolean setContextMenu\\], \\[xArgs args\\])"},{"content":"::public static void runServer(str Name, MenuItemType type, <ph id=\"ph1\">\\[</ph>boolean setContextMenu<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>xArgs args<ph id=\"ph4\">\\]</ph>)","pos":[296115,296218],"source":"::public static void runServer(str Name, MenuItemType type, \\[boolean setContextMenu\\], \\[xArgs args\\])"},{"content":"public void new(str Name, MenuItemType type)","pos":[296363,296407]},{"content":"Creates a new xMenuFunction object by passing xMenuFunction's name and MenuItemType to the xMenuFunction constructor.","pos":[296469,296586]},{"content":"public void AOTrun(<ph id=\"ph1\">\\[</ph>xArgs args<ph id=\"ph2\">\\]</ph>)","pos":[296611,296645],"source":"public void AOTrun(\\[xArgs args\\])"},{"content":"Compiles this node and its subtree in the Application Object Tree (AOT).","pos":[296717,296789]},{"pos":[296862,296878],"content":"Method changedBy","linkify":"Method changedBy","nodes":[{"content":"Method changedBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[296880,296954]},{"pos":[297000,297010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297012,297017]},{"content":"The value to set; optional.","pos":[297020,297047]},{"pos":[297054,297066],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[297068,297089]},{"pos":[297095,297113],"content":"Method changedDate","linkify":"Method changedDate","nodes":[{"content":"Method changedDate","pos":[0,18]}]},{"content":"Gets or sets the date when an application object was last changed.","pos":[297115,297181]},{"pos":[297231,297241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297243,297248]},{"content":"The value to set; optional.","pos":[297251,297278]},{"pos":[297285,297297],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date when an application object was last changed.","pos":[297299,297352]},{"pos":[297358,297376],"content":"Method changedTime","linkify":"Method changedTime","nodes":[{"content":"Method changedTime","pos":[0,18]}]},{"content":"Gets or sets the time when an application object was last changed.","pos":[297378,297444]},{"pos":[297492,297502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297504,297509]},{"content":"The value to set; optional.","pos":[297512,297539]},{"pos":[297546,297558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The time when an application object was last changed.","pos":[297560,297613]},{"pos":[297619,297643],"content":"Method checkAccessRights","linkify":"Method checkAccessRights","nodes":[{"content":"Method checkAccessRights","pos":[0,24]}]},{"pos":[297690,297702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[297708,297730],"content":"Method copyCallerQuery","linkify":"Method copyCallerQuery","nodes":[{"content":"Method copyCallerQuery","pos":[0,22]}]},{"pos":[297782,297792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297794,297799]},{"pos":[297808,297820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[297826,297851],"content":"Method correctPermissions","linkify":"Method correctPermissions","nodes":[{"content":"Method correctPermissions","pos":[0,25]}]},{"pos":[297906,297916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297918,297923]},{"pos":[297932,297944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[297950,297975],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[298030,298040],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298042,298047]},{"pos":[298056,298068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[298074,298087],"content":"Method create","linkify":"Method create","nodes":[{"content":"Method create","pos":[0,13]}]},{"content":"Creates and returns a reference to an Finance and Operations application object.","pos":[298089,298169]},{"pos":[298219,298229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[298231,298235]},{"content":"An xArgs class object; optional.","pos":[298238,298270]},{"pos":[298277,298289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A reference to an Finance and Operations application object.","pos":[298291,298351]},{"pos":[298358,298365],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used to create an application object.","pos":[298367,298419]},{"content":"The object that is returned is assigned to an object variable.","pos":[298420,298482]},{"content":"Note that the init function is invoked by the create function.","pos":[298483,298545]},{"content":"Therefore you should not invoke it.","pos":[298546,298581]},{"pos":[298587,298603],"content":"Method createdBy","linkify":"Method createdBy","nodes":[{"content":"Method createdBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who created the application object.","pos":[298605,298674]},{"pos":[298720,298730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298732,298737]},{"pos":[298746,298758],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[298760,298781]},{"pos":[298787,298811],"content":"Method createPermissions","linkify":"Method createPermissions","nodes":[{"content":"Method createPermissions","pos":[0,24]}]},{"pos":[298865,298875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298877,298882]},{"pos":[298891,298903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[298909,298928],"content":"Method creationDate","linkify":"Method creationDate","nodes":[{"content":"Method creationDate","pos":[0,19]}]},{"content":"Gets or sets the date an application object was created.","pos":[298930,298986]},{"pos":[299037,299047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299049,299054]},{"pos":[299063,299075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was created.","pos":[299077,299120]},{"pos":[299126,299145],"content":"Method creationTime","linkify":"Method creationTime","nodes":[{"content":"Method creationTime","pos":[0,19]}]},{"pos":[299194,299204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299206,299211]},{"pos":[299220,299232],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299238,299262],"content":"Method deletePermissions","linkify":"Method deletePermissions","nodes":[{"content":"Method deletePermissions","pos":[0,24]}]},{"pos":[299316,299326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299328,299333]},{"pos":[299342,299354],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299360,299380],"content":"Method disabledImage","linkify":"Method disabledImage","nodes":[{"content":"Method disabledImage","pos":[0,20]}]},{"content":"Gets or sets the disabled image of the button.","pos":[299382,299428]},{"pos":[299478,299488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299490,299495]},{"pos":[299504,299516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The full name of an image file; the system supports all of the GDI-supported image formats.","pos":[299518,299609]},{"pos":[299616,299623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property has precedence over the disabledResource property value.","pos":[299625,299695]},{"content":"It is used if both of these properties are set.","pos":[299696,299743]},{"pos":[299749,299777],"content":"Method disabledImageLocation","linkify":"Method disabledImageLocation","nodes":[{"content":"Method disabledImageLocation","pos":[0,28]}]},{"pos":[299835,299845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299847,299852]},{"pos":[299861,299873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299879,299902],"content":"Method disabledResource","linkify":"Method disabledResource","nodes":[{"content":"Method disabledResource","pos":[0,23]}]},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[299904,299982]},{"pos":[300035,300045],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300047,300052]},{"pos":[300061,300073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the image to use as the disabled button image.","pos":[300075,300140]},{"content":"Both icon and bitmap images are supported.","pos":[300141,300183]},{"pos":[300189,300209],"content":"Method enumParameter","linkify":"Method enumParameter","nodes":[{"content":"Method enumParameter","pos":[0,20]}]},{"content":"Gets or sets the enumParameter property that is passed to the object that is run by the MenuFunction class.","pos":[300211,300318]},{"pos":[300368,300378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300380,300385]},{"pos":[300394,300406],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The enumParameter property that is passed to the object that is run by the MenuFunction class.","pos":[300408,300502]},{"pos":[300508,300532],"content":"Method enumTypeParameter","linkify":"Method enumTypeParameter","nodes":[{"content":"Method enumTypeParameter","pos":[0,24]}]},{"content":"Gets or sets the enumTypeParameter property for the MenuFunction class.","pos":[300534,300605]},{"pos":[300665,300675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300677,300682]},{"pos":[300691,300703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The enumTypeParameter property for the MenuFunction class.","pos":[300705,300763]},{"pos":[300769,300790],"content":"Method formViewOption","linkify":"Method formViewOption","nodes":[{"content":"Method formViewOption","pos":[0,21]}]},{"pos":[300841,300851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300853,300858]},{"pos":[300867,300879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300885,300904],"content":"Method getRootQuery","linkify":"Method getRootQuery","nodes":[{"content":"Method getRootQuery","pos":[0,19]}]},{"pos":[300944,300956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300962,300986],"content":"Method hasRunPermissions","linkify":"Method hasRunPermissions","nodes":[{"content":"Method hasRunPermissions","pos":[0,24]}]},{"content":"Checks if the xMenuFunction object has execute permissions and run() may be called successfully.","pos":[300988,301084]},{"pos":[301143,301153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[301155,301159]},{"content":"An xArgs class object as would be passed to the run() method; optional.","pos":[301162,301233]},{"pos":[301240,301252],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if neccessary permissions exist to successfully call run().","pos":[301254,301318]},{"pos":[301325,301332],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function may throw in case of permissions failure.","pos":[301334,301389]},{"pos":[301395,301410],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[301412,301516]},{"pos":[301561,301571],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301573,301578]},{"pos":[301587,301599],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[301601,301656]},{"pos":[301663,301670],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.The help text must not exceed 250 characters.","pos":[301672,301790]},{"pos":[301796,301816],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[301866,301876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301878,301883]},{"pos":[301892,301904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301910,301922],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[301924,301961]},{"pos":[302003,302013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302015,302020]},{"pos":[302029,302041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[302043,302081]},{"pos":[302088,302095],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[302097,302229]},{"pos":[302235,302264],"content":"Method linkedPermissionObject","linkify":"Method linkedPermissionObject","nodes":[{"content":"Method linkedPermissionObject","pos":[0,29]}]},{"pos":[302323,302333],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302335,302340]},{"pos":[302349,302361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302367,302401],"content":"Method linkedPermissionObjectChild","linkify":"Method linkedPermissionObjectChild","nodes":[{"content":"Method linkedPermissionObjectChild","pos":[0,34]}]},{"pos":[302465,302475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302477,302482]},{"pos":[302491,302503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302509,302536],"content":"Method linkedPermissionType","linkify":"Method linkedPermissionType","nodes":[{"content":"Method linkedPermissionType","pos":[0,27]}]},{"pos":[302593,302603],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302605,302610]},{"pos":[302619,302631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302637,302663],"content":"Method maintainUserLicense","linkify":"Method maintainUserLicense","nodes":[{"content":"Method maintainUserLicense","pos":[0,26]}]},{"pos":[302719,302729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302731,302736]},{"pos":[302745,302757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302763,302781],"content":"Method multiSelect","linkify":"Method multiSelect","nodes":[{"content":"Method multiSelect","pos":[0,18]}]},{"pos":[302837,302847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302849,302854]},{"pos":[302863,302875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302881,302892],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[302894,303032]},{"pos":[303073,303083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303085,303090]},{"pos":[303099,303111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[303113,303177]},{"pos":[303184,303191],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[303193,303287]},{"content":"Begins with a letter.","pos":[303293,303314]},{"content":"Doesn't exceed 250 characters.","pos":[303319,303349]},{"content":"Can include numbers and underscore characters.","pos":[303354,303400]},{"content":"Cannot include punctuation or spaces.","pos":[303405,303442]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[303447,303565]},{"pos":[303571,303589],"content":"Method needsRecord","linkify":"Method needsRecord","nodes":[{"content":"Method needsRecord","pos":[0,18]}]},{"pos":[303637,303647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303649,303654]},{"pos":[303663,303675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303681,303699],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[303747,303757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303759,303764]},{"pos":[303773,303785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303791,303812],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[303863,303873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303875,303880]},{"pos":[303889,303901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303907,303920],"content":"Method object","linkify":"Method object","nodes":[{"content":"Method object","pos":[0,13]}]},{"content":"Gets or sets the object that is run by the MenuFunction class.","pos":[303922,303984]},{"pos":[304027,304037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304039,304044]},{"pos":[304053,304065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The object that is run by the MenuFunction class.","pos":[304067,304116]},{"pos":[304123,304130],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The property value may be one of the following objects:","pos":[304132,304187]},{"content":"Form.","pos":[304193,304198]},{"content":"Report.","pos":[304203,304210]},{"content":"Job.","pos":[304215,304219]},{"content":"Class.","pos":[304224,304230]},{"content":"Query.","pos":[304235,304241]},{"pos":[304247,304264],"content":"Method objectType","linkify":"Method objectType","nodes":[{"content":"Method objectType","pos":[0,17]}]},{"pos":[304311,304321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304323,304328]},{"pos":[304337,304349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304355,304370],"content":"Method openMode","linkify":"Method openMode","nodes":[{"content":"Method openMode","pos":[0,15]}]},{"pos":[304415,304425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304427,304432]},{"pos":[304441,304453],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304459,304472],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[304517,304527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304529,304534]},{"pos":[304543,304555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304561,304578],"content":"Method parameters","linkify":"Method parameters","nodes":[{"content":"Method parameters","pos":[0,17]}]},{"content":"Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.","pos":[304580,304682]},{"pos":[304729,304739],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304741,304746]},{"pos":[304755,304767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The list of parameters that are passed to the object.","pos":[304769,304822]},{"pos":[304829,304836],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.cts ignore passed, unrecognized parameters.","pos":[304838,304961]},{"pos":[304967,304979],"content":"Method query","linkify":"Method query","nodes":[{"content":"Method query","pos":[0,12]}]},{"pos":[305021,305031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305033,305038]},{"pos":[305047,305059],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305065,305087],"content":"Method readPermissions","linkify":"Method readPermissions","nodes":[{"content":"Method readPermissions","pos":[0,22]}]},{"pos":[305139,305149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305151,305156]},{"pos":[305165,305177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305183,305202],"content":"Method reportDesign","linkify":"Method reportDesign","nodes":[{"content":"Method reportDesign","pos":[0,19]}]},{"pos":[305251,305261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305263,305268]},{"pos":[305277,305289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305295,305307],"content":"Method runOn","linkify":"Method runOn","nodes":[{"content":"Method runOn","pos":[0,12]}]},{"pos":[305349,305359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305361,305366]},{"pos":[305375,305387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305393,305404],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[305443,305455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305461,305485],"content":"Method updatePermissions","linkify":"Method updatePermissions","nodes":[{"content":"Method updatePermissions","pos":[0,24]}]},{"pos":[305539,305549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305551,305556]},{"pos":[305565,305577],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305583,305605],"content":"Method viewUserLicense","linkify":"Method viewUserLicense","nodes":[{"content":"Method viewUserLicense","pos":[0,22]}]},{"pos":[305657,305667],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305669,305674]},{"pos":[305683,305695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305701,305711],"content":"Method web","linkify":"Method web","nodes":[{"content":"Method web","pos":[0,10]}]},{"pos":[305751,305761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305763,305768]},{"pos":[305777,305789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305795,305811],"content":"Method webAccess","linkify":"Method webAccess","nodes":[{"content":"Method webAccess","pos":[0,16]}]},{"pos":[305857,305867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305869,305874]},{"pos":[305883,305895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305901,305923],"content":"Method webMenuItemName","linkify":"Method webMenuItemName","nodes":[{"content":"Method webMenuItemName","pos":[0,22]}]},{"pos":[305975,305985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305987,305992]},{"pos":[306001,306013],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[306019,306033],"content":"Method webPage","linkify":"Method webPage","nodes":[{"content":"Method webPage","pos":[0,14]}]},{"pos":[306077,306087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306089,306094]},{"pos":[306103,306115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[306121,306148],"content":"Method webSecureTransaction","linkify":"Method webSecureTransaction","nodes":[{"content":"Method webSecureTransaction","pos":[0,27]}]},{"pos":[306213,306223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306225,306230]},{"pos":[306239,306251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[306257,306267],"content":"Method run","linkify":"Method run","nodes":[{"content":"Method run","pos":[0,10]}]},{"content":"Runs the xMenuFunction object.","pos":[306269,306299]},{"pos":[306341,306351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[306353,306357]},{"content":"An xArgs class object; optional.","pos":[306360,306392]},{"pos":[306399,306406],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is used to run a xMenuFunction object from code.","pos":[306408,306470]},{"pos":[306476,306492],"content":"Method runCalled","linkify":"Method runCalled","nodes":[{"content":"Method runCalled","pos":[0,16]}]},{"pos":[306602,306612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name","pos":[306614,306618]},{"content":"type","pos":[306632,306636]},{"content":"setContextMenu","pos":[306650,306664]},{"content":"args","pos":[306678,306682]},{"pos":[306690,306706],"content":"Method runClient","linkify":"Method runClient","nodes":[{"content":"Method runClient","pos":[0,16]}]},{"pos":[306816,306826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name","pos":[306828,306832]},{"content":"type","pos":[306846,306850]},{"content":"setContextMenu","pos":[306864,306878]},{"content":"args","pos":[306892,306896]},{"pos":[306904,306920],"content":"Method runServer","linkify":"Method runServer","nodes":[{"content":"Method runServer","pos":[0,16]}]},{"pos":[307030,307040],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name","pos":[307042,307046]},{"content":"type","pos":[307060,307064]},{"content":"setContextMenu","pos":[307078,307092]},{"content":"args","pos":[307106,307110]},{"pos":[307118,307128],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new xMenuFunction object by passing xMenuFunction's name and MenuItemType to the xMenuFunction constructor.","pos":[307130,307247]},{"pos":[307304,307314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name","pos":[307316,307320]},{"content":"A constant in the MenuItemType system enumeration: MenuItemType::Display, MenuItemType::Output, or MenuItemType::Action.","pos":[307323,307443]},{"content":"type","pos":[307455,307459]},{"content":"A constant in the MenuItemType system enumeration: MenuItemType::Display, MenuItemType::Output, or MenuItemType::Action.","pos":[307462,307582]},{"pos":[307589,307596],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When creating a xMenuFunction object, the parameters must uniquely identify an existing xMenuFunction.","pos":[307598,307700]},{"content":"If not, Exception::Internal is thrown.","pos":[307701,307739]},{"pos":[307745,307758],"content":"Method AOTrun","linkify":"Method AOTrun","nodes":[{"content":"Method AOTrun","pos":[0,13]}]},{"content":"Compiles this node and its subtree in the Application Object Tree (AOT).","pos":[307760,307832]},{"pos":[307877,307887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"args","pos":[307889,307893]},{"pos":[307900,307914],"content":"Class xNavPane","linkify":"Class xNavPane","nodes":[{"content":"Class xNavPane","pos":[0,14]}]},{"pos":[307954,307961],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[307967,307975],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[307981,307988],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[307992,307998]},{"content":"Description","pos":[308096,308107]},{"content":"public boolean collapseFavoriteNode(str path)","pos":[308308,308353]},{"content":"public boolean collapseNode(str path)","pos":[308466,308503]},{"content":"public boolean expandFavoriteNode(str path)","pos":[308624,308667]},{"content":"public boolean expandNode(str path)","pos":[308782,308817]},{"content":"public boolean favPaneVisible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[308940,308988],"source":"public boolean favPaneVisible(\\[boolean value\\])"},{"content":"public container getButtons()","pos":[309098,309127]},{"content":"public str getCurrMenuName()","pos":[309256,309284]},{"content":"public TreeNode getSelectedFavoriteNode()","pos":[309414,309455]},{"content":"public TreeNode getSelectedNode()","pos":[309572,309605]},{"content":"public boolean navPaneVisible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[309730,309778],"source":"public boolean navPaneVisible(\\[boolean value\\])"},{"content":"public boolean runFavoriteNode(str path)","pos":[309888,309928]},{"content":"public boolean runNode(str path)","pos":[310046,310078]},{"content":"public str selectedFavoriteGroup(<ph id=\"ph1\">\\[</ph>str groupName<ph id=\"ph2\">\\]</ph>)","pos":[310204,310255],"source":"public str selectedFavoriteGroup(\\[str groupName\\])"},{"content":"public str selectedGroup(<ph id=\"ph1\">\\[</ph>str groupName<ph id=\"ph2\">\\]</ph>)","pos":[310362,310405],"source":"public str selectedGroup(\\[str groupName\\])"},{"content":"public boolean setSelectedFavoriteNode(str path)","pos":[310520,310568]},{"content":"public boolean setSelectedNode(str path)","pos":[310678,310718]},{"content":"public void refreshFavorites(<ph id=\"ph1\">\\[</ph>str selectFavoriteGroup<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int workspaceNum<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean saveToDB<ph id=\"ph6\">\\]</ph>)","pos":[310836,310937],"source":"public void refreshFavorites(\\[str selectFavoriteGroup\\], \\[int workspaceNum\\], \\[boolean saveToDB\\])"},{"content":"public void setCurrMenuButtons(container buttons)","pos":[310994,311043]},{"content":"public void loadStartupButtons()","pos":[311152,311184]},{"content":"public void new()","pos":[311310,311327]},{"content":"Initializes a new instance of the xNavPane class.","pos":[311414,311463]},{"pos":[311471,311498],"content":"Method collapseFavoriteNode","linkify":"Method collapseFavoriteNode","nodes":[{"content":"Method collapseFavoriteNode","pos":[0,27]}]},{"pos":[311556,311566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[311568,311572]},{"pos":[311581,311593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311599,311618],"content":"Method collapseNode","linkify":"Method collapseNode","nodes":[{"content":"Method collapseNode","pos":[0,19]}]},{"pos":[311668,311678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[311680,311684]},{"pos":[311693,311705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311711,311736],"content":"Method expandFavoriteNode","linkify":"Method expandFavoriteNode","nodes":[{"content":"Method expandFavoriteNode","pos":[0,25]}]},{"pos":[311792,311802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[311804,311808]},{"pos":[311817,311829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311835,311852],"content":"Method expandNode","linkify":"Method expandNode","nodes":[{"content":"Method expandNode","pos":[0,17]}]},{"pos":[311900,311910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[311912,311916]},{"pos":[311925,311937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311943,311964],"content":"Method favPaneVisible","linkify":"Method favPaneVisible","nodes":[{"content":"Method favPaneVisible","pos":[0,21]}]},{"pos":[312023,312033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312035,312040]},{"pos":[312049,312061],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312067,312084],"content":"Method getButtons","linkify":"Method getButtons","nodes":[{"content":"Method getButtons","pos":[0,17]}]},{"pos":[312126,312138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312144,312166],"content":"Method getCurrMenuName","linkify":"Method getCurrMenuName","nodes":[{"content":"Method getCurrMenuName","pos":[0,22]}]},{"pos":[312207,312219],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312225,312255],"content":"Method getSelectedFavoriteNode","linkify":"Method getSelectedFavoriteNode","nodes":[{"content":"Method getSelectedFavoriteNode","pos":[0,30]}]},{"pos":[312309,312321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312327,312349],"content":"Method getSelectedNode","linkify":"Method getSelectedNode","nodes":[{"content":"Method getSelectedNode","pos":[0,22]}]},{"pos":[312395,312407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312413,312434],"content":"Method navPaneVisible","linkify":"Method navPaneVisible","nodes":[{"content":"Method navPaneVisible","pos":[0,21]}]},{"pos":[312493,312503],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312505,312510]},{"pos":[312519,312531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312537,312559],"content":"Method runFavoriteNode","linkify":"Method runFavoriteNode","nodes":[{"content":"Method runFavoriteNode","pos":[0,22]}]},{"pos":[312612,312622],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[312624,312628]},{"pos":[312637,312649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312655,312669],"content":"Method runNode","linkify":"Method runNode","nodes":[{"content":"Method runNode","pos":[0,14]}]},{"pos":[312714,312724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[312726,312730]},{"pos":[312739,312751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312757,312785],"content":"Method selectedFavoriteGroup","linkify":"Method selectedFavoriteGroup","nodes":[{"content":"Method selectedFavoriteGroup","pos":[0,28]}]},{"pos":[312847,312857],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"groupName","pos":[312859,312868]},{"pos":[312877,312889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312895,312915],"content":"Method selectedGroup","linkify":"Method selectedGroup","nodes":[{"content":"Method selectedGroup","pos":[0,20]}]},{"pos":[312969,312979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"groupName","pos":[312981,312990]},{"pos":[312999,313011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313017,313047],"content":"Method setSelectedFavoriteNode","linkify":"Method setSelectedFavoriteNode","nodes":[{"content":"Method setSelectedFavoriteNode","pos":[0,30]}]},{"pos":[313108,313118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[313120,313124]},{"pos":[313133,313145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313151,313173],"content":"Method setSelectedNode","linkify":"Method setSelectedNode","nodes":[{"content":"Method setSelectedNode","pos":[0,22]}]},{"pos":[313226,313236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[313238,313242]},{"pos":[313251,313263],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313269,313292],"content":"Method refreshFavorites","linkify":"Method refreshFavorites","nodes":[{"content":"Method refreshFavorites","pos":[0,23]}]},{"pos":[313400,313410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"selectFavoriteGroup","pos":[313412,313431]},{"content":"workspaceNum","pos":[313445,313457]},{"content":"saveToDB","pos":[313471,313479]},{"pos":[313487,313512],"content":"Method setCurrMenuButtons","linkify":"Method setCurrMenuButtons","nodes":[{"content":"Method setCurrMenuButtons","pos":[0,25]}]},{"pos":[313574,313584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"buttons","pos":[313586,313593]},{"pos":[313601,313626],"content":"Method loadStartupButtons","linkify":"Method loadStartupButtons","nodes":[{"content":"Method loadStartupButtons","pos":[0,25]}]},{"pos":[313670,313680],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xNavPane class.","pos":[313682,313731]},{"pos":[313759,313776],"content":"Class XppCompiler","linkify":"Class XppCompiler","nodes":[{"content":"Class XppCompiler","pos":[0,17]}]},{"pos":[313819,313826],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[313832,313840],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[313846,313853],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[313857,313863]},{"content":"Description","pos":[313898,313909]},{"content":"public boolean compile(str source)","pos":[314175,314209]},{"content":"public boolean compileExpr(str source)","pos":[314334,314372]},{"content":"public str dumpClass(str className)","pos":[314493,314528]},{"content":"Creates an XML string that contains the X++ compiler information for a class.","pos":[314534,314611]},{"content":"public str dumpEnums()","pos":[314652,314674]},{"content":"Creates an XML string that contains the X++ compiler information for all enumerations in the current application.","pos":[314693,314806]},{"content":"public str dumpTable(str tableName)","pos":[314811,314846]},{"content":"Creates an XML string that contains the X++ compiler information for a table.","pos":[314852,314929]},{"content":"public str errorText()","pos":[314970,314992]},{"content":"public AnyType execute(VarArg )","pos":[315129,315160]},{"content":"public AnyType executeEx()","pos":[315288,315314]},{"content":"public void setGuidArg(Guid arg)","pos":[315447,315479]},{"content":"public void setInt64Arg(Int64 arg)","pos":[315606,315640]},{"content":"public void setDateArg(Date arg)","pos":[315765,315797]},{"content":"public void new()","pos":[315924,315941]},{"content":"Initializes a new instance of the XppCompiler class.","pos":[315965,316017]},{"content":"public void endArgs()","pos":[316083,316104]},{"content":"public void startArgs()","pos":[316242,316265]},{"content":"public void setRealArg(Real arg)","pos":[316401,316433]},{"content":"public void setIntArg(int arg)","pos":[316560,316590]},{"content":"public void setStrArg(str arg)","pos":[316719,316749]},{"pos":[316881,316895],"content":"Method compile","linkify":"Method compile","nodes":[{"content":"Method compile","pos":[0,14]}]},{"pos":[316942,316952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"source","pos":[316954,316960]},{"pos":[316969,316981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316987,317005],"content":"Method compileExpr","linkify":"Method compileExpr","nodes":[{"content":"Method compileExpr","pos":[0,18]}]},{"pos":[317056,317066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"source","pos":[317068,317074]},{"pos":[317083,317095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317101,317117],"content":"Method dumpClass","linkify":"Method dumpClass","nodes":[{"content":"Method dumpClass","pos":[0,16]}]},{"content":"Creates an XML string that contains the X++ compiler information for a class.","pos":[317119,317196]},{"pos":[317244,317254],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"className","pos":[317256,317265]},{"pos":[317274,317286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The X++ compiler information for the specified class","pos":[317288,317340]},{"pos":[317347,317354],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"General use of this method is discouraged, because the output format might change without warning from version to version.","pos":[317356,317478]},{"pos":[317484,317500],"content":"Method dumpEnums","linkify":"Method dumpEnums","nodes":[{"content":"Method dumpEnums","pos":[0,16]}]},{"content":"Creates an XML string that contains the X++ compiler information for all enumerations in the current application.","pos":[317502,317615]},{"pos":[317650,317662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The X++ compiler information for all enumerations in the current application","pos":[317664,317740]},{"pos":[317747,317754],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"General use of this method is discouraged, because the output format might change without warning from version to version.","pos":[317756,317878]},{"pos":[317884,317900],"content":"Method dumpTable","linkify":"Method dumpTable","nodes":[{"content":"Method dumpTable","pos":[0,16]}]},{"content":"Creates an XML string that contains the X++ compiler information for a table.","pos":[317902,317979]},{"pos":[318027,318037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableName","pos":[318039,318048]},{"pos":[318057,318069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The X++ compiler information for the specified table","pos":[318071,318123]},{"pos":[318130,318137],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"General use of this method is discouraged, because the output format might change without warning from version to version.","pos":[318139,318261]},{"pos":[318267,318283],"content":"Method errorText","linkify":"Method errorText","nodes":[{"content":"Method errorText","pos":[0,16]}]},{"pos":[318318,318330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318336,318350],"content":"Method execute","linkify":"Method execute","nodes":[{"content":"Method execute","pos":[0,14]}]},{"pos":[318394,318404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[318415,318427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318434,318441],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"XppCompiler objects can compile code at run time.","pos":[318443,318492]},{"content":"This presents a security risk.","pos":[318493,318523]},{"content":"Therefore, execute method runs under Code Access Security.","pos":[318524,318582]},{"content":"Calls to this method on the server require permission from the ExecutePermission class.","pos":[318583,318670]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[318671,318806]},{"pos":[318813,318821],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example calls the execute method to compile and execute the supplied buffer.","pos":[318823,318913]},{"pos":[319343,319359],"content":"Method executeEx","linkify":"Method executeEx","nodes":[{"content":"Method executeEx","pos":[0,16]}]},{"pos":[319398,319410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319417,319424],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"XppCompiler objects can compile code at run time.","pos":[319426,319475]},{"content":"This presents a security risk.","pos":[319476,319506]},{"content":"Therefore, the executeEx method runs under Code Access Security.","pos":[319507,319571]},{"content":"Calls to this method on the server require permission from the ExecutePermission class.","pos":[319572,319659]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[319660,319795]},{"pos":[319802,319810],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[320229,320246],"content":"Method setGuidArg","linkify":"Method setGuidArg","nodes":[{"content":"Method setGuidArg","pos":[0,17]}]},{"pos":[320291,320301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"arg","pos":[320303,320306]},{"pos":[320314,320332],"content":"Method setInt64Arg","linkify":"Method setInt64Arg","nodes":[{"content":"Method setInt64Arg","pos":[0,18]}]},{"pos":[320379,320389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"arg","pos":[320391,320394]},{"pos":[320402,320419],"content":"Method setDateArg","linkify":"Method setDateArg","nodes":[{"content":"Method setDateArg","pos":[0,17]}]},{"pos":[320464,320474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"arg","pos":[320476,320479]},{"pos":[320487,320497],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the XppCompiler class.","pos":[320499,320551]},{"pos":[320581,320588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Instances of the XppCompiler class can compile code at run time.","pos":[320590,320654]},{"content":"Because this presents a security risk, the new method runs under Code Access Security.","pos":[320655,320741]},{"content":"Calls to this method on the server require permission from the ExecutePermission Class.","pos":[320742,320829]},{"pos":[320835,320849],"content":"Method endArgs","linkify":"Method endArgs","nodes":[{"content":"Method endArgs","pos":[0,14]}]},{"pos":[320882,320898],"content":"Method startArgs","linkify":"Method startArgs","nodes":[{"content":"Method startArgs","pos":[0,16]}]},{"pos":[320933,320950],"content":"Method setRealArg","linkify":"Method setRealArg","nodes":[{"content":"Method setRealArg","pos":[0,17]}]},{"pos":[320995,321005],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"arg","pos":[321007,321010]},{"pos":[321018,321034],"content":"Method setIntArg","linkify":"Method setIntArg","nodes":[{"content":"Method setIntArg","pos":[0,16]}]},{"pos":[321077,321087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"arg","pos":[321089,321092]},{"pos":[321100,321116],"content":"Method setStrArg","linkify":"Method setStrArg","nodes":[{"content":"Method setStrArg","pos":[0,16]}]},{"pos":[321159,321169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"arg","pos":[321171,321174]},{"pos":[321181,321201],"content":"Class XppPrePostArgs","linkify":"Class XppPrePostArgs","nodes":[{"content":"Class XppPrePostArgs","pos":[0,20]}]},{"content":"The XppPrePostArgs class provides information about a publisher's arguments and return values for pre-handlers and post-handlers.","pos":[321249,321378]},{"pos":[321384,321391],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A publisher is a method that exposes pre-events and post-events.","pos":[321393,321457]},{"pos":[321463,321471],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[321477,321484],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[321488,321494]},{"content":"Description","pos":[321583,321594]},{"content":"public boolean wrapper(str fieldName, AnyType value)","pos":[321902,321954]},{"content":"public struct args()","pos":[322109,322129]},{"content":"public boolean existsArg(str fieldName)","pos":[322316,322355]},{"content":"Checks the existence of the publisher's argument by name.","pos":[322411,322468]},{"content":"public AnyType getArgNum(int argIndex)","pos":[322523,322561]},{"content":"Retrieves the ;publisher's argument by index.","pos":[322618,322663]},{"content":"public int setArgNum(int argIndex, AnyType value)","pos":[322730,322779]},{"content":"Sets the publisher's argument by index.","pos":[322825,322864]},{"content":"public AnyType value(str fieldName)","pos":[322937,322972]},{"content":"public XppEventHandlerCalledWhen getCalledWhen()","pos":[323144,323192]},{"content":"Retrieves a value that indicates whether the instance is currently serving a pre-handler or a post-handler.","pos":[323239,323346]},{"content":"public AnyType getReturnValue()","pos":[323351,323382]},{"content":"Gets the publisher's return value.","pos":[323446,323480]},{"content":"public AnyType getThis()","pos":[323558,323582]},{"content":"Gets the publisher's \"this\" reference.","pos":[323653,323691]},{"content":"public boolean removeArg(str fieldName)","pos":[323765,323804]},{"content":"public int wrapper(str fieldName, AnyType value)","pos":[323972,324020]},{"content":"public int setReturnValue(AnyType retval)","pos":[324179,324220]},{"content":"Sets the publisher's return value.","pos":[324274,324308]},{"content":"public str isFirst()","pos":[324386,324406]},{"content":"public void setCalledWhen(XppEventHandlerCalledWhen calledWhen)","pos":[324593,324656]},{"content":"Sets whether the instance is currently serving a pre-handler or a post-handler.","pos":[324688,324767]},{"content":"::public static void setReturnValueEx(AnyType retval, XppPrePostArgs args)","pos":[324800,324874]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>AnyType thisPtr<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>str args<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>XppEventHandlerCalledWhen calledWhen<ph id=\"ph6\">\\]</ph>)","pos":[325007,325099],"source":"public void new(\\[AnyType thisPtr\\], \\[str args\\], \\[XppEventHandlerCalledWhen calledWhen\\])"},{"content":"Initializes a new instance of the Object class.","pos":[325102,325149]},{"pos":[325217,325231],"content":"Method wrapper","linkify":"Method wrapper","nodes":[{"content":"Method wrapper","pos":[0,14]}]},{"pos":[325296,325306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[325308,325317]},{"content":"value","pos":[325331,325336]},{"pos":[325345,325357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325363,325374],"content":"Method args","linkify":"Method args","nodes":[{"content":"Method args","pos":[0,11]}]},{"pos":[325407,325419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325425,325441],"content":"Method existsArg","linkify":"Method existsArg","nodes":[{"content":"Method existsArg","pos":[0,16]}]},{"content":"Checks the existence of the publisher's argument by name.","pos":[325443,325500]},{"pos":[325552,325562],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[325564,325573]},{"pos":[325582,325594],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean data type value that indicates whether the specified argument exists.","pos":[325596,325675]},{"pos":[325682,325689],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Argument names are case insensitive.","pos":[325691,325727]},{"pos":[325733,325749],"content":"Method getArgNum","linkify":"Method getArgNum","nodes":[{"content":"Method getArgNum","pos":[0,16]}]},{"content":"Retrieves the ;publisher's argument by index.","pos":[325751,325796]},{"pos":[325847,325857],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"argIndex","pos":[325859,325867]},{"content":"An int index of the target argument.","pos":[325870,325906]},{"pos":[325913,325925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An anytype value of the specified argument.","pos":[325927,325970]},{"pos":[325977,325984],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The index range is 0-based for static publishers but 1-based for instance publishers.","pos":[325986,326071]},{"pos":[326077,326093],"content":"Method setArgNum","linkify":"Method setArgNum","nodes":[{"content":"Method setArgNum","pos":[0,16]}]},{"content":"Sets the publisher's argument by index.","pos":[326095,326134]},{"pos":[326196,326206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"argIndex","pos":[326208,326216]},{"content":"An anytype value to assign to the specified argument.","pos":[326219,326272]},{"content":"value","pos":[326284,326289]},{"content":"An anytype value to assign to the specified argument.","pos":[326292,326345]},{"pos":[326352,326364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An int data type value of 1.","pos":[326366,326394]},{"pos":[326401,326408],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The index range is 0-based for static publishers but 1-based for instance publishers.","pos":[326410,326495]},{"pos":[326501,326513],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[326561,326571],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[326573,326582]},{"pos":[326591,326603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[326609,326629],"content":"Method getCalledWhen","linkify":"Method getCalledWhen","nodes":[{"content":"Method getCalledWhen","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the instance is currently serving a pre-handler or a post-handler.","pos":[326631,326738]},{"pos":[326799,326811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An XppEventHandlerCalledWhen data type value that indicates whether the XppPrePostArgs instance is serving the pre-handlers or the post-handlers.","pos":[326813,326958]},{"pos":[326964,326985],"content":"Method getReturnValue","linkify":"Method getReturnValue","nodes":[{"content":"Method getReturnValue","pos":[0,21]}]},{"content":"Gets the publisher's return value.","pos":[326987,327021]},{"pos":[327065,327077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An anytype data type value that represents the publisher's return value.","pos":[327079,327151]},{"pos":[327158,327165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is not intended for pre-handlers.","pos":[327167,327212]},{"pos":[327218,327232],"content":"Method getThis","linkify":"Method getThis","nodes":[{"content":"Method getThis","pos":[0,14]}]},{"content":"Gets the publisher's \"this\" reference.","pos":[327234,327272]},{"pos":[327309,327321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An anytype data type value that represents the publisher's \"this\" reference.","pos":[327323,327399]},{"pos":[327406,327413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Returns a nullNothingnullptrunita null reference (Nothing in Visual Basic) reference if the publisher is static.","pos":[327415,327527]},{"pos":[327533,327549],"content":"Method removeArg","linkify":"Method removeArg","nodes":[{"content":"Method removeArg","pos":[0,16]}]},{"pos":[327601,327611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[327613,327622]},{"pos":[327631,327643],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[327649,327663],"content":"Method wrapper","linkify":"Method wrapper","nodes":[{"content":"Method wrapper","pos":[0,14]}]},{"pos":[327724,327734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[327736,327745]},{"content":"value","pos":[327759,327764]},{"pos":[327773,327785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[327791,327812],"content":"Method setReturnValue","linkify":"Method setReturnValue","nodes":[{"content":"Method setReturnValue","pos":[0,21]}]},{"content":"Sets the publisher's return value.","pos":[327814,327848]},{"pos":[327902,327912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"retval","pos":[327914,327920]},{"pos":[327929,327941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An int data type value of 1.","pos":[327943,327971]},{"pos":[327978,327985],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is not intended for pre-handlers or for publishers that return void.","pos":[327987,328067]},{"pos":[328073,328087],"content":"Method isFirst","linkify":"Method isFirst","nodes":[{"content":"Method isFirst","pos":[0,14]}]},{"pos":[328120,328132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[328138,328158],"content":"Method setCalledWhen","linkify":"Method setCalledWhen","nodes":[{"content":"Method setCalledWhen","pos":[0,20]}]},{"content":"Sets whether the instance is currently serving a pre-handler or a post-handler.","pos":[328160,328239]},{"pos":[328315,328325],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"calledWhen","pos":[328327,328337]},{"pos":[328346,328353],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method must never be called explicitly from the pre-handler or post-handler code.","pos":[328355,328441]},{"content":"This method is reserved for unit testing and auto-generated code only.","pos":[328442,328512]},{"pos":[328518,328541],"content":"Method setReturnValueEx","linkify":"Method setReturnValueEx","nodes":[{"content":"Method setReturnValueEx","pos":[0,23]}]},{"pos":[328626,328636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"retval","pos":[328638,328644]},{"content":"args","pos":[328658,328662]},{"pos":[328670,328680],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[328682,328729]},{"pos":[328828,328838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"thisPtr","pos":[328840,328847]},{"content":"args","pos":[328861,328865]},{"content":"calledWhen","pos":[328879,328889]},{"pos":[328896,328909],"content":"Class xRecord","linkify":"Class xRecord","nodes":[{"content":"Class xRecord","pos":[0,13]}]},{"pos":[328948,328955],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[328961,328969],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[328975,328982],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[328986,328992]},{"content":"Description","pos":[329111,329122]},{"content":"public boolean aosValidateDelete()","pos":[329498,329532]},{"content":"Validates on the server that the specified record can be deleted from a table.","pos":[329623,329701]},{"content":"public boolean aosValidateInsert()","pos":[329754,329788]},{"content":"Validates on the server that the specified record can be inserted.","pos":[329879,329945]},{"content":"public boolean aosValidateRead()","pos":[330010,330042]},{"content":"Validates on the server that the specified record can be read.","pos":[330135,330197]},{"content":"public boolean aosValidateUpdate()","pos":[330266,330300]},{"content":"Validates on the server that the specified record can be updated.","pos":[330391,330456]},{"content":"public container buf2con(<ph id=\"ph1\">\\[</ph>boolean packOrigBuffer<ph id=\"ph2\">\\]</ph>)","pos":[330522,330574],"source":"public container buf2con(\\[boolean packOrigBuffer\\])"},{"content":"Packs the table buffers of an xRecord instance into an X++ container.","pos":[330647,330716]},{"content":"public boolean canSubmitToWorkflow(<ph id=\"ph1\">\\[</ph>str workflowType<ph id=\"ph2\">\\]</ph>)","pos":[330778,330834],"source":"public boolean canSubmitToWorkflow(\\[str workflowType\\])"},{"content":"Indicates whether submission to workflow is possible.","pos":[330903,330956]},{"content":"public str caption()","pos":[331034,331054]},{"content":"Gets and sets the caption property of a table.","pos":[331159,331205]},{"content":"public boolean checkInvalidFieldAccess(<ph id=\"ph1\">\\[</ph>boolean checkInvalidFieldAccess<ph id=\"ph2\">\\]</ph>)","pos":[331290,331365],"source":"public boolean checkInvalidFieldAccess(\\[boolean checkInvalidFieldAccess\\])"},{"content":"Gets and sets invalid field access.","pos":[331415,331450]},{"content":"public boolean checkRecord(<ph id=\"ph1\">\\[</ph>boolean checkMandatoryFields<ph id=\"ph2\">\\]</ph>)","pos":[331546,331606],"source":"public boolean checkRecord(\\[boolean checkMandatoryFields\\])"},{"content":"Gets and sets the property that indicates whether to check mandatory fields.","pos":[331671,331747]},{"content":"public boolean checkRestrictedDeleteActions(<ph id=\"ph1\">\\[</ph>boolean checkRestrictedDeleteActions<ph id=\"ph2\">\\]</ph>)","pos":[331802,331887],"source":"public boolean checkRestrictedDeleteActions(\\[boolean checkRestrictedDeleteActions\\])"},{"content":"Gets and sets the property that indicates whether a record can be deleted.","pos":[331927,332001]},{"content":"public SelectableDataArea company(<ph id=\"ph1\">\\[</ph>SelectableDataArea company<ph id=\"ph2\">\\]</ph>)","pos":[332058,332123],"source":"public SelectableDataArea company(\\[SelectableDataArea company\\])"},{"content":"Gets and sets the property that indicates a legal entity for the record.","pos":[332183,332255]},{"content":"public Common con2buf(container container)","pos":[332314,332356]},{"content":"Unpacks a container into the table buffers.","pos":[332439,332482]},{"content":"public ConcurrencyModel concurrencyModel(<ph id=\"ph1\">\\[</ph>ConcurrencyModel concurrencyModel<ph id=\"ph2\">\\]</ph>)","pos":[332570,332649],"source":"public ConcurrencyModel concurrencyModel(\\[ConcurrencyModel concurrencyModel\\])"},{"content":"Gets and sets the default concurrency model to use to update records.","pos":[332695,332764]},{"content":"public int context(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[332826,332862],"source":"public int context(\\[int newValue\\])"},{"content":"Gets and sets the context property.","pos":[332951,332986]},{"content":"public Common data(<ph id=\"ph1\">\\[</ph>Common cursor<ph id=\"ph2\">\\]</ph>)","pos":[333082,333119],"source":"public Common data(\\[Common cursor\\])"},{"content":"Retrieves a row from the table.","pos":[333207,333238]},{"content":"public FormObjectSet dataSource()","pos":[333338,333371]},{"content":"Retrieves the data source of the table.","pos":[333463,333502]},{"content":"public boolean disableCache(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[333594,333643],"source":"public boolean disableCache(\\[boolean newValue\\])"},{"content":"Gets and sets the property that indicates whether caching is disabled.","pos":[333719,333789]},{"content":"public boolean doValidateDelete()","pos":[333850,333883]},{"content":"Performs the action to validate that a record can be deleted.","pos":[333975,334036]},{"content":"public boolean equal(Common cursor)","pos":[334106,334141]},{"content":"Determines whether the specified object is equal to the current one.","pos":[334231,334299]},{"content":"public AccessRight fieldAccessRight(FieldName fieldName)","pos":[334362,334418]},{"content":"Returns the field access right.","pos":[334487,334518]},{"content":"public AccessRight fieldBufferAccessRight(FieldName fieldName)","pos":[334618,334680]},{"content":"Returns the field access right for the current record.","pos":[334743,334797]},{"content":"public FieldState fieldState(FieldId fieldId, <ph id=\"ph1\">\\[</ph>FieldState state<ph id=\"ph2\">\\]</ph>)","pos":[334874,334941],"source":"public FieldState fieldState(FieldId fieldId, \\[FieldState state\\])"},{"content":"Sets or returns the state of a field in the table buffer.","pos":[334999,335056]},{"content":"public container getAllowRedefault()","pos":[335130,335166]},{"content":"Returns the list of fields that are allowed to re-default.","pos":[335255,335313]},{"content":"public container getDefaultingDependencies()","pos":[335386,335430]},{"content":"Returns the container that holds defaulting dependencies.","pos":[335511,335568]},{"content":"public TableExtension getExtension()","pos":[335642,335678]},{"content":"Returns the table extension.","pos":[335767,335795]},{"content":"public AnyType getFieldValue(str fieldName, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[335898,335961],"source":"public AnyType getFieldValue(str fieldName, \\[int arrayIndex\\])"},{"content":"Gets the value of the specified field from a table buffer.","pos":[336023,336081]},{"content":"public str getInstanceRelationType()","pos":[336154,336190]},{"content":"Returns the table name that corresponds to the InstanceRelationType ID.","pos":[336279,336350]},{"content":"public str getPhysicalTableName()","pos":[336410,336443]},{"content":"Return the physical table name, which, in the case of the SQL Temp DB table, is the table instance name.","pos":[336535,336639]},{"content":"public PresenceInfo getPresenceFieldData(FieldId fieldId, AnyType fieldValue)","pos":[336666,336743]},{"content":"Retrieves the PresenceInfo value from the specified field.","pos":[336791,336849]},{"content":"public str getSQLStatement()","pos":[336922,336950]},{"content":"Gets the SQL statement that is used to return records from the database.","pos":[337047,337119]},{"content":"public Common getTableInInstanceHierarchy(TableId tableId)","pos":[337178,337236]},{"content":"public TableType getTableType()","pos":[337434,337465]},{"content":"Indicates the type of the table.","pos":[337559,337591]},{"content":"public boolean hasRelatedTable(str relatedRoleName)","pos":[337690,337741]},{"content":"Indicates whether a foreign key constraint buffer is linked with the table.","pos":[337815,337890]},{"content":"public str helpField(FieldId fieldId)","pos":[337946,337983]},{"content":"Retrieves a string that contains the Help text for the specified field.","pos":[338071,338142]},{"content":"public FieldState inputStatus(<ph id=\"ph1\">\\[</ph>FieldState inputStatus<ph id=\"ph2\">\\]</ph>)","pos":[338202,338259],"source":"public FieldState inputStatus(\\[FieldState inputStatus\\])"},{"content":"Sets or returns the current input status of the table buffer.","pos":[338327,338388]},{"content":"public boolean interactiveContext(<ph id=\"ph1\">\\[</ph>boolean context<ph id=\"ph2\">\\]</ph>)","pos":[338458,338512],"source":"public boolean interactiveContext(\\[boolean context\\])"},{"content":"Sets or returns the current interactive context of the table buffer.","pos":[338583,338651]},{"content":"public boolean isFieldDataRetrieved(str fieldName, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[338714,338784],"source":"public boolean isFieldDataRetrieved(str fieldName, \\[int arrayIndex\\])"},{"content":"Checks whether the data of the given field has been retrieved.","pos":[338839,338901]},{"content":"public boolean isFieldSet(FieldId fieldId)","pos":[338970,339012]},{"content":"Checks whether a field has a Set or Defaulted state.","pos":[339095,339147]},{"content":"public boolean isFormDataSource()","pos":[339226,339259]},{"content":"Indicates whether the data source is a form.","pos":[339351,339395]},{"content":"public boolean isNewRecord()","pos":[339482,339510]},{"content":"Returns true if the record is a new record that hasn't been persisted yet.","pos":[339607,339681]},{"content":"public boolean isPartOfUOWSaveChanges()","pos":[339738,339777]},{"content":"public boolean isTempDb()","pos":[339994,340019]},{"content":"Indicates whether the type of the table is SQL TempDB.","pos":[340119,340173]},{"content":"public boolean isTmp()","pos":[340250,340272]},{"content":"Indicates whether this is a temporary table.","pos":[340375,340419]},{"content":"public Common joinChild()","pos":[340506,340531]},{"content":"Finds the join child of the current record.","pos":[340631,340674]},{"content":"public Common joinParent()","pos":[340762,340788]},{"content":"Finds the join parent of the current record.","pos":[340887,340931]},{"content":"public boolean linkPhysicalTableInstance(<ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>)","pos":[341018,341077],"source":"public boolean linkPhysicalTableInstance(\\[Common record\\])"},{"content":"Checks whether there is a link for the physical table instance for the record.","pos":[341143,341221]},{"content":"public Common orig()","pos":[341274,341294]},{"content":"Retrieves the original values of the current record.","pos":[341399,341451]},{"content":"public boolean overwriteSystemfields(<ph id=\"ph1\">\\[</ph>boolean allowOverwrite<ph id=\"ph2\">\\]</ph>)","pos":[341530,341594],"source":"public boolean overwriteSystemfields(\\[boolean allowOverwrite\\])"},{"content":"Gets and sets the property that indicates whether system fields can be overwritten.","pos":[341655,341738]},{"content":"public boolean queryTimedOut()","pos":[341786,341816]},{"content":"Indicates whether the query exceeded the time limit for execution.","pos":[341911,341977]},{"content":"public int queryTimeout(<ph id=\"ph1\">\\[</ph>int seconds<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean raiseException<ph id=\"ph4\">\\]</ph>)","pos":[342042,342110],"source":"public int queryTimeout(\\[int seconds\\], \\[boolean raiseException\\])"},{"content":"Gets and sets the property that indicates the time limit for the execution of a query.","pos":[342167,342253]},{"content":"public boolean readCommittedLock(<ph id=\"ph1\">\\[</ph>boolean readCommittedLock<ph id=\"ph2\">\\]</ph>)","pos":[342298,342361],"source":"public boolean readCommittedLock(\\[boolean readCommittedLock\\])"},{"content":"public boolean readPast(<ph id=\"ph1\">\\[</ph>boolean skipLockedRows<ph id=\"ph2\">\\]</ph>)","pos":[342554,342605],"source":"public boolean readPast(\\[boolean skipLockedRows\\])"},{"content":"Gets and sets the property that indicates whether to skip rows that are locked by other processes when a record is read.","pos":[342679,342799]},{"content":"public boolean recordLevelSecurity(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[342810,342866],"source":"public boolean recordLevelSecurity(\\[boolean newValue\\])"},{"content":"Gets and sets the property that indicates whether to apply security on a record level.","pos":[342935,343021]},{"content":"public Common relatedTable(str name, <ph id=\"ph1\">\\[</ph>Common buffer<ph id=\"ph2\">\\]</ph>)","pos":[343066,343121],"source":"public Common relatedTable(str name, \\[Common buffer\\])"},{"content":"Sets or returns the related buffer of a link of a table buffer.","pos":[343191,343254]},{"content":"public Int64 RowCount()","pos":[343322,343345]},{"content":"Retrieves the number of rows in the table.","pos":[343447,343489]},{"content":"public boolean selectForUpdate(<ph id=\"ph1\">\\[</ph>boolean lockRecordsExclusive<ph id=\"ph2\">\\]</ph>)","pos":[343578,343642],"source":"public boolean selectForUpdate(\\[boolean lockRecordsExclusive\\])"},{"content":"Gets and sets the property that indicates whether to select records for update when they are read.","pos":[343703,343801]},{"content":"public boolean selectLocked(<ph id=\"ph1\">\\[</ph>boolean lockRecordsShared<ph id=\"ph2\">\\]</ph>)","pos":[343834,343892],"source":"public boolean selectLocked(\\[boolean lockRecordsShared\\])"},{"content":"Indicates whether to select locked records.","pos":[343959,344002]},{"content":"public Common selectRefRecord(FieldId referenceFieldId)","pos":[344090,344145]},{"content":"Selects the record by referenced field ID.","pos":[344215,344257]},{"content":"public boolean selectWithRepeatableRead(<ph id=\"ph1\">\\[</ph>boolean useRepeatableRead<ph id=\"ph2\">\\]</ph>)","pos":[344346,344416],"source":"public boolean selectWithRepeatableRead(\\[boolean useRepeatableRead\\])"},{"content":"Gets and sets the property that indicates whether repeatable read is enabled.","pos":[344471,344548]},{"content":"public boolean setTempDB()","pos":[344602,344628]},{"content":"public boolean setTmp()","pos":[344858,344881]},{"content":"Sets the table so that it is not persisted to the database.","pos":[344983,345042]},{"content":"public boolean skipAosValidation(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[345114,345168],"source":"public boolean skipAosValidation(\\[boolean newValue\\])"},{"content":"Gets and sets the property that indicates whether to skip validation of Finance and Operations Application Object Server (AOS).","pos":[345239,345366]},{"content":"public boolean skipDatabaseLog(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[345371,345423],"source":"public boolean skipDatabaseLog(\\[boolean newValue\\])"},{"content":"Gets and sets the property that indicates whether to skip database log requests.","pos":[345496,345576]},{"content":"public boolean skipDataMethods(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[345627,345679],"source":"public boolean skipDataMethods(\\[boolean newValue\\])"},{"content":"Gets and sets the property that indicates whether to discard overloaded methods.","pos":[345752,345832]},{"content":"public boolean skipDeleteActions(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[345883,345937],"source":"public boolean skipDeleteActions(\\[boolean newValue\\])"},{"content":"Gets and sets the property that indicates whether to skip delete actions on the table.","pos":[346008,346094]},{"content":"public boolean skipDeleteMethod(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[346139,346192],"source":"public boolean skipDeleteMethod(\\[boolean newValue\\])"},{"content":"Gets and sets the property that indicates whether to discard overloaded methods.","pos":[346264,346344]},{"content":"public boolean skipEvents(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[346395,346442],"source":"public boolean skipEvents(\\[boolean newValue\\])"},{"content":"Provides an option to turn off calling the Application.event<ph id=\"ph1\">\\*</ph> methods for the lifetime of an xRecord object.","pos":[346520,346629],"source":"Provides an option to turn off calling the Application.event\\* methods for the lifetime of an xRecord object."},{"content":"public boolean skipPostLoad(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[346651,346700],"source":"public boolean skipPostLoad(\\[boolean newValue\\])"},{"content":"Gets and sets the property that indicates whether to skip executing the xRecord.postLoad method on the table.","pos":[346776,346885]},{"content":"public boolean skipTTSCheck(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[346907,346956],"source":"public boolean skipTTSCheck(\\[boolean newValue\\])"},{"content":"Gets and sets the property that indicates whether to skip the check to determine whether the record is selected for update.","pos":[347032,347155]},{"content":"public boolean suppressWarnings(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[347163,347216],"source":"public boolean suppressWarnings(\\[boolean newValue\\])"},{"content":"Gets and sets the property that indicates whether to suppress warnings for this pointer.","pos":[347288,347376]},{"content":"public AccessRight tableAccessRight()","pos":[347419,347456]},{"content":"Returns the table access right.","pos":[347544,347575]},{"content":"public AccessRight tableBufferAccessRight()","pos":[347675,347718]},{"content":"Returns the table access right for the current record.","pos":[347800,347854]},{"content":"public boolean takeOwnershipOfTempDBTable(boolean newValue)","pos":[347931,347990]},{"content":"public str toolTipField(FieldId fieldId)","pos":[348187,348227]},{"content":"Retrieves the HelpText value for the specified field.","pos":[348312,348365]},{"content":"public str toolTipRecord()","pos":[348443,348469]},{"content":"Retrieves the ToolTip value for the current record.","pos":[348568,348619]},{"content":"public int usageCount()","pos":[348699,348722]},{"content":"Retrieves the current number of references (the value of the reference counter) that the object has.","pos":[348824,348924]},{"content":"public boolean useExistingTempDBTable(str physicalTempTableName)","pos":[348955,349019]},{"content":"public boolean validateDelete()","pos":[349211,349242]},{"content":"Determines whether the current record is valid and ready to be deleted from the database.","pos":[349336,349425]},{"content":"public boolean validateField(FieldId fieldIdToCheck)","pos":[349467,349519]},{"content":"Determines whether the specified field is valid.","pos":[349592,349640]},{"content":"public boolean validateFieldValue(FieldName fieldName, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[349723,349797],"source":"public boolean validateFieldValue(FieldName fieldName, \\[int arrayIndex\\])"},{"content":"private container validateRelations(<ph id=\"ph1\">\\[</ph>boolean onlyValidateCompositeRelations<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean onlyValidateModifiedRelations<ph id=\"ph4\">\\]</ph>)","pos":[349979,350101],"source":"private container validateRelations(\\[boolean onlyValidateCompositeRelations\\], \\[boolean onlyValidateModifiedRelations\\])"},{"content":"public boolean validateWrite()","pos":[350235,350265]},{"content":"Determines whether the current record is valid and ready to be written.","pos":[350360,350431]},{"content":"public ValidTimeStateUpdate validTimeStateUpdateMode(ValidTimeStateUpdate validTimeStateUpdateMode)","pos":[350491,350590]},{"content":"Sets a valid time state update mode on the cursor.","pos":[350616,350666]},{"content":"public CachedHow wasCached()","pos":[350747,350775]},{"content":"Specifies the location from which the data was retrieved.","pos":[350872,350929]},{"content":"public str xml(<ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[351003,351033],"source":"public str xml(\\[int indent\\])"},{"content":"Retrieves an XML string that represents the current object.","pos":[351128,351187]},{"content":"public void doDelete()","pos":[351259,351281]},{"content":"Deletes the current record from the table and bypasses any additional logic in the delete method of the table.","pos":[351384,351494]},{"content":"public void update()","pos":[351515,351535]},{"content":"Updates the current record.","pos":[351640,351667]},{"content":"public void merge(Common mergeInto)","pos":[351771,351806]},{"content":"Merges the current table with the specified table.","pos":[351896,351946]},{"content":"public void clear()","pos":[352027,352046]},{"content":"Removes all rows from the table buffer.","pos":[352152,352191]},{"content":"public void setXDSContext(<ph id=\"ph1\">\\[</ph>str contextString<ph id=\"ph2\">\\]</ph>)","pos":[352283,352331],"source":"public void setXDSContext(\\[str contextString\\])"},{"content":"Sets new XDS context.","pos":[352408,352429]},{"content":"public void renamePrimaryKey()","pos":[352539,352569]},{"content":"Renames the foreign keys in other tables according to the change of the corresponding primary key value in this table.","pos":[352664,352782]},{"content":"public void dispose()","pos":[352795,352816]},{"content":"Releases resources that are used by the xRecord object.","pos":[352920,352975]},{"content":"public void setConnection(Connection connection)","pos":[353051,353099]},{"content":"Sets the user connection for this table.","pos":[353176,353216]},{"content":"public void delete()","pos":[353307,353327]},{"content":"Deletes the current record from the table.","pos":[353432,353474]},{"content":"public void defaultField(FieldId fieldId)","pos":[353563,353604]},{"content":"Populates default values in a field in the table.","pos":[353688,353737]},{"content":"private void dbOpInTransaction(<ph id=\"ph1\">\\[</ph>boolean isWriteOperation<ph id=\"ph2\">\\]</ph>)","pos":[353819,353879],"source":"private void dbOpInTransaction(\\[boolean isWriteOperation\\])"},{"content":"Makes sure that database operations are correctly closed if they fail.","pos":[353944,354014]},{"content":"public void write()","pos":[354075,354094]},{"content":"Updates a record if it exists; otherwise, inserts a record.","pos":[354200,354259]},{"content":"public void preRemoting()","pos":[354331,354356]},{"content":"Is executed before a cross-tier call is about to be executed for the table that would pack its state to the other tier.","pos":[354456,354575]},{"content":"public void modifiedFieldValue(FieldName fieldName, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[354587,354658],"source":"public void modifiedFieldValue(FieldName fieldName, \\[int arrayIndex\\])"},{"content":"Modifies the specified field to the original value.","pos":[354712,354763]},{"content":"public void defaultRow()","pos":[354843,354867]},{"content":"Populates default values in fields in the table in the non-interactive case.","pos":[354968,355044]},{"content":"public void reread()","pos":[355099,355119]},{"content":"Rereads the record from the table.","pos":[355224,355258]},{"content":"public void modifiedField(FieldId fieldId)","pos":[355355,355397]},{"content":"Modifies the specified field to the original.","pos":[355480,355525]},{"content":"public void ttsabort()","pos":[355611,355633]},{"content":"Aborts a transaction that was started by a call to the ttsbegin method.","pos":[355736,355807]},{"content":"public void insert()","pos":[355867,355887]},{"content":"Inserts the record into the table.","pos":[355992,356026]},{"content":"public void doClear()","pos":[356123,356144]},{"content":"Removes all rows from the table buffer and bypasses any additional logic in the clear method of the table.","pos":[356248,356354]},{"content":"public void initValue()","pos":[356379,356402]},{"content":"Initializes a field to the default value.","pos":[356504,356545]},{"content":"public void doUpdate()","pos":[356635,356657]},{"content":"Updates the current record and bypasses any additional logic in the update method of the table.","pos":[356760,356855]},{"content":"public void ttsbegin()","pos":[356891,356913]},{"content":"Starts a transaction that can be either committed by the ttscommit method or aborted by the ttsabort method.","pos":[357016,357124]},{"content":"public void setCrossPartition(boolean newValue)","pos":[357147,357194]},{"content":"Sets or resets cross-partitioning for the table.","pos":[357272,357320]},{"content":"public void setTmpData(Common cursor)","pos":[357403,357440]},{"content":"Sets the contents of the temporary table to the specified data.","pos":[357528,357591]},{"content":"public void ttscommit()","pos":[357659,357682]},{"content":"Commits a transaction that was started by a call to the ttsbegin method.","pos":[357784,357856]},{"content":"public void setFieldValue(str fieldName, AnyType value, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[357915,357990],"source":"public void setFieldValue(str fieldName, AnyType value, \\[int arrayIndex\\])"},{"content":"Sets the field value in the record buffer.","pos":[358040,358082]},{"content":"public void doInsert()","pos":[358171,358193]},{"content":"Inserts the record into the table and bypasses any additional logic in the insert method of the table.","pos":[358296,358398]},{"content":"public void setSQLTracing(<ph id=\"ph1\">\\[</ph>boolean tracingmode<ph id=\"ph2\">\\]</ph>)","pos":[358427,358477],"source":"public void setSQLTracing(\\[boolean tracingmode\\])"},{"content":"Enables or disables SQL tracing mode.","pos":[358552,358589]},{"content":"public void postLoad()","pos":[358683,358705]},{"content":"Is executed after a record is read.","pos":[358808,358843]},{"pos":[358942,358966],"content":"Method aosValidateDelete","linkify":"Method aosValidateDelete","nodes":[{"content":"Method aosValidateDelete","pos":[0,24]}]},{"content":"Validates on the server that the specified record can be deleted from a table.","pos":[358968,359046]},{"pos":[359093,359105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the record can be deleted; otherwise, false.","pos":[359107,359159]},{"pos":[359165,359189],"content":"Method aosValidateInsert","linkify":"Method aosValidateInsert","nodes":[{"content":"Method aosValidateInsert","pos":[0,24]}]},{"content":"Validates on the server that the specified record can be inserted.","pos":[359191,359257]},{"pos":[359304,359316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the record can be inserted; otherwise, false.","pos":[359318,359371]},{"pos":[359377,359399],"content":"Method aosValidateRead","linkify":"Method aosValidateRead","nodes":[{"content":"Method aosValidateRead","pos":[0,22]}]},{"content":"Validates on the server that the specified record can be read.","pos":[359401,359463]},{"pos":[359508,359520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the record can be read; otherwise, false.","pos":[359522,359571]},{"pos":[359577,359601],"content":"Method aosValidateUpdate","linkify":"Method aosValidateUpdate","nodes":[{"content":"Method aosValidateUpdate","pos":[0,24]}]},{"content":"Validates on the server that the specified record can be updated.","pos":[359603,359668]},{"pos":[359715,359727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the record can be updated; otherwise, false.","pos":[359729,359781]},{"pos":[359787,359801],"content":"Method buf2con","linkify":"Method buf2con","nodes":[{"content":"Method buf2con","pos":[0,14]}]},{"content":"Packs the table buffers of an xRecord instance into an X++ container.","pos":[359803,359872]},{"pos":[359935,359945],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packOrigBuffer","pos":[359947,359961]},{"pos":[359970,359982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that holds packed buffers.","pos":[359984,360022]},{"pos":[360028,360054],"content":"Method canSubmitToWorkflow","linkify":"Method canSubmitToWorkflow","nodes":[{"content":"Method canSubmitToWorkflow","pos":[0,26]}]},{"content":"Indicates whether submission to workflow is possible.","pos":[360056,360109]},{"pos":[360176,360186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"workflowType","pos":[360188,360200]},{"pos":[360209,360221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if submission is possible; otherwise, false.","pos":[360223,360272]},{"pos":[360278,360292],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets and sets the caption property of a table.","pos":[360294,360340]},{"pos":[360373,360385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The caption of the table.","pos":[360387,360412]},{"pos":[360418,360448],"content":"Method checkInvalidFieldAccess","linkify":"Method checkInvalidFieldAccess","nodes":[{"content":"Method checkInvalidFieldAccess","pos":[0,30]}]},{"content":"Gets and sets invalid field access.","pos":[360450,360485]},{"pos":[360571,360581],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"checkInvalidFieldAccess","pos":[360583,360606]},{"content":"The value to set; optional.","pos":[360609,360636]},{"pos":[360643,360655],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if invalid field access is set; otherwise, false.","pos":[360657,360711]},{"pos":[360717,360735],"content":"Method checkRecord","linkify":"Method checkRecord","nodes":[{"content":"Method checkRecord","pos":[0,18]}]},{"content":"Gets and sets the property that indicates whether to check mandatory fields.","pos":[360737,360813]},{"pos":[360884,360894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"checkMandatoryFields","pos":[360896,360916]},{"content":"A Boolean value that indicates whether to check mandatory fields; optional.","pos":[360919,360994]},{"pos":[361001,361013],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if mandatory fields are checked; otherwise, false.","pos":[361015,361070]},{"pos":[361076,361111],"content":"Method checkRestrictedDeleteActions","linkify":"Method checkRestrictedDeleteActions","nodes":[{"content":"Method checkRestrictedDeleteActions","pos":[0,35]}]},{"content":"Gets and sets the property that indicates whether a record can be deleted.","pos":[361113,361187]},{"pos":[361283,361293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"checkRestrictedDeleteActions","pos":[361295,361323]},{"content":"A Boolean value that indicates whether a record can be deleted; optional.","pos":[361326,361399]},{"pos":[361406,361418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the record can be deleted; otherwise, false.","pos":[361420,361472]},{"pos":[361479,361486],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The property is based on delete actions for a table, and whether the table allows for delete actions when corresponding records are in corresponding tables.","pos":[361488,361644]},{"pos":[361650,361664],"content":"Method company","linkify":"Method company","nodes":[{"content":"Method company","pos":[0,14]}]},{"content":"Gets and sets the property that indicates a legal entity for the record.","pos":[361666,361738]},{"pos":[361814,361824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"company","pos":[361826,361833]},{"content":"A new legal entity for the record; optional.","pos":[361836,361880]},{"pos":[361887,361899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The legal entity ID.","pos":[361901,361921]},{"pos":[361927,361941],"content":"Method con2buf","linkify":"Method con2buf","nodes":[{"content":"Method con2buf","pos":[0,14]}]},{"content":"Unpacks a container into the table buffers.","pos":[361943,361986]},{"pos":[362041,362051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[362053,362062]},{"pos":[362071,362083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362089,362112],"content":"Method concurrencyModel","linkify":"Method concurrencyModel","nodes":[{"content":"Method concurrencyModel","pos":[0,23]}]},{"content":"Gets and sets the default concurrency model to use to update records.","pos":[362114,362183]},{"pos":[362273,362283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"concurrencyModel","pos":[362285,362301]},{"content":"The new concurrency model, by default; optional.","pos":[362304,362352]},{"pos":[362359,362371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the concurrency model property, by default.","pos":[362373,362437]},{"pos":[362443,362457],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Gets and sets the context property.","pos":[362459,362494]},{"pos":[362541,362551],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[362553,362561]},{"content":"The new value of the context property; optional.","pos":[362564,362612]},{"pos":[362619,362631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the context property.","pos":[362633,362675]},{"pos":[362681,362692],"content":"Method data","linkify":"Method data","nodes":[{"content":"Method data","pos":[0,11]}]},{"content":"Retrieves a row from the table.","pos":[362694,362725]},{"pos":[362773,362783],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cursor","pos":[362785,362791]},{"content":"The row to retrieve; optional.","pos":[362794,362824]},{"pos":[362831,362843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The record buffer.","pos":[362845,362863]},{"pos":[362870,362877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Partly because scenarios that involve table inheritance, we recommend that you instead use the following methods on the Global class: con2buf, buf2con, and buf2buf.","pos":[362879,363043]},{"pos":[363049,363066],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Retrieves the data source of the table.","pos":[363068,363107]},{"pos":[363153,363165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The data source of the table.","pos":[363167,363196]},{"pos":[363202,363221],"content":"Method disableCache","linkify":"Method disableCache","nodes":[{"content":"Method disableCache","pos":[0,19]}]},{"content":"Gets and sets the property that indicates whether caching is disabled.","pos":[363223,363293]},{"pos":[363353,363363],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[363365,363373]},{"content":"A Boolean value that indicates whether caching is disabled.","pos":[363376,363435]},{"pos":[363442,363454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new value of the disable cache property.","pos":[363456,363500]},{"pos":[363506,363529],"content":"Method doValidateDelete","linkify":"Method doValidateDelete","nodes":[{"content":"Method doValidateDelete","pos":[0,23]}]},{"content":"Performs the action to validate that a record can be deleted.","pos":[363531,363592]},{"pos":[363638,363650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363656,363668],"content":"Method equal","linkify":"Method equal","nodes":[{"content":"Method equal","pos":[0,12]}]},{"content":"Determines whether the specified object is equal to the current one.","pos":[363670,363738]},{"pos":[363786,363796],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cursor","pos":[363798,363804]},{"content":"The object to check for equality.","pos":[363807,363840]},{"pos":[363847,363859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the objects are equal; otherwise, false.","pos":[363861,363909]},{"pos":[363916,363923],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is overridden.","pos":[363925,363951]},{"content":"The default implementation of the Object::equal method supports only reference equality.","pos":[363952,364040]},{"content":"Derived classes can override the Object::equal method to support value equality.","pos":[364041,364121]},{"pos":[364127,364150],"content":"Method fieldAccessRight","linkify":"Method fieldAccessRight","nodes":[{"content":"Method fieldAccessRight","pos":[0,23]}]},{"content":"Returns the field access right.","pos":[364152,364183]},{"pos":[364252,364262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[364264,364273]},{"content":"The name of the field for which to obtain the field access right.","pos":[364276,364341]},{"pos":[364348,364360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The field access right for the field.","pos":[364362,364399]},{"pos":[364405,364434],"content":"Method fieldBufferAccessRight","linkify":"Method fieldBufferAccessRight","nodes":[{"content":"Method fieldBufferAccessRight","pos":[0,29]}]},{"content":"Returns the field access right for the current record.","pos":[364436,364490]},{"pos":[364565,364575],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[364577,364586]},{"content":"The name of the field for which to obtain the field access right.","pos":[364589,364654]},{"pos":[364661,364673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The field access right.","pos":[364675,364698]},{"pos":[364704,364721],"content":"Method fieldState","linkify":"Method fieldState","nodes":[{"content":"Method fieldState","pos":[0,17]}]},{"content":"Sets or returns the state of a field in the table buffer.","pos":[364723,364780]},{"pos":[364858,364868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[364870,364877]},{"content":"state","pos":[364891,364896]},{"pos":[364905,364917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The old state of the field.","pos":[364919,364946]},{"pos":[364952,364976],"content":"Method getAllowRedefault","linkify":"Method getAllowRedefault","nodes":[{"content":"Method getAllowRedefault","pos":[0,24]}]},{"content":"Returns the list of fields that are allowed to re-default.","pos":[364978,365036]},{"pos":[365085,365097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the fields.","pos":[365099,365135]},{"pos":[365141,365173],"content":"Method getDefaultingDependencies","linkify":"Method getDefaultingDependencies","nodes":[{"content":"Method getDefaultingDependencies","pos":[0,32]}]},{"content":"Returns the container that holds defaulting dependencies.","pos":[365175,365232]},{"pos":[365289,365301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds defaulting dependencies.","pos":[365303,365352]},{"pos":[365358,365377],"content":"Method getExtension","linkify":"Method getExtension","nodes":[{"content":"Method getExtension","pos":[0,19]}]},{"content":"Returns the table extension.","pos":[365379,365407]},{"pos":[365456,365468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The table extension.","pos":[365470,365490]},{"pos":[365496,365516],"content":"Method getFieldValue","linkify":"Method getFieldValue","nodes":[{"content":"Method getFieldValue","pos":[0,20]}]},{"content":"Gets the value of the specified field from a table buffer.","pos":[365518,365576]},{"pos":[365650,365660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[365662,365671]},{"content":"The array index of the field; optional.","pos":[365674,365713]},{"content":"arrayIndex","pos":[365725,365735]},{"content":"The array index of the field; optional.","pos":[365738,365777]},{"pos":[365784,365796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of a field.","pos":[365798,365819]},{"pos":[365826,365833],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The arrayIndex parameter only applies to array fields.","pos":[365835,365889]},{"content":"Either omit this parameter or specify 0 (zero) for fields that are not arrays.This method throws an ArgumentOutOfRange exception if the specified field is unknown.","pos":[365890,366053]},{"pos":[366059,366089],"content":"Method getInstanceRelationType","linkify":"Method getInstanceRelationType","nodes":[{"content":"Method getInstanceRelationType","pos":[0,30]}]},{"content":"Returns the table name that corresponds to the InstanceRelationType ID.","pos":[366091,366162]},{"pos":[366211,366223],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The table name that corresponds to the InstanceRelationType ID.","pos":[366225,366288]},{"pos":[366294,366321],"content":"Method getPhysicalTableName","linkify":"Method getPhysicalTableName","nodes":[{"content":"Method getPhysicalTableName","pos":[0,27]}]},{"content":"Return the physical table name, which, in the case of the SQL Temp DB table, is the table instance name.","pos":[366323,366427]},{"pos":[366473,366485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The physical table name or the table instance name.","pos":[366487,366538]},{"pos":[366544,366571],"content":"Method getPresenceFieldData","linkify":"Method getPresenceFieldData","nodes":[{"content":"Method getPresenceFieldData","pos":[0,27]}]},{"content":"Retrieves the PresenceInfo value from the specified field.","pos":[366573,366631]},{"pos":[366721,366731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[366733,366740]},{"content":"fieldValue","pos":[366754,366764]},{"pos":[366773,366785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366791,366813],"content":"Method getSQLStatement","linkify":"Method getSQLStatement","nodes":[{"content":"Method getSQLStatement","pos":[0,22]}]},{"content":"Gets the SQL statement that is used to return records from the database.","pos":[366815,366887]},{"pos":[366928,366940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that contains the SQL statement.","pos":[366942,366985]},{"pos":[366991,367025],"content":"Method getTableInInstanceHierarchy","linkify":"Method getTableInInstanceHierarchy","nodes":[{"content":"Method getTableInInstanceHierarchy","pos":[0,34]}]},{"pos":[367096,367106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[367108,367115]},{"pos":[367124,367136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367142,367161],"content":"Method getTableType","linkify":"Method getTableType","nodes":[{"content":"Method getTableType","pos":[0,19]}]},{"content":"Indicates the type of the table.","pos":[367163,367195]},{"pos":[367239,367251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of the table (Regular, InMemory, or TempDB).","pos":[367253,367306]},{"pos":[367312,367334],"content":"Method hasRelatedTable","linkify":"Method hasRelatedTable","nodes":[{"content":"Method hasRelatedTable","pos":[0,22]}]},{"content":"Indicates whether a foreign key constraint buffer is linked with the table.","pos":[367336,367411]},{"pos":[367475,367485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"relatedRoleName","pos":[367487,367502]},{"pos":[367511,367523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a foreign key constraint buffer is linked with the table; otherwise, false.","pos":[367525,367608]},{"pos":[367614,367630],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves a string that contains the Help text for the specified field.","pos":[367632,367703]},{"pos":[367753,367763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[367765,367772]},{"content":"The field for which to retrieve the Help text.","pos":[367775,367821]},{"pos":[367828,367840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the specified field.","pos":[367842,367880]},{"pos":[367886,367904],"content":"Method inputStatus","linkify":"Method inputStatus","nodes":[{"content":"Method inputStatus","pos":[0,18]}]},{"content":"Sets or returns the current input status of the table buffer.","pos":[367906,367967]},{"pos":[368035,368045],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"inputStatus","pos":[368047,368058]},{"pos":[368067,368079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The old input status.","pos":[368081,368102]},{"pos":[368108,368133],"content":"Method interactiveContext","linkify":"Method interactiveContext","nodes":[{"content":"Method interactiveContext","pos":[0,25]}]},{"content":"Sets or returns the current interactive context of the table buffer.","pos":[368135,368203]},{"pos":[368268,368278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"context","pos":[368280,368287]},{"pos":[368296,368308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current interactive context of the table buffer.","pos":[368310,368362]},{"pos":[368368,368395],"content":"Method isFieldDataRetrieved","linkify":"Method isFieldDataRetrieved","nodes":[{"content":"Method isFieldDataRetrieved","pos":[0,27]}]},{"content":"Checks whether the data of the given field has been retrieved.","pos":[368397,368459]},{"pos":[368540,368550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[368552,368561]},{"content":"arrayIndex","pos":[368575,368585]},{"pos":[368594,368606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the data has been retrieved; otherwise, false.","pos":[368608,368662]},{"pos":[368668,368685],"content":"Method isFieldSet","linkify":"Method isFieldSet","nodes":[{"content":"Method isFieldSet","pos":[0,17]}]},{"content":"Checks whether a field has a Set or Defaulted state.","pos":[368687,368739]},{"pos":[368794,368804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[368806,368813]},{"pos":[368822,368834],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if field is has a Set or Defaulted state; otherwise, false.","pos":[368836,368900]},{"pos":[368906,368929],"content":"Method isFormDataSource","linkify":"Method isFormDataSource","nodes":[{"content":"Method isFormDataSource","pos":[0,23]}]},{"content":"Indicates whether the data source is a form.","pos":[368931,368975]},{"pos":[369021,369033],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the data source is a form; otherwise, false.","pos":[369035,369087]},{"pos":[369093,369111],"content":"Method isNewRecord","linkify":"Method isNewRecord","nodes":[{"content":"Method isNewRecord","pos":[0,18]}]},{"content":"Returns true if the record is a new record that hasn't been persisted yet.","pos":[369113,369187]},{"pos":[369228,369240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the record is a new record that hasn't been persisted yet; otherwise, false.","pos":[369242,369326]},{"pos":[369332,369361],"content":"Method isPartOfUOWSaveChanges","linkify":"Method isPartOfUOWSaveChanges","nodes":[{"content":"Method isPartOfUOWSaveChanges","pos":[0,29]}]},{"pos":[369413,369425],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369431,369446],"content":"Method isTempDb","linkify":"Method isTempDb","nodes":[{"content":"Method isTempDb","pos":[0,15]}]},{"content":"Indicates whether the type of the table is SQL TempDB.","pos":[369448,369502]},{"pos":[369540,369552],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the type of the table is SQL TempDB; otherwise, false.","pos":[369554,369616]},{"pos":[369622,369634],"content":"Method isTmp","linkify":"Method isTmp","nodes":[{"content":"Method isTmp","pos":[0,12]}]},{"content":"Indicates whether this is a temporary table.","pos":[369636,369680]},{"pos":[369715,369727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if this is a temporary table; otherwise, false.","pos":[369729,369781]},{"pos":[369787,369803],"content":"Method joinChild","linkify":"Method joinChild","nodes":[{"content":"Method joinChild","pos":[0,16]}]},{"content":"Finds the join child of the current record.","pos":[369805,369848]},{"pos":[369886,369898],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The join child of the current record.","pos":[369900,369937]},{"pos":[369943,369960],"content":"Method joinParent","linkify":"Method joinParent","nodes":[{"content":"Method joinParent","pos":[0,17]}]},{"content":"Finds the join parent of the current record.","pos":[369962,370006]},{"pos":[370045,370057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The join parent of the current record.","pos":[370059,370097]},{"pos":[370103,370135],"content":"Method linkPhysicalTableInstance","linkify":"Method linkPhysicalTableInstance","nodes":[{"content":"Method linkPhysicalTableInstance","pos":[0,32]}]},{"content":"Checks whether there is a link for the physical table instance for the record.","pos":[370137,370215]},{"pos":[370285,370295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[370297,370303]},{"pos":[370312,370324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether a link is available.","pos":[370326,370385]},{"pos":[370391,370402],"content":"Method orig","linkify":"Method orig","nodes":[{"content":"Method orig","pos":[0,11]}]},{"content":"Retrieves the original values of the current record.","pos":[370404,370456]},{"pos":[370489,370501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370508,370515],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Partly because of scenarios that involve table inheritance, we recommend that you instead use the following methods on the Global class: con2buf, buf2con, and buf2buf.","pos":[370517,370684]},{"pos":[370690,370718],"content":"Method overwriteSystemfields","linkify":"Method overwriteSystemfields","nodes":[{"content":"Method overwriteSystemfields","pos":[0,28]}]},{"content":"Gets and sets the property that indicates whether system fields can be overwritten.","pos":[370720,370803]},{"pos":[370878,370888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"allowOverwrite","pos":[370890,370904]},{"content":"A Boolean value that indicates whether system fields can be overwritten; optional.","pos":[370907,370989]},{"pos":[370996,371008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if system fields can be overwritten; otherwise, false.","pos":[371010,371069]},{"pos":[371075,371095],"content":"Method queryTimedOut","linkify":"Method queryTimedOut","nodes":[{"content":"Method queryTimedOut","pos":[0,20]}]},{"content":"Indicates whether the query exceeded the time limit for execution.","pos":[371097,371163]},{"pos":[371206,371218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the query exceeded the time limit for execution; otherwise, false.","pos":[371220,371294]},{"pos":[371300,371319],"content":"Method queryTimeout","linkify":"Method queryTimeout","nodes":[{"content":"Method queryTimeout","pos":[0,19]}]},{"content":"Gets and sets the property that indicates the time limit for the execution of a query.","pos":[371321,371407]},{"pos":[371484,371494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"seconds","pos":[371496,371503]},{"content":"raiseException","pos":[371517,371531]},{"pos":[371540,371552],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the query time-out property.","pos":[371554,371603]},{"pos":[371609,371633],"content":"Method readCommittedLock","linkify":"Method readCommittedLock","nodes":[{"content":"Method readCommittedLock","pos":[0,24]}]},{"pos":[371707,371717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"readCommittedLock","pos":[371719,371736]},{"pos":[371745,371757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371763,371778],"content":"Method readPast","linkify":"Method readPast","nodes":[{"content":"Method readPast","pos":[0,15]}]},{"content":"Gets and sets the property that indicates whether to skip rows that are locked by other processes when a record is read.","pos":[371780,371900]},{"pos":[371962,371972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"skipLockedRows","pos":[371974,371988]},{"content":"A Boolean value that indicates whether to skip rows that are locked; optional.","pos":[371991,372069]},{"pos":[372076,372088],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if locked rows should be skipped; otherwise, false.","pos":[372090,372146]},{"pos":[372152,372178],"content":"Method recordLevelSecurity","linkify":"Method recordLevelSecurity","nodes":[{"content":"Method recordLevelSecurity","pos":[0,26]}]},{"content":"Gets and sets the property that indicates whether to apply security on a record level.","pos":[372180,372266]},{"pos":[372333,372343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[372345,372353]},{"content":"A Boolean value that indicates whether to apply security on a record level; optional.","pos":[372356,372441]},{"pos":[372448,372460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if security should be applied on a record level; otherwise, false.","pos":[372462,372533]},{"pos":[372539,372558],"content":"Method relatedTable","linkify":"Method relatedTable","nodes":[{"content":"Method relatedTable","pos":[0,19]}]},{"content":"Sets or returns the related buffer of a link of a table buffer.","pos":[372560,372623]},{"pos":[372689,372699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[372701,372705]},{"content":"buffer","pos":[372719,372725]},{"pos":[372734,372746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The related buffer of a link of a table buffer.","pos":[372748,372795]},{"pos":[372801,372816],"content":"Method RowCount","linkify":"Method RowCount","nodes":[{"content":"Method RowCount","pos":[0,15]}]},{"content":"Retrieves the number of rows in the table.","pos":[372818,372860]},{"pos":[372896,372908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of rows in the table.","pos":[372910,372942]},{"pos":[372948,372970],"content":"Method selectForUpdate","linkify":"Method selectForUpdate","nodes":[{"content":"Method selectForUpdate","pos":[0,22]}]},{"content":"Gets and sets the property that indicates whether to select records for update when they are read.","pos":[372972,373070]},{"pos":[373145,373155],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lockRecordsExclusive","pos":[373157,373177]},{"content":"A Boolean value that indicates whether to read records for update; optional.","pos":[373180,373256]},{"pos":[373263,373275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if records should be read for update; otherwise, false.","pos":[373277,373337]},{"pos":[373343,373362],"content":"Method selectLocked","linkify":"Method selectLocked","nodes":[{"content":"Method selectLocked","pos":[0,19]}]},{"content":"Indicates whether to select locked records.","pos":[373364,373407]},{"pos":[373476,373486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lockRecordsShared","pos":[373488,373505]},{"content":"A Boolean value that indicates whether to select locked records.","pos":[373508,373572]},{"pos":[373579,373591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if locked records should be selected; otherwise, false.","pos":[373593,373653]},{"pos":[373659,373681],"content":"Method selectRefRecord","linkify":"Method selectRefRecord","nodes":[{"content":"Method selectRefRecord","pos":[0,22]}]},{"content":"Selects the record by referenced field ID.","pos":[373683,373725]},{"pos":[373793,373803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"referenceFieldId","pos":[373805,373821]},{"content":"The referenced field ID.","pos":[373824,373848]},{"pos":[373855,373867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The record buffer.","pos":[373869,373887]},{"pos":[373893,373924],"content":"Method selectWithRepeatableRead","linkify":"Method selectWithRepeatableRead","nodes":[{"content":"Method selectWithRepeatableRead","pos":[0,31]}]},{"content":"Gets and sets the property that indicates whether repeatable read is enabled.","pos":[373926,374003]},{"pos":[374084,374094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"useRepeatableRead","pos":[374096,374113]},{"content":"A Boolean value that indicates whether repeatable read is enabled; optional.","pos":[374116,374192]},{"pos":[374199,374211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if repeatable read is enabled; otherwise, false.","pos":[374213,374266]},{"pos":[374272,374288],"content":"Method setTempDB","linkify":"Method setTempDB","nodes":[{"content":"Method setTempDB","pos":[0,16]}]},{"pos":[374327,374339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[374345,374358],"content":"Method setTmp","linkify":"Method setTmp","nodes":[{"content":"Method setTmp","pos":[0,13]}]},{"content":"Sets the table so that it is not persisted to the database.","pos":[374360,374419]},{"pos":[374455,374467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the operation was successful; otherwise, false.","pos":[374469,374524]},{"pos":[374530,374554],"content":"Method skipAosValidation","linkify":"Method skipAosValidation","nodes":[{"content":"Method skipAosValidation","pos":[0,24]}]},{"content":"Gets and sets the property that indicates whether to skip validation of Finance and Operations Application Object Server (AOS).","pos":[374556,374683]},{"pos":[374748,374758],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[374760,374768]},{"content":"A Boolean value that indicates whether to skip AOS validation.","pos":[374771,374833]},{"pos":[374840,374852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if AOS validation should be skipped; otherwise, false.","pos":[374854,374913]},{"pos":[374920,374927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an attacker can control input to the skipAosValidation method, a security risk exists.","pos":[374929,375018]},{"content":"Therefore, this method runs under Code Access Security.","pos":[375019,375074]},{"content":"Calls to this method on the server require permission from the SkipAOSValidationPermission class.","pos":[375075,375172]},{"content":"Make sure that the user has development user rights by setting the security key to SysDevelopment on the control that calls this method.","pos":[375173,375309]},{"pos":[375315,375337],"content":"Method skipDatabaseLog","linkify":"Method skipDatabaseLog","nodes":[{"content":"Method skipDatabaseLog","pos":[0,22]}]},{"content":"Gets and sets the property that indicates whether to skip database log requests.","pos":[375339,375419]},{"pos":[375482,375492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[375494,375502]},{"content":"A Boolean value that indicates whether to skip database log requests; optional.","pos":[375505,375584]},{"pos":[375591,375603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if database log requests should be skipped; otherwise, false.","pos":[375605,375671]},{"pos":[375677,375699],"content":"Method skipDataMethods","linkify":"Method skipDataMethods","nodes":[{"content":"Method skipDataMethods","pos":[0,22]}]},{"content":"Gets and sets the property that indicates whether to discard overloaded methods.","pos":[375701,375781]},{"pos":[375844,375854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[375856,375864]},{"content":"A Boolean value that indicates whether to discard overloaded methods; optional.","pos":[375867,375946]},{"pos":[375953,375965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if overloaded methods should be discarded; otherwise, false.","pos":[375967,376032]},{"pos":[376038,376062],"content":"Method skipDeleteActions","linkify":"Method skipDeleteActions","nodes":[{"content":"Method skipDeleteActions","pos":[0,24]}]},{"content":"Gets and sets the property that indicates whether to skip delete actions on the table.","pos":[376064,376150]},{"pos":[376215,376225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[376227,376235]},{"content":"A Boolean value that indicates whether to ignore requests to delete records; optional.","pos":[376238,376324]},{"pos":[376331,376343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if requests to delete records should be ignored; otherwise, false.","pos":[376345,376416]},{"pos":[376423,376430],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method works only when you are using a set-based operation, such as the delete<ph id=\"ph1\">\\_</ph>from statement.","pos":[376432,376532],"source":"This method works only when you are using a set-based operation, such as the delete\\_from statement."},{"content":"If you use it on a row-based operation, such as the xRecord.delete method, the property will not be respected, and the delete action will still be called.","pos":[376533,376687]},{"pos":[376693,376716],"content":"Method skipDeleteMethod","linkify":"Method skipDeleteMethod","nodes":[{"content":"Method skipDeleteMethod","pos":[0,23]}]},{"content":"Gets and sets the property that indicates whether to discard overloaded methods.","pos":[376718,376798]},{"pos":[376862,376872],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[376874,376882]},{"content":"A Boolean value that indicates whether to discard overloaded methods; optional.","pos":[376885,376964]},{"pos":[376971,376983],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if overloaded methods should be discarded; otherwise, false.","pos":[376985,377050]},{"pos":[377056,377073],"content":"Method skipEvents","linkify":"Method skipEvents","nodes":[{"content":"Method skipEvents","pos":[0,17]}]},{"content":"Provides an option to turn off calling the Application.event<ph id=\"ph1\">\\*</ph> methods for the lifetime of an xRecord object.","pos":[377075,377184],"source":"Provides an option to turn off calling the Application.event\\* methods for the lifetime of an xRecord object."},{"pos":[377242,377252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[377254,377262]},{"content":"A Boolean value that indicates whether to skip events; optional.","pos":[377265,377329]},{"pos":[377336,377348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if events are skipped; otherwise, false.","pos":[377350,377395]},{"pos":[377402,377409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method resembles the xRecord.skipDatabaseLog method.","pos":[377411,377468]},{"content":"The skipEvents method is also used internally in the kernel to skip events that make no sense to generate; this is consistent with the current behavior of the xRecord.skipDatabaseLog method:","pos":[377469,377659]},{"content":"The Application.deleteCompany method: Event generation is turned off for the duration of a company delete operation.","pos":[377665,377781]},{"content":"This is an admin operation, and it could cause performance issues to support events in this case.","pos":[377782,377879]},{"content":"The SqlDataDictionary.tableDelete method: Event generation is turned off for the duration of a table delete.","pos":[377884,377992]},{"content":"This is an admin operation, and it could cause performance issues to support events in this case.","pos":[377993,378090]},{"content":"The RecordInsertList class, which implements array insert capabilities in the kernel, takes an optional argument, <ph id=\"ph1\">\\_</ph>skipEvents = false, in the new method that will conditionally skip events as specified by a developer.","pos":[378095,378313],"source":"The RecordInsertList class, which implements array insert capabilities in the kernel, takes an optional argument, \\_skipEvents = false, in the new method that will conditionally skip events as specified by a developer."},{"content":"Even if events are not skipped, this will not make the kernel rewrite the SQL.","pos":[378314,378392]},{"content":"When a primary key is renamed, event generation is turned off for the duration of the rename operation.","pos":[378397,378500]},{"content":"This includes a primary key in one record and can include a foreign key in many records.","pos":[378501,378589]},{"content":"After the rename operation, the eventRenameKey method is called.","pos":[378590,378654]},{"pos":[378660,378679],"content":"Method skipPostLoad","linkify":"Method skipPostLoad","nodes":[{"content":"Method skipPostLoad","pos":[0,19]}]},{"content":"Gets and sets the property that indicates whether to skip executing the xRecord.postLoad method on the table.","pos":[378681,378790]},{"pos":[378850,378860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[378862,378870]},{"content":"A Boolean value that indicates whether to skip executing the postLoad method on the table; optional.","pos":[378873,378973]},{"pos":[378980,378992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true to skip executing the postLoad method; otherwise, false.","pos":[378994,379055]},{"pos":[379061,379080],"content":"Method skipTTSCheck","linkify":"Method skipTTSCheck","nodes":[{"content":"Method skipTTSCheck","pos":[0,19]}]},{"content":"Gets and sets the property that indicates whether to skip the check to determine whether the record is selected for update.","pos":[379082,379205]},{"pos":[379265,379275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[379277,379285]},{"content":"A Boolean value that indicates whether to skip the check; optional.","pos":[379288,379355]},{"pos":[379362,379374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the TTS check should be skipped; otherwise, false.","pos":[379376,379434]},{"pos":[379440,379463],"content":"Method suppressWarnings","linkify":"Method suppressWarnings","nodes":[{"content":"Method suppressWarnings","pos":[0,23]}]},{"content":"Gets and sets the property that indicates whether to suppress warnings for this pointer.","pos":[379465,379553]},{"pos":[379617,379627],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[379629,379637]},{"content":"A Boolean value that indicates whether to suppress warnings for this pointer; optional.","pos":[379640,379727]},{"pos":[379734,379746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if warnings for this pointer should be suppressed; otherwise, false.","pos":[379748,379821]},{"pos":[379827,379850],"content":"Method tableAccessRight","linkify":"Method tableAccessRight","nodes":[{"content":"Method tableAccessRight","pos":[0,23]}]},{"content":"Returns the table access right.","pos":[379852,379883]},{"pos":[379933,379945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The table access right value.","pos":[379947,379976]},{"pos":[379982,380011],"content":"Method tableBufferAccessRight","linkify":"Method tableBufferAccessRight","nodes":[{"content":"Method tableBufferAccessRight","pos":[0,29]}]},{"content":"Returns the table access right for the current record.","pos":[380013,380067]},{"pos":[380123,380135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The table access right for the current record.","pos":[380137,380183]},{"pos":[380189,380222],"content":"Method takeOwnershipOfTempDBTable","linkify":"Method takeOwnershipOfTempDBTable","nodes":[{"content":"Method takeOwnershipOfTempDBTable","pos":[0,33]}]},{"pos":[380294,380304],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[380306,380314]},{"pos":[380323,380335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[380341,380360],"content":"Method toolTipField","linkify":"Method toolTipField","nodes":[{"content":"Method toolTipField","pos":[0,19]}]},{"content":"Retrieves the HelpText value for the specified field.","pos":[380362,380415]},{"pos":[380468,380478],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[380480,380487]},{"content":"The field for which to retrieve the HelpText value.","pos":[380490,380541]},{"pos":[380548,380560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HelpText value of the specified field.","pos":[380562,380604]},{"pos":[380610,380630],"content":"Method toolTipRecord","linkify":"Method toolTipRecord","nodes":[{"content":"Method toolTipRecord","pos":[0,20]}]},{"content":"Retrieves the ToolTip value for the current record.","pos":[380632,380683]},{"pos":[380722,380734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ToolTip value for the current record.","pos":[380736,380777]},{"pos":[380783,380800],"content":"Method usageCount","linkify":"Method usageCount","nodes":[{"content":"Method usageCount","pos":[0,17]}]},{"content":"Retrieves the current number of references (the value of the reference counter) that the object has.","pos":[380802,380902]},{"pos":[380938,380950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current number of references that the object has.","pos":[380952,381005]},{"pos":[381012,381019],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is overridden.","pos":[381021,381047]},{"content":"When an object is created, its reference counter equals 1.","pos":[381048,381106]},{"content":"When a new reference is created, its value increases.","pos":[381107,381160]},{"content":"As a reference goes out of scope, its value decreases.","pos":[381161,381215]},{"pos":[381221,381250],"content":"Method useExistingTempDBTable","linkify":"Method useExistingTempDBTable","nodes":[{"content":"Method useExistingTempDBTable","pos":[0,29]}]},{"pos":[381327,381337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"physicalTempTableName","pos":[381339,381360]},{"pos":[381369,381381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[381387,381408],"content":"Method validateDelete","linkify":"Method validateDelete","nodes":[{"content":"Method validateDelete","pos":[0,21]}]},{"content":"Determines whether the current record is valid and ready to be deleted from the database.","pos":[381410,381499]},{"pos":[381543,381555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the current record can be deleted; otherwise, false.","pos":[381557,381617]},{"pos":[381623,381643],"content":"Method validateField","linkify":"Method validateField","nodes":[{"content":"Method validateField","pos":[0,20]}]},{"content":"Determines whether the specified field is valid.","pos":[381645,381693]},{"pos":[381758,381768],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldIdToCheck","pos":[381770,381784]},{"content":"The field ID of the field to validate.","pos":[381787,381825]},{"pos":[381832,381844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the specified field is valid; otherwise, false.","pos":[381846,381901]},{"pos":[381907,381932],"content":"Method validateFieldValue","linkify":"Method validateFieldValue","nodes":[{"content":"Method validateFieldValue","pos":[0,25]}]},{"pos":[382017,382027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[382029,382038]},{"content":"arrayIndex","pos":[382052,382062]},{"pos":[382071,382083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[382089,382113],"content":"Method validateRelations","linkify":"Method validateRelations","nodes":[{"content":"Method validateRelations","pos":[0,24]}]},{"pos":[382244,382254],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"onlyValidateCompositeRelations","pos":[382256,382286]},{"content":"onlyValidateModifiedRelations","pos":[382300,382329]},{"pos":[382338,382350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[382356,382376],"content":"Method validateWrite","linkify":"Method validateWrite","nodes":[{"content":"Method validateWrite","pos":[0,20]}]},{"content":"Determines whether the current record is valid and ready to be written.","pos":[382378,382449]},{"pos":[382492,382504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the current record can be written; otherwise, false.","pos":[382506,382566]},{"pos":[382572,382603],"content":"Method validTimeStateUpdateMode","linkify":"Method validTimeStateUpdateMode","nodes":[{"content":"Method validTimeStateUpdateMode","pos":[0,31]}]},{"content":"Sets a valid time state update mode on the cursor.","pos":[382605,382655]},{"pos":[382767,382777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"validTimeStateUpdateMode","pos":[382779,382803]},{"pos":[382812,382824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The old value of the valid time state update mode.","pos":[382826,382876]},{"pos":[382882,382898],"content":"Method wasCached","linkify":"Method wasCached","nodes":[{"content":"Method wasCached","pos":[0,16]}]},{"content":"Specifies the location from which the data was retrieved.","pos":[382900,382957]},{"pos":[382998,383010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A CachedHow enumeration value that indicates the location from which the data was retrieved.","pos":[383012,383104]},{"pos":[383110,383120],"content":"Method xml","linkify":"Method xml","nodes":[{"content":"Method xml","pos":[0,10]}]},{"content":"Retrieves an XML string that represents the current object.","pos":[383122,383181]},{"pos":[383222,383232],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"indent","pos":[383234,383240]},{"content":"An integer that indicates the number of spaces to use for indentation in the XML string.","pos":[383243,383331]},{"pos":[383338,383350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An XML string that represents the current object.","pos":[383352,383401]},{"pos":[383408,383415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be overridden to return values that are meaningful for that type.","pos":[383417,383498]},{"pos":[383504,383519],"content":"Method doDelete","linkify":"Method doDelete","nodes":[{"content":"Method doDelete","pos":[0,15]}]},{"content":"Deletes the current record from the table and bypasses any additional logic in the delete method of the table.","pos":[383521,383631]},{"pos":[383665,383678],"content":"Method update","linkify":"Method update","nodes":[{"content":"Method update","pos":[0,13]}]},{"content":"Updates the current record.","pos":[383680,383707]},{"pos":[383739,383751],"content":"Method merge","linkify":"Method merge","nodes":[{"content":"Method merge","pos":[0,12]}]},{"content":"Merges the current table with the specified table.","pos":[383753,383803]},{"pos":[383851,383861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mergeInto","pos":[383863,383872]},{"content":"The table to merge with.","pos":[383875,383899]},{"pos":[383905,383917],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"content":"Removes all rows from the table buffer.","pos":[383919,383958]},{"pos":[383989,384009],"content":"Method setXDSContext","linkify":"Method setXDSContext","nodes":[{"content":"Method setXDSContext","pos":[0,20]}]},{"content":"Sets new XDS context.","pos":[384011,384032]},{"pos":[384091,384101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"contextString","pos":[384103,384116]},{"pos":[384124,384147],"content":"Method renamePrimaryKey","linkify":"Method renamePrimaryKey","nodes":[{"content":"Method renamePrimaryKey","pos":[0,23]}]},{"content":"Renames the foreign keys in other tables according to the change of the corresponding primary key value in this table.","pos":[384149,384267]},{"pos":[384309,384323],"content":"Method dispose","linkify":"Method dispose","nodes":[{"content":"Method dispose","pos":[0,14]}]},{"content":"Releases resources that are used by the xRecord object.","pos":[384325,384380]},{"pos":[384413,384433],"content":"Method setConnection","linkify":"Method setConnection","nodes":[{"content":"Method setConnection","pos":[0,20]}]},{"content":"Sets the user connection for this table.","pos":[384435,384475]},{"pos":[384536,384546],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"connection","pos":[384548,384558]},{"pos":[384566,384579],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"content":"Deletes the current record from the table.","pos":[384581,384623]},{"pos":[384655,384674],"content":"Method defaultField","linkify":"Method defaultField","nodes":[{"content":"Method defaultField","pos":[0,19]}]},{"content":"Populates default values in a field in the table.","pos":[384676,384725]},{"pos":[384779,384789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[384791,384798]},{"pos":[384806,384830],"content":"Method dbOpInTransaction","linkify":"Method dbOpInTransaction","nodes":[{"content":"Method dbOpInTransaction","pos":[0,24]}]},{"content":"Makes sure that database operations are correctly closed if they fail.","pos":[384832,384902]},{"pos":[384973,384983],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"isWriteOperation","pos":[384985,385001]},{"content":"A Boolean value that indicates whether the operation is a write operation; optional.","pos":[385004,385088]},{"pos":[385094,385106],"content":"Method write","linkify":"Method write","nodes":[{"content":"Method write","pos":[0,12]}]},{"content":"Updates a record if it exists; otherwise, inserts a record.","pos":[385108,385167]},{"pos":[385198,385216],"content":"Method preRemoting","linkify":"Method preRemoting","nodes":[{"content":"Method preRemoting","pos":[0,18]}]},{"content":"Is executed before a cross-tier call is about to be executed for the table that would pack its state to the other tier.","pos":[385218,385337]},{"pos":[385374,385399],"content":"Method modifiedFieldValue","linkify":"Method modifiedFieldValue","nodes":[{"content":"Method modifiedFieldValue","pos":[0,25]}]},{"content":"Modifies the specified field to the original value.","pos":[385401,385452]},{"pos":[385534,385544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[385546,385555]},{"content":"The array index of the field; optional.","pos":[385558,385597]},{"content":"arrayIndex","pos":[385609,385619]},{"content":"The array index of the field; optional.","pos":[385622,385661]},{"pos":[385667,385684],"content":"Method defaultRow","linkify":"Method defaultRow","nodes":[{"content":"Method defaultRow","pos":[0,17]}]},{"content":"Populates default values in fields in the table in the non-interactive case.","pos":[385686,385762]},{"pos":[385798,385811],"content":"Method reread","linkify":"Method reread","nodes":[{"content":"Method reread","pos":[0,13]}]},{"content":"Rereads the record from the table.","pos":[385813,385847]},{"pos":[385879,385899],"content":"Method modifiedField","linkify":"Method modifiedField","nodes":[{"content":"Method modifiedField","pos":[0,20]}]},{"content":"Modifies the specified field to the original.","pos":[385901,385946]},{"pos":[386001,386011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[386013,386020]},{"content":"The field ID to modify.","pos":[386023,386046]},{"pos":[386052,386067],"content":"Method ttsabort","linkify":"Method ttsabort","nodes":[{"content":"Method ttsabort","pos":[0,15]}]},{"content":"Aborts a transaction that was started by a call to the ttsbegin method.","pos":[386069,386140]},{"pos":[386174,386187],"content":"Method insert","linkify":"Method insert","nodes":[{"content":"Method insert","pos":[0,13]}]},{"content":"Inserts the record into the table.","pos":[386189,386223]},{"pos":[386255,386269],"content":"Method doClear","linkify":"Method doClear","nodes":[{"content":"Method doClear","pos":[0,14]}]},{"content":"Removes all rows from the table buffer and bypasses any additional logic in the clear method of the table.","pos":[386271,386377]},{"pos":[386410,386426],"content":"Method initValue","linkify":"Method initValue","nodes":[{"content":"Method initValue","pos":[0,16]}]},{"content":"Initializes a field to the default value.","pos":[386428,386469]},{"pos":[386504,386519],"content":"Method doUpdate","linkify":"Method doUpdate","nodes":[{"content":"Method doUpdate","pos":[0,15]}]},{"content":"Updates the current record and bypasses any additional logic in the update method of the table.","pos":[386521,386616]},{"pos":[386650,386665],"content":"Method ttsbegin","linkify":"Method ttsbegin","nodes":[{"content":"Method ttsbegin","pos":[0,15]}]},{"content":"Starts a transaction that can be either committed by the ttscommit method or aborted by the ttsabort method.","pos":[386667,386775]},{"pos":[386809,386833],"content":"Method setCrossPartition","linkify":"Method setCrossPartition","nodes":[{"content":"Method setCrossPartition","pos":[0,24]}]},{"content":"Sets or resets cross-partitioning for the table.","pos":[386835,386883]},{"pos":[386943,386953],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[386955,386963]},{"content":"A new Boolean value to set or reset cross-partitioning.","pos":[386966,387021]},{"pos":[387027,387044],"content":"Method setTmpData","linkify":"Method setTmpData","nodes":[{"content":"Method setTmpData","pos":[0,17]}]},{"content":"Sets the contents of the temporary table to the specified data.","pos":[387046,387109]},{"pos":[387159,387169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cursor","pos":[387171,387177]},{"content":"The new data for the temporary table.","pos":[387180,387217]},{"pos":[387223,387239],"content":"Method ttscommit","linkify":"Method ttscommit","nodes":[{"content":"Method ttscommit","pos":[0,16]}]},{"content":"Commits a transaction that was started by a call to the ttsbegin method.","pos":[387241,387313]},{"pos":[387348,387368],"content":"Method setFieldValue","linkify":"Method setFieldValue","nodes":[{"content":"Method setFieldValue","pos":[0,20]}]},{"content":"Sets the field value in the record buffer.","pos":[387370,387412]},{"pos":[387498,387508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[387510,387519]},{"content":"The array index of the field; optional.","pos":[387522,387561]},{"content":"value","pos":[387573,387578]},{"content":"The array index of the field; optional.","pos":[387581,387620]},{"content":"arrayIndex","pos":[387632,387642]},{"content":"The array index of the field; optional.","pos":[387645,387684]},{"pos":[387691,387698],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The arrayIndex parameter applies only to array fields.","pos":[387700,387754]},{"content":"Either omit this parameter or specify0 (zero) for fields that are not arrays.This method throws an ArgumentOutOfRange exception if the specified field is unknown or a TypeMismatch exception if the value parameter is incompatible with the specified field..","pos":[387755,388010]},{"pos":[388016,388031],"content":"Method doInsert","linkify":"Method doInsert","nodes":[{"content":"Method doInsert","pos":[0,15]}]},{"content":"Inserts the record into the table and bypasses any additional logic in the insert method of the table.","pos":[388033,388135]},{"pos":[388169,388189],"content":"Method setSQLTracing","linkify":"Method setSQLTracing","nodes":[{"content":"Method setSQLTracing","pos":[0,20]}]},{"content":"Enables or disables SQL tracing mode.","pos":[388191,388228]},{"pos":[388289,388299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tracingmode","pos":[388301,388312]},{"pos":[388320,388335],"content":"Method postLoad","linkify":"Method postLoad","nodes":[{"content":"Method postLoad","pos":[0,15]}]},{"content":"Is executed after a record is read.","pos":[388337,388372]},{"pos":[388405,388415],"content":"Class xRef","linkify":"Class xRef","nodes":[{"content":"Class xRef","pos":[0,10]}]},{"pos":[388451,388458],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[388464,388472],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[388478,388485],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[388489,388495]},{"content":"Description","pos":[388538,388549]},{"content":"public AccessLevel accessLevel()","pos":[388691,388723]},{"content":"public int column()","pos":[388792,388811]},{"content":"public container contents()","pos":[388893,388920]},{"content":"public xRefKind kind()","pos":[388994,389016]},{"content":"public int line()","pos":[389095,389112]},{"content":"public XRefMode mode()","pos":[389196,389218]},{"content":"public str name()","pos":[389297,389314]},{"content":"public str path()","pos":[389398,389415]},{"content":"public XRefReference reference()","pos":[389499,389531]},{"content":"public int typeHandle()","pos":[389600,389623]},{"content":"public str typeName(xRefKind kind, int handle)","pos":[389701,389747]},{"content":"public void new(container data)","pos":[389802,389833]},{"content":"Initializes a new instance of the Object class.","pos":[389851,389898]},{"content":"public void init()","pos":[389903,389921]},{"content":"public void finalize()","pos":[390004,390026]},{"content":"public void next()","pos":[390105,390123]},{"pos":[390209,390227],"content":"Method accessLevel","linkify":"Method accessLevel","nodes":[{"content":"Method accessLevel","pos":[0,18]}]},{"pos":[390272,390284],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390290,390303],"content":"Method column","linkify":"Method column","nodes":[{"content":"Method column","pos":[0,13]}]},{"pos":[390335,390347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390353,390368],"content":"Method contents","linkify":"Method contents","nodes":[{"content":"Method contents","pos":[0,15]}]},{"pos":[390408,390420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390426,390437],"content":"Method kind","linkify":"Method kind","nodes":[{"content":"Method kind","pos":[0,11]}]},{"pos":[390472,390484],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390490,390501],"content":"Method line","linkify":"Method line","nodes":[{"content":"Method line","pos":[0,11]}]},{"pos":[390531,390543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390549,390560],"content":"Method mode","linkify":"Method mode","nodes":[{"content":"Method mode","pos":[0,11]}]},{"pos":[390595,390607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390613,390624],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"pos":[390654,390666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390672,390683],"content":"Method path","linkify":"Method path","nodes":[{"content":"Method path","pos":[0,11]}]},{"pos":[390713,390725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390731,390747],"content":"Method reference","linkify":"Method reference","nodes":[{"content":"Method reference","pos":[0,16]}]},{"pos":[390792,390804],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390810,390827],"content":"Method typeHandle","linkify":"Method typeHandle","nodes":[{"content":"Method typeHandle","pos":[0,17]}]},{"pos":[390863,390875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390881,390896],"content":"Method typeName","linkify":"Method typeName","nodes":[{"content":"Method typeName","pos":[0,15]}]},{"pos":[390955,390965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"kind","pos":[390967,390971]},{"content":"handle","pos":[390985,390991]},{"pos":[391000,391012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[391018,391028],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[391030,391077]},{"pos":[391121,391131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[391133,391137]},{"pos":[391145,391156],"content":"Method init","linkify":"Method init","nodes":[{"content":"Method init","pos":[0,11]}]},{"pos":[391186,391201],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[391235,391246],"content":"Method next","linkify":"Method next","nodes":[{"content":"Method next","pos":[0,11]}]},{"pos":[391275,391294],"content":"Class xResourceNode","linkify":"Class xResourceNode","nodes":[{"content":"Class xResourceNode","pos":[0,19]}]},{"pos":[391341,391348],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[391354,391362],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[391368,391375],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[391379,391385]},{"content":"Description","pos":[391454,391465]},{"content":"public BinData AOTGetData()","pos":[391561,391588]},{"content":"public Image AOTGetImage()","pos":[391652,391678]},{"content":"public str changedBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[391743,391778],"source":"public str changedBy(\\[str value\\])"},{"content":"public Date changedDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[391834,391873],"source":"public Date changedDate(\\[Date value\\])"},{"content":"public str changedTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[391925,391962],"source":"public str changedTime(\\[str value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[392016,392088],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"public str createdBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[392107,392142],"source":"public str createdBy(\\[str value\\])"},{"content":"public Date creationDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[392198,392238],"source":"public Date creationDate(\\[Date value\\])"},{"content":"public str creationTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[392289,392327],"source":"public str creationTime(\\[str value\\])"},{"content":"public str filename(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[392380,392414],"source":"public str filename(\\[str value\\])"},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[392471,392505],"source":"public str helpText(\\[str value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[392562,392593],"source":"public str label(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[392653,392683],"source":"public str name(\\[str value\\])"},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[392744,392778],"source":"public Guid origin(\\[Guid value\\])"},{"content":"::public static Image AOTCreateImage(str imageName)","pos":[392835,392886]},{"content":"public void AOTSetData(BinData data)","pos":[392926,392962]},{"content":"public void AOTSetImage(Image image)","pos":[393017,393053]},{"pos":[393111,393128],"content":"Method AOTGetData","linkify":"Method AOTGetData","nodes":[{"content":"Method AOTGetData","pos":[0,17]}]},{"pos":[393168,393180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393186,393204],"content":"Method AOTGetImage","linkify":"Method AOTGetImage","nodes":[{"content":"Method AOTGetImage","pos":[0,18]}]},{"pos":[393243,393255],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393261,393277],"content":"Method changedBy","linkify":"Method changedBy","nodes":[{"content":"Method changedBy","pos":[0,16]}]},{"pos":[393323,393333],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393335,393340]},{"pos":[393349,393361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393367,393385],"content":"Method changedDate","linkify":"Method changedDate","nodes":[{"content":"Method changedDate","pos":[0,18]}]},{"pos":[393435,393445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393447,393452]},{"pos":[393461,393473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393479,393497],"content":"Method changedTime","linkify":"Method changedTime","nodes":[{"content":"Method changedTime","pos":[0,18]}]},{"pos":[393545,393555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393557,393562]},{"pos":[393571,393583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393589,393612],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"pos":[393695,393705],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393707,393712]},{"pos":[393721,393733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393739,393755],"content":"Method createdBy","linkify":"Method createdBy","nodes":[{"content":"Method createdBy","pos":[0,16]}]},{"pos":[393801,393811],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393813,393818]},{"pos":[393827,393839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393845,393864],"content":"Method creationDate","linkify":"Method creationDate","nodes":[{"content":"Method creationDate","pos":[0,19]}]},{"pos":[393915,393925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393927,393932]},{"pos":[393941,393953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393959,393978],"content":"Method creationTime","linkify":"Method creationTime","nodes":[{"content":"Method creationTime","pos":[0,19]}]},{"pos":[394027,394037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394039,394044]},{"pos":[394053,394065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[394071,394086],"content":"Method filename","linkify":"Method filename","nodes":[{"content":"Method filename","pos":[0,15]}]},{"pos":[394131,394141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394143,394148]},{"pos":[394157,394169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[394175,394190],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"pos":[394235,394245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394247,394252]},{"pos":[394261,394273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[394279,394291],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"pos":[394333,394343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394345,394350]},{"pos":[394359,394371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[394377,394388],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"pos":[394429,394439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394441,394446]},{"pos":[394455,394467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[394473,394486],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[394531,394541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394543,394548]},{"pos":[394557,394569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[394575,394596],"content":"Method AOTCreateImage","linkify":"Method AOTCreateImage","nodes":[{"content":"Method AOTCreateImage","pos":[0,21]}]},{"pos":[394658,394668],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"imageName","pos":[394670,394679]},{"pos":[394688,394700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[394706,394723],"content":"Method AOTSetData","linkify":"Method AOTSetData","nodes":[{"content":"Method AOTSetData","pos":[0,17]}]},{"pos":[394772,394782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[394784,394788]},{"pos":[394796,394814],"content":"Method AOTSetImage","linkify":"Method AOTSetImage","nodes":[{"content":"Method AOTSetImage","pos":[0,18]}]},{"pos":[394863,394873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"image","pos":[394875,394880]},{"pos":[394887,394901],"content":"Class xSession","linkify":"Class xSession","nodes":[{"content":"Class xSession","pos":[0,14]}]},{"content":"Gets information about Finance and Operations sessions.","pos":[394937,394992]},{"pos":[394998,395005],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To get information about the current session, create a new xSession session without parameters.","pos":[395007,395102]},{"content":"The only way to get information about all active sessions (AOS only) is to traverse from session ID 1 to xSession.maxSessionId.","pos":[395103,395230]},{"content":"The IDs are not an unbroken list, but will never exceed the maximum number of sessions as specified in the maxSessionId method.","pos":[395231,395358]},{"pos":[395364,395372],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new xSession object, and then uses it to find the name of the server for the current session.","pos":[395374,395499]},{"pos":[395653,395660],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[395664,395670]},{"content":"Description","pos":[395748,395759]},{"content":"public str AOSName()","pos":[396094,396114]},{"content":"Retrieves the name of the Application Object Server (AOS) that is responsible for servicing the session.","pos":[396178,396282]},{"content":"public str clientComputerName()","pos":[396309,396340]},{"content":"Retrieves the network name of the client computer that is responsible for servicing the session.","pos":[396393,396489]},{"content":"public ClientType clientKind()","pos":[396524,396554]},{"content":"Retrieves the type of the client that is responsible for servicing the session.","pos":[396608,396687]},{"content":"public str databaseSpid()","pos":[396739,396764]},{"content":"Retrieves a comma-separated list of active connection IDs.","pos":[396823,396881]},{"content":"public str documentationLanguage()","pos":[396954,396988]},{"content":"Retrieves the language ID of the documentation that is shown for the session.","pos":[397038,397115]},{"content":"public str interfaceLanguage()","pos":[397169,397199]},{"content":"Retrieves the ID for the language that is used on menus and dialogs for the session.","pos":[397253,397337]},{"content":"public boolean isWorkerThread()","pos":[397384,397415]},{"content":"Determines whether the session is a worker thread.","pos":[397468,397518]},{"content":"public Date loginDate()","pos":[397599,397622]},{"content":"Retrieves the date on which the user of the session logged on.","pos":[397683,397745]},{"content":"public DateTime loginDateTime()","pos":[397814,397845]},{"content":"public TimeOfDay loginTime()","pos":[398029,398057]},{"content":"Retrieves the time at which the user of the session logged on.","pos":[398113,398175]},{"content":"public int masterSessionId()","pos":[398244,398272]},{"content":"Retrieves the master session ID for the session that the xSession object covers.","pos":[398328,398408]},{"content":"public int serverId()","pos":[398459,398480]},{"content":"public int sessionId()","pos":[398674,398696]},{"content":"Retrieves the session ID of the session that the xSession object covers.","pos":[398758,398830]},{"content":"public boolean terminate(<ph id=\"ph1\">\\[</ph>Date loginDate<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>TimeOfDay loginTime<ph id=\"ph4\">\\]</ph>)","pos":[398889,398958],"source":"public boolean terminate(\\[Date loginDate\\], \\[TimeOfDay loginTime\\])"},{"content":"Terminates the session ID that the object was instantiated with.","pos":[398973,399037]},{"content":"public UserId userId()","pos":[399104,399126]},{"content":"Retrieves the user ID that this session is logged on with.","pos":[399188,399246]},{"content":"::public static int currentRetryCount()","pos":[399319,399358]},{"content":"Counts the number of times a try block has been retried after a deadlock, an update conflict, or another exception.","pos":[399403,399518]},{"content":"::public static Uncheck currentUnCheck()","pos":[399534,399574]},{"content":"::public static str getDbSchema()","pos":[399749,399782]},{"content":"Retrieves the schema part of the database object name for the session.","pos":[399833,399903]},{"content":"::public static COM getIISObject(IISObject object)","pos":[399964,400014]},{"content":"Instantiates and returns a COM object for an IIS object.","pos":[400048,400104]},{"content":"::public static boolean getSysTraceActive()","pos":[400179,400222]},{"content":"Enables you to determine whether system tracing is turned on for the session.","pos":[400263,400340]},{"content":"::public static str getXRefAssembyTempFolder()","pos":[400394,400440]},{"content":"::public static boolean isCLRSession()","pos":[400609,400647]},{"content":"::public static boolean isUserPreferredTzSameAsLocalMachine()","pos":[400824,400885]},{"content":"::public static int lastDuplicateKeyViolatingTable()","pos":[401039,401091]},{"content":"::public static int lastUpdateConflictingTable()","pos":[401254,401302]},{"content":"Retrieves an instance of the table that most recently had an update conflict.","pos":[401338,401415]},{"content":"::public static int maxSessionId()","pos":[401469,401503]},{"content":"Retrieves the maximum number of sessions that are permitted by the current license codes.","pos":[401553,401642]},{"content":"::public static int numSession()","pos":[401684,401716]},{"content":"Retrieves the current number of registered sessions.","pos":[401768,401820]},{"content":"public PreferredLocale preferredLocale()","pos":[401899,401939]},{"content":"::public static int pseudoBandwidth(<ph id=\"ph1\">\\[</ph>int bandwidth<ph id=\"ph2\">\\]</ph>)","pos":[402114,402168],"source":"::public static int pseudoBandwidth(\\[int bandwidth\\])"},{"content":"Determines whether bandwidth simulation is turned on for the session, and enables bandwidth simulation to be turned on or off.","pos":[402198,402324]},{"content":"::public static int pseudoLatency(<ph id=\"ph1\">\\[</ph>int latency<ph id=\"ph2\">\\]</ph>)","pos":[402329,402379],"source":"::public static int pseudoLatency(\\[int latency\\])"},{"content":"Determines whether latency simulation is turned on for the session, and enables latency simulation to be turned on or off.","pos":[402413,402535]},{"content":"::public static int pseudoSimMode(<ph id=\"ph1\">\\[</ph>int simMode<ph id=\"ph2\">\\]</ph>)","pos":[402544,402594],"source":"::public static int pseudoSimMode(\\[int simMode\\])"},{"content":"Determines whether delay simulation is turned on for the session, and enables delay simulation to be turned on or off.","pos":[402628,402746]},{"content":"::public static int systemSessionId()","pos":[402759,402796]},{"content":"Retrieves the system session ID for the session that the xSession object covers.","pos":[402843,402923]},{"content":"::public static container xppCallStack()","pos":[402974,403014]},{"content":"Retrieves the current call stack.","pos":[403058,403091]},{"content":"::public static void removeAOC()","pos":[403189,403221]},{"content":"Removes the Application Object Server client-side cache (AOC) for the current session.","pos":[403273,403359]},{"content":"::public static void updateAOC()","pos":[403404,403436]},{"content":"Updates the Application Object Server client-side cache (AOC) for the current session.","pos":[403488,403574]},{"content":"::public static void setAutoUpdateRecVersion(boolean autoUpdateRecVersion)","pos":[403619,403693]},{"content":"::public static void setSysTraceActive(boolean nValue)","pos":[403834,403888]},{"content":"Switches system tracing on or off.","pos":[403918,403952]},{"content":"::private static void clientSetAutoUpdateRecVersion(boolean autoUpdateRecVersion)","pos":[404049,404130]},{"content":"::private static void serverSetAutoUpdateRecVersion(boolean autoUpdateRecVersion)","pos":[404264,404345]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>int sessionId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean checkSession<ph id=\"ph4\">\\]</ph>)","pos":[404479,404539],"source":"public void new(\\[int sessionId\\], \\[boolean checkSession\\])"},{"content":"Instantiates the xSession object, either for current session or for the session ID passed in as a parameter.","pos":[404563,404671]},{"content":"::public static void reloadTableCollectionOnClient()","pos":[404694,404746]},{"pos":[404912,404926],"content":"Method AOSName","linkify":"Method AOSName","nodes":[{"content":"Method AOSName","pos":[0,14]}]},{"content":"Retrieves the name of the Application Object Server (AOS) that is responsible for servicing the session.","pos":[404928,405032]},{"pos":[405065,405077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that indicates the name of the AOS.","pos":[405079,405123]},{"pos":[405130,405137],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For non–AOS connected clients, this method returns an empty string.","pos":[405139,405206]},{"pos":[405213,405221],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints the name of the AOS that is running the current session.","pos":[405223,405308]},{"pos":[405460,405485],"content":"Method clientComputerName","linkify":"Method clientComputerName","nodes":[{"content":"Method clientComputerName","pos":[0,25]}]},{"content":"Retrieves the network name of the client computer that is responsible for servicing the session.","pos":[405487,405583]},{"pos":[405627,405639],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that indicates the name of the client computer.","pos":[405641,405697]},{"pos":[405704,405712],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints the name of the client that is running the current session.","pos":[405714,405802]},{"pos":[405948,405965],"content":"Method clientKind","linkify":"Method clientKind","nodes":[{"content":"Method clientKind","pos":[0,17]}]},{"content":"Retrieves the type of the client that is responsible for servicing the session.","pos":[405967,406046]},{"pos":[406089,406101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of the client.","pos":[406103,406126]},{"pos":[406133,406140],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible values are those in the ClientType system enumeration:","pos":[406142,406209]},{"content":"COMObject","pos":[406215,406224]},{"content":"Client","pos":[406229,406235]},{"content":"Server","pos":[406240,406246]},{"content":"WorkerThread","pos":[406251,406263]},{"pos":[406270,406278],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints the type of the client that is running the current session.","pos":[406280,406368]},{"pos":[406506,406525],"content":"Method databaseSpid","linkify":"Method databaseSpid","nodes":[{"content":"Method databaseSpid","pos":[0,19]}]},{"content":"Retrieves a comma-separated list of active connection IDs.","pos":[406527,406585]},{"pos":[406623,406635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A comma-separated list of active connection IDs.","pos":[406637,406685]},{"pos":[406692,406699],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used to populate the Online users form (SysUsersOnline).","pos":[406701,406772]},{"content":"To retrieve the number of active connections, use xSession::numSession.","pos":[406773,406844]},{"pos":[406850,406878],"content":"Method documentationLanguage","linkify":"Method documentationLanguage","nodes":[{"content":"Method documentationLanguage","pos":[0,28]}]},{"content":"Retrieves the language ID of the documentation that is shown for the session.","pos":[406880,406957]},{"pos":[407004,407016],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the ID of the language that is used for the documentation in the session.","pos":[407018,407114]},{"pos":[407121,407128],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For example, this method returns \"en-us\" if the language is set to US English.","pos":[407130,407208]},{"content":"The documentation language can be selected separately and is not necessarily identical to the language used in menus and dialogs.","pos":[407209,407338]},{"content":"To retrieve the language ID for menus and dialogs, use xSession.interfaceLanguage.","pos":[407339,407421]},{"content":"xInfo.documentationLanguage enables you to set the documentation language.","pos":[407422,407496]},{"pos":[407502,407526],"content":"Method interfaceLanguage","linkify":"Method interfaceLanguage","nodes":[{"content":"Method interfaceLanguage","pos":[0,24]}]},{"content":"Retrieves the ID for the language that is used on menus and dialogs for the session.","pos":[407528,407612]},{"pos":[407655,407667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the ID of the language used on menus and dialogs in the session.","pos":[407669,407756]},{"pos":[407763,407770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For example, this method returns \"en-us\" if the language is set to US English.","pos":[407772,407850]},{"content":"The documentation language can be selected separately and is not necessarily identical to the language used in menus and dialogs.","pos":[407851,407980]},{"content":"To retrieve the language ID for documentation, use .","pos":[407981,408033]},{"pos":[408039,408060],"content":"Method isWorkerThread","linkify":"Method isWorkerThread","nodes":[{"content":"Method isWorkerThread","pos":[0,21]}]},{"content":"Determines whether the session is a worker thread.","pos":[408062,408112]},{"pos":[408156,408168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the session is a worker thread; otherwise, false.","pos":[408170,408227]},{"pos":[408234,408241],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A worker thread is an instance of the Thread class, which creates a new instance of Finance and Operations without UI.","pos":[408243,408361]},{"content":"If this method is called inside such a session, it will return true.","pos":[408362,408430]},{"pos":[408436,408452],"content":"Method loginDate","linkify":"Method loginDate","nodes":[{"content":"Method loginDate","pos":[0,16]}]},{"content":"Retrieves the date on which the user of the session logged on.","pos":[408454,408516]},{"pos":[408552,408564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date that the user of the session logged on.","pos":[408566,408614]},{"pos":[408620,408640],"content":"Method loginDateTime","linkify":"Method loginDateTime","nodes":[{"content":"Method loginDateTime","pos":[0,20]}]},{"pos":[408684,408696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408702,408718],"content":"Method loginTime","linkify":"Method loginTime","nodes":[{"content":"Method loginTime","pos":[0,16]}]},{"content":"Retrieves the time at which the user of the session logged on.","pos":[408720,408782]},{"pos":[408823,408835],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The time that the user of the session logged on.","pos":[408837,408885]},{"pos":[408891,408913],"content":"Method masterSessionId","linkify":"Method masterSessionId","nodes":[{"content":"Method masterSessionId","pos":[0,22]}]},{"content":"Retrieves the master session ID for the session that the xSession object covers.","pos":[408915,408995]},{"pos":[409036,409048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that represents the session ID.","pos":[409050,409092]},{"pos":[409099,409106],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Some sessions have a master session ID, such as a COM session or a worker thread session.","pos":[409108,409197]},{"pos":[409204,409212],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates an xSession object by using the normal session ID (or the master session ID, if there is one).","pos":[409214,409338]},{"pos":[409607,409622],"content":"Method serverId","linkify":"Method serverId","nodes":[{"content":"Method serverId","pos":[0,15]}]},{"pos":[409656,409668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409674,409690],"content":"Method sessionId","linkify":"Method sessionId","nodes":[{"content":"Method sessionId","pos":[0,16]}]},{"content":"Retrieves the session ID of the session that the xSession object covers.","pos":[409692,409764]},{"pos":[409799,409811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that represents the session ID.","pos":[409813,409855]},{"pos":[409861,409877],"content":"Method terminate","linkify":"Method terminate","nodes":[{"content":"Method terminate","pos":[0,16]}]},{"content":"Terminates the session ID that the object was instantiated with.","pos":[409879,409943]},{"pos":[410021,410031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"loginDate","pos":[410033,410042]},{"content":"The time that the user of the session logged on; optional.","pos":[410045,410103]},{"content":"loginTime","pos":[410115,410124]},{"content":"The time that the user of the session logged on; optional.","pos":[410127,410185]},{"pos":[410192,410204],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"false if the user is not authorized to perform this function; otherwise, true.","pos":[410206,410284]},{"pos":[410291,410298],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This API has a built-in authorization check that is invoked at run time.","pos":[410300,410372]},{"content":"An exception is thrown if calls to the terminate method are made by users who do not have access to the development security key (SysDevelopment).","pos":[410373,410519]},{"content":"The optional parameters allow you to put a timestamp on the session to ensure that it is the session you intend to terminate.","pos":[410520,410645]},{"content":"The same session ID could be used at two different times.","pos":[410646,410703]},{"content":"The terminate method is used in the Online users form to allow administrators to terminate sessions.","pos":[410704,410804]},{"content":"An administrator might decide to terminate a session because it has stopped responding, is consuming a lot of resources, or its license needs to be freed for another user.","pos":[410805,410976]},{"pos":[410983,410991],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example confirms whether the user has permission to terminate the session.","pos":[410993,411081]},{"content":"If so, the session is terminated.","pos":[411082,411115]},{"pos":[411321,411334],"content":"Method userId","linkify":"Method userId","nodes":[{"content":"Method userId","pos":[0,13]}]},{"content":"Retrieves the user ID that this session is logged on with.","pos":[411336,411394]},{"pos":[411429,411441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID for the user of the session.","pos":[411443,411478]},{"pos":[411485,411493],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example determines whether a particular user is online.","pos":[411495,411564]},{"pos":[412088,412112],"content":"Method currentRetryCount","linkify":"Method currentRetryCount","nodes":[{"content":"Method currentRetryCount","pos":[0,24]}]},{"content":"Counts the number of times a try block has been retried after a deadlock, an update conflict, or another exception.","pos":[412114,412229]},{"pos":[412279,412291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of times that the try block has been retried.","pos":[412293,412349]},{"pos":[412356,412364],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the currentRetryCount method to test how many times that a transaction has been retried to determine the exception handling for a CUD transaction.","pos":[412366,412539]},{"pos":[413030,413051],"content":"Method currentUnCheck","linkify":"Method currentUnCheck","nodes":[{"content":"Method currentUnCheck","pos":[0,21]}]},{"pos":[413102,413114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[413120,413138],"content":"Method getDbSchema","linkify":"Method getDbSchema","nodes":[{"content":"Method getDbSchema","pos":[0,18]}]},{"content":"Retrieves the schema part of the database object name for the session.","pos":[413140,413210]},{"pos":[413254,413266],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the schema part of the database object name.","pos":[413268,413320]},{"pos":[413326,413345],"content":"Method getIISObject","linkify":"Method getIISObject","nodes":[{"content":"Method getIISObject","pos":[0,19]}]},{"content":"Instantiates and returns a COM object for an IIS object.","pos":[413347,413403]},{"pos":[413464,413474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"object","pos":[413476,413482]},{"content":"The IIS object that you want to create a COM object for.","pos":[413485,413541]},{"pos":[413548,413560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A COM object.","pos":[413562,413575]},{"pos":[413582,413589],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The IIS object can be one of the possible values supplied by the IISObject system enumeration:","pos":[413591,413685]},{"content":"ApplicationObject","pos":[413691,413708]},{"content":"Request","pos":[413713,413720]},{"content":"Response","pos":[413725,413733]},{"content":"Server","pos":[413738,413744]},{"content":"SessionObject","pos":[413749,413762]},{"pos":[413768,413792],"content":"Method getSysTraceActive","linkify":"Method getSysTraceActive","nodes":[{"content":"Method getSysTraceActive","pos":[0,24]}]},{"content":"Enables you to determine whether system tracing is turned on for the session.","pos":[413794,413871]},{"pos":[413925,413937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if system tracing is active; otherwise, false.","pos":[413939,413990]},{"pos":[413997,414004],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To turn on system tracing, use xSession::setSysTraceActive.","pos":[414006,414065]},{"pos":[414072,414080],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the getSysTraceActive method to determine the original setting for system tracing and to reset the setting after tracing is temporarily set to false.","pos":[414082,414258]},{"pos":[414980,415011],"content":"Method getXRefAssembyTempFolder","linkify":"Method getXRefAssembyTempFolder","nodes":[{"content":"Method getXRefAssembyTempFolder","pos":[0,31]}]},{"pos":[415068,415080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415086,415105],"content":"Method isCLRSession","linkify":"Method isCLRSession","nodes":[{"content":"Method isCLRSession","pos":[0,19]}]},{"pos":[415154,415166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415172,415214],"content":"Method isUserPreferredTzSameAsLocalMachine","linkify":"Method isUserPreferredTzSameAsLocalMachine","nodes":[{"content":"Method isUserPreferredTzSameAsLocalMachine","pos":[0,42]}]},{"pos":[415286,415298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415304,415341],"content":"Method lastDuplicateKeyViolatingTable","linkify":"Method lastDuplicateKeyViolatingTable","nodes":[{"content":"Method lastDuplicateKeyViolatingTable","pos":[0,37]}]},{"pos":[415404,415416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415422,415455],"content":"Method lastUpdateConflictingTable","linkify":"Method lastUpdateConflictingTable","nodes":[{"content":"Method lastUpdateConflictingTable","pos":[0,33]}]},{"content":"Retrieves an instance of the table that most recently had an update conflict.","pos":[415457,415534]},{"pos":[415593,415605],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An instance of the table that most recently had an update conflict.","pos":[415607,415674]},{"pos":[415681,415689],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example demonstrates the general use of the lastUpdateConflictingTable method—it enables you to abort or retry transactions according to which table has an update conflict.","pos":[415691,415877]},{"pos":[416311,416330],"content":"Method maxSessionId","linkify":"Method maxSessionId","nodes":[{"content":"Method maxSessionId","pos":[0,19]}]},{"content":"Retrieves the maximum number of sessions that are permitted by the current license codes.","pos":[416332,416421]},{"pos":[416466,416478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates the maximum number of sessions that are permitted by the current license code.","pos":[416480,416584]},{"pos":[416590,416607],"content":"Method numSession","linkify":"Method numSession","nodes":[{"content":"Method numSession","pos":[0,17]}]},{"content":"Retrieves the current number of registered sessions.","pos":[416609,416661]},{"pos":[416704,416716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates the number of currently registered sessions.","pos":[416718,416788]},{"pos":[416794,416816],"content":"Method preferredLocale","linkify":"Method preferredLocale","nodes":[{"content":"Method preferredLocale","pos":[0,22]}]},{"pos":[416869,416881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416887,416909],"content":"Method pseudoBandwidth","linkify":"Method pseudoBandwidth","nodes":[{"content":"Method pseudoBandwidth","pos":[0,22]}]},{"content":"Determines whether bandwidth simulation is turned on for the session, and enables bandwidth simulation to be turned on or off.","pos":[416911,417037]},{"pos":[417100,417110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"bandwidth","pos":[417112,417121]},{"content":"Turns bandwidth simulation on or off.","pos":[417124,417161]},{"content":"Set to zero to turn simulation off.","pos":[417162,417197]},{"content":"Other values turn simulation on.","pos":[417198,417230]},{"pos":[417237,417249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates whether bandwidth simulation is turned on.","pos":[417251,417319]},{"content":"If the return value is zero, there is no bandwidth simulation.","pos":[417320,417382]},{"pos":[417389,417396],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can run pseudo simulations of remote connections from the System monitoring tool:","pos":[417398,417483]},{"content":"On the toolbar, select Tools, point to Development tools, point to System monitoring, and then click the Remote connection tab.","pos":[417489,417616]},{"pos":[417622,417642],"content":"Method pseudoLatency","linkify":"Method pseudoLatency","nodes":[{"content":"Method pseudoLatency","pos":[0,20]}]},{"content":"Determines whether latency simulation is turned on for the session, and enables latency simulation to be turned on or off.","pos":[417644,417766]},{"pos":[417825,417835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"latency","pos":[417837,417844]},{"content":"Turns latency simulation on or off.","pos":[417847,417882]},{"content":"Set to zero to turn simulation off.","pos":[417883,417918]},{"content":"Other values turn simulation on.","pos":[417919,417951]},{"pos":[417958,417970],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates whether latency simulation is turned on.","pos":[417972,418038]},{"content":"If the return value is zero, there is no latency simulation.","pos":[418039,418099]},{"pos":[418106,418113],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can run pseudo simulations of remote connections from the System monitoring tool:","pos":[418115,418200]},{"content":"On the toolbar, select Tools, point to Development tools, point to System monitoring, and then click the Remote connection tab","pos":[418206,418332]},{"pos":[418338,418358],"content":"Method pseudoSimMode","linkify":"Method pseudoSimMode","nodes":[{"content":"Method pseudoSimMode","pos":[0,20]}]},{"content":"Determines whether delay simulation is turned on for the session, and enables delay simulation to be turned on or off.","pos":[418360,418478]},{"pos":[418537,418547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"simMode","pos":[418549,418556]},{"content":"Turns delay simulation on or off.","pos":[418559,418592]},{"content":"Set to zero to turn simulation off.","pos":[418593,418628]},{"content":"Set to 1 to simulate delays for application calls.","pos":[418629,418679]},{"content":"Set to 2 to simulate delays for all calls.","pos":[418680,418722]},{"pos":[418729,418741],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates whether delay simulation is turned on.","pos":[418743,418807]},{"content":"If the return value is zero, there is no delay simulation.","pos":[418808,418866]},{"content":"If the return value is 1, delays are simulated only for application-controlled calls.","pos":[418867,418952]},{"content":"If the return value is 2, delays are simulated for all calls.","pos":[418953,419014]},{"pos":[419021,419028],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can run pseudo simulations of remote connections from the System monitoring tool:","pos":[419030,419115]},{"content":"On the toolbar, select Tools, point to Development tools, point to System monitoring, and then click the Remote connection tab","pos":[419121,419247]},{"pos":[419253,419275],"content":"Method systemSessionId","linkify":"Method systemSessionId","nodes":[{"content":"Method systemSessionId","pos":[0,22]}]},{"content":"Retrieves the system session ID for the session that the xSession object covers.","pos":[419277,419357]},{"pos":[419405,419417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that represents the session ID.","pos":[419419,419461]},{"pos":[419468,419475],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Some sessions, such as a COM session or a worker thread session, have a parent system session.","pos":[419477,419571]},{"pos":[419577,419596],"content":"Method xppCallStack","linkify":"Method xppCallStack","nodes":[{"content":"Method xppCallStack","pos":[0,19]}]},{"content":"Retrieves the current call stack.","pos":[419598,419631]},{"pos":[419682,419694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that holds the contents of the current call stack.","pos":[419696,419758]},{"pos":[419764,419780],"content":"Method removeAOC","linkify":"Method removeAOC","nodes":[{"content":"Method removeAOC","pos":[0,16]}]},{"content":"Removes the Application Object Server client-side cache (AOC) for the current session.","pos":[419782,419868]},{"pos":[419910,419926],"content":"Method updateAOC","linkify":"Method updateAOC","nodes":[{"content":"Method updateAOC","pos":[0,16]}]},{"content":"Updates the Application Object Server client-side cache (AOC) for the current session.","pos":[419928,420014]},{"pos":[420057,420064],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"AOC is a client-side cache that consists of metadata that is loaded by the client, and then saved to disk when the client is closed.","pos":[420066,420198]},{"content":"It is saved under the user’s local settings folder.","pos":[420199,420250]},{"content":"The file has an .auc filename extension and is saved in a user's Local Settings folder.","pos":[420251,420338]},{"content":"When the client is started, it reads from the cache, and then deletes the cache from the disk.","pos":[420339,420433]},{"pos":[420439,420469],"content":"Method setAutoUpdateRecVersion","linkify":"Method setAutoUpdateRecVersion","nodes":[{"content":"Method setAutoUpdateRecVersion","pos":[0,30]}]},{"pos":[420554,420564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"autoUpdateRecVersion","pos":[420566,420586]},{"pos":[420594,420618],"content":"Method setSysTraceActive","linkify":"Method setSysTraceActive","nodes":[{"content":"Method setSysTraceActive","pos":[0,24]}]},{"content":"Switches system tracing on or off.","pos":[420620,420654]},{"pos":[420719,420729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nValue","pos":[420731,420737]},{"content":"A Boolean value that determines whether tracing should be switched on or off.","pos":[420740,420817]},{"content":"Set to true to switch tracing on.","pos":[420818,420851]},{"pos":[420858,420866],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the setSysTraceActive method to turn system tracing off when data is imported.","pos":[420868,420973]},{"pos":[421695,421731],"content":"Method clientSetAutoUpdateRecVersion","linkify":"Method clientSetAutoUpdateRecVersion","nodes":[{"content":"Method clientSetAutoUpdateRecVersion","pos":[0,36]}]},{"pos":[421823,421833],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"autoUpdateRecVersion","pos":[421835,421855]},{"pos":[421863,421899],"content":"Method serverSetAutoUpdateRecVersion","linkify":"Method serverSetAutoUpdateRecVersion","nodes":[{"content":"Method serverSetAutoUpdateRecVersion","pos":[0,36]}]},{"pos":[421991,422001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"autoUpdateRecVersion","pos":[422003,422023]},{"pos":[422031,422041],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Instantiates the xSession object, either for current session or for the session ID passed in as a parameter.","pos":[422043,422151]},{"pos":[422220,422230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sessionId","pos":[422232,422241]},{"content":"A boolean flag that, if set to true, checks to determine whether the session specified by the <ph id=\"ph1\">\\_</ph>SessionId parameter exists.","pos":[422244,422367],"source":"A boolean flag that, if set to true, checks to determine whether the session specified by the \\_SessionId parameter exists."},{"content":"The operation that checks whether a session exists might use a lot of system resources.","pos":[422368,422455]},{"content":"This parameter is therefore set to false by default.","pos":[422456,422508]},{"content":"checkSession","pos":[422520,422532]},{"content":"A boolean flag that, if set to true, checks to determine whether the session specified by the <ph id=\"ph1\">\\_</ph>SessionId parameter exists.","pos":[422535,422658],"source":"A boolean flag that, if set to true, checks to determine whether the session specified by the \\_SessionId parameter exists."},{"content":"The operation that checks whether a session exists might use a lot of system resources.","pos":[422659,422746]},{"content":"This parameter is therefore set to false by default.","pos":[422747,422799]},{"pos":[422806,422814],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example returns a count of all the active sessions.","pos":[422816,422881]},{"pos":[423512,423548],"content":"Method reloadTableCollectionOnClient","linkify":"Method reloadTableCollectionOnClient","nodes":[{"content":"Method reloadTableCollectionOnClient","pos":[0,36]}]},{"pos":[423609,423629],"content":"Class xSqlEnumerator","linkify":"Class xSqlEnumerator","nodes":[{"content":"Class xSqlEnumerator","pos":[0,20]}]},{"pos":[423675,423682],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[423688,423696],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[423702,423709],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[423713,423719]},{"content":"Description","pos":[423768,423779]},{"content":"public str getConnStr(str database)","pos":[423943,423978]},{"content":"public List getDatabases(str server, <ph id=\"ph1\">\\[</ph>str driver<ph id=\"ph2\">\\]</ph>)","pos":[424058,424110],"source":"public List getDatabases(str server, \\[str driver\\])"},{"content":"public List getServers(str driver)","pos":[424173,424207]},{"content":"public void new()","pos":[424288,424305]},{"content":"Initializes a new instance of the xSqlEnumerator class.","pos":[424343,424398]},{"pos":[424406,424423],"content":"Method getConnStr","linkify":"Method getConnStr","nodes":[{"content":"Method getConnStr","pos":[0,17]}]},{"pos":[424471,424481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"database","pos":[424483,424491]},{"pos":[424500,424512],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424518,424537],"content":"Method getDatabases","linkify":"Method getDatabases","nodes":[{"content":"Method getDatabases","pos":[0,19]}]},{"pos":[424600,424610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"server","pos":[424612,424618]},{"content":"driver","pos":[424632,424638]},{"pos":[424647,424659],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424665,424682],"content":"Method getServers","linkify":"Method getServers","nodes":[{"content":"Method getServers","pos":[0,17]}]},{"pos":[424729,424739],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"driver","pos":[424741,424747]},{"pos":[424756,424768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424774,424784],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xSqlEnumerator class.","pos":[424786,424841]},{"pos":[424869,424893],"content":"Class xToastNotification","linkify":"Class xToastNotification","nodes":[{"content":"Class xToastNotification","pos":[0,24]}]},{"pos":[424943,424950],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[424956,424964],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[424970,424977],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[424981,424987]},{"content":"Description","pos":[425027,425038]},{"content":"public int duration(<ph id=\"ph1\">\\[</ph>int duration<ph id=\"ph2\">\\]</ph>)","pos":[425201,425238],"source":"public int duration(\\[int duration\\])"},{"content":"public int imageResId(<ph id=\"ph1\">\\[</ph>int imageResId<ph id=\"ph2\">\\]</ph>)","pos":[425311,425352],"source":"public int imageResId(\\[int imageResId\\])"},{"content":"public str messageText(<ph id=\"ph1\">\\[</ph>str messageText<ph id=\"ph2\">\\]</ph>)","pos":[425421,425464],"source":"public str messageText(\\[str messageText\\])"},{"content":"public str subject(<ph id=\"ph1\">\\[</ph>str subject<ph id=\"ph2\">\\]</ph>)","pos":[425531,425566],"source":"public str subject(\\[str subject\\])"},{"content":"public void new()","pos":[425641,425658]},{"content":"Initializes a new instance of the xToastNotification class.","pos":[425687,425746]},{"content":"public void onClosed()","pos":[425751,425773]},{"content":"public void show()","pos":[425861,425879]},{"content":"public void finalize()","pos":[425971,425993]},{"content":"public void onClicked()","pos":[426081,426104]},{"pos":[426194,426209],"content":"Method duration","linkify":"Method duration","nodes":[{"content":"Method duration","pos":[0,15]}]},{"pos":[426257,426267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"duration","pos":[426269,426277]},{"pos":[426286,426298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426304,426321],"content":"Method imageResId","linkify":"Method imageResId","nodes":[{"content":"Method imageResId","pos":[0,17]}]},{"pos":[426373,426383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"imageResId","pos":[426385,426395]},{"pos":[426404,426416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426422,426440],"content":"Method messageText","linkify":"Method messageText","nodes":[{"content":"Method messageText","pos":[0,18]}]},{"pos":[426494,426504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"messageText","pos":[426506,426517]},{"pos":[426526,426538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426544,426558],"content":"Method subject","linkify":"Method subject","nodes":[{"content":"Method subject","pos":[0,14]}]},{"pos":[426604,426614],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"subject","pos":[426616,426623]},{"pos":[426632,426644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426650,426660],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xToastNotification class.","pos":[426662,426721]},{"pos":[426750,426765],"content":"Method onClosed","linkify":"Method onClosed","nodes":[{"content":"Method onClosed","pos":[0,15]}]},{"pos":[426799,426810],"content":"Method show","linkify":"Method show","nodes":[{"content":"Method show","pos":[0,11]}]},{"pos":[426840,426855],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[426889,426905],"content":"Method onClicked","linkify":"Method onClicked","nodes":[{"content":"Method onClicked","pos":[0,16]}]},{"pos":[426939,426960],"content":"Class xVersionControl","linkify":"Class xVersionControl","nodes":[{"content":"Class xVersionControl","pos":[0,21]}]},{"pos":[427007,427014],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[427020,427028],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[427034,427041],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[427045,427051]},{"content":"Description","pos":[427209,427220]},{"content":"public boolean allowCreate(TreeNode node)","pos":[427495,427536]},{"content":"public boolean allowDelete(TreeNode node)","pos":[427720,427761]},{"content":"public boolean allowEdit(TreeNode node)","pos":[427945,427984]},{"content":"public boolean allowRename(TreeNode node)","pos":[428170,428211]},{"content":"public boolean checkOut(TreeNode node)","pos":[428395,428433]},{"content":"public boolean create(TreeNode node)","pos":[428620,428656]},{"content":"public boolean delete(TreeNode node)","pos":[428845,428881]},{"content":"public int getAvailableId(UtilElementType objectType, UtilEntryLevel layer, <ph id=\"ph1\">\\[</ph>int parentId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>IdAllocationSchema idAllocationSchema<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean inheritance<ph id=\"ph6\">\\]</ph>)","pos":[429070,429231],"source":"public int getAvailableId(UtilElementType objectType, UtilEntryLevel layer, \\[int parentId\\], \\[IdAllocationSchema idAllocationSchema\\], \\[boolean inheritance\\])"},{"content":"public int getAvailableLabelId(str labelFile, str language, <ph id=\"ph1\">\\[</ph>IdAllocationSchema idAllocationSchema<ph id=\"ph2\">\\]</ph>)","pos":[429295,429397],"source":"public int getAvailableLabelId(str labelFile, str language, \\[IdAllocationSchema idAllocationSchema\\])"},{"content":"public boolean ideIntegration()","pos":[429520,429551]},{"content":"public boolean moveToModel(TreeNode node, int modelId)","pos":[429745,429799]},{"content":"public boolean rename(TreeNode node, str newname)","pos":[429970,430019]},{"content":"public boolean undoCheckOut(TreeNode node, <ph id=\"ph1\">\\[</ph>boolean showDialog<ph id=\"ph2\">\\]</ph>)","pos":[430195,430261],"source":"public boolean undoCheckOut(TreeNode node, \\[boolean showDialog\\])"},{"content":"public Set unwantedObjectTypes()","pos":[430420,430452]},{"content":"public void colorAOT()","pos":[430645,430667]},{"content":"public void save(TreeNode node)","pos":[430870,430901]},{"content":"public void showHistory(TreeNode node)","pos":[431095,431133]},{"content":"public void updateCheckedOutList(Set checkedOutObjects)","pos":[431320,431375]},{"content":"public void getLatestVersion(<ph id=\"ph1\">\\[</ph>TreeNode node<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean delLocalFiles<ph id=\"ph4\">\\]</ph>)","pos":[431545,431619],"source":"public void getLatestVersion(\\[TreeNode node\\], \\[boolean delLocalFiles\\])"},{"content":"public void checkIn(TreeNode node)","pos":[431770,431804]},{"content":"public void new()","pos":[431995,432012]},{"content":"Initializes a new instance of the xVersionControl class.","pos":[432159,432215]},{"content":"public void reload()","pos":[432220,432240]},{"content":"public void getLabelVersion(<ph id=\"ph1\">\\[</ph>TreeNode node<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>str label<ph id=\"ph4\">\\]</ph>)","pos":[432445,432506],"source":"public void getLabelVersion(\\[TreeNode node\\], \\[str label\\])"},{"pos":[432673,432691],"content":"Method allowCreate","linkify":"Method allowCreate","nodes":[{"content":"Method allowCreate","pos":[0,18]}]},{"pos":[432745,432755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[432757,432761]},{"pos":[432770,432782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[432788,432806],"content":"Method allowDelete","linkify":"Method allowDelete","nodes":[{"content":"Method allowDelete","pos":[0,18]}]},{"pos":[432860,432870],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[432872,432876]},{"pos":[432885,432897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[432903,432919],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"pos":[432971,432981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[432983,432987]},{"pos":[432996,433008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433014,433032],"content":"Method allowRename","linkify":"Method allowRename","nodes":[{"content":"Method allowRename","pos":[0,18]}]},{"pos":[433086,433096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[433098,433102]},{"pos":[433111,433123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433129,433144],"content":"Method checkOut","linkify":"Method checkOut","nodes":[{"content":"Method checkOut","pos":[0,15]}]},{"pos":[433195,433205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[433207,433211]},{"pos":[433220,433232],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433238,433251],"content":"Method create","linkify":"Method create","nodes":[{"content":"Method create","pos":[0,13]}]},{"pos":[433300,433310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[433312,433316]},{"pos":[433325,433337],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433343,433356],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[433405,433415],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[433417,433421]},{"pos":[433430,433442],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433448,433469],"content":"Method getAvailableId","linkify":"Method getAvailableId","nodes":[{"content":"Method getAvailableId","pos":[0,21]}]},{"pos":[433637,433647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"objectType","pos":[433649,433659]},{"content":"layer","pos":[433673,433678]},{"content":"parentId","pos":[433692,433700]},{"content":"idAllocationSchema","pos":[433714,433732]},{"content":"inheritance","pos":[433746,433757]},{"pos":[433766,433778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433784,433810],"content":"Method getAvailableLabelId","linkify":"Method getAvailableLabelId","nodes":[{"content":"Method getAvailableLabelId","pos":[0,26]}]},{"pos":[433923,433933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"labelFile","pos":[433935,433944]},{"content":"language","pos":[433958,433966]},{"content":"idAllocationSchema","pos":[433980,433998]},{"pos":[434007,434019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434025,434046],"content":"Method ideIntegration","linkify":"Method ideIntegration","nodes":[{"content":"Method ideIntegration","pos":[0,21]}]},{"pos":[434090,434102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434108,434126],"content":"Method moveToModel","linkify":"Method moveToModel","nodes":[{"content":"Method moveToModel","pos":[0,18]}]},{"pos":[434193,434203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[434205,434209]},{"content":"modelId","pos":[434223,434230]},{"pos":[434239,434251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434257,434270],"content":"Method rename","linkify":"Method rename","nodes":[{"content":"Method rename","pos":[0,13]}]},{"pos":[434332,434342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[434344,434348]},{"content":"newname","pos":[434362,434369]},{"pos":[434378,434390],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434396,434415],"content":"Method undoCheckOut","linkify":"Method undoCheckOut","nodes":[{"content":"Method undoCheckOut","pos":[0,19]}]},{"pos":[434492,434502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[434504,434508]},{"content":"showDialog","pos":[434522,434532]},{"pos":[434541,434553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434559,434585],"content":"Method unwantedObjectTypes","linkify":"Method unwantedObjectTypes","nodes":[{"content":"Method unwantedObjectTypes","pos":[0,26]}]},{"pos":[434630,434642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434648,434663],"content":"Method colorAOT","linkify":"Method colorAOT","nodes":[{"content":"Method colorAOT","pos":[0,15]}]},{"pos":[434697,434708],"content":"Method save","linkify":"Method save","nodes":[{"content":"Method save","pos":[0,11]}]},{"pos":[434752,434762],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[434764,434768]},{"pos":[434776,434794],"content":"Method showHistory","linkify":"Method showHistory","nodes":[{"content":"Method showHistory","pos":[0,18]}]},{"pos":[434845,434855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[434857,434861]},{"pos":[434869,434896],"content":"Method updateCheckedOutList","linkify":"Method updateCheckedOutList","nodes":[{"content":"Method updateCheckedOutList","pos":[0,27]}]},{"pos":[434964,434974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"checkedOutObjects","pos":[434976,434993]},{"pos":[435001,435024],"content":"Method getLatestVersion","linkify":"Method getLatestVersion","nodes":[{"content":"Method getLatestVersion","pos":[0,23]}]},{"pos":[435107,435117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[435119,435123]},{"content":"delLocalFiles","pos":[435137,435150]},{"pos":[435158,435172],"content":"Method checkIn","linkify":"Method checkIn","nodes":[{"content":"Method checkIn","pos":[0,14]}]},{"pos":[435219,435229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[435231,435235]},{"pos":[435243,435253],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the xVersionControl class.","pos":[435255,435311]},{"pos":[435340,435353],"content":"Method reload","linkify":"Method reload","nodes":[{"content":"Method reload","pos":[0,13]}]},{"pos":[435385,435407],"content":"Method getLabelVersion","linkify":"Method getLabelVersion","nodes":[{"content":"Method getLabelVersion","pos":[0,22]}]},{"pos":[435477,435487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[435489,435493]},{"content":"label","pos":[435507,435512]}]}