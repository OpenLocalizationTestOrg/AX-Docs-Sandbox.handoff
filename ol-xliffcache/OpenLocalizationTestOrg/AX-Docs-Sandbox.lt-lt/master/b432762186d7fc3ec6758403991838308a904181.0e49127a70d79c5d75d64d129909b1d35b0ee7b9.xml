{"nodes":[{"pos":[32,74],"content":"Segmented entry control migration guidance","needQuote":true,"needEscape":true,"nodes":[{"content":"Segmented entry control migration guidance","pos":[0,42]}]},{"pos":[88,259],"content":"This article guides you through the process of migrating a Segmented Entry control from the Microsoft Dynamics AX 2012 pattern to the new pattern in Microsoft Dynamics AX.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article guides you through the process of migrating a Segmented Entry control from the Microsoft Dynamics AX 2012 pattern to the new pattern in Microsoft Dynamics AX.","pos":[0,171]}]},{"pos":[758,800],"content":"Segmented entry control migration guidance","linkify":"Segmented entry control migration guidance","nodes":[{"content":"Segmented entry control migration guidance","pos":[0,42]}]},{"content":"This article guides you through the process of migrating a Segmented Entry control from the Microsoft Dynamics AX 2012 pattern to the new pattern in Microsoft Dynamics AX.","pos":[802,973]},{"content":"The goal of the new design is to encapsulate the control implementation and not require that forms interact with the classes that back the control.","pos":[975,1122]},{"content":"Therefore, in Microsoft Dynamics AX, <bpt id=\"p1\">*</bpt>all forms should interact only with the application programming interface (API) of the <bpt id=\"p2\">**</bpt>Segmented Entry<ept id=\"p2\">**</ept> control instance<ept id=\"p1\">*</ept>.","pos":[1123,1286],"source":" Therefore, in Microsoft Dynamics AX, *all forms should interact only with the application programming interface (API) of the **Segmented Entry** control instance*."},{"content":"They should not interact directly with the controller classes (such as <bpt id=\"p1\">**</bpt>LedgerDimensionAccountController<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>DimensionDynamicAccountController<ept id=\"p2\">**</ept>).","pos":[1287,1438],"source":" They should not interact directly with the controller classes (such as **LedgerDimensionAccountController** and **DimensionDynamicAccountController**)."},{"content":"Any property that was previously manipulated or called on the controller must now be called on the control.","pos":[1439,1546]},{"content":"<bpt id=\"p1\">**</bpt>Notes:<ept id=\"p1\">**</ept>","pos":[1547,1557],"source":"**Notes:**"},{"pos":[1563,1898],"content":"Some APIs have naming differences between the controller and the control. The following table lists these APIs.\n**Controller Method (old)**\n**Control Method (new)**\nparmDate\nparmControlDate\nparmFilterLedgerPostingType\nparmPostingType\nparmDimensionAccountStorageUsage\nparmDimensionAccountStorageUsageType","leadings":["","    ","    ","    ","    ","    ","    ","    ","    "],"nodes":[{"content":"Some APIs have naming differences between the controller and the control.","pos":[0,73]},{"content":"The following table lists these APIs.","pos":[74,111]},{"content":"<bpt id=\"p1\">**</bpt>Controller Method (old)<ept id=\"p1\">**</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">**</bpt>Control Method (new)<ept id=\"p2\">**</ept> parmDate parmControlDate parmFilterLedgerPostingType parmPostingType parmDimensionAccountStorageUsage parmDimensionAccountStorageUsageType","pos":[112,303],"source":"**Controller Method (old)**\n**Control Method (new)**\nparmDate\nparmControlDate\nparmFilterLedgerPostingType\nparmPostingType\nparmDimensionAccountStorageUsage\nparmDimensionAccountStorageUsageType"}]},{"pos":[1903,1914],"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","source":"**Example**"},{"pos":[1923,1971],"content":"<bpt id=\"p1\">**</bpt>Before:<ept id=\"p1\">**</ept> controller.parmDate(systemDateGet())","source":"**Before:** controller.parmDate(systemDateGet())"},{"pos":[1980,2038],"content":"<bpt id=\"p1\">**</bpt>After:<ept id=\"p1\">**</ept> LedgerAccount.parmControlDate(systemDateGet());","source":"**After:** LedgerAccount.parmControlDate(systemDateGet());"},{"pos":[2044,2194],"content":"In this example, <bpt id=\"p1\">**</bpt>controller<ept id=\"p1\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">**</bpt>LedgerDimensionAccountController<ept id=\"p2\">**</ept> instance and <bpt id=\"p3\">**</bpt>LedgerAccount<ept id=\"p3\">**</ept> <ph id=\"ph2\">&amp;gt;</ph> new <bpt id=\"p4\">**</bpt>Segmented Entry<ept id=\"p4\">**</ept> control instance","source":"In this example, **controller** &gt; **LedgerDimensionAccountController** instance and **LedgerAccount** &gt; new **Segmented Entry** control instance"},{"content":"In methods that have been overridden on controls and data fields, the code upgrade rule replaces method calls on the controllers with method calls on each control instance that was using a particular controller.","pos":[2199,2410]},{"content":"<bpt id=\"p1\">**</bpt>Example<ept id=\"p1\">**</ept>","pos":[2411,2422],"source":"**Example**"},{"pos":[2431,2442],"content":"<bpt id=\"p1\">**</bpt>Before:<ept id=\"p1\">**</ept>","source":"**Before:**"},{"pos":[2582,2592],"content":"<bpt id=\"p1\">**</bpt>After:<ept id=\"p1\">**</ept>","source":"**After:**"},{"content":"These changes are made so that it's easier to copy and paste code that must be moved elsewhere (for example, in some instances of <bpt id=\"p1\">**</bpt>loadSegments()<ept id=\"p1\">**</ept> and other such methods).","pos":[2761,2934],"source":"These changes are made so that it's easier to copy and paste code that must be moved elsewhere (for example, in some instances of **loadSegments()** and other such methods)."},{"content":"You can ignore this change when you decide whether the method can be deleted.","pos":[2935,3012]},{"content":"Your decision should depend on whether the method has any custom logic.","pos":[3013,3084]},{"content":"The code upgrade script does not handle cases where a controller is instantiated within a method.","pos":[3089,3186]},{"content":"These cases must be migrated manually.","pos":[3187,3225]},{"content":"The MRU functionality from Microsoft Dynamics AX 2012 has been removed in Dynamics AX and won't be replaced.","pos":[3230,3338]},{"content":"<bpt id=\"p1\">**</bpt>parmTaxCode<ept id=\"p1\">**</ept> has been removed.","pos":[3343,3376],"source":"**parmTaxCode** has been removed."},{"content":"There is no replacement.","pos":[3377,3401]},{"pos":[3406,3416],"content":"Properties","linkify":"Properties","nodes":[{"content":"Properties","pos":[0,10]}]},{"content":"The custom properties for the <bpt id=\"p1\">**</bpt>Segmented Entry<ept id=\"p1\">**</ept> control are found under <bpt id=\"p2\">**</bpt>Controller<ept id=\"p2\">**</ept>.","pos":[3417,3506],"source":"The custom properties for the **Segmented Entry** control are found under **Controller**."},{"content":"The following screen shot shows an example.","pos":[3507,3550]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>111<ept id=\"p1\">](./media/111.png)](./media/111.png)</ept> Not all properties apply to all <bpt id=\"p2\">**</bpt>Controller<ept id=\"p2\">**</ept> class types.","pos":[3551,3653],"source":"[![111](./media/111.png)](./media/111.png) Not all properties apply to all **Controller** class types."},{"content":"Properties that don't apply to a selected controller class will be disabled.","pos":[3654,3730]},{"content":"The following table provides details about the properties.","pos":[3731,3789]},{"pos":[3791,3803],"content":"<bpt id=\"p1\">**</bpt>Property<ept id=\"p1\">**</ept>","source":"**Property**"},{"pos":[3805,3821],"content":"<bpt id=\"p1\">**</bpt>Valid Values<ept id=\"p1\">**</ept>","source":"**Valid Values**"},{"pos":[3823,3832],"content":"<bpt id=\"p1\">**</bpt>Usage<ept id=\"p1\">**</ept>","source":"**Usage**"},{"content":"Account Type Field","pos":[3834,3852]},{"content":"A field from the datasource.","pos":[3854,3882]},{"content":"Determines the type of account used.","pos":[3884,3920]},{"content":"Typically utilized for journal entry from a multi-segment ledger account to single segment values from other backing tables such as Cust, Vend, Bank, Project and similar.","pos":[3921,4091]},{"content":"Controller Class","pos":[4093,4109]},{"content":"One of 6 Controller classes.","pos":[4111,4139]},{"content":"For example LedgerDimensionDefaultAccountController.","pos":[4140,4192]},{"content":"Determines the pattern and behavior of the Segmented Entry control.","pos":[4194,4261]},{"content":"More information about this property is provided below.","pos":[4262,4317]},{"content":"Include Financial Accounts","pos":[4319,4345]},{"content":"NoYes","pos":[4347,4352]},{"content":"Determines if Main accounts that are Financial accounts are valid for use.","pos":[4354,4428]},{"content":"Include Total Accounts","pos":[4430,4452]},{"content":"NoYes","pos":[4454,4459]},{"content":"Determines if Main accounts of type Total are valid for use.","pos":[4461,4521]},{"content":"Is Default Account","pos":[4523,4541]},{"content":"TrueFalse","pos":[4543,4552]},{"content":"For a Dynamic account, determines if the account should be a default or full account.","pos":[4554,4639]},{"content":"Lock Main Account Segment","pos":[4641,4666]},{"content":"NoYes","pos":[4668,4673]},{"content":"Controls whether the Main account segment is locked.","pos":[4675,4727]},{"content":"Typically used in journals and distributions based upon configuration.","pos":[4728,4798]},{"content":"Posting Type","pos":[4800,4812]},{"content":"A value from the LedgerPostingType enumeration.","pos":[4814,4861]},{"content":"The Main account is validated to see if the posting type is allowed to be used with that account.","pos":[4863,4960]},{"content":"Validate Blocked For Manual Entry","pos":[4962,4995]},{"content":"NoYes","pos":[4997,5002]},{"content":"Determines if the 'Blocked for Manual Entry' status on the dimension should be respected or not.","pos":[5004,5100]},{"pos":[5105,5130],"content":"Controller class property","linkify":"Controller class property","nodes":[{"content":"Controller class property","pos":[0,25]}]},{"content":"The following table provides details about each controller.","pos":[5131,5190]},{"pos":[5192,5206],"content":"<bpt id=\"p1\">**</bpt>Controller<ept id=\"p1\">**</ept>","source":"**Controller**"},{"pos":[5208,5219],"content":"<bpt id=\"p1\">**</bpt>Details<ept id=\"p1\">**</ept>","source":"**Details**"},{"content":"BudgetLedgerDimension","pos":[5221,5242]},{"content":"This Controller provides budget based support for data entry in the Segmented Entry control.","pos":[5244,5336]},{"content":"When using this controller, an Account Structure must be provided to the Segmented Entry control.","pos":[5337,5434]},{"content":"BudgetPlanningLedgerDimension","pos":[5436,5465]},{"content":"This Controller provides budget planning based support for data entry in the Segmented Entry control.","pos":[5467,5568]},{"content":"When using this controller, an Account Structure must be provided to the Segmented Entry control.","pos":[5569,5666]},{"content":"DimensionDynamicAccount","pos":[5668,5691]},{"content":"This Controller provides support for multiple account types in the Segmented Entry control.","pos":[5693,5784]},{"content":"LedgerDimensionAccountAlias","pos":[5786,5813]},{"content":"This Controller provides support for account aliases in the Segmented Entry control","pos":[5815,5898]},{"content":"LedgerDimensionAccount","pos":[5900,5922]},{"content":"This Controller provides support for multi-segment data entry in the Segmented Entry control.","pos":[5924,6017]},{"content":"LedgerDimensionDefaultAccount","pos":[6019,6048]},{"content":"This Controller provides support for default accounts in the Segmented Entry control.","pos":[6050,6135]},{"pos":[6140,6155],"content":"Migration steps","linkify":"Migration steps","nodes":[{"content":"Migration steps","pos":[0,15]}]},{"pos":[6160,6166],"content":"Step 1","linkify":"Step 1","nodes":[{"content":"Step 1","pos":[0,6]}]},{"pos":[6173,6180],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"content":"If <bpt id=\"p1\">**</bpt>SegmentedEntry<ept id=\"p1\">**</ept> appears as the type next to any control, change it to <bpt id=\"p2\">**</bpt>SegmentedEntryControl<ept id=\"p2\">**</ept>.","pos":[6182,6284],"source":"If **SegmentedEntry** appears as the type next to any control, change it to **SegmentedEntryControl**."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>SegmentMigrate01<ept id=\"p1\">](./media/segmentmigrate01.png)](./media/segmentmigrate01.png)</ept>","pos":[6285,6366],"source":"[![SegmentMigrate01](./media/segmentmigrate01.png)](./media/segmentmigrate01.png)"},{"pos":[6373,6384],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"An easy method is to append \"<ph id=\"ph1\">\\_</ph>old\" to the name of the old control, add the new control (which should have the original name of the control), migrate all the settings over, and then delete the old control.","pos":[6386,6591],"source":"An easy method is to append \"\\_old\" to the name of the old control, add the new control (which should have the original name of the control), migrate all the settings over, and then delete the old control."},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> To prevent tests and other code that references the control from breaking, make sure that the new control has the same name as the old control.","pos":[6592,6745],"source":"**Note:** To prevent tests and other code that references the control from breaking, make sure that the new control has the same name as the old control."},{"content":"To add the new control, right-click the parent control that will contain the <bpt id=\"p1\">**</bpt>Segmented Entry<ept id=\"p1\">**</ept> control, and then select <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p3\">**</bpt>SegmentedEntryControl<ept id=\"p3\">**</ept>.","pos":[6746,6907],"source":" To add the new control, right-click the parent control that will contain the **Segmented Entry** control, and then select **New** &gt; **SegmentedEntryControl**."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>SegmentMigrate02<ept id=\"p1\">](./media/segmentmigrate02-623x1024.png)](./media/segmentmigrate02.png)</ept> The following screen shot shows how new control will look.","pos":[6908,7057],"source":"[![SegmentMigrate02](./media/segmentmigrate02-623x1024.png)](./media/segmentmigrate02.png) The following screen shot shows how new control will look."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>SegmentMigrate03<ept id=\"p1\">](./media/segmentmigrate03.png)](./media/segmentmigrate03.png)</ept>","pos":[7058,7139],"source":"[![SegmentMigrate03](./media/segmentmigrate03.png)](./media/segmentmigrate03.png)"},{"pos":[7145,7151],"content":"Step 2","linkify":"Step 2","nodes":[{"content":"Step 2","pos":[0,6]}]},{"pos":[7158,7165],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[7167,7216],"content":"Override the  <bpt id=\"p1\">**</bpt>jumpRef()<ept id=\"p1\">**</ept> control/field method.","source":"Override the  **jumpRef()** control/field method."},{"pos":[7321,7332],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"Remove the <bpt id=\"p1\">**</bpt>jumpRef()<ept id=\"p1\">**</ept> method completely if it contains no other functionality.","pos":[7334,7415],"source":"Remove the **jumpRef()** method completely if it contains no other functionality."},{"content":"If there is other custom <bpt id=\"p1\">**</bpt>jumpRef<ept id=\"p1\">**</ept> functionality, leave that.","pos":[7416,7479],"source":" If there is other custom **jumpRef** functionality, leave that."},{"content":"However, <bpt id=\"p1\">**</bpt>jumpRef<ept id=\"p1\">**</ept> is otherwise automatically handled by the control.","pos":[7480,7551],"source":" However, **jumpRef** is otherwise automatically handled by the control."},{"pos":[7557,7563],"content":"Step 3","linkify":"Step 3","nodes":[{"content":"Step 3","pos":[0,6]}]},{"pos":[7570,7577],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[7579,7634],"content":"Override the <bpt id=\"p1\">**</bpt>loadAutoCompleteData()<ept id=\"p1\">**</ept> control method.","source":"Override the **loadAutoCompleteData()** control method."},{"pos":[7818,7829],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"pos":[7831,7876],"content":"Remove the <bpt id=\"p1\">**</bpt>loadAutoCompleteData()<ept id=\"p1\">**</ept> method.","source":"Remove the **loadAutoCompleteData()** method."},{"pos":[7882,7888],"content":"Step 4","linkify":"Step 4","nodes":[{"content":"Step 4","pos":[0,6]}]},{"pos":[7895,7902],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[7904,7951],"content":"Override the <bpt id=\"p1\">**</bpt>loadSegments()<ept id=\"p1\">**</ept> control method.","source":"Override the **loadSegments()** control method."},{"pos":[8150,8161],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"If the <bpt id=\"p1\">**</bpt>loadSegments()<ept id=\"p1\">**</ept> method does nothing except call the controller's <bpt id=\"p2\">**</bpt>loadSegments()<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>parmControl()<ept id=\"p3\">**</ept> methods, remove it.","pos":[8163,8298],"source":"If the **loadSegments()** method does nothing except call the controller's **loadSegments()** and **parmControl()** methods, remove it."},{"content":"However, make a note of the SEC control instance that is passed to the <bpt id=\"p1\">**</bpt>parmControl()<ept id=\"p1\">**</ept> call.","pos":[8299,8393],"source":" However, make a note of the SEC control instance that is passed to the **parmControl()** call."},{"content":"The methods that were being called will now have to be called on that instance.","pos":[8394,8473]},{"pos":[8479,8485],"content":"Step 5","linkify":"Step 5","nodes":[{"content":"Step 5","pos":[0,6]}]},{"pos":[8492,8499],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[8501,8548],"content":"Override the <bpt id=\"p1\">**</bpt>loadSegments()<ept id=\"p1\">**</ept> control method.","source":"Override the **loadSegments()** control method."},{"pos":[9116,9127],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"If the <bpt id=\"p1\">**</bpt>loadSegments()<ept id=\"p1\">**</ept> method was used to set parameters on the controller, the calls to <bpt id=\"p2\">**</bpt>parm<ept id=\"p2\">**</ept> method must be moved to every location where the source of the <bpt id=\"p3\">**</bpt>parm<ept id=\"p3\">**</ept> method can change.","pos":[9129,9320],"source":"If the **loadSegments()** method was used to set parameters on the controller, the calls to **parm** method must be moved to every location where the source of the **parm** method can change."},{"content":"In most cases, these locations are the <bpt id=\"p1\">**</bpt>modified()<ept id=\"p1\">**</ept> method on the corresponding data field and/or the <bpt id=\"p2\">**</bpt>active()<ept id=\"p2\">**</ept> method on the data source.","pos":[9321,9464],"source":" In most cases, these locations are the **modified()** method on the corresponding data field and/or the **active()** method on the data source."},{"content":"For example, some of the migrated code for the <bpt id=\"p1\">**</bpt>loadSegments()<ept id=\"p1\">**</ept> override on the left would look like this.","pos":[9465,9573],"source":" For example, some of the migrated code for the **loadSegments()** override on the left would look like this."},{"content":"Make a note of the SEC control instance that is passed on to the <bpt id=\"p1\">**</bpt>parmControl()<ept id=\"p1\">**</ept> call.","pos":[9640,9728],"source":"Make a note of the SEC control instance that is passed on to the **parmControl()** call."},{"content":"The methods that were being called on the controller will now have to be called on that instance.","pos":[9729,9826]},{"pos":[10061,10095],"content":"<bpt id=\"p1\">**</bpt>LedgerJournalTable data source<ept id=\"p1\">**</ept>","source":"**LedgerJournalTable data source**"},{"pos":[10193,10299],"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> After you've moved all the code out of the <bpt id=\"p2\">**</bpt>loadSegments()<ept id=\"p2\">**</ept> method, you can delete the method.","source":"**Note:** After you've moved all the code out of the **loadSegments()** method, you can delete the method."},{"pos":[10305,10311],"content":"Step 6","linkify":"Step 6","nodes":[{"content":"Step 6","pos":[0,6]}]},{"pos":[10318,10325],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"content":"Override the <bpt id=\"p1\">**</bpt>loadSegments()<ept id=\"p1\">**</ept> control method.","pos":[10327,10374],"source":"Override the **loadSegments()** control method."},{"content":"In some cases, the <bpt id=\"p1\">**</bpt>loadSegments()<ept id=\"p1\">**</ept> method might use a table buffer to set parameters on the controller, but that table buffer isn't a data source on the form.","pos":[10375,10536],"source":" In some cases, the **loadSegments()** method might use a table buffer to set parameters on the controller, but that table buffer isn't a data source on the form."},{"content":"For example, on the <bpt id=\"p1\">**</bpt>LedgerJournalTransDaily<ept id=\"p1\">**</ept> form, the original implementation of <bpt id=\"p2\">**</bpt>loadSegments()<ept id=\"p2\">**</ept> looked like this.","pos":[10537,10658],"source":" For example, on the **LedgerJournalTransDaily** form, the original implementation of **loadSegments()** looked like this."},{"pos":[11341,11488],"content":"Note that the <bpt id=\"p1\">**</bpt>JournalName<ept id=\"p1\">**</ept> property is set from the ledgerJournalTable buffer, but the LedgerJournalTable table isn't a data source on the form.","source":"Note that the **JournalName** property is set from the ledgerJournalTable buffer, but the LedgerJournalTable table isn't a data source on the form."},{"pos":[11495,11506],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"In such cases, you can't move that code to either the <bpt id=\"p1\">**</bpt>active()<ept id=\"p1\">**</ept> method of a data source or the <bpt id=\"p2\">**</bpt>modified()<ept id=\"p2\">**</ept> method on the data field.","pos":[11508,11646],"source":"In such cases, you can't move that code to either the **active()** method of a data source or the **modified()** method on the data field."},{"content":"Instead, you should identify where the table buffer is being set.","pos":[11647,11712]},{"content":"For example, in the original implementation of the <bpt id=\"p1\">**</bpt>LedgerJournalTransDaily<ept id=\"p1\">**</ept> form, the ledgerJournalTable buffer was set in the <bpt id=\"p2\">**</bpt>initLedger()<ept id=\"p2\">**</ept> method on the form.","pos":[11713,11879],"source":" For example, in the original implementation of the **LedgerJournalTransDaily** form, the ledgerJournalTable buffer was set in the **initLedger()** method on the form."},{"content":"It should be evident that the value that is passed to <bpt id=\"p1\">**</bpt>parmJournalName()<ept id=\"p1\">**</ept> can change only when the buffer is reassigned in the <bpt id=\"p2\">**</bpt>initLedger()<ept id=\"p2\">**</ept> method.","pos":[11880,12033],"source":" It should be evident that the value that is passed to **parmJournalName()** can change only when the buffer is reassigned in the **initLedger()** method."},{"content":"Therefore, code would have to be moved to the <bpt id=\"p1\">**</bpt>initLedger()<ept id=\"p1\">**</ept> method after the assignment of the buffer.","pos":[12034,12139],"source":" Therefore, code would have to be moved to the **initLedger()** method after the assignment of the buffer."},{"content":"Also, in accordance with the general guidelines, the <bpt id=\"p1\">**</bpt>parmJournalName()<ept id=\"p1\">**</ept> method would be called on the control instance.","pos":[12140,12262],"source":" Also, in accordance with the general guidelines, the **parmJournalName()** method would be called on the control instance."},{"pos":[12932,12938],"content":"Step 7","linkify":"Step 7","nodes":[{"content":"Step 7","pos":[0,6]}]},{"pos":[12945,12952],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[12954,13008],"content":"Override the <bpt id=\"p1\">**</bpt>segmentValueChanged()<ept id=\"p1\">**</ept> control method.","source":"Override the **segmentValueChanged()** control method."},{"pos":[13189,13200],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"pos":[13202,13376],"content":"If the implementation of <bpt id=\"p1\">**</bpt>segmentValueChanged()<ept id=\"p1\">**</ept> does nothing except call <bpt id=\"p2\">**</bpt>super()<ept id=\"p2\">**</ept> and the <bpt id=\"p3\">**</bpt>segmentValueChanged()<ept id=\"p3\">**</ept> method on the controller, you can remove the method.","source":"If the implementation of **segmentValueChanged()** does nothing except call **super()** and the **segmentValueChanged()** method on the controller, you can remove the method."},{"pos":[13382,13388],"content":"Step 8","linkify":"Step 8","nodes":[{"content":"Step 8","pos":[0,6]}]},{"pos":[13395,13402],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[13404,13458],"content":"Override the <bpt id=\"p1\">**</bpt>segmentValueChanged()<ept id=\"p1\">**</ept> control method.","source":"Override the **segmentValueChanged()** control method."},{"pos":[13791,13802],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"pos":[13804,13959],"content":"If the implementation of <bpt id=\"p1\">**</bpt>segmentValueChanged()<ept id=\"p1\">**</ept> has additional logic, you must replace the method with the <bpt id=\"p2\">**</bpt>onSegmentChanged()<ept id=\"p2\">**</ept> method, as shown here.","source":"If the implementation of **segmentValueChanged()** has additional logic, you must replace the method with the **onSegmentChanged()** method, as shown here."},{"pos":[14183,14193],"content":"<bpt id=\"p1\">**</bpt>Notes:<ept id=\"p1\">**</ept>","source":"**Notes:**"},{"pos":[14199,14260],"content":"To add the <bpt id=\"p1\">**</bpt>onSegmentChanged()<ept id=\"p1\">**</ept> method, follow these steps:","source":"To add the **onSegmentChanged()** method, follow these steps:"},{"pos":[14269,14329],"content":"Expand the <bpt id=\"p1\">**</bpt>Segmented Entry<ept id=\"p1\">**</ept> control to add the method to.","source":"Expand the **Segmented Entry** control to add the method to."},{"pos":[14338,14427],"content":"Right-click the <bpt id=\"p1\">**</bpt>Methods<ept id=\"p1\">**</ept> node, and then select <bpt id=\"p2\">**</bpt>Override<ept id=\"p2\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p3\">**</bpt>onSegmentChanged<ept id=\"p3\">**</ept>.","source":"Right-click the **Methods** node, and then select **Override** &gt; **onSegmentChanged**."},{"pos":[14432,14540],"content":"The new method doesn't have to call <bpt id=\"p1\">**</bpt>super()<ept id=\"p1\">**</ept> or any other method on either the control or the controller.","source":"The new method doesn't have to call **super()** or any other method on either the control or the controller."},{"pos":[14546,14552],"content":"Step 9","linkify":"Step 9","nodes":[{"content":"Step 9","pos":[0,6]}]},{"pos":[14559,14566],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[14568,14611],"content":"Override the <bpt id=\"p1\">**</bpt>validate()<ept id=\"p1\">**</ept> control method.","source":"Override the **validate()** control method."},{"pos":[14819,14830],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"Remove the <bpt id=\"p1\">**</bpt>validate()<ept id=\"p1\">**</ept> method, unless you have additional validation.","pos":[14832,14904],"source":"Remove the **validate()** method, unless you have additional validation."},{"content":"The <bpt id=\"p1\">**</bpt>super()<ept id=\"p1\">**</ept> call does everything that this code used to do.","pos":[14905,14968],"source":" The **super()** call does everything that this code used to do."},{"content":"Therefore, keep only any new code that you have.","pos":[14969,15017]},{"pos":[15023,15030],"content":"Step 10","linkify":"Step 10","nodes":[{"content":"Step 10","pos":[0,7]}]},{"pos":[15037,15044],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[15046,15087],"content":"Override the <bpt id=\"p1\">**</bpt>lookup()<ept id=\"p1\">**</ept> control method.","source":"Override the **lookup()** control method."},{"pos":[15900,15911],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"pos":[15913,15952],"content":"Leave the <bpt id=\"p1\">**</bpt>lookup()<ept id=\"p1\">**</ept> method as it is.","source":"Leave the **lookup()** method as it is."},{"pos":[15958,15965],"content":"Step 11","linkify":"Step 11","nodes":[{"content":"Step 11","pos":[0,7]}]},{"pos":[15972,15979],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[15981,16031],"content":"Override the <bpt id=\"p1\">**</bpt>lookupReference()<ept id=\"p1\">**</ept> control method.","source":"Override the **lookupReference()** control method."},{"pos":[16150,16161],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"pos":[16163,16250],"content":"If the <bpt id=\"p1\">**</bpt>lookupReference()<ept id=\"p1\">**</ept> method uses the default implementation, you can delete it.","source":"If the **lookupReference()** method uses the default implementation, you can delete it."},{"pos":[16256,16263],"content":"Step 12","linkify":"Step 12","nodes":[{"content":"Step 12","pos":[0,7]}]},{"pos":[16270,16277],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[16279,16322],"content":"Override the <bpt id=\"p1\">**</bpt>modified()<ept id=\"p1\">**</ept> control method.","source":"Override the **modified()** control method."},{"pos":[16890,16901],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"pos":[16903,16944],"content":"Leave the <bpt id=\"p1\">**</bpt>modified()<ept id=\"p1\">**</ept> method as it is.","source":"Leave the **modified()** method as it is."},{"pos":[16950,16957],"content":"Step 13","linkify":"Step 13","nodes":[{"content":"Step 13","pos":[0,7]}]},{"pos":[16964,16971],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[16973,17016],"content":"Override the <bpt id=\"p1\">**</bpt>gotFocus()<ept id=\"p1\">**</ept> control method.","source":"Override the **gotFocus()** control method."},{"pos":[17415,17426],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"The approach is similar to the approach for the <bpt id=\"p1\">**</bpt>loadSegments()<ept id=\"p1\">**</ept> method.","pos":[17428,17502],"source":"The approach is similar to the approach for the **loadSegments()** method."},{"content":"The code must be moved to every location where the source of the <bpt id=\"p1\">**</bpt>parm<ept id=\"p1\">**</ept> method can change.","pos":[17503,17595],"source":" The code must be moved to every location where the source of the **parm** method can change."},{"content":"In most cases, these locations are the <bpt id=\"p1\">**</bpt>modified()<ept id=\"p1\">**</ept> method on the corresponding data field and/or the <bpt id=\"p2\">**</bpt>active()<ept id=\"p2\">**</ept> method on the data source.","pos":[17596,17739],"source":" In most cases, these locations are the **modified()** method on the corresponding data field and/or the **active()** method on the data source."},{"content":"For example, for the preceding code, the migrated code would look like this.","pos":[17740,17816]},{"pos":[19547,19651],"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> After all the code has been moved out of the <bpt id=\"p2\">**</bpt>gotFocus()<ept id=\"p2\">**</ept> method, you can delete the method.","source":"**Note:** After all the code has been moved out of the **gotFocus()** method, you can delete the method."},{"pos":[19657,19664],"content":"Step 14","linkify":"Step 14","nodes":[{"content":"Step 14","pos":[0,7]}]},{"pos":[19671,19678],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[19680,19710],"content":"In the form <bpt id=\"p1\">**</bpt>init()<ept id=\"p1\">**</ept> method:","source":"In the form **init()** method:"},{"pos":[19886,19897],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"Set the following properties on the control:","pos":[19899,19943]},{"pos":[19949,19964],"content":"<bpt id=\"p1\">**</bpt>Data Source<ept id=\"p1\">**</ept>","source":"**Data Source**"},{"pos":[19969,19988],"content":"<bpt id=\"p1\">**</bpt>Reference Field<ept id=\"p1\">**</ept>","source":"**Reference Field**"},{"pos":[19993,20013],"content":"<bpt id=\"p1\">**</bpt>Controller Class<ept id=\"p1\">**</ept>","source":"**Controller Class**"},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>SegmentMigrate04<ept id=\"p1\">](./media/segmentmigrate04.png)](./media/segmentmigrate04.png)</ept> <bpt id=\"p2\">[</bpt><ph id=\"ph2\">![</ph>SegmentMigrate05<ept id=\"p2\">](./media/segmentmigrate05.png)](./media/segmentmigrate05.png)</ept> <bpt id=\"p3\">**</bpt>Note:<ept id=\"p3\">**</ept> A controller class is required for the control to work.","pos":[20015,20244],"source":"[![SegmentMigrate04](./media/segmentmigrate04.png)](./media/segmentmigrate04.png) [![SegmentMigrate05](./media/segmentmigrate05.png)](./media/segmentmigrate05.png) **Note:** A controller class is required for the control to work."},{"content":"Therefore, a run-time error will be thrown if the <bpt id=\"p1\">**</bpt>Controller Class<ept id=\"p1\">**</ept> property isn't set.","pos":[20245,20335],"source":" Therefore, a run-time error will be thrown if the **Controller Class** property isn't set."},{"pos":[20341,20348],"content":"Step 15","linkify":"Step 15","nodes":[{"content":"Step 15","pos":[0,7]}]},{"pos":[20355,20362],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[20462,20473],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"pos":[20475,20620],"content":"A map of the dimension specifiers must be created that can then be sent into the <bpt id=\"p1\">**</bpt>Segmented Entry<ept id=\"p1\">**</ept> control's <bpt id=\"p2\">**</bpt>setDimensionSpecifiers<ept id=\"p2\">**</ept> method.","source":"A map of the dimension specifiers must be created that can then be sent into the **Segmented Entry** control's **setDimensionSpecifiers** method."},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> You can add anything to the dimension specifiers map before it's sent to the control.","pos":[20866,20961],"source":"**Note:** You can add anything to the dimension specifiers map before it's sent to the control."},{"content":"You can also create a new map here.","pos":[20962,20997]},{"content":"(See the <bpt id=\"p1\">**</bpt>onSegmentChangedForPrimaryAccount<ept id=\"p1\">**</ept> method in the <bpt id=\"p2\">**</bpt>LedgerJournalEngine<ept id=\"p2\">**</ept> class for similar logic.)","pos":[20998,21108],"source":" (See the **onSegmentChangedForPrimaryAccount** method in the **LedgerJournalEngine** class for similar logic.)"},{"pos":[21114,21121],"content":"Step 16","linkify":"Step 16","nodes":[{"content":"Step 16","pos":[0,7]}]},{"pos":[21128,21135],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[21137,21288],"content":"<bpt id=\"p1\">**</bpt>parmControl()<ept id=\"p1\">**</ept> method calls: (These are typically present in the form's <bpt id=\"p2\">**</bpt>init()<ept id=\"p2\">**</ept> method or one of the methods that are overridden on the control.)","source":"**parmControl()** method calls: (These are typically present in the form's **init()** method or one of the methods that are overridden on the control.)"},{"pos":[21370,21381],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"Remove this line of code, because it's no longer required.","pos":[21383,21441]},{"content":"However, first make a note of which controller is used with which control.","pos":[21442,21516]},{"content":"For example, in this case, ledgerDimensionDefaultAccoutnController is being used with the ClearningAccount SEC.","pos":[21517,21628]},{"content":"A mapping is required when you replace method calls on controller objects with corresponding method calls on the control, and when you set the properties at design time.","pos":[21629,21798]},{"pos":[21804,21811],"content":"Step 17","linkify":"Step 17","nodes":[{"content":"Step 17","pos":[0,7]}]},{"pos":[21818,21825],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[21827,21857],"content":"In the form <bpt id=\"p1\">**</bpt>init()<ept id=\"p1\">**</ept> method:","source":"In the form **init()** method:"},{"pos":[21973,21984],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"This is the <bpt id=\"p1\">**</bpt>Posting Type<ept id=\"p1\">**</ept> property on the control.","pos":[21986,22039],"source":"This is the **Posting Type** property on the control."},{"content":"The control that the <bpt id=\"p1\">**</bpt>PostingType<ept id=\"p1\">**</ept> property must be set on can be determined from the mapping details that are derived by looking at the <bpt id=\"p2\">**</bpt>parmControl()<ept id=\"p2\">**</ept> call.","pos":[22040,22202],"source":" The control that the **PostingType** property must be set on can be determined from the mapping details that are derived by looking at the **parmControl()** call."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>SegmentMigrate06<ept id=\"p1\">](./media/segmentmigrate06.png)](./media/segmentmigrate06.png)</ept> These properties can also be set in code, through corresponding <bpt id=\"p2\">**</bpt>parm<ept id=\"p2\">**</ept> methods on the control instance.","pos":[22203,22390],"source":"[![SegmentMigrate06](./media/segmentmigrate06.png)](./media/segmentmigrate06.png) These properties can also be set in code, through corresponding **parm** methods on the control instance."},{"content":"Here's an example.","pos":[22391,22409]},{"pos":[22488,22495],"content":"Step 18","linkify":"Step 18","nodes":[{"content":"Step 18","pos":[0,7]}]},{"pos":[22502,22509],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"content":"Override <bpt id=\"p1\">**</bpt>resolveReference()<ept id=\"p1\">**</ept> in the data source field for the ledger dimension.","pos":[22511,22593],"source":"Override **resolveReference()** in the data source field for the ledger dimension."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>SegmentMigrate07<ept id=\"p1\">](./media/segmentmigrate07.png)](./media/segmentmigrate07.png)</ept>","pos":[22594,22675],"source":"[![SegmentMigrate07](./media/segmentmigrate07.png)](./media/segmentmigrate07.png)"},{"pos":[22682,22693],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"Delete this code, because it's no longer required.","pos":[22695,22745]},{"content":"The control handles this automatically.","pos":[22746,22785]},{"pos":[22791,22798],"content":"Step 19","linkify":"Step 19","nodes":[{"content":"Step 19","pos":[0,7]}]},{"pos":[22805,22812],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[22814,22882],"content":"The form sets properties on the controller through <bpt id=\"p1\">**</bpt>parm<ept id=\"p1\">**</ept> methods.","source":"The form sets properties on the controller through **parm** methods."},{"pos":[22889,22900],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"In general, any property that was previously set on the controller class should now be set directly on the control.","pos":[22902,23017]},{"content":"The control that the property must be set on can be determined from the mapping details that are derived by looking at the <bpt id=\"p1\">**</bpt>parmControl()<ept id=\"p1\">**</ept> call.","pos":[23018,23164],"source":" The control that the property must be set on can be determined from the mapping details that are derived by looking at the **parmControl()** call."},{"content":"Additionally, for the <bpt id=\"p1\">**</bpt>Segmented Entry<ept id=\"p1\">**</ept> control, any property that is available in the <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> dialog box in Microsoft Visual Studio can also be set in code, through the corresponding <bpt id=\"p3\">**</bpt>parm<ept id=\"p3\">**</ept> method on the control instance.","pos":[23165,23398],"source":" Additionally, for the **Segmented Entry** control, any property that is available in the **Properties** dialog box in Microsoft Visual Studio can also be set in code, through the corresponding **parm** method on the control instance."},{"pos":[23404,23411],"content":"Step 20","linkify":"Step 20","nodes":[{"content":"Step 20","pos":[0,7]}]},{"pos":[23418,23425],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[23427,23488],"content":"The form uses the control's <bpt id=\"p1\">**</bpt>currentSegmentIndex()<ept id=\"p1\">**</ept> method.","source":"The form uses the control's **currentSegmentIndex()** method."},{"pos":[23583,23594],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"In general, any property that was previously set on the controller class should now be set directly on the control.","pos":[23596,23711]},{"content":"The control that the property must be set on can be determined from the mapping details that are derived by looking at the <bpt id=\"p1\">**</bpt>parmControl()<ept id=\"p1\">**</ept> call.","pos":[23712,23858],"source":" The control that the property must be set on can be determined from the mapping details that are derived by looking at the **parmControl()** call."},{"content":"Additionally, for the <bpt id=\"p1\">**</bpt>Segmented Entry<ept id=\"p1\">**</ept> control, any property that is available in the <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> dialog box in Visual Studio can also be set in code, through the corresponding <bpt id=\"p3\">**</bpt>parm<ept id=\"p3\">**</ept> method on the control instance.","pos":[23859,24082],"source":" Additionally, for the **Segmented Entry** control, any property that is available in the **Properties** dialog box in Visual Studio can also be set in code, through the corresponding **parm** method on the control instance."},{"pos":[24088,24095],"content":"Step 21","linkify":"Step 21","nodes":[{"content":"Step 21","pos":[0,7]}]},{"pos":[24102,24109],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"content":"The form calls methods on the controller object.","pos":[24111,24159]},{"content":"Here's an example.","pos":[24160,24178]},{"pos":[24273,24284],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"All method calls on the controller must be replaced with method calls on the control.","pos":[24286,24371]},{"content":"For this example, use the <bpt id=\"p1\">**</bpt>getDimensionAttributeByControlIndex()<ept id=\"p1\">**</ept> method on the control instead.","pos":[24372,24470],"source":" For this example, use the **getDimensionAttributeByControlIndex()** method on the control instead."},{"pos":[24543,24550],"content":"Step 22","linkify":"Step 22","nodes":[{"content":"Step 22","pos":[0,7]}]},{"pos":[24557,24564],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[24566,24663],"content":"For <bpt id=\"p1\">**</bpt>DimensionDynamicAccountController<ept id=\"p1\">**</ept>, the account type is specified through the constructor.","source":"For **DimensionDynamicAccountController**, the account type is specified through the constructor."},{"pos":[24834,24845],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"There are two methods for implementing this functionality.","pos":[24847,24905]},{"content":"These methods are mutually exclusive, so use only one of them, depending on the situation:","pos":[24906,24996]},{"content":"For the <bpt id=\"p1\">**</bpt>Segmented Entry<ept id=\"p1\">**</ept> control, in the <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> dialog box, set the <bpt id=\"p3\">**</bpt>Account Type Field<ept id=\"p3\">**</ept> property to the data source field that will provide the account type.","pos":[25002,25173],"source":"For the **Segmented Entry** control, in the **Properties** dialog box, set the **Account Type Field** property to the data source field that will provide the account type."},{"content":"This is the preferred method.","pos":[25174,25203]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> If the <bpt id=\"p2\">**</bpt>super()<ept id=\"p2\">**</ept> call has been removed from the <bpt id=\"p3\">**</bpt>modified()<ept id=\"p3\">**</ept> method for the field that is bound to the <bpt id=\"p4\">**</bpt>Account Type Field<ept id=\"p4\">**</ept> property, this method won't work.","pos":[25204,25377],"source":"**Note:** If the **super()** call has been removed from the **modified()** method for the field that is bound to the **Account Type Field** property, this method won't work."},{"content":"We have seen this issue in some journal forms, such as <bpt id=\"p1\">**</bpt>LedgerJournalTransDaily<ept id=\"p1\">**</ept>.","pos":[25378,25461],"source":" We have seen this issue in some journal forms, such as **LedgerJournalTransDaily**."},{"content":"In such cases, either add the <bpt id=\"p1\">**</bpt>super()<ept id=\"p1\">**</ept> call back to the <bpt id=\"p2\">**</bpt>modified()<ept id=\"p2\">**</ept> method, or use the second method.","pos":[25462,25569],"source":" In such cases, either add the **super()** call back to the **modified()** method, or use the second method."},{"content":"Set the account type manually by calling the <bpt id=\"p1\">**</bpt>parmAccountTypeEnumValue()<ept id=\"p1\">**</ept> method on the control.","pos":[25574,25672],"source":"Set the account type manually by calling the **parmAccountTypeEnumValue()** method on the control."},{"content":"Here's an example.","pos":[25673,25691]},{"pos":[25804,25993],"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> The call to <bpt id=\"p2\">**</bpt>parmAccountTypeEnumValue()<ept id=\"p2\">**</ept> must be put in both the data source's <bpt id=\"p3\">**</bpt>active()<ept id=\"p3\">**</ept> method and the <bpt id=\"p4\">**</bpt>modified()<ept id=\"p4\">**</ept> method of the field that will provide the account type.","source":"**Note:** The call to **parmAccountTypeEnumValue()** must be put in both the data source's **active()** method and the **modified()** method of the field that will provide the account type."},{"pos":[25999,26006],"content":"Step 23","linkify":"Step 23","nodes":[{"content":"Step 23","pos":[0,7]}]},{"pos":[26013,26020],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"content":"The form has a variable that is defined.","pos":[26022,26062]},{"pos":[26155,26166],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"Remove this, because the controller is no longer required.","pos":[26168,26226]},{"pos":[26232,26239],"content":"Step 24","linkify":"Step 24","nodes":[{"content":"Step 24","pos":[0,7]}]},{"pos":[26246,26253],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[26255,26415],"content":"<bpt id=\"p1\">**</bpt>parmCurrentLedgerCOA()<ept id=\"p1\">**</ept> method calls: (These are typically present in the form's <bpt id=\"p2\">**</bpt>init()<ept id=\"p2\">**</ept> method or one of the methods that are overridden on the control.)","source":"**parmCurrentLedgerCOA()** method calls: (These are typically present in the form's **init()** method or one of the methods that are overridden on the control.)"},{"pos":[26511,26522],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"Remove this line of code, because it's no longer required in most cases.","pos":[26524,26596]},{"content":"Before you delete this line, make sure that the data area ID is correctly passed in to the controller as a parameter, because the <bpt id=\"p1\">**</bpt>LedgerCOA<ept id=\"p1\">**</ept> value will be derived from that information.","pos":[26597,26785],"source":" Before you delete this line, make sure that the data area ID is correctly passed in to the controller as a parameter, because the **LedgerCOA** value will be derived from that information."},{"content":"If the data area ID is not passed in, replace <bpt id=\"p1\">**</bpt>parmCurrentLedgerCOA(â€¦)<ept id=\"p1\">**</ept> with <bpt id=\"p2\">**</bpt>parmDataAreaId(â€¦)<ept id=\"p2\">**</ept>, and pass the appropriate <bpt id=\"p3\">**</bpt>SelectableDataArea<ept id=\"p3\">**</ept> value, which is usually <bpt id=\"p4\">**</bpt>curext()<ept id=\"p4\">**</ept> or another table field that controls the scope of the company for the account control.","pos":[26786,27063],"source":" If the data area ID is not passed in, replace **parmCurrentLedgerCOA(â€¦)** with **parmDataAreaId(â€¦)**, and pass the appropriate **SelectableDataArea** value, which is usually **curext()** or another table field that controls the scope of the company for the account control."},{"content":"If the form has no data area context but only a current <bpt id=\"p1\">**</bpt>LedgerCOA<ept id=\"p1\">**</ept> value, it should be working only with the default account controller.","pos":[27064,27203],"source":" If the form has no data area context but only a current **LedgerCOA** value, it should be working only with the default account controller."},{"content":"There are only a few forms that are agnostic of a company, but that are scoped to a specific chart of accounts (COA) (for example, <bpt id=\"p1\">**</bpt>MainAccount<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Allocations<ept id=\"p2\">**</ept>).","pos":[27204,27372],"source":" There are only a few forms that are agnostic of a company, but that are scoped to a specific chart of accounts (COA) (for example, **MainAccount** and **Allocations**)."},{"content":"In these cases, <bpt id=\"p1\">**</bpt>parmCurrentLedgerCOA<ept id=\"p1\">**</ept> should be called on the <bpt id=\"p2\">**</bpt>Segmented Entry<ept id=\"p2\">**</ept> control instance that has a default account controller type set.","pos":[27373,27522],"source":" In these cases, **parmCurrentLedgerCOA** should be called on the **Segmented Entry** control instance that has a default account controller type set."},{"pos":[27528,27535],"content":"Step 25","linkify":"Step 25","nodes":[{"content":"Step 25","pos":[0,7]}]},{"pos":[27542,27549],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[27551,27604],"content":"<bpt id=\"p1\">**</bpt>parmIncludeFinancialAccounts(NoYes)<ept id=\"p1\">**</ept> method calls:","source":"**parmIncludeFinancialAccounts(NoYes)** method calls:"},{"pos":[27698,27709],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"This line of code is no longer required and should be set directly via a property on the <bpt id=\"p1\">**</bpt>Segmented Entry<ept id=\"p1\">**</ept> control.","pos":[27711,27828],"source":"This line of code is no longer required and should be set directly via a property on the **Segmented Entry** control."},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Because of a framework bug, if you don't setting this explicitly, <bpt id=\"p2\">**</bpt>No<ept id=\"p2\">**</ept> will be assigned on a ledger dimension default account controller, whereas the previous behavior was to implicitly assign <bpt id=\"p3\">**</bpt>Yes<ept id=\"p3\">**</ept> during construction.","pos":[27829,28062],"source":"**Note:** Because of a framework bug, if you don't setting this explicitly, **No** will be assigned on a ledger dimension default account controller, whereas the previous behavior was to implicitly assign **Yes** during construction."},{"content":"You must set this manually as a property.","pos":[28063,28104]},{"content":"Alternatively, for a <bpt id=\"p1\">**</bpt>dialog<ept id=\"p1\">**</ept> class, the <bpt id=\"p2\">**</bpt>parm<ept id=\"p2\">**</ept> method should still be explicitly called.","pos":[28105,28198],"source":" Alternatively, for a **dialog** class, the **parm** method should still be explicitly called."},{"pos":[28204,28211],"content":"Step 26","linkify":"Step 26","nodes":[{"content":"Step 26","pos":[0,7]}]},{"pos":[28218,28225],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[28227,28424],"content":"The code for the <bpt id=\"p1\">**</bpt>modified<ept id=\"p1\">**</ept> method of the data field that provides the account type for the <bpt id=\"p2\">**</bpt>Segmented Entry<ept id=\"p2\">**</ept> control might look like this when the control is used as a dynamic account control.","source":"The code for the **modified** method of the data field that provides the account type for the **Segmented Entry** control might look like this when the control is used as a dynamic account control."},{"pos":[28776,28787],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">**</bpt>modified<ept id=\"p1\">**</ept> method of this data field must now clear the ledger dimension field that is bound to the <bpt id=\"p2\">**</bpt>Segmented Entry<ept id=\"p2\">**</ept> control as a <bpt id=\"p3\">**</bpt>Reference<ept id=\"p3\">**</ept> field.","pos":[28789,28948],"source":"The **modified** method of this data field must now clear the ledger dimension field that is bound to the **Segmented Entry** control as a **Reference** field."},{"content":"For example, if the name of the <bpt id=\"p1\">**</bpt>Segmented Entry<ept id=\"p1\">**</ept> control is <bpt id=\"p2\">**</bpt>OffsetAccount<ept id=\"p2\">**</ept>, and the <bpt id=\"p3\">**</bpt>Reference<ept id=\"p3\">**</ept> field property for this control is set to <bpt id=\"p4\">**</bpt>LedgerDimension<ept id=\"p4\">**</ept>, the <bpt id=\"p5\">**</bpt>modified<ept id=\"p5\">**</ept> method in the preceding code should be changed as follows.","pos":[28949,29191],"source":" For example, if the name of the **Segmented Entry** control is **OffsetAccount**, and the **Reference** field property for this control is set to **LedgerDimension**, the **modified** method in the preceding code should be changed as follows."},{"content":"The additional line is required to clear the control when the account type is changed.","pos":[29585,29671]},{"pos":[29677,29684],"content":"Step 27","linkify":"Step 27","nodes":[{"content":"Step 27","pos":[0,7]}]},{"pos":[29691,29698],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[29700,29769],"content":"You can call the <bpt id=\"p1\">**</bpt>parmAccountStructure()<ept id=\"p1\">**</ept> method on the controller.","source":"You can call the **parmAccountStructure()** method on the controller."},{"pos":[29874,29885],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"This method is replaced by two different methods.","pos":[29887,29936]},{"content":"Additionally, the purpose of the new methods is the opposite of the old method: the old method turned validation off, whereas the new methods turn it on.","pos":[29937,30090]},{"content":"Therefore, when you migrate code, you must reverse the Boolean parameter for the new methods.","pos":[30091,30184]},{"content":"For example, for the method call in the preceding code, the new methods would look like this.","pos":[30185,30278]},{"pos":[30454,30461],"content":"Step 28","linkify":"Step 28","nodes":[{"content":"Step 28","pos":[0,7]}]},{"pos":[30468,30475],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[30477,30546],"content":"You can call the <bpt id=\"p1\">**</bpt>parmAccountStructure()<ept id=\"p1\">**</ept> method on the controller:","source":"You can call the **parmAccountStructure()** method on the controller:"},{"pos":[30651,30662],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"The <bpt id=\"p1\">**</bpt>parmAccountStructureId()<ept id=\"p1\">**</ept> method doesn't exist on the control.","pos":[30664,30733],"source":"The **parmAccountStructureId()** method doesn't exist on the control."},{"content":"Instead, separate <bpt id=\"p1\">**</bpt>getAccountStructure()<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>setAccountStructure()<ept id=\"p2\">**</ept> methods exist.","pos":[30734,30822],"source":" Instead, separate **getAccountStructure()** and **setAccountStructure()** methods exist."},{"content":"Therefore, the <bpt id=\"p1\">**</bpt>parmAccountStructureId()<ept id=\"p1\">**</ept> call must be replaced by the <bpt id=\"p2\">**</bpt>get<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>set<ept id=\"p3\">**</ept> method, depending on how the <bpt id=\"p4\">**</bpt>parm<ept id=\"p4\">**</ept> method was used.","pos":[30823,30969],"source":" Therefore, the **parmAccountStructureId()** call must be replaced by the **get** or **set** method, depending on how the **parm** method was used."},{"content":"For example, the <bpt id=\"p1\">**</bpt>parm<ept id=\"p1\">**</ept> method in the preceding code was called as a setter, so the call should be replaced by a call to the <bpt id=\"p2\">**</bpt>set<ept id=\"p2\">**</ept> method.","pos":[30970,31112],"source":" For example, the **parm** method in the preceding code was called as a setter, so the call should be replaced by a call to the **set** method."},{"pos":[31219,31226],"content":"Step 29","linkify":"Step 29","nodes":[{"content":"Step 29","pos":[0,7]}]},{"pos":[31233,31240],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[31294,31305],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"This method is replaced by two different methods.","pos":[31307,31356]},{"content":"Additionally, the purpose of the new methods is opposite of the old method: the old method turned validation off, whereas the new methods turn it on.","pos":[31357,31506]},{"content":"Therefore, when you migrate code, you must reverse the Boolean parameter for the new methods.","pos":[31507,31600]},{"content":"For example, for the method call in the preceding code, the new methods would look like this.","pos":[31601,31694]},{"pos":[31870,31877],"content":"Step 30","linkify":"Step 30","nodes":[{"content":"Step 30","pos":[0,7]}]},{"pos":[31884,31891],"content":"AX 2012","linkify":"AX 2012","nodes":[{"content":"AX 2012","pos":[0,7]}]},{"pos":[31893,31986],"content":"Typically, call the <bpt id=\"p1\">**</bpt>loadFromId<ept id=\"p1\">**</ept> method on the controller in the <bpt id=\"p2\">**</bpt>loadSegments()<ept id=\"p2\">**</ept> method.","source":"Typically, call the **loadFromId** method on the controller in the **loadSegments()** method."},{"pos":[32117,32128],"content":"Dynamics AX","linkify":"Dynamics AX","nodes":[{"content":"Dynamics AX","pos":[0,11]}]},{"content":"This method has been deprecated and must not be used.","pos":[32130,32183]},{"content":"You should delete all calls to this method.","pos":[32184,32227]},{"pos":[32233,32280],"content":"Migrating a Segmented Entry control on a dialog","linkify":"Migrating a Segmented Entry control on a dialog","nodes":[{"content":"Migrating a Segmented Entry control on a dialog","pos":[0,47]}]},{"content":"The uptake pattern for the new <bpt id=\"p1\">**</bpt>Segmented Entry<ept id=\"p1\">**</ept> control on a dialog has changed in Dynamics AX.","pos":[32282,32380],"source":"The uptake pattern for the new **Segmented Entry** control on a dialog has changed in Dynamics AX."},{"content":"Instead of interacting with the controller class API, you must now interact with the <bpt id=\"p1\">**</bpt>SegmentedEntryControlBuild<ept id=\"p1\">**</ept> class to link the SEC with the dialog.","pos":[32381,32535],"source":" Instead of interacting with the controller class API, you must now interact with the **SegmentedEntryControlBuild** class to link the SEC with the dialog."},{"content":"This section shows the code patterns for using SEC on a dialog with different controller types.","pos":[32536,32631]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Help text is no longer required in Dynamics AX, so you don't have to set the Help text on dialog fields.","pos":[32632,32746],"source":"**Note:** Help text is no longer required in Dynamics AX, so you don't have to set the Help text on dialog fields."},{"pos":[32752,32772],"content":"<bpt id=\"p1\">**</bpt>Dynamic account:<ept id=\"p1\">**</ept>","source":"**Dynamic account:**"},{"pos":[32781,32792],"content":"<bpt id=\"p1\">**</bpt>Before:<ept id=\"p1\">**</ept>","source":"**Before:**"},{"pos":[34139,34149],"content":"<bpt id=\"p1\">**</bpt>After:<ept id=\"p1\">**</ept>","source":"**After:**"},{"pos":[36540,36559],"content":"<bpt id=\"p1\">**</bpt>Ledger account:<ept id=\"p1\">**</ept>","source":"**Ledger account:**"},{"pos":[36568,36579],"content":"<bpt id=\"p1\">**</bpt>Before:<ept id=\"p1\">**</ept>","source":"**Before:**"},{"pos":[36864,36874],"content":"<bpt id=\"p1\">**</bpt>After:<ept id=\"p1\">**</ept>","source":"**After:**"},{"pos":[37092,37112],"content":"<bpt id=\"p1\">**</bpt>Default account:<ept id=\"p1\">**</ept>","source":"**Default account:**"},{"pos":[37121,37132],"content":"<bpt id=\"p1\">**</bpt>Before:<ept id=\"p1\">**</ept>","source":"**Before:**"},{"pos":[37465,37475],"content":"<bpt id=\"p1\">**</bpt>After:<ept id=\"p1\">**</ept>","source":"**After:**"},{"pos":[37716,37727],"content":"<bpt id=\"p1\">**</bpt>Budget:<ept id=\"p1\">**</ept>","source":"**Budget:**"},{"pos":[37736,37893],"content":"<bpt id=\"p1\">**</bpt>Before:<ept id=\"p1\">**</ept> No uptake of the <bpt id=\"p2\">**</bpt>Budget<ept id=\"p2\">**</ept> controller (<bpt id=\"p3\">**</bpt>BudgetLedgerDimensionController<ept id=\"p3\">**</ept>) for a dialog scenario was found in the existing program source code.","source":"**Before:** No uptake of the **Budget** controller (**BudgetLedgerDimensionController**) for a dialog scenario was found in the existing program source code."},{"pos":[37902,37912],"content":"<bpt id=\"p1\">**</bpt>After:<ept id=\"p1\">**</ept>","source":"**After:**"},{"pos":[38120,38130],"content":"<bpt id=\"p1\">**</bpt>Notes:<ept id=\"p1\">**</ept>","source":"**Notes:**"},{"pos":[38139,38250],"content":"The new API lets you specify the label (<bpt id=\"p1\">**</bpt>Budget<ept id=\"p1\">**</ept> in the preceding example) while you set up the dialog field.","source":"The new API lets you specify the label (**Budget** in the preceding example) while you set up the dialog field."},{"pos":[38259,38349],"content":"The default value for the control is specified via the <bpt id=\"p1\">**</bpt>ledgerDimensionBudget<ept id=\"p1\">**</ept> variable.","source":"The default value for the control is specified via the **ledgerDimensionBudget** variable."},{"content":"You must specify the account structure that should be used with the <bpt id=\"p1\">**</bpt>Budget<ept id=\"p1\">**</ept> controller.","pos":[38358,38448],"source":"You must specify the account structure that should be used with the **Budget** controller."},{"content":"The <bpt id=\"p1\">**</bpt>Dialog<ept id=\"p1\">**</ept> class must implement a way for the user to select the account structure (outside of the SEC) and set the selected account structure on the SEC.","pos":[38449,38607],"source":" The **Dialog** class must implement a way for the user to select the account structure (outside of the SEC) and set the selected account structure on the SEC."},{"pos":[38612,38632],"content":"<bpt id=\"p1\">**</bpt>Budget planning:<ept id=\"p1\">**</ept>","source":"**Budget planning:**"},{"pos":[38641,38815],"content":"<bpt id=\"p1\">**</bpt>Before:<ept id=\"p1\">**</ept> No uptake of the <bpt id=\"p2\">**</bpt>Budget planning<ept id=\"p2\">**</ept> controller (<bpt id=\"p3\">**</bpt>BudgetPlanningLedgerDimensionController<ept id=\"p3\">**</ept>) for a dialog scenario was found in the existing program source code.","source":"**Before:** No uptake of the **Budget planning** controller (**BudgetPlanningLedgerDimensionController**) for a dialog scenario was found in the existing program source code."},{"pos":[38824,38834],"content":"<bpt id=\"p1\">**</bpt>After:<ept id=\"p1\">**</ept>","source":"**After:**"},{"pos":[39083,39093],"content":"<bpt id=\"p1\">**</bpt>Notes:<ept id=\"p1\">**</ept>","source":"**Notes:**"},{"pos":[39102,39222],"content":"The new API lets you specify the label (<bpt id=\"p1\">**</bpt>Budget planning<ept id=\"p1\">**</ept> in the preceding example) while you set up the dialog field.","source":"The new API lets you specify the label (**Budget planning** in the preceding example) while you set up the dialog field."},{"pos":[39231,39329],"content":"The default value for the control is specified via the <bpt id=\"p1\">**</bpt>ledgerDimensionBudgetPlanning<ept id=\"p1\">**</ept> variable.","source":"The default value for the control is specified via the **ledgerDimensionBudgetPlanning** variable."},{"content":"You must specify the account structure that should be used with the <bpt id=\"p1\">**</bpt>Budget planning<ept id=\"p1\">**</ept> controller.","pos":[39338,39437],"source":"You must specify the account structure that should be used with the **Budget planning** controller."},{"content":"The <bpt id=\"p1\">**</bpt>Dialog<ept id=\"p1\">**</ept> class must implement a way for the user to select the account structure (outside of the SEC) and set the selected account structure on the SEC.","pos":[39438,39596],"source":" The **Dialog** class must implement a way for the user to select the account structure (outside of the SEC) and set the selected account structure on the SEC."},{"pos":[39599,39607],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[39618,39701],"content":"<bpt id=\"p1\">[</bpt>Segmented Entry control dialog support<ept id=\"p1\">](segmented-entry-control-dialog-support.md)</ept>","source":"[Segmented Entry control dialog support](segmented-entry-control-dialog-support.md)"},{"pos":[39703,39802],"content":"<bpt id=\"p1\">[</bpt>Segmented Entry control Metadata Specification<ept id=\"p1\">](segmented-entry-control-metadata-specification.md)</ept>","source":"[Segmented Entry control Metadata Specification](segmented-entry-control-metadata-specification.md)"},{"pos":[39804,39909],"content":"<bpt id=\"p1\">[</bpt>Segmented Entry control Parm method Specification<ept id=\"p1\">](segmented-entry-control-parm-method-specification.md)</ept>","source":"[Segmented Entry control Parm method Specification](segmented-entry-control-parm-method-specification.md)"},{"pos":[39911,39985],"content":"<bpt id=\"p1\">[</bpt>Segmented Entry control migration<ept id=\"p1\">](segmented-entry-control-conversion.md)</ept>","source":"[Segmented Entry control migration](segmented-entry-control-conversion.md)"}],"content":"---\n# required metadata\n\ntitle: Segmented entry control migration guidance\ndescription: This article guides you through the process of migrating a Segmented Entry control from the Microsoft Dynamics AX 2012 pattern to the new pattern in Microsoft Dynamics AX.\nauthor: twheeloc\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: annbe\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 25651\nms.assetid: eea675a0-d9d8-453d-9f5a-70c833a7a0d6\nms.search.region: Global\n# ms.search.industry: \nms.author: ghenriks\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# Segmented entry control migration guidance\n\nThis article guides you through the process of migrating a Segmented Entry control from the Microsoft Dynamics AX 2012 pattern to the new pattern in Microsoft Dynamics AX.\n\nThe goal of the new design is to encapsulate the control implementation and not require that forms interact with the classes that back the control. Therefore, in Microsoft Dynamics AX, *all forms should interact only with the application programming interface (API) of the **Segmented Entry** control instance*. They should not interact directly with the controller classes (such as **LedgerDimensionAccountController** and **DimensionDynamicAccountController**). Any property that was previously manipulated or called on the controller must now be called on the control. **Notes:**\n\n-   Some APIs have naming differences between the controller and the control. The following table lists these APIs.\n    **Controller Method (old)**\n    **Control Method (new)**\n    parmDate\n    parmControlDate\n    parmFilterLedgerPostingType\n    parmPostingType\n    parmDimensionAccountStorageUsage\n    parmDimensionAccountStorageUsageType\n-   **Example**\n    -   **Before:** controller.parmDate(systemDateGet())\n    -   **After:** LedgerAccount.parmControlDate(systemDateGet());\n\n    In this example, **controller** &gt; **LedgerDimensionAccountController** instance and **LedgerAccount** &gt; new **Segmented Entry** control instance\n-   In methods that have been overridden on controls and data fields, the code upgrade rule replaces method calls on the controllers with method calls on each control instance that was using a particular controller. **Example**\n    -   **Before:**\n\n            Public void jumpRef()\n            {\n                ledgerDimensionDefaultAccountcontroller.jumpRef();\n            }\n\n    -   **After:**\n\n            Public void jumpRef()\n            {\n                segmentedEntryControl1.jumpRef();\n                segmentedEntryControl2.jumpRef();\n            }\n\n    These changes are made so that it's easier to copy and paste code that must be moved elsewhere (for example, in some instances of **loadSegments()** and other such methods). You can ignore this change when you decide whether the method can be deleted. Your decision should depend on whether the method has any custom logic.\n-   The code upgrade script does not handle cases where a controller is instantiated within a method. These cases must be migrated manually.\n-   The MRU functionality from Microsoft Dynamics AX 2012 has been removed in Dynamics AX and won't be replaced.\n-   **parmTaxCode** has been removed. There is no replacement.\n\n## Properties\nThe custom properties for the **Segmented Entry** control are found under **Controller**. The following screen shot shows an example. [![111](./media/111.png)](./media/111.png) Not all properties apply to all **Controller** class types. Properties that don't apply to a selected controller class will be disabled. The following table provides details about the properties.\n\n**Property**\n\n**Valid Values**\n\n**Usage**\n\nAccount Type Field\n\nA field from the datasource.\n\nDetermines the type of account used. Typically utilized for journal entry from a multi-segment ledger account to single segment values from other backing tables such as Cust, Vend, Bank, Project and similar.\n\nController Class\n\nOne of 6 Controller classes. For example LedgerDimensionDefaultAccountController.\n\nDetermines the pattern and behavior of the Segmented Entry control. More information about this property is provided below.\n\nInclude Financial Accounts\n\nNoYes\n\nDetermines if Main accounts that are Financial accounts are valid for use.\n\nInclude Total Accounts\n\nNoYes\n\nDetermines if Main accounts of type Total are valid for use.\n\nIs Default Account\n\nTrueFalse\n\nFor a Dynamic account, determines if the account should be a default or full account.\n\nLock Main Account Segment\n\nNoYes\n\nControls whether the Main account segment is locked. Typically used in journals and distributions based upon configuration.\n\nPosting Type\n\nA value from the LedgerPostingType enumeration.\n\nThe Main account is validated to see if the posting type is allowed to be used with that account.\n\nValidate Blocked For Manual Entry\n\nNoYes\n\nDetermines if the 'Blocked for Manual Entry' status on the dimension should be respected or not.\n\n## Controller class property\nThe following table provides details about each controller.\n\n**Controller**\n\n**Details**\n\nBudgetLedgerDimension\n\nThis Controller provides budget based support for data entry in the Segmented Entry control. When using this controller, an Account Structure must be provided to the Segmented Entry control.\n\nBudgetPlanningLedgerDimension\n\nThis Controller provides budget planning based support for data entry in the Segmented Entry control. When using this controller, an Account Structure must be provided to the Segmented Entry control.\n\nDimensionDynamicAccount\n\nThis Controller provides support for multiple account types in the Segmented Entry control.\n\nLedgerDimensionAccountAlias\n\nThis Controller provides support for account aliases in the Segmented Entry control\n\nLedgerDimensionAccount\n\nThis Controller provides support for multi-segment data entry in the Segmented Entry control.\n\nLedgerDimensionDefaultAccount\n\nThis Controller provides support for default accounts in the Segmented Entry control.\n\n## Migration steps\n### Step 1\n\n#### AX 2012\n\nIf **SegmentedEntry** appears as the type next to any control, change it to **SegmentedEntryControl**. [![SegmentMigrate01](./media/segmentmigrate01.png)](./media/segmentmigrate01.png)\n\n#### Dynamics AX\n\nAn easy method is to append \"\\_old\" to the name of the old control, add the new control (which should have the original name of the control), migrate all the settings over, and then delete the old control. **Note:** To prevent tests and other code that references the control from breaking, make sure that the new control has the same name as the old control. To add the new control, right-click the parent control that will contain the **Segmented Entry** control, and then select **New** &gt; **SegmentedEntryControl**. [![SegmentMigrate02](./media/segmentmigrate02-623x1024.png)](./media/segmentmigrate02.png) The following screen shot shows how new control will look. [![SegmentMigrate03](./media/segmentmigrate03.png)](./media/segmentmigrate03.png)\n\n### Step 2\n\n#### AX 2012\n\nOverride the  **jumpRef()** control/field method.\n\n    public void jumpRef()\n    {\n        ledgerDimensionDefaultAccountController.jumpRef();\n    }\n\n#### Dynamics AX\n\nRemove the **jumpRef()** method completely if it contains no other functionality. If there is other custom **jumpRef** functionality, leave that. However, **jumpRef** is otherwise automatically handled by the control.\n\n### Step 3\n\n#### AX 2012\n\nOverride the **loadAutoCompleteData()** control method.\n\n    public void loadAutoCompleteData(LoadAutoCompleteDataEventArgs _e)\n    {\n        ledgerDimensionDefaultAccountController.loadAutoCompleteData(_e);\n        super(_e);\n    }\n\n#### Dynamics AX\n\nRemove the **loadAutoCompleteData()** method.\n\n### Step 4\n\n#### AX 2012\n\nOverride the **loadSegments()** control method.\n\n    public void loadSegments()\n    {\n        super();\n        ledgerDimensionDefaultAccountController.loadSegments();\n        ledgerDimensionDefaultAccountController.parmControl(this);\n    }\n\n#### Dynamics AX\n\nIf the **loadSegments()** method does nothing except call the controller's **loadSegments()** and **parmControl()** methods, remove it. However, make a note of the SEC control instance that is passed to the **parmControl()** call. The methods that were being called will now have to be called on that instance.\n\n### Step 5\n\n#### AX 2012\n\nOverride the **loadSegments()** control method.\n\n    public void loadSegments()\n    {\n        super();\n        dimAccountController.parmControl(this);\n        dimAccountController.parmJournalName(ledgerJournalTable.JournalName);\n        dimAccountController.parmCurrency(ledgerJournalTrans.CurrencyCode);\n        dimAccountController.parmDataAreaId(ledgerJournalTrans.Company ? ledgerJournalTrans.Company : curext());\n        dimAccountController.parmDate(ledgerJournalTrans.TransDate);\n        dimAccountController.parmTaxCode(ledgerJournalTrans.TaxCode);\n\n        dimAccountController.loadSegments();\n    }\n\n#### Dynamics AX\n\nIf the **loadSegments()** method was used to set parameters on the controller, the calls to **parm** method must be moved to every location where the source of the **parm** method can change. In most cases, these locations are the **modified()** method on the corresponding data field and/or the **active()** method on the data source. For example, some of the migrated code for the **loadSegments()** override on the left would look like this.\n\n    dimAccountController.parmControl(this) -> No longer needed.\n\nMake a note of the SEC control instance that is passed on to the **parmControl()** call. The methods that were being called on the controller will now have to be called on that instance.\n\n    dimAccountController.parmJournalName(ledgerJournalTable.JournalName) ->\n    LedgerJournalTable data source,\n    JournalName field,\n    public void modified()\n    {\n        .parmJournalName(ledgerJournalTable.JournalName);\n    }\n\n**LedgerJournalTable data source**\n\n    public void active()\n    {\n        .parmJournalName(ledgerJournalTable.JournalName);\n    }\n\n**Note:** After you've moved all the code out of the **loadSegments()** method, you can delete the method.\n\n### Step 6\n\n#### AX 2012\n\nOverride the **loadSegments()** control method. In some cases, the **loadSegments()** method might use a table buffer to set parameters on the controller, but that table buffer isn't a data source on the form. For example, on the **LedgerJournalTransDaily** form, the original implementation of **loadSegments()** looked like this.\n\n    public void loadSegments()\n    {\n        super();\n\n        dimAccountController.parmControl(this);\n        dimAccountController.parmJournalName(ledgerJournalTable.JournalName);\n        dimAccountController.parmCurrency(ledgerJournalTrans.CurrencyCode);\n        dimAccountController.parmDataAreaId(ledgerJournalTrans.Company ? ledgerJournalTrans.Company : curext());\n        dimAccountController.parmDate(ledgerJournalTrans.TransDate);\n        dimAccountController.parmTaxCode(ledgerJournalTrans.TaxCode);\n\n        dimAccountController.loadSegments();\n\n        currentMainAccountId = dimAccountController.getValue(DimensionAttribute::getMainAccountDimensionAttribute());\n    }\n\nNote that the **JournalName** property is set from the ledgerJournalTable buffer, but the LedgerJournalTable table isn't a data source on the form.\n\n#### Dynamics AX\n\nIn such cases, you can't move that code to either the **active()** method of a data source or the **modified()** method on the data field. Instead, you should identify where the table buffer is being set. For example, in the original implementation of the **LedgerJournalTransDaily** form, the ledgerJournalTable buffer was set in the **initLedger()** method on the form. It should be evident that the value that is passed to **parmJournalName()** can change only when the buffer is reassigned in the **initLedger()** method. Therefore, code would have to be moved to the **initLedger()** method after the assignment of the buffer. Also, in accordance with the general guidelines, the **parmJournalName()** method would be called on the control instance.\n\n    void initLedger()\n    {\n        TransDate   dateFrom   = dateNull();\n        TransDate   dateTo     = systemDateGet();\n\n        if (element.args().dataset() == tableNum(LedgerJournalTable))\n        {\n            ledgerJournalTable = element.args().record();\n            LedgerJournalTrans_AccountNum.parmJournalName(ledgerJournalTable.JournalName);\n            LedgerJournalTrans_AccountNum1.parmJournalName(ledgerJournalTable.JournalName);\n            GridOffsetAccount.parmJournalName(ledgerJournalTable.JournalName);\n            LedgerJournalTrans_OffsetAccount1.parmJournalName(ledgerJournalTable.JournalName);\n            ...\n        }\n        ...\n    }\n\n### Step 7\n\n#### AX 2012\n\nOverride the **segmentValueChanged()** control method.\n\n    public void segmentValueChanged(SegmentValueChangedEventArgs _e)\n    {\n        super(_e);\n        ledgerDimensionDefaultAccountController.segmentValueChanged(_e);\n    }\n\n#### Dynamics AX\n\nIf the implementation of **segmentValueChanged()** does nothing except call **super()** and the **segmentValueChanged()** method on the controller, you can remove the method.\n\n### Step 8\n\n#### AX 2012\n\nOverride the **segmentValueChanged()** control method.\n\n    public void segmentValueChanged(SegmentValueChangedEventArgs _e)\n    {\n        super(_e);\n\n        dimOffsetAccountController.segmentValueChanged(_e);\n        currentOffsetMainAccountId = ledgerJournalEngine.onOffsetAccountSegmentChanged(dimOffsetAccountController, currentOffsetMainAccountId, ledgerJournalTrans);\n    }\n\n#### Dynamics AX\n\nIf the implementation of **segmentValueChanged()** has additional logic, you must replace the method with the **onSegmentChanged()** method, as shown here.\n\n    public void onSegmentChanged(DimensionControlSegment _segment)\n    {\n        currentOffsetMainAccountId = ledgerJournalEngine.onOffsetAccountSegmentChanged(this, currentOffsetMainAccountId, ledgerJournalTrans);\n    }\n\n**Notes:**\n\n-   To add the **onSegmentChanged()** method, follow these steps:\n    1.  Expand the **Segmented Entry** control to add the method to.\n    2.  Right-click the **Methods** node, and then select **Override** &gt; **onSegmentChanged**.\n-   The new method doesn't have to call **super()** or any other method on either the control or the controller.\n\n### Step 9\n\n#### AX 2012\n\nOverride the **validate()** control method.\n\n    public boolean validate()\n    {\n        boolean isValid;\n        isValid = super();\n        isValid = ledgerDimensionDefaultAccountController.validate() && isValid;\n\n        return isValid;\n    }\n\n#### Dynamics AX\n\nRemove the **validate()** method, unless you have additional validation. The **super()** call does everything that this code used to do. Therefore, keep only any new code that you have.\n\n### Step 10\n\n#### AX 2012\n\nOverride the **lookup()** control method.\n\n    public void lookup()\n    {\n        switch (emplParameters_RU.BankCloseACType)\n        {\n        case LedgerJournalACType::Bank:\n            BankAccountTable::lookupBankAccount(this);\n            break;\n        case LedgerJournalACType::Cust:\n            CustTable::lookupCustomer(this);\n            break;\n        case LedgerJournalACType::FixedAssets:\n            AssetTable::lookupAccountNum(this);\n            break;\n        case LedgerJournalACType::Ledger:\n            super();\n            break;\n        case LedgerJournalACType::Project:\n            ProjTable::lookupProjId(this, emplParameters_RU);\n            break;\n        case LedgerJournalACType::Vend:\n            VendTable::lookupVendor(this);\n            break;\n        default:\n            super();\n            break;\n        }\n    }\n\n#### Dynamics AX\n\nLeave the **lookup()** method as it is.\n\n### Step 11\n\n#### AX 2012\n\nOverride the **lookupReference()** control method.\n\n    public Common lookupReference()\n    {\n        Common ret;\n        ret = super();\n        return ret;\n    }\n\n#### Dynamics AX\n\nIf the **lookupReference()** method uses the default implementation, you can delete it.\n\n### Step 12\n\n#### AX 2012\n\nOverride the **modified()** control method.\n\n    public boolean modified()\n    {\n        boolean ret;\n\n        ret = super();\n\n        if (tmpCurrencyLedgerGainLossAccount.LedgerDimension)\n        {\n            tmpCurrencyLedgerGainLossAccount.AccountName =\n            MainAccount::getLocalizedNameByMainAccountId(\n            DimensionStorage::getMainAccountNumFromLedgerDimension(\n            tmpCurrencyLedgerGainLossAccount.LedgerDimension), ledger.ChartOfAccounts);\n        }\n        else\n        {\n            tmpCurrencyLedgerGainLossAccount.AccountName = '';\n        }\n\n        return ret;\n    }\n\n#### Dynamics AX\n\nLeave the **modified()** method as it is.\n\n### Step 13\n\n#### AX 2012\n\nOverride the **gotFocus()** control method.\n\n    void gotFocus()\n    {\n        super();\n        if (ledgerJournalTable.FixedOffsetAccount)\n        {\n            ledgerJournalTrans_OffsetAccount.allowEdit(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger);\n        }\n        else if (!ledgerJournalTrans_OffsetAccount.allowEdit())\n        {\n            ledgerJournalTrans_OffsetAccount.allowEdit(true);\n        }\n    }\n\n#### Dynamics AX\n\nThe approach is similar to the approach for the **loadSegments()** method. The code must be moved to every location where the source of the **parm** method can change. In most cases, these locations are the **modified()** method on the corresponding data field and/or the **active()** method on the data source. For example, for the preceding code, the migrated code would look like this.\n\n    LedgerJournalTable data source,\n    FixedOffsetAccount field\n    public void modified()\n    {\n        if (ledgerJournalTable.FixedOffsetAccount)\n        {\n            ledgerJournalTrans_OffsetAccount.allowEdit(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger);\n        }\n        else if (!ledgerJournalTrans_OffsetAccount.allowEdit())\n        {\n            ledgerJournalTrans_OffsetAccount.allowEdit(true);\n        }\n    }\n\n    LedgerJournalTrans data source,\n    OffsetAccountType field\n    public void modified()\n    {\n        if (ledgerJournalTable.FixedOffsetAccount)\n        {\n            ledgerJournalTrans_OffsetAccount.allowEdit(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger);\n        }\n            else if (!ledgerJournalTrans_OffsetAccount.allowEdit())\n        {\n            ledgerJournalTrans_OffsetAccount.allowEdit(true);\n        }\n    }\n\n    LedgerJournalTrans data source:\n    public void active()\n    {\n        if (ledgerJournalTable.FixedOffsetAccount)\n        {\n            ledgerJournalTrans_OffsetAccount.allowEdit(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger);\n        }\n        else if (!ledgerJournalTrans_OffsetAccount.allowEdit())\n        {\n            ledgerJournalTrans_OffsetAccount.allowEdit(true);\n        }\n    }\n\n    LedgerJournalTable data source:\n    public void active()\n    {\n        if (ledgerJournalTable.FixedOffsetAccount)\n        {\n            ledgerJournalTrans_OffsetAccount.allowEdit(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger);\n        }\n        else if (!ledgerJournalTrans_OffsetAccount.allowEdit())\n        {\n            ledgerJournalTrans_OffsetAccount.allowEdit(true);\n        }\n    }\n\n**Note:** After all the code has been moved out of the **gotFocus()** method, you can delete the method.\n\n### Step 14\n\n#### AX 2012\n\nIn the form **init()** method:\n\n    ledgerDimensionDefaultAccountController = LedgerDimensionDefaultAccountController::construct(vendParameters_ds, fieldStr(VendParameters, ClearingLedgerDimension));\n\n#### Dynamics AX\n\nSet the following properties on the control:\n\n-   **Data Source**\n-   **Reference Field**\n-   **Controller Class**\n\n[![SegmentMigrate04](./media/segmentmigrate04.png)](./media/segmentmigrate04.png) [![SegmentMigrate05](./media/segmentmigrate05.png)](./media/segmentmigrate05.png) **Note:** A controller class is required for the control to work. Therefore, a run-time error will be thrown if the **Controller Class** property isn't set.\n\n### Step 15\n\n#### AX 2012\n\n    ledgerDimensionAccountController.setValues(ledgerJournalTrans.DefaultDimension, false);\n\n#### Dynamics AX\n\nA map of the dimension specifiers must be created that can then be sent into the **Segmented Entry** control's **setDimensionSpecifiers** method.\n\n    Map defaultDimensionSpecifiers = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(ledgerJournalTable.DefaultDimension);\n\n    TmpLedgerJournalSplitLines_LedgerAccount.setDimensionSpecifiers(defaultDimensionSpecifiers, false);\n\n**Note:** You can add anything to the dimension specifiers map before it's sent to the control. You can also create a new map here. (See the **onSegmentChangedForPrimaryAccount** method in the **LedgerJournalEngine** class for similar logic.)\n\n### Step 16\n\n#### AX 2012\n\n**parmControl()** method calls: (These are typically present in the form's **init()** method or one of the methods that are overridden on the control.)\n\n    ledgerDimensionDefaultAccountController.parmControl(clearingAccount);\n\n#### Dynamics AX\n\nRemove this line of code, because it's no longer required. However, first make a note of which controller is used with which control. For example, in this case, ledgerDimensionDefaultAccoutnController is being used with the ClearningAccount SEC. A mapping is required when you replace method calls on controller objects with corresponding method calls on the control, and when you set the properties at design time.\n\n### Step 17\n\n#### AX 2012\n\nIn the form **init()** method:\n\n    ledgerDimensionDefaultAccountController.parmFilterLedgerPostingType(LedgerPostingType::VendSettlement);\n\n#### Dynamics AX\n\nThis is the **Posting Type** property on the control. The control that the **PostingType** property must be set on can be determined from the mapping details that are derived by looking at the **parmControl()** call. [![SegmentMigrate06](./media/segmentmigrate06.png)](./media/segmentmigrate06.png) These properties can also be set in code, through corresponding **parm** methods on the control instance. Here's an example.\n\n    ClearingAccount.parmPostingType(LedgerPostingType::VendSettlement);\n\n### Step 18\n\n#### AX 2012\n\nOverride **resolveReference()** in the data source field for the ledger dimension. [![SegmentMigrate07](./media/segmentmigrate07.png)](./media/segmentmigrate07.png)\n\n#### Dynamics AX\n\nDelete this code, because it's no longer required. The control handles this automatically.\n\n### Step 19\n\n#### AX 2012\n\nThe form sets properties on the controller through **parm** methods.\n\n#### Dynamics AX\n\nIn general, any property that was previously set on the controller class should now be set directly on the control. The control that the property must be set on can be determined from the mapping details that are derived by looking at the **parmControl()** call. Additionally, for the **Segmented Entry** control, any property that is available in the **Properties** dialog box in Microsoft Visual Studio can also be set in code, through the corresponding **parm** method on the control instance.\n\n### Step 20\n\n#### AX 2012\n\nThe form uses the control's **currentSegmentIndex()** method.\n\n    dimOffetAssetController. getDimensionAttributeByControlIndex(currentSegmentIndex);\n\n#### Dynamics AX\n\nIn general, any property that was previously set on the controller class should now be set directly on the control. The control that the property must be set on can be determined from the mapping details that are derived by looking at the **parmControl()** call. Additionally, for the **Segmented Entry** control, any property that is available in the **Properties** dialog box in Visual Studio can also be set in code, through the corresponding **parm** method on the control instance.\n\n### Step 21\n\n#### AX 2012\n\nThe form calls methods on the controller object. Here's an example.\n\n    dimOffetAssetController. getDimensionAttributeByControlIndex(currentSegmentIndex);\n\n#### Dynamics AX\n\nAll method calls on the controller must be replaced with method calls on the control. For this example, use the **getDimensionAttributeByControlIndex()** method on the control instead.\n\n    segmentedEntryControl. getDimensionAttributeByControlIndex();\n\n### Step 22\n\n#### AX 2012\n\nFor **DimensionDynamicAccountController**, the account type is specified through the constructor.\n\n    DimensionDynamicAccountController::construct(ledgerJournalTrans_ds, fieldStr(LedgerJournalTrans, LedgerDimension), fieldStr(LedgerJournalTrans, AccountType));\n\n#### Dynamics AX\n\nThere are two methods for implementing this functionality. These methods are mutually exclusive, so use only one of them, depending on the situation:\n\n-   For the **Segmented Entry** control, in the **Properties** dialog box, set the **Account Type Field** property to the data source field that will provide the account type. This is the preferred method. **Note:** If the **super()** call has been removed from the **modified()** method for the field that is bound to the **Account Type Field** property, this method won't work. We have seen this issue in some journal forms, such as **LedgerJournalTransDaily**. In such cases, either add the **super()** call back to the **modified()** method, or use the second method.\n-   Set the account type manually by calling the **parmAccountTypeEnumValue()** method on the control. Here's an example.\n\n        LedgerJournalTrans_AccountNum.parmAccountTypeEnumValue(enum2int(ledgerJournalTrans.AccountType));\n\n    **Note:** The call to **parmAccountTypeEnumValue()** must be put in both the data source's **active()** method and the **modified()** method of the field that will provide the account type.\n\n### Step 23\n\n#### AX 2012\n\nThe form has a variable that is defined.\n\n    LedgerDimensionDefaultAccountController ledgerDimensionDefaultAccountController;\n\n#### Dynamics AX\n\nRemove this, because the controller is no longer required.\n\n### Step 24\n\n#### AX 2012\n\n**parmCurrentLedgerCOA()** method calls: (These are typically present in the form's **init()** method or one of the methods that are overridden on the control.)\n\n    ledgerDimensionDefaultAccountController.parmCurrentLedgerCOA(LedgerCOA::current());\n\n#### Dynamics AX\n\nRemove this line of code, because it's no longer required in most cases. Before you delete this line, make sure that the data area ID is correctly passed in to the controller as a parameter, because the **LedgerCOA** value will be derived from that information. If the data area ID is not passed in, replace **parmCurrentLedgerCOA(â€¦)** with **parmDataAreaId(â€¦)**, and pass the appropriate **SelectableDataArea** value, which is usually **curext()** or another table field that controls the scope of the company for the account control. If the form has no data area context but only a current **LedgerCOA** value, it should be working only with the default account controller. There are only a few forms that are agnostic of a company, but that are scoped to a specific chart of accounts (COA) (for example, **MainAccount** and **Allocations**). In these cases, **parmCurrentLedgerCOA** should be called on the **Segmented Entry** control instance that has a default account controller type set.\n\n### Step 25\n\n#### AX 2012\n\n**parmIncludeFinancialAccounts(NoYes)** method calls:\n\n    LedgerDimensionDefaultAccountController.parmIncludeFinancialAccounts(NoYes::Yes);\n\n#### Dynamics AX\n\nThis line of code is no longer required and should be set directly via a property on the **Segmented Entry** control. **Note:** Because of a framework bug, if you don't setting this explicitly, **No** will be assigned on a ledger dimension default account controller, whereas the previous behavior was to implicitly assign **Yes** during construction. You must set this manually as a property. Alternatively, for a **dialog** class, the **parm** method should still be explicitly called.\n\n### Step 26\n\n#### AX 2012\n\nThe code for the **modified** method of the data field that provides the account type for the **Segmented Entry** control might look like this when the control is used as a dynamic account control.\n\n    public void modified()\n    {\n        super();\n\n        // Lock the main account segment if \"Fixed offset account\" is selected in Journal Names\n        if (ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)\n        {\n            controller.parmLockMainAccountSegment(ledgerJournalTable.FixedOffsetAccount);\n        }\n    }\n\n#### Dynamics AX\n\nThe **modified** method of this data field must now clear the ledger dimension field that is bound to the **Segmented Entry** control as a **Reference** field. For example, if the name of the **Segmented Entry** control is **OffsetAccount**, and the **Reference** field property for this control is set to **LedgerDimension**, the **modified** method in the preceding code should be changed as follows.\n\n    public void modified()\n    {\n        super();\n\n        OffsetAccount.LedgerDimension = 0;\n\n        // Lock the main account segment if \"Fixed offset account\" is selected in Journal Names\n        if (ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)\n        {\n            OffsetAccount.parmLockMainAccountSegment(ledgerJournalTable.FixedOffsetAccount);\n        }\n    }\n\nThe additional line is required to clear the control when the account type is changed.\n\n### Step 27\n\n#### AX 2012\n\nYou can call the **parmAccountStructure()** method on the controller.\n\n    fromBudgetPlanningLedgerDimensionController.parmAccountStructureId(accountStructureIdLocal);\n\n#### Dynamics AX\n\nThis method is replaced by two different methods. Additionally, the purpose of the new methods is the opposite of the old method: the old method turned validation off, whereas the new methods turn it on. Therefore, when you migrate code, you must reverse the Boolean parameter for the new methods. For example, for the method call in the preceding code, the new methods would look like this.\n\n    ToBudgetTransactionLine_LedgerDimension.parmDoValueActiveDatesValidation(false);\n\n    ToBudgetTransactionLine_LedgerDimension.parmDoValueSuspendedValidation(false);\n\n### Step 28\n\n#### AX 2012\n\nYou can call the **parmAccountStructure()** method on the controller:\n\n    fromBudgetPlanningLedgerDimensionController.parmAccountStructureId(accountStructureIdLocal);\n\n#### Dynamics AX\n\nThe **parmAccountStructureId()** method doesn't exist on the control. Instead, separate **getAccountStructure()** and **setAccountStructure()** methods exist. Therefore, the **parmAccountStructureId()** call must be replaced by the **get** or **set** method, depending on how the **parm** method was used. For example, the **parm** method in the preceding code was called as a setter, so the call should be replaced by a call to the **set** method.\n\n    ToBudgetPlanningTransactionLine_LedgerDimension.setAccountStructureId(accountStructureIdLocal);\n\n### Step 29\n\n#### AX 2012\n\n    parmSkipSuspendedAndActiveDateValidation:\n\n#### Dynamics AX\n\nThis method is replaced by two different methods. Additionally, the purpose of the new methods is opposite of the old method: the old method turned validation off, whereas the new methods turn it on. Therefore, when you migrate code, you must reverse the Boolean parameter for the new methods. For example, for the method call in the preceding code, the new methods would look like this.\n\n    ToBudgetTransactionLine_LedgerDimension.parmDoValueActiveDatesValidation(false);\n\n    ToBudgetTransactionLine_LedgerDimension.parmDoValueSuspendedValidation(false);\n\n### Step 30\n\n#### AX 2012\n\nTypically, call the **loadFromId** method on the controller in the **loadSegments()** method.\n\n    ledgerDimensionDefaultAccountControllerResourceIssueOffset.loadFromId(wrkCtrTable.ResourceIssueOffsetLedgerDimension);\n\n#### Dynamics AX\n\nThis method has been deprecated and must not be used. You should delete all calls to this method.\n\n### Migrating a Segmented Entry control on a dialog\n\nThe uptake pattern for the new **Segmented Entry** control on a dialog has changed in Dynamics AX. Instead of interacting with the controller class API, you must now interact with the **SegmentedEntryControlBuild** class to link the SEC with the dialog. This section shows the code patterns for using SEC on a dialog with different controller types. **Note:** Help text is no longer required in Dynamics AX, so you don't have to set the Help text on dialog fields.\n\n-   **Dynamic account:**\n    -   **Before:**\n\n            // Creating the dialog field for the SEC\n            dialogDynamicAccountType = _dialog.addFieldValue(enumStr(LedgerJournalACTypeForPaymProposal), defaultOffsetAccountType, \"@SYS115164\", \"@SYS115165\");\n            dialogDynamicAccount = _dialog.addFieldValue(extendedTypeStr(LedgerDimensionBase), defaultOffsetLedgerDimension, \"@SYS115166\", \"@SYS115167\");\n            dimensionDynamicAccountController = DimensionDynamicAccountController::constructForDialog(dialogDynamicAccount, dialogDynamicAccountType, enumStr(LedgerJournalACTypeForPaymProposal));\n                       dimensionDynamicAccountController.parmIsDefaultAccount(true);\n             \n            public void dialogPostRun(DialogRunBase _dialog)\n            {\n            …\n             \n            dialogDynamicAccountType.registerOverrideMethod('modified', 'accountType_Modified', this);\n             \n            ...\n            }\n             \n            private boolean accountType_Modified(FormComboBoxControl _formComboBoxControl)\n            {\n             boolean valueWasModified;\n             \n             valueWasModified = _formComboBoxControl.modified();\n             if (valueWasModified)\n             {\n             dialogDynamicAccount.value(0);\n                        }\n             \n             return valueWasModified;\n            }\n\n    -   **After:**\n\n            // Creating the dialog field for the SEC\n            protected Object dialog()\n            {\n            ...        \n             \n            // Create the account type dialog field\n            dialogDynamicAccountType = _dialog.addFieldValue(enumStr(LedgerJournalACTypeForPaymProposal), defaultOffsetAccountType, \"@SYS115164\", \"@SYS115165\");\n            // Create the SEC dialog field\n            dialogDynamicAccount = SegmentedEntryControlBuild::addToDialog(dialog, classstr(DimensionDynamicAccountControl), extendedTypeStr(LedgerDimensionBase), \"@SYS115166\", defaultOffsetLedgerDimension);\n             \n            // Provide account type information for the SEC field\n            SegmentedEntryControlBuild::initDialogFieldAccountType(dialogDynamicAccount, enumStr(LedgerJournalACTypeForPaymProposal) , defaultOffsetAccountType);\n            // Set additional parameters on the SEC dialog field\n            SegmentedEntryControlBuild segmentedEntryControlBuild = dialogDynamicAccount.control(); \n            segmentedEntryControlBuild.parmIsDefaultAccount(true);\n             \n            …\n            }\n             \n            // Override for modified method of the Account type checkbox to update the SEC when account type is changed\n            public int accountType_selectionChange(FormComboBoxControl _formComboBoxControl)\n            {\n            SegmentedEntryControl secDDAC = dialogDynamicAccount.control();\n            accountType = _formComboBoxControl.selection();\n             \n            // This is the backing variable used to pack the account specified via the SEC\n            ledgerDimensionDynamicAccount = 0; \n            // Clear the SEC value\n            secDDAC.clearReference();                     \n             \n            // Specify the new account type to the SEC; this is an additional step needed for the AX SEC\n            secDDAC.parmAccountTypeEnumValue(enum2int(accountType));\n             \n            return true;\n            }\n             \n            // Set default account type based on value read from SysLastValue\n            public void dialogPostRun(DialogRunBase _dialog)\n            {\n            …\n            // Default any previously saved account type info\n            secDDAC = dialogDynamicAccount.control();\n            secDDAC.parmAccountTypeEnumValue(enum2int(accountType));\n            ….\n            }\n\n-   **Ledger account:**\n    -   **Before:**\n\n            dialogFeeLedgerDimension = dialog.addFieldValue(extendedtypestr(LedgerDimensionAccount),feeLedgerDimension,\"@SYS119703\", \"@SYS85534\");\n            ledgerDimensionAccountController = LedgerDimensionAccountController::constructForDialog(dialogFeeLedgerDimension);\n\n    -   **After:**\n\n            DialogField dialogLedgerAccount = SegmentedEntryControlBuild::addToDialog(dialog, classstr(LedgerDimensionAccountControl), extendedTypeStr(LedgerDimensionAccount), \"@SYS119703\", feeLedgerDimension);\n\n-   **Default account:**\n    -   **Before:**\n\n            dialogInterCompanyLedgerDimension = dialog.addFieldValue(extendedTypeStr(LedgerDimensionDefaultAccount),interCompanyLedgerDimension, \"@SYS21687\", \"@SYS85534\");\n            ledgerDimensionDefaultAccountController = LedgerDimensionDefaultAccountController::constructForDialog(dialogInterCompanyLedgerDimension);\n\n    -   **After:**\n\n            DialogField dialogDefaultAccount = SegmentedEntryControlBuild::addToDialog(dialog, classstr(LedgerDimensionDefaultAccountControl), extendedTypeStr(LedgerDimensionDefaultAccount), \"@SYS21687\", interCompanyLedgerDimension);\n\n-   **Budget:**\n    -   **Before:** No uptake of the **Budget** controller (**BudgetLedgerDimensionController**) for a dialog scenario was found in the existing program source code.\n    -   **After:**\n\n            DialogField dialogBudget = SegmentedEntryControlBuild::addToDialog(dialog, classstr(BudgetLedgerDimensionControl), extendedTypeStr(LedgerDimensionBudget), 'Budget', ledgerDimensionBudget);\n\n    **Notes:**\n    -   The new API lets you specify the label (**Budget** in the preceding example) while you set up the dialog field.\n    -   The default value for the control is specified via the **ledgerDimensionBudget** variable.\n    -   You must specify the account structure that should be used with the **Budget** controller. The **Dialog** class must implement a way for the user to select the account structure (outside of the SEC) and set the selected account structure on the SEC.\n-   **Budget planning:**\n    -   **Before:** No uptake of the **Budget planning** controller (**BudgetPlanningLedgerDimensionController**) for a dialog scenario was found in the existing program source code.\n    -   **After:**\n\n            DialogField dialogBudgetPlanning = SegmentedEntryControlBuild::addToDialog(dialog, classstr(BudgetPlanningLedgerDimensionControl), extendedTypeStr(LedgerDimensionBudgetPlanning), 'Budget planning', ledgerDimensionBudgetPlanning);\n\n    **Notes:**\n    -   The new API lets you specify the label (**Budget planning** in the preceding example) while you set up the dialog field.\n    -   The default value for the control is specified via the **ledgerDimensionBudgetPlanning** variable.\n    -   You must specify the account structure that should be used with the **Budget planning** controller. The **Dialog** class must implement a way for the user to select the account structure (outside of the SEC) and set the selected account structure on the SEC.\n\n\nSee also\n--------\n\n[Segmented Entry control dialog support](segmented-entry-control-dialog-support.md)\n\n[Segmented Entry control Metadata Specification](segmented-entry-control-metadata-specification.md)\n\n[Segmented Entry control Parm method Specification](segmented-entry-control-parm-method-specification.md)\n\n[Segmented Entry control migration](segmented-entry-control-conversion.md)\n\n\n"}