{"nodes":[{"pos":[32,94],"content":"Add extension properties to a Customer entity | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"Add extension properties to a Customer entity | Microsoft Docs","pos":[0,62]}]},{"pos":[108,180],"content":"This tutorial shows how to use extension properties to extend an entity.","needQuote":true,"needEscape":true,"nodes":[{"content":"This tutorial shows how to use extension properties to extend an entity.","pos":[0,72]}]},{"pos":[598,643],"content":"Add extension properties to a Customer entity","linkify":"Add extension properties to a Customer entity","nodes":[{"content":"Add extension properties to a Customer entity","pos":[0,45]}]},{"content":"In this tutorial, an entity is extended in Microsoft Dynamics AX, and persisted in both Dynamics AX and the channel databases.","pos":[645,771]},{"content":"The point of sale (POS) user interface (UI) then provides access to the value.","pos":[772,850]},{"content":"The new value is also written synchronously to Dynamics AX via the Commerce Data Exchange (CDX) transaction service.","pos":[851,967]},{"content":"No customizations are required for the commerce runtime or Retail Server, because extension properties flow automatically.","pos":[968,1090]},{"content":"Changes are required in forms, tables, the Real-time Service (RTS) client, CDX, the channel database, and the POS (both Retail Modern POS and Cloud POS).","pos":[1091,1244]},{"content":"This tutorial doesn't support offline mode.","pos":[1245,1288]},{"content":"Create a new Dynamics AX project","pos":[1289,1321],"source":"\nCreate a new Dynamics AX project"},{"pos":[1360,1458],"content":"Create a new table that is named <bpt id=\"p1\">**</bpt>RetailCustPreference<ept id=\"p1\">**</ept> and that references the CustTable table.","source":"Create a new table that is named **RetailCustPreference** and that references the CustTable table."},{"content":"Start Microsoft Visual Studio.","pos":[1463,1493]},{"content":"Create a new model and project.","pos":[1498,1529]},{"content":"On the <bpt id=\"p1\">**</bpt>Dynamics AX<ept id=\"p1\">**</ept> menu, click <bpt id=\"p2\">**</bpt>Model Management<ept id=\"p2\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p3\">**</bpt>Create Model<ept id=\"p3\">**</ept>.","pos":[1530,1608],"source":" On the **Dynamics AX** menu, click **Model Management** &gt; **Create Model**."},{"pos":[1613,1674],"content":"Create a new model in the USR layer, and then click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>.","source":"Create a new model in the USR layer, and then click **Next**."},{"content":"Add the model to the existing ApplicationSuite package.","pos":[1679,1734]},{"content":"Click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Finish<ept id=\"p2\">**</ept>.","pos":[1735,1777],"source":" Click **Next**, and then click **Finish**."},{"pos":[1782,1834],"content":"Enter a name for the project, and then click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","source":"Enter a name for the project, and then click **OK**."},{"content":"In Solution Explorer, right-click your new project.","pos":[1839,1890]},{"content":"Select <bpt id=\"p1\">**</bpt>Add<ept id=\"p1\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">**</bpt>New Item<ept id=\"p2\">**</ept>, and add a new table that is named <bpt id=\"p3\">**</bpt>RetailCustPreference<ept id=\"p3\">**</ept>.","pos":[1891,1984],"source":" Select **Add** &gt; **New Item**, and add a new table that is named **RetailCustPreference**."},{"pos":[1989,2071],"content":"In your project, double-click <bpt id=\"p1\">**</bpt>RetailCustPreference<ept id=\"p1\">**</ept> to open the table designer.","source":"In your project, double-click **RetailCustPreference** to open the table designer."},{"pos":[2076,2185],"content":"Create a new enumeration field that is named <bpt id=\"p1\">**</bpt>EmailOptIn<ept id=\"p1\">**</ept>, and set the <bpt id=\"p2\">**</bpt>Enum Type<ept id=\"p2\">**</ept> property to <bpt id=\"p3\">**</bpt>NoYes<ept id=\"p3\">**</ept>.","source":"Create a new enumeration field that is named **EmailOptIn**, and set the **Enum Type** property to **NoYes**."},{"content":"Create a new string field that is named <bpt id=\"p1\">**</bpt>AccountNum<ept id=\"p1\">**</ept>.","pos":[2190,2245],"source":"Create a new string field that is named **AccountNum**."},{"content":"Set the field's extended data type to <bpt id=\"p1\">**</bpt>CustAccount<ept id=\"p1\">**</ept>, and set the <bpt id=\"p2\">**</bpt>Mandatory<ept id=\"p2\">**</ept> property to <bpt id=\"p3\">**</bpt>Yes<ept id=\"p3\">**</ept>.","pos":[2246,2347],"source":" Set the field's extended data type to **CustAccount**, and set the **Mandatory** property to **Yes**."},{"pos":[2352,2503],"content":"Create a new relation with the CustTable table, and add a new normal relation between <bpt id=\"p1\">**</bpt>RetailCustPreference.AccountNum<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>CustTable.AccountNum<ept id=\"p2\">**</ept>.","source":"Create a new relation with the CustTable table, and add a new normal relation between **RetailCustPreference.AccountNum** and **CustTable.AccountNum**."},{"content":"Save your changes.","pos":[2508,2526]},{"pos":[2531,2610],"content":"In Solution Explorer, right-click your project, and then select <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>.","source":"In Solution Explorer, right-click your project, and then select **Properties**."},{"pos":[2615,2674],"content":"Select the <bpt id=\"p1\">**</bpt>Synchronize database<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>on build<ept id=\"p2\">**</ept> check box.","source":"Select the **Synchronize database** **on build** check box."},{"pos":[2679,2782],"content":"Right-click your project, and then select <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> to build the new code and synchronize the database.","source":"Right-click your project, and then select **Build** to build the new code and synchronize the database."},{"pos":[2787,2912],"content":"When the build is completed, return to the project properties, and clear the <bpt id=\"p1\">**</bpt>Synchronize database<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>on build<ept id=\"p2\">**</ept> check box.","source":"When the build is completed, return to the project properties, and clear the **Synchronize database** **on build** check box."},{"pos":[2917,2942],"content":"Update the CustTable form","linkify":"Update the CustTable form","nodes":[{"content":"Update the CustTable form","pos":[0,25]}]},{"content":"In Application Explorer, select <bpt id=\"p1\">**</bpt>User Interface<ept id=\"p1\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">**</bpt>Forms<ept id=\"p2\">**</ept> <ph id=\"ph2\">&amp;gt;</ph> <bpt id=\"p3\">**</bpt>CustTable<ept id=\"p3\">**</ept>.","pos":[2947,3032],"source":"In Application Explorer, select **User Interface** &gt; **Forms** &gt; **CustTable**."},{"content":"Right-click <bpt id=\"p1\">**</bpt>CustTable<ept id=\"p1\">**</ept>, and then select <bpt id=\"p2\">**</bpt>Create Extension<ept id=\"p2\">**</ept>.","pos":[3033,3097],"source":" Right-click **CustTable**, and then select **Create Extension**."},{"content":"Your project now includes a new element that is named <bpt id=\"p1\">**</bpt>CustTable.Extension<ept id=\"p1\">**</ept>.","pos":[3102,3180],"source":"Your project now includes a new element that is named **CustTable.Extension**."},{"content":"Double-click this element to open the form designer.","pos":[3181,3233]},{"pos":[3238,3352],"content":"Add a new data source that is named <bpt id=\"p1\">**</bpt>RetailCustPreference<ept id=\"p1\">**</ept>, and set the <bpt id=\"p2\">**</bpt>Link Type<ept id=\"p2\">**</ept> property to <bpt id=\"p3\">**</bpt>OuterJoin<ept id=\"p3\">**</ept>.","source":"Add a new data source that is named **RetailCustPreference**, and set the **Link Type** property to **OuterJoin**."},{"pos":[3357,3534],"content":"On the <bpt id=\"p1\">**</bpt>CustTable<ept id=\"p1\">**</ept> form on the <bpt id=\"p2\">**</bpt>Retail<ept id=\"p2\">**</ept> tab page, add a new group that is named <bpt id=\"p3\">**</bpt>CustomerPreference<ept id=\"p3\">**</ept> and that has the <bpt id=\"p4\">**</bpt>Caption<ept id=\"p4\">**</ept> property set to <bpt id=\"p5\">**</bpt>Customer Preference<ept id=\"p5\">**</ept> .","source":"On the **CustTable** form on the **Retail** tab page, add a new group that is named **CustomerPreference** and that has the **Caption** property set to **Customer Preference** ."},{"pos":[3539,3669],"content":"To the <bpt id=\"p1\">**</bpt>RetailCustPreference<ept id=\"p1\">**</ept> table in the <bpt id=\"p2\">**</bpt>CustomerPreference<ept id=\"p2\">**</ept> group, add a new check box field that is named <bpt id=\"p3\">**</bpt>EmailOptIn<ept id=\"p3\">**</ept>.","source":"To the **RetailCustPreference** table in the **CustomerPreference** group, add a new check box field that is named **EmailOptIn**."},{"content":"Add a new class that is named <bpt id=\"p1\">**</bpt>CustTable<ph id=\"ph1\">\\_</ph>Extension<ept id=\"p1\">**</ept>.","pos":[3674,3729],"source":"Add a new class that is named **CustTable\\_Extension**."},{"content":"In the code editor, add the following code.","pos":[3730,3773]},{"content":"Save all your changes, and build your project again.","pos":[4579,4631]},{"pos":[4636,4653],"content":"Run <bpt id=\"p1\">**</bpt>iisreset<ept id=\"p1\">**</ept>.","source":"Run **iisreset**."},{"pos":[4658,4762],"content":"In Dynamics AX, go to <bpt id=\"p1\">**</bpt>Accounts receivable<ept id=\"p1\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">**</bpt>Common<ept id=\"p2\">**</ept> <ph id=\"ph2\">&amp;gt;</ph> <bpt id=\"p3\">**</bpt>Customers<ept id=\"p3\">**</ept> <ph id=\"ph3\">&amp;gt;</ph> <bpt id=\"p4\">**</bpt>All customers<ept id=\"p4\">**</ept>.","source":"In Dynamics AX, go to **Accounts receivable** &gt; **Common** &gt; **Customers** &gt; **All customers**."},{"content":"Edit a customer record.","pos":[4767,4790]},{"content":"On the <bpt id=\"p1\">**</bpt>Retail<ept id=\"p1\">**</ept> FastTab, select the <bpt id=\"p2\">**</bpt>Email Opt In<ept id=\"p2\">**</ept> check box, and then save your change.","pos":[4791,4883],"source":" On the **Retail** FastTab, select the **Email Opt In** check box, and then save your change."},{"pos":[4888,4983],"content":"Customize the existing RetailTransactionService class so that it handles the new data correctly","linkify":"Customize the existing RetailTransactionService class so that it handles the new data correctly","nodes":[{"content":"Customize the existing RetailTransactionService class so that it handles the new data correctly","pos":[0,95]}]},{"pos":[4988,5101],"content":"In Application Explorer, right-click the <bpt id=\"p1\">**</bpt>RetailTransactionService (sys)<ept id=\"p1\">**</ept> class, and then select <bpt id=\"p2\">**</bpt>Customize<ept id=\"p2\">**</ept>.","source":"In Application Explorer, right-click the **RetailTransactionService (sys)** class, and then select **Customize**."},{"content":"Add the following two methods at the end.","pos":[5106,5147]},{"content":"Update the <bpt id=\"p1\">**</bpt>updateCustomerExt<ept id=\"p1\">**</ept> method by adding the following code to the end.","pos":[9820,9900],"source":"Update the **updateCustomerExt** method by adding the following code to the end."},{"content":"(Also add the variable declaration for <bpt id=\"p1\">**</bpt>customerContainer<ept id=\"p1\">**</ept> on the first line of code.)","pos":[9901,9989],"source":" (Also add the variable declaration for **customerContainer** on the first line of code.)"},{"content":"Compile the project.","pos":[10252,10272]},{"pos":[10277,10312],"content":"Configure CDX to sync the new table","linkify":"Configure CDX to sync the new table","nodes":[{"content":"Configure CDX to sync the new table","pos":[0,35]}]},{"pos":[10317,10477],"content":"In Dynamics AX, go to <bpt id=\"p1\">**</bpt>Retail<ept id=\"p1\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">**</bpt>Setup<ept id=\"p2\">**</ept> <ph id=\"ph2\">&amp;gt;</ph> <bpt id=\"p3\">**</bpt>Retail scheduler<ept id=\"p3\">**</ept> <ph id=\"ph3\">&amp;gt;</ph> <bpt id=\"p4\">**</bpt>Retail channel<ept id=\"p4\">**</ept> <bpt id=\"p5\">**</bpt>schema<ept id=\"p5\">**</ept>, and edit the channel schema by adding a new table:","source":"In Dynamics AX, go to **Retail** &gt; **Setup** &gt; **Retail scheduler** &gt; **Retail channel** **schema**, and edit the channel schema by adding a new table:"},{"pos":[10486,10535],"content":"Click <bpt id=\"p1\">**</bpt>Channel tables<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept>.","source":"Click **Channel tables**, and then click **New**."},{"pos":[10544,10600],"content":"Name the table <bpt id=\"p1\">**</bpt>ax.RetailCustPreference<ept id=\"p1\">**</ept>, and save it.","source":"Name the table **ax.RetailCustPreference**, and save it."},{"pos":[10609,10697],"content":"Add the following fields: <bpt id=\"p1\">**</bpt>ACCOUNTNUM<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>DATAAREAID<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>EMAILOPTIN<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>RECID<ept id=\"p4\">**</ept>.","source":"Add the following fields: **ACCOUNTNUM**, **DATAAREAID**, **EMAILOPTIN**, and **RECID**."},{"pos":[10706,10719],"content":"Click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","source":"Click **OK**."},{"pos":[10725,10835],"content":"Go to <bpt id=\"p1\">**</bpt>Retail<ept id=\"p1\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">**</bpt>Setup<ept id=\"p2\">**</ept> <ph id=\"ph2\">&amp;gt;</ph> <bpt id=\"p3\">**</bpt>Retail scheduler<ept id=\"p3\">**</ept> <ph id=\"ph3\">&amp;gt;</ph> <bpt id=\"p4\">**</bpt>Scheduler subjobs<ept id=\"p4\">**</ept>, and create a new subjob:","source":"Go to **Retail** &gt; **Setup** &gt; **Retail scheduler** &gt; **Scheduler subjobs**, and create a new subjob:"},{"pos":[10844,10953],"content":"Set the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> field to <bpt id=\"p2\">**</bpt>RetailCustPreference<ept id=\"p2\">**</ept> and the <bpt id=\"p3\">**</bpt>Description<ept id=\"p3\">**</ept> field to <bpt id=\"p4\">**</bpt>RetailCustPreference<ept id=\"p4\">**</ept>.","source":"Set the **Name** field to **RetailCustPreference** and the **Description** field to **RetailCustPreference**."},{"pos":[10962,11030],"content":"Set the <bpt id=\"p1\">**</bpt>Channel table name<ept id=\"p1\">**</ept> field to <bpt id=\"p2\">**</bpt>ax.RetailCustPreference<ept id=\"p2\">**</ept>.","source":"Set the **Channel table name** field to **ax.RetailCustPreference**."},{"pos":[11039,11094],"content":"Set the <bpt id=\"p1\">**</bpt>AX table<ept id=\"p1\">**</ept> field to <bpt id=\"p2\">**</bpt>RetailCustPreference<ept id=\"p2\">**</ept>.","source":"Set the **AX table** field to **RetailCustPreference**."},{"pos":[11103,11126],"content":"Click <bpt id=\"p1\">**</bpt>Match fields<ept id=\"p1\">**</ept>.","source":"Click **Match fields**."},{"pos":[11135,11150],"content":"Click <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept>.","source":"Click **Save**."},{"pos":[11156,11309],"content":"<bpt id=\"p1\">**</bpt>Retail<ept id=\"p1\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">**</bpt>Setup<ept id=\"p2\">**</ept> <ph id=\"ph2\">&amp;gt;</ph> <bpt id=\"p3\">**</bpt>Retail Scheduler<ept id=\"p3\">**</ept> <ph id=\"ph3\">&amp;gt;</ph> <bpt id=\"p4\">**</bpt>Scheduler subjobs<ept id=\"p4\">**</ept>, add the new subjob to the <bpt id=\"p5\">**</bpt>Customers - 1010<ept id=\"p5\">**</ept> job, and save your change.","source":"**Retail** &gt; **Setup** &gt; **Retail Scheduler** &gt; **Scheduler subjobs**, add the new subjob to the **Customers - 1010** job, and save your change."},{"content":"Go to <bpt id=\"p1\">**</bpt>Retail<ept id=\"p1\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">**</bpt>Setup<ept id=\"p2\">**</ept> <ph id=\"ph2\">&amp;gt;</ph> <bpt id=\"p3\">**</bpt>Retail Scheduler<ept id=\"p3\">**</ept> <ph id=\"ph3\">&amp;gt;</ph> <bpt id=\"p4\">**</bpt>Retail channel schema<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>export, edit,<ept id=\"p5\">**</ept> <bpt id=\"p6\">**</bpt>save with new name<ept id=\"p6\">**</ept>, <bpt id=\"p7\">**</bpt>import<ept id=\"p7\">**</ept>, and edit the CDX table distribution XML.","pos":[11314,11498],"source":"Go to **Retail** &gt; **Setup** &gt; **Retail Scheduler** &gt; **Retail channel schema**, **export, edit,** **save with new name**, **import**, and edit the CDX table distribution XML."},{"content":"Add the following XML fragment inside both <bpt id=\"p1\">**</bpt>CustTable<ept id=\"p1\">**</ept> nodes.","pos":[11499,11562],"source":" Add the following XML fragment inside both **CustTable** nodes."},{"content":"(By adding this XML fragment, you're explicitly including changes in this table when it's synced with the channels.)","pos":[11563,11679]},{"pos":[11891,12000],"content":"On the <bpt id=\"p1\">**</bpt>Retail channel schema<ept id=\"p1\">**</ept> page, select <bpt id=\"p2\">**</bpt>AX<ept id=\"p2\">**</ept> as the schema name, and then click <bpt id=\"p3\">**</bpt>Generate queries<ept id=\"p3\">**</ept>.","source":"On the **Retail channel schema** page, select **AX** as the schema name, and then click **Generate queries**."},{"pos":[12005,12021],"content":"Channel database","linkify":"Channel database","nodes":[{"content":"Channel database","pos":[0,16]}]},{"content":"You will manually change the channel database for development.","pos":[12022,12084]},{"content":"For the live deployment, see the \"Live deployment\" section later in this topic.","pos":[12085,12164]},{"content":"You must apply the schema change from ChannelDBUpgrade.sql to the correct channel database to add the new table.","pos":[12165,12277]},{"content":"Change <ph id=\"ph1\">\\[</ph>crt<ph id=\"ph2\">\\]</ph>.<ph id=\"ph3\">\\[</ph>CUSTOMERSVIEW<ph id=\"ph4\">\\]</ph>:","pos":[12283,12316],"source":"Change \\[crt\\].\\[CUSTOMERSVIEW\\]:"},{"content":"Before the UNION All, add \", isnull(rcp.EMAILOPTIN, 0) as EMAILOPTIN\" to the end of the list of columns that should be selected.","pos":[12325,12453]},{"content":"Before the UNION All, add \"LEFT OUTER JOIN <ph id=\"ph1\">\\[</ph>ax<ph id=\"ph2\">\\]</ph>.RETAILCUSTPREFERENCE rcp ON ct.ACCOUNTNUM = rcp.ACCOUNTNUM AND ct.DATAAREAID = rcp.DATAAREAID\".","pos":[12462,12607],"source":"Before the UNION All, add \"LEFT OUTER JOIN \\[ax\\].RETAILCUSTPREFERENCE rcp ON ct.ACCOUNTNUM = rcp.ACCOUNTNUM AND ct.DATAAREAID = rcp.DATAAREAID\"."},{"content":"After the UNION All, add \", 0  as EMAILOPTIN\" to the end of the list of columns that should be selected.","pos":[12616,12720]},{"content":"Change sproc <ph id=\"ph1\">\\[</ph>crt<ph id=\"ph2\">\\]</ph>.<ph id=\"ph3\">\\[</ph>CREATEUPDATECUSTOMER<ph id=\"ph4\">\\]</ph>:","pos":[12729,12775],"source":"Change sproc \\[crt\\].\\[CREATEUPDATECUSTOMER\\]:"},{"content":"Add the following code just before line \"MERGE INTO <ph id=\"ph1\">\\[</ph>ax<ph id=\"ph2\">\\]</ph>.DIRADDRESSBOOKPARTY\":","pos":[12781,12861],"source":"Add the following code just before line \"MERGE INTO \\[ax\\].DIRADDRESSBOOKPARTY\":"},{"pos":[13975,13985],"content":"Verify CDX","linkify":"Verify CDX","nodes":[{"content":"Verify CDX","pos":[0,10]}]},{"content":"Run the 1010 job by using full synchronization (channel data group).","pos":[13990,14058]},{"pos":[14063,14182],"content":"Check the download sessions and the channel database to verify that the data arrived (it should appear as <bpt id=\"p1\">**</bpt>Applied<ept id=\"p1\">**</ept>).","source":"Check the download sessions and the channel database to verify that the data arrived (it should appear as **Applied**)."},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> No customizations are required for the commerce runtime or Retail Server.","pos":[14184,14267],"source":"**Note:** No customizations are required for the commerce runtime or Retail Server."},{"content":"Extension properties flow automatically.","pos":[14268,14308]},{"pos":[14313,14391],"content":"Test the customization's business logic by using the Retail Server test client","linkify":"Test the customization's business logic by using the Retail Server test client","nodes":[{"content":"Test the customization's business logic by using the Retail Server test client","pos":[0,78]}]},{"pos":[14396,14514],"content":"Open the project at <bpt id=\"p1\">**</bpt>RetailSdk<ph id=\"ph1\">\\\\</ph>SampleExtensions<ph id=\"ph2\">\\\\</ph>RetailServer<ph id=\"ph3\">\\\\</ph>Extensions.TestClient<ept id=\"p1\">**</ept>, and then compile and run it.","source":"Open the project at **RetailSdk\\\\SampleExtensions\\\\RetailServer\\\\Extensions.TestClient**, and then compile and run it."},{"pos":[14519,14630],"content":"In the field next to the <bpt id=\"p1\">**</bpt>Activate New<ept id=\"p1\">**</ept> button, enter the Retail Server URL, and then click <bpt id=\"p2\">**</bpt>Activate New<ept id=\"p2\">**</ept>.","source":"In the field next to the **Activate New** button, enter the Retail Server URL, and then click **Activate New**."},{"pos":[14635,14698],"content":"Enter the device and register IDs, and then click <bpt id=\"p1\">**</bpt>Activate<ept id=\"p1\">**</ept>.","source":"Enter the device and register IDs, and then click **Activate**."},{"pos":[14703,14826],"content":"Enter the Microsoft Azure Active Directory (Azure AD) credentials that have registration privileges, and then click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>.","source":"Enter the Microsoft Azure Active Directory (Azure AD) credentials that have registration privileges, and then click **OK**."},{"content":"Wait for the test client to show which device is registered.","pos":[14831,14891]},{"content":"Click the sign-in button, and sign in by using worker credentials.","pos":[14896,14962]},{"content":"Click <bpt id=\"p1\">**</bpt>Sdk Tests<ept id=\"p1\">**</ept>.","pos":[14967,14987],"source":"Click **Sdk Tests**."},{"content":"This button calls the new functionality that saves a customer with the <bpt id=\"p1\">**</bpt>EmailOptIn<ept id=\"p1\">**</ept> extension property applied.","pos":[14988,15101],"source":" This button calls the new functionality that saves a customer with the **EmailOptIn** extension property applied."},{"content":"In Dynamics AX or the database, verify that the customer's <bpt id=\"p1\">**</bpt>EmailOptIn<ept id=\"p1\">**</ept> value is stored correctly.","pos":[15106,15206],"source":"In Dynamics AX or the database, verify that the customer's **EmailOptIn** value is stored correctly."},{"content":"<bpt id=\"p1\">**</bpt>Note: <ept id=\"p1\">**</ept>To see a console that includes errors/logs, use the <bpt id=\"p2\">**</bpt>Debug<ept id=\"p2\">**</ept> button.","pos":[15207,15286],"source":"**Note: **To see a console that includes errors/logs, use the **Debug** button."},{"pos":[15291,15308],"content":"Extend Modern POS","linkify":"Extend Modern POS","nodes":[{"content":"Extend Modern POS","pos":[0,17]}]},{"pos":[15313,15349],"content":"Open the <bpt id=\"p1\">**</bpt>ModernPos.sln<ept id=\"p1\">**</ept> solution.","source":"Open the **ModernPos.sln** solution."},{"pos":[15354,15434],"content":"Do a global search for <bpt id=\"p1\">**</bpt>BEGIN SDKSAMPLE<ph id=\"ph1\">\\_</ph>CUSTOMERPREFERENCES<ept id=\"p1\">**</ept> in the solution.","source":"Do a global search for **BEGIN SDKSAMPLE\\_CUSTOMERPREFERENCES** in the solution."},{"content":"Enable the code at all places that you found, and recompile.","pos":[15439,15499]},{"content":"Only one resources file is required.","pos":[15500,15536]},{"content":"You can select the required locale.","pos":[15537,15572]},{"content":"Run Modern POS, and verify that you can create a new customer.","pos":[15577,15639]},{"content":"When an existing customer is updated, the flag should be updated correctly in both the channel database and the Dynamics AX database.","pos":[15640,15773]},{"pos":[15778,15793],"content":"Live deployment","linkify":"Live deployment","nodes":[{"content":"Live deployment","pos":[0,15]}]},{"pos":[15798,15905],"content":"Add the channel database change file to the database folder, and register it in <bpt id=\"p1\">**</bpt>customization.settings<ept id=\"p1\">**</ept>.","source":"Add the channel database change file to the database folder, and register it in **customization.settings**."},{"content":"Run <bpt id=\"p1\">**</bpt>msbuild<ept id=\"p1\">**</ept> for the whole Retail SDK solution.","pos":[15910,15960],"source":"Run **msbuild** for the whole Retail SDK solution."},{"content":"All packages will have all appropriate changes.","pos":[15961,16008]},{"content":"Deploy packages, either by using Microsoft Dynamics Lifecycle Services (LCS) or manually.","pos":[16013,16102]}],"content":"---\n# required metadata\n\ntitle: Add extension properties to a Customer entity | Microsoft Docs\ndescription: This tutorial shows how to use extension properties to extend an entity. \nauthor: annbe\nmanager: AnnBe\nms.date: 2016-09-30 22:06:20\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: 61\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 196163\nms.assetid: be57e22e-d784-4882-9aed-97b628caaa1c\n# ms.region: \nms.industry: Retail\nms.author: josaw1\n\n---\n\n# Add extension properties to a Customer entity\n\nIn this tutorial, an entity is extended in Microsoft Dynamics AX, and persisted in both Dynamics AX and the channel databases. The point of sale (POS) user interface (UI) then provides access to the value. The new value is also written synchronously to Dynamics AX via the Commerce Data Exchange (CDX) transaction service. No customizations are required for the commerce runtime or Retail Server, because extension properties flow automatically. Changes are required in forms, tables, the Real-time Service (RTS) client, CDX, the channel database, and the POS (both Retail Modern POS and Cloud POS). This tutorial doesn't support offline mode.\nCreate a new Dynamics AX project\n--------------------------------\n\n1.  Create a new table that is named **RetailCustPreference** and that references the CustTable table.\n2.  Start Microsoft Visual Studio.\n3.  Create a new model and project. On the **Dynamics AX** menu, click **Model Management** &gt; **Create Model**.\n4.  Create a new model in the USR layer, and then click **Next**.\n5.  Add the model to the existing ApplicationSuite package. Click **Next**, and then click **Finish**.\n6.  Enter a name for the project, and then click **OK**.\n7.  In Solution Explorer, right-click your new project. Select **Add** &gt; **New Item**, and add a new table that is named **RetailCustPreference**.\n8.  In your project, double-click **RetailCustPreference** to open the table designer.\n9.  Create a new enumeration field that is named **EmailOptIn**, and set the **Enum Type** property to **NoYes**.\n10. Create a new string field that is named **AccountNum**. Set the field's extended data type to **CustAccount**, and set the **Mandatory** property to **Yes**.\n11. Create a new relation with the CustTable table, and add a new normal relation between **RetailCustPreference.AccountNum** and **CustTable.AccountNum**.\n12. Save your changes.\n13. In Solution Explorer, right-click your project, and then select **Properties**.\n14. Select the **Synchronize database** **on build** check box.\n15. Right-click your project, and then select **Build** to build the new code and synchronize the database.\n16. When the build is completed, return to the project properties, and clear the **Synchronize database** **on build** check box.\n\n## Update the CustTable form\n1.  In Application Explorer, select **User Interface** &gt; **Forms** &gt; **CustTable**. Right-click **CustTable**, and then select **Create Extension**.\n2.  Your project now includes a new element that is named **CustTable.Extension**. Double-click this element to open the form designer.\n3.  Add a new data source that is named **RetailCustPreference**, and set the **Link Type** property to **OuterJoin**.\n4.  On the **CustTable** form on the **Retail** tab page, add a new group that is named **CustomerPreference** and that has the **Caption** property set to **Customer Preference** .\n5.  To the **RetailCustPreference** table in the **CustomerPreference** group, add a new check box field that is named **EmailOptIn**.\n6.  Add a new class that is named **CustTable\\_Extension**. In the code editor, add the following code.\n\n        public static class CustTable_Extension\n        {\n            [FormDataSourceEventHandler(formDataSourceStr(CustTable, CustTable), FormDataSourceEventType::ValidatingWrite)]\n            public static void foo(FormDataSource fds, FormDataSourceEventArgs e)\n            {\n                FormRun                             form = fds.formRun();\n                CustTable                           custTable = fds.cursor() as CustTable;\n                RetailCustPreference                retailCustPreference = form.dataSource(formDataSourceStr(CustTable, RetailCustPreference)).cursor() as RetailCustPreference;\n                retailCustPreference.AccountNum     = custTable.AccountNum; form.dataSource(formDataSourceStr(CustTable, RetailCustPreference)).write(); \n            } \n        }\n\n7.  Save all your changes, and build your project again.\n8.  Run **iisreset**.\n9.  In Dynamics AX, go to **Accounts receivable** &gt; **Common** &gt; **Customers** &gt; **All customers**.\n10. Edit a customer record. On the **Retail** FastTab, select the **Email Opt In** check box, and then save your change.\n\n## Customize the existing RetailTransactionService class so that it handles the new data correctly\n1.  In Application Explorer, right-click the **RetailTransactionService (sys)** class, and then select **Customize**.\n2.  Add the following two methods at the end.\n\n        /// <summary>\n        /// Processes all Extension properties. This is a sample only. Should be re-factored into its own class for better reuse and better decoupling from RetailTransactionService\n        /// </summary>\n        /// <param name = \"extensionProperties\"></param>\n        private static void processExtensionProperties(AccountNum accountNum, str extensionProperties)\n        {\n            XmlElement                  xmlElementExtensionProperties;\n            XmlNodeList                 xmlListExtensionProperties;\n            int                         i;\n            XmlElement                  xmlElementExtensionProperty;\n            str                         propertyName;\n            str                         propertyValue;\n            int                         emailOptInValue;\n            if(extensionProperties != null && extensionProperties != '')\n            {\n                XmlDocument xmlExtensionProperties = new XmlDocument();\n                xmlExtensionProperties.loadXml(extensionProperties);\n                xmlElementExtensionProperties = xmlExtensionProperties.getNamedElement('ExtensionProperties');\n                xmlListExtensionProperties = xmlElementExtensionProperties.childNodes();\n                if (xmlListExtensionProperties)\n                {\n                    for (i = 0; i < xmlListExtensionProperties.length(); i++)\n                    {\n                        xmlElementExtensionProperty = xmlListExtensionProperties.item(i);\n                        if(xmlElementExtensionProperty)\n                        {\n                            propertyName = xmlElementExtensionProperty.tagName();\n                            propertyValue = xmlElementExtensionProperty.innerText();\n                            switch(propertyName)\n                            {\n                                case \"EMAILOPTIN\":\n                                    // update the EMAILOPTIN value\n                                    if(propertyValue != null && propertyValue != '')\n                                    {\n                                        emailOptInValue = str2Int(propertyValue);\n                                    }\n                                    else\n                                    {\n                                        emailOptInValue = 0;\n                                    }\n                                    RetailTransactionService::updateOptIn(accountNum, emailOptInValue);\n                                    break;\n                                default:\n                                    // do something else here...\n                                    break; \n                            } \n                        } \n                    } \n                } \n            } \n        }\n\n        /// <summary>\n        /// Updates the customer email optin value. This is a sample only. Should be re-factored into its own class for better reuse and better decoupling from RetailTransactionService\n        /// </summary>\n        /// <param name = \"accountnum\"></param>\n        /// <param name = \"emailOptIn\"></param>\n        /// <returns></returns>\n        private static container updateOptIn(AccountNum accountnum, int emailOptIn)\n        {\n            RetailCustPreference        retailCustPreference;\n            boolean validUpdate = false;\n            str error = \"NO error\";\n            int fromLine;\n            try\n            {\n                //Extensibility code for cust preference\n                select forUpdate EmailOptIn from retailCustPreference  where  retailCustPreference.AccountNum == accountnum;\n                if(retailCustPreference.RecId)\n                {\n                    //retailCustPreference.clear();\n                    ttsBegin;\n                    retailCustPreference.EmailOptIn = emailOptIn;\n                    retailCustPreference.update();\n                    ttscommit;\n                }\n                else\n                {\n                    retailCustPreference.clear();\n                    retailCustPreference.AccountNum = accountNum;\n                    retailCustPreference.EmailOptIn = emailOptIn;\n                    retailCustPreference.insert();\n                }\n                validUpdate = true;\n            }\n            catch(Exception::Error)\n            {\n                ttsabort;\n                error = RetailTransactionServiceUtilities::getInfologMessages(fromLine);\n                RetailTracer::Error('RetailTransactionService', funcName(), error);\n            }\n            // Returning the status as a container\n            return [validUpdate, error,retailCustPreference.AccountNum];\n        }\n\n3.  Update the **updateCustomerExt** method by adding the following code to the end. (Also add the variable declaration for **customerContainer** on the first line of code.)\n\n        // the third element in container is the account number\n        AccountNum accountNum = conPeek(customerContainer, 3);\n        RetailTransactionService::processExtensionProperties(accountNum, extensionProperties);\n        return customerContainer;\n\n4.  Compile the project.\n\n## Configure CDX to sync the new table\n1.  In Dynamics AX, go to **Retail** &gt; **Setup** &gt; **Retail scheduler** &gt; **Retail channel** **schema**, and edit the channel schema by adding a new table:\n    1.  Click **Channel tables**, and then click **New**.\n    2.  Name the table **ax.RetailCustPreference**, and save it.\n    3.  Add the following fields: **ACCOUNTNUM**, **DATAAREAID**, **EMAILOPTIN**, and **RECID**.\n    4.  Click **OK**.\n\n2.  Go to **Retail** &gt; **Setup** &gt; **Retail scheduler** &gt; **Scheduler subjobs**, and create a new subjob:\n    1.  Set the **Name** field to **RetailCustPreference** and the **Description** field to **RetailCustPreference**.\n    2.  Set the **Channel table name** field to **ax.RetailCustPreference**.\n    3.  Set the **AX table** field to **RetailCustPreference**.\n    4.  Click **Match fields**.\n    5.  Click **Save**.\n\n3.  **Retail** &gt; **Setup** &gt; **Retail Scheduler** &gt; **Scheduler subjobs**, add the new subjob to the **Customers - 1010** job, and save your change.\n4.  Go to **Retail** &gt; **Setup** &gt; **Retail Scheduler** &gt; **Retail channel schema**, **export, edit,** **save with new name**, **import**, and edit the CDX table distribution XML. Add the following XML fragment inside both **CustTable** nodes. (By adding this XML fragment, you're explicitly including changes in this table when it's synced with the channels.)\n\n        <Table name=\"RetailCustPreference\">\n            <LinkGroup>\n                <Link type=\"FieldMatch\" fieldName=\"accountNum\" parentFieldName=\"AccountNum\" />\n            </LinkGroup>\n        </Table>\n\n5.  On the **Retail channel schema** page, select **AX** as the schema name, and then click **Generate queries**.\n\n## Channel database\nYou will manually change the channel database for development. For the live deployment, see the \"Live deployment\" section later in this topic. You must apply the schema change from ChannelDBUpgrade.sql to the correct channel database to add the new table.\n\n1.  Change \\[crt\\].\\[CUSTOMERSVIEW\\]:\n    -   Before the UNION All, add \", isnull(rcp.EMAILOPTIN, 0) as EMAILOPTIN\" to the end of the list of columns that should be selected.\n    -   Before the UNION All, add \"LEFT OUTER JOIN \\[ax\\].RETAILCUSTPREFERENCE rcp ON ct.ACCOUNTNUM = rcp.ACCOUNTNUM AND ct.DATAAREAID = rcp.DATAAREAID\".\n    -   After the UNION All, add \", 0  as EMAILOPTIN\" to the end of the list of columns that should be selected.\n    -   Change sproc \\[crt\\].\\[CREATEUPDATECUSTOMER\\]:\n\n2.  Add the following code just before line \"MERGE INTO \\[ax\\].DIRADDRESSBOOKPARTY\":\n\n        MERGE INTO [ax].RETAILCUSTPREFERENCE\n        USING (SELECT DISTINCT\n        tp.PARENTRECID, tp.PROPERTYVALUE as [EMAILOPTIN], ct.ACCOUNTNUM, ct.DATAAREAID\n        FROM @TVP_EXTENSIONPROPERTIESTABLETYPE tp\n        JOIN [ax].CUSTTABLE ct on ct.RECID = tp.PARENTRECID\n        WHERE tp.PARENTRECID <> 0 and tp.PROPERTYNAME = 'EMAILOPTIN') AS SOURCE\n        ON [ax].RETAILCUSTPREFERENCE.RECID = SOURCE.PARENTRECID\n            and [ax].RETAILCUSTPREFERENCE.DATAAREAID = SOURCE.DATAAREAID\n            and [ax].RETAILCUSTPREFERENCE.ACCOUNTNUM = SOURCE.ACCOUNTNUM\n        WHEN MATCHED THEN\n        UPDATE SET [EMAILOPTIN] = source.[EMAILOPTIN]\n        WHEN NOT MATCHED THEN\n        INSERT\n        (\n            RECID\n            ,DATAAREAID\n            ,EMAILOPTIN\n            ,ACCOUNTNUM\n        )\n        VALUES\n        (\n            SOURCE.PARENTRECID\n            ,SOURCE.DATAAREAID\n            ,SOURCE.EMAILOPTIN\n            ,SOURCE.ACCOUNTNUM\n        );\n        SELECT @i_Error = @@ERROR;\n        IF @i_Error <> 0\n        BEGIN\n        SET @i_ReturnCode = @i_Error;\n        GOTO exit_label;\n        END;\n\n## Verify CDX\n1.  Run the 1010 job by using full synchronization (channel data group).\n2.  Check the download sessions and the channel database to verify that the data arrived (it should appear as **Applied**).\n\n**Note:** No customizations are required for the commerce runtime or Retail Server. Extension properties flow automatically.\n\n## Test the customization's business logic by using the Retail Server test client\n1.  Open the project at **RetailSdk\\\\SampleExtensions\\\\RetailServer\\\\Extensions.TestClient**, and then compile and run it.\n2.  In the field next to the **Activate New** button, enter the Retail Server URL, and then click **Activate New**.\n3.  Enter the device and register IDs, and then click **Activate**.\n4.  Enter the Microsoft Azure Active Directory (Azure AD) credentials that have registration privileges, and then click **OK**.\n5.  Wait for the test client to show which device is registered.\n6.  Click the sign-in button, and sign in by using worker credentials.\n7.  Click **Sdk Tests**. This button calls the new functionality that saves a customer with the **EmailOptIn** extension property applied.\n8.  In Dynamics AX or the database, verify that the customer's **EmailOptIn** value is stored correctly. **Note: **To see a console that includes errors/logs, use the **Debug** button.\n\n## Extend Modern POS\n1.  Open the **ModernPos.sln** solution.\n2.  Do a global search for **BEGIN SDKSAMPLE\\_CUSTOMERPREFERENCES** in the solution.\n3.  Enable the code at all places that you found, and recompile. Only one resources file is required. You can select the required locale.\n4.  Run Modern POS, and verify that you can create a new customer. When an existing customer is updated, the flag should be updated correctly in both the channel database and the Dynamics AX database.\n\n## Live deployment\n1.  Add the channel database change file to the database folder, and register it in **customization.settings**.\n2.  Run **msbuild** for the whole Retail SDK solution. All packages will have all appropriate changes.\n3.  Deploy packages, either by using Microsoft Dynamics Lifecycle Services (LCS) or manually.\n\n\n"}