{"nodes":[{"pos":[32,41],"content":"A Classes","needQuote":true,"needEscape":true,"nodes":[{"content":"A Classes","pos":[0,9]}]},{"pos":[55,103],"content":"System API classes that start with the letter A.","needQuote":true,"needEscape":true,"nodes":[{"content":"System API classes that start with the letter A.","pos":[0,48]}]},{"pos":[673,682],"content":"A Classes","linkify":"A Classes","nodes":[{"content":"A Classes","pos":[0,9]}]},{"content":"System API classes that start with the letter A.","pos":[684,732]},{"pos":[734,760],"content":"Class AbsoluteFieldBinding","linkify":"Class AbsoluteFieldBinding","nodes":[{"content":"Class AbsoluteFieldBinding","pos":[0,26]}]},{"pos":[846,853],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[859,867],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[873,880],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[884,890]},{"content":"Description","pos":[968,979]},{"content":"::public static AbsoluteFieldBinding construct(str fieldName, str tableName)","pos":[1184,1260]},{"content":"::public static AbsoluteFieldBinding create(container packedAbsoluteFieldBinding)","pos":[1334,1415]},{"content":"private void new()","pos":[1484,1502]},{"content":"Initializes a new instance of the AbsoluteFieldBinding class.","pos":[1568,1629]},{"pos":[1637,1653],"content":"Method construct","linkify":"Method construct","nodes":[{"content":"Method construct","pos":[0,16]}]},{"pos":[1740,1750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[1752,1761]},{"content":"tableName","pos":[1775,1784]},{"pos":[1793,1805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1811,1824],"content":"Method create","linkify":"Method create","nodes":[{"content":"Method create","pos":[0,13]}]},{"pos":[1916,1926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"packedAbsoluteFieldBinding","pos":[1928,1954]},{"pos":[1963,1975],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[1981,1991],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the AbsoluteFieldBinding class.","pos":[1993,2054]},{"pos":[2083,2097],"content":"Class AdObject","linkify":"Class AdObject","nodes":[{"content":"Class AdObject","pos":[0,14]}]},{"pos":[2137,2144],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2150,2158],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[2164,2171],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[2175,2181]},{"content":"Description","pos":[2212,2223]},{"content":"public boolean found()","pos":[2353,2375]},{"content":"public str getValue(str attribute)","pos":[2442,2476]},{"content":"public void new(str osUserName)","pos":[2531,2562]},{"content":"Initializes a new instance of the Object class.","pos":[2568,2615]},{"pos":[2623,2635],"content":"Method found","linkify":"Method found","nodes":[{"content":"Method found","pos":[0,12]}]},{"pos":[2670,2682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2688,2703],"content":"Method getValue","linkify":"Method getValue","nodes":[{"content":"Method getValue","pos":[0,15]}]},{"pos":[2750,2760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"attribute","pos":[2762,2771]},{"pos":[2780,2792],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2798,2808],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[2810,2857]},{"pos":[2901,2911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"osUserName","pos":[2913,2923]},{"pos":[2930,2973],"content":"Class AllowEncryptionKeyRetrievalPermission","linkify":"Class AllowEncryptionKeyRetrievalPermission","nodes":[{"content":"Class AllowEncryptionKeyRetrievalPermission","pos":[0,43]}]},{"pos":[3056,3063],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3069,3077],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[3083,3090],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[3094,3100]},{"content":"Description","pos":[3151,3162]},{"content":"public CodeAccessPermission copy()","pos":[3460,3494]},{"content":"Creates and returns a copy of a permission class object.","pos":[3517,3573]},{"content":"public boolean isSubsetOf(CodeAccessPermission target)","pos":[3643,3697]},{"content":"Determines whether a current permission is a subset of the specified permission when it is overridden by a derived class.","pos":[3700,3821]},{"content":"public void new()","pos":[3826,3843]},{"content":"Initializes a new instance of the AllowEncryptionKeyRetrievalPermission class.","pos":[3883,3961]},{"pos":[4012,4023],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Creates and returns a copy of a permission class object.","pos":[4025,4081]},{"pos":[4128,4140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the derived class object.","pos":[4142,4177]},{"pos":[4184,4191],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method as part of the process of making an API more secure.","pos":[4193,4274]},{"content":"For more information, see ‘Securing an API that Executes on the Server Tier.’","pos":[4275,4352]},{"pos":[4358,4375],"content":"Method isSubsetOf","linkify":"Method isSubsetOf","nodes":[{"content":"Method isSubsetOf","pos":[0,17]}]},{"content":"Determines whether a current permission is a subset of the specified permission when it is overridden by a derived class.","pos":[4377,4498]},{"pos":[4565,4575],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[4577,4583]},{"content":"A CodeAccessPermission class object.","pos":[4586,4622]},{"pos":[4629,4641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a current permission is a subset of a specified permission; otherwise, false.","pos":[4643,4728]},{"pos":[4735,4742],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override the method as part of the process of making an API more secure.","pos":[4744,4824]},{"content":"For more information, see ‘Securing an API that Executes on the Server Tier.’","pos":[4825,4902]},{"pos":[4908,4918],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the AllowEncryptionKeyRetrievalPermission class.","pos":[4920,4998]},{"pos":[5026,5042],"content":"Class AOSLoadGen","linkify":"Class AOSLoadGen","nodes":[{"content":"Class AOSLoadGen","pos":[0,16]}]},{"pos":[5084,5091],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5097,5105],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[5111,5118],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[5122,5128]},{"content":"Description","pos":[5183,5194]},{"content":"public boolean spawnClass(ClassId classId, str parm)","pos":[5342,5394]},{"content":"public boolean spawnJob(UtilElementName jobName, str parm)","pos":[5452,5510]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>UserId user<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ClassId infoClass<ph id=\"ph4\">\\]</ph>)","pos":[5562,5617],"source":"public void new(\\[UserId user\\], \\[ClassId infoClass\\])"},{"content":"Creates an instance of the AOSLoadGen class.","pos":[5623,5667]},{"pos":[5675,5692],"content":"Method spawnClass","linkify":"Method spawnClass","nodes":[{"content":"Method spawnClass","pos":[0,17]}]},{"pos":[5757,5767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"classId","pos":[5769,5776]},{"content":"parm","pos":[5790,5794]},{"pos":[5803,5815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5821,5836],"content":"Method spawnJob","linkify":"Method spawnJob","nodes":[{"content":"Method spawnJob","pos":[0,15]}]},{"pos":[5907,5917],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"jobName","pos":[5919,5926]},{"content":"parm","pos":[5940,5944]},{"pos":[5953,5965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5971,5981],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates an instance of the AOSLoadGen class.","pos":[5983,6027]},{"pos":[6091,6101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"user","pos":[6103,6107]},{"content":"The information class that is used to create the instance of the AOSLoadGen class.","pos":[6110,6192]},{"content":"The default value is info.","pos":[6193,6219]},{"content":"infoClass","pos":[6231,6240]},{"content":"The information class that is used to create the instance of the AOSLoadGen class.","pos":[6243,6325]},{"content":"The default value is info.","pos":[6326,6352]},{"pos":[6359,6366],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Control of the input to the new method could be a security risk.","pos":[6368,6432]},{"content":"Therefore, this method runs under Code Access Security.","pos":[6433,6488]},{"content":"Calls to this method on the server require permission from the ExecutePermission class.","pos":[6489,6576]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[6577,6712]},{"pos":[6717,6737],"content":"Class AOSSessionInfo","linkify":"Class AOSSessionInfo","nodes":[{"content":"Class AOSSessionInfo","pos":[0,20]}]},{"content":"The AOSSessionInfo class is used to provide information about a session for Microsoft Dynamics 365 for Operations Application Object Server (AOS).","pos":[6779,6925]},{"pos":[6931,6938],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6944,6952],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[6958,6965],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[6969,6975]},{"content":"Description","pos":[7006,7017]},{"content":"public AOSClientMode clientMode()","pos":[7199,7232]},{"content":"Returns the client mode for the AOS session.","pos":[7236,7280]},{"content":"public int cpuTime()","pos":[7314,7334]},{"content":"Returns the number of milliseconds that the CPU uses for the AOS session.","pos":[7351,7424]},{"content":"public int idleTicks()","pos":[7429,7451]},{"content":"Returns the number of milliseconds since the last communication with AOS.","pos":[7466,7539]},{"content":"public int sessionId()","pos":[7544,7566]},{"content":"Returns the ID of the AOS session.","pos":[7581,7615]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>int sessionId<ph id=\"ph2\">\\]</ph>)","pos":[7659,7693],"source":"public void new(\\[int sessionId\\])"},{"content":"Creates an instance of the AOSSessionInfo class.","pos":[7696,7744]},{"pos":[7777,7794],"content":"Method clientMode","linkify":"Method clientMode","nodes":[{"content":"Method clientMode","pos":[0,17]}]},{"content":"Returns the client mode for the AOS session.","pos":[7796,7840]},{"pos":[7886,7898],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The client mode for the AOS session.","pos":[7900,7936]},{"pos":[7942,7956],"content":"Method cpuTime","linkify":"Method cpuTime","nodes":[{"content":"Method cpuTime","pos":[0,14]}]},{"content":"Returns the number of milliseconds that the CPU uses for the AOS session.","pos":[7958,8031]},{"pos":[8064,8076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of milliseconds that the CPU uses for the AOS session.","pos":[8078,8143]},{"pos":[8149,8165],"content":"Method idleTicks","linkify":"Method idleTicks","nodes":[{"content":"Method idleTicks","pos":[0,16]}]},{"content":"Returns the number of milliseconds since the last communication with AOS.","pos":[8167,8240]},{"pos":[8275,8287],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of milliseconds since the last communication with AOS.","pos":[8289,8354]},{"pos":[8360,8376],"content":"Method sessionId","linkify":"Method sessionId","nodes":[{"content":"Method sessionId","pos":[0,16]}]},{"content":"Returns the ID of the AOS session.","pos":[8378,8412]},{"pos":[8447,8459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the AOS session.","pos":[8461,8487]},{"pos":[8493,8503],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates an instance of the AOSSessionInfo class.","pos":[8505,8553]},{"pos":[8598,8608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sessionId","pos":[8610,8619]},{"content":"The session ID that is used to create the instance of the AOSSessionInfo class.","pos":[8622,8701]},{"content":"If a session ID is not specified, the current session is used; optional.","pos":[8702,8774]},{"pos":[8779,8802],"content":"Class AOTTableFieldList","linkify":"Class AOTTableFieldList","nodes":[{"content":"Class AOTTableFieldList","pos":[0,23]}]},{"content":"The AOTTableFieldList class represents the Fields node of a table and is also used to add fields to a table.","pos":[8849,8957]},{"pos":[8963,8970],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class lets you create, read, update, and delete X++ code and metadata.","pos":[8972,9047]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[9048,9158]},{"content":"The developer can obtain general information on the node by using other methods.","pos":[9159,9239]},{"pos":[9245,9253],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example adds a field of the enum type to the TutorialJournalName table.","pos":[9255,9340]},{"pos":[9623,9630],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[9634,9640]},{"content":"Description","pos":[9671,9682]},{"content":"public void addInteger(str name)","pos":[9884,9916]},{"content":"Adds a new field of the integer type to the list of fields for the current table.","pos":[9921,10002]},{"content":"public void addGuid(str name)","pos":[10009,10038]},{"content":"public void addContainer(str name)","pos":[10134,10168]},{"content":"Adds a new field of the container type to the list of fields for the current table.","pos":[10171,10254]},{"content":"public void addInt64(str name)","pos":[10259,10289]},{"content":"public void addDateTime(str name)","pos":[10384,10417]},{"content":"public void addDate(str name)","pos":[10509,10538]},{"content":"Adds a new field of the date type to the list of fields for the current table.","pos":[10546,10624]},{"content":"public void addString(str name)","pos":[10634,10665]},{"content":"Adds a new field of the string type to the list of fields for the current table.","pos":[10671,10751]},{"content":"public void addReal(str name)","pos":[10759,10788]},{"content":"Adds a new field of the real type to the list of fields for the current table.","pos":[10796,10874]},{"content":"public void addTime(str name)","pos":[10884,10913]},{"content":"Adds a new field of the time type to the list of fields for the current table.","pos":[10921,10999]},{"content":"public void addEnum(str name)","pos":[11009,11038]},{"content":"Adds a new field of the enum type to the list of fields for the current table.","pos":[11046,11124]},{"pos":[11137,11154],"content":"Method addInteger","linkify":"Method addInteger","nodes":[{"content":"Method addInteger","pos":[0,17]}]},{"content":"Adds a new field of the integer type to the list of fields for the current table.","pos":[11156,11237]},{"pos":[11282,11292],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[11294,11298]},{"content":"The name of the field to add.","pos":[11301,11330]},{"pos":[11337,11344],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique.","pos":[11346,11501]},{"content":"The developer must make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified.","pos":[11502,11636]},{"content":"You can use the AOTfindChild method to determine whether a field name is already being used.","pos":[11637,11729]},{"pos":[11736,11744],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example adds the NewInteger field, which is of the integer type, to the list of fields for the TutorialJournalName table.","pos":[11746,11886]},{"pos":[12102,12116],"content":"Method addGuid","linkify":"Method addGuid","nodes":[{"content":"Method addGuid","pos":[0,14]}]},{"pos":[12158,12168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[12170,12174]},{"pos":[12182,12201],"content":"Method addContainer","linkify":"Method addContainer","nodes":[{"content":"Method addContainer","pos":[0,19]}]},{"content":"Adds a new field of the container type to the list of fields for the current table.","pos":[12203,12286]},{"pos":[12333,12343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[12345,12349]},{"content":"The name of the field to add.","pos":[12352,12381]},{"pos":[12388,12395],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique.","pos":[12397,12552]},{"content":"The developer must make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified.","pos":[12553,12687]},{"content":"You can use the AOTfindChild method to determine whether a field name is already being used.","pos":[12688,12780]},{"pos":[12787,12795],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example adds the NewContainer and NewContainer1 fields, which are both of the container type, to the list of fields of the TutorialJournalName table.","pos":[12797,12965]},{"pos":[13245,13260],"content":"Method addInt64","linkify":"Method addInt64","nodes":[{"content":"Method addInt64","pos":[0,15]}]},{"pos":[13303,13313],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[13315,13319]},{"pos":[13327,13345],"content":"Method addDateTime","linkify":"Method addDateTime","nodes":[{"content":"Method addDateTime","pos":[0,18]}]},{"pos":[13391,13401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[13403,13407]},{"pos":[13415,13429],"content":"Method addDate","linkify":"Method addDate","nodes":[{"content":"Method addDate","pos":[0,14]}]},{"content":"Adds a new field of the date type to the list of fields for the current table.","pos":[13431,13509]},{"pos":[13551,13561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[13563,13567]},{"content":"The name of the field to add.","pos":[13570,13599]},{"pos":[13606,13613],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique.","pos":[13615,13770]},{"content":"The developer must make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified.","pos":[13771,13905]},{"content":"You can use the AOTfindChild method to determine whether a field name is already being used.","pos":[13906,13998]},{"pos":[14005,14013],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example adds the NewDate field, which is of the date type, to the list of fields for the TutorialJournalName table.","pos":[14015,14149]},{"pos":[14356,14372],"content":"Method addString","linkify":"Method addString","nodes":[{"content":"Method addString","pos":[0,16]}]},{"content":"Adds a new field of the string type to the list of fields for the current table.","pos":[14374,14454]},{"pos":[14498,14508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[14510,14514]},{"content":"The name of the field to add.","pos":[14517,14546]},{"pos":[14553,14560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique.","pos":[14562,14717]},{"content":"It is up to the developer to make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified.","pos":[14718,14862]},{"content":"You can use the AOTfindChild method to determine whether a field name is already being used.","pos":[14863,14955]},{"pos":[14962,14970],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example adds the NewString field, which is of the string type, to the list of fields for the TutorialJournalName table.","pos":[14972,15105]},{"pos":[15356,15370],"content":"Method addReal","linkify":"Method addReal","nodes":[{"content":"Method addReal","pos":[0,14]}]},{"content":"Adds a new field of the real type to the list of fields for the current table.","pos":[15372,15450]},{"pos":[15492,15502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[15504,15508]},{"content":"The name of the field to add.","pos":[15511,15540]},{"pos":[15547,15554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique.","pos":[15556,15711]},{"content":"It is up to the developer to make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified.","pos":[15712,15856]},{"content":"You can use the AOTfindChild method to determine whether a field name is already being used.","pos":[15857,15949]},{"pos":[15956,15964],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example adds the NewReal and NewReal1 fields, which is of the real type, to the list of fields for the TutorialJournalName table.","pos":[15966,16109]},{"pos":[16351,16365],"content":"Method addTime","linkify":"Method addTime","nodes":[{"content":"Method addTime","pos":[0,14]}]},{"content":"Adds a new field of the time type to the list of fields for the current table.","pos":[16367,16445]},{"pos":[16487,16497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[16499,16503]},{"content":"The name of the field to add.","pos":[16506,16535]},{"pos":[16542,16549],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique.","pos":[16551,16706]},{"content":"The developer must make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified.","pos":[16707,16841]},{"content":"You can use the AOTfindChild method to determine whether a field name is already being used.","pos":[16842,16934]},{"pos":[16941,16949],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example adds the NewTime field, which is of the time type, to the list of fields of the TutorialJournalName table.","pos":[16951,17084]},{"pos":[17291,17305],"content":"Method addEnum","linkify":"Method addEnum","nodes":[{"content":"Method addEnum","pos":[0,14]}]},{"content":"Adds a new field of the enum type to the list of fields for the current table.","pos":[17307,17385]},{"pos":[17427,17437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[17439,17443]},{"content":"The name of the field to add.","pos":[17446,17475]},{"pos":[17482,17489],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique.","pos":[17491,17646]},{"content":"It is up to the developer to make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified.","pos":[17647,17791]},{"content":"You can use the AOTfindChild method to determine whether a field name is already being used.","pos":[17792,17884]},{"pos":[17891,17899],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example adds the NewEnum field, which is of the enum type, to the list of fields of the TutorialJournalName table.","pos":[17901,18029]},{"pos":[18262,18295],"content":"Class ApplicationObjectTreeWindow","linkify":"Class ApplicationObjectTreeWindow","nodes":[{"content":"Class ApplicationObjectTreeWindow","pos":[0,33]}]},{"pos":[18354,18361],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18367,18375],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[18381,18388],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[18392,18398]},{"content":"Description","pos":[18434,18445]},{"content":"public str getSelectedNodeModelName()","pos":[18622,18659]},{"content":"public Set getSelectedNodes()","pos":[18737,18766]},{"content":"public Set getSelectedNodesPaths()","pos":[18852,18886]},{"content":"public boolean isSelectedNodeExpanded()","pos":[18967,19006]},{"content":"private void new()","pos":[19082,19100]},{"content":"Initializes a new instance of the ApplicationObjectTreeWindow class.","pos":[19124,19192]},{"pos":[19200,19231],"content":"Method getSelectedNodeModelName","linkify":"Method getSelectedNodeModelName","nodes":[{"content":"Method getSelectedNodeModelName","pos":[0,31]}]},{"pos":[19281,19293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19299,19322],"content":"Method getSelectedNodes","linkify":"Method getSelectedNodes","nodes":[{"content":"Method getSelectedNodes","pos":[0,23]}]},{"pos":[19364,19376],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19382,19410],"content":"Method getSelectedNodesPaths","linkify":"Method getSelectedNodesPaths","nodes":[{"content":"Method getSelectedNodesPaths","pos":[0,28]}]},{"pos":[19457,19469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19475,19504],"content":"Method isSelectedNodeExpanded","linkify":"Method isSelectedNodeExpanded","nodes":[{"content":"Method isSelectedNodeExpanded","pos":[0,29]}]},{"pos":[19556,19568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19574,19584],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the ApplicationObjectTreeWindow class.","pos":[19586,19654]},{"pos":[19683,19694],"content":"Class Array","linkify":"Class Array","nodes":[{"content":"Class Array","pos":[0,11]}]},{"pos":[19731,19738],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Arrays can hold values of any single type, such as objects and records (contrary to the array data type that is built into the X++ language).","pos":[19740,19881]},{"content":"Objects of this type can be transferred to functions and methods.","pos":[19882,19947]},{"content":"The values are stored sequentially.","pos":[19948,19983]},{"content":"The arrays expand as required.","pos":[19984,20014]},{"content":"Therefore, no specific dimension of the array is supplied.","pos":[20015,20073]},{"pos":[20079,20087],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates an array of classes and adds three query objects to the array.","pos":[20089,20181]},{"pos":[20467,20474],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[20478,20484]},{"content":"Description","pos":[20532,20543]},{"content":"public str definitionString()","pos":[20794,20823]},{"content":"Returns a string that contains the definition of the array.","pos":[20848,20907]},{"content":"public boolean exists(int index)","pos":[20952,20984]},{"content":"Determines whether a particular array element is valid.","pos":[21006,21061]},{"content":"public int lastIndex()","pos":[21110,21132]},{"content":"Retrieves the highest index that is used to store a value in the array.","pos":[21164,21235]},{"content":"public container pack()","pos":[21268,21291]},{"content":"Serializes the current instance of the Array class.","pos":[21322,21373]},{"content":"public str toString()","pos":[21426,21447]},{"content":"Returns a string that describes the contents of the array.","pos":[21480,21538]},{"content":"public Types typeId()","pos":[21584,21605]},{"content":"Returns the data type of the values in the array.","pos":[21638,21687]},{"content":"public AnyType value(int index, <ph id=\"ph1\">\\[</ph>AnyType arg<ph id=\"ph2\">\\]</ph>)","pos":[21742,21790],"source":"public AnyType value(int index, \\[AnyType arg\\])"},{"content":"Gets or sets the value of the array element that is stored at the specified index.","pos":[21796,21878]},{"content":"public str xml(<ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[21900,21930],"source":"public str xml(\\[int indent\\])"},{"content":"Returns an XML string that represents the current object.","pos":[21954,22011]},{"content":"::public static Array create(container container)","pos":[22058,22107]},{"content":"Creates an array from the container that is obtained from a previous call to the Array.pack method.","pos":[22112,22211]},{"content":"::public static Array createFromXML(Object xmlnode)","pos":[22216,22267]},{"content":"public void new(Types Type)","pos":[22374,22401]},{"content":"Creates an array in which each element has the specified type.","pos":[22428,22490]},{"pos":[22535,22558],"content":"Method definitionString","linkify":"Method definitionString","nodes":[{"content":"Method definitionString","pos":[0,23]}]},{"content":"Returns a string that contains the definition of the array.","pos":[22560,22619]},{"pos":[22661,22673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the definition of the array.","pos":[22675,22726]},{"pos":[22733,22741],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates an array of classes and then adds three query objects to the array.","pos":[22743,22840]},{"content":"It uses the definitionString method to print a definition of the array.","pos":[22841,22912]},{"pos":[23164,23177],"content":"Method exists","linkify":"Method exists","nodes":[{"content":"Method exists","pos":[0,13]}]},{"content":"Determines whether a particular array element is valid.","pos":[23179,23234]},{"pos":[23279,23289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[23291,23296]},{"content":"The array element to test.","pos":[23299,23325]},{"pos":[23332,23344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the array element that is pointed to by the index is valid; otherwise, false.","pos":[23346,23431]},{"pos":[23438,23446],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the exists method to test whether various elements in an array are valid.","pos":[23448,23548]},{"pos":[24228,24244],"content":"Method lastIndex","linkify":"Method lastIndex","nodes":[{"content":"Method lastIndex","pos":[0,16]}]},{"content":"Retrieves the highest index that is used to store a value in the array.","pos":[24246,24317]},{"pos":[24352,24364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that represents the highest index that is used to store a value.","pos":[24366,24441]},{"pos":[24448,24456],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the lastIndex method to find the last element in the array and then add a new value after this element.","pos":[24458,24588]},{"pos":[24854,24865],"content":"Method pack","linkify":"Method pack","nodes":[{"content":"Method pack","pos":[0,11]}]},{"content":"Serializes the current instance of the Array class.","pos":[24867,24918]},{"pos":[24954,24966],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that contains the current instance of the Array class.","pos":[24968,25034]},{"pos":[25041,25048],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The container created by this method contains three elements before the first element from the array:","pos":[25050,25151]},{"content":"A version number for the container.","pos":[25157,25192]},{"content":"An integer that identifies the data type of the array elements.","pos":[25197,25260]},{"content":"The number of elements in the array.","pos":[25265,25301]},{"content":"If the values of the array are objects, the pack method is called on each object to yield a subcontainer.","pos":[25303,25408]},{"pos":[25415,25423],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates an array of integers and adds some values to it.","pos":[25425,25503]},{"content":"The pack method is used to pack the array into a container, and the container is then used to create a new array.","pos":[25504,25617]},{"pos":[26285,26300],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that describes the contents of the array.","pos":[26302,26360]},{"pos":[26394,26406],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that describes the contents of the array.","pos":[26408,26458]},{"pos":[26465,26473],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates an array of integers and adds some values to it.","pos":[26475,26553]},{"content":"The toString method is used to print the values that the array holds.","pos":[26554,26623]},{"pos":[27088,27101],"content":"Method typeId","linkify":"Method typeId","nodes":[{"content":"Method typeId","pos":[0,13]}]},{"content":"Returns the data type of the values in the array.","pos":[27103,27152]},{"pos":[27186,27198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The data type of the elements in the array.","pos":[27200,27243]},{"pos":[27250,27257],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type remains the same throughout the life of the array.","pos":[27259,27318]},{"content":"The type is specified when the array is created.","pos":[27319,27367]},{"pos":[27374,27382],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example tests whether a particular array element exists.","pos":[27384,27454]},{"content":"If it does not exist, the typeId method is used to specify the type of the new value that should be added to the array.","pos":[27455,27574]},{"pos":[27804,27816],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"content":"Gets or sets the value of the array element that is stored at the specified index.","pos":[27818,27900]},{"pos":[27959,27969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[27971,27976]},{"content":"The value to assign to the array element at the specified offset; optional.","pos":[27979,28054]},{"content":"arg","pos":[28066,28069]},{"content":"The value to assign to the array element at the specified offset; optional.","pos":[28072,28147]},{"pos":[28154,28166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that is stored at the specified offset.","pos":[28168,28217]},{"pos":[28224,28231],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The return type is the same as the type of the array.","pos":[28233,28286]},{"content":"If an attempt is made to read a value at an index that is beyond the last index that has a value, an exception is thrown.","pos":[28287,28408]},{"content":"If a value is written to a nonexistent location, all locations between the previous element and the nonexistent location are filled with default values, and the array is expanded.","pos":[28409,28588]},{"pos":[28595,28603],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates an array of integers and then uses the value method to add some values to the array.","pos":[28605,28719]},{"content":"It then uses the value method to get the values that are stored in the array and test them.","pos":[28720,28811]},{"pos":[29268,29278],"content":"Method xml","linkify":"Method xml","nodes":[{"content":"Method xml","pos":[0,10]}]},{"content":"Returns an XML string that represents the current object.","pos":[29280,29337]},{"pos":[29378,29388],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"indent","pos":[29390,29396]},{"content":"The amount of indentation of the returned XML string; optional.","pos":[29399,29462]},{"pos":[29469,29481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An XML string that represents the current object.","pos":[29483,29532]},{"pos":[29539,29546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be overridden to return values that are meaningful for a particular type.","pos":[29548,29637]},{"pos":[29643,29656],"content":"Method create","linkify":"Method create","nodes":[{"content":"Method create","pos":[0,13]}]},{"content":"Creates an array from the container that is obtained from a previous call to the Array.pack method.","pos":[29658,29757]},{"pos":[29817,29827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[29829,29838]},{"content":"A container that is created by using the Array.pack method.","pos":[29841,29900]},{"content":"The container is unpacked to create an array.","pos":[29901,29946]},{"pos":[29953,29965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An array that holds the contents of the specified container.","pos":[29967,30027]},{"pos":[30034,30041],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the values in the array are objects, the objects must have an Array.unpack method that is called to reestablish their internal state from a container.","pos":[30043,30196]},{"pos":[30203,30211],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates an array and adds two sets to it.","pos":[30213,30276]},{"content":"The array is packed and then used to create a new array.","pos":[30277,30333]},{"pos":[31344,31364],"content":"Method createFromXML","linkify":"Method createFromXML","nodes":[{"content":"Method createFromXML","pos":[0,20]}]},{"pos":[31426,31436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"xmlnode","pos":[31438,31445]},{"pos":[31454,31466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31472,31482],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates an array in which each element has the specified type.","pos":[31484,31546]},{"pos":[31586,31596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Type","pos":[31598,31602]},{"content":"The data type of the array elements.","pos":[31605,31641]},{"pos":[31648,31655],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible values are those that are available for the Types system enumeration:","pos":[31657,31739]},{"content":"AnyType","pos":[31745,31752]},{"content":"BLOB","pos":[31757,31761]},{"content":"Class","pos":[31766,31771]},{"content":"Container","pos":[31776,31785]},{"content":"Date","pos":[31790,31794]},{"content":"DateTime","pos":[31799,31807]},{"content":"Enum","pos":[31812,31816]},{"content":"Guid","pos":[31821,31825]},{"content":"Int64","pos":[31830,31835]},{"content":"Integer","pos":[31840,31847]},{"pos":[31854,31862],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates an array of integers.","pos":[31864,31915]},{"pos":[31969,31982],"content":"Class AsciiIo","linkify":"Class AsciiIo","nodes":[{"content":"Class AsciiIo","pos":[0,13]}]},{"content":"The AsciiIo class provides functionality for reading and writing ASCII files.","pos":[32018,32095]},{"pos":[32101,32108],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The TextIo class provides functionality for reading and writing files that use various code pages.","pos":[32110,32208]},{"content":"The AsciiIO class supports only ANSI code page (ACP) characters.","pos":[32209,32273]},{"content":"Existing code that uses the AsciiIO class must be converted to use the TextIO class if the file contains non-ACP characters, or if it is a file that is used only in Microsoft Dynamics 365 for Operations, such as an .xpo file.","pos":[32274,32499]},{"pos":[32505,32513],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[32519,32526],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[32530,32536]},{"content":"Description","pos":[32577,32588]},{"content":"public str inFieldDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[32890,32932],"source":"public str inFieldDelimiter(\\[str value\\])"},{"content":"Sets or retrieves the character that is used as the field delimiter of an input file that is represented by an AsciiIO object.","pos":[32937,33063]},{"content":"public str inRecordDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[33070,33113],"source":"public str inRecordDelimiter(\\[str value\\])"},{"content":"Sets or retrieves the character that is used as the record delimiter of an input file that is represented by an AsciiIO object.","pos":[33117,33244]},{"content":"public int inRecordLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33250,33290],"source":"public int inRecordLength(\\[int value\\])"},{"content":"Sets or retrieves the record length for an input file.","pos":[33297,33351]},{"content":"public str outFieldDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[33430,33473],"source":"public str outFieldDelimiter(\\[str value\\])"},{"content":"Sets or retrieves the character that is used as the field delimiter of an output file that is represented by an AsciiIO object.","pos":[33477,33604]},{"content":"public str outRecordDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[33610,33654],"source":"public str outRecordDelimiter(\\[str value\\])"},{"content":"Sets or retrieves the character that is used as the record delimiter of an output file that is represented by an AsciiIO object.","pos":[33657,33785]},{"content":"public container read()","pos":[33790,33813]},{"content":"Reads the next full record from the Io object.","pos":[33837,33883]},{"content":"public IO<ph id=\"ph1\">\\_</ph>Status status()","pos":[33970,33996],"source":"public IO\\_Status status()"},{"content":"Returns the status of the last operation on the file.","pos":[34017,34070]},{"content":"public boolean write(VarArg values)","pos":[34150,34185]},{"content":"Writes values of a simple type.","pos":[34197,34228]},{"content":"public boolean writeChar(int int)","pos":[34330,34363]},{"content":"public boolean writeExp(container data)","pos":[34510,34549]},{"content":"Writes the content of a container to a file.","pos":[34557,34601]},{"content":"public boolean writeRaw(str data)","pos":[34690,34723]},{"content":"public void finalize()","pos":[34870,34892]},{"content":"Closes the file and then flushes the file buffers to disk.","pos":[34917,34975]},{"content":"public void new(str filename, str mode)","pos":[35050,35089]},{"content":"Creates an instance of the AsciiIo class.","pos":[35097,35138]},{"pos":[35233,35256],"content":"Method inFieldDelimiter","linkify":"Method inFieldDelimiter","nodes":[{"content":"Method inFieldDelimiter","pos":[0,23]}]},{"content":"Sets or retrieves the character that is used as the field delimiter of an input file that is represented by an AsciiIO object.","pos":[35258,35384]},{"pos":[35437,35447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35449,35454]},{"content":"The character to assign as the field delimiter.","pos":[35457,35504]},{"pos":[35511,35523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character that is used as the field delimiter.","pos":[35525,35575]},{"pos":[35581,35605],"content":"Method inRecordDelimiter","linkify":"Method inRecordDelimiter","nodes":[{"content":"Method inRecordDelimiter","pos":[0,24]}]},{"content":"Sets or retrieves the character that is used as the record delimiter of an input file that is represented by an AsciiIO object.","pos":[35607,35734]},{"pos":[35788,35798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35800,35805]},{"content":"The character to assign as the record delimiter.","pos":[35808,35856]},{"pos":[35863,35875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character that is used as the record delimiter.","pos":[35877,35928]},{"pos":[35935,35942],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For standard text, the delimiter is a newline character.","pos":[35944,36000]},{"pos":[36006,36027],"content":"Method inRecordLength","linkify":"Method inRecordLength","nodes":[{"content":"Method inRecordLength","pos":[0,21]}]},{"content":"Sets or retrieves the record length for an input file.","pos":[36029,36083]},{"pos":[36134,36144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36146,36151]},{"content":"The value to assign as the record length for the input file.","pos":[36154,36214]},{"pos":[36221,36233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The record length for the input file.","pos":[36235,36272]},{"pos":[36279,36286],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For files that have a fixed-length format, use the inRecordLength property to guarantee that no more than the specified number of characters is read for each record.","pos":[36288,36453]},{"content":"If the record format is overruled by a specified inRecordDelimiter property value (in other words, if the inRecordDelimiter value is met before the fixed length is read), the record is accepted, and no more data is read.","pos":[36454,36674]},{"content":"To make sure that a fixed number of characters is read, set the inRecordDelimiter property value to an empty string.","pos":[36675,36791]},{"content":"When no inRecordDelimiter property value is found, the inRecordDelimiter property value is the maximum limit of characters to read.","pos":[36792,36923]},{"content":"Set the inRecordDelimiter property value to 0 (zero) to disable the check of the record length.","pos":[36924,37019]},{"pos":[37025,37049],"content":"Method outFieldDelimiter","linkify":"Method outFieldDelimiter","nodes":[{"content":"Method outFieldDelimiter","pos":[0,24]}]},{"content":"Sets or retrieves the character that is used as the field delimiter of an output file that is represented by an AsciiIO object.","pos":[37051,37178]},{"pos":[37232,37242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37244,37249]},{"content":"The character to assign as the field delimiter.","pos":[37252,37299]},{"pos":[37306,37318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character that is used as the field delimiter.","pos":[37320,37370]},{"pos":[37376,37401],"content":"Method outRecordDelimiter","linkify":"Method outRecordDelimiter","nodes":[{"content":"Method outRecordDelimiter","pos":[0,25]}]},{"content":"Sets or retrieves the character that is used as the record delimiter of an output file that is represented by an AsciiIO object.","pos":[37403,37531]},{"pos":[37586,37596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37598,37603]},{"content":"The character to assign as the record delimiter.","pos":[37606,37654]},{"pos":[37661,37673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character that is used as the record delimiter.","pos":[37675,37726]},{"pos":[37733,37740],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For standard text files, the delimiter is a newline character.","pos":[37742,37804]},{"pos":[37810,37821],"content":"Method read","linkify":"Method read","nodes":[{"content":"Method read","pos":[0,11]}]},{"content":"Reads the next full record from the Io object.","pos":[37823,37869]},{"pos":[37905,37917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The next full record from the Io object.","pos":[37919,37959]},{"pos":[37966,37973],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The definition of the next full record is controlled by the following properties: inFieldDelimiter, inRecordDelimiter, and inRecordLength.","pos":[37975,38113]},{"content":"The record is returned as a container.","pos":[38114,38152]},{"content":"Each entry in the container represents one field in the record.","pos":[38153,38216]},{"content":"Each of the specialized Io classes has default settings for inFieldDelimiter, inRecordDelimiter, and inRecordLength.","pos":[38217,38333]},{"content":"These settings allow for input and output of the most common formats.","pos":[38334,38403]},{"content":"However, you might have to adjust these settings to support the desired format.","pos":[38404,38483]},{"pos":[38489,38502],"content":"Method status","linkify":"Method status","nodes":[{"content":"Method status","pos":[0,13]}]},{"content":"Returns the status of the last operation on the file.","pos":[38504,38557]},{"pos":[38595,38607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status of the last file operation.","pos":[38609,38647]},{"pos":[38653,38665],"content":"Method write","linkify":"Method write","nodes":[{"content":"Method write","pos":[0,12]}]},{"content":"Writes values of a simple type.","pos":[38667,38698]},{"pos":[38746,38756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"values","pos":[38758,38764]},{"content":"One or more values, each of a simple type, separated by a field delimiter.","pos":[38767,38841]},{"content":"The simple types are string, integer, real, enum, and date.","pos":[38842,38901]},{"pos":[38908,38920],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the write operation succeeds; otherwise, false.","pos":[38922,38977]},{"content":"If the write operation fails, you can check the status to learn the cause.","pos":[38978,39052]},{"pos":[39059,39066],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method accepts a variable number of arguments.","pos":[39068,39118]},{"content":"Each value that is specified is put into the output record as a field: the first argument as the first field, the second argument as the second field, and so on.","pos":[39119,39280]},{"content":"Fields are separated by the delimiter that is specified in the outFieldDelimiter method.","pos":[39281,39369]},{"content":"Records are separated by the delimiter that is specified in the outRecordDelimiter method.","pos":[39370,39460]},{"content":"To write complete containers, use the writeExp method.","pos":[39461,39515]},{"pos":[39521,39537],"content":"Method writeChar","linkify":"Method writeChar","nodes":[{"content":"Method writeChar","pos":[0,16]}]},{"pos":[39583,39593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"int","pos":[39595,39598]},{"pos":[39607,39619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39625,39640],"content":"Method writeExp","linkify":"Method writeExp","nodes":[{"content":"Method writeExp","pos":[0,15]}]},{"content":"Writes the content of a container to a file.","pos":[39642,39686]},{"pos":[39738,39748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[39750,39754]},{"content":"The container that holds data for the record.","pos":[39757,39802]},{"pos":[39809,39821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the operation succeeds; otherwise, false.","pos":[39823,39872]},{"content":"If the operation fails, check the status to learn the cause.","pos":[39873,39933]},{"pos":[39940,39947],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The entries in the container are treated as fields.","pos":[39949,40000]},{"content":"The container is treated as a full record.","pos":[40001,40043]},{"content":"Fields are separated by the delimiter that is specified in the outFieldDelimiter method.","pos":[40044,40132]},{"content":"Records are separated by the delimiter that is specified in the outRecordDelimiter method.","pos":[40133,40223]},{"pos":[40229,40244],"content":"Method writeRaw","linkify":"Method writeRaw","nodes":[{"content":"Method writeRaw","pos":[0,15]}]},{"pos":[40290,40300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[40302,40306]},{"pos":[40315,40327],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40333,40348],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"content":"Closes the file and then flushes the file buffers to disk.","pos":[40350,40408]},{"pos":[40443,40450],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An AsciiIo object is usually finalized after its scope has ended.","pos":[40452,40517]},{"content":"This method is not usually called directly.","pos":[40518,40561]},{"content":"Output that is written to the file is not valid until the AsciiIo object is finalized.","pos":[40562,40648]},{"pos":[40654,40664],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates an instance of the AsciiIo class.","pos":[40666,40707]},{"pos":[40759,40769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[40771,40779]},{"content":"The mode to use to create this instance of the AsciiIo class.","pos":[40782,40843]},{"content":"mode","pos":[40855,40859]},{"content":"The mode to use to create this instance of the AsciiIo class.","pos":[40862,40923]},{"pos":[40930,40937],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an attacker can control input to the new method, a security risk exists.","pos":[40939,41014]},{"content":"Therefore, this method runs under Code Access Security.","pos":[41015,41070]},{"content":"Calls to this method on the server require permission from the FileIOPermission class.","pos":[41071,41157]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[41158,41293]},{"pos":[41300,41308],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the AsciiIo class to read from a text file.","pos":[41310,41380]},{"pos":[42165,42192],"content":"Class AssemblyDeployManager","linkify":"Class AssemblyDeployManager","nodes":[{"content":"Class AssemblyDeployManager","pos":[0,27]}]},{"content":"The AssemblyDeployManager class lets you deploy the assemblies that are stored in the AOT Visual Studio Projects to the AOS VSAssemblies folder that can be used by the X++ runtime during .NET calls.","pos":[42241,42439]},{"pos":[42445,42452],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[42458,42466],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[42472,42479],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[42483,42489]},{"content":"Description","pos":[42547,42558]},{"content":"::public static boolean isHotswappingEnabled()","pos":[42827,42873]},{"content":"Returns a Boolean value that indicates whether hot swapping is enabled.","pos":[42891,42962]},{"content":"::public static void deployAssemblyFromPath(str assemblyPath)","pos":[42999,43060]},{"content":"::public static void removeAssemblyFromPath(str assemblyPath)","pos":[43171,43232]},{"content":"Removes one specific assembly that is marked for deployment to the server from the VSAssemblies folder.","pos":[43235,43338]},{"content":"::public static void deployAssemblies()","pos":[43343,43382]},{"content":"Deploys one specific assembly that is marked for deployment to server to the VSAssemblies folder.","pos":[43407,43504]},{"pos":[43518,43545],"content":"Method isHotswappingEnabled","linkify":"Method isHotswappingEnabled","nodes":[{"content":"Method isHotswappingEnabled","pos":[0,27]}]},{"content":"Returns a Boolean value that indicates whether hot swapping is enabled.","pos":[43547,43618]},{"pos":[43675,43687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether hot swapping is enabled.","pos":[43689,43752]},{"pos":[43758,43787],"content":"Method deployAssemblyFromPath","linkify":"Method deployAssemblyFromPath","nodes":[{"content":"Method deployAssemblyFromPath","pos":[0,29]}]},{"pos":[43859,43869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"assemblyPath","pos":[43871,43883]},{"pos":[43891,43920],"content":"Method removeAssemblyFromPath","linkify":"Method removeAssemblyFromPath","nodes":[{"content":"Method removeAssemblyFromPath","pos":[0,29]}]},{"content":"Removes one specific assembly that is marked for deployment to the server from the VSAssemblies folder.","pos":[43922,44025]},{"pos":[44097,44107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"assemblyPath","pos":[44109,44121]},{"content":"The Visual Studio Project path where the assembly is stored.","pos":[44124,44184]},{"pos":[44190,44213],"content":"Method deployAssemblies","linkify":"Method deployAssemblies","nodes":[{"content":"Method deployAssemblies","pos":[0,23]}]},{"content":"Deploys one specific assembly that is marked for deployment to server to the VSAssemblies folder.","pos":[44215,44312]},{"pos":[44360,44381],"content":"Class AsyncTaskResult","linkify":"Class AsyncTaskResult","nodes":[{"content":"Class AsyncTaskResult","pos":[0,21]}]},{"pos":[44428,44435],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44441,44449],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[44455,44462],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[44466,44472]},{"content":"Description","pos":[44553,44564]},{"content":"public container getResult()","pos":[44672,44700]},{"content":"public System.Exception getException()","pos":[44775,44813]},{"content":"public container getInfologData()","pos":[44878,44911]},{"content":"public container getAsyncState()","pos":[44981,45013]},{"content":"::public static AsyncTaskResult getAsyncTaskResult(System.Threading.Tasks.Task task)","pos":[45084,45168]},{"pos":[45190,45206],"content":"Method getResult","linkify":"Method getResult","nodes":[{"content":"Method getResult","pos":[0,16]}]},{"pos":[45247,45259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45265,45284],"content":"Method getException","linkify":"Method getException","nodes":[{"content":"Method getException","pos":[0,19]}]},{"pos":[45335,45347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45353,45374],"content":"Method getInfologData","linkify":"Method getInfologData","nodes":[{"content":"Method getInfologData","pos":[0,21]}]},{"pos":[45420,45432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45438,45458],"content":"Method getAsyncState","linkify":"Method getAsyncState","nodes":[{"content":"Method getAsyncState","pos":[0,20]}]},{"pos":[45503,45515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45521,45546],"content":"Method getAsyncTaskResult","linkify":"Method getAsyncTaskResult","nodes":[{"content":"Method getAsyncTaskResult","pos":[0,25]}]},{"pos":[45641,45651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"task","pos":[45653,45657]},{"pos":[45666,45678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45683,45714],"content":"Class AxaptaCOMConnectorMonitor","linkify":"Class AxaptaCOMConnectorMonitor","nodes":[{"content":"Class AxaptaCOMConnectorMonitor","pos":[0,31]}]},{"content":"Microsoft internal use only.","pos":[45767,45795]},{"pos":[45801,45808],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[45814,45822],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[45828,45835],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[45839,45845]},{"content":"Description","pos":[45884,45895]},{"content":"public int getBufferCount()","pos":[46071,46098]},{"content":"public str getCOMRegistration()","pos":[46187,46218]},{"content":"public int getContainerCount()","pos":[46303,46333]},{"content":"public int getLoggedOnAxaptaObjectCount()","pos":[46419,46460]},{"content":"public int getObjectCount()","pos":[46535,46562]},{"content":"public int getRecordCount()","pos":[46651,46678]},{"content":"public int getReferenceCount()","pos":[46767,46797]},{"content":"public boolean isAxaptaCOMConnector()","pos":[46883,46920]},{"content":"public boolean isAxaptaInternetConnector()","pos":[46999,47041]},{"content":"public void finalize()","pos":[47115,47137]},{"content":"Microsoftinternal use only.","pos":[47160,47187]},{"content":"public void new()","pos":[47231,47248]},{"content":"Initializes a new instance of the AxaptaCOMConnectorMonitor class.","pos":[47276,47342]},{"pos":[47350,47371],"content":"Method getBufferCount","linkify":"Method getBufferCount","nodes":[{"content":"Method getBufferCount","pos":[0,21]}]},{"pos":[47411,47423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47429,47454],"content":"Method getCOMRegistration","linkify":"Method getCOMRegistration","nodes":[{"content":"Method getCOMRegistration","pos":[0,25]}]},{"pos":[47498,47510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47516,47540],"content":"Method getContainerCount","linkify":"Method getContainerCount","nodes":[{"content":"Method getContainerCount","pos":[0,24]}]},{"pos":[47583,47595],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47601,47636],"content":"Method getLoggedOnAxaptaObjectCount","linkify":"Method getLoggedOnAxaptaObjectCount","nodes":[{"content":"Method getLoggedOnAxaptaObjectCount","pos":[0,35]}]},{"pos":[47690,47702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47708,47729],"content":"Method getObjectCount","linkify":"Method getObjectCount","nodes":[{"content":"Method getObjectCount","pos":[0,21]}]},{"pos":[47769,47781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47787,47808],"content":"Method getRecordCount","linkify":"Method getRecordCount","nodes":[{"content":"Method getRecordCount","pos":[0,21]}]},{"pos":[47848,47860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47866,47890],"content":"Method getReferenceCount","linkify":"Method getReferenceCount","nodes":[{"content":"Method getReferenceCount","pos":[0,24]}]},{"pos":[47933,47945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47951,47978],"content":"Method isAxaptaCOMConnector","linkify":"Method isAxaptaCOMConnector","nodes":[{"content":"Method isAxaptaCOMConnector","pos":[0,27]}]},{"pos":[48028,48040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48046,48078],"content":"Method isAxaptaInternetConnector","linkify":"Method isAxaptaInternetConnector","nodes":[{"content":"Method isAxaptaInternetConnector","pos":[0,32]}]},{"pos":[48133,48145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48151,48166],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"content":"Microsoftinternal use only.","pos":[48168,48195]},{"pos":[48229,48239],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the AxaptaCOMConnectorMonitor class.","pos":[48241,48307]}],"content":"---\n# required metadata\n\ntitle: A Classes\ndescription: System API classes that start with the letter A.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2016-02-12 18 - 13 - 52\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: a:2:{s:4:\"name\";s:22:\"Robin Reynolds-Haertle\";s:2:\"id\";s:0:\"\";}\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 47561\nms.assetid: 03d9d906-d683-47b4-8488-795173db2125\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# A Classes\n\nSystem API classes that start with the letter A.\n\nClass AbsoluteFieldBinding\n--------------------------\n\n    class AbsoluteFieldBinding extends FieldBinding\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                            | Description                                                   |\n|-----------------------------------------------------------------------------------|---------------------------------------------------------------|\n| ::public static AbsoluteFieldBinding construct(str fieldName, str tableName)      |                                                               |\n| ::public static AbsoluteFieldBinding create(container packedAbsoluteFieldBinding) |                                                               |\n| private void new()                                                                | Initializes a new instance of the AbsoluteFieldBinding class. |\n\n### Method construct\n\n    public static AbsoluteFieldBinding construct(str fieldName, str tableName)\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\ntableName  \n\n#### Return Value\n\n### Method create\n\n    public static AbsoluteFieldBinding create(container packedAbsoluteFieldBinding)\n\n#### Parameters\n\npackedAbsoluteFieldBinding  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the AbsoluteFieldBinding class.\n\n    private void new()\n\n## Class AdObject\n    class AdObject extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                             | Description                                     |\n|------------------------------------|-------------------------------------------------|\n| public boolean found()             |                                                 |\n| public str getValue(str attribute) |                                                 |\n| public void new(str osUserName)    | Initializes a new instance of the Object class. |\n\n### Method found\n\n    public boolean found()\n\n#### Return Value\n\n### Method getValue\n\n    public str getValue(str attribute)\n\n#### Parameters\n\nattribute  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(str osUserName)\n\n#### Parameters\n\nosUserName  \n\n## Class AllowEncryptionKeyRetrievalPermission\n    class AllowEncryptionKeyRetrievalPermission extends CodeAccessPermission\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                 | Description                                                                                                               |\n|--------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| public CodeAccessPermission copy()                     | Creates and returns a copy of a permission class object.                                                                  |\n| public boolean isSubsetOf(CodeAccessPermission target) | Determines whether a current permission is a subset of the specified permission when it is overridden by a derived class. |\n| public void new()                                      | Initializes a new instance of the AllowEncryptionKeyRetrievalPermission class.                                            |\n\n### Method copy\n\nCreates and returns a copy of a permission class object.\n\n    public CodeAccessPermission copy()\n\n#### Return Value\n\nA copy of the derived class object.\n\n#### Remarks\n\nYou can override this method as part of the process of making an API more secure. For more information, see ‘Securing an API that Executes on the Server Tier.’\n\n### Method isSubsetOf\n\nDetermines whether a current permission is a subset of the specified permission when it is overridden by a derived class.\n\n    public boolean isSubsetOf(CodeAccessPermission target)\n\n#### Parameters\n\ntarget  \nA CodeAccessPermission class object.\n\n#### Return Value\n\ntrue if a current permission is a subset of a specified permission; otherwise, false.\n\n#### Remarks\n\nYou can override the method as part of the process of making an API more secure. For more information, see ‘Securing an API that Executes on the Server Tier.’\n\n### Method new\n\nInitializes a new instance of the AllowEncryptionKeyRetrievalPermission class.\n\n    public void new()\n\n## Class AOSLoadGen\n    class AOSLoadGen extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                     | Description                                  |\n|------------------------------------------------------------|----------------------------------------------|\n| public boolean spawnClass(ClassId classId, str parm)       |                                              |\n| public boolean spawnJob(UtilElementName jobName, str parm) |                                              |\n| public void new(\\[UserId user\\], \\[ClassId infoClass\\])    | Creates an instance of the AOSLoadGen class. |\n\n### Method spawnClass\n\n    public boolean spawnClass(ClassId classId, str parm)\n\n#### Parameters\n\nclassId  \n\n<!-- -->\n\nparm  \n\n#### Return Value\n\n### Method spawnJob\n\n    public boolean spawnJob(UtilElementName jobName, str parm)\n\n#### Parameters\n\njobName  \n\n<!-- -->\n\nparm  \n\n#### Return Value\n\n### Method new\n\nCreates an instance of the AOSLoadGen class.\n\n    public void new([UserId user], [ClassId infoClass])\n\n#### Parameters\n\nuser  \nThe information class that is used to create the instance of the AOSLoadGen class. The default value is info.\n\n<!-- -->\n\ninfoClass  \nThe information class that is used to create the instance of the AOSLoadGen class. The default value is info.\n\n#### Remarks\n\nControl of the input to the new method could be a security risk. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the ExecutePermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n## Class AOSSessionInfo\n    class AOSSessionInfo extends Object\n\nThe AOSSessionInfo class is used to provide information about a session for Microsoft Dynamics 365 for Operations Application Object Server (AOS).\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                             | Description                                                               |\n|------------------------------------|---------------------------------------------------------------------------|\n| public AOSClientMode clientMode()  | Returns the client mode for the AOS session.                              |\n| public int cpuTime()               | Returns the number of milliseconds that the CPU uses for the AOS session. |\n| public int idleTicks()             | Returns the number of milliseconds since the last communication with AOS. |\n| public int sessionId()             | Returns the ID of the AOS session.                                        |\n| public void new(\\[int sessionId\\]) | Creates an instance of the AOSSessionInfo class.                          |\n\n### Method clientMode\n\nReturns the client mode for the AOS session.\n\n    public AOSClientMode clientMode()\n\n#### Return Value\n\nThe client mode for the AOS session.\n\n### Method cpuTime\n\nReturns the number of milliseconds that the CPU uses for the AOS session.\n\n    public int cpuTime()\n\n#### Return Value\n\nThe number of milliseconds that the CPU uses for the AOS session.\n\n### Method idleTicks\n\nReturns the number of milliseconds since the last communication with AOS.\n\n    public int idleTicks()\n\n#### Return Value\n\nThe number of milliseconds since the last communication with AOS.\n\n### Method sessionId\n\nReturns the ID of the AOS session.\n\n    public int sessionId()\n\n#### Return Value\n\nThe ID of the AOS session.\n\n### Method new\n\nCreates an instance of the AOSSessionInfo class.\n\n    public void new([int sessionId])\n\n#### Parameters\n\nsessionId  \nThe session ID that is used to create the instance of the AOSSessionInfo class. If a session ID is not specified, the current session is used; optional.\n\n## Class AOTTableFieldList\n    class AOTTableFieldList extends TreeNode\n\nThe AOTTableFieldList class represents the Fields node of a table and is also used to add fields to a table.\n\n### Remarks\n\nThis class lets you create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before this API is called. The developer can obtain general information on the node by using other methods.\n\n### Examples\n\nThe following example adds a field of the enum type to the TutorialJournalName table.\n\n    { \n        AOTTableFieldList tfl = infolog.findNode( \n            '\\\\Data Dictionary\\\\Tables\\\\TutorialJournalName\\\\Fields'); \n     \n         if (!tfl.AOTFindChild('NewEnum')) \n         { \n             tfl.addEnum('NewEnum');  // Adds the field NewEnum. \n         } \n    }\n\n### Methods\n\n| Method                             | Description                                                                         |\n|------------------------------------|-------------------------------------------------------------------------------------|\n| public void addInteger(str name)   | Adds a new field of the integer type to the list of fields for the current table.   |\n| public void addGuid(str name)      |                                                                                     |\n| public void addContainer(str name) | Adds a new field of the container type to the list of fields for the current table. |\n| public void addInt64(str name)     |                                                                                     |\n| public void addDateTime(str name)  |                                                                                     |\n| public void addDate(str name)      | Adds a new field of the date type to the list of fields for the current table.      |\n| public void addString(str name)    | Adds a new field of the string type to the list of fields for the current table.    |\n| public void addReal(str name)      | Adds a new field of the real type to the list of fields for the current table.      |\n| public void addTime(str name)      | Adds a new field of the time type to the list of fields for the current table.      |\n| public void addEnum(str name)      | Adds a new field of the enum type to the list of fields for the current table.      |\n\n### Method addInteger\n\nAdds a new field of the integer type to the list of fields for the current table.\n\n    public void addInteger(str name)\n\n#### Parameters\n\nname  \nThe name of the field to add.\n\n#### Remarks\n\nIf the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique. The developer must make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified. You can use the AOTfindChild method to determine whether a field name is already being used.\n\n#### Examples\n\nThe following code example adds the NewInteger field, which is of the integer type, to the list of fields for the TutorialJournalName table.\n\n    AOTTableFieldList tfl = infolog.findNode( \n        '\\\\Data Dictionary\\\\Tables\\\\TutorialJournalName\\\\Fields'); \n    if (!tfl.AOTFindChild('NewInteger')) \n    { \n        tfl.addInteger('NewInteger'); \n    }\n\n### Method addGuid\n\n    public void addGuid(str name)\n\n#### Parameters\n\nname  \n\n### Method addContainer\n\nAdds a new field of the container type to the list of fields for the current table.\n\n    public void addContainer(str name)\n\n#### Parameters\n\nname  \nThe name of the field to add.\n\n#### Remarks\n\nIf the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique. The developer must make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified. You can use the AOTfindChild method to determine whether a field name is already being used.\n\n#### Examples\n\nThe following code example adds the NewContainer and NewContainer1 fields, which are both of the container type, to the list of fields of the TutorialJournalName table.\n\n    AOTTableFieldList tfl = infolog.findNode( \n        '\\\\Data Dictionary\\\\Tables\\\\TutorialJournalName\\\\Fields'); \n     \n    // Add a NewContainer field. \n    tfl.addContainer('NewContainer'); \n     \n    // Add a NewContainer1 field. \n    tfl.addContainer('NewContainer');\n\n### Method addInt64\n\n    public void addInt64(str name)\n\n#### Parameters\n\nname  \n\n### Method addDateTime\n\n    public void addDateTime(str name)\n\n#### Parameters\n\nname  \n\n### Method addDate\n\nAdds a new field of the date type to the list of fields for the current table.\n\n    public void addDate(str name)\n\n#### Parameters\n\nname  \nThe name of the field to add.\n\n#### Remarks\n\nIf the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique. The developer must make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified. You can use the AOTfindChild method to determine whether a field name is already being used.\n\n#### Examples\n\nThe following code example adds the NewDate field, which is of the date type, to the list of fields for the TutorialJournalName table.\n\n    AOTTableFieldList tfl = infolog.findNode( \n        '\\\\Data Dictionary\\\\Tables\\\\TutorialJournalName\\\\Fields'); \n    if (!tfl.AOTFindChild('NewDate')) \n    { \n        tfl.addDate('NewDate'); \n    }\n\n### Method addString\n\nAdds a new field of the string type to the list of fields for the current table.\n\n    public void addString(str name)\n\n#### Parameters\n\nname  \nThe name of the field to add.\n\n#### Remarks\n\nIf the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique. It is up to the developer to make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified. You can use the AOTfindChild method to determine whether a field name is already being used.\n\n#### Examples\n\nThe following example adds the NewString field, which is of the string type, to the list of fields for the TutorialJournalName table.\n\n    { \n        AOTTableFieldList tfl = infolog.findNode( \n            '\\\\Data Dictionary\\\\Tables\\\\TutorialJournalName\\\\Fields'); \n        if (!tfl.AOTFindChild('NewString')) \n        { \n            tfl.addString('NewString'); \n        } \n    }\n\n### Method addReal\n\nAdds a new field of the real type to the list of fields for the current table.\n\n    public void addReal(str name)\n\n#### Parameters\n\nname  \nThe name of the field to add.\n\n#### Remarks\n\nIf the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique. It is up to the developer to make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified. You can use the AOTfindChild method to determine whether a field name is already being used.\n\n#### Examples\n\nThe following example adds the NewReal and NewReal1 fields, which is of the real type, to the list of fields for the TutorialJournalName table.\n\n    AOTTableFieldList tfl = infolog.findNode( \n        '\\\\Data Dictionary\\\\Tables\\\\TutorialJournalName\\\\Fields'); \n    // Add the field NewReal. \n    tfl.addReal('NewReal'); \n    // Add the field NewReal1. \n    tfl.addReal('NewReal');\n\n### Method addTime\n\nAdds a new field of the time type to the list of fields for the current table.\n\n    public void addTime(str name)\n\n#### Parameters\n\nname  \nThe name of the field to add.\n\n#### Remarks\n\nIf the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique. The developer must make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified. You can use the AOTfindChild method to determine whether a field name is already being used.\n\n#### Examples\n\nThe following code example adds the NewTime field, which is of the time type, to the list of fields of the TutorialJournalName table.\n\n    AOTTableFieldList tfl = infolog.findNode( \n        '\\\\Data Dictionary\\\\Tables\\\\TutorialJournalName\\\\Fields'); \n    if (!tfl.AOTFindChild('NewTime')) \n    { \n        tfl.addTime('NewTime'); \n    }\n\n### Method addEnum\n\nAdds a new field of the enum type to the list of fields for the current table.\n\n    public void addEnum(str name)\n\n#### Parameters\n\nname  \nThe name of the field to add.\n\n#### Remarks\n\nIf the supplied name coincides with an existing field in the field list, an integer is appended to the name of the new field to make the field name unique. It is up to the developer to make sure that the name is not a reserved word; the method will not throw an error if a reserved word is specified. You can use the AOTfindChild method to determine whether a field name is already being used.\n\n#### Examples\n\nThe following example adds the NewEnum field, which is of the enum type, to the list of fields of the TutorialJournalName table.\n\n    AOTTableFieldList tfl = infolog.findNode( \n        '\\\\Data Dictionary\\\\Tables\\\\TutorialJournalName\\\\Fields'); \n    if (!tfl.AOTFindChild('NewEnum')) \n    { \n        tfl.addEnum('NewEnum');  // adds the field NewEnum \n    }\n\n## Class ApplicationObjectTreeWindow\n    class ApplicationObjectTreeWindow extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                  | Description                                                          |\n|-----------------------------------------|----------------------------------------------------------------------|\n| public str getSelectedNodeModelName()   |                                                                      |\n| public Set getSelectedNodes()           |                                                                      |\n| public Set getSelectedNodesPaths()      |                                                                      |\n| public boolean isSelectedNodeExpanded() |                                                                      |\n| private void new()                      | Initializes a new instance of the ApplicationObjectTreeWindow class. |\n\n### Method getSelectedNodeModelName\n\n    public str getSelectedNodeModelName()\n\n#### Return Value\n\n### Method getSelectedNodes\n\n    public Set getSelectedNodes()\n\n#### Return Value\n\n### Method getSelectedNodesPaths\n\n    public Set getSelectedNodesPaths()\n\n#### Return Value\n\n### Method isSelectedNodeExpanded\n\n    public boolean isSelectedNodeExpanded()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the ApplicationObjectTreeWindow class.\n\n    private void new()\n\n## Class Array\n    class Array extends Object\n\n### Remarks\n\nArrays can hold values of any single type, such as objects and records (contrary to the array data type that is built into the X++ language). Objects of this type can be transferred to functions and methods. The values are stored sequentially. The arrays expand as required. Therefore, no specific dimension of the array is supplied.\n\n### Examples\n\nThe following example creates an array of classes and adds three query objects to the array.\n\n    { \n        Array oarray = new Array (Types::Class); \n     \n        oarray.value(1, new query()); \n        oarray.value(2, new query()); \n        oarray.value(4, new query());  \n        print oarray.toString(); \n        print oarray.definitionString(); \n        pause; \n    }\n\n### Methods\n\n| Method                                              | Description                                                                                         |\n|-----------------------------------------------------|-----------------------------------------------------------------------------------------------------|\n| public str definitionString()                       | Returns a string that contains the definition of the array.                                         |\n| public boolean exists(int index)                    | Determines whether a particular array element is valid.                                             |\n| public int lastIndex()                              | Retrieves the highest index that is used to store a value in the array.                             |\n| public container pack()                             | Serializes the current instance of the Array class.                                                 |\n| public str toString()                               | Returns a string that describes the contents of the array.                                          |\n| public Types typeId()                               | Returns the data type of the values in the array.                                                   |\n| public AnyType value(int index, \\[AnyType arg\\])    | Gets or sets the value of the array element that is stored at the specified index.                  |\n| public str xml(\\[int indent\\])                      | Returns an XML string that represents the current object.                                           |\n| ::public static Array create(container container)   | Creates an array from the container that is obtained from a previous call to the Array.pack method. |\n| ::public static Array createFromXML(Object xmlnode) |                                                                                                     |\n| public void new(Types Type)                         | Creates an array in which each element has the specified type.                                      |\n\n### Method definitionString\n\nReturns a string that contains the definition of the array.\n\n    public str definitionString()\n\n#### Return Value\n\nA string that contains the definition of the array.\n\n#### Examples\n\nThe following example creates an array of classes and then adds three query objects to the array. It uses the definitionString method to print a definition of the array.\n\n    { \n        Array oarray = new Array (Types::Class); \n     \n        oarray.value(1, new query()); \n        oarray.value(2, new query()); \n        oarray.value(4, new query());  \n        print oarray.definitionString(); \n        pause; \n    }\n\n### Method exists\n\nDetermines whether a particular array element is valid.\n\n    public boolean exists(int index)\n\n#### Parameters\n\nindex  \nThe array element to test.\n\n#### Return Value\n\ntrue if the array element that is pointed to by the index is valid; otherwise, false.\n\n#### Examples\n\nThe following example uses the exists method to test whether various elements in an array are valid.\n\n    { \n        array a = new array(types::Integer); \n     \n        a.value(1, 23); \n      \n        print a.value(1); \n        pause; \n        if (a.exists(7)) // No, only element 1 is initialized \n        { \n            print a.value(7); \n      \n        } \n        else  \n        { \n            print \"Value does not exist\"; \n        } \n        pause; \n     \n        //Array positions 2 to 9 padded with default values \n        a.value(10, 55); \n      \n        if (a.exists(7)) // Yes, elements 1..10 now initialized \n        { \n            print a.value(7); \n        } \n        else  \n        { \n            print \"Value does not exist\"; \n        } \n        pause; \n    }\n\n### Method lastIndex\n\nRetrieves the highest index that is used to store a value in the array.\n\n    public int lastIndex()\n\n#### Return Value\n\nAn integer that represents the highest index that is used to store a value.\n\n#### Examples\n\nThe following example uses the lastIndex method to find the last element in the array and then add a new value after this element.\n\n    { \n        Array myArray = new Array(Types::Integer); \n        int newValue; \n     \n        // Other code - values are added to myArray \n        // and a value is assigned to newValue \n      \n        myArray.value(myArray.lastIndex()+1, newValue); \n    }\n\n### Method pack\n\nSerializes the current instance of the Array class.\n\n    public container pack()\n\n#### Return Value\n\nA container that contains the current instance of the Array class.\n\n#### Remarks\n\nThe container created by this method contains three elements before the first element from the array:\n\n-   A version number for the container.\n-   An integer that identifies the data type of the array elements.\n-   The number of elements in the array.\n\nIf the values of the array are objects, the pack method is called on each object to yield a subcontainer.\n\n#### Examples\n\nThe following example creates an array of integers and adds some values to it. The pack method is used to pack the array into a container, and the container is then used to create a new array.\n\n    { \n        int i; \n        container packedArray; \n        // Create an integer array \n        Array ia = new Array (Types::Integer); \n        Array iacopy; \n      \n        // Write some elements in it \n        for (i = 1; i< 10; i++) \n        { \n            ia.value(i, i*2); \n        } \n      \n        // Pack the array \n        packedArray = ia.pack(); \n      \n        // Unpack the array  \n        iacopy = Array::create(packedArray); \n      \n        // Check the values \n        for (i = 1; i< 10; i++) \n        { \n            if (iacopy.value(i) != 2*i) \n            { \n                print \"Error!\"; \n            } \n        } \n        pause; \n    }\n\n### Method toString\n\nReturns a string that describes the contents of the array.\n\n    public str toString()\n\n#### Return Value\n\nA string that describes the contents of the array.\n\n#### Examples\n\nThe following example creates an array of integers and adds some values to it. The toString method is used to print the values that the array holds.\n\n    { \n        Array     myArray; \n      \n        Set set1 = new Set(Types::Integer); \n        Set set2 = new Set(Types::Integer); \n        int i; \n     \n      \n        myArray = new Array(Types::Integer); \n      \n        // Add some values to the array. \n        for (i = 1; i< 10; i++) \n        { \n            myArray.value(i, i*2); \n        } \n      \n        // Print out the values in the array. \n        print myArray.toString(); \n        pause; \n    }\n\n### Method typeId\n\nReturns the data type of the values in the array.\n\n    public Types typeId()\n\n#### Return Value\n\nThe data type of the elements in the array.\n\n#### Remarks\n\nThe type remains the same throughout the life of the array. The type is specified when the array is created.\n\n#### Examples\n\nThe following example tests whether a particular array element exists. If it does not exist, the typeId method is used to specify the type of the new value that should be added to the array.\n\n    public anytype getArrayValue(Array a, int _index) \n    { \n        if (! a.exists(_index)) \n        { \n            a.value(_index,nullValueFromType(a.typeId())); \n        } \n      \n        return a.value(_index); \n    }\n\n### Method value\n\nGets or sets the value of the array element that is stored at the specified index.\n\n    public AnyType value(int index, [AnyType arg])\n\n#### Parameters\n\nindex  \nThe value to assign to the array element at the specified offset; optional.\n\n<!-- -->\n\narg  \nThe value to assign to the array element at the specified offset; optional.\n\n#### Return Value\n\nThe value that is stored at the specified offset.\n\n#### Remarks\n\nThe return type is the same as the type of the array. If an attempt is made to read a value at an index that is beyond the last index that has a value, an exception is thrown. If a value is written to a nonexistent location, all locations between the previous element and the nonexistent location are filled with default values, and the array is expanded.\n\n#### Examples\n\nThe following example creates an array of integers and then uses the value method to add some values to the array. It then uses the value method to get the values that are stored in the array and test them.\n\n    { \n         int i; \n        // Create an integer array \n        Array ia = new Array (Types::Integer); \n     \n        // Write some elements in it \n        for (i = 1; i< 10; i++) \n        { \n            ia.value(i, i*2); \n        } \n     \n        // Check the values \n        for (i = 1; i< 10; i++) \n        { \n            if (ia.value(i) != 2*i) \n            { \n                print \"Error!\"; \n            } \n        } \n        pause; \n    }\n\n### Method xml\n\nReturns an XML string that represents the current object.\n\n    public str xml([int indent])\n\n#### Parameters\n\nindent  \nThe amount of indentation of the returned XML string; optional.\n\n#### Return Value\n\nAn XML string that represents the current object.\n\n#### Remarks\n\nThis method can be overridden to return values that are meaningful for a particular type.\n\n### Method create\n\nCreates an array from the container that is obtained from a previous call to the Array.pack method.\n\n    public static Array create(container container)\n\n#### Parameters\n\ncontainer  \nA container that is created by using the Array.pack method. The container is unpacked to create an array.\n\n#### Return Value\n\nAn array that holds the contents of the specified container.\n\n#### Remarks\n\nIf the values in the array are objects, the objects must have an Array.unpack method that is called to reestablish their internal state from a container.\n\n#### Examples\n\nThe following example creates an array and adds two sets to it. The array is packed and then used to create a new array.\n\n    { \n        Array     myArray; \n        Array     newArray; \n        container packedArray; \n     \n        Set set1 = new Set(Types::Integer); \n        Set set2 = new Set(Types::Integer); \n        int i; \n        int j; \n     \n        myArray = new Array(Types::Class); \n      \n        // Add some values to the set1 and set2 \n        for (i = 0; i < 10; i++) \n        { \n            set1.add(i); \n            j = i+3; \n            set2.add(j); \n        } \n      \n        // Add set1 and set2 to myArray \n        myArray.value(1, set1); \n        myArray.value(2, set2); \n      \n        // Pack the myArray into a container \n        packedArray = myArray.pack(); \n      \n        // Create a new array from the container \n        if(packedArray != connull()) \n        { \n            newArray = Array::create(packedArray); \n        } \n      \n        // Test that newArray has same contents as myArray \n        print newArray.definitionString(); \n        print newArray.toString(); \n        pause; \n    }\n\n### Method createFromXML\n\n    public static Array createFromXML(Object xmlnode)\n\n#### Parameters\n\nxmlnode  \n\n#### Return Value\n\n### Method new\n\nCreates an array in which each element has the specified type.\n\n    public void new(Types Type)\n\n#### Parameters\n\nType  \nThe data type of the array elements.\n\n#### Remarks\n\nThe possible values are those that are available for the Types system enumeration:\n\n-   AnyType\n-   BLOB\n-   Class\n-   Container\n-   Date\n-   DateTime\n-   Enum\n-   Guid\n-   Int64\n-   Integer\n\n#### Examples\n\nThe following example creates an array of integers.\n\n    Array intArray = new Array(Types::Integer);\n\n## Class AsciiIo\n    class AsciiIo extends CommaIo\n\nThe AsciiIo class provides functionality for reading and writing ASCII files.\n\n### Remarks\n\nThe TextIo class provides functionality for reading and writing files that use various code pages. The AsciiIO class supports only ANSI code page (ACP) characters. Existing code that uses the AsciiIO class must be converted to use the TextIO class if the file contains non-ACP characters, or if it is a file that is used only in Microsoft Dynamics 365 for Operations, such as an .xpo file.\n\n### Examples\n\n### Methods\n\n| Method                                       | Description                                                                                                                      |\n|----------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| public str inFieldDelimiter(\\[str value\\])   | Sets or retrieves the character that is used as the field delimiter of an input file that is represented by an AsciiIO object.   |\n| public str inRecordDelimiter(\\[str value\\])  | Sets or retrieves the character that is used as the record delimiter of an input file that is represented by an AsciiIO object.  |\n| public int inRecordLength(\\[int value\\])     | Sets or retrieves the record length for an input file.                                                                           |\n| public str outFieldDelimiter(\\[str value\\])  | Sets or retrieves the character that is used as the field delimiter of an output file that is represented by an AsciiIO object.  |\n| public str outRecordDelimiter(\\[str value\\]) | Sets or retrieves the character that is used as the record delimiter of an output file that is represented by an AsciiIO object. |\n| public container read()                      | Reads the next full record from the Io object.                                                                                   |\n| public IO\\_Status status()                   | Returns the status of the last operation on the file.                                                                            |\n| public boolean write(VarArg values)          | Writes values of a simple type.                                                                                                  |\n| public boolean writeChar(int int)            |                                                                                                                                  |\n| public boolean writeExp(container data)      | Writes the content of a container to a file.                                                                                     |\n| public boolean writeRaw(str data)            |                                                                                                                                  |\n| public void finalize()                       | Closes the file and then flushes the file buffers to disk.                                                                       |\n| public void new(str filename, str mode)      | Creates an instance of the AsciiIo class.                                                                                        |\n\n### Method inFieldDelimiter\n\nSets or retrieves the character that is used as the field delimiter of an input file that is represented by an AsciiIO object.\n\n    public str inFieldDelimiter([str value])\n\n#### Parameters\n\nvalue  \nThe character to assign as the field delimiter.\n\n#### Return Value\n\nThe character that is used as the field delimiter.\n\n### Method inRecordDelimiter\n\nSets or retrieves the character that is used as the record delimiter of an input file that is represented by an AsciiIO object.\n\n    public str inRecordDelimiter([str value])\n\n#### Parameters\n\nvalue  \nThe character to assign as the record delimiter.\n\n#### Return Value\n\nThe character that is used as the record delimiter.\n\n#### Remarks\n\nFor standard text, the delimiter is a newline character.\n\n### Method inRecordLength\n\nSets or retrieves the record length for an input file.\n\n    public int inRecordLength([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the record length for the input file.\n\n#### Return Value\n\nThe record length for the input file.\n\n#### Remarks\n\nFor files that have a fixed-length format, use the inRecordLength property to guarantee that no more than the specified number of characters is read for each record. If the record format is overruled by a specified inRecordDelimiter property value (in other words, if the inRecordDelimiter value is met before the fixed length is read), the record is accepted, and no more data is read. To make sure that a fixed number of characters is read, set the inRecordDelimiter property value to an empty string. When no inRecordDelimiter property value is found, the inRecordDelimiter property value is the maximum limit of characters to read. Set the inRecordDelimiter property value to 0 (zero) to disable the check of the record length.\n\n### Method outFieldDelimiter\n\nSets or retrieves the character that is used as the field delimiter of an output file that is represented by an AsciiIO object.\n\n    public str outFieldDelimiter([str value])\n\n#### Parameters\n\nvalue  \nThe character to assign as the field delimiter.\n\n#### Return Value\n\nThe character that is used as the field delimiter.\n\n### Method outRecordDelimiter\n\nSets or retrieves the character that is used as the record delimiter of an output file that is represented by an AsciiIO object.\n\n    public str outRecordDelimiter([str value])\n\n#### Parameters\n\nvalue  \nThe character to assign as the record delimiter.\n\n#### Return Value\n\nThe character that is used as the record delimiter.\n\n#### Remarks\n\nFor standard text files, the delimiter is a newline character.\n\n### Method read\n\nReads the next full record from the Io object.\n\n    public container read()\n\n#### Return Value\n\nThe next full record from the Io object.\n\n#### Remarks\n\nThe definition of the next full record is controlled by the following properties: inFieldDelimiter, inRecordDelimiter, and inRecordLength. The record is returned as a container. Each entry in the container represents one field in the record. Each of the specialized Io classes has default settings for inFieldDelimiter, inRecordDelimiter, and inRecordLength. These settings allow for input and output of the most common formats. However, you might have to adjust these settings to support the desired format.\n\n### Method status\n\nReturns the status of the last operation on the file.\n\n    public IO_Status status()\n\n#### Return Value\n\nThe status of the last file operation.\n\n### Method write\n\nWrites values of a simple type.\n\n    public boolean write(VarArg values)\n\n#### Parameters\n\nvalues  \nOne or more values, each of a simple type, separated by a field delimiter. The simple types are string, integer, real, enum, and date.\n\n#### Return Value\n\ntrue if the write operation succeeds; otherwise, false. If the write operation fails, you can check the status to learn the cause.\n\n#### Remarks\n\nThe method accepts a variable number of arguments. Each value that is specified is put into the output record as a field: the first argument as the first field, the second argument as the second field, and so on. Fields are separated by the delimiter that is specified in the outFieldDelimiter method. Records are separated by the delimiter that is specified in the outRecordDelimiter method. To write complete containers, use the writeExp method.\n\n### Method writeChar\n\n    public boolean writeChar(int int)\n\n#### Parameters\n\nint  \n\n#### Return Value\n\n### Method writeExp\n\nWrites the content of a container to a file.\n\n    public boolean writeExp(container data)\n\n#### Parameters\n\ndata  \nThe container that holds data for the record.\n\n#### Return Value\n\ntrue if the operation succeeds; otherwise, false. If the operation fails, check the status to learn the cause.\n\n#### Remarks\n\nThe entries in the container are treated as fields. The container is treated as a full record. Fields are separated by the delimiter that is specified in the outFieldDelimiter method. Records are separated by the delimiter that is specified in the outRecordDelimiter method.\n\n### Method writeRaw\n\n    public boolean writeRaw(str data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method finalize\n\nCloses the file and then flushes the file buffers to disk.\n\n    public void finalize()\n\n#### Remarks\n\nAn AsciiIo object is usually finalized after its scope has ended. This method is not usually called directly. Output that is written to the file is not valid until the AsciiIo object is finalized.\n\n### Method new\n\nCreates an instance of the AsciiIo class.\n\n    public void new(str filename, str mode)\n\n#### Parameters\n\nfilename  \nThe mode to use to create this instance of the AsciiIo class.\n\n<!-- -->\n\nmode  \nThe mode to use to create this instance of the AsciiIo class.\n\n#### Remarks\n\nIf an attacker can control input to the new method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the FileIOPermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n#### Examples\n\nThe following example uses the AsciiIo class to read from a text file.\n\n    void AsciiIoExample() \n    { \n        AsciiIo asciiIo; \n        container con; \n        FileIoPermission perm; \n      \n        #define.ExampleFile(@\"c:\\test.txt\") \n        #define.ExampleOpenMode(\"r\") \n         \n        // The AsciiIo.new method runs under code access permission. \n        perm = new FileIoPermission(#ExampleFile, #ExampleOpenMode); \n        if (perm == null) \n        { \n            return; \n        } \n      \n        // Code access permission scope starts here. \n         perm.assert(); \n      \n         asciiIo = new AsciiIo(#ExampleFile, #ExampleOpenMode); \n        if (asciiIo != null) \n        { \n              con = asciiIo.read(); \n        } \n        // Closes the code access permission scope. \n        CodeAccessPermission::revertAssert(); \n    }\n\n## Class AssemblyDeployManager\n    class AssemblyDeployManager extends Object\n\nThe AssemblyDeployManager class lets you deploy the assemblies that are stored in the AOT Visual Studio Projects to the AOS VSAssemblies folder that can be used by the X++ runtime during .NET calls.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                        | Description                                                                                             |\n|---------------------------------------------------------------|---------------------------------------------------------------------------------------------------------|\n| ::public static boolean isHotswappingEnabled()                | Returns a Boolean value that indicates whether hot swapping is enabled.                                 |\n| ::public static void deployAssemblyFromPath(str assemblyPath) |                                                                                                         |\n| ::public static void removeAssemblyFromPath(str assemblyPath) | Removes one specific assembly that is marked for deployment to the server from the VSAssemblies folder. |\n| ::public static void deployAssemblies()                       | Deploys one specific assembly that is marked for deployment to server to the VSAssemblies folder.       |\n\n### Method isHotswappingEnabled\n\nReturns a Boolean value that indicates whether hot swapping is enabled.\n\n    public static boolean isHotswappingEnabled()\n\n#### Return Value\n\nA Boolean value that indicates whether hot swapping is enabled.\n\n### Method deployAssemblyFromPath\n\n    public static void deployAssemblyFromPath(str assemblyPath)\n\n#### Parameters\n\nassemblyPath  \n\n### Method removeAssemblyFromPath\n\nRemoves one specific assembly that is marked for deployment to the server from the VSAssemblies folder.\n\n    public static void removeAssemblyFromPath(str assemblyPath)\n\n#### Parameters\n\nassemblyPath  \nThe Visual Studio Project path where the assembly is stored.\n\n### Method deployAssemblies\n\nDeploys one specific assembly that is marked for deployment to server to the VSAssemblies folder.\n\n    public static void deployAssemblies()\n\n## Class AsyncTaskResult\n    class AsyncTaskResult extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                               | Description |\n|--------------------------------------------------------------------------------------|-------------|\n| public container getResult()                                                         |             |\n| public System.Exception getException()                                               |             |\n| public container getInfologData()                                                    |             |\n| public container getAsyncState()                                                     |             |\n| ::public static AsyncTaskResult getAsyncTaskResult(System.Threading.Tasks.Task task) |             |\n\n### Method getResult\n\n    public container getResult()\n\n#### Return Value\n\n### Method getException\n\n    public System.Exception getException()\n\n#### Return Value\n\n### Method getInfologData\n\n    public container getInfologData()\n\n#### Return Value\n\n### Method getAsyncState\n\n    public container getAsyncState()\n\n#### Return Value\n\n### Method getAsyncTaskResult\n\n    public static AsyncTaskResult getAsyncTaskResult(System.Threading.Tasks.Task task)\n\n#### Parameters\n\ntask  \n\n#### Return Value\n\n## Class AxaptaCOMConnectorMonitor\n    class AxaptaCOMConnectorMonitor extends Object\n\nMicrosoft internal use only.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                     | Description                                                        |\n|--------------------------------------------|--------------------------------------------------------------------|\n| public int getBufferCount()                |                                                                    |\n| public str getCOMRegistration()            |                                                                    |\n| public int getContainerCount()             |                                                                    |\n| public int getLoggedOnAxaptaObjectCount()  |                                                                    |\n| public int getObjectCount()                |                                                                    |\n| public int getRecordCount()                |                                                                    |\n| public int getReferenceCount()             |                                                                    |\n| public boolean isAxaptaCOMConnector()      |                                                                    |\n| public boolean isAxaptaInternetConnector() |                                                                    |\n| public void finalize()                     | Microsoftinternal use only.                                        |\n| public void new()                          | Initializes a new instance of the AxaptaCOMConnectorMonitor class. |\n\n### Method getBufferCount\n\n    public int getBufferCount()\n\n#### Return Value\n\n### Method getCOMRegistration\n\n    public str getCOMRegistration()\n\n#### Return Value\n\n### Method getContainerCount\n\n    public int getContainerCount()\n\n#### Return Value\n\n### Method getLoggedOnAxaptaObjectCount\n\n    public int getLoggedOnAxaptaObjectCount()\n\n#### Return Value\n\n### Method getObjectCount\n\n    public int getObjectCount()\n\n#### Return Value\n\n### Method getRecordCount\n\n    public int getRecordCount()\n\n#### Return Value\n\n### Method getReferenceCount\n\n    public int getReferenceCount()\n\n#### Return Value\n\n### Method isAxaptaCOMConnector\n\n    public boolean isAxaptaCOMConnector()\n\n#### Return Value\n\n### Method isAxaptaInternetConnector\n\n    public boolean isAxaptaInternetConnector()\n\n#### Return Value\n\n### Method finalize\n\nMicrosoftinternal use only.\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the AxaptaCOMConnectorMonitor class.\n\n    public void new()\n\n"}