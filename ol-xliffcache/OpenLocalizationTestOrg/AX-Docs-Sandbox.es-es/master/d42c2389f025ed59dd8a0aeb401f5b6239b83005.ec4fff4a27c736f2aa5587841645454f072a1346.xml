{"content":"---\n# required metadata\n\ntitle: X++ attribute classes\ndescription: This topic describes the use of attributes in X++.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: 61\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 150243\nms.assetid: 9c927660-3268-4a77-9a83-97759a487483\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X++ attribute classes\n\n[!include[banner](../includes/banner.md)]\n\n\nThis topic describes the use of attributes in X++.\n\nAn attribute is a non-abstract class that extends (inherits from) the **SysAttribute** class. Attributes represent or store metadata about types and methods. An attribute can be attached to a class, an interface, or a method of a class, interface, or table.\n\n## Creating an attribute class\nAn attribute class can extend the **SysAttribute** class directly, or it can extend any descendant of the **SysAttribute** class. The **SysAttribute** class cannot be used as an attribute because it is declared **abstract**. The following example shows the declaration and design of an ordinary attribute class that you could create.\n\n    public class PracticeAttribute extends SysAttribute\n    {\n        // Fields in the classDeclaration.\n        StartEnd startEndEnum;\n        str reason;\n        // Constructor.\n        public void new(StartEnd _startEndEnum, str _reason)\n        {\n            startEndEnum  = _startEndEnum;\n            reason = _reason;\n        }\n        // Other methods can go here.\n    }\n\n### Decorating a class with an attribute\n\nThe following example shows a class and a method that are decorated with the **PracticeAttribute** given in the previous example. If the constructor of the attribute takes no parameters, the parentheses for the parameters are optional. The attribute decoration could be `[AnotherAttribute]` without parentheses.\n\n    [PracticeAttribute(StartEnd::End, \"Use the RegularClass class at the end.\")]\n    public class RegularClass\n    {\n        [PracticeAttribute(Startend::Start, \"Use the rehearse method at the start.\")]\n        public int rehearse()\n        {\n            // Logic goes here.\n        }\n        // More fields and methods belong here.\n    }\n\n### Attribute constructors\n\nYou can enable your attribute class to store tailored metadata each time it is used to decorate a class, by having its constructor take parameters. The parameters for the constructor must be literals of the primitive types, such as **int,** **enum,** or **str**. The compiler does not construct an instance of the attribute class. It stores the name of the attribute class, plus the literal values for its constructor. Therefore, if the logic in an attribute constructor would throw an exception, the exception would not be found by decorating a class with the attribute. The exception would be found later when a process looks at a class to see the attribute it is decorated with. That is when the attribute is constructed.\n\n### Naming conventions\n\nAll attribute classes have the suffix **Attribute** in their name. The **Attribute** suffix is the name convention that we recommend, but it is not a system requirement. You can determine whether a class **extends** directly from **SysAttribute** by selecting the class in the **Application Explorer** and reviewing the **Extends** property in the **Properties** window.\n\n## SysObsoleteAttribute\nThe system provides several attributes, including the **SysObsoleteAttribute** class. One use of the **SysObsoleteAttribute** class is to notify the compiler that the compile should fail if a particular method is called in the source code. The compiler rejects the compile, and displays the specific message that is stored in this use of the attribute. The **SysObsoleteAttribute** class can also be used to notify the compiler to issue warning messages instead of errors.\n\n### SysObsoleteAttribute code example\n\n    [SysObsoleteAttribute(\"The Automobile class might have faster performance.\", false)]\n    class Bicycle\n    {\n        // Members of the Bicycle class go here.\n    }\n\n## Metadata reflection\nYou use reflection to find the attribute metadata that is attached to a class. The classes to use for attribute reflection are as follows:\n\n-   **DictClass** class – For classes and interfaces.\n-   **DictMethod** class – For methods on classes, interfaces, or tables.\n\nOn the previous reflection classes, the methods for reflecting on attribute metadata are as follows:\n\n-   **getAllAttributes** method\n-   **getAttribute** method\n-   **getAttributedClasses** method\n-   **getAttributes** method\n\n### Metadata reflection code example\n\nYou use the **DictMethod** class to find the metadata value of an attribute that is decoration on a method. The following code example uses the **SysEntryPointAttribute** class as the attribute. It accepts your parameter values for the method name, and for the name of the class that contains the method. The **parmChecked** method is particular to the **SysEntryPointAttribute** class, and it is not inherited from its base class **SysAttribute**. Each attribute class can have its own method name for its metadata.\n\n    static public int MetadataOfSysEntryPointAttributeOnMethod\n                (\n                str _sNameOfClass,\n                str _sNameOfMethod\n                )\n    {\n        // Return Values:\n        // 0 == Has the attribute, its metadata value is false;\n        // 1 == Has the attribute, its metadata value is true;\n        // 2 == The method lacks the SysEntryPointAttribute.\n        int nReturnValue = -1,\n            nClassId;\n        boolean boolParmChecked;\n        DictMethod dm;\n        Object attributeAsObject;\n        SysEntryPointAttribute sepAttribute;\n        Global::info(\"Starting AttributeReflection\" \n            + \" ::MetadataOfSysEntryPointAttributeOnMethod ....\");\n        Global::info(strFmt\n            (\"Parameters are: _sNameOfClass = %1 ,  _sNameOfMethod = %2 .\", \n            _sNameOfClass, _sNameOfMethod)\n            );\n        nClassId = Global::className2Id(_sNameOfClass);\n        dm = new DictMethod\n            (UtilElementType::ClassInstanceMethod,\n            nClassId,\n            _sNameOfMethod\n            );\n        attributeAsObject = dm.getAttribute(\"SysEntryPointAttribute\");\n        if (attributeAsObject is SysEntryPointAttribute)\n        {\n            sepAttribute = attributeAsObject as SysEntryPointAttribute;\n            boolParmChecked = sepAttribute.parmChecked();\n            if (boolParmChecked)\n                nReturnValue = 1;\n            else\n                nReturnValue = 0;\n            Global::info(\n                strFmt(\"Return value is %1.\",\n                    nReturnValue)\n                );\n        }\n        else\n        {\n            nReturnValue = 2;\n            Global::error(\"Object is not a SysEntryPointAttribute??\");\n        }\n        return nReturnValue;\n    }\n    /*** Output displayed in the Infolog.\n    Message (05:03:22 pm)\n    Starting AttributeReflection ::MetadataOfSysEntryPointAttributeOnMethod ....\n    Parameters are: _sNameOfClass = CustCustomerService ,  _sNameOfMethod = create .\n    Return value is 1.\n    ***/\n    /**************\n    // Simple AOT > Jobs job to run the method.\n    static void AttributeReflection33Job(Args _args)\n    {\n        AttributeReflection::MetadataOfSysEntryPointAttributeOnMethod\n            (\"CustCustomerService\", \"create\");\n    }\n    **************/\n\n\n\n","nodes":[{"pos":[32,53],"content":"X++ attribute classes","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ attribute classes","pos":[0,21]}]},{"pos":[67,117],"content":"This topic describes the use of attributes in X++.","needQuote":true,"needEscape":true,"nodes":[{"content":"This topic describes the use of attributes in X++.","pos":[0,50]}]},{"pos":[614,635],"content":"X++ attribute classes","linkify":"X++ attribute classes","nodes":[{"content":"X++ attribute classes","pos":[0,21]}]},{"content":"This topic describes the use of attributes in X++.","pos":[681,731]},{"content":"An attribute is a non-abstract class that extends (inherits from) the <bpt id=\"p1\">**</bpt>SysAttribute<ept id=\"p1\">**</ept> class.","pos":[733,826],"source":"An attribute is a non-abstract class that extends (inherits from) the **SysAttribute** class."},{"content":"Attributes represent or store metadata about types and methods.","pos":[827,890]},{"content":"An attribute can be attached to a class, an interface, or a method of a class, interface, or table.","pos":[891,990]},{"pos":[995,1022],"content":"Creating an attribute class","linkify":"Creating an attribute class","nodes":[{"content":"Creating an attribute class","pos":[0,27]}]},{"content":"An attribute class can extend the <bpt id=\"p1\">**</bpt>SysAttribute<ept id=\"p1\">**</ept> class directly, or it can extend any descendant of the <bpt id=\"p2\">**</bpt>SysAttribute<ept id=\"p2\">**</ept> class.","pos":[1023,1152],"source":"An attribute class can extend the **SysAttribute** class directly, or it can extend any descendant of the **SysAttribute** class."},{"content":"The <bpt id=\"p1\">**</bpt>SysAttribute<ept id=\"p1\">**</ept> class cannot be used as an attribute because it is declared <bpt id=\"p2\">**</bpt>abstract<ept id=\"p2\">**</ept>.","pos":[1153,1247],"source":" The **SysAttribute** class cannot be used as an attribute because it is declared **abstract**."},{"content":"The following example shows the declaration and design of an ordinary attribute class that you could create.","pos":[1248,1356]},{"pos":[1741,1777],"content":"Decorating a class with an attribute","linkify":"Decorating a class with an attribute","nodes":[{"content":"Decorating a class with an attribute","pos":[0,36]}]},{"content":"The following example shows a class and a method that are decorated with the <bpt id=\"p1\">**</bpt>PracticeAttribute<ept id=\"p1\">**</ept> given in the previous example.","pos":[1779,1908],"source":"The following example shows a class and a method that are decorated with the **PracticeAttribute** given in the previous example."},{"content":"If the constructor of the attribute takes no parameters, the parentheses for the parameters are optional.","pos":[1909,2014]},{"content":"The attribute decoration could be <ph id=\"ph1\">`[AnotherAttribute]`</ph> without parentheses.","pos":[2015,2090],"source":" The attribute decoration could be `[AnotherAttribute]` without parentheses."},{"pos":[2436,2458],"content":"Attribute constructors","linkify":"Attribute constructors","nodes":[{"content":"Attribute constructors","pos":[0,22]}]},{"content":"You can enable your attribute class to store tailored metadata each time it is used to decorate a class, by having its constructor take parameters.","pos":[2460,2607]},{"content":"The parameters for the constructor must be literals of the primitive types, such as <bpt id=\"p1\">**</bpt>int,<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>enum,<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>str<ept id=\"p3\">**</ept>.","pos":[2608,2722],"source":" The parameters for the constructor must be literals of the primitive types, such as **int,** **enum,** or **str**."},{"content":"The compiler does not construct an instance of the attribute class.","pos":[2723,2790]},{"content":"It stores the name of the attribute class, plus the literal values for its constructor.","pos":[2791,2878]},{"content":"Therefore, if the logic in an attribute constructor would throw an exception, the exception would not be found by decorating a class with the attribute.","pos":[2879,3031]},{"content":"The exception would be found later when a process looks at a class to see the attribute it is decorated with.","pos":[3032,3141]},{"content":"That is when the attribute is constructed.","pos":[3142,3184]},{"pos":[3190,3208],"content":"Naming conventions","linkify":"Naming conventions","nodes":[{"content":"Naming conventions","pos":[0,18]}]},{"content":"All attribute classes have the suffix <bpt id=\"p1\">**</bpt>Attribute<ept id=\"p1\">**</ept> in their name.","pos":[3210,3276],"source":"All attribute classes have the suffix **Attribute** in their name."},{"content":"The <bpt id=\"p1\">**</bpt>Attribute<ept id=\"p1\">**</ept> suffix is the name convention that we recommend, but it is not a system requirement.","pos":[3277,3379],"source":" The **Attribute** suffix is the name convention that we recommend, but it is not a system requirement."},{"content":"You can determine whether a class <bpt id=\"p1\">**</bpt>extends<ept id=\"p1\">**</ept> directly from <bpt id=\"p2\">**</bpt>SysAttribute<ept id=\"p2\">**</ept> by selecting the class in the <bpt id=\"p3\">**</bpt>Application Explorer<ept id=\"p3\">**</ept> and reviewing the <bpt id=\"p4\">**</bpt>Extends<ept id=\"p4\">**</ept> property in the <bpt id=\"p5\">**</bpt>Properties<ept id=\"p5\">**</ept> window.","pos":[3380,3580],"source":" You can determine whether a class **extends** directly from **SysAttribute** by selecting the class in the **Application Explorer** and reviewing the **Extends** property in the **Properties** window."},{"pos":[3585,3605],"content":"SysObsoleteAttribute","linkify":"SysObsoleteAttribute","nodes":[{"content":"SysObsoleteAttribute","pos":[0,20]}]},{"content":"The system provides several attributes, including the <bpt id=\"p1\">**</bpt>SysObsoleteAttribute<ept id=\"p1\">**</ept> class.","pos":[3606,3691],"source":"The system provides several attributes, including the **SysObsoleteAttribute** class."},{"content":"One use of the <bpt id=\"p1\">**</bpt>SysObsoleteAttribute<ept id=\"p1\">**</ept> class is to notify the compiler that the compile should fail if a particular method is called in the source code.","pos":[3692,3845],"source":" One use of the **SysObsoleteAttribute** class is to notify the compiler that the compile should fail if a particular method is called in the source code."},{"content":"The compiler rejects the compile, and displays the specific message that is stored in this use of the attribute.","pos":[3846,3958]},{"content":"The <bpt id=\"p1\">**</bpt>SysObsoleteAttribute<ept id=\"p1\">**</ept> class can also be used to notify the compiler to issue warning messages instead of errors.","pos":[3959,4078],"source":" The **SysObsoleteAttribute** class can also be used to notify the compiler to issue warning messages instead of errors."},{"pos":[4084,4117],"content":"SysObsoleteAttribute code example","linkify":"SysObsoleteAttribute code example","nodes":[{"content":"SysObsoleteAttribute code example","pos":[0,33]}]},{"pos":[4291,4310],"content":"Metadata reflection","linkify":"Metadata reflection","nodes":[{"content":"Metadata reflection","pos":[0,19]}]},{"content":"You use reflection to find the attribute metadata that is attached to a class.","pos":[4311,4389]},{"content":"The classes to use for attribute reflection are as follows:","pos":[4390,4449]},{"pos":[4455,4504],"content":"<bpt id=\"p1\">**</bpt>DictClass<ept id=\"p1\">**</ept> class – For classes and interfaces.","source":"**DictClass** class – For classes and interfaces."},{"pos":[4509,4578],"content":"<bpt id=\"p1\">**</bpt>DictMethod<ept id=\"p1\">**</ept> class – For methods on classes, interfaces, or tables.","source":"**DictMethod** class – For methods on classes, interfaces, or tables."},{"content":"On the previous reflection classes, the methods for reflecting on attribute metadata are as follows:","pos":[4580,4680]},{"pos":[4686,4713],"content":"<bpt id=\"p1\">**</bpt>getAllAttributes<ept id=\"p1\">**</ept> method","source":"**getAllAttributes** method"},{"pos":[4718,4741],"content":"<bpt id=\"p1\">**</bpt>getAttribute<ept id=\"p1\">**</ept> method","source":"**getAttribute** method"},{"pos":[4746,4777],"content":"<bpt id=\"p1\">**</bpt>getAttributedClasses<ept id=\"p1\">**</ept> method","source":"**getAttributedClasses** method"},{"pos":[4782,4806],"content":"<bpt id=\"p1\">**</bpt>getAttributes<ept id=\"p1\">**</ept> method","source":"**getAttributes** method"},{"pos":[4812,4844],"content":"Metadata reflection code example","linkify":"Metadata reflection code example","nodes":[{"content":"Metadata reflection code example","pos":[0,32]}]},{"content":"You use the <bpt id=\"p1\">**</bpt>DictMethod<ept id=\"p1\">**</ept> class to find the metadata value of an attribute that is decoration on a method.","pos":[4846,4953],"source":"You use the **DictMethod** class to find the metadata value of an attribute that is decoration on a method."},{"content":"The following code example uses the <bpt id=\"p1\">**</bpt>SysEntryPointAttribute<ept id=\"p1\">**</ept> class as the attribute.","pos":[4954,5040],"source":" The following code example uses the **SysEntryPointAttribute** class as the attribute."},{"content":"It accepts your parameter values for the method name, and for the name of the class that contains the method.","pos":[5041,5150]},{"content":"The <bpt id=\"p1\">**</bpt>parmChecked<ept id=\"p1\">**</ept> method is particular to the <bpt id=\"p2\">**</bpt>SysEntryPointAttribute<ept id=\"p2\">**</ept> class, and it is not inherited from its base class <bpt id=\"p3\">**</bpt>SysAttribute<ept id=\"p3\">**</ept>.","pos":[5151,5294],"source":" The **parmChecked** method is particular to the **SysEntryPointAttribute** class, and it is not inherited from its base class **SysAttribute**."},{"content":"Each attribute class can have its own method name for its metadata.","pos":[5295,5362]}]}