{"nodes":[{"pos":[32,92],"content":"Commerce runtime extensibility and triggers | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"Commerce runtime extensibility and triggers | Microsoft Docs","pos":[0,60]}]},{"pos":[106,260],"content":"This article explains trigger support for the Microsoft Dynamics AX commerce runtime (CRT). CRT supports pre-triggers and post-triggers for every request.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article explains trigger support for the Microsoft Dynamics AX commerce runtime (CRT). CRT supports pre-triggers and post-triggers for every request.","pos":[0,154],"nodes":[{"content":"This article explains trigger support for the Microsoft Dynamics AX commerce runtime (CRT).","pos":[0,91]},{"content":"CRT supports pre-triggers and post-triggers for every request.","pos":[92,154]}]}]},{"pos":[690,733],"content":"Commerce runtime extensibility and triggers","linkify":"Commerce runtime extensibility and triggers","nodes":[{"content":"Commerce runtime extensibility and triggers","pos":[0,43]}]},{"content":"This article explains trigger support for the Microsoft Dynamics AX commerce runtime (CRT).","pos":[735,826]},{"content":"CRT supports pre-triggers and post-triggers for every request.","pos":[827,889]},{"pos":[891,911],"content":"CRT trigger overview","linkify":"CRT trigger overview","nodes":[{"content":"CRT trigger overview","pos":[0,20]}]},{"content":"Commerce runtime (CRT) triggers give you a way to extend the CRT workflow, and let you add business logic before and after every CRT request is executed.","pos":[934,1087]},{"content":"The following two methods are used:","pos":[1088,1123]},{"pos":[1129,1260],"content":"<bpt id=\"p1\">**</bpt>OnExecuting<ept id=\"p1\">**</ept> – This method is invoked before a request has been processed by a corresponding <bpt id=\"p2\">**</bpt>IRequestHandler<ept id=\"p2\">**</ept> implementation.","source":"**OnExecuting** – This method is invoked before a request has been processed by a corresponding **IRequestHandler** implementation."},{"pos":[1265,1396],"content":"<bpt id=\"p1\">**</bpt>OnExecuted<ept id=\"p1\">**</ept> – This method is invoked after the request has been processed by a corresponding <bpt id=\"p2\">**</bpt>IRequestHandler<ept id=\"p2\">**</ept> implementation.","source":"**OnExecuted** – This method is invoked after the request has been processed by a corresponding **IRequestHandler** implementation."},{"pos":[1401,1422],"content":"CRT trigger interface","linkify":"CRT trigger interface","nodes":[{"content":"CRT trigger interface","pos":[0,21]}]},{"content":"To implement a trigger, you must complete these tasks, as shown in the code example that follows:","pos":[1423,1520]},{"pos":[1526,1556],"content":"Implement <bpt id=\"p1\">**</bpt>IRequestTrigger<ept id=\"p1\">**</ept>.","source":"Implement **IRequestTrigger**."},{"pos":[1561,1661],"content":"Specify <bpt id=\"p1\">**</bpt>SupportedRequestTypes<ept id=\"p1\">**</ept> to define the request types that the trigger must be executed for.","source":"Specify **SupportedRequestTypes** to define the request types that the trigger must be executed for."},{"pos":[1666,1789],"content":"Write a trigger implementation in the <bpt id=\"p1\">**</bpt>OnExecuting<ept id=\"p1\">**</ept> method if business logic must be run before the request is addressed.","source":"Write a trigger implementation in the **OnExecuting** method if business logic must be run before the request is addressed."},{"pos":[1794,1915],"content":"Write a trigger implementation in the <bpt id=\"p1\">**</bpt>OnExecuted<ept id=\"p1\">**</ept> method if business logic must be run after the request is addressed.","source":"Write a trigger implementation in the **OnExecuted** method if business logic must be run after the request is addressed."},{"pos":[2957,2995],"content":"Trigger CommerceRunTime.config updates","linkify":"Trigger CommerceRunTime.config updates","nodes":[{"content":"Trigger CommerceRunTime.config updates","pos":[0,38]}]},{"content":"When you extend the CRT, make sure that you always write your extension in your own assembly.","pos":[2996,3089]},{"content":"After you write the trigger extension in your assembly, you must add an entry in the <bpt id=\"p1\">**</bpt>composition<ept id=\"p1\">**</ept> section of the .config file for the CRT, so that the trigger is loaded at run time.","pos":[3090,3274],"source":" After you write the trigger extension in your assembly, you must add an entry in the **composition** section of the .config file for the CRT, so that the trigger is loaded at run time."},{"content":"The following example shows a .config file that includes an entry for a trigger implementation in the <bpt id=\"p1\">**</bpt>CRTExtensionTrigger<ept id=\"p1\">**</ept> assembly.","pos":[3275,3410],"source":" The following example shows a .config file that includes an entry for a trigger implementation in the **CRTExtensionTrigger** assembly."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>CRTExtensionTrigger<ept id=\"p1\">](./media/crtextensiontrigger-1024x489.png)](./media/crtextensiontrigger.png)</ept>","pos":[3411,3510],"source":"[![CRTExtensionTrigger](./media/crtextensiontrigger-1024x489.png)](./media/crtextensiontrigger.png)"}],"content":"---\n# required metadata\n\ntitle: Commerce runtime extensibility and triggers | Microsoft Docs\ndescription: This article explains trigger support for the Microsoft Dynamics AX commerce runtime (CRT). CRT supports pre-triggers and post-triggers for every request.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2015-12-04 20:30:09\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 17731\nms.assetid: 1f91d843-68c4-418e-8c7e-f1bd602723ed\nms.region: Global\nms.industry: Retail\nms.author: sijoshi\n\n---\n\n# Commerce runtime extensibility and triggers\n\nThis article explains trigger support for the Microsoft Dynamics AX commerce runtime (CRT). CRT supports pre-triggers and post-triggers for every request.\n\nCRT trigger overview\n--------------------\n\nCommerce runtime (CRT) triggers give you a way to extend the CRT workflow, and let you add business logic before and after every CRT request is executed. The following two methods are used:\n\n-   **OnExecuting** – This method is invoked before a request has been processed by a corresponding **IRequestHandler** implementation.\n-   **OnExecuted** – This method is invoked after the request has been processed by a corresponding **IRequestHandler** implementation.\n\n## CRT trigger interface\nTo implement a trigger, you must complete these tasks, as shown in the code example that follows:\n\n1.  Implement **IRequestTrigger**.\n2.  Specify **SupportedRequestTypes** to define the request types that the trigger must be executed for.\n3.  Write a trigger implementation in the **OnExecuting** method if business logic must be run before the request is addressed.\n4.  Write a trigger implementation in the **OnExecuted** method if business logic must be run after the request is addressed.\n\n<!-- -->\n\n    /// <summary>\n    /// The interface for request trigger.\n    /// </summary>\n    public interface IRequestTrigger\n    {\n        /// <summary>\n        /// Gets the collection of request types supported by this trigger.\n        /// </summary>\n        /// <remarks>If null or empty collection returned trigger will be called for all request.</remarks>\n        IEnumerable<Type> SupportedRequestTypes { get; }\n        /// <summary>\n        /// Invoked before request has been processed by <see cref=\"IRequestHandler\"/>.\n        /// </summary>\n        /// <param name=\"request\">The incoming request message.</param>\n        void OnExecuting(Request request);\n        /// <summary>\n        /// Invoked after request has been processed by <see cref=\"IRequestHandler\"/>.\n        /// </summary>\n        /// <param name=\"request\">The request message processed by handler.</param>\n        /// <param name=\"response\">The response message generated by handler.</param>\n        void OnExecuted(Request request, Response response);\n    }\n\n## Trigger CommerceRunTime.config updates\nWhen you extend the CRT, make sure that you always write your extension in your own assembly. After you write the trigger extension in your assembly, you must add an entry in the **composition** section of the .config file for the CRT, so that the trigger is loaded at run time. The following example shows a .config file that includes an entry for a trigger implementation in the **CRTExtensionTrigger** assembly. [![CRTExtensionTrigger](./media/crtextensiontrigger-1024x489.png)](./media/crtextensiontrigger.png)\n\n"}