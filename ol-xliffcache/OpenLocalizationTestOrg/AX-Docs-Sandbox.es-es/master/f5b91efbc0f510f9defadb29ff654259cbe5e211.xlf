<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-188fee3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5b91efbc0f510f9defadb29ff654259cbe5e211</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\dev-reference\xpp-statements-and-loops.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">do-not-translate</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1481b8cb1e4d86093f724af8a4d5acf6a576b7b6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e1676f2e815c233a17cd75def51a6d8215bd98c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>X++ statements, loops, and exception handling | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic describes statements, loops, and exception handling in X++.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>X++ statements, loops, and exception handling</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It is good practice to add comments to your code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This makes a program easier to read and understand.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Comments are ignored when the program is compiled.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use "//" and "/<ph id="ph1">\*</ph> â€¦</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\*</ph>/" style comments, although it is best practice to use "//"-style comments, even for multi-line comments.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Print statements</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You use the <bpt id="p1">**</bpt>print<ept id="p1">**</ept> statement to display text or selected results in a temporary window.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The messages are displayed in a window that appears when the first <bpt id="p1">**</bpt>print<ept id="p1">**</ept> statement is executed.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>print<ept id="p1">**</ept> statement can be a convenient alternative to the <bpt id="p2">**</bpt>Global::info<ept id="p2">**</ept> method during testing.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>info<ept id="p1">**</ept> method displays text in the <bpt id="p2">**</bpt>Infolog<ept id="p2">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following table compares the <bpt id="p1">**</bpt>print<ept id="p1">**</ept> statement against the <bpt id="p2">**</bpt>Global::info<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Feature</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Print<ept id="p1">**</ept> statement</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Info<ept id="p1">**</ept> method</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Ease of invocation</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Print<ept id="p1">**</ept> statement automatically converts various data types to strings.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It can convert multiple data types in one invocation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Info<ept id="p1">**</ept> method requires that the input parameter be a string.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Copy to clipboard</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Print<ept id="p1">**</ept> window contents cannot be copied to the clipboard.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You cannot give the <bpt id="p1">**</bpt>Print<ept id="p1">**</ept> window focus.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Infolog<ept id="p1">**</ept> contents are easily copied to the clipboard.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Scope of lifetime</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Print<ept id="p1">**</ept> window closes when the X++ application ends, and the window might close before you have time to read it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Infolog<ept id="p1">**</ept> window persists for the whole client session.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Size and location</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Print<ept id="p1">**</ept> window can be a specific size, and in a specific location on the screen.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Infolog<ept id="p1">**</ept> window is sized and placed by the system.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Common usage</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Print<ept id="p1">**</ept> statement is used for convenience during testing.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It can help you debug small problems without needing to run a formal debugger.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Info<ept id="p1">**</ept> method is appropriate for use in production.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Print statement code example</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>TODO comments</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The compiler recognizes the string <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> when it occurs at the start of a comment.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> string prompts the compiler to report the rest of the comment text on in the <bpt id="p2">**</bpt>Task List<ept id="p2">**</ept> window of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To open the <bpt id="p1">**</bpt>Task List<ept id="p1">**</ept> window, select <bpt id="p2">**</bpt>View<ept id="p2">**</ept> and then select <bpt id="p3">**</bpt>Task Window<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Task Window <ept id="p1">**</ept>reports the line number in the code where the <bpt id="p2">**</bpt>TODO<ept id="p2">**</ept> comment can be found.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The rules for using <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> in comments are as follows:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> string can appear in either the <bpt id="p2">**</bpt><ph id="ph1">//</ph><ept id="p2">**</ept> or the <bpt id="p3">**</bpt><ph id="ph2">/</ph><ph id="ph3">\*</ph> <ph id="ph4">\*</ph><ph id="ph5">/</ph><ept id="p3">**</ept> style of comment.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> string must be the very first non-white space string in the comment.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>White space is considered to be a carriage return, a line feed, a tab, or a space.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>No white space is required between the start of the comment and the <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> string is case insensitive.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, the convention is to write <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> in all uppercase letters, instead of <bpt id="p2">**</bpt>ToDo<ept id="p2">**</ept> or another variation.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> string can have any characters appended to it, but the convention is to either append a colon, or for a white space to follow.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The rest of the comment after the <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> string is reported as the task description.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the comment is longer than 200 characters, it might display truncated in the <bpt id="p1">**</bpt>Tasks<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> task description can be spread over multiple lines when the <bpt id="p2">**</bpt><ph id="ph1">/</ph><ph id="ph2">\*</ph> <ph id="ph3">\*</ph><ph id="ph4">/</ph><ept id="p2">**</ept> comment style is used.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>TODO code examples</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following table shows examples of using <bpt id="p1">**</bpt>TODO<ept id="p1">**</ept> in the <bpt id="p2">**</bpt><ph id="ph1">//</ph><ept id="p2">**</ept> or the <bpt id="p3">**</bpt><ph id="ph2">/</ph><ph id="ph3">\*</ph> <ph id="ph4">\*</ph><ph id="ph5">/</ph><ept id="p3">**</ept> style of comment.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Using clauses</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You use <bpt id="p1">**</bpt>using<ept id="p1">**</ept> clauses so that you do not have to provide the fully-qualified name of a type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>using<ept id="p1">**</ept> clause must precede the class which it applies, and it is required in every source file you want it to apply to.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Typically, all <bpt id="p1">**</bpt>using<ept id="p1">**</ept> clauses are placed at the beginning of the source file.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It's also possible to provide aliases that introduce a short name for a fully qualified name.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Aliases can denote namespaces or classes.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example shows a using clause, a namespace alias, and a class alias.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Conditional statements</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The conditional statements are <bpt id="p1">**</bpt>if<ept id="p1">**</ept>, <bpt id="p2">**</bpt>if ... else<ept id="p2">**</ept>, <bpt id="p3">**</bpt>switch<ept id="p3">**</ept>, and the <bpt id="p4">**</bpt>ternary operator (?)<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You use conditional statements to specify whether a block of code is executed or not.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Different conditional statements offer advantages depending on the details of the situation.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>if and if...else statements</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>if<ept id="p1">**</ept> statement evaluates a conditional expression and executes a statement or set of statements if the conditional expression evaluates to <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can provide an alternative statement or set of statements that are executed if the condition is false by using the <bpt id="p1">**</bpt>else<ept id="p1">**</ept> clause.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The syntax for an if... else statement is <bpt id="p1">**</bpt>if<ept id="p1">**</ept> <bpt id="p2">**</bpt>(<ept id="p2">**</ept> <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> <bpt id="p4">**</bpt>)<ept id="p4">**</ept> <bpt id="p5">*</bpt>statement<ept id="p5">*</ept> <bpt id="p6">**</bpt><ph id="ph1">\[</ph><ept id="p6">**</ept> <bpt id="p7">**</bpt>else<ept id="p7">**</ept> <bpt id="p8">*</bpt>statement<ept id="p8">*</ept> <bpt id="p9">**</bpt><ph id="ph2">\]</ph><ept id="p9">**</ept> .</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Both statements can be compound statements.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The expression in the parentheses (the conditional expression) can be any valid expression that evaluates to <bpt id="p1">**</bpt>true<ept id="p1">**</ept> or <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>All numbers different from zero are <bpt id="p1">**</bpt>true;<ept id="p1">**</ept> all non-empty strings are also <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can nest <bpt id="p1">**</bpt>if<ept id="p1">**</ept> statements, but if the nesting of <bpt id="p2">**</bpt>if<ept id="p2">**</ept> statements becomes too deep, consider using a <bpt id="p3">**</bpt>switch<ept id="p3">**</ept> statement instead.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>if and if... else code examples</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>switch statement</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>switch<ept id="p1">**</ept> statement is a multi-branch language construct.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is in contrast to the <bpt id="p1">**</bpt>if<ept id="p1">**</ept> statement where you have to nest <bpt id="p2">**</bpt>if<ept id="p2">**</ept> statements to create the same effect.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The conditional expression of the <bpt id="p1">**</bpt>switch<ept id="p1">**</ept> is evaluated and checked against each case value.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The case values must be constants that can be evaluated by the compiler.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If a case constant matches the switch expression, the case statement is executed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If the case also contains a <bpt id="p1">**</bpt>break<ept id="p1">**</ept> statement, the program then jumps out of the switch.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If there is no <bpt id="p1">**</bpt>break<ept id="p1">**</ept> statement, the program continues executing the next set of case statements.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If no matches are found, the <bpt id="p1">**</bpt>default<ept id="p1">**</ept> statement is executed.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If there are no matches and no default, none of the statements inside the <bpt id="p1">**</bpt>switch<ept id="p1">**</ept> are executed.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The syntax for a switch statement is: Switch statement = <bpt id="p1">**</bpt>switch<ept id="p1">**</ept> <bpt id="p2">**</bpt>(<ept id="p2">**</ept>  <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> <bpt id="p4">**</bpt>) { { case } <ph id="ph1">\[</ph> default:<ept id="p4">**</ept>  <bpt id="p5">*</bpt>statement<ept id="p5">*</ept>  <bpt id="p6">**</bpt><ph id="ph2">\]</ph> }<ept id="p6">**</ept> The syntax for a case is: case <bpt id="p7">**</bpt>= case<ept id="p7">**</ept>  <bpt id="p8">*</bpt>expression<ept id="p8">*</ept>  <bpt id="p9">**</bpt>{ ,<ept id="p9">**</ept>  <bpt id="p10">*</bpt>expression<ept id="p10">*</ept>  <bpt id="p11">**</bpt>} :<ept id="p11">**</ept>  <bpt id="p12">*</bpt>statement<ept id="p12">*</ept> Each of the previous s<bpt id="p13">*</bpt>tatement<ept id="p13">*</ept> lines can be replaced with a block of statements by enclosing the block in <bpt id="p14">**</bpt>{...}<ept id="p14">**</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>braces.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Switch statement code examples</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Ternary operator (?)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ternary operator<ept id="p1">**</ept> (<bpt id="p2">**</bpt>?<ept id="p2">**</ept>) is a conditional statement that resolves to one of two expressions.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The result can be assigned to a variable.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In comparison, an <bpt id="p1">**</bpt>if<ept id="p1">**</ept> statement provides conditional branching of program flow but cannot be assigned to a variable.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The syntax for the ternary operator is <bpt id="p1">*</bpt>expression1<ept id="p1">*</ept> <bpt id="p2">**</bpt>?<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expression2<ept id="p1">*</ept> <bpt id="p2">**</bpt>:<ept id="p2">**</ept> <bpt id="p3">*</bpt>expression3<ept id="p3">*</ept> <bpt id="p4">*</bpt>expression1<ept id="p4">*</ept> must return a value of <bpt id="p5">**</bpt>true<ept id="p5">**</ept> or <bpt id="p6">**</bpt>false.<ept id="p6">**</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>expression1<ept id="p1">*</ept> is <bpt id="p2">**</bpt>true<ept id="p2">**</ept>, the whole ternary statement returns <bpt id="p3">*</bpt>expression2<ept id="p3">*</ept>; otherwise it returns <bpt id="p4">*</bpt>expression3<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expression2<ept id="p1">*</ept> and <bpt id="p2">*</bpt>expression3<ept id="p2">*</ept> must have the same type.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Ternary code examples</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Loop statements</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>There are three loop statements,  <bpt id="p1">**</bpt>for<ept id="p1">**</ept>, <bpt id="p2">**</bpt>while<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>do...while.<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A loop repeats its statement until the condition set for the loop is <bpt id="p1">**</bpt>false.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Within the loop statements, you can use <bpt id="p1">**</bpt>break<ept id="p1">**</ept> and <bpt id="p2">**</bpt>continue<ept id="p2">**</ept> statements.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>for loop</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop repeatedly executes one or more statements, as long as the conditional expression is <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The statement is executed as many times as the condition is met.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The body of the <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop may be executed zero or more times according to the results of the condition test.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>for<ept id="p1">**</ept> loop differs from other loops because of the following additions because the initial value to a control variable can be assigned and because there is a statement for incrementing or decrementing the variable.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>These additions make it especially useful for traversing lists, containers, and arrays because they have a fixed number of elements.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can also apply a statement to each element and increment your way through the elements, setting the condition to test for the last element.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The syntax for a <bpt id="p1">**</bpt>for<ept id="p1">**</ept> statement is: <bpt id="p2">**</bpt>for<ept id="p2">**</ept> ( initialization ; test ; increment ) { <bpt id="p3">*</bpt>statement<ept id="p3">*</ept> } <bpt id="p4">*</bpt>Statement<ept id="p4">*</ept> can be a block of statements.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>for loop code examples</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>while loop</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>while<ept id="p1">**</ept> loop repeatedly executes one or more statements, as long as the condition expression is <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The statements are executed from zero to many times, depending on how many times the condition is met.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The syntax for a <bpt id="p1">**</bpt>while<ept id="p1">**</ept> loop is: <bpt id="p2">**</bpt>while<ept id="p2">**</ept> <bpt id="p3">**</bpt>(<ept id="p3">**</ept> <bpt id="p4">*</bpt>expression<ept id="p4">*</ept> <bpt id="p5">**</bpt>)<ept id="p5">**</ept> <bpt id="p6">*</bpt>statement<ept id="p6">*</ept> <bpt id="p7">*</bpt>Statement<ept id="p7">*</ept> can be replaced by a block of statements.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>while loop code example</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>do...while loop</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>do...while<ept id="p1">**</ept> loop is similar to the while loop, but differs in that the condition follows the statements to be executed.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The statements are always executed at least once, as the condition is tested after the statements are executed.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>do...while<ept id="p1">**</ept> loop is well-suited for tasks that always must be done at least once, such as getting parameters for a report.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The syntax for a <bpt id="p1">**</bpt>do...while<ept id="p1">**</ept> loop is: <bpt id="p2">**</bpt>do {<ept id="p2">**</ept> <bpt id="p3">*</bpt>statement<ept id="p3">*</ept> <bpt id="p4">**</bpt>} while (<ept id="p4">**</ept> <bpt id="p5">*</bpt>expression<ept id="p5">*</ept> <bpt id="p6">**</bpt>) ;<ept id="p6">**</ept> <bpt id="p7">*</bpt>Statement<ept id="p7">*</ept> can be a block of statements.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>do...while loop code example</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>continue and break statements</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>continue<ept id="p1">**</ept> statement causes execution to move directly to the next iteration of a <bpt id="p2">**</bpt>for<ept id="p2">**</ept>, <bpt id="p3">**</bpt>while,<ept id="p3">**</ept> or <bpt id="p4">**</bpt>do...while<ept id="p4">**</ept> loop.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>do<ept id="p1">**</ept> or <bpt id="p2">**</bpt>while<ept id="p2">**</ept>, the test is executed immediately.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In a <bpt id="p1">**</bpt>for<ept id="p1">**</ept> statement, the increment step is executed.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>break<ept id="p1">**</ept> statement is used within a loop to terminate a loop.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Execution moves directly to the first statement following the loop.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>continue statement code example</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>using statement</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement ensure that objects that implement <bpt id="p2">**</bpt>IDisposable<ept id="p2">**</ept> are disposed of correctly.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When you use an <bpt id="p1">**</bpt>IDisposable<ept id="p1">**</ept> object, you should declare and instantiate it in a <bpt id="p2">**</bpt>using<ept id="p2">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement calls the <bpt id="p2">**</bpt>Dispose<ept id="p2">**</ept> method on the object in the correct way, even if an exception occurs while you are calling methods on the object.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You could achieve the same result by putting the object inside a try block, and then explicitly calling <bpt id="p1">**</bpt>Dispose<ept id="p1">**</ept> in a finally block.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement simplifies the syntax and disposes of the object correctly.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The syntax for a <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement is <bpt id="p2">**</bpt>using<ept id="p2">**</ept> ( <bpt id="p3">*</bpt>expression<ept id="p3">*</ept> ) { <bpt id="p4">*</bpt>statement<ept id="p4">*</ept> }.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Statement<ept id="p1">*</ept> can be a block of statements.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Expression declares and instantiates an object that implements IDisposable.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The following example creates and uses a <bpt id="p1">**</bpt>StreamReader<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Exception handling with throw, try...catch, finally, and retry</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You handle errors by using the <bpt id="p1">**</bpt>throw,<ept id="p1">**</ept> <bpt id="p2">**</bpt>try...catch<ept id="p2">**</ept>, <bpt id="p3">**</bpt>finally<ept id="p3">**</ept> and <bpt id="p4">**</bpt>retry<ept id="p4">**</ept> statements to generate and handle exceptions.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>exception<ept id="p1">**</ept> is a regulated jump away from the sequence of program execution.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The instruction at which program execution resumes is determined by <bpt id="p1">**</bpt>try<ept id="p1">**</ept>...<bpt id="p2">**</bpt>catch<ept id="p2">**</ept> blocks and the type of exception that is thrown.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>An exception is represented by a value of the <bpt id="p1">**</bpt>enum<ept id="p1">**</ept> named <bpt id="p2">**</bpt>Exception<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A frequently thrown exception is <bpt id="p1">**</bpt>Exception::error<ept id="p1">**</ept> enumeration value.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>It is common practice to write diagnostic information to the <bpt id="p1">**</bpt>Infolog<ept id="p1">**</ept> before throwing the exception, and the <bpt id="p2">**</bpt>Global::error<ept id="p2">**</ept> method is often the best way to do that.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For example, your method might receive an input parameter value that is invalid.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Your method can <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> an exception to immediately transfer control to a <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> code block that contains logic to handle this particular error situation.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You do not necessarily need to know the location of the <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block that will receive control when the exception is thrown.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>throw statement</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>You use the <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> keyword to throw an <bpt id="p2">**</bpt>Exception<ept id="p2">**</ept> enum value.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>For example, the following statement throws an error exception:</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Instead of throwing an enum value, it is a best practice to use the <bpt id="p1">**</bpt>Global::error<ept id="p1">**</ept> method output as the operand for <bpt id="p2">**</bpt>throw<ept id="p2">**</ept>:</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Global::error<ept id="p1">**</ept> method can automatically convert a label into the corresponding text.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>This helps you to write code that can be more easily localized.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The static methods on the <bpt id="p1">**</bpt>Global<ept id="p1">**</ept> class can be called without the <bpt id="p2">**</bpt>Global::<ept id="p2">**</ept> prefix.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>Global::error<ept id="p1">**</ept> method can be called simply as</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>try, catch, finally, and retry statements</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>When an exception is thrown, it is first processed through the <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> list of the innermost <bpt id="p2">**</bpt>try<ept id="p2">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block is found that handles the kind of exception that is being thrown, program control jumps to that <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> list has no block that specifies the particular exception, the system passes the exception to the catch list of the next innermost try block.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statements are processed in the same sequence that they appear in the code.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>It is common to have the first <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statement handle the <bpt id="p2">**</bpt>Exception::Error<ept id="p2">**</ept> enumeration value.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>One strategy is to have the last <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statement leave the exception type unspecified.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This means it handles all exceptions that are not handled by a previous <bpt id="p1">**</bpt>catch.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>This strategy is appropriate for the outermost <bpt id="p1">**</bpt>try...catch<ept id="p1">**</ept> blocks.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>try...catch<ept id="p1">**</ept> statements can include an optional <bpt id="p2">**</bpt>finally<ept id="p2">**</ept> clause.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The semantics are the same as they are in C<ph id="ph1">\#</ph>. The statements in the finally clause are executed when control leaves the try block, either normally or through an exception.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>retry<ept id="p1">**</ept> statement can be written only in a <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>retry<ept id="p1">**</ept> statement causes control to jump up to the first line of code in the associated <bpt id="p2">**</bpt>try<ept id="p2">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>retry<ept id="p1">**</ept> statement is used when the cause of the exception can be fixed by the code in the <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>retry<ept id="p1">**</ept> statement gives the code in the <bpt id="p2">**</bpt>try<ept id="p2">**</ept> block another chance to succeed.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>retry<ept id="p1">**</ept> statement erases messages that were written to the <bpt id="p2">**</bpt>Infolog<ept id="p2">**</ept> since program control entered the try block.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> You must prevent your use of <bpt id="p2">**</bpt>retry<ept id="p2">**</ept> from causing an infinite loop.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The best practice is to include a variable in the <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block that you can test to see if you are in a loop.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The system exception handler</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If no <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statement handles the exception, it is handled by the <bpt id="p2">**</bpt>system exception handler<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The system exception handler does not write to the <bpt id="p1">**</bpt>Infolog<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>This means that an unhandled exception can be hard to diagnose.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>We recommended that you do all the following to provide effective exception handling:</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Have a <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block that contains all your statements in the outermost frame on the call stack.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Have an unqualified <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block at the end of your outermost <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> list.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Avoid throwing an <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept> enum value directly.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Throw<ept id="p1">**</ept> the enum value that is returned from one of the <bpt id="p2">**</bpt>Global::error<ept id="p2">**</ept> method, the <bpt id="p3">**</bpt>Global::warning<ept id="p3">**</ept> method, or the <bpt id="p4">**</bpt>Global::info<ept id="p4">**</ept> method on the <bpt id="p5">**</bpt>Global<ept id="p5">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You have the option of omitting the implicit <bpt id="p1">**</bpt>Global::<ept id="p1">**</ept> prefix).</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>When you <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> an exception that has not been displayed in the <bpt id="p2">**</bpt>Infolog<ept id="p2">**</ept>, call the <bpt id="p3">**</bpt>Global::info<ept id="p3">**</ept> function to display it.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exception::CLRError<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Exception::UpdateConflictNotRecovered<ept id="p2">**</ept>, and system kernel exceptions are examples of exceptions that are not automatically displayed in the <bpt id="p3">**</bpt>Infolog<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Exceptions and CLR interop</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You can call .NET Framework classes and methods that reside in assemblies that are managed by the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>When a .NET Framework <bpt id="p1">**</bpt>System.Exception<ept id="p1">**</ept> instance is thrown, your code can <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> it by referencing <bpt id="p3">**</bpt>Exception::CLRError<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Your code can obtain a reference to the <bpt id="p1">**</bpt>System.Exception<ept id="p1">**</ept> instance by calling the <bpt id="p2">**</bpt>CLRInterop::getLastException<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Ensure exceptions are displayed</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Exceptions of type <bpt id="p1">**</bpt>Exception::CLRError<ept id="p1">**</ept> are not displayed in the <bpt id="p2">**</bpt>Infolog<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>These exceptions are not issued by a call to a method such as <bpt id="p1">**</bpt>Global::error<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>In your catch block, your code can call <bpt id="p1">**</bpt>Global::error<ept id="p1">**</ept> to report the specific exception.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Global class methods</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>This section describes some <bpt id="p1">**</bpt>Global<ept id="p1">**</ept> class methods in more detail.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>These class methods include the <bpt id="p1">**</bpt>Global::error<ept id="p1">**</ept> method, the <bpt id="p2">**</bpt>Global::info<ept id="p2">**</ept> method, and the <bpt id="p3">**</bpt>Global::exceptionTextFallThrough<ept id="p3">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Global::error method</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The error method is declared as follows:</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The return type is the <bpt id="p1">**</bpt>Exception::Error<ept id="p1">**</ept> enum value.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>error<ept id="p1">**</ept> method does not throw an exception.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>It only provides an enum value that could be used in a <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> statement throws the exception.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Only the first parameter is required.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The parameters are described in the following list:</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SysInfoLogStr<ept id="p1">**</ept> txt is a <bpt id="p2">**</bpt>str<ept id="p2">**</ept> of the message text.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This can also be a label reference, such as <bpt id="p1">**</bpt><ph id="ph1">strFmt("@SYS12345",</ph> strThingName)<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>URL<ept id="p1">**</ept> helpUrl is a reference to the location of a Help topic in the Application Explorer.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For example:<bpt id="p1">**</bpt>"KernDoc:<ph id="ph1">\\</ph><ph id="ph2">\\</ph><ph id="ph3">\\</ph><ph id="ph4">\\</ph>Functions<ph id="ph5">\\</ph><ph id="ph6">\\</ph>substr"<ept id="p1">**</ept>This parameter value is ignored if <ph id="ph7">\_</ph>sysInfoAction is supplied.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SysInfoAction<ept id="p1">**</ept> <ph id="ph1">\_</ph>sysInfoAction is an instance of a class that extends the <bpt id="p2">**</bpt>SysInfoAction<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The method overrides we recommend for the child class are the <bpt id="p1">**</bpt>description<ept id="p1">**</ept> method, the <bpt id="p2">**</bpt>run<ept id="p2">**</ept> method, the <bpt id="p3">**</bpt>pack<ept id="p3">**</ept> method, and the <bpt id="p4">**</bpt>unpack<ept id="p4">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Global::info method</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Global::info<ept id="p1">**</ept> method is routinely used to display text in the <bpt id="p2">**</bpt>Infolog<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>It is often written in programs as <bpt id="p1">**</bpt>info("My message.");<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Even though the <bpt id="p1">**</bpt>info<ept id="p1">**</ept> method returns an <bpt id="p2">**</bpt>Exception::Info<ept id="p2">**</ept> enumeration value it would be rare to want to throw an <bpt id="p3">**</bpt>Exception::Info<ept id="p3">**</ept> because nothing unexpected has occurred.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Global::exceptionTextFallThrough method</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Occasionally you want to do nothing inside your <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The X++ compiler issues a warning when you have an empty <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>You should avoid this warning by calling the <bpt id="p1">**</bpt>Global::exceptionTextFallThrough<ept id="p1">**</ept> method in the <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The method does nothing, but it satisfies the compiler.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Exceptions inside transactions</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>If an exception is thrown inside a transaction, the transaction is automatically aborted (a <bpt id="p1">**</bpt>ttsAbort<ept id="p1">**</ept> operation occurs).</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This applies both for exceptions thrown manually and for exceptions thrown by the system.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>When an exception is thrown inside a <bpt id="p1">**</bpt>ttsBegin<ept id="p1">**</ept><ph id="ph1"> - </ph><bpt id="p2">**</bpt>ttsCommit<ept id="p2">**</ept> transaction block, no <bpt id="p3">**</bpt>catch<ept id="p3">**</ept> statement inside that transaction block can process the exception.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Instead, the innermost <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statements that are outside the transaction block are the first <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> statements to be tested.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Exceptionhandling code examples</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Display exceptions in the Infolog</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This code example displays exceptions in the Infolog.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>error method to write exception information to the Infolog</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This code example uses the <bpt id="p1">**</bpt>error<ept id="p1">**</ept> method to write exception information to the Infolog.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Handle a CLRError</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This code example handles a <bpt id="p1">**</bpt>CLRError.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Use the retry statement</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This code example uses the <bpt id="p1">**</bpt>retry<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Throw an exception inside a transaction</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>This code example throws an exception in a transaction block.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Use Global::error with a SysInfoAction parameter</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>When your code throws an exception, your code can write messages to the <bpt id="p1">**</bpt>Infolog<ept id="p1">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>You can make those <bpt id="p1">**</bpt>Infolog<ept id="p1">**</ept> messages more helpful by using the <bpt id="p2">**</bpt>SysInfoAction<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>In the following example, a <bpt id="p1">**</bpt>SysInfoAction<ept id="p1">**</ept> parameter is passed in to the <bpt id="p2">**</bpt>Global::error<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>error<ept id="p1">**</ept> method writes the message to the <bpt id="p2">**</bpt>Infolog<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>When the user double-clicks the <bpt id="p1">**</bpt>Infolog<ept id="p1">**</ept> message, the <bpt id="p2">**</bpt>SysInfoAction.run<ept id="p2">**</ept> method is run.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>You can write code in the <bpt id="p1">**</bpt>run<ept id="p1">**</ept> method that helps to diagnose or fix the problem that caused the exception.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The object that is passed in to the <bpt id="p1">**</bpt>Global::error<ept id="p1">**</ept> method is constructed from a class that you write that extends <bpt id="p2">**</bpt>SysInfoAction<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The following code sample is shown in two parts.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The first part shows a job that calls the <bpt id="p1">**</bpt>Global::error<ept id="p1">**</ept> method, and then throws the returned value.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>An instance of the <bpt id="p1">**</bpt>SysInfoAction<ph id="ph1">\_</ph>PrintWindow<ph id="ph2">\_</ph>Demo<ept id="p1">**</ept> class is passed into the <bpt id="p2">**</bpt>error<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The second part shows the <bpt id="p1">**</bpt>SysInfoAction<ph id="ph1">\_</ph>PrintWindow<ph id="ph2">\_</ph>Demo<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Part 1: Call Global::error</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Part 2: The SysInfoAction<ph id="ph1">\_</ph>PrintWindow<ph id="ph2">\_</ph>Demo class</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>List of exceptions</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The exception literals shown in the following table are the values of the <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept> enumeration.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Exception literal</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Break<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Indicates that the user has pressed BREAK or CTRL+C.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CLRError<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Indicates that an error has occurred during the use of the common language runtime (CLR) functionality.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CodeAccessSecurity<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Indicates that an error has occurred during the use of the <bpt id="p1">**</bpt>CodeAccessPermission.demand<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDEerror<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Indicates that an error occurred in the use of the <bpt id="p1">**</bpt>DDE<ept id="p1">**</ept> system class.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Deadlock<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Indicates that there is a database deadlock because several transactions are waiting for each other.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DuplicateKeyException<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The transaction can be retried (use a <bpt id="p1">**</bpt>retry<ept id="p1">**</ept> statement in the <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block).</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DuplicateKeyExceptionNotRecovered<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The code will not be retried.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>This exception cannot be caught inside a transaction.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Error<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Indicates that a fatal error has occurred.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The transaction has been stopped.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Info<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Holds a message for the user.Do not <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> an <bpt id="p2">**</bpt>info<ept id="p2">**</ept> exception.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Internal<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Indicates an internal error in the development system.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Numeric<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Indicates that an error has occurred during the use of the <bpt id="p1">**</bpt>str2int<ept id="p1">**</ept>, <bpt id="p2">**</bpt>str2int64<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>str2num<ept id="p3">**</ept> functions.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sequence<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UpdateConflict<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The transaction can be retried (use a <bpt id="p1">**</bpt>retry<ept id="p1">**</ept> statement in the <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block).</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UpdateConflictNotRecovered<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The code will not be retried.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>This exception cannot be caught within a transaction.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Warning<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Indicates that something exceptional has happened.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The user might have to take action, but the event is not fatal.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Do not throw a <bpt id="p1">**</bpt>warning<ept id="p1">**</ept> exception.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>changeSite, pause, and window statements</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>changeSite<ept id="p1">**</ept>, <bpt id="p2">**</bpt>pause<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>window<ept id="p3">**</ept> keywords are no longer a part of the X++ language.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Using these keywords will cause compilation errors.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>