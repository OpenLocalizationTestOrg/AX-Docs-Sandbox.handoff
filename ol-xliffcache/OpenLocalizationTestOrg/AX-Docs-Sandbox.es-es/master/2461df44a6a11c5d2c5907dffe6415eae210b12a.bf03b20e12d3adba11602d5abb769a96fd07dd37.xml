{"content":"---\n# required metadata\n\ntitle: F Classes - FormTabControl to FormWindowControl\ndescription: API reference for classes from FormTabControl to FormWindowControl.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 63443\nms.assetid: 7a521bd7-da3d-469a-8397-d8fb5e6d5ed1\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# F Classes - FormTabControl to FormWindowControl\n\n[!include[banner](../includes/banner.md)]\n\n\nAPI reference for classes from FormTabControl to FormWindowControl.\n\nClass FormTabControl\n--------------------\n\n    class FormTabControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                                                                                                                             |\n|---------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |                                                                                                                                                                         |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                                                                                                                         |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |                                                                                                                                                                         |\n| public boolean alignChild(\\[boolean value\\])                                                                        |                                                                                                                                                                         |\n| public boolean alignChildren(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                                      | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                         | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                                      | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int allowUserSetup(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public int arrangeGuide(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public int arrangeMethod(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int arrangeWhen(\\[int value\\])                                                                               |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                           | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                                 | Determines whether the control background can be transparent.                                                                                                           |\n| public int beginDrag(int x, int y)                                                                                  | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                           |                                                                                                                                                                         |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                                 |                                                                                                                                                                         |\n| public int bottomMarginValue(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                              | Retrieves the size of the control.                                                                                                                                      |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |                                                                                                                                                                         |\n| public boolean canContain(FormControl control)                                                                      |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                               | Gets or sets the color scheme of the control.                                                                                                                           |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                             |                                                                                                                                                                         |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                                |                                                                                                                                                                         |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                                         |\n| public int columnspaceValue(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int columnsValue(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                                    | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public int containerScrollHorizontalOffset(\\[int value\\])                                                           |                                                                                                                                                                         |\n| public int containerScrollVerticalOffset(\\[int value\\])                                                             |                                                                                                                                                                         |\n| public boolean contains(FormControl control)                                                                        |                                                                                                                                                                         |\n| public int controlCount()                                                                                           |                                                                                                                                                                         |\n| public FormControl controlNum(int controlNo)                                                                        |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                        | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                         |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                          | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                            | Gets or sets a data source that is used by the control or the form.                                                                                                     |\n| public int displayTarget(\\[int value\\])                                                                             | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                                  | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                               | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                           | Determines whether to enable or disable the object.                                                                                                                     |\n| public FormControl getActivePage()                                                                                  |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                          | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasControlPositionOverride()                                                                         |                                                                                                                                                                         |\n| public boolean hasUserSetting()                                                                                     | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                              | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                                  | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                       |                                                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                           | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public boolean horizontalScrollBarVisible(\\[boolean value\\])                                                        |                                                                                                                                                                         |\n| public int hWnd()                                                                                                   | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                        |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                        | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                                       | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public int left(int value, \\[int mode\\])                                                                            | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                             |                                                                                                                                                                         |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                                   |                                                                                                                                                                         |\n| public int leftMarginValue(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                                  | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                                 | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                                      | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.                               |\n| public int neededPermission(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                             |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                                  | Retrieves the parent control for the control.                                                                                                                           |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                                         |\n| public int rightMarginValue(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int scrollbars(\\[int value\\])                                                                                |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public boolean selectControl(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public int showContextMenu(int menuHandle)                                                                          | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showTabs(\\[boolean value\\])                                                                          |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                              | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                        |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                                     |                                                                                                                                                                         |\n| public TabStyle styleValue()                                                                                        |                                                                                                                                                                         |\n| public int tab(\\[int value\\], \\[AutoMode mode\\])                                                                    |                                                                                                                                                                         |\n| public int tabAppearance(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public boolean tabAutoChange(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public boolean tabChange(int FromTab)                                                                               |                                                                                                                                                                         |\n| public int tabLayout(\\[int value\\])                                                                                 |                                                                                                                                                                         |\n| public AutoMode tabMode(\\[AutoMode mode\\])                                                                          |                                                                                                                                                                         |\n| public int tabPlacement(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public int tabs(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public int tabValue(\\[int value\\])                                                                                  |                                                                                                                                                                         |\n| public str toolTip()                                                                                                | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                             | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                              |                                                                                                                                                                         |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                                    |                                                                                                                                                                         |\n| public int topMarginValue(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                                   | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                                  | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                                  | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                              | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                             | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                               | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                                | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                                  | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                          | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                            | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                            | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                         | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                                  | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                                 | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public boolean verticalScrollBarVisible(\\[boolean value\\])                                                          |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                                      | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                           | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                                                                                                                                  |\n| public void setFocus()                                                                                              | Sets the focus on the control.                                                                                                                                          |\n| public void lostFocus()                                                                                             | Indicates that the control has lost focus.                                                                                                                              |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void endDrag()                                                                                               | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |                                                                                                                                                                         |\n| public void gotFocus()                                                                                              | Indicates that the control has received focus.                                                                                                                          |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void jumpRef()                                                                                               |                                                                                                                                                                         |\n| public void paste()                                                                                                 | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void arrange()                                                                                               |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                                         |\n| public void context()                                                                                               | Shows the shortcut menu for the control.                                                                                                                                |\n| public void copy()                                                                                                  | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void filter(\\[str filterStr\\])                                                                               |                                                                                                                                                                         |\n| public void resetUserSetting()                                                                                      | Resets the user settings for the control.                                                                                                                               |\n| public void cut()                                                                                                   | Cuts the contents of the control.                                                                                                                                       |\n| public void mouseLeave()                                                                                            | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void displayControl()                                                                                        | Displays the control.                                                                                                                                                   |\n| private void OnTabChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                       |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                              | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void dragLeave()                                                                                             | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void tabChanged(int FromTab, int ToTab)                                                                      |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                                   | Specifies the preferred column width and height for the form control.                                                                                                   |\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                        |\n|-------|------------------------------|\n| 0     | Default                      |\n| 1     | The MicrosoftWindows palette |\n| 2     | The true-color scheme        |\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method containerScrollHorizontalOffset\n\n    public int containerScrollHorizontalOffset([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method containerScrollVerticalOffset\n\n    public int containerScrollVerticalOffset([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that is used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe ID of the data source to use.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method getActivePage\n\n    public FormControl getActivePage()\n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasControlPositionOverride\n\n    public boolean hasControlPositionOverride()\n\n#### Return Value\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box. The Help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method horizontalScrollBarVisible\n\n    public boolean horizontalScrollBarVisible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterId  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method scrollbars\n\n    public int scrollbars([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method selectControl\n\n    public boolean selectControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showTabs\n\n    public boolean showTabs([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method styleValue\n\n    public TabStyle styleValue()\n\n#### Return Value\n\n### Method tab\n\n    public int tab([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method tabAppearance\n\n    public int tabAppearance([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabAutoChange\n\n    public boolean tabAutoChange([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabChange\n\n    public boolean tabChange(int FromTab)\n\n#### Parameters\n\nFromTab  \n\n#### Return Value\n\n### Method tabLayout\n\n    public int tabLayout([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabMode\n\n    public AutoMode tabMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method tabPlacement\n\n    public int tabPlacement([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabs\n\n    public int tabs([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabValue\n\n    public int tabValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalScrollBarVisible\n\n    public boolean verticalScrollBarVisible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method arrange\n\n    public void arrange()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method OnTabChanged\n\n    private void OnTabChanged([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method tabChanged\n\n    public void tabChanged(int FromTab, int ToTab)\n\n#### Parameters\n\nFromTab  \n\n<!-- -->\n\nToTab  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n## Class FormTableCell\n    class FormTableCell extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                | Description |\n|-------------------------------------------------------|-------------|\n| public int colSpan(\\[int value\\])                     |             |\n| public AnyType data(\\[AnyType value\\])                |             |\n| public FormControl editControl(\\[FormControl value\\]) |             |\n| public Object object(\\[Object value\\])                |             |\n| public int rowSpan(\\[int value\\])                     |             |\n\n### Method colSpan\n\n    public int colSpan([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method data\n\n    public AnyType data([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method editControl\n\n    public FormControl editControl([FormControl value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method object\n\n    public Object object([Object value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rowSpan\n\n    public int rowSpan([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n## Class FormTableControl\n    class FormTableControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                                                                                                                             |\n|---------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |                                                                                                                                                                         |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                                                                                                                         |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |                                                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                                      | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                         | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                                      | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                           | Gets or sets the background color of the control.                                                                                                                       |\n| public int beginDrag(int x, int y)                                                                                  | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bottomMargin(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                              | Retrieves the size of the control.                                                                                                                                      |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |                                                                                                                                                                         |\n| public boolean canContain(FormControl control)                                                                      |                                                                                                                                                                         |\n| public FormTableCell cell(\\[int column\\], \\[int row\\])                                                              |                                                                                                                                                                         |\n| public str colLabel(int column)                                                                                     |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                               | Gets or sets the color scheme of the control.                                                                                                                           |\n| public int column(\\[int value\\])                                                                                    |                                                                                                                                                                         |\n| public int columns(\\[int value\\])                                                                                   |                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                                    | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public boolean contains(FormControl control)                                                                        |                                                                                                                                                                         |\n| public int controlCount()                                                                                           |                                                                                                                                                                         |\n| public FormControl controlNum(int controlNo)                                                                        |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                        | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public AnyType data(int column, int row)                                                                            |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                          | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int displayTarget(\\[int value\\])                                                                             | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                                  | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                               | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public FormControl editControl(int Column, int Row)                                                                 |                                                                                                                                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                           | Determines whether to enable or disable the object.                                                                                                                     |\n| public boolean gridLines(\\[boolean value\\])                                                                         |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                          | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                                     | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                              | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                                  | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                           | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public boolean highlightActive(\\[boolean value\\])                                                                   |                                                                                                                                                                         |\n| public int hWnd()                                                                                                   | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                        |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                        | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                                       | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean leave()                                                                                              |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                            | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMargin(\\[int value\\])                                                                                |                                                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                                  | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                                 | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                                      | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.                               |\n| public int neededPermission(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                             |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                                  | Retrieves the parent control for the control.                                                                                                                           |\n| public int rightMargin(\\[int value\\])                                                                               |                                                                                                                                                                         |\n| public int row(\\[int value\\])                                                                                       |                                                                                                                                                                         |\n| public str rowLabel(int row)                                                                                        |                                                                                                                                                                         |\n| public int rows(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public boolean showColLabels(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public int showContextMenu(int menuHandle)                                                                          | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showRowLabels(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                              | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public str toolTip()                                                                                                | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                             | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMargin(\\[int value\\])                                                                                 |                                                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                                   | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                                  | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                                  | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                              | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                             | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                               | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                                | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                                  | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                          | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                            | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                            | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                         | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                                  | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                                 | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                                      | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                           | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                                                                                                                                  |\n| public void prefColumnSize(int width, int height)                                                                   | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void setColLabel(int column, str text)                                                                       |                                                                                                                                                                         |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void resetUserSetting()                                                                                      | Resets the user settings for the control.                                                                                                                               |\n| public void lostFocus()                                                                                             | Indicates that the control has lost focus.                                                                                                                              |\n| public void inputSearch(str searchStr)                                                                              | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void dragLeave()                                                                                             | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |                                                                                                                                                                         |\n| public void arrange()                                                                                               |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                          |                                                                                                                                                                         |\n| public void deleteRows(int deleteAfterRow, int rows)                                                                | ;                                                                                                                                                                       |\n| public void endDrag()                                                                                               | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void deleteCols(int deleteAfterColumn, int columns)                                                          |                                                                                                                                                                         |\n| public void clear()                                                                                                 |                                                                                                                                                                         |\n| public void insertRows(int insertAfterRow, int rows)                                                                |                                                                                                                                                                         |\n| public void gotFocus()                                                                                              | Indicates that the control has received focus.                                                                                                                          |\n| public void displayControl()                                                                                        | Displays the control.                                                                                                                                                   |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                            |                                                                                                                                                                         |\n| public void copy()                                                                                                  | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void setRowLabel(int row, str text)                                                                          |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                            | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void paste()                                                                                                 | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void enter()                                                                                                 |                                                                                                                                                                         |\n| public void cut()                                                                                                   | Cuts the contents of the control.                                                                                                                                       |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                                         |\n| public void updateCell(int column, int row)                                                                         |                                                                                                                                                                         |\n| public void insertCols(int insertAferColumn, int columns)                                                           |                                                                                                                                                                         |\n| public void activeCellChanged()                                                                                     |                                                                                                                                                                         |\n| public void context()                                                                                               | Shows the shortcut menu for the control.                                                                                                                                |\n| public void setFocus()                                                                                              | Sets the focus on the control.                                                                                                                                          |\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nIf supplied, the property is set to this value.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method cell\n\n    public FormTableCell cell([int column], [int row])\n\n#### Parameters\n\ncolumn  \n\n<!-- -->\n\nrow  \n\n#### Return Value\n\n### Method colLabel\n\n    public str colLabel(int column)\n\n#### Parameters\n\ncolumn  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                        |\n|-------|------------------------------|\n| 0     | Default                      |\n| 1     | The MicrosoftWindows palette |\n| 2     | The true-color scheme        |\n\n### Method column\n\n    public int column([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columns\n\n    public int columns([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method data\n\n    public AnyType data(int column, int row)\n\n#### Parameters\n\ncolumn  \n\n<!-- -->\n\nrow  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave Method, the dragOver Method, and the dragOverEx Method to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method editControl\n\n    public FormControl editControl(int Column, int Row)\n\n#### Parameters\n\nColumn  \n\n<!-- -->\n\nRow  \n\n#### Return Value\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method gridLines\n\n    public boolean gridLines([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method highlightActive\n\n    public boolean highlightActive([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMargin\n\n    public int leftMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterId  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method rightMargin\n\n    public int rightMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method row\n\n    public int row([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rowLabel\n\n    public str rowLabel(int row)\n\n#### Parameters\n\nrow  \n\n#### Return Value\n\n### Method rows\n\n    public int rows([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showColLabels\n\n    public boolean showColLabels([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showRowLabels\n\n    public boolean showRowLabels([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMargin\n\n    public int topMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method setColLabel\n\n    public void setColLabel(int column, str text)\n\n#### Parameters\n\ncolumn  \n\n<!-- -->\n\ntext  \n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method arrange\n\n    public void arrange()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method deleteRows\n\n;\n\n    public void deleteRows(int deleteAfterRow, int rows)\n\n#### Parameters\n\ndeleteAfterRow  \n\n<!-- -->\n\nrows  \n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method deleteCols\n\n    public void deleteCols(int deleteAfterColumn, int columns)\n\n#### Parameters\n\ndeleteAfterColumn  \n\n<!-- -->\n\ncolumns  \n\n### Method clear\n\n    public void clear()\n\n### Method insertRows\n\n    public void insertRows(int insertAfterRow, int rows)\n\n#### Parameters\n\ninsertAfterRow  \n\n<!-- -->\n\nrows  \n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method setRowLabel\n\n    public void setRowLabel(int row, str text)\n\n#### Parameters\n\nrow  \n\n<!-- -->\n\ntext  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method enter\n\n    public void enter()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method updateCell\n\n    public void updateCell(int column, int row)\n\n#### Parameters\n\ncolumn  \n\n<!-- -->\n\nrow  \n\n### Method insertCols\n\n    public void insertCols(int insertAferColumn, int columns)\n\n#### Parameters\n\ninsertAferColumn  \n\n<!-- -->\n\ncolumns  \n\n### Method activeCellChanged\n\n    public void activeCellChanged()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n## Class FormTabPageControl\n    class FormTabPageControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                                                                                                                             |\n|---------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |                                                                                                                                                                         |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                                                                                                                         |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |                                                                                                                                                                         |\n| public boolean alignChild(\\[boolean value\\])                                                                        |                                                                                                                                                                         |\n| public boolean alignChildren(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                                      | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                         | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowPageDeactivate()                                                                                |                                                                                                                                                                         |\n| public boolean allowSysSetup()                                                                                      | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int allowUserSetup(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public int arrangeGuide(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public int arrangeMethod(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int arrangeWhen(\\[int value\\])                                                                               |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                           | Gets or sets the background color of the control.                                                                                                                       |\n| public Image backgroundImage(\\[Image image\\], \\[int drawMode\\])                                                     |                                                                                                                                                                         |\n| public int backStyle(\\[int value\\])                                                                                 | Determines whether the control background can be transparent.                                                                                                           |\n| public int beginDrag(int x, int y)                                                                                  | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                           |                                                                                                                                                                         |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                                 |                                                                                                                                                                         |\n| public int bottomMarginValue(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                              | Retrieves the size of the control.                                                                                                                                      |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |                                                                                                                                                                         |\n| public boolean canContain(FormControl control)                                                                      |                                                                                                                                                                         |\n| public str caption(\\[str value\\])                                                                                   | Gets or set the caption of the control.                                                                                                                                 |\n| public int colorScheme(\\[int value\\])                                                                               | Gets or sets the color scheme of the control.                                                                                                                           |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                             |                                                                                                                                                                         |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                                |                                                                                                                                                                         |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                                         |\n| public int columnspaceValue(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int columnsValue(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                                    | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public int containerScrollHorizontalOffset(\\[int value\\])                                                           |                                                                                                                                                                         |\n| public int containerScrollVerticalOffset(\\[int value\\])                                                             |                                                                                                                                                                         |\n| public boolean contains(FormControl control)                                                                        |                                                                                                                                                                         |\n| public int controlCount()                                                                                           |                                                                                                                                                                         |\n| public FormControl controlNum(int controlNo)                                                                        |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                        | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                         |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                          | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                            | Gets or sets a data source that will be used by the control or the form.                                                                                                |\n| public int displayTarget(\\[int value\\])                                                                             | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                                  | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                               | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                           | Determines whether to enable or disable the object.                                                                                                                     |\n| public int fastTabExpanded(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                          | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                                     | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                              | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                                  | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                       |                                                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                           | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public boolean horizontalScrollBarVisible(\\[boolean value\\])                                                        |                                                                                                                                                                         |\n| public int hWnd()                                                                                                   | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isActivePage()                                                                                       |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                        |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                        | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isExpanded()                                                                                         |                                                                                                                                                                         |\n| public boolean isRestricted()                                                                                       | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public int left(int value, \\[int mode\\])                                                                            | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                             |                                                                                                                                                                         |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                                   |                                                                                                                                                                         |\n| public int leftMarginValue(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                                  | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                                 | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                                      | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.                               |\n| public int neededPermission(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                             |                                                                                                                                                                         |\n| public int panelStyle(\\[int value\\])                                                                                |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                                  | Retrieves the parent control for the control.                                                                                                                           |\n| public str parentPage(\\[str value\\])                                                                                |                                                                                                                                                                         |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                                         |\n| public int rightMarginValue(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int scrollbars(\\[int value\\])                                                                                |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                          | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean skip(\\[boolean value\\])                                                                              | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                        |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                                     |                                                                                                                                                                         |\n| public int tabAppearance(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public boolean tabAutoChange(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public str toolTip()                                                                                                | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                             | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                              |                                                                                                                                                                         |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                                    |                                                                                                                                                                         |\n| public int topMarginValue(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                                   | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                                  | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                                  | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                              | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                             | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                               | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                                | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                                  | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                          | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                            | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                            | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                         | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                                  | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                                 | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public boolean verticalScrollBarVisible(\\[boolean value\\])                                                          |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                                      | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                           | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                                                                                                                                  |\n| public void pageActivated()                                                                                         |                                                                                                                                                                         |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                                         |\n| public void collapse()                                                                                              |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |                                                                                                                                                                         |\n| private void OnExpanding(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void jumpRef()                                                                                               |                                                                                                                                                                         |\n| public void endDrag()                                                                                               | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void filter(\\[str filterStr\\])                                                                               |                                                                                                                                                                         |\n| public void paste()                                                                                                 | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void setFocus()                                                                                              | Sets the focus on the control.                                                                                                                                          |\n| public void resetUserSetting()                                                                                      | Resets the user settings for the control.                                                                                                                               |\n| private void OnExpanded(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                            | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void arrange()                                                                                               |                                                                                                                                                                         |\n| private void OnPageActivated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void expand()                                                                                                |                                                                                                                                                                         |\n| public void gotFocus()                                                                                              | Indicates that the control has received focus.                                                                                                                          |\n| public void prefColumnSize(int width, int height)                                                                   | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void copy()                                                                                                  | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void activatePage()                                                                                          |                                                                                                                                                                         |\n| public void context()                                                                                               | Shows the shortcut menu for the control.                                                                                                                                |\n| public void cut()                                                                                                   | Cuts the contents of the control.                                                                                                                                       |\n| public void lostFocus()                                                                                             | Indicates that the control has lost focus.                                                                                                                              |\n| public void displayControl()                                                                                        | Displays the control.                                                                                                                                                   |\n| private void OnAllowPageDeactivate(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                              |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                              | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void dragLeave()                                                                                             | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                                         |\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowPageDeactivate\n\n    public boolean allowPageDeactivate()\n\n#### Return Value\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value of the property; optional\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backgroundImage\n\n    public Image backgroundImage([Image image], [int drawMode])\n\n#### Parameters\n\nimage  \n\n<!-- -->\n\ndrawMode  \n\n#### Return Value\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                        |\n|-------|------------------------------|\n| 0     | Default                      |\n| 1     | The MicrosoftWindows palette |\n| 2     | The true-color scheme        |\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method containerScrollHorizontalOffset\n\n    public int containerScrollHorizontalOffset([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method containerScrollVerticalOffset\n\n    public int containerScrollVerticalOffset([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave Method, the dragOver Method, and the dragOverEx Method to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method fastTabExpanded\n\n    public int fastTabExpanded([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method horizontalScrollBarVisible\n\n    public boolean horizontalScrollBarVisible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isActivePage\n\n    public boolean isActivePage()\n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isExpanded\n\n    public boolean isExpanded()\n\n#### Return Value\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterId  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name assigned to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method panelStyle\n\n    public int panelStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method parentPage\n\n    public str parentPage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method scrollbars\n\n    public int scrollbars([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabAppearance\n\n    public int tabAppearance([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabAutoChange\n\n    public boolean tabAutoChange([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalScrollBarVisible\n\n    public boolean verticalScrollBarVisible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method pageActivated\n\n    public void pageActivated()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method collapse\n\n    public void collapse()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method OnExpanding\n\n    private void OnExpanding([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method OnExpanded\n\n    private void OnExpanded([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method arrange\n\n    public void arrange()\n\n### Method OnPageActivated\n\n    private void OnPageActivated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method expand\n\n    public void expand()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method activatePage\n\n    public void activatePage()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method OnAllowPageDeactivate\n\n    private void OnAllowPageDeactivate([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n## Class FormTimeControl\n    class FormTimeControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user begins dragging a form control.                                                                                                                 |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that was used to output text in the control.                                                                                            |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int charFromPos(int x, int y)                                                                        |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public int dataFieldArrayIndex()                                                                            |                                                                                                                                                                         |\n| public FieldName dataFieldName()                                                                            |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                                                |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Indicates whether to enable or disable drag-and-drop operations for the control.                                                                                        |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public container getCursorPos()                                                                             |                                                                                                                                                                         |\n| public int getFirstVisibleLine()                                                                            |                                                                                                                                                                         |\n| public str getLine(int lineNo)                                                                              |                                                                                                                                                                         |\n| public int getLineCount()                                                                                   |                                                                                                                                                                         |\n| public container getSelection()                                                                             |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                                                         |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int lineFromChar(int charIndex)                                                                      |                                                                                                                                                                         |\n| public int lineIndex(int lineNo)                                                                            |                                                                                                                                                                         |\n| public int lineLength(int lineNo)                                                                           |                                                                                                                                                                         |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.                               |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public container posFromChar(int charIndex)                                                                 |                                                                                                                                                                         |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                                                         |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int timeFormat(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int timeHours(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int timeMinute(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int timeSeconds(\\[int value\\])                                                                       |                                                                                                                                                                         |\n| public int timeSeparator(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userFastTabSummary(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int value(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])         |                                                                                                                                                                         |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void textChange()                                                                                    |                                                                                                                                                                         |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void setCursorPos(int x, int y)                                                                      |                                                                                                                                                                         |\n| public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])       |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void lineScroll(int dx, int dy)                                                                      |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void performFormLookup(xFormRun form)                                                                |                                                                                                                                                                         |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void scrollCursor()                                                                                  |                                                                                                                                                                         |\n| public void pasteText(str pasteStr, \\[boolean InsertSel\\])                                                  |                                                                                                                                                                         |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void setSelection(int charIndexFrom, int charIndexTo)                                                |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user begins dragging a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font that was used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows.\n\n| Value | Description |\n|-------|-------------|\n| 0     | Auto        |\n| 1     | 3D          |\n| 2     | Single line |\n| 3     | Flat        |\n| 4     | None        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table.\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value | Description   |\n|-------|---------------|\n| 222   | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method charFromPos\n\n    public int charFromPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                 |\n|-------|-----------------------|\n| 0     | Default               |\n| 1     | The Windows palette   |\n| 2     | The true-color scheme |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key being assigned to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataFieldArrayIndex\n\n    public int dataFieldArrayIndex()\n\n#### Return Value\n\n### Method dataFieldName\n\n    public FieldName dataFieldName()\n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nIndicates whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, 0.\n\n#### Remarks\n\nUse the dragLeave Method, the dragOver Method, and the dragOverEx Method to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method getCursorPos\n\n    public container getCursorPos()\n\n#### Return Value\n\n### Method getFirstVisibleLine\n\n    public int getFirstVisibleLine()\n\n#### Return Value\n\n### Method getLine\n\n    public str getLine(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method getLineCount\n\n    public int getLineCount()\n\n#### Return Value\n\n### Method getSelection\n\n    public container getSelection()\n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineFromChar\n\n    public int lineFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method lineIndex\n\n    public int lineIndex(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lineLength\n\n    public int lineLength(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method posFromChar\n\n    public container posFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeFormat\n\n    public int timeFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeHours\n\n    public int timeHours([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeMinute\n\n    public int timeMinute([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeSeconds\n\n    public int timeSeconds([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeSeparator\n\n    public int timeSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userFastTabSummary\n\n    public int userFastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method value\n\n    public int value([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method performTypeLookup\n\n    public void performTypeLookup([int userType], [int arrayIndex], [SelectableDataArea company])\n\n#### Parameters\n\nuserType  \n\n<!-- -->\n\narrayIndex  \n\n<!-- -->\n\ncompany  \n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method textChange\n\n    public void textChange()\n\n### Method lookup\n\n    public void lookup()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method undo\n\n    public void undo()\n\n### Method setCursorPos\n\n    public void setCursorPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n### Method performDBLookup\n\n    public void performDBLookup([FieldId fieldId], [TableId tableId], [SelectableDataArea company])\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\ntableId  \n\n<!-- -->\n\ncompany  \n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method enter\n\n    public void enter()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method lineScroll\n\n    public void lineScroll(int dx, int dy)\n\n#### Parameters\n\ndx  \n\n<!-- -->\n\ndy  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method performFormLookup\n\n    public void performFormLookup(xFormRun form)\n\n#### Parameters\n\nform  \n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method scrollCursor\n\n    public void scrollCursor()\n\n### Method pasteText\n\n    public void pasteText(str pasteStr, [boolean InsertSel])\n\n#### Parameters\n\npasteStr  \n\n<!-- -->\n\nInsertSel  \n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method setSelection\n\n    public void setSelection(int charIndexFrom, int charIndexTo)\n\n#### Parameters\n\ncharIndexFrom  \n\n<!-- -->\n\ncharIndexTo  \n\n## Class FormTreeControl\n    class FormTreeControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public int add(int parent, int insertAfter, str Text, \\[int image\\], \\[int children\\])                      |                                                                                                                                                                         |\n| public int addItem(int parent, int insertAfter, FormTreeItem item)                                          |                                                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can modify the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form tree control.                                                                                                             |\n| public boolean beginLabelEdit(int Idx, str text, AnyType data)                                              |                                                                                                                                                                         |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the font weight that is used to display text in the control.                                                                                               |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the border for the control.                                                                                                                   |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public boolean canScroll(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean cascadeSelect(\\[boolean value\\])                                                             |                                                                                                                                                                         |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public boolean checkBox(\\[boolean value\\])                                                                  |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Returns a list that contains the IDs of configuration keys that are in effect for the control.                                                                          |\n| public int copyItem(int Idx, int newParent, \\[int insertAfter\\])                                            |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public Imagelist createDragImagelist()                                                                      |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public boolean delete(int Idx)                                                                              | Deletes the specified item from the form tree control.                                                                                                                  |\n| public boolean deleteAll()                                                                                  | Deletes all items from the form tree control.                                                                                                                           |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether drag-and-drop operations are enabled or disabled for the control.                                                                                    |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Returns the text that is displayed when the form tree control is dragged.                                                                                               |\n| public boolean editLabels(\\[boolean value\\])                                                                |                                                                                                                                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether the object is enabled or disabled.                                                                                                                   |\n| public int expand(int Idx, \\[FormTreeExpand action\\])                                                       |                                                                                                                                                                         |\n| public boolean expanding(int Idx, FormTreeExpand action, AnyType data)                                      |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font that is used for the text in the control.                                                                                             |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the font size that is used for the text in the control.                                                                                                    |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the color that is used for the text in the control.                                                                                                        |\n| public int getChild(int Idx)                                                                                |                                                                                                                                                                         |\n| public int getFirstSelected()                                                                               |                                                                                                                                                                         |\n| public int getFirstVisible()                                                                                |                                                                                                                                                                         |\n| public Imagelist getImagelist()                                                                             |                                                                                                                                                                         |\n| public FormTreeItem getItem(int Idx)                                                                        |                                                                                                                                                                         |\n| public int getNextSelected(int idx)                                                                         |                                                                                                                                                                         |\n| public int getNextSibling(int Idx)                                                                          |                                                                                                                                                                         |\n| public int getNextVisible(int Idx)                                                                          |                                                                                                                                                                         |\n| public int getParent(int Idx)                                                                               |                                                                                                                                                                         |\n| public int getPrevSelected(int idx)                                                                         |                                                                                                                                                                         |\n| public int getPrevSibling(int Idx)                                                                          |                                                                                                                                                                         |\n| public int getPrevVisible(int Idx)                                                                          |                                                                                                                                                                         |\n| public int getRoot()                                                                                        |                                                                                                                                                                         |\n| public int getSelectedCount()                                                                               |                                                                                                                                                                         |\n| public int getSelection()                                                                                   |                                                                                                                                                                         |\n| public Imagelist getStateImagelist()                                                                        |                                                                                                                                                                         |\n| public int getVisibleCount()                                                                                | Returns the number of visible items in the tree control.                                                                                                                |\n| public boolean hasButtons(\\[boolean value\\])                                                                | Returns a value that indicates whether the tree control uses expand/collapse buttons.                                                                                   |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the tree control have changed.                                                                           |\n| public boolean hasLines(\\[boolean value\\])                                                                  | Returns a value that indicates whether the tree control displays tree connector lines.                                                                                  |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Returns the Help text for the control.                                                                                                                                  |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public container hitTest(int x, int y)                                                                      |                                                                                                                                                                         |\n| public int hWnd()                                                                                           | Returns the Windows handle for the control.                                                                                                                             |\n| public boolean isContainer()                                                                                | Returns a value that indicates whether the control is a container.                                                                                                      |\n| public boolean isDisplayed()                                                                                | Returns a value that indicates whether the control is displayed.                                                                                                        |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean italic(\\[boolean value\\])                                                                    | Sets or returns a value that indicates whether the text in the control is italic.                                                                                       |\n| public boolean keyDown(int vKey, boolean Ctrl, boolean Shift)                                               |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean linesAtRoot(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks while the mouse pointer is over the control.                                                                                             |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button while the mouse pointer is over the control.                                                                          |\n| public int moveItem(int Idx, int newParent, \\[int insertAfter\\])                                            |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.                               |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public boolean rowSelect(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int select(int Idx)                                                                                  |                                                                                                                                                                         |\n| public int selectEx(int Idx, boolean setSelection)                                                          |                                                                                                                                                                         |\n| public boolean selectionChanging(FormTreeItem OldItem, FormTreeItem NewItem, FormTreeSelect how)            |                                                                                                                                                                         |\n| public int selectItems(int fromIdx, int toIdx)                                                              |                                                                                                                                                                         |\n| public int selectSetFirstVisible(int Idx)                                                                   |                                                                                                                                                                         |\n| public boolean setInsertMark(int Idx, boolean After)                                                        |                                                                                                                                                                         |\n| public boolean setItem(FormTreeItem item)                                                                   |                                                                                                                                                                         |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showSelAlways(\\[boolean value\\])                                                             |                                                                                                                                                                         |\n| public boolean singleSelection(\\[boolean value\\])                                                           |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public str toolTip()                                                                                        | Returns the tooltip text for the control.                                                                                                                               |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public boolean trackSelect(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Returns or sets the value that indicates whether the form tree control is hidden from the user.                                                                         |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Sets or retrieves the user prompt text for the control.                                                                                                                 |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode for the width of the control.                                                                                                         |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void checkedStateChanged(int Idx, FormTreeCheckedState newState)                                     |                                                                                                                                                                         |\n| public void endLabelEdit(int Idx, str text, AnyType data)                                                   |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control.                                                                                                       |\n| private void OnExpanding(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void paste()                                                                                         | Pastes the form tree control in the form.                                                                                                                               |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void itemMoved(int OldIdx, int NewIdx)                                                               |                                                                                                                                                                         |\n| public void expanded(int Idx, FormTreeExpand action, AnyType data)                                          |                                                                                                                                                                         |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                         |                                                                                                                                                                         |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void mouseLeave()                                                                                    | Is called when the user moves the mouse pointer out of the control.                                                                                                     |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form tree control.                                                                                                      |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void itemCopy(int OldIdx, int NewIdx)                                                                |                                                                                                                                                                         |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form tree control.                                                                                              |\n| public void setImagelist(Imagelist imageList)                                                               |                                                                                                                                                                         |\n| private void OnExpanded(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void itemDeleted(int Idx, AnyType data)                                                              |                                                                                                                                                                         |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void setStateImagelist(Imagelist imageList)                                                          |                                                                                                                                                                         |\n| public void endEditLabel(boolean cancel)                                                                    |                                                                                                                                                                         |\n| public void copy()                                                                                          | Copies the form tree control.                                                                                                                                           |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void selectionChanged(FormTreeItem OldItem, FormTreeItem NewItem, FormTreeSelect how)                | Indicates that the user has changed the selected item in the form tree control.                                                                                         |\n| public void beginEditLabel(int Idx)                                                                         |                                                                                                                                                                         |\n\n### Method add\n\n    public int add(int parent, int insertAfter, str Text, [int image], [int children])\n\n#### Parameters\n\nparent  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\nText  \n\n<!-- -->\n\nimage  \n\n<!-- -->\n\nchildren  \n\n#### Return Value\n\n### Method addItem\n\n    public int addItem(int parent, int insertAfter, FormTreeItem item)\n\n#### Parameters\n\nparent  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\nitem  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can modify the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be modified; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n#### Examples\n\nThe following example shows how to return and set the value of the allowEdit property.\n\n    // Return the value. \n    info (strfmt(\"allowEdit: %1\", this.allowEdit())); \n    // Set the value. \n    this.allowEdit(false);\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the autoDeclaration property.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the background color of the control.\n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be 0 (zero).\n-   The maximum value for a single byte is 255.\n\n#### Examples\n\nThe following example shows how to return and set the background color for a control.\n\n    // Retrieve the existing background color. \n    info (strfmt(\"Background color: %1\", this.backgroundColor())); \n    // Set the background color. \n    this.backgroundColor(WindowsPalette::DarkShadow3D);\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the background style of the control.\n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n#### Examples\n\nThe following example shows how to return and set the background style.\n\n    // Return the background style. \n    info (strfmt(\"Background style: %1\", this.backStyle())); \n    // Set the background style. \n    this.backStyle(FormBackStyle::Transparent);\n\n### Method beginDrag\n\nIs called when the user starts to drag a form tree control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn Integer data type that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn Integer data type that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, the user presses the mouse button in the control area and then moves the mouse pointer.\n\n#### Examples\n\nThe following example displays the x-coordinates and y-coordinates in the Infolog when the user starts to drag the form tree control.\n\n    public int beginDrag(int _x, int _y) \n    { \n        int ret; \n        info(strfmt(\"beginDrag (x, y) : (%1, %2)\", _x, _y)); \n        ret = super(_x, _y); \n        return ret; \n    }\n\n### Method beginLabelEdit\n\n    public boolean beginLabelEdit(int Idx, str text, AnyType data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\ntext  \n\n<!-- -->\n\ndata  \n\n#### Return Value\n\n### Method bold\n\nGets or sets the font weight that is used to display text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the bold setting for the control.\n\n#### Return Value\n\nAn integer value between 0 (zero) and 9, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 – Use the default font weight.\n-   1 – Thin.\n-   2 – Extra-light.\n-   3 – Light.\n-   4 – Normal.\n-   5 – Medium.\n-   6 – Semibold.\n-   7 – Bold.\n-   8 – Extra-bold.\n-   9 – Heavy.\n\n### Method border\n\nGets or sets the style of the border for the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the border style for the control; optional.\n\n#### Return Value\n\nAn integer between 0 (zero) and 4, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the border for the control as follows.\n\n| Value | Description |\n|-------|-------------|\n| 0     | Auto        |\n| 1     | 3D          |\n| 2     | Single line |\n| 3     | Flat        |\n| 4     | None        |\n\n#### Examples\n\nThe following example shows how to retrieve and set the border style for a control.\n\n    // Retrieve the border style. \n    info (strfmt(\"border: %1\", this.border())); \n    // Set the border style. \n    this.border(2);\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method canScroll\n\n    public boolean canScroll([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method cascadeSelect\n\n    public boolean cascadeSelect([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table.\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value | Description   |\n|-------|---------------|\n| 222   | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method checkBox\n\n    public boolean checkBox([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                 |\n|-------|-----------------------|\n| 0     | Default               |\n| 1     | The Windows palette   |\n| 2     | The true-color scheme |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control.\n\n#### Return Value\n\nThe ID of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n#### Examples\n\nThe following example shows how to set and retrieve the configuration key for a control.\n\n    DictConfigurationKey dck; \n    configurationKeyId cki; \n    // objCtrl previously assigned. \n    // Assign a configuration key to the control. \n    objCtrl.configurationKey(configurationkeynum(BankDeposit)); \n    // Retrieve the configuration key ID from the control. \n    cki = objCtrl.configurationKey(); \n    if (cki != 0) \n    { \n        dck = new DictConfigurationKey(cki); \n        if (dck) \n        { \n        print strfmt(\"Configuration Key ID: %1 Configuration Key Name: %2\", \n                      cki, \n                      dck.name()); \n        } \n    }\n\n### Method configurationKeyEx\n\nReturns a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nIf the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods. The list does not contain duplicate IDs.\n\n#### Examples\n\nThe following example shows how to retrieve the configuration key IDs for a control.\n\n    DictConfigurationKey dck; \n    configurationKeyId cki; \n    List list; \n    ListEnumerator enum;\n    // objCtrl previously assigned. \n    list = objCtrl.configurationKeyEx(); \n    if (0 != list.elements()) \n    { \n        enum = list.getEnumerator(); \n        while (enum.moveNext()) \n        { \n           dck = new DictConfigurationKey(enum.current()); \n           if (dck) \n           { \n            print strfmt(\"Configuration Key ID: %1 Configuration Key Name: %2\", \n                         enum.current(), \n                         dck.name() ); \n           } \n        } \n    }\n\n### Method copyItem\n\n    public int copyItem(int Idx, int newParent, [int insertAfter])\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nnewParent  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method createDragImagelist\n\n    public Imagelist createDragImagelist()\n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method delete\n\nDeletes the specified item from the form tree control.\n\n    public boolean delete(int Idx)\n\n#### Parameters\n\nIdx  \nAn integer that specifies the zero-based index of the item to delete.\n\n#### Return Value\n\ntrue if the item was successfully deleted; otherwise, false.\n\n#### Examples\n\nThe following example shows how to delete the first item in the form tree control.\n\n    // The ftc variable was a previously allocated  \n    // FormTreeControl variable. \n    boolean bDelete; \n    bDelete = ftc.delete(0);\n\n### Method deleteAll\n\nDeletes all items from the form tree control.\n\n    public boolean deleteAll()\n\n#### Return Value\n\ntrue if all items were successfully deleted; otherwise, false.\n\n#### Examples\n\nThe following example shows how to delete all items from a form tree control.\n\n    // The ftc variable was a previously allocated \n    // FormTreeControl variable. \n    boolean bDelete; \n    bDelete = ftc.deleteAll();\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether drag-and-drop operations are enabled or disabled for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates whether drag-and-drop behavior is enabled.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Examples\n\nThe following example shows how to return or set the value that indicates whether drag-and-drop behavior is enabled.\n\n    boolean dDragDrop; \n    // The ctrl variable was previously assigned  \n    // as a FormTreeControl value. \n    // Retrieve the drag–and–drop-enabled value. \n    dDragDrop = ctrl.dragDrop(); \n    // Set the drag–and–drop-enabled value. \n    ctrl.dragDrop(true);\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nReturns the text that is displayed when the form tree control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the tree control is dragged; an empty string if there is no text to display when the tree control is dragged.\n\n### Method editLabels\n\n    public boolean editLabels([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enabled\n\nDetermines whether the object is enabled or disabled.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property lets you enable or disable controls at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.\n\n#### Examples\n\nThe following example shows how to return and set the enabled property for a control.\n\n    // Return the value of the enabled property. \n    info(strfmt(\"enabled: %1\",this.enabled())); \n    // Set the enabled property. \n    this.enabled(false);\n\n### Method expand\n\n    public int expand(int Idx, [FormTreeExpand action])\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\naction  \n\n#### Return Value\n\n### Method expanding\n\n    public boolean expanding(int Idx, FormTreeExpand action, AnyType data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\naction  \n\n<!-- -->\n\ndata  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font that is used for the text in the control.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \nA string value that indicates the font to use for the text in a form tree control.\n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n#### Examples\n\nThe following example shows how to return and set the font for a form tree control.\n\n    str strFont; \n    // The ctrl variable was previously assigned  \n    // as a form tree control variable. \n    // Retrieve the font. \n    strFont = ctrl.font(); \n    // Set the font. \n    ctrl.font(\"Times New Roman\");\n\n### Method fontSize\n\nGets or sets the font size that is used for the text in the control.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates the font size, in points, for the text in a form tree control.\n\n#### Return Value\n\nThe height of the font in points.\n\n#### Examples\n\nThe following example shows how to return and set the font size for a control.\n\n    int nSize; \n    // The ctrl variable was previously assigned  \n    // as a form tree control. \n    // Retrieve the font size. \n    nSize = ctrl.fontSize(); \n    // Set the font size. \n    ctrl.fontSize(16);\n\n### Method foregroundColor\n\nGets or sets the color that is used for the text in the control.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be 0 (zero).\n-   The maximum value for a single byte is 255.\n\n### Method getChild\n\n    public int getChild(int Idx)\n\n#### Parameters\n\nIdx  \n\n#### Return Value\n\n### Method getFirstSelected\n\n    public int getFirstSelected()\n\n#### Return Value\n\n### Method getFirstVisible\n\n    public int getFirstVisible()\n\n#### Return Value\n\n### Method getImagelist\n\n    public Imagelist getImagelist()\n\n#### Return Value\n\n### Method getItem\n\n    public FormTreeItem getItem(int Idx)\n\n#### Parameters\n\nIdx  \n\n#### Return Value\n\n### Method getNextSelected\n\n    public int getNextSelected(int idx)\n\n#### Parameters\n\nidx  \n\n#### Return Value\n\n### Method getNextSibling\n\n    public int getNextSibling(int Idx)\n\n#### Parameters\n\nIdx  \n\n#### Return Value\n\n### Method getNextVisible\n\n    public int getNextVisible(int Idx)\n\n#### Parameters\n\nIdx  \n\n#### Return Value\n\n### Method getParent\n\n    public int getParent(int Idx)\n\n#### Parameters\n\nIdx  \n\n#### Return Value\n\n### Method getPrevSelected\n\n    public int getPrevSelected(int idx)\n\n#### Parameters\n\nidx  \n\n#### Return Value\n\n### Method getPrevSibling\n\n    public int getPrevSibling(int Idx)\n\n#### Parameters\n\nIdx  \n\n#### Return Value\n\n### Method getPrevVisible\n\n    public int getPrevVisible(int Idx)\n\n#### Parameters\n\nIdx  \n\n#### Return Value\n\n### Method getRoot\n\n    public int getRoot()\n\n#### Return Value\n\n### Method getSelectedCount\n\n    public int getSelectedCount()\n\n#### Return Value\n\n### Method getSelection\n\n    public int getSelection()\n\n#### Return Value\n\n### Method getStateImagelist\n\n    public Imagelist getStateImagelist()\n\n#### Return Value\n\n### Method getVisibleCount\n\nReturns the number of visible items in the tree control.\n\n    public int getVisibleCount()\n\n#### Return Value\n\nThe number of visibile items in the tree control.\n\n#### Examples\n\nThe following example shows how to retrieve the number of visible items in the tree control.\n\n    int nCount; \n    nCount = this.getVisibleCount(); \n    info (strfmt(\"getVisibleCount: %1\", int2str(nCount)));\n\n### Method hasButtons\n\nReturns a value that indicates whether the tree control uses expand/collapse buttons.\n\n    public boolean hasButtons([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the tree control uses expand/collapse buttons; otherwise, false.\n\n#### Examples\n\nThe following example shows how to retrieve the value that indicates whether the tree control uses expand/collapse buttons.\n\n    boolean bHasButtons; \n    // Retrieve the value. \n    bHasButtons = this.hasButtons(); \n    info (strfmt(\"hasButtons: %1\",bHasButtons)); \n    // Set the value. \n    this.hasButtons(false);\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the tree control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the tree control.\n\n#### Return Value\n\ntrue if the contents of the tree control have changed; otherwise, false.\n\n#### Examples\n\nThe following example shows how to return and set the value that indicates whether the contents of the tree control have changed.\n\n    boolean bHasChanged; \n    // The ctrl variable was previously assigned \n    // as a FormTreeControl variable. \n    // Retrieve the hasChanged value. \n    bHasChanged = ctrl.hasChanged(); \n    // Modify the hasChanged value. \n    ctrl.hasChanged(true);\n\n### Method hasLines\n\nReturns a value that indicates whether the tree control displays tree connector lines.\n\n    public boolean hasLines([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the tree control displays tree connector lines; otherwise, false.\n\n#### Examples\n\nThe following example shows how to retrieve the value that indicates whether the tree control displays tree connector lines.\n\n    boolean bHasLines; \n    // Retrieve the value. \n    bHasLines = this.hasLines(); \n    info (strfmt(\"hasLines: %1\", bHasLines)); \n    // Set the value. \n    this.hasLines(false);\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the height is calculated; optional. This can be one of the following values:\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the height is calculated; optional. This can be one of the following values:\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode              | Height calculation                                                                         |\n|-------------------|--------------------------------------------------------------------------------------------|\n| -1 – Exact        | The exact height of the control in pixels is used.                                         |\n| 0 – Auto          | The height of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column height | The layout of the form determines the height of the control.                               |\n\nThe height and the height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how the height of the control is calculated. This value can be -1 for Exact mode, 0 for Auto mode, or 1 for Column height mode.\n\n#### Return Value\n\nThe height calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                         |\n|---------------|--------------------------------------------------------------------------------------------|\n| Exact         | The exact height of the control in pixels is used.                                         |\n| Auto          | The height of the control is calculated automatically, and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                               |\n\nThe height of the control might change when the calculation mode is set to Auto or Column height.\n\n#### Examples\n\nThe following example shows how to return and set the height calculation mode for a form tree control.\n\n    int nHeightMode; \n    ; \n    // The ctrl variable was previously assigned \n    // as a form tree control variable. \n    // Retrieve the height mode. \n    nHeightMode = ctrl.HeightMode(); \n    // Set the height mode. \n    ctrl.heightMode(-1); \n    // Set the height. \n    ctrl.heightValue(160);\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the height in pixels.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the Exact height calculation mode is used.\n\n#### Examples\n\nThe following example shows how to return and set the height value of a form tree control.\n\n    int nHeightValue; \n    // The ctrl variable was previously assigned \n    // as a form tree control variable. \n    // Retrieve the height value. \n    nHeightValue = ctrl.heightValue(); \n    // Set the height value. \n    ctrl.heightMode(-1); \n    ctrl.heightValue(160);\n\n### Method helpField\n\nReturns the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n#### Examples\n\nThe following example shows how to use the helpField method.\n\n    str strHelp; \n    strHelp = this.helpField();\n\n### Method helpText\n\nGets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the Help text for the control.\n\n#### Return Value\n\nThe string that is displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n#### Examples\n\nThe following example shows how to set and return the Help text for a control.\n\n    // objCtrl previously assigned to a control \n    // Retrieve existing Help text. \n    print objCtrl.helpText(); \n    // Specify new Help text. \n    objCtrl.helpText(\"My new Help text\");\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hitTest\n\n    public container hitTest(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method hWnd\n\nReturns the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n#### Examples\n\nThe following example shows how to retrieve the Windows handle for a control.\n\n    int h; \n    h = this.hWnd(); \n    info (strfmt(\"hWnd: %1\", h));\n\n### Method isContainer\n\nReturns a value that indicates whether the control is a container.\n\n    public boolean isContainer()\n\n#### Return Value\n\ntrue if the control is a container; otherwise false.\n\n#### Examples\n\nThe following example shows how to determine whether a control is a container.\n\n    info(strfmt(\"IsContainer: %1\", this.isContainer()));\n\n### Method isDisplayed\n\nReturns a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n#### Examples\n\nThe following example shows how to determine whether a control is visible.\n\n    info(strfmt(\"isDisplayed: %1\", this.isDisplayed()));\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false. For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\n#### Examples\n\nThe following example shows how to determine the user setup rights for a control.\n\n    FormAllowUserSetup formAllowUserSetup = FormAllowUserSetup::No; \n    switch (true) \n    { \n        case this.isUserSetupEnabled(FormAllowUserSetup::Yes): \n            formAllowUserSetup = FormAllowUserSetup::Yes; \n            break; \n        case this.isUserSetupEnabled(FormAllowUserSetup::Restricted): \n            formAllowUserSetup = FormAllowUserSetup::Restricted; \n            break; \n        case this.isUserSetupEnabled(FormAllowUserSetup::No): \n           formAllowUserSetup = FormAllowUserSetup::No; \n            break; \n    } \n    info (strfmt(\"formAllowUserSetup: %1\", formAllowUserSetup));\n\n### Method italic\n\nSets or returns a value that indicates whether the text in the control is italic.\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the italic setting for the control.\n\n#### Return Value\n\ntrue if the text in the control is italic; otherwise, false.\n\n### Method keyDown\n\n    public boolean keyDown(int vKey, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nvKey  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method linesAtRoot\n\n    public boolean linesAtRoot([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n#### Examples\n\nThe following example shows how to display the parameters of a mouseDblClick event in the Infolog.\n\n    public int mouseDblClick(int x,  \n                             int y,  \n                             int button, \n                             boolean Ctrl, \n                             boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info( \"Shift set\" ); \n        } \n        if (Ctrl) \n        { \n            info( \"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method mouseDown\n\nIs called when the user clicks while the mouse pointer is over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n#### Examples\n\nThe following example shows how to display the parameters of a mouseDown event in the Infolog.\n\n    public int mouseDown(int x,  \n                                  int y,  \n                                  int button, \n                                  boolean Ctrl, \n                                  boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info( \"Shift set\" ); \n        } \n        if (Ctrl) \n        { \n            info( \"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n#### Examples\n\nThe following example shows how to display the parameters of a mouseMove event in the Infolog.\n\n    public int mouseMove(int x,  \n                         int y,  \n                         int button, \n                         boolean Ctrl, \n                         boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info( \"Shift set\" ); \n        } \n        if (Ctrl) \n        { \n            info( \"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method mouseUp\n\nIs called when the user releases the mouse button while the mouse pointer is over the control.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n#### Examples\n\nThe following example shows how to display the parameters of a mouseUp event in the Infolog.\n\n    public int mouseUp(int x,  \n                       int y,  \n                       int button, \n                       boolean Ctrl, \n                       boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info( \"Shift set\" ); \n        } \n        if (Ctrl) \n        { \n            info( \"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method moveItem\n\n    public int moveItem(int Idx, int newParent, [int insertAfter])\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nnewParent  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method rowSelect\n\n    public boolean rowSelect([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n#### Examples\n\nThe following example shows how to retrieve and assign a security key ID for a control.\n\n    DictSecurityKey dsk; \n    securityKeyId ski; \n    // objCtrl previously assigned. \n    // Assign a security key ID to the control. \n    objCtrl.securityKey(securitykeynum(AdminDaily)); \n    // Retrieve the security key ID from the control. \n    ski = objCtrl.securityKey(); \n    if (ski != 0) \n    { \n        dsk = new DictSecurityKey(ski); \n        if (dsk) \n        { \n            print strfmt(\"Security Key ID: %1 Security Key Name: %2\", \n                         ski, \n                         dsk.name()); \n        } \n    }\n\n### Method select\n\n    public int select(int Idx)\n\n#### Parameters\n\nIdx  \n\n#### Return Value\n\n### Method selectEx\n\n    public int selectEx(int Idx, boolean setSelection)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nsetSelection  \n\n#### Return Value\n\n### Method selectionChanging\n\n    public boolean selectionChanging(FormTreeItem OldItem, FormTreeItem NewItem, FormTreeSelect how)\n\n#### Parameters\n\nOldItem  \n\n<!-- -->\n\nNewItem  \n\n<!-- -->\n\nhow  \n\n#### Return Value\n\n### Method selectItems\n\n    public int selectItems(int fromIdx, int toIdx)\n\n#### Parameters\n\nfromIdx  \n\n<!-- -->\n\ntoIdx  \n\n#### Return Value\n\n### Method selectSetFirstVisible\n\n    public int selectSetFirstVisible(int Idx)\n\n#### Parameters\n\nIdx  \n\n#### Return Value\n\n### Method setInsertMark\n\n    public boolean setInsertMark(int Idx, boolean After)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nAfter  \n\n#### Return Value\n\n### Method setItem\n\n    public boolean setItem(FormTreeItem item)\n\n#### Parameters\n\nitem  \n\n#### Return Value\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showSelAlways\n\n    public boolean showSelAlways([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method singleSelection\n\n    public boolean singleSelection([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n#### Examples\n\nThe following shows how to return and set the skip property of a control.\n\n    // Return the value of the skip property. \n    info(strfmt(\"skip: %1\", this.skip())); \n    // Set the value of the skip property. \n    this.skip(true);\n\n### Method toolTip\n\nReturns the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method can be overridden to provide a value to the toolTip method.\n\n#### Examples\n\nThe following example shows how to override the toolTip method.\n\n    str toolTip() \n    { \n        return \"Account numbers of customers eligible for discount\"; \n    }\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method trackSelect\n\n    public boolean trackSelect([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nReturns or sets the value that indicates whether the form tree control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the form tree control is hidden from the user.\n\n#### Return Value\n\n1 if the tree control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n#### Examples\n\nThe following example shows how to return and set the value that specifies whether the form tree control is hidden from the user.\n\n    int nUserHide; \n    // The ctrl variable was previously assigned  \n    // as a form tree control variable. \n    // Retrieve the userHide value. \n    nUserHide = ctrl.userHide(); \n    // Set the userHide value. \n    ctrl.userHide(1);\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nSets or retrieves the user prompt text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the user prompt text for the control.\n\n#### Return Value\n\nThe user prompt text for the control; an empty string if no user prompt text is assigned to the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n#### Examples\n\nThe following example shows how to return and set the userSkip property.\n\n    int nUserSkip \n    // The ctrl variable was previously assigned \n    // as a FormTreeControl value. \n    // Return the userSkip property. \n    nUserSkip = ctrl.userSkip(); \n    // Set the userSkip property. \n    ctrl.userSkip(1);\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n#### Examples\n\nThe following example shows how to return and set the user width of a form tree control.\n\n    int nWidth; \n    // The ctrl variable was previously defined \n    // as a FormTreeControl value. \n    // Return the width. \n    nWidth = ctrl.userWidth(); \n    // Specify the width. \n    ctrl.userWidth(90);  // 15 characters * 6 pixels == 90\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode             | Width calculation                                                                         |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 – Exact       | The exact width of the control in pixels is used.                                         |\n| 0 – Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column width | The layout of the form determines the width of the control.                               |\n\nThe width and the width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode for the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control width is calculated. This value can be -1 for Exact mode, 0 for Auto mode, or 1 for Column width mode.\n\n#### Return Value\n\nAn integer value that indicates the current width calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                         |\n|--------------|-------------------------------------------------------------------------------------------|\n| Exact        | The exact width of the control in pixels is used.                                         |\n| Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                               |\n\nThe width of the control might change when the calculation mode is set to Auto or Column width.\n\n#### Examples\n\nThe following example shows how to return and set the width calculation mode for a form tree control.\n\n    int nWidthMode; \n    // The ctrl variable was previously assigned \n    // as a form tree control value. \n    // Retrieve the width mode. \n    nWidthMode = ctrl.widthMode (); \n    // Set the width mode. \n    ctrl.widthMode(-1); \n    // Set the width. \n    ctrl.widthValue(180);\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the width in pixels.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nTo change the width of the control, use the Exact width calculation mode.\n\n#### Examples\n\nThe following example shows how to return and set the width value of a form tree control.\n\n    int nWidthValue; \n    // The ctrl variable was previously assigned \n    // as a form tree control value. \n    // Retrieve the width value. \n    nWidthValue = ctrl.widthValue(); \n    // Set the width value. \n    ctrl.widthMode(-1); \n    ctrl.widthValue(160);\n\n### Method checkedStateChanged\n\n    public void checkedStateChanged(int Idx, FormTreeCheckedState newState)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nnewState  \n\n### Method endLabelEdit\n\n    public void endLabelEdit(int Idx, str text, AnyType data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\ntext  \n\n<!-- -->\n\ndata  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method OnExpanding\n\n    private void OnExpanding([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method paste\n\nPastes the form tree control in the form.\n\n    public void paste()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method itemMoved\n\n    public void itemMoved(int OldIdx, int NewIdx)\n\n#### Parameters\n\nOldIdx  \n\n<!-- -->\n\nNewIdx  \n\n### Method expanded\n\n    public void expanded(int Idx, FormTreeExpand action, AnyType data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\naction  \n\n<!-- -->\n\ndata  \n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method OnSelectionChanged\n\n    private void OnSelectionChanged([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method mouseLeave\n\nIs called when the user moves the mouse pointer out of the control.\n\n    public void mouseLeave()\n\n#### Examples\n\nThe following example writes to the Infolog when the mouse pointer leaves the control area.\n\n    public void mouseLeave() \n    { \n        info (strfmt(\"The mouse has left the %1 control.\", this.name()) ); \n        super(); \n    }\n\n### Method endDrag\n\nIs called when the user has finished dragging a form tree control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, the user presses the mouse button in the control area and then moves the mouse pointer.\n\n#### Examples\n\nThe following example displays a message in the Infolog when the user has finished dragging the form tree control.\n\n    public void endDrag() \n    { \n        info(\"EndDrag completed\"); \n        super(); \n    }\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method itemCopy\n\n    public void itemCopy(int OldIdx, int NewIdx)\n\n#### Parameters\n\nOldIdx  \n\n<!-- -->\n\nNewIdx  \n\n### Method enter\n\n    public void enter()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form tree control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control measures in pixels.\n\n<!-- -->\n\nheight  \nThe preferred height of the control measures in pixels.\n\n#### Examples\n\nThe following example shows how to set the preferred width and height of a form tree control.\n\n    // The nWidth and nHeight variables were previously assigned \n    // as int variables. \n    // The ctrl variable was previously assigned \n    // as a FormTreeControl value. \n    ctrl.prefColumnSize( nWidth, nHeight);\n\n### Method setImagelist\n\n    public void setImagelist(Imagelist imageList)\n\n#### Parameters\n\nimageList  \n\n### Method OnExpanded\n\n    private void OnExpanded([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method itemDeleted\n\n    public void itemDeleted(int Idx, AnyType data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\ndata  \n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method setStateImagelist\n\n    public void setStateImagelist(Imagelist imageList)\n\n#### Parameters\n\nimageList  \n\n### Method endEditLabel\n\n    public void endEditLabel(boolean cancel)\n\n#### Parameters\n\ncancel  \n\n### Method copy\n\nCopies the form tree control.\n\n    public void copy()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method selectionChanged\n\nIndicates that the user has changed the selected item in the form tree control.\n\n    public void selectionChanged(FormTreeItem OldItem, FormTreeItem NewItem, FormTreeSelect how)\n\n#### Parameters\n\nOldItem  \nThe value that indicates how the item that is specified by the \\_NewItem parameter was selected.\n\n<!-- -->\n\nNewItem  \nThe value that indicates how the item that is specified by the \\_NewItem parameter was selected.\n\n<!-- -->\n\nhow  \nThe value that indicates how the item that is specified by the \\_NewItem parameter was selected.\n\n### Method beginEditLabel\n\n    public void beginEditLabel(int Idx)\n\n#### Parameters\n\nIdx  \n\n## Class FormTreeItem\n    class FormTreeItem extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                           | Description                                                                |\n|----------------------------------------------------------------------------------|----------------------------------------------------------------------------|\n| public int children(\\[int value\\])                                               |                                                                            |\n| public AnyType data(\\[AnyType value\\])                                           |                                                                            |\n| public int idx()                                                                 |                                                                            |\n| public int image(\\[int value\\])                                                  |                                                                            |\n| public int overlayImage(\\[int value\\])                                           |                                                                            |\n| public int selectedImage(\\[int value\\])                                          |                                                                            |\n| public boolean stateBold(\\[boolean value\\])                                      |                                                                            |\n| public FormTreeCheckedState stateChecked(\\[FormTreeCheckedState value\\])         |                                                                            |\n| public boolean stateCut(\\[boolean value\\])                                       |                                                                            |\n| public boolean stateDropHilited(\\[boolean value\\])                               |                                                                            |\n| public boolean stateExpanded(\\[boolean value\\])                                  |                                                                            |\n| public boolean stateExpandedOnce(\\[boolean value\\])                              |                                                                            |\n| public int stateImage(\\[int value\\])                                             |                                                                            |\n| public boolean stateSelected(\\[boolean value\\])                                  |                                                                            |\n| public str text(\\[str value\\])                                                   | Sets or returns the text for the control.                                  |\n| public str toString()                                                            | Returns a string representation of the instance of the FormTreeItem class. |\n| public void new(\\[str Text\\], \\[int Image\\], \\[int children\\], \\[AnyType Data\\]) | Initializes a new instance of the Object class.                            |\n| public void finalize()                                                           |                                                                            |\n\n### Method children\n\n    public int children([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method data\n\n    public AnyType data([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method idx\n\n    public int idx()\n\n#### Return Value\n\n### Method image\n\n    public int image([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method overlayImage\n\n    public int overlayImage([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method selectedImage\n\n    public int selectedImage([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateBold\n\n    public boolean stateBold([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateChecked\n\n    public FormTreeCheckedState stateChecked([FormTreeCheckedState value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateCut\n\n    public boolean stateCut([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateDropHilited\n\n    public boolean stateDropHilited([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateExpanded\n\n    public boolean stateExpanded([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateExpandedOnce\n\n    public boolean stateExpandedOnce([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateImage\n\n    public int stateImage([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateSelected\n\n    public boolean stateSelected([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\nSets or returns the text for the control.\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the text for the control; optional.\n\n#### Return Value\n\nThe text for the control; an empty string if no text has been assigned to the control.\n\n### Method toString\n\nReturns a string representation of the instance of the FormTreeItem class.\n\n    public str toString()\n\n#### Return Value\n\nA string that contains a description of the instance of the FormTreeItem class.\n\n#### Remarks\n\nThe default implementation returns the class name of the object. The method can be overridden in a derived class to return values that are meaningful for that type.\n\n#### Examples\n\nThe following example shows how to use the toString method.\n\n    print objFormTreeItem.toString();\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new([str Text], [int Image], [int children], [AnyType Data])\n\n#### Parameters\n\nText  \n\n<!-- -->\n\nImage  \n\n<!-- -->\n\nchildren  \n\n<!-- -->\n\nData  \n\n### Method finalize\n\n    public void finalize()\n\n## Class FormWindowControl\n    class FormWindowControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                         | Description                                                                                                                                                             |\n|--------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                                                 | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                                    | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                                                 | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                              | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                                      | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                                            | Determines whether the control background can be transparent.                                                                                                           |\n| public int beginDrag(int x, int y)                                                                                             | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int cacheDataMethod(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                                         | Retrieves the size of the control.                                                                                                                                      |\n| public int colorScheme(\\[int value\\])                                                                                          | Gets or sets the color scheme of the control.                                                                                                                           |\n| public int command(int wParam, int lParam)                                                                                     |                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                                       | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                                               | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                                   | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                                    |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                                    |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                                           |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                                     | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                                       | Gets or sets a data source that will be used by the control or the form.                                                                                                |\n| public int displayTarget(\\[int value\\])                                                                                        | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                                             | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                              | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                                  | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                                          | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                                      | Determines whether to enable or disable the object.                                                                                                                     |\n| public int foregroundColor(\\[int value\\])                                                                                      | Gets or sets the text color for the control to use.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                                     | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                                                | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int hDC()                                                                                                               |                                                                                                                                                                         |\n| public int height(int value, \\[int mode\\])                                                                                     | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                                           | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                                          | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                                         | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                                             | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                                      | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                                              | Retrieves the Windows handle for the control.                                                                                                                           |\n| public Image image(\\[Image value\\])                                                                                            |                                                                                                                                                                         |\n| public int imageLocation(\\[int value\\])                                                                                        |                                                                                                                                                                         |\n| public Imagelist imageList(\\[Imagelist value\\])                                                                                |                                                                                                                                                                         |\n| public int imagemode(\\[int value\\])                                                                                            |                                                                                                                                                                         |\n| public str imageName(\\[str value\\])                                                                                            |                                                                                                                                                                         |\n| public int imageResource(\\[int value\\])                                                                                        |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                                   |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                                   | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                                                  | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                                       | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public str label(\\[str value\\])                                                                                                | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                                       |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                                            |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                                    |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                                            |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                                        |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                                                 |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                                           |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                                                |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                                     |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                                                  |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                           |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                               |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                                 |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                                        |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                                               |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                                                 |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                                       |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public boolean leave()                                                                                                         |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                                       | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                                             | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                                            | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public str location(\\[str value\\])                                                                                             |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                                | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                                      |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                                | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                                    | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                                    | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                                      | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                                                 | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.                               |\n| public int neededPermission(\\[int value\\])                                                                                     |                                                                                                                                                                         |\n| public str normalImage(\\[str value\\])                                                                                          |                                                                                                                                                                         |\n| public int onHScroll(int pos)                                                                                                  |                                                                                                                                                                         |\n| public int onVScroll(int pos)                                                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                                        |                                                                                                                                                                         |\n| public int paint()                                                                                                             |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                                             | Retrieves the parent control for the control.                                                                                                                           |\n| public str previewPartRef(\\[str value\\])                                                                                       |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                                           |                                                                                                                                                                         |\n| public int scrollInfo(int VertScroller, \\[int Pos\\], \\[int PageDelta\\], \\[int MoveDelta\\], \\[int MinLimit\\], \\[int MaxLimit\\]) |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                                      | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                                     | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                                    |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                                         | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                                   |                                                                                                                                                                         |\n| public str toolTip()                                                                                                           | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                                        | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                                              | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                                             | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                                                 |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                                            |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                                             | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                                         | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                                        | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                                          | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                                           | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                                             | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                                     | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                                       | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                                       | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                                    | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                                             | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                                            | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean validate()                                                                                                      |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                                   | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                                         | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                                                 | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                                      | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                                      | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                                            | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                                           | Gets or sets the width of the control.                                                                                                                                  |\n| public void lostFocus()                                                                                                        | Indicates that the control has lost focus.                                                                                                                              |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])                    |                                                                                                                                                                         |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                                  | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void dragLeave()                                                                                                        | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void gotFocus()                                                                                                         | Indicates that the control has received focus.                                                                                                                          |\n| public void context()                                                                                                          | Shows the shortcut menu for the control.                                                                                                                                |\n| public void lockDC()                                                                                                           |                                                                                                                                                                         |\n| public void enter()                                                                                                            |                                                                                                                                                                         |\n| public void endDrag()                                                                                                          | Is called when the user has finished dragging a form control.                                                                                                           |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                                  |                                                                                                                                                                         |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                                       |                                                                                                                                                                         |\n| public void setDirty(\\[int x\\], \\[int y\\], \\[int width\\], \\[int height\\])                                                      |                                                                                                                                                                         |\n| public void resetUserSetting()                                                                                                 | Resets the user settings for the control.                                                                                                                               |\n| private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                                     |                                                                                                                                                                         |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                                      |                                                                                                                                                                         |\n| public void filter(\\[str filterStr\\])                                                                                          |                                                                                                                                                                         |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                                    |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                                   |                                                                                                                                                                         |\n| public void size(int width, int height)                                                                                        |                                                                                                                                                                         |\n| public void dropFile(str FileName)                                                                                             |                                                                                                                                                                         |\n| public void cut()                                                                                                              | Cuts the contents of the control.                                                                                                                                       |\n| public void lookup()                                                                                                           |                                                                                                                                                                         |\n| public void setFocus()                                                                                                         | Sets the focus on the control.                                                                                                                                          |\n| public void undo()                                                                                                             |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                                     |                                                                                                                                                                         |\n| public void jumpRef()                                                                                                          |                                                                                                                                                                         |\n| public void setScrollInfo()                                                                                                    |                                                                                                                                                                         |\n| public void paste()                                                                                                            | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                                    |                                                                                                                                                                         |\n| public void clicked()                                                                                                          |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                                         | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                                   |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                                       | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void copy()                                                                                                             | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                                      | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void displayControl()                                                                                                   | Displays the control.                                                                                                                                                   |\n| public void unlockDC()                                                                                                         |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                                              | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                                          | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                        |\n|-------|------------------------------|\n| 0     | Default                      |\n| 1     | The MicrosoftWindows palette |\n| 2     | The true-color scheme        |\n\n### Method command\n\n    public int command(int wParam, int lParam)\n\n#### Parameters\n\nwParam  \n\n<!-- -->\n\nlParam  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property gives for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method hDC\n\n    public int hDC()\n\n#### Return Value\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method image\n\n    public Image image([Image value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageList\n\n    public Imagelist imageList([Imagelist value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imagemode\n\n    public int imagemode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageName\n\n    public str imageName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageResource\n\n    public int imageResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method location\n\n    public str location([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method onHScroll\n\n    public int onHScroll(int pos)\n\n#### Parameters\n\npos  \n\n#### Return Value\n\n### Method onVScroll\n\n    public int onVScroll(int pos)\n\n#### Parameters\n\npos  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method paint\n\n    public int paint()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method scrollInfo\n\n    public int scrollInfo(int VertScroller, [int Pos], [int PageDelta], [int MoveDelta], [int MinLimit], [int MaxLimit])\n\n#### Parameters\n\nVertScroller  \n\n<!-- -->\n\nPos  \n\n<!-- -->\n\nPageDelta  \n\n<!-- -->\n\nMoveDelta  \n\n<!-- -->\n\nMinLimit  \n\n<!-- -->\n\nMaxLimit  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method lockDC\n\n    public void lockDC()\n\n### Method enter\n\n    public void enter()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setDirty\n\n    public void setDirty([int x], [int y], [int width], [int height])\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nwidth  \n\n<!-- -->\n\nheight  \n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method OnClicked\n\n    private void OnClicked([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method size\n\n    public void size(int width, int height)\n\n#### Parameters\n\nwidth  \n\n<!-- -->\n\nheight  \n\n### Method dropFile\n\n    public void dropFile(str FileName)\n\n#### Parameters\n\nFileName  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method lookup\n\n    public void lookup()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method undo\n\n    public void undo()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method setScrollInfo\n\n    public void setScrollInfo()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method clicked\n\n    public void clicked()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method unlockDC\n\n    public void unlockDC()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n\n\n\n\n","nodes":[{"pos":[32,79],"content":"F Classes - FormTabControl to FormWindowControl","needQuote":true,"needEscape":true,"nodes":[{"content":"F Classes - FormTabControl to FormWindowControl","pos":[0,47]}]},{"pos":[93,160],"content":"API reference for classes from FormTabControl to FormWindowControl.","needQuote":true,"needEscape":true,"nodes":[{"content":"API reference for classes from FormTabControl to FormWindowControl.","pos":[0,67]}]},{"pos":[660,707],"content":"F Classes - FormTabControl to FormWindowControl","linkify":"F Classes - FormTabControl to FormWindowControl","nodes":[{"content":"F Classes - FormTabControl to FormWindowControl","pos":[0,47]}]},{"content":"API reference for classes from FormTabControl to FormWindowControl.","pos":[753,820]},{"pos":[822,842],"content":"Class FormTabControl","linkify":"Class FormTabControl","nodes":[{"content":"Class FormTabControl","pos":[0,20]}]},{"pos":[915,922],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[928,936],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[942,949],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[953,959]},{"content":"Description","pos":[1071,1082]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[1533,1637],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[1823,1918],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[2113,2228],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2403,2447],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2693,2740],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2983,3029],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[3101,3141]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[3273,3316],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[3391,3458]},{"content":"public boolean allowSysSetup()","pos":[3563,3593]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[3681,3764]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3853,3893],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4143,4181],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4433,4472],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4723,4760],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[5013,5062],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[5131,5229]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[5303,5344],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[5421,5470]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[5593,5628],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[5711,5772]},{"content":"public int beginDrag(int x, int y)","pos":[5883,5917]},{"content":"Is called when the user starts to drag a form control.","pos":[6001,6055]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[6173,6230],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[6463,6514],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[6753,6796],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[7043,7097]},{"content":"Retrieves the size of the control.","pos":[7161,7195]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[7333,7418],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[7623,7669]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[7913,7950],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[8031,8076]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[8203,8258],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[8493,8545],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[8783,8839],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[9073,9123],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[9363,9405],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[9653,9691],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[9943,10015],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[10061,10128]},{"content":"public List configurationKeyEx()","pos":[10233,10265]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[10351,10447]},{"content":"public int containerScrollHorizontalOffset(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10523,10580],"source":"public int containerScrollHorizontalOffset(\\[int value\\])"},{"content":"public int containerScrollVerticalOffset(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10813,10868],"source":"public int containerScrollVerticalOffset(\\[int value\\])"},{"content":"public boolean contains(FormControl control)","pos":[11103,11147]},{"content":"public int controlCount()","pos":[11393,11418]},{"content":"public FormControl controlNum(int controlNo)","pos":[11683,11727]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[11973,12017],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[12091,12169]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[12263,12322],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[12553,12595],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[12671,12796]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[12843,12883],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that is used by the control or the form.","pos":[12961,13028]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13133,13172],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[13251,13450]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13455,13489],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[13573,13654]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[13745,13826]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[13863,13957]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[14035,14112]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[14153,14249]},{"content":"public str dragText()","pos":[14325,14346]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[14443,14513]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[14615,14656],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[14733,14784]},{"content":"public FormControl getActivePage()","pos":[14905,14939]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[15195,15237],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[15313,15401]},{"content":"public boolean hasControlPositionOverride()","pos":[15485,15528]},{"content":"public boolean hasUserSetting()","pos":[15775,15806]},{"content":"Indicates whether the control has custom user settings.","pos":[15893,15948]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[16065,16107],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[16183,16222]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[16355,16391],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[16473,16535]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[16645,16682],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[16763,16802]},{"content":"public str helpField()","pos":[16935,16957]},{"content":"Retrieves the Help text for the control.","pos":[17053,17093]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[17225,17259],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[17343,17447]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[17515,17560],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[17805,17846],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[17923,17986]},{"content":"public boolean horizontalScrollBarVisible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[18095,18155],"source":"public boolean horizontalScrollBarVisible(\\[boolean value\\])"},{"content":"public int hWnd()","pos":[18385,18402]},{"content":"Retrieves the Windows handle for the control.","pos":[18503,18548]},{"content":"public boolean isContainer()","pos":[18675,18703]},{"content":"public boolean isDisplayed()","pos":[18965,18993]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[19083,19149]},{"content":"public boolean isRestricted()","pos":[19255,19284]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[19373,19440]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[19545,19601]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[19663,19764]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[19835,19875],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[19953,20017]},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[20125,20180],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[20415,20464],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[20705,20746],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[20995,21029],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[21113,21174]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[21285,21320],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[21403,21467]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[21575,21622],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[21693,21746]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[21865,21944]},{"content":"Is called when the control is double-clicked by the user.","pos":[21983,22040]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[22155,22230]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[22273,22338]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[22445,22520]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[22563,22628]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[22735,22808]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[22853,22925]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[23025,23085],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[23315,23345],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[23433,23586]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[23621,23663],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[23911,23950]},{"content":"public FormControl parentControl()","pos":[24201,24235]},{"content":"Retrieves the parent control for the control.","pos":[24319,24364]},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[24491,24547],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[24781,24831],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[25071,25113],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public int scrollbars(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[25361,25397],"source":"public int scrollbars(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[25651,25708],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[25769,25828]},{"content":"public boolean selectControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[25941,25988],"source":"public boolean selectControl(\\[boolean value\\])"},{"content":"public int showContextMenu(int menuHandle)","pos":[26231,26273]},{"content":"Shows the shortcut menu for the control.","pos":[26349,26389]},{"content":"public boolean showTabs(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[26521,26563],"source":"public boolean showTabs(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[26811,26849],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[26929,27056]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[27101,27145],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[27391,27422],"source":"public int style(\\[int value\\])"},{"content":"public TabStyle styleValue()","pos":[27681,27709]},{"content":"public int tab(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[27971,28019],"source":"public int tab(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public int tabAppearance(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[28261,28300],"source":"public int tabAppearance(\\[int value\\])"},{"content":"public boolean tabAutoChange(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[28551,28598],"source":"public boolean tabAutoChange(\\[boolean value\\])"},{"content":"public boolean tabChange(int FromTab)","pos":[28841,28878]},{"content":"public int tabLayout(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[29131,29166],"source":"public int tabLayout(\\[int value\\])"},{"content":"public AutoMode tabMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[29421,29463],"source":"public AutoMode tabMode(\\[AutoMode mode\\])"},{"content":"public int tabPlacement(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[29711,29749],"source":"public int tabPlacement(\\[int value\\])"},{"content":"public int tabs(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[30001,30031],"source":"public int tabs(\\[int value\\])"},{"content":"public int tabValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[30291,30325],"source":"public int tabValue(\\[int value\\])"},{"content":"public str toolTip()","pos":[30581,30601]},{"content":"Retrieves the tooltip text for the control.","pos":[30699,30742]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[30871,30910],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[30989,31051]},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[31161,31215],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[31451,31499],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[31741,31781],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[32031,32064],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[32149,32208]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[32321,32355],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[32439,32501]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[32611,32641],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[32901,32952]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33191,33225],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[33309,33352]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33481,33519],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[33599,33647]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33771,33810],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[33889,33948]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[34061,34098],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[34179,34262]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[34351,34387],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[34469,34521]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[34641,34675],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[34759,34841]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[34931,34973],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[35049,35105]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[35221,35261],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[35339,35393]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[35511,35551],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[35629,35678]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[35801,35844],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[35919,35972]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[36091,36125],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[36209,36357]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[36381,36416],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[36499,36576]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[36671,36718],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public boolean verticalScrollBarVisible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[36961,37019],"source":"public boolean verticalScrollBarVisible(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[37251,37311],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[37369,37430]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[37541,37595],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[37659,37718]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[37831,37877],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[37949,38010]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[38121,38159],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[38411,38452],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[38529,38599]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[38701,38742],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[38819,38857]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[38991,39026],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[39109,39171]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[39281,39317],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[39399,39437]},{"content":"public void setFocus()","pos":[39571,39593]},{"content":"Sets the focus on the control.","pos":[39689,39719]},{"content":"public void lostFocus()","pos":[39861,39884]},{"content":"Indicates that the control has lost focus.","pos":[39979,40021]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[40151,40227],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[40441,40514]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[40559,40657]},{"content":"public void endDrag()","pos":[40731,40752]},{"content":"Is called when the user has finished dragging a form control.","pos":[40849,40910]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[41021,41128],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void gotFocus()","pos":[41311,41333]},{"content":"Indicates that the control has received focus.","pos":[41429,41475]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[41601,41678]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[41719,41789]},{"content":"public void jumpRef()","pos":[41891,41912]},{"content":"public void paste()","pos":[42181,42200]},{"content":"Pastes the contents of the clipboard into the control.","pos":[42299,42353]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[42471,42540]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[42589,42689]},{"content":"public void arrange()","pos":[42761,42782]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[43051,43126],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void context()","pos":[43341,43362]},{"content":"Shows the shortcut menu for the control.","pos":[43459,43499]},{"content":"public void copy()","pos":[43631,43649]},{"content":"Copies the contents of the control to the clipboard.","pos":[43749,43801]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[43921,43958],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void resetUserSetting()","pos":[44211,44241]},{"content":"Resets the user settings for the control.","pos":[44329,44370]},{"content":"public void cut()","pos":[44501,44518]},{"content":"Cuts the contents of the control.","pos":[44619,44652]},{"content":"public void mouseLeave()","pos":[44791,44815]},{"content":"Indicates that the mouse pointer has left the control.","pos":[44909,44963]},{"content":"public void displayControl()","pos":[45081,45109]},{"content":"Displays the control.","pos":[45199,45220]},{"content":"private void OnTabChanged(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[45371,45448],"source":"private void OnTabChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void inputSearch(str searchStr)","pos":[45661,45699]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[45779,45850]},{"content":"public void dragLeave()","pos":[45951,45974]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[46069,46165]},{"content":"public void tabChanged(int FromTab, int ToTab)","pos":[46241,46287]},{"content":"public void prefColumnSize(int width, int height)","pos":[46531,46580]},{"content":"Specifies the preferred column width and height for the form control.","pos":[46649,46718]},{"pos":[46824,46841],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[46956,46966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[46968,46979]},{"content":"controlName","pos":[46993,47004]},{"content":"insertAfter","pos":[47018,47029]},{"pos":[47038,47050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47056,47075],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[47181,47191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[47193,47205]},{"content":"controlName","pos":[47219,47230]},{"content":"insertAfter","pos":[47244,47255]},{"pos":[47264,47276],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47282,47301],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[47425,47435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[47437,47449]},{"content":"fieldId","pos":[47463,47470]},{"content":"insertAfter","pos":[47484,47495]},{"content":"arrayIndex","pos":[47509,47519]},{"pos":[47528,47540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47546,47563],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[47618,47628],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[47630,47635]},{"pos":[47644,47656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47662,47682],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[47740,47750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[47752,47757]},{"pos":[47766,47778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47784,47803],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[47805,47845]},{"pos":[47902,47912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[47914,47919]},{"pos":[47928,47940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[47942,47998]},{"pos":[48005,48012],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[48014,48093]},{"pos":[48099,48115],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[48117,48184]},{"pos":[48238,48248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48250,48255]},{"pos":[48264,48276],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[48278,48330]},{"pos":[48337,48344],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[48346,48468]},{"pos":[48474,48494],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[48496,48579]},{"pos":[48622,48634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[48636,48704]},{"pos":[48710,48731],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[48782,48792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48794,48799]},{"pos":[48808,48820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48826,48845],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[48894,48904],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48906,48911]},{"pos":[48920,48932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48938,48958],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[49008,49018],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[49020,49025]},{"pos":[49034,49046],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49052,49070],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[49118,49128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[49130,49135]},{"pos":[49144,49156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49162,49184],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[49186,49284]},{"pos":[49344,49354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[49356,49361]},{"pos":[49370,49382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[49384,49463]},{"pos":[49470,49477],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[49479,49516]},{"pos":[49522,49544],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[49546,49595]},{"pos":[49647,49657],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[49659,49664]},{"pos":[49673,49685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[49687,49731]},{"pos":[49738,49745],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[49747,49815]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[49821,49891]},{"content":"The second byte contains a value for green.","pos":[49896,49939]},{"content":"The third byte contains a value for blue.","pos":[49944,49985]},{"content":"The high-order byte must be zero.","pos":[49990,50023]},{"content":"The maximum value for a single byte is 255.","pos":[50028,50071]},{"pos":[50077,50093],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[50095,50156]},{"pos":[50202,50212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[50214,50219]},{"pos":[50228,50240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[50242,50303]},{"pos":[50309,50325],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[50327,50381]},{"pos":[50428,50438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[50440,50441]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[50444,50514]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[50515,50582]},{"content":"y","pos":[50594,50595]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[50598,50668]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[50669,50736]},{"pos":[50743,50755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[50757,50796]},{"pos":[50803,50810],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[50812,50893]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[50894,50998]},{"pos":[51004,51023],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[51089,51099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[51101,51106]},{"content":"mode","pos":[51120,51124]},{"pos":[51133,51145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51151,51174],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[51236,51246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[51248,51252]},{"pos":[51261,51273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51279,51303],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[51357,51367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[51369,51374]},{"pos":[51383,51395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51401,51423],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[51425,51459]},{"pos":[51526,51536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[51538,51543]},{"content":"The number of lines to use to determine the height.","pos":[51546,51597]},{"content":"lines","pos":[51609,51614]},{"content":"The number of lines to use to determine the height.","pos":[51617,51668]},{"pos":[51675,51687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[51689,51735]},{"pos":[51741,51763],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[51859,51869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[51871,51883]},{"content":"fieldId","pos":[51897,51904]},{"content":"arrayIndex","pos":[51918,51928]},{"pos":[51937,51949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51955,51972],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[52031,52041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[52043,52050]},{"pos":[52059,52071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52077,52095],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[52097,52142]},{"pos":[52190,52200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[52202,52207]},{"pos":[52216,52228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[52230,52273]},{"pos":[52280,52287],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[52289,52350]},{"content":"Value","pos":[52354,52359]},{"content":"Style","pos":[52362,52367]},{"content":"0","pos":[52436,52437]},{"content":"Default","pos":[52444,52451]},{"content":"1","pos":[52477,52478]},{"content":"The MicrosoftWindows palette","pos":[52485,52513]},{"content":"2","pos":[52518,52519]},{"content":"The true-color scheme","pos":[52526,52547]},{"pos":[52562,52576],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[52640,52650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[52652,52657]},{"content":"mode","pos":[52671,52675]},{"pos":[52684,52696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52702,52720],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[52783,52793],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[52795,52799]},{"pos":[52808,52820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52826,52844],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[52909,52919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[52921,52926]},{"content":"mode","pos":[52940,52944]},{"pos":[52953,52965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52971,52993],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[53054,53064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[53066,53070]},{"pos":[53079,53091],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53097,53120],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[53173,53183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[53185,53190]},{"pos":[53199,53211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53217,53236],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[53285,53295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[53297,53302]},{"pos":[53311,53323],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53329,53352],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[53354,53421]},{"pos":[53504,53514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[53516,53521]},{"pos":[53530,53542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[53544,53616]},{"pos":[53623,53630],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[53632,53713]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[53714,53807]},{"pos":[53813,53838],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[53840,53936]},{"pos":[53981,53993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[53995,54081]},{"pos":[54088,54095],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[54097,54146]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[54147,54295]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[54296,54430]},{"pos":[54436,54474],"content":"Method containerScrollHorizontalOffset","linkify":"Method containerScrollHorizontalOffset","nodes":[{"content":"Method containerScrollHorizontalOffset","pos":[0,38]}]},{"pos":[54542,54552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[54554,54559]},{"pos":[54568,54580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54586,54622],"content":"Method containerScrollVerticalOffset","linkify":"Method containerScrollVerticalOffset","nodes":[{"content":"Method containerScrollVerticalOffset","pos":[0,36]}]},{"pos":[54688,54698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[54700,54705]},{"pos":[54714,54726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54732,54747],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[54804,54814],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[54816,54823]},{"pos":[54832,54844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54850,54869],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[54907,54919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54925,54942],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[54999,55009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[55011,55020]},{"pos":[55029,55041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55047,55072],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[55074,55152]},{"pos":[55207,55217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[55219,55224]},{"content":"The string that contains the country/region codes to set; optional.","pos":[55227,55294]},{"pos":[55301,55313],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[55315,55380]},{"pos":[55386,55418],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[55488,55498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[55500,55505]},{"pos":[55514,55526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55532,55555],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[55557,55682]},{"pos":[55735,55745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[55747,55752]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[55755,55829]},{"pos":[55836,55848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[55850,55962]},{"pos":[55969,55976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[55978,56105]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[56106,56199]},{"pos":[56205,56222],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that is used by the control or the form.","pos":[56224,56291]},{"pos":[56342,56352],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[56354,56359]},{"pos":[56368,56380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the data source to use.","pos":[56382,56415]},{"pos":[56421,56441],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[56443,56642]},{"pos":[56692,56702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[56704,56709]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[56712,56786]},{"pos":[56793,56805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[56807,56951]},{"pos":[56957,56972],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[56974,57055]},{"pos":[57100,57110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[57112,57117]},{"pos":[57126,57138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[57140,57200]},{"pos":[57206,57221],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[57223,57317]},{"pos":[57411,57421],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[57423,57433]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[57436,57521]},{"content":"dragMode","pos":[57533,57541]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[57544,57629]},{"content":"x","pos":[57641,57642]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[57645,57730]},{"content":"y","pos":[57742,57743]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[57746,57831]},{"pos":[57838,57850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[57852,57917]},{"pos":[57923,57940],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[57942,58038]},{"pos":[58128,58138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[58140,58150]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[58153,58238]},{"content":"dragMode","pos":[58250,58258]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[58261,58346]},{"content":"x","pos":[58358,58359]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[58362,58447]},{"content":"y","pos":[58459,58460]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[58463,58548]},{"pos":[58555,58567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[58569,58634]},{"pos":[58640,58655],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[58657,58727]},{"pos":[58761,58773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[58775,58906]},{"pos":[58912,58926],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[58928,58979]},{"pos":[59031,59041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[59043,59048]},{"pos":[59057,59069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[59071,59119]},{"pos":[59126,59133],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[59135,59214]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[59215,59310]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[59311,59445]},{"pos":[59451,59471],"content":"Method getActivePage","linkify":"Method getActivePage","nodes":[{"content":"Method getActivePage","pos":[0,20]}]},{"pos":[59518,59530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59536,59553],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[59555,59643]},{"pos":[59696,59706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[59708,59711]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[59714,59784]},{"pos":[59791,59803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[59805,59872]},{"pos":[59878,59911],"content":"Method hasControlPositionOverride","linkify":"Method hasControlPositionOverride","nodes":[{"content":"Method hasControlPositionOverride","pos":[0,33]}]},{"pos":[59967,59979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59985,60006],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[60008,60063]},{"pos":[60107,60119],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[60121,60184]},{"pos":[60190,60203],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[60205,60244]},{"pos":[60297,60307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60309,60314]},{"content":"mode","pos":[60328,60332]},{"pos":[60341,60353],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[60355,60391]},{"pos":[60398,60405],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[60407,60460]},{"content":"Calculate the height according to the following table.","pos":[60461,60515]},{"content":"Mode","pos":[60519,60523]},{"content":"Height calculation","pos":[60537,60555]},{"content":"-1 Exact","pos":[60743,60751]},{"content":"The exact height in pixels of the controls is used.","pos":[60761,60812]},{"content":"0 Auto","pos":[60855,60861]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[60873,60962]},{"content":"1 Column height","pos":[60967,60982]},{"content":"The layout of the form determines the height of the control.","pos":[60985,61045]},{"content":"The height and height calculation mode can be set separately.","pos":[61078,61139]},{"pos":[61145,61162],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[61164,61226]},{"pos":[61273,61283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[61285,61290]},{"pos":[61299,61311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[61313,61334]},{"pos":[61341,61348],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[61350,61404]},{"content":"Mode","pos":[61408,61412]},{"content":"Height calculation","pos":[61424,61442]},{"content":"Exact","pos":[61628,61633]},{"content":"The exact height in pixels of the controls is used.","pos":[61644,61695]},{"content":"Auto","pos":[61738,61742]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[61754,61843]},{"content":"Column height","pos":[61848,61861]},{"content":"The layout of the form determines the height of the control.","pos":[61864,61924]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[61957,62042]},{"pos":[62048,62066],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[62068,62107]},{"pos":[62155,62165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62167,62172]},{"pos":[62181,62193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[62195,62216]},{"pos":[62223,62230],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[62232,62322]},{"pos":[62328,62344],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[62346,62386]},{"pos":[62421,62433],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[62435,62523]},{"pos":[62530,62537],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[62539,62609]},{"content":"Use the helpText method to set the value of the Help text.","pos":[62610,62668]},{"pos":[62674,62689],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[62691,62795]},{"pos":[62840,62850],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62852,62857]},{"pos":[62866,62878],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[62880,62935]},{"pos":[62942,62949],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.","pos":[62951,63024]},{"content":"The Help text must not exceed 250 characters.","pos":[63025,63070]},{"pos":[63076,63094],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[63150,63160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63162,63167]},{"pos":[63176,63188],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63194,63216],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[63218,63281]},{"pos":[63333,63343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63345,63350]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[63353,63420]},{"pos":[63427,63439],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[63441,63491]},{"pos":[63497,63530],"content":"Method horizontalScrollBarVisible","linkify":"Method horizontalScrollBarVisible","nodes":[{"content":"Method horizontalScrollBarVisible","pos":[0,33]}]},{"pos":[63601,63611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63613,63618]},{"pos":[63627,63639],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63645,63656],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[63658,63703]},{"pos":[63733,63745],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[63747,63774]},{"pos":[63781,63788],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[63790,63834]},{"pos":[63840,63858],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[63899,63911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63917,63935],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[63937,64003]},{"pos":[64044,64056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[64058,64109]},{"pos":[64116,64123],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[64125,64193]},{"pos":[64199,64218],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[64220,64287]},{"pos":[64329,64341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[64343,64395]},{"pos":[64401,64426],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[64428,64529]},{"pos":[64598,64608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[64610,64627]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[64630,64758]},{"pos":[64765,64777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[64779,64938]},{"pos":[64945,64952],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[64954,65031]},{"content":"FormAllowUserSetup::No 0","pos":[65371,65395]},{"content":"No changes can be made to the control.","pos":[65406,65444]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[65445,65534]},{"content":"FormAllowUserSetup::Restricted 1","pos":[65539,65571]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[65574,65666]},{"content":"The user cannot move the control.","pos":[65667,65700]},{"content":"FormAllowUserSetup::Yes 2","pos":[65707,65732]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[65742,65834]},{"content":"The user can also move the control.","pos":[65835,65870]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[65874,66063]},{"pos":[66069,66080],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[66082,66146]},{"pos":[66197,66207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66209,66214]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[66217,66303]},{"content":"mode","pos":[66315,66319]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[66322,66408]},{"pos":[66415,66427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[66429,66480]},{"pos":[66486,66503],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[66567,66577],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66579,66584]},{"content":"mode","pos":[66598,66602]},{"pos":[66611,66623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66629,66650],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[66710,66720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[66722,66726]},{"pos":[66735,66747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66753,66775],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[66827,66837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66839,66844]},{"pos":[66853,66865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66871,66886],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[66888,66949]},{"pos":[66994,67004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67006,67011]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[67014,67100]},{"pos":[67107,67119],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[67121,67177]},{"pos":[67183,67199],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[67201,67265]},{"pos":[67311,67321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67323,67328]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[67331,67412]},{"pos":[67419,67431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[67433,67484]},{"pos":[67490,67510],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[67512,67565]},{"pos":[67623,67633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67635,67640]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[67643,67737]},{"pos":[67744,67756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[67758,67831]},{"pos":[67837,67857],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[67859,67916]},{"pos":[68008,68018],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[68020,68021]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[68024,68085]},{"content":"y","pos":[68097,68098]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[68101,68162]},{"content":"button","pos":[68174,68180]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[68183,68244]},{"content":"Ctrl","pos":[68256,68260]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[68263,68324]},{"content":"Shift","pos":[68336,68341]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[68344,68405]},{"pos":[68412,68424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[68426,68465]},{"pos":[68472,68479],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[68481,68585]},{"pos":[68591,68607],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[68609,68674]},{"pos":[68762,68772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[68774,68775]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[68778,68839]},{"content":"y","pos":[68851,68852]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[68855,68916]},{"content":"button","pos":[68928,68934]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[68937,68998]},{"content":"Ctrl","pos":[69010,69014]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[69017,69078]},{"content":"Shift","pos":[69090,69095]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[69098,69159]},{"pos":[69166,69178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[69180,69219]},{"pos":[69226,69233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[69235,69339]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[69340,69475]},{"pos":[69481,69497],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[69499,69564]},{"pos":[69652,69662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[69664,69665]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[69668,69729]},{"content":"y","pos":[69741,69742]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[69745,69806]},{"content":"button","pos":[69818,69824]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[69827,69888]},{"content":"Ctrl","pos":[69900,69904]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[69907,69968]},{"content":"Shift","pos":[69980,69985]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[69988,70049]},{"pos":[70056,70068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[70070,70109]},{"pos":[70116,70123],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[70125,70229]},{"pos":[70235,70249],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[70251,70323]},{"pos":[70409,70419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[70421,70422]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[70425,70486]},{"content":"y","pos":[70498,70499]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[70502,70563]},{"content":"button","pos":[70575,70581]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[70584,70645]},{"content":"Ctrl","pos":[70657,70661]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[70664,70725]},{"content":"Shift","pos":[70737,70742]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[70745,70806]},{"pos":[70813,70825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[70827,70866]},{"pos":[70873,70880],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[70882,70986]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[70987,71122]},{"pos":[71128,71146],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[71217,71227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[71229,71238]},{"content":"insertAfterId","pos":[71252,71265]},{"pos":[71274,71286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71292,71303],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[71305,71458]},{"pos":[71499,71509],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71511,71516]},{"pos":[71525,71537],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[71539,71603]},{"pos":[71610,71617],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[71619,71713]},{"content":"Begins with a letter.","pos":[71719,71740]},{"content":"Doesn't exceed 250 characters.","pos":[71745,71775]},{"content":"Can include numbers and underscore characters.","pos":[71780,71826]},{"content":"Cannot include punctuation or spaces.","pos":[71831,71868]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.","pos":[71873,72003]},{"pos":[72009,72032],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[72085,72095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72097,72102]},{"pos":[72111,72123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72129,72156],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[72208,72220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72226,72246],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[72248,72293]},{"pos":[72340,72352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[72354,72389]},{"pos":[72395,72413],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[72478,72488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72490,72495]},{"content":"mode","pos":[72509,72513]},{"pos":[72522,72534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72540,72562],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[72623,72633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[72635,72639]},{"pos":[72648,72660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72666,72689],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[72742,72752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72754,72759]},{"pos":[72768,72780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72786,72803],"content":"Method scrollbars","linkify":"Method scrollbars","nodes":[{"content":"Method scrollbars","pos":[0,17]}]},{"pos":[72850,72860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72862,72867]},{"pos":[72876,72888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72894,72912],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[72914,72973]},{"pos":[73041,73051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73053,73058]},{"content":"The ID of the security key to assign to the control; optional.","pos":[73061,73123]},{"pos":[73130,73142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[73144,73243]},{"pos":[73249,73269],"content":"Method selectControl","linkify":"Method selectControl","nodes":[{"content":"Method selectControl","pos":[0,20]}]},{"pos":[73327,73337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73339,73344]},{"pos":[73353,73365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73371,73393],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[73395,73435]},{"pos":[73490,73500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[73502,73512]},{"content":"The ID of the menu to show.","pos":[73515,73542]},{"pos":[73549,73561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[73563,73622]},{"pos":[73628,73643],"content":"Method showTabs","linkify":"Method showTabs","nodes":[{"content":"Method showTabs","pos":[0,15]}]},{"pos":[73696,73706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73708,73713]},{"pos":[73722,73734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73740,73751],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[73753,73880]},{"pos":[73929,73939],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73941,73946]},{"content":"The value to assign to the skip property of the control; optional.","pos":[73949,74015]},{"pos":[74022,74034],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[74036,74142]},{"pos":[74149,74156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[74158,74353]},{"pos":[74359,74370],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[74425,74435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[74437,74450]},{"pos":[74459,74471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74477,74489],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[74531,74541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74543,74548]},{"pos":[74557,74569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74575,74592],"content":"Method styleValue","linkify":"Method styleValue","nodes":[{"content":"Method styleValue","pos":[0,17]}]},{"pos":[74633,74645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74651,74661],"content":"Method tab","linkify":"Method tab","nodes":[{"content":"Method tab","pos":[0,10]}]},{"pos":[74718,74728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74730,74735]},{"content":"mode","pos":[74749,74753]},{"pos":[74762,74774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74780,74800],"content":"Method tabAppearance","linkify":"Method tabAppearance","nodes":[{"content":"Method tabAppearance","pos":[0,20]}]},{"pos":[74850,74860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74862,74867]},{"pos":[74876,74888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74894,74914],"content":"Method tabAutoChange","linkify":"Method tabAutoChange","nodes":[{"content":"Method tabAutoChange","pos":[0,20]}]},{"pos":[74972,74982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74984,74989]},{"pos":[74998,75010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75016,75032],"content":"Method tabChange","linkify":"Method tabChange","nodes":[{"content":"Method tabChange","pos":[0,16]}]},{"pos":[75082,75092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"FromTab","pos":[75094,75101]},{"pos":[75110,75122],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75128,75144],"content":"Method tabLayout","linkify":"Method tabLayout","nodes":[{"content":"Method tabLayout","pos":[0,16]}]},{"pos":[75190,75200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75202,75207]},{"pos":[75216,75228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75234,75248],"content":"Method tabMode","linkify":"Method tabMode","nodes":[{"content":"Method tabMode","pos":[0,14]}]},{"pos":[75301,75311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[75313,75317]},{"pos":[75326,75338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75344,75363],"content":"Method tabPlacement","linkify":"Method tabPlacement","nodes":[{"content":"Method tabPlacement","pos":[0,19]}]},{"pos":[75412,75422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75424,75429]},{"pos":[75438,75450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75456,75467],"content":"Method tabs","linkify":"Method tabs","nodes":[{"content":"Method tabs","pos":[0,11]}]},{"pos":[75508,75518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75520,75525]},{"pos":[75534,75546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75552,75567],"content":"Method tabValue","linkify":"Method tabValue","nodes":[{"content":"Method tabValue","pos":[0,15]}]},{"pos":[75612,75622],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75624,75629]},{"pos":[75638,75650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75656,75670],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[75672,75715]},{"pos":[75748,75760],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[75762,75864]},{"pos":[75871,75878],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[75880,75952]},{"pos":[75958,75968],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[75970,76032]},{"pos":[76082,76092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76094,76099]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[76102,76186]},{"content":"mode","pos":[76198,76202]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[76205,76289]},{"pos":[76296,76308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[76310,76359]},{"pos":[76365,76381],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[76444,76454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76456,76461]},{"content":"mode","pos":[76475,76479]},{"pos":[76488,76500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76506,76526],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[76585,76595],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[76597,76601]},{"pos":[76610,76622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76628,76649],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[76700,76710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76712,76717]},{"pos":[76726,76738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76744,76758],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[76760,76819]},{"pos":[76863,76873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76875,76880]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[76883,76967]},{"pos":[76974,76986],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[76988,77042]},{"pos":[77048,77063],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[77065,77127]},{"pos":[77172,77182],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77184,77189]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[77192,77271]},{"pos":[77278,77290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[77292,77341]},{"pos":[77347,77358],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[77399,77409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77411,77416]},{"pos":[77425,77437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[77443,77470],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[77534,77544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[77546,77550]},{"pos":[77559,77571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[77577,77592],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[77594,77637]},{"pos":[77682,77692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77694,77699]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[77702,77774]},{"pos":[77781,77793],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[77795,77825]},{"pos":[77831,77850],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[77852,77900]},{"pos":[77949,77959],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77961,77966]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[77969,78046]},{"pos":[78053,78065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[78067,78102]},{"pos":[78108,78128],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[78130,78189]},{"pos":[78239,78249],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78251,78256]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[78259,78347]},{"pos":[78354,78366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[78368,78414]},{"pos":[78420,78438],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[78440,78523]},{"pos":[78571,78581],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78583,78588]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[78591,78671]},{"pos":[78678,78690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[78692,78748]},{"pos":[78754,78771],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[78773,78825]},{"pos":[78872,78882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78884,78889]},{"content":"The user height for the control; optional.","pos":[78892,78934]},{"pos":[78941,78953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[78955,78994]},{"pos":[79000,79015],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[79017,79099]},{"pos":[79144,79154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79156,79161]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[79164,79243]},{"pos":[79250,79262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[79264,79319]},{"pos":[79326,79333],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[79335,79505]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[79506,79581]},{"content":"This method lets you programmatically determine and set the value.","pos":[79582,79648]},{"pos":[79654,79677],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[79679,79735]},{"pos":[79788,79798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79800,79805]},{"content":"The organization container to set for the control; optional.","pos":[79808,79868]},{"pos":[79875,79887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[79889,79932]},{"pos":[79938,79959],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[79961,80015]},{"pos":[80066,80076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80078,80083]},{"content":"The organization sibling to set for the control; optional.","pos":[80086,80144]},{"pos":[80151,80163],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[80165,80206]},{"pos":[80212,80233],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[80235,80284]},{"pos":[80335,80345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80347,80352]},{"content":"The user label text to set for the control; optional.","pos":[80355,80408]},{"pos":[80415,80427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[80429,80465]},{"pos":[80471,80495],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[80497,80550]},{"pos":[80604,80614],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80616,80621]},{"content":"The user security level to set for the control; optional.","pos":[80624,80681]},{"pos":[80688,80700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[80702,80742]},{"pos":[80748,80763],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[80765,80913]},{"pos":[80958,80968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80970,80975]},{"content":"The value to assign to the userSkip property; optional.","pos":[80978,81033]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[81034,81129]},{"pos":[81136,81148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[81150,81219]},{"pos":[81225,81241],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[81243,81320]},{"pos":[81366,81376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81378,81383]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[81386,81452]},{"pos":[81459,81471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[81473,81602]},{"pos":[81609,81616],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[81618,81712]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[81713,81829],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[81830,81980]},{"pos":[81986,82006],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[82064,82074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82076,82081]},{"pos":[82090,82102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82108,82139],"content":"Method verticalScrollBarVisible","linkify":"Method verticalScrollBarVisible","nodes":[{"content":"Method verticalScrollBarVisible","pos":[0,31]}]},{"pos":[82208,82218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82220,82225]},{"pos":[82234,82246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82252,82274],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[82276,82337]},{"pos":[82406,82416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82418,82423]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[82426,82503]},{"content":"mode","pos":[82515,82519]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[82522,82599]},{"pos":[82606,82618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[82620,82668]},{"pos":[82674,82700],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[82702,82761]},{"pos":[82826,82836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[82838,82842]},{"pos":[82851,82863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[82865,82919]},{"pos":[82925,82952],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[82954,83015]},{"pos":[83072,83082],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83084,83089]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[83092,83170]},{"pos":[83177,83189],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[83191,83239]},{"pos":[83245,83264],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[83313,83323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83325,83330]},{"pos":[83339,83351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83357,83371],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[83373,83443]},{"pos":[83495,83505],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83507,83512]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[83515,83587]},{"pos":[83594,83606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[83608,83657]},{"pos":[83663,83675],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[83677,83715]},{"pos":[83767,83777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83779,83784]},{"content":"mode","pos":[83798,83802]},{"pos":[83811,83823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[83825,83860]},{"pos":[83867,83874],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[83876,83929]},{"content":"Calculate the width according to the following table.","pos":[83930,83983]},{"content":"Mode","pos":[83987,83991]},{"content":"Width calculation","pos":[84004,84021]},{"content":"-1 Exact","pos":[84207,84215]},{"content":"The exact width in pixels of the controls is used.","pos":[84224,84274]},{"content":"0 Auto","pos":[84317,84323]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[84334,84422]},{"content":"1 Column width","pos":[84427,84441]},{"content":"The layout of the form determines the width of the control.","pos":[84444,84503]},{"content":"The width and width calculation mode can be set separately.","pos":[84536,84595]},{"pos":[84601,84617],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[84619,84681]},{"pos":[84727,84737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84739,84744]},{"pos":[84753,84765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[84767,84828]},{"pos":[84835,84842],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[84844,84897]},{"content":"Mode","pos":[84901,84905]},{"content":"Width calculation","pos":[84916,84933]},{"content":"Exact","pos":[85117,85122]},{"content":"The exact width in pixels of the controls is used.","pos":[85132,85182]},{"content":"Auto","pos":[85225,85229]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[85240,85328]},{"content":"Column width","pos":[85333,85345]},{"content":"The layout of the form determines the width of the control.","pos":[85348,85407]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[85440,85523]},{"pos":[85529,85546],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[85548,85586]},{"pos":[85633,85643],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85645,85650]},{"pos":[85659,85671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[85673,85708]},{"pos":[85715,85722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[85724,85797]},{"pos":[85803,85818],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[85820,85850]},{"pos":[85884,85900],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[85902,85944]},{"pos":[85979,85997],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[86082,86092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[86094,86100]},{"content":"e","pos":[86114,86115]},{"pos":[86123,86134],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[86136,86234]},{"pos":[86320,86330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[86332,86342]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[86345,86430]},{"content":"dragMode","pos":[86442,86450]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[86453,86538]},{"content":"x","pos":[86550,86551]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[86554,86639]},{"content":"y","pos":[86651,86652]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[86655,86740]},{"pos":[86746,86760],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[86762,86823]},{"pos":[86857,86864],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[86866,86994]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[86995,87099]},{"pos":[87105,87134],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[87252,87262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[87264,87280]},{"content":"objectMethodToCall","pos":[87294,87312]},{"content":"overrideObject","pos":[87326,87340]},{"pos":[87348,87363],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[87365,87411]},{"pos":[87445,87462],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[87464,87534]},{"pos":[87624,87634],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[87636,87637]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[87640,87701]},{"content":"y","pos":[87713,87714]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[87717,87778]},{"content":"button","pos":[87790,87796]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[87799,87860]},{"content":"Ctrl","pos":[87872,87876]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[87879,87940]},{"content":"Shift","pos":[87952,87957]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[87960,88021]},{"pos":[88027,88041],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[88074,88086],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[88088,88142]},{"pos":[88173,88186],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[88188,88288]},{"pos":[88370,88380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[88382,88392]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[88395,88480]},{"content":"dragMode","pos":[88492,88500]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[88503,88588]},{"content":"x","pos":[88600,88601]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[88604,88689]},{"content":"y","pos":[88701,88702]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[88705,88790]},{"pos":[88796,88810],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[88843,88860],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[88944,88954],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[88956,88962]},{"content":"e","pos":[88976,88977]},{"pos":[88985,88999],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[89001,89041]},{"pos":[89074,89085],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[89087,89139]},{"pos":[89169,89182],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[89230,89240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[89242,89251]},{"pos":[89259,89282],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[89284,89325]},{"pos":[89367,89377],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[89379,89412]},{"pos":[89441,89458],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[89460,89514]},{"pos":[89550,89571],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[89573,89594]},{"pos":[89634,89653],"content":"Method OnTabChanged","linkify":"Method OnTabChanged","nodes":[{"content":"Method OnTabChanged","pos":[0,19]}]},{"pos":[89739,89749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[89751,89757]},{"content":"e","pos":[89771,89772]},{"pos":[89780,89798],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[89800,89871]},{"pos":[89922,89932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[89934,89943]},{"content":"The string value to use to filter data; optional.","pos":[89946,89995]},{"pos":[90001,90017],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[90019,90115]},{"pos":[90150,90167],"content":"Method tabChanged","linkify":"Method tabChanged","nodes":[{"content":"Method tabChanged","pos":[0,17]}]},{"pos":[90226,90236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"FromTab","pos":[90238,90245]},{"content":"ToTab","pos":[90259,90264]},{"pos":[90272,90293],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[90295,90364]},{"pos":[90426,90436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[90438,90443]},{"content":"The preferred height of the control.","pos":[90446,90482]},{"content":"height","pos":[90494,90500]},{"content":"The preferred height of the control.","pos":[90503,90539]},{"pos":[90544,90563],"content":"Class FormTableCell","linkify":"Class FormTableCell","nodes":[{"content":"Class FormTableCell","pos":[0,19]}]},{"pos":[90608,90615],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[90621,90629],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[90635,90642],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[90646,90652]},{"content":"Description","pos":[90702,90713]},{"content":"public int colSpan(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[90790,90823],"source":"public int colSpan(\\[int value\\])"},{"content":"public AnyType data(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[90862,90900],"source":"public AnyType data(\\[AnyType value\\])"},{"content":"public FormControl editControl(<ph id=\"ph1\">\\[</ph>FormControl value<ph id=\"ph2\">\\]</ph>)","pos":[90934,90987],"source":"public FormControl editControl(\\[FormControl value\\])"},{"content":"public Object object(<ph id=\"ph1\">\\[</ph>Object value<ph id=\"ph2\">\\]</ph>)","pos":[91006,91044],"source":"public Object object(\\[Object value\\])"},{"content":"public int rowSpan(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[91078,91111],"source":"public int rowSpan(\\[int value\\])"},{"pos":[91153,91167],"content":"Method colSpan","linkify":"Method colSpan","nodes":[{"content":"Method colSpan","pos":[0,14]}]},{"pos":[91211,91221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91223,91228]},{"pos":[91237,91249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91255,91266],"content":"Method data","linkify":"Method data","nodes":[{"content":"Method data","pos":[0,11]}]},{"pos":[91315,91325],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91327,91332]},{"pos":[91341,91353],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91359,91377],"content":"Method editControl","linkify":"Method editControl","nodes":[{"content":"Method editControl","pos":[0,18]}]},{"pos":[91441,91451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91453,91458]},{"pos":[91467,91479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91485,91498],"content":"Method object","linkify":"Method object","nodes":[{"content":"Method object","pos":[0,13]}]},{"pos":[91547,91557],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91559,91564]},{"pos":[91573,91585],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91591,91605],"content":"Method rowSpan","linkify":"Method rowSpan","nodes":[{"content":"Method rowSpan","pos":[0,14]}]},{"pos":[91649,91659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91661,91666]},{"pos":[91675,91687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[91692,91714],"content":"Class FormTableControl","linkify":"Class FormTableControl","nodes":[{"content":"Class FormTableControl","pos":[0,22]}]},{"pos":[91767,91774],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[91780,91788],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[91794,91801],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[91805,91811]},{"content":"Description","pos":[91923,91934]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[92385,92489],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[92675,92770],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[92965,93080],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[93255,93301],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[93373,93413]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[93545,93588],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[93663,93730]},{"content":"public boolean allowSysSetup()","pos":[93835,93865]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[93953,94036]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[94125,94174],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[94243,94341]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[94415,94456],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[94533,94582]},{"content":"public int beginDrag(int x, int y)","pos":[94705,94739]},{"content":"Is called when the user starts to drag a form control.","pos":[94823,94877]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[94995,95033],"source":"public int bottomMargin(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[95285,95339]},{"content":"Retrieves the size of the control.","pos":[95403,95437]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[95575,95660],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[95865,95911]},{"content":"public FormTableCell cell(<ph id=\"ph1\">\\[</ph>int column<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int row<ph id=\"ph4\">\\]</ph>)","pos":[96155,96209],"source":"public FormTableCell cell(\\[int column\\], \\[int row\\])"},{"content":"public str colLabel(int column)","pos":[96445,96476]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[96735,96772],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[96853,96898]},{"content":"public int column(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[97025,97057],"source":"public int column(\\[int value\\])"},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[97315,97348],"source":"public int columns(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[97605,97677],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[97723,97790]},{"content":"public List configurationKeyEx()","pos":[97895,97927]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[98013,98109]},{"content":"public boolean contains(FormControl control)","pos":[98185,98229]},{"content":"public int controlCount()","pos":[98475,98500]},{"content":"public FormControl controlNum(int controlNo)","pos":[98765,98809]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[99055,99099],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[99173,99251]},{"content":"public AnyType data(int column, int row)","pos":[99345,99385]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[99635,99677],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[99753,99878]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[99925,99964],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[100043,100242]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[100247,100281],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[100365,100446]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[100537,100618]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[100655,100749]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[100827,100904]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[100945,101041]},{"content":"public str dragText()","pos":[101117,101138]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[101235,101305]},{"content":"public FormControl editControl(int Column, int Row)","pos":[101407,101458]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[101697,101738],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[101815,101866]},{"content":"public boolean gridLines(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[101987,102030],"source":"public boolean gridLines(\\[boolean value\\])"},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[102277,102319],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[102395,102483]},{"content":"public boolean hasUserSetting()","pos":[102567,102598]},{"content":"Indicates whether the control has custom user settings.","pos":[102685,102740]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[102857,102899],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[102975,103014]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[103147,103183],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[103265,103327]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[103437,103474],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[103555,103594]},{"content":"public str helpField()","pos":[103727,103749]},{"content":"Retrieves the Help text for the control.","pos":[103845,103885]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[104017,104051],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[104135,104239]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[104307,104348],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[104425,104488]},{"content":"public boolean highlightActive(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[104597,104646],"source":"public boolean highlightActive(\\[boolean value\\])"},{"content":"public int hWnd()","pos":[104887,104904]},{"content":"Retrieves the Windows handle for the control.","pos":[105005,105050]},{"content":"public boolean isContainer()","pos":[105177,105205]},{"content":"public boolean isDisplayed()","pos":[105467,105495]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[105585,105651]},{"content":"public boolean isRestricted()","pos":[105757,105786]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[105875,105942]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[106047,106103]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[106165,106266]},{"content":"public boolean leave()","pos":[106337,106359]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[106627,106667],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[106745,106809]},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[106917,106953],"source":"public int leftMargin(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[107207,107241],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[107325,107386]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[107497,107532],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[107615,107679]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[107787,107834],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[107905,107958]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[108077,108156]},{"content":"Is called when the control is double-clicked by the user.","pos":[108195,108252]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[108367,108442]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[108485,108550]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[108657,108732]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[108775,108840]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[108947,109020]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[109065,109137]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[109237,109297],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[109527,109557],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[109645,109798]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[109833,109875],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[110123,110162]},{"content":"public FormControl parentControl()","pos":[110413,110447]},{"content":"Retrieves the parent control for the control.","pos":[110531,110576]},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[110703,110740],"source":"public int rightMargin(\\[int value\\])"},{"content":"public int row(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[110993,111022],"source":"public int row(\\[int value\\])"},{"content":"public str rowLabel(int row)","pos":[111283,111311]},{"content":"public int rows(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[111573,111603],"source":"public int rows(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[111863,111920],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[111981,112040]},{"content":"public boolean showColLabels(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[112153,112200],"source":"public boolean showColLabels(\\[boolean value\\])"},{"content":"public int showContextMenu(int menuHandle)","pos":[112443,112485]},{"content":"Shows the shortcut menu for the control.","pos":[112561,112601]},{"content":"public boolean showRowLabels(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[112733,112780],"source":"public boolean showRowLabels(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[113023,113061],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[113141,113268]},{"content":"public str toolTip()","pos":[113313,113333]},{"content":"Retrieves the tooltip text for the control.","pos":[113431,113474]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[113603,113642],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[113721,113783]},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[113893,113928],"source":"public int topMargin(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114183,114216],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[114301,114360]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114473,114507],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[114591,114653]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114763,114793],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[115053,115104]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115343,115377],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[115461,115504]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115633,115671],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[115751,115799]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115923,115962],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[116041,116100]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[116213,116250],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[116331,116414]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[116503,116539],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[116621,116673]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[116793,116827],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[116911,116993]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[117083,117125],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[117201,117257]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[117373,117413],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[117491,117545]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[117663,117703],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[117781,117830]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[117953,117996],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[118071,118124]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[118243,118277],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[118361,118509]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[118533,118568],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[118651,118728]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[118823,118870],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[119113,119173],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[119231,119292]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[119403,119457],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[119521,119580]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119693,119739],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[119811,119872]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[119983,120024],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[120101,120171]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[120273,120314],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[120391,120429]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[120563,120598],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[120681,120743]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[120853,120889],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[120971,121009]},{"content":"public void prefColumnSize(int width, int height)","pos":[121143,121192]},{"content":"Specifies the preferred column width and height for the form control.","pos":[121261,121330]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[121433,121506]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[121551,121649]},{"content":"public void setColLabel(int column, str text)","pos":[121723,121768]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[122013,122090]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[122131,122201]},{"content":"public void resetUserSetting()","pos":[122303,122333]},{"content":"Resets the user settings for the control.","pos":[122421,122462]},{"content":"public void lostFocus()","pos":[122593,122616]},{"content":"Indicates that the control has lost focus.","pos":[122711,122753]},{"content":"public void inputSearch(str searchStr)","pos":[122883,122921]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[123001,123072]},{"content":"public void dragLeave()","pos":[123173,123196]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[123291,123387]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[123463,123538],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[123753,123860],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void arrange()","pos":[124043,124064]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[124333,124407],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void deleteRows(int deleteAfterRow, int rows)","pos":[124623,124675]},{"content":";","pos":[124741,124742]},{"content":"public void endDrag()","pos":[124913,124934]},{"content":"Is called when the user has finished dragging a form control.","pos":[125031,125092]},{"content":"public void deleteCols(int deleteAfterColumn, int columns)","pos":[125203,125261]},{"content":"public void clear()","pos":[125493,125512]},{"content":"public void insertRows(int insertAfterRow, int rows)","pos":[125783,125835]},{"content":"public void gotFocus()","pos":[126073,126095]},{"content":"Indicates that the control has received focus.","pos":[126191,126237]},{"content":"public void displayControl()","pos":[126363,126391]},{"content":"Displays the control.","pos":[126481,126502]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[126653,126725],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void copy()","pos":[126943,126961]},{"content":"Copies the contents of the control to the clipboard.","pos":[127061,127113]},{"content":"public void setRowLabel(int row, str text)","pos":[127233,127275]},{"content":"public void mouseLeave()","pos":[127523,127547]},{"content":"Indicates that the mouse pointer has left the control.","pos":[127641,127695]},{"content":"public void paste()","pos":[127813,127832]},{"content":"Pastes the contents of the clipboard into the control.","pos":[127931,127985]},{"content":"public void enter()","pos":[128103,128122]},{"content":"public void cut()","pos":[128393,128410]},{"content":"Cuts the contents of the control.","pos":[128511,128544]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[128683,128752]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[128801,128901]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[128973,129049],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void updateCell(int column, int row)","pos":[129263,129306]},{"content":"public void insertCols(int insertAferColumn, int columns)","pos":[129553,129610]},{"content":"public void activeCellChanged()","pos":[129843,129874]},{"content":"public void context()","pos":[130133,130154]},{"content":"Shows the shortcut menu for the control.","pos":[130251,130291]},{"content":"public void setFocus()","pos":[130423,130445]},{"content":"Sets the focus on the control.","pos":[130541,130571]},{"pos":[130716,130733],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[130848,130858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[130860,130871]},{"content":"controlName","pos":[130885,130896]},{"content":"insertAfter","pos":[130910,130921]},{"pos":[130930,130942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[130948,130967],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[131073,131083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[131085,131097]},{"content":"controlName","pos":[131111,131122]},{"content":"insertAfter","pos":[131136,131147]},{"pos":[131156,131168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[131174,131193],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[131317,131327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[131329,131341]},{"content":"fieldId","pos":[131355,131362]},{"content":"insertAfter","pos":[131376,131387]},{"content":"arrayIndex","pos":[131401,131411]},{"pos":[131420,131432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[131438,131457],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[131459,131499]},{"pos":[131556,131566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[131568,131573]},{"content":"The new value for the property; optional.","pos":[131576,131617]},{"pos":[131624,131636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[131638,131694]},{"pos":[131701,131708],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[131710,131789]},{"pos":[131795,131811],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[131813,131880]},{"pos":[131934,131944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[131946,131951]},{"content":"The value to assign to the allowEdit property.","pos":[131954,132000]},{"pos":[132007,132019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[132021,132073]},{"pos":[132080,132087],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[132089,132211]},{"pos":[132217,132237],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[132239,132322]},{"pos":[132365,132377],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[132379,132447]},{"pos":[132453,132475],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[132477,132575]},{"pos":[132635,132645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[132647,132652]},{"content":"If supplied, the property is set to this value.","pos":[132655,132702]},{"pos":[132709,132721],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[132723,132802]},{"pos":[132809,132816],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[132818,132855]},{"pos":[132861,132883],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[132885,132934]},{"pos":[132986,132996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[132998,133003]},{"pos":[133012,133024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[133026,133070]},{"pos":[133077,133084],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[133086,133154]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[133160,133230]},{"content":"The second byte contains a value for green.","pos":[133235,133278]},{"content":"The third byte contains a value for blue.","pos":[133283,133324]},{"content":"The high-order byte must be zero.","pos":[133329,133362]},{"content":"The maximum value for a single byte is 255.","pos":[133367,133410]},{"pos":[133416,133432],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[133434,133488]},{"pos":[133535,133545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[133547,133548]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[133551,133621]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[133622,133689]},{"content":"y","pos":[133701,133702]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[133705,133775]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[133776,133843]},{"pos":[133850,133862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[133864,133903]},{"pos":[133910,133917],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[133919,134000]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[134001,134105]},{"pos":[134111,134130],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[134179,134189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[134191,134196]},{"pos":[134205,134217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134223,134245],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[134247,134281]},{"pos":[134348,134358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[134360,134365]},{"content":"The number of lines to use to determine the height.","pos":[134368,134419]},{"content":"lines","pos":[134431,134436]},{"content":"The number of lines to use to determine the height.","pos":[134439,134490]},{"pos":[134497,134509],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[134511,134557]},{"pos":[134563,134585],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[134681,134691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[134693,134705]},{"content":"fieldId","pos":[134719,134726]},{"content":"arrayIndex","pos":[134740,134750]},{"pos":[134759,134771],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134777,134794],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[134853,134863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[134865,134872]},{"pos":[134881,134893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134899,134910],"content":"Method cell","linkify":"Method cell","nodes":[{"content":"Method cell","pos":[0,11]}]},{"pos":[134973,134983],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"column","pos":[134985,134991]},{"content":"row","pos":[135005,135008]},{"pos":[135017,135029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135035,135050],"content":"Method colLabel","linkify":"Method colLabel","nodes":[{"content":"Method colLabel","pos":[0,15]}]},{"pos":[135094,135104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"column","pos":[135106,135112]},{"pos":[135121,135133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135139,135157],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[135159,135204]},{"pos":[135252,135262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135264,135269]},{"pos":[135278,135290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[135292,135335]},{"pos":[135342,135349],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[135351,135412]},{"content":"Value","pos":[135416,135421]},{"content":"Style","pos":[135424,135429]},{"content":"0","pos":[135498,135499]},{"content":"Default","pos":[135506,135513]},{"content":"1","pos":[135539,135540]},{"content":"The MicrosoftWindows palette","pos":[135547,135575]},{"content":"2","pos":[135580,135581]},{"content":"The true-color scheme","pos":[135588,135609]},{"pos":[135624,135637],"content":"Method column","linkify":"Method column","nodes":[{"content":"Method column","pos":[0,13]}]},{"pos":[135680,135690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135692,135697]},{"pos":[135706,135718],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135724,135738],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[135782,135792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135794,135799]},{"pos":[135808,135820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135826,135849],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[135851,135918]},{"pos":[136001,136011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[136013,136018]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[136021,136088]},{"pos":[136095,136107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[136109,136181]},{"pos":[136188,136195],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[136197,136278]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[136279,136372]},{"pos":[136378,136403],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[136405,136501]},{"pos":[136546,136558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[136560,136646]},{"pos":[136653,136660],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[136662,136711]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[136712,136860]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[136861,136995]},{"pos":[137001,137016],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[137073,137083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[137085,137092]},{"pos":[137101,137113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137119,137138],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[137176,137188],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137194,137211],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[137268,137278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[137280,137289]},{"pos":[137298,137310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137316,137341],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[137343,137421]},{"pos":[137476,137486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137488,137493]},{"content":"The string that contains the country/region codes to set; optional.","pos":[137496,137563]},{"pos":[137570,137582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[137584,137649]},{"pos":[137655,137666],"content":"Method data","linkify":"Method data","nodes":[{"content":"Method data","pos":[0,11]}]},{"pos":[137719,137729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"column","pos":[137731,137737]},{"content":"row","pos":[137751,137754]},{"pos":[137763,137775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137781,137804],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[137806,137931]},{"pos":[137984,137994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137996,138001]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[138004,138078]},{"pos":[138085,138097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[138099,138211]},{"pos":[138218,138225],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[138227,138354]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[138355,138448]},{"pos":[138454,138474],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[138476,138675]},{"pos":[138725,138735],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138737,138742]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[138745,138819]},{"pos":[138826,138838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[138840,138984]},{"pos":[138990,139005],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[139007,139088]},{"pos":[139133,139143],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[139145,139150]},{"content":"An integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[139153,139231]},{"pos":[139238,139250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[139252,139312]},{"pos":[139319,139326],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave Method, the dragOver Method, and the dragOverEx Method to specify the behavior.","pos":[139328,139425]},{"pos":[139431,139446],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[139448,139542]},{"pos":[139636,139646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[139648,139658]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[139661,139746]},{"content":"dragMode","pos":[139758,139766]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[139769,139854]},{"content":"x","pos":[139866,139867]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[139870,139955]},{"content":"y","pos":[139967,139968]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[139971,140056]},{"pos":[140063,140075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[140077,140142]},{"pos":[140148,140165],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[140167,140263]},{"pos":[140353,140363],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[140365,140375]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[140378,140463]},{"content":"dragMode","pos":[140475,140483]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[140486,140571]},{"content":"x","pos":[140583,140584]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[140587,140672]},{"content":"y","pos":[140684,140685]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[140688,140773]},{"pos":[140780,140792],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[140794,140859]},{"pos":[140865,140880],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[140882,140952]},{"pos":[140986,140998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[141000,141131]},{"pos":[141137,141155],"content":"Method editControl","linkify":"Method editControl","nodes":[{"content":"Method editControl","pos":[0,18]}]},{"pos":[141219,141229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Column","pos":[141231,141237]},{"content":"Row","pos":[141251,141254]},{"pos":[141263,141275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[141281,141295],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[141297,141348]},{"pos":[141400,141410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141412,141417]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[141420,141492]},{"pos":[141499,141511],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[141513,141561]},{"pos":[141568,141575],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[141577,141652]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[141653,141748]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[141749,141883]},{"pos":[141889,141905],"content":"Method gridLines","linkify":"Method gridLines","nodes":[{"content":"Method gridLines","pos":[0,16]}]},{"pos":[141959,141969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141971,141976]},{"pos":[141985,141997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142003,142020],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[142022,142110]},{"pos":[142163,142173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[142175,142178]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[142181,142251]},{"pos":[142258,142270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[142272,142339]},{"pos":[142345,142366],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[142368,142423]},{"pos":[142467,142479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[142481,142544]},{"pos":[142550,142563],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[142565,142604]},{"pos":[142657,142667],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142669,142674]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[142677,142742]},{"content":"mode","pos":[142754,142758]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[142761,142826]},{"pos":[142833,142845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[142847,142883]},{"pos":[142890,142897],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[142899,142952]},{"content":"Calculate the height according to the following table.","pos":[142953,143007]},{"content":"Mode","pos":[143011,143015]},{"content":"Height calculation","pos":[143029,143047]},{"content":"-1 Exact","pos":[143235,143243]},{"content":"The exact height in pixels of the controls is used.","pos":[143253,143304]},{"content":"0 Auto","pos":[143347,143353]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[143365,143454]},{"content":"1 Column height","pos":[143459,143474]},{"content":"The layout of the form determines the height of the control.","pos":[143477,143537]},{"content":"The height and height calculation mode can be set separately.","pos":[143570,143631]},{"pos":[143637,143654],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[143656,143718]},{"pos":[143765,143775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143777,143782]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[143785,143860]},{"pos":[143867,143879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[143881,143902]},{"pos":[143909,143916],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[143918,143972]},{"content":"Mode","pos":[143976,143980]},{"content":"Height calculation","pos":[143992,144010]},{"content":"Exact","pos":[144196,144201]},{"content":"The exact height in pixels of the controls is used.","pos":[144212,144263]},{"content":"Auto","pos":[144306,144310]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[144322,144411]},{"content":"Column height","pos":[144416,144429]},{"content":"The layout of the form determines the height of the control.","pos":[144432,144492]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[144525,144610]},{"pos":[144616,144634],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[144636,144675]},{"pos":[144723,144733],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144735,144740]},{"content":"An integer that specifies the height in pixels; optional.","pos":[144743,144800]},{"pos":[144807,144819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[144821,144842]},{"pos":[144849,144856],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[144858,144948]},{"pos":[144954,144970],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[144972,145012]},{"pos":[145047,145059],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[145061,145149]},{"pos":[145156,145163],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[145165,145235]},{"content":"Use the helpText method to set the value of the Help text.","pos":[145236,145294]},{"pos":[145300,145315],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[145317,145421]},{"pos":[145466,145476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[145478,145483]},{"content":"The value to assign as the Help text for the control.","pos":[145486,145539]},{"pos":[145546,145558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[145560,145615]},{"pos":[145622,145629],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[145631,145699]},{"content":"The Help text must not exceed 250 characters.","pos":[145700,145745]},{"pos":[145751,145773],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[145775,145838]},{"pos":[145890,145900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[145902,145907]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[145910,145977]},{"pos":[145984,145996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[145998,146048]},{"pos":[146054,146076],"content":"Method highlightActive","linkify":"Method highlightActive","nodes":[{"content":"Method highlightActive","pos":[0,22]}]},{"pos":[146136,146146],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146148,146153]},{"pos":[146162,146174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[146180,146191],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[146193,146238]},{"pos":[146268,146280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[146282,146309]},{"pos":[146316,146323],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[146325,146369]},{"pos":[146375,146393],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[146434,146446],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[146452,146470],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[146472,146538]},{"pos":[146579,146591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[146593,146644]},{"pos":[146651,146658],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[146660,146728]},{"pos":[146734,146753],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[146755,146822]},{"pos":[146864,146876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[146878,146930]},{"pos":[146936,146961],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[146963,147064]},{"pos":[147133,147143],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[147145,147162]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[147165,147293]},{"pos":[147300,147312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[147314,147473]},{"pos":[147480,147487],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[147489,147566]},{"content":"FormAllowUserSetup::No 0","pos":[147906,147930]},{"content":"No changes can be made to the control.","pos":[147941,147979]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[147980,148069]},{"content":"FormAllowUserSetup::Restricted 1","pos":[148074,148106]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[148109,148201]},{"content":"The user cannot move the control.","pos":[148202,148235]},{"content":"FormAllowUserSetup::Yes 2","pos":[148242,148267]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[148277,148369]},{"content":"The user can also move the control.","pos":[148370,148405]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[148409,148598]},{"pos":[148604,148616],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[148651,148663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148669,148680],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[148682,148746]},{"pos":[148797,148807],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148809,148814]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[148817,148903]},{"content":"mode","pos":[148915,148919]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[148922,149008]},{"pos":[149015,149027],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[149029,149080]},{"pos":[149086,149103],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[149150,149160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149162,149167]},{"pos":[149176,149188],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149194,149209],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[149211,149272]},{"pos":[149317,149327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149329,149334]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[149337,149423]},{"pos":[149430,149442],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[149444,149500]},{"pos":[149506,149522],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[149524,149588]},{"pos":[149634,149644],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149646,149651]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[149654,149735]},{"pos":[149742,149754],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[149756,149807]},{"pos":[149813,149833],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[149835,149888]},{"pos":[149946,149956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149958,149963]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[149966,150060]},{"pos":[150067,150079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[150081,150154]},{"pos":[150160,150180],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[150182,150239]},{"pos":[150331,150341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[150343,150344]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[150347,150408]},{"content":"y","pos":[150420,150421]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[150424,150485]},{"content":"button","pos":[150497,150503]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[150506,150567]},{"content":"Ctrl","pos":[150579,150583]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[150586,150647]},{"content":"Shift","pos":[150659,150664]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[150667,150728]},{"pos":[150735,150747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[150749,150788]},{"pos":[150795,150802],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[150804,150908]},{"pos":[150914,150930],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[150932,150997]},{"pos":[151085,151095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[151097,151098]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[151101,151162]},{"content":"y","pos":[151174,151175]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[151178,151239]},{"content":"button","pos":[151251,151257]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[151260,151321]},{"content":"Ctrl","pos":[151333,151337]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[151340,151401]},{"content":"Shift","pos":[151413,151418]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[151421,151482]},{"pos":[151489,151501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[151503,151542]},{"pos":[151549,151556],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[151558,151662]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[151663,151798]},{"pos":[151804,151820],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[151822,151887]},{"pos":[151975,151985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[151987,151988]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[151991,152052]},{"content":"y","pos":[152064,152065]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[152068,152129]},{"content":"button","pos":[152141,152147]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[152150,152211]},{"content":"Ctrl","pos":[152223,152227]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[152230,152291]},{"content":"Shift","pos":[152303,152308]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[152311,152372]},{"pos":[152379,152391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[152393,152432]},{"pos":[152439,152446],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[152448,152552]},{"pos":[152558,152572],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[152574,152646]},{"pos":[152732,152742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[152744,152745]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[152748,152809]},{"content":"y","pos":[152821,152822]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[152825,152886]},{"content":"button","pos":[152898,152904]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[152907,152968]},{"content":"Ctrl","pos":[152980,152984]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[152987,153048]},{"content":"Shift","pos":[153060,153065]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[153068,153129]},{"pos":[153136,153148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[153150,153189]},{"pos":[153196,153203],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[153205,153309]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[153310,153445]},{"pos":[153451,153469],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[153540,153550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[153552,153561]},{"content":"insertAfterId","pos":[153575,153588]},{"pos":[153597,153609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[153615,153626],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[153628,153781]},{"pos":[153822,153832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153834,153839]},{"content":"The name to assign to the control.","pos":[153842,153876]},{"pos":[153883,153895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[153897,153961]},{"pos":[153968,153975],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[153977,154071]},{"content":"Begins with a letter.","pos":[154077,154098]},{"content":"Doesn't exceed 250 characters.","pos":[154103,154133]},{"content":"Can include numbers and underscore characters.","pos":[154138,154184]},{"content":"Cannot include punctuation or spaces.","pos":[154189,154226]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.","pos":[154231,154361]},{"pos":[154367,154390],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[154443,154453],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154455,154460]},{"pos":[154469,154481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154487,154514],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[154566,154578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154584,154604],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[154606,154651]},{"pos":[154698,154710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[154712,154747]},{"pos":[154753,154771],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[154819,154829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154831,154836]},{"pos":[154845,154857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154863,154873],"content":"Method row","linkify":"Method row","nodes":[{"content":"Method row","pos":[0,10]}]},{"pos":[154913,154923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154925,154930]},{"pos":[154939,154951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154957,154972],"content":"Method rowLabel","linkify":"Method rowLabel","nodes":[{"content":"Method rowLabel","pos":[0,15]}]},{"pos":[155013,155023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"row","pos":[155025,155028]},{"pos":[155037,155049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155055,155066],"content":"Method rows","linkify":"Method rows","nodes":[{"content":"Method rows","pos":[0,11]}]},{"pos":[155107,155117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155119,155124]},{"pos":[155133,155145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155151,155169],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[155171,155230]},{"pos":[155298,155308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155310,155315]},{"content":"The ID of the security key to assign to the control; optional.","pos":[155318,155380]},{"pos":[155387,155399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[155401,155500]},{"pos":[155506,155526],"content":"Method showColLabels","linkify":"Method showColLabels","nodes":[{"content":"Method showColLabels","pos":[0,20]}]},{"pos":[155584,155594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155596,155601]},{"pos":[155610,155622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155628,155650],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[155652,155692]},{"pos":[155747,155757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[155759,155769]},{"content":"The ID of the menu to show.","pos":[155772,155799]},{"pos":[155806,155818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[155820,155879]},{"pos":[155885,155905],"content":"Method showRowLabels","linkify":"Method showRowLabels","nodes":[{"content":"Method showRowLabels","pos":[0,20]}]},{"pos":[155963,155973],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155975,155980]},{"pos":[155989,156001],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156007,156018],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[156020,156147]},{"pos":[156196,156206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156208,156213]},{"content":"The value to assign to the skip property of the control; optional.","pos":[156216,156282]},{"pos":[156289,156301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[156303,156409]},{"pos":[156416,156423],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[156425,156620]},{"pos":[156626,156640],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[156642,156685]},{"pos":[156718,156730],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[156732,156834]},{"pos":[156841,156848],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[156850,156922]},{"pos":[156928,156938],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[156940,157002]},{"pos":[157052,157062],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157064,157069]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[157072,157156]},{"content":"mode","pos":[157168,157172]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[157175,157259]},{"pos":[157266,157278],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[157280,157329]},{"pos":[157335,157351],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[157397,157407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157409,157414]},{"pos":[157423,157435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157441,157455],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[157457,157516]},{"pos":[157560,157570],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157572,157577]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[157580,157664]},{"pos":[157671,157683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[157685,157739]},{"pos":[157745,157760],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[157762,157824]},{"pos":[157869,157879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157881,157886]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[157889,157968]},{"pos":[157975,157987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[157989,158038]},{"pos":[158044,158055],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[158096,158106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[158108,158113]},{"pos":[158122,158134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[158140,158167],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[158231,158241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[158243,158247]},{"pos":[158256,158268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[158274,158289],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[158291,158334]},{"pos":[158379,158389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[158391,158396]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[158399,158471]},{"pos":[158478,158490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[158492,158522]},{"pos":[158528,158547],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[158549,158597]},{"pos":[158646,158656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[158658,158663]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[158666,158743]},{"pos":[158750,158762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[158764,158799]},{"pos":[158805,158825],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[158827,158886]},{"pos":[158936,158946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[158948,158953]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[158956,159044]},{"pos":[159051,159063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[159065,159111]},{"pos":[159117,159135],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[159137,159220]},{"pos":[159268,159278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159280,159285]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[159288,159368]},{"pos":[159375,159387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[159389,159445]},{"pos":[159451,159468],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[159470,159522]},{"pos":[159569,159579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159581,159586]},{"content":"The user height for the control; optional.","pos":[159589,159631]},{"pos":[159638,159650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[159652,159691]},{"pos":[159697,159712],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[159714,159796]},{"pos":[159841,159851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159853,159858]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[159861,159940]},{"pos":[159947,159959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[159961,160016]},{"pos":[160023,160030],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[160032,160202]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[160203,160278]},{"content":"This method lets you programmatically determine and set the value.","pos":[160279,160345]},{"pos":[160351,160374],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[160376,160432]},{"pos":[160485,160495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160497,160502]},{"content":"The organization container to set for the control; optional.","pos":[160505,160565]},{"pos":[160572,160584],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[160586,160629]},{"pos":[160635,160656],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[160658,160712]},{"pos":[160763,160773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160775,160780]},{"content":"The organization sibling to set for the control; optional.","pos":[160783,160841]},{"pos":[160848,160860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[160862,160903]},{"pos":[160909,160930],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[160932,160981]},{"pos":[161032,161042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[161044,161049]},{"content":"The user label text to set for the control; optional.","pos":[161052,161105]},{"pos":[161112,161124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[161126,161162]},{"pos":[161168,161192],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[161194,161247]},{"pos":[161301,161311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[161313,161318]},{"content":"The user security level to set for the control; optional.","pos":[161321,161378]},{"pos":[161385,161397],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[161399,161439]},{"pos":[161445,161460],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[161462,161610]},{"pos":[161655,161665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[161667,161672]},{"content":"The value to assign to the userSkip property; optional.","pos":[161675,161730]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[161731,161826]},{"pos":[161833,161845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[161847,161916]},{"pos":[161922,161938],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[161940,162017]},{"pos":[162063,162073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[162075,162080]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[162083,162149]},{"pos":[162156,162168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[162170,162299]},{"pos":[162306,162313],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[162315,162409]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[162410,162526],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[162527,162677]},{"pos":[162683,162703],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[162761,162771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[162773,162778]},{"pos":[162787,162799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[162805,162827],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[162829,162890]},{"pos":[162959,162969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[162971,162976]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[162979,163056]},{"content":"mode","pos":[163068,163072]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[163075,163152]},{"pos":[163159,163171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[163173,163221]},{"pos":[163227,163253],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[163255,163314]},{"pos":[163379,163389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[163391,163395]},{"pos":[163404,163416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[163418,163472]},{"pos":[163478,163505],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[163507,163568]},{"pos":[163625,163635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[163637,163642]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[163645,163723]},{"pos":[163730,163742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[163744,163792]},{"pos":[163798,163812],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[163814,163884]},{"pos":[163936,163946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[163948,163953]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[163956,164028]},{"pos":[164035,164047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[164049,164098]},{"pos":[164104,164116],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[164118,164156]},{"pos":[164208,164218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[164220,164225]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[164228,164292]},{"content":"mode","pos":[164304,164308]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[164311,164375]},{"pos":[164382,164394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[164396,164431]},{"pos":[164438,164445],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[164447,164500]},{"content":"Calculate the width according to the following table.","pos":[164501,164554]},{"content":"Mode","pos":[164558,164562]},{"content":"Width calculation","pos":[164575,164592]},{"content":"-1 Exact","pos":[164778,164786]},{"content":"The exact width in pixels of the controls is used.","pos":[164795,164845]},{"content":"0 Auto","pos":[164888,164894]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[164905,164993]},{"content":"1 Column width","pos":[164998,165012]},{"content":"The layout of the form determines the width of the control.","pos":[165015,165074]},{"content":"The width and width calculation mode can be set separately.","pos":[165107,165166]},{"pos":[165172,165188],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[165190,165252]},{"pos":[165298,165308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165310,165315]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[165318,165392]},{"pos":[165399,165411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[165413,165474]},{"pos":[165481,165488],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[165490,165543]},{"content":"Mode","pos":[165547,165551]},{"content":"Width calculation","pos":[165562,165579]},{"content":"Exact","pos":[165763,165768]},{"content":"The exact width in pixels of the controls is used.","pos":[165778,165828]},{"content":"Auto","pos":[165871,165875]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[165886,165974]},{"content":"Column width","pos":[165979,165991]},{"content":"The layout of the form determines the width of the control.","pos":[165994,166053]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[166086,166169]},{"pos":[166175,166192],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[166194,166232]},{"pos":[166279,166289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166291,166296]},{"content":"An integer that specifies the width in pixels; optional.","pos":[166299,166355]},{"pos":[166362,166374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[166376,166411]},{"pos":[166418,166425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[166427,166500]},{"pos":[166506,166527],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[166529,166598]},{"pos":[166660,166670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[166672,166677]},{"content":"The preferred height of the control.","pos":[166680,166716]},{"content":"height","pos":[166728,166734]},{"content":"The preferred height of the control.","pos":[166737,166773]},{"pos":[166779,166790],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[166792,166890]},{"pos":[166976,166986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[166988,166998]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[167001,167086]},{"content":"dragMode","pos":[167098,167106]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[167109,167194]},{"content":"x","pos":[167206,167207]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[167210,167295]},{"content":"y","pos":[167307,167308]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[167311,167396]},{"pos":[167402,167420],"content":"Method setColLabel","linkify":"Method setColLabel","nodes":[{"content":"Method setColLabel","pos":[0,18]}]},{"pos":[167478,167488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"column","pos":[167490,167496]},{"content":"text","pos":[167510,167514]},{"pos":[167522,167539],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[167541,167611]},{"pos":[167701,167711],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[167713,167714]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[167717,167778]},{"content":"y","pos":[167790,167791]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[167794,167855]},{"content":"button","pos":[167867,167873]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[167876,167937]},{"content":"Ctrl","pos":[167949,167953]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[167956,168017]},{"content":"Shift","pos":[168029,168034]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[168037,168098]},{"pos":[168104,168127],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[168129,168170]},{"pos":[168212,168228],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[168230,168272]},{"pos":[168307,168325],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[168327,168398]},{"pos":[168449,168459],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[168461,168470]},{"content":"The string value to use to filter data; optional.","pos":[168473,168522]},{"pos":[168528,168544],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[168546,168642]},{"pos":[168677,168694],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[168778,168788],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[168790,168796]},{"content":"e","pos":[168810,168811]},{"pos":[168819,168848],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[168966,168976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[168978,168994]},{"content":"objectMethodToCall","pos":[169008,169026]},{"content":"overrideObject","pos":[169040,169054]},{"pos":[169062,169076],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[169109,169125],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[169208,169218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[169220,169226]},{"content":"e","pos":[169240,169241]},{"pos":[169249,169266],"content":"Method deleteRows","linkify":"Method deleteRows","nodes":[{"content":"Method deleteRows","pos":[0,17]}]},{"content":";","pos":[169268,169269]},{"pos":[169334,169344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"deleteAfterRow","pos":[169346,169360]},{"content":"rows","pos":[169374,169378]},{"pos":[169386,169400],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[169402,169463]},{"pos":[169497,169504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[169506,169634]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[169635,169739]},{"pos":[169745,169762],"content":"Method deleteCols","linkify":"Method deleteCols","nodes":[{"content":"Method deleteCols","pos":[0,17]}]},{"pos":[169833,169843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"deleteAfterColumn","pos":[169845,169862]},{"content":"columns","pos":[169876,169883]},{"pos":[169891,169903],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"pos":[169934,169951],"content":"Method insertRows","linkify":"Method insertRows","nodes":[{"content":"Method insertRows","pos":[0,17]}]},{"pos":[170016,170026],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"insertAfterRow","pos":[170028,170042]},{"content":"rows","pos":[170056,170060]},{"pos":[170068,170083],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[170085,170131]},{"pos":[170165,170186],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[170188,170209]},{"pos":[170249,170263],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[170344,170354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[170356,170362]},{"content":"e","pos":[170376,170377]},{"pos":[170385,170396],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[170398,170450]},{"pos":[170480,170498],"content":"Method setRowLabel","linkify":"Method setRowLabel","nodes":[{"content":"Method setRowLabel","pos":[0,18]}]},{"pos":[170553,170563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"row","pos":[170565,170568]},{"content":"text","pos":[170582,170586]},{"pos":[170594,170611],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[170613,170667]},{"pos":[170703,170715],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[170717,170771]},{"pos":[170802,170814],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[170845,170855],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[170857,170890]},{"pos":[170919,170932],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[170934,171034]},{"pos":[171116,171126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[171128,171138]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[171141,171226]},{"content":"dragMode","pos":[171238,171246]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[171249,171334]},{"content":"x","pos":[171346,171347]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[171350,171435]},{"content":"y","pos":[171447,171448]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[171451,171536]},{"pos":[171542,171560],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[171645,171655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[171657,171663]},{"content":"e","pos":[171677,171678]},{"pos":[171686,171703],"content":"Method updateCell","linkify":"Method updateCell","nodes":[{"content":"Method updateCell","pos":[0,17]}]},{"pos":[171759,171769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"column","pos":[171771,171777]},{"content":"row","pos":[171791,171794]},{"pos":[171802,171819],"content":"Method insertCols","linkify":"Method insertCols","nodes":[{"content":"Method insertCols","pos":[0,17]}]},{"pos":[171889,171899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"insertAferColumn","pos":[171901,171917]},{"content":"columns","pos":[171931,171938]},{"pos":[171946,171970],"content":"Method activeCellChanged","linkify":"Method activeCellChanged","nodes":[{"content":"Method activeCellChanged","pos":[0,24]}]},{"pos":[172013,172027],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[172029,172069]},{"pos":[172102,172117],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[172119,172149]},{"pos":[172182,172206],"content":"Class FormTabPageControl","linkify":"Class FormTabPageControl","nodes":[{"content":"Class FormTabPageControl","pos":[0,24]}]},{"pos":[172261,172268],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[172274,172282],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[172288,172295],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[172299,172305]},{"content":"Description","pos":[172417,172428]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[172879,172983],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[173169,173264],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[173459,173574],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[173749,173793],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[174039,174086],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[174329,174375],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[174447,174487]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[174619,174662],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[174737,174804]},{"content":"public boolean allowPageDeactivate()","pos":[174909,174945]},{"content":"public boolean allowSysSetup()","pos":[175199,175229]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[175317,175400]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[175489,175529],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[175779,175817],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[176069,176108],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[176359,176396],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[176649,176698],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[176767,176865]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[176939,176980],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[177057,177106]},{"content":"public Image backgroundImage(<ph id=\"ph1\">\\[</ph>Image image<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int drawMode<ph id=\"ph4\">\\]</ph>)","pos":[177229,177292],"source":"public Image backgroundImage(\\[Image image\\], \\[int drawMode\\])"},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[177519,177554],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[177637,177698]},{"content":"public int beginDrag(int x, int y)","pos":[177809,177843]},{"content":"Is called when the user starts to drag a form control.","pos":[177927,177981]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[178099,178156],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[178389,178440],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[178679,178722],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[178969,179023]},{"content":"Retrieves the size of the control.","pos":[179087,179121]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[179259,179344],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[179549,179595]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[179839,179872],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[179957,179996]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[180129,180166],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[180247,180292]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[180419,180474],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[180709,180761],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[180999,181055],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[181289,181339],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[181579,181621],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[181869,181907],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[182159,182231],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[182277,182344]},{"content":"public List configurationKeyEx()","pos":[182449,182481]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[182567,182663]},{"content":"public int containerScrollHorizontalOffset(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[182739,182796],"source":"public int containerScrollHorizontalOffset(\\[int value\\])"},{"content":"public int containerScrollVerticalOffset(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[183029,183084],"source":"public int containerScrollVerticalOffset(\\[int value\\])"},{"content":"public boolean contains(FormControl control)","pos":[183319,183363]},{"content":"public int controlCount()","pos":[183609,183634]},{"content":"public FormControl controlNum(int controlNo)","pos":[183899,183943]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[184189,184233],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[184307,184385]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[184479,184538],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[184769,184811],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[184887,185012]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[185059,185099],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[185177,185249]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[185349,185388],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[185467,185666]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[185671,185705],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[185789,185870]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[185961,186042]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[186079,186173]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[186251,186328]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[186369,186465]},{"content":"public str dragText()","pos":[186541,186562]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[186659,186729]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[186831,186872],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[186949,187000]},{"content":"public int fastTabExpanded(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[187121,187162],"source":"public int fastTabExpanded(\\[int value\\])"},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[187411,187453],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[187529,187617]},{"content":"public boolean hasUserSetting()","pos":[187701,187732]},{"content":"Indicates whether the control has custom user settings.","pos":[187819,187874]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[187991,188033],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[188109,188148]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[188281,188317],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[188399,188461]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[188571,188608],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[188689,188728]},{"content":"public str helpField()","pos":[188861,188883]},{"content":"Retrieves the Help text for the control.","pos":[188979,189019]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[189151,189185],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[189269,189373]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[189441,189486],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[189731,189772],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[189849,189912]},{"content":"public boolean horizontalScrollBarVisible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[190021,190081],"source":"public boolean horizontalScrollBarVisible(\\[boolean value\\])"},{"content":"public int hWnd()","pos":[190311,190328]},{"content":"Retrieves the Windows handle for the control.","pos":[190429,190474]},{"content":"public boolean isActivePage()","pos":[190601,190630]},{"content":"public boolean isContainer()","pos":[190891,190919]},{"content":"public boolean isDisplayed()","pos":[191181,191209]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[191299,191365]},{"content":"public boolean isExpanded()","pos":[191471,191498]},{"content":"public boolean isRestricted()","pos":[191761,191790]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[191879,191946]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[192051,192107]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[192169,192270]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[192341,192381],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[192459,192523]},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[192631,192686],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[192921,192970],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[193211,193252],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[193501,193535],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[193619,193680]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[193791,193826],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[193909,193973]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[194081,194128],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[194199,194252]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[194371,194450]},{"content":"Is called when the control is double-clicked by the user.","pos":[194489,194546]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[194661,194736]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[194779,194844]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[194951,195026]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[195069,195134]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[195241,195314]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[195359,195431]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[195531,195591],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[195821,195851],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[195939,196092]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[196127,196169],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[196417,196456]},{"content":"public int panelStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[196707,196743],"source":"public int panelStyle(\\[int value\\])"},{"content":"public FormControl parentControl()","pos":[196997,197031]},{"content":"Retrieves the parent control for the control.","pos":[197115,197160]},{"content":"public str parentPage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[197287,197323],"source":"public str parentPage(\\[str value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[197577,197633],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[197867,197917],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[198157,198199],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public int scrollbars(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[198447,198483],"source":"public int scrollbars(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[198737,198794],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[198855,198914]},{"content":"public int showContextMenu(int menuHandle)","pos":[199027,199069]},{"content":"Shows the shortcut menu for the control.","pos":[199145,199185]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[199317,199355],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[199435,199562]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[199607,199651],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[199897,199928],"source":"public int style(\\[int value\\])"},{"content":"public int tabAppearance(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[200187,200226],"source":"public int tabAppearance(\\[int value\\])"},{"content":"public boolean tabAutoChange(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[200477,200524],"source":"public boolean tabAutoChange(\\[boolean value\\])"},{"content":"public str toolTip()","pos":[200767,200787]},{"content":"Retrieves the tooltip text for the control.","pos":[200885,200928]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[201057,201096],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[201175,201237]},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[201347,201401],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[201637,201685],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[201927,201967],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[202217,202250],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[202335,202394]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[202507,202541],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[202625,202687]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[202797,202827],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[203087,203138]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[203377,203411],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[203495,203538]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[203667,203705],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[203785,203833]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[203957,203996],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[204075,204134]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[204247,204284],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[204365,204448]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[204537,204573],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[204655,204707]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[204827,204861],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[204945,205027]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[205117,205159],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[205235,205291]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[205407,205447],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[205525,205579]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[205697,205737],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[205815,205864]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[205987,206030],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[206105,206158]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[206277,206311],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[206395,206543]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[206567,206602],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[206685,206762]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[206857,206904],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public boolean verticalScrollBarVisible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[207147,207205],"source":"public boolean verticalScrollBarVisible(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[207437,207497],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[207555,207616]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[207727,207781],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[207845,207904]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[208017,208063],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[208135,208196]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[208307,208345],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[208597,208638],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[208715,208785]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[208887,208928],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[209005,209043]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[209177,209212],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[209295,209357]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[209467,209503],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[209585,209623]},{"content":"public void pageActivated()","pos":[209757,209784]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[210047,210123],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void collapse()","pos":[210337,210359]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[210627,210734],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"private void OnExpanding(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[210917,210993],"source":"private void OnExpanding(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[211207,211280]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[211325,211423]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[211497,211574]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[211615,211685]},{"content":"public void jumpRef()","pos":[211787,211808]},{"content":"public void endDrag()","pos":[212077,212098]},{"content":"Is called when the user has finished dragging a form control.","pos":[212195,212256]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[212367,212404],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void paste()","pos":[212657,212676]},{"content":"Pastes the contents of the clipboard into the control.","pos":[212775,212829]},{"content":"public void setFocus()","pos":[212947,212969]},{"content":"Sets the focus on the control.","pos":[213065,213095]},{"content":"public void resetUserSetting()","pos":[213237,213267]},{"content":"Resets the user settings for the control.","pos":[213355,213396]},{"content":"private void OnExpanded(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[213527,213602],"source":"private void OnExpanded(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseLeave()","pos":[213817,213841]},{"content":"Indicates that the mouse pointer has left the control.","pos":[213935,213989]},{"content":"public void arrange()","pos":[214107,214128]},{"content":"private void OnPageActivated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[214397,214477],"source":"private void OnPageActivated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[214687,214756]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[214805,214905]},{"content":"public void expand()","pos":[214977,214997]},{"content":"public void gotFocus()","pos":[215267,215289]},{"content":"Indicates that the control has received focus.","pos":[215385,215431]},{"content":"public void prefColumnSize(int width, int height)","pos":[215557,215606]},{"content":"Specifies the preferred column width and height for the form control.","pos":[215675,215744]},{"content":"public void copy()","pos":[215847,215865]},{"content":"Copies the contents of the control to the clipboard.","pos":[215965,216017]},{"content":"public void activatePage()","pos":[216137,216163]},{"content":"public void context()","pos":[216427,216448]},{"content":"Shows the shortcut menu for the control.","pos":[216545,216585]},{"content":"public void cut()","pos":[216717,216734]},{"content":"Cuts the contents of the control.","pos":[216835,216868]},{"content":"public void lostFocus()","pos":[217007,217030]},{"content":"Indicates that the control has lost focus.","pos":[217125,217167]},{"content":"public void displayControl()","pos":[217297,217325]},{"content":"Displays the control.","pos":[217415,217436]},{"content":"private void OnAllowPageDeactivate(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[217587,217673],"source":"private void OnAllowPageDeactivate(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void inputSearch(str searchStr)","pos":[217877,217915]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[217995,218066]},{"content":"public void dragLeave()","pos":[218167,218190]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[218285,218381]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[218457,218532],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"pos":[218750,218767],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[218882,218892],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[218894,218905]},{"content":"controlName","pos":[218919,218930]},{"content":"insertAfter","pos":[218944,218955]},{"pos":[218964,218976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[218982,219001],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[219107,219117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[219119,219131]},{"content":"controlName","pos":[219145,219156]},{"content":"insertAfter","pos":[219170,219181]},{"pos":[219190,219202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[219208,219227],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[219351,219361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[219363,219375]},{"content":"fieldId","pos":[219389,219396]},{"content":"insertAfter","pos":[219410,219421]},{"content":"arrayIndex","pos":[219435,219445]},{"pos":[219454,219466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[219472,219489],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[219544,219554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[219556,219561]},{"pos":[219570,219582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[219588,219608],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[219666,219676],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[219678,219683]},{"pos":[219692,219704],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[219710,219729],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[219731,219771]},{"pos":[219828,219838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[219840,219845]},{"content":"The new value for the property; optional.","pos":[219848,219889]},{"pos":[219896,219908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[219910,219966]},{"pos":[219973,219980],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[219982,220061]},{"pos":[220067,220083],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[220085,220152]},{"pos":[220206,220216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220218,220223]},{"content":"The value to assign to the allowEdit property.","pos":[220226,220272]},{"pos":[220279,220291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[220293,220345]},{"pos":[220352,220359],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[220361,220483]},{"pos":[220489,220515],"content":"Method allowPageDeactivate","linkify":"Method allowPageDeactivate","nodes":[{"content":"Method allowPageDeactivate","pos":[0,26]}]},{"pos":[220564,220576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[220582,220602],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[220604,220687]},{"pos":[220730,220742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[220744,220812]},{"pos":[220818,220839],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[220890,220900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220902,220907]},{"pos":[220916,220928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[220934,220953],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[221002,221012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221014,221019]},{"pos":[221028,221040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221046,221066],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[221116,221126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221128,221133]},{"pos":[221142,221154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221160,221178],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[221226,221236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221238,221243]},{"pos":[221252,221264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221270,221292],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[221294,221392]},{"pos":[221452,221462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221464,221469]},{"content":"The new value of the property; optional","pos":[221472,221511]},{"pos":[221518,221530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[221532,221611]},{"pos":[221618,221625],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[221627,221664]},{"pos":[221670,221692],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[221694,221743]},{"pos":[221795,221805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221807,221812]},{"pos":[221821,221833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[221835,221879]},{"pos":[221886,221893],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[221895,221963]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[221969,222039]},{"content":"The second byte contains a value for green.","pos":[222044,222087]},{"content":"The third byte contains a value for blue.","pos":[222092,222133]},{"content":"The high-order byte must be zero.","pos":[222138,222171]},{"content":"The maximum value for a single byte is 255.","pos":[222176,222219]},{"pos":[222225,222247],"content":"Method backgroundImage","linkify":"Method backgroundImage","nodes":[{"content":"Method backgroundImage","pos":[0,22]}]},{"pos":[222319,222329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"image","pos":[222331,222336]},{"content":"drawMode","pos":[222350,222358]},{"pos":[222367,222379],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[222385,222401],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[222403,222464]},{"pos":[222510,222520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222522,222527]},{"pos":[222536,222548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[222550,222611]},{"pos":[222617,222633],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[222635,222689]},{"pos":[222736,222746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[222748,222749]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[222752,222822]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[222823,222890]},{"content":"y","pos":[222902,222903]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[222906,222976]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[222977,223044]},{"pos":[223051,223063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[223065,223104]},{"pos":[223111,223118],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[223120,223201]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[223202,223306]},{"pos":[223312,223331],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[223397,223407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223409,223414]},{"content":"mode","pos":[223428,223432]},{"pos":[223441,223453],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223459,223482],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[223544,223554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[223556,223560]},{"pos":[223569,223581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223587,223611],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[223665,223675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223677,223682]},{"pos":[223691,223703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223709,223731],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[223733,223767]},{"pos":[223834,223844],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[223846,223851]},{"content":"The number of lines to use to determine the height.","pos":[223854,223905]},{"content":"lines","pos":[223917,223922]},{"content":"The number of lines to use to determine the height.","pos":[223925,223976]},{"pos":[223983,223995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[223997,224043]},{"pos":[224049,224071],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[224167,224177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[224179,224191]},{"content":"fieldId","pos":[224205,224212]},{"content":"arrayIndex","pos":[224226,224236]},{"pos":[224245,224257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224263,224280],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[224339,224349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[224351,224358]},{"pos":[224367,224379],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224385,224399],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[224401,224440]},{"pos":[224484,224494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224496,224501]},{"pos":[224510,224522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[224524,224578]},{"pos":[224584,224602],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[224604,224649]},{"pos":[224697,224707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224709,224714]},{"pos":[224723,224735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[224737,224780]},{"pos":[224787,224794],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[224796,224857]},{"content":"Value","pos":[224861,224866]},{"content":"Style","pos":[224869,224874]},{"content":"0","pos":[224943,224944]},{"content":"Default","pos":[224951,224958]},{"content":"1","pos":[224984,224985]},{"content":"The MicrosoftWindows palette","pos":[224992,225020]},{"content":"2","pos":[225025,225026]},{"content":"The true-color scheme","pos":[225033,225054]},{"pos":[225069,225083],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[225147,225157],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225159,225164]},{"content":"mode","pos":[225178,225182]},{"pos":[225191,225203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225209,225227],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[225290,225300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[225302,225306]},{"pos":[225315,225327],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225333,225351],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[225416,225426],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225428,225433]},{"content":"mode","pos":[225447,225451]},{"pos":[225460,225472],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225478,225500],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[225561,225571],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[225573,225577]},{"pos":[225586,225598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225604,225627],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[225680,225690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225692,225697]},{"pos":[225706,225718],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225724,225743],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[225792,225802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225804,225809]},{"pos":[225818,225830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225836,225859],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[225861,225928]},{"pos":[226011,226021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226023,226028]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[226031,226098]},{"pos":[226105,226117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[226119,226191]},{"pos":[226198,226205],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[226207,226288]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[226289,226382]},{"pos":[226388,226413],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[226415,226511]},{"pos":[226556,226568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[226570,226656]},{"pos":[226663,226670],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[226672,226721]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[226722,226870]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[226871,227005]},{"pos":[227011,227049],"content":"Method containerScrollHorizontalOffset","linkify":"Method containerScrollHorizontalOffset","nodes":[{"content":"Method containerScrollHorizontalOffset","pos":[0,38]}]},{"pos":[227117,227127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227129,227134]},{"pos":[227143,227155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227161,227197],"content":"Method containerScrollVerticalOffset","linkify":"Method containerScrollVerticalOffset","nodes":[{"content":"Method containerScrollVerticalOffset","pos":[0,36]}]},{"pos":[227263,227273],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227275,227280]},{"pos":[227289,227301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227307,227322],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[227379,227389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[227391,227398]},{"pos":[227407,227419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227425,227444],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[227482,227494],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227500,227517],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[227574,227584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[227586,227595]},{"pos":[227604,227616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227622,227647],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[227649,227727]},{"pos":[227782,227792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227794,227799]},{"content":"The string that contains the country/region codes to set; optional.","pos":[227802,227869]},{"pos":[227876,227888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[227890,227955]},{"pos":[227961,227993],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[228063,228073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[228075,228080]},{"pos":[228089,228101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[228107,228130],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[228132,228257]},{"pos":[228310,228320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[228322,228327]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[228330,228404]},{"pos":[228411,228423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[228425,228537]},{"pos":[228544,228551],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[228553,228680]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[228681,228774]},{"pos":[228780,228797],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[228799,228871]},{"pos":[228922,228932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[228934,228939]},{"pos":[228948,228960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[228962,229014]},{"pos":[229020,229040],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[229042,229241]},{"pos":[229291,229301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229303,229308]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[229311,229385]},{"pos":[229392,229404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[229406,229550]},{"pos":[229556,229571],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[229573,229654]},{"pos":[229699,229709],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229711,229716]},{"content":"An integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[229719,229797]},{"pos":[229804,229816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[229818,229878]},{"pos":[229885,229892],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave Method, the dragOver Method, and the dragOverEx Method to specify the behavior.","pos":[229894,229991]},{"pos":[229997,230012],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[230014,230108]},{"pos":[230202,230212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[230214,230224]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[230227,230312]},{"content":"dragMode","pos":[230324,230332]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[230335,230420]},{"content":"x","pos":[230432,230433]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[230436,230521]},{"content":"y","pos":[230533,230534]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[230537,230622]},{"pos":[230629,230641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[230643,230708]},{"pos":[230714,230731],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[230733,230829]},{"pos":[230919,230929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[230931,230941]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[230944,231029]},{"content":"dragMode","pos":[231041,231049]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[231052,231137]},{"content":"x","pos":[231149,231150]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[231153,231238]},{"content":"y","pos":[231250,231251]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[231254,231339]},{"pos":[231346,231358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[231360,231425]},{"pos":[231431,231446],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[231448,231518]},{"pos":[231552,231564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[231566,231697]},{"pos":[231703,231717],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[231719,231770]},{"pos":[231822,231832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[231834,231839]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[231842,231914]},{"pos":[231921,231933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[231935,231983]},{"pos":[231990,231997],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[231999,232074]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[232075,232170]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[232171,232305]},{"pos":[232311,232333],"content":"Method fastTabExpanded","linkify":"Method fastTabExpanded","nodes":[{"content":"Method fastTabExpanded","pos":[0,22]}]},{"pos":[232385,232395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[232397,232402]},{"pos":[232411,232423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[232429,232446],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[232448,232536]},{"pos":[232589,232599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[232601,232604]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[232607,232677]},{"pos":[232684,232696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[232698,232765]},{"pos":[232771,232792],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[232794,232849]},{"pos":[232893,232905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[232907,232970]},{"pos":[232976,232989],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[232991,233030]},{"pos":[233083,233093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[233095,233100]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[233103,233168]},{"content":"mode","pos":[233180,233184]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[233187,233252]},{"pos":[233259,233271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[233273,233309]},{"pos":[233316,233323],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[233325,233378]},{"content":"Calculate the height according to the following table.","pos":[233379,233433]},{"content":"Mode","pos":[233437,233441]},{"content":"Height calculation","pos":[233455,233473]},{"content":"-1 Exact","pos":[233661,233669]},{"content":"The exact height in pixels of the controls is used.","pos":[233679,233730]},{"content":"0 Auto","pos":[233773,233779]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[233791,233880]},{"content":"1 Column height","pos":[233885,233900]},{"content":"The layout of the form determines the height of the control.","pos":[233903,233963]},{"content":"The height and height calculation mode can be set separately.","pos":[233996,234057]},{"pos":[234063,234080],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[234082,234144]},{"pos":[234191,234201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234203,234208]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[234211,234286]},{"pos":[234293,234305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[234307,234328]},{"pos":[234335,234342],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[234344,234398]},{"content":"Mode","pos":[234402,234406]},{"content":"Height calculation","pos":[234418,234436]},{"content":"Exact","pos":[234622,234627]},{"content":"The exact height in pixels of the controls is used.","pos":[234638,234689]},{"content":"Auto","pos":[234732,234736]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[234748,234837]},{"content":"Column height","pos":[234842,234855]},{"content":"The layout of the form determines the height of the control.","pos":[234858,234918]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[234951,235036]},{"pos":[235042,235060],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[235062,235101]},{"pos":[235149,235159],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235161,235166]},{"content":"An integer that specifies the height in pixels; optional.","pos":[235169,235226]},{"pos":[235233,235245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[235247,235268]},{"pos":[235275,235282],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[235284,235374]},{"pos":[235380,235396],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[235398,235438]},{"pos":[235473,235485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[235487,235575]},{"pos":[235582,235589],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[235591,235661]},{"content":"Use the helpText method to set the value of the Help text.","pos":[235662,235720]},{"pos":[235726,235741],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[235743,235847]},{"pos":[235892,235902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235904,235909]},{"content":"The value that is assigned as the Help text for the control.","pos":[235912,235972]},{"pos":[235979,235991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[235993,236048]},{"pos":[236055,236062],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[236064,236132]},{"content":"The Help text must not exceed 250 characters.","pos":[236133,236178]},{"pos":[236184,236202],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[236258,236268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236270,236275]},{"pos":[236284,236296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236302,236324],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[236326,236389]},{"pos":[236441,236451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236453,236458]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[236461,236528]},{"pos":[236535,236547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[236549,236599]},{"pos":[236605,236638],"content":"Method horizontalScrollBarVisible","linkify":"Method horizontalScrollBarVisible","nodes":[{"content":"Method horizontalScrollBarVisible","pos":[0,33]}]},{"pos":[236709,236719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236721,236726]},{"pos":[236735,236747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236753,236764],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[236766,236811]},{"pos":[236841,236853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[236855,236882]},{"pos":[236889,236896],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[236898,236942]},{"pos":[236948,236967],"content":"Method isActivePage","linkify":"Method isActivePage","nodes":[{"content":"Method isActivePage","pos":[0,19]}]},{"pos":[237009,237021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237027,237045],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[237086,237098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237104,237122],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[237124,237190]},{"pos":[237231,237243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[237245,237296]},{"pos":[237303,237310],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[237312,237380]},{"pos":[237386,237403],"content":"Method isExpanded","linkify":"Method isExpanded","nodes":[{"content":"Method isExpanded","pos":[0,17]}]},{"pos":[237443,237455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237461,237480],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[237482,237549]},{"pos":[237591,237603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[237605,237657]},{"pos":[237663,237688],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[237690,237791]},{"pos":[237860,237870],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[237872,237889]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[237892,238020]},{"pos":[238027,238039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[238041,238200]},{"pos":[238207,238214],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[238216,238293]},{"content":"FormAllowUserSetup::No 0","pos":[238633,238657]},{"content":"No changes can be made to the control.","pos":[238668,238706]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[238707,238796]},{"content":"FormAllowUserSetup::Restricted 1","pos":[238801,238833]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[238836,238928]},{"content":"The user cannot move the control.","pos":[238929,238962]},{"content":"FormAllowUserSetup::Yes 2","pos":[238969,238994]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[239004,239096]},{"content":"The user can also move the control.","pos":[239097,239132]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[239136,239325]},{"pos":[239331,239342],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[239344,239408]},{"pos":[239459,239469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239471,239476]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[239479,239565]},{"content":"mode","pos":[239577,239581]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[239584,239670]},{"pos":[239677,239689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[239691,239742]},{"pos":[239748,239765],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[239829,239839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239841,239846]},{"content":"mode","pos":[239860,239864]},{"pos":[239873,239885],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[239891,239912],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[239972,239982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[239984,239988]},{"pos":[239997,240009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[240015,240037],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[240089,240099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[240101,240106]},{"pos":[240115,240127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[240133,240148],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[240150,240211]},{"pos":[240256,240266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[240268,240273]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[240276,240362]},{"pos":[240369,240381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[240383,240439]},{"pos":[240445,240461],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[240463,240527]},{"pos":[240573,240583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[240585,240590]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[240593,240674]},{"pos":[240681,240693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[240695,240746]},{"pos":[240752,240772],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[240774,240827]},{"pos":[240885,240895],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[240897,240902]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[240905,240999]},{"pos":[241006,241018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[241020,241093]},{"pos":[241099,241119],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[241121,241178]},{"pos":[241270,241280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[241282,241283]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241286,241347]},{"content":"y","pos":[241359,241360]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241363,241424]},{"content":"button","pos":[241436,241442]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241445,241506]},{"content":"Ctrl","pos":[241518,241522]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241525,241586]},{"content":"Shift","pos":[241598,241603]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241606,241667]},{"pos":[241674,241686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[241688,241727]},{"pos":[241734,241741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[241743,241847]},{"pos":[241853,241869],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[241871,241936]},{"pos":[242024,242034],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[242036,242037]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242040,242101]},{"content":"y","pos":[242113,242114]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242117,242178]},{"content":"button","pos":[242190,242196]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242199,242260]},{"content":"Ctrl","pos":[242272,242276]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242279,242340]},{"content":"Shift","pos":[242352,242357]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242360,242421]},{"pos":[242428,242440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[242442,242481]},{"pos":[242488,242495],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[242497,242601]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[242602,242737]},{"pos":[242743,242759],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[242761,242826]},{"pos":[242914,242924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[242926,242927]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242930,242991]},{"content":"y","pos":[243003,243004]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243007,243068]},{"content":"button","pos":[243080,243086]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243089,243150]},{"content":"Ctrl","pos":[243162,243166]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243169,243230]},{"content":"Shift","pos":[243242,243247]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243250,243311]},{"pos":[243318,243330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[243332,243371]},{"pos":[243378,243385],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[243387,243491]},{"pos":[243497,243511],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[243513,243585]},{"pos":[243671,243681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[243683,243684]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243687,243748]},{"content":"y","pos":[243760,243761]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243764,243825]},{"content":"button","pos":[243837,243843]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243846,243907]},{"content":"Ctrl","pos":[243919,243923]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[243926,243987]},{"content":"Shift","pos":[243999,244004]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[244007,244068]},{"pos":[244075,244087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[244089,244128]},{"pos":[244135,244142],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[244144,244248]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[244249,244384]},{"pos":[244390,244408],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[244479,244489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[244491,244500]},{"content":"insertAfterId","pos":[244514,244527]},{"pos":[244536,244548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[244554,244565],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[244567,244720]},{"pos":[244761,244771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[244773,244778]},{"content":"The name assigned to the control.","pos":[244781,244814]},{"pos":[244821,244833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[244835,244899]},{"pos":[244906,244913],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[244915,245009]},{"content":"Begins with a letter.","pos":[245015,245036]},{"content":"Doesn't exceed 250 characters.","pos":[245041,245071]},{"content":"Can include numbers and underscore characters.","pos":[245076,245122]},{"content":"Cannot include punctuation or spaces.","pos":[245127,245164]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.","pos":[245169,245299]},{"pos":[245305,245328],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[245381,245391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[245393,245398]},{"pos":[245407,245419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[245425,245452],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[245504,245516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[245522,245539],"content":"Method panelStyle","linkify":"Method panelStyle","nodes":[{"content":"Method panelStyle","pos":[0,17]}]},{"pos":[245586,245596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[245598,245603]},{"pos":[245612,245624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[245630,245650],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[245652,245697]},{"pos":[245744,245756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[245758,245793]},{"pos":[245799,245816],"content":"Method parentPage","linkify":"Method parentPage","nodes":[{"content":"Method parentPage","pos":[0,17]}]},{"pos":[245863,245873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[245875,245880]},{"pos":[245889,245901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[245907,245925],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[245990,246000],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246002,246007]},{"content":"mode","pos":[246021,246025]},{"pos":[246034,246046],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[246052,246074],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[246135,246145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[246147,246151]},{"pos":[246160,246172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[246178,246201],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[246254,246264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246266,246271]},{"pos":[246280,246292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[246298,246315],"content":"Method scrollbars","linkify":"Method scrollbars","nodes":[{"content":"Method scrollbars","pos":[0,17]}]},{"pos":[246362,246372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246374,246379]},{"pos":[246388,246400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[246406,246424],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[246426,246485]},{"pos":[246553,246563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246565,246570]},{"content":"The ID of the security key to assign to the control; optional.","pos":[246573,246635]},{"pos":[246642,246654],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[246656,246755]},{"pos":[246761,246783],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[246785,246825]},{"pos":[246880,246890],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[246892,246902]},{"content":"The ID of the menu to show.","pos":[246905,246932]},{"pos":[246939,246951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[246953,247012]},{"pos":[247018,247029],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[247031,247158]},{"pos":[247207,247217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247219,247224]},{"content":"The value to assign to the skip property of the control; optional.","pos":[247227,247293]},{"pos":[247300,247312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[247314,247420]},{"pos":[247427,247434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[247436,247631]},{"pos":[247637,247648],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[247703,247713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[247715,247728]},{"pos":[247737,247749],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247755,247767],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[247809,247819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247821,247826]},{"pos":[247835,247847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247853,247873],"content":"Method tabAppearance","linkify":"Method tabAppearance","nodes":[{"content":"Method tabAppearance","pos":[0,20]}]},{"pos":[247923,247933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247935,247940]},{"pos":[247949,247961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247967,247987],"content":"Method tabAutoChange","linkify":"Method tabAutoChange","nodes":[{"content":"Method tabAutoChange","pos":[0,20]}]},{"pos":[248045,248055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248057,248062]},{"pos":[248071,248083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248089,248103],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[248105,248148]},{"pos":[248181,248193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[248195,248297]},{"pos":[248304,248311],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[248313,248385]},{"pos":[248391,248401],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[248403,248465]},{"pos":[248515,248525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248527,248532]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[248535,248619]},{"content":"mode","pos":[248631,248635]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[248638,248722]},{"pos":[248729,248741],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[248743,248792]},{"pos":[248798,248814],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[248877,248887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248889,248894]},{"content":"mode","pos":[248908,248912]},{"pos":[248921,248933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248939,248959],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[249018,249028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[249030,249034]},{"pos":[249043,249055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249061,249082],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[249133,249143],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249145,249150]},{"pos":[249159,249171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249177,249191],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[249193,249252]},{"pos":[249296,249306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249308,249313]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[249316,249400]},{"pos":[249407,249419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[249421,249475]},{"pos":[249481,249496],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[249498,249560]},{"pos":[249605,249615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249617,249622]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[249625,249704]},{"pos":[249711,249723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[249725,249774]},{"pos":[249780,249791],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[249832,249842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249844,249849]},{"pos":[249858,249870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249876,249903],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[249967,249977],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[249979,249983]},{"pos":[249992,250004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[250010,250025],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[250027,250070]},{"pos":[250115,250125],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[250127,250132]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[250135,250207]},{"pos":[250214,250226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[250228,250258]},{"pos":[250264,250283],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[250285,250333]},{"pos":[250382,250392],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[250394,250399]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[250402,250479]},{"pos":[250486,250498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[250500,250535]},{"pos":[250541,250561],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[250563,250622]},{"pos":[250672,250682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[250684,250689]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[250692,250780]},{"pos":[250787,250799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[250801,250847]},{"pos":[250853,250871],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[250873,250956]},{"pos":[251004,251014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251016,251021]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[251024,251104]},{"pos":[251111,251123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[251125,251181]},{"pos":[251187,251204],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[251206,251258]},{"pos":[251305,251315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251317,251322]},{"content":"The user height for the control; optional.","pos":[251325,251367]},{"pos":[251374,251386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[251388,251427]},{"pos":[251433,251448],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[251450,251532]},{"pos":[251577,251587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251589,251594]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[251597,251676]},{"pos":[251683,251695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[251697,251752]},{"pos":[251759,251766],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[251768,251938]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[251939,252014]},{"content":"This method lets you programmatically determine and set the value.","pos":[252015,252081]},{"pos":[252087,252110],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[252112,252168]},{"pos":[252221,252231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[252233,252238]},{"content":"The organization container to set for the control; optional.","pos":[252241,252301]},{"pos":[252308,252320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[252322,252365]},{"pos":[252371,252392],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[252394,252448]},{"pos":[252499,252509],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[252511,252516]},{"content":"The organization sibling to set for the control; optional.","pos":[252519,252577]},{"pos":[252584,252596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[252598,252639]},{"pos":[252645,252666],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[252668,252717]},{"pos":[252768,252778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[252780,252785]},{"content":"The user label text to set for the control; optional.","pos":[252788,252841]},{"pos":[252848,252860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[252862,252898]},{"pos":[252904,252928],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[252930,252983]},{"pos":[253037,253047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[253049,253054]},{"content":"The user security level to set for the control; optional.","pos":[253057,253114]},{"pos":[253121,253133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[253135,253175]},{"pos":[253181,253196],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[253198,253346]},{"pos":[253391,253401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[253403,253408]},{"content":"The value to assign to the userSkip property; optional.","pos":[253411,253466]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[253467,253562]},{"pos":[253569,253581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[253583,253652]},{"pos":[253658,253674],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[253676,253753]},{"pos":[253799,253809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[253811,253816]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[253819,253885]},{"pos":[253892,253904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[253906,254035]},{"pos":[254042,254049],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[254051,254145]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[254146,254262],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[254263,254413]},{"pos":[254419,254439],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[254497,254507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[254509,254514]},{"pos":[254523,254535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254541,254572],"content":"Method verticalScrollBarVisible","linkify":"Method verticalScrollBarVisible","nodes":[{"content":"Method verticalScrollBarVisible","pos":[0,31]}]},{"pos":[254641,254651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[254653,254658]},{"pos":[254667,254679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254685,254707],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[254709,254770]},{"pos":[254839,254849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[254851,254856]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[254859,254936]},{"content":"mode","pos":[254948,254952]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[254955,255032]},{"pos":[255039,255051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[255053,255101]},{"pos":[255107,255133],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[255135,255194]},{"pos":[255259,255269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[255271,255275]},{"pos":[255284,255296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[255298,255352]},{"pos":[255358,255385],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[255387,255448]},{"pos":[255505,255515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255517,255522]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[255525,255603]},{"pos":[255610,255622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[255624,255672]},{"pos":[255678,255697],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[255746,255756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255758,255763]},{"pos":[255772,255784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[255790,255804],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[255806,255876]},{"pos":[255928,255938],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255940,255945]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[255948,256020]},{"pos":[256027,256039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[256041,256090]},{"pos":[256096,256108],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[256110,256148]},{"pos":[256200,256210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[256212,256217]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[256220,256284]},{"content":"mode","pos":[256296,256300]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[256303,256367]},{"pos":[256374,256386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[256388,256423]},{"pos":[256430,256437],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[256439,256492]},{"content":"Calculate the width according to the following table.","pos":[256493,256546]},{"content":"Mode","pos":[256550,256554]},{"content":"Width calculation","pos":[256567,256584]},{"content":"-1 Exact","pos":[256770,256778]},{"content":"The exact width in pixels of the controls is used.","pos":[256787,256837]},{"content":"0 Auto","pos":[256880,256886]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[256897,256985]},{"content":"1 Column width","pos":[256990,257004]},{"content":"The layout of the form determines the width of the control.","pos":[257007,257066]},{"content":"The width and width calculation mode can be set separately.","pos":[257099,257158]},{"pos":[257164,257180],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[257182,257244]},{"pos":[257290,257300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257302,257307]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[257310,257384]},{"pos":[257391,257403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[257405,257466]},{"pos":[257473,257480],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[257482,257535]},{"content":"Mode","pos":[257539,257543]},{"content":"Width calculation","pos":[257554,257571]},{"content":"Exact","pos":[257755,257760]},{"content":"The exact width in pixels of the controls is used.","pos":[257770,257820]},{"content":"Auto","pos":[257863,257867]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[257878,257966]},{"content":"Column width","pos":[257971,257983]},{"content":"The layout of the form determines the width of the control.","pos":[257986,258045]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[258078,258161]},{"pos":[258167,258184],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[258186,258224]},{"pos":[258271,258281],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[258283,258288]},{"content":"An integer that specifies the width in pixels; optional.","pos":[258291,258347]},{"pos":[258354,258366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[258368,258403]},{"pos":[258410,258417],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[258419,258492]},{"pos":[258498,258518],"content":"Method pageActivated","linkify":"Method pageActivated","nodes":[{"content":"Method pageActivated","pos":[0,20]}]},{"pos":[258557,258575],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[258660,258670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[258672,258678]},{"content":"e","pos":[258692,258693]},{"pos":[258701,258716],"content":"Method collapse","linkify":"Method collapse","nodes":[{"content":"Method collapse","pos":[0,15]}]},{"pos":[258750,258779],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[258897,258907],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[258909,258925]},{"content":"objectMethodToCall","pos":[258939,258957]},{"content":"overrideObject","pos":[258971,258985]},{"pos":[258993,259011],"content":"Method OnExpanding","linkify":"Method OnExpanding","nodes":[{"content":"Method OnExpanding","pos":[0,18]}]},{"pos":[259096,259106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[259108,259114]},{"content":"e","pos":[259128,259129]},{"pos":[259137,259148],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[259150,259248]},{"pos":[259334,259344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[259346,259356]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[259359,259444]},{"content":"dragMode","pos":[259456,259464]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[259467,259552]},{"content":"x","pos":[259564,259565]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[259568,259653]},{"content":"y","pos":[259665,259666]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[259669,259754]},{"pos":[259760,259777],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[259779,259849]},{"pos":[259939,259949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[259951,259952]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[259955,260016]},{"content":"y","pos":[260028,260029]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[260032,260093]},{"content":"button","pos":[260105,260111]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[260114,260175]},{"content":"Ctrl","pos":[260187,260191]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[260194,260255]},{"content":"Shift","pos":[260267,260272]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[260275,260336]},{"pos":[260342,260356],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[260389,260403],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[260405,260466]},{"pos":[260500,260507],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[260509,260637]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[260638,260742]},{"pos":[260748,260761],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[260809,260819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[260821,260830]},{"pos":[260838,260850],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[260852,260906]},{"pos":[260937,260952],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[260954,260984]},{"pos":[261018,261041],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[261043,261084]},{"pos":[261126,261143],"content":"Method OnExpanded","linkify":"Method OnExpanded","nodes":[{"content":"Method OnExpanded","pos":[0,17]}]},{"pos":[261227,261237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[261239,261245]},{"content":"e","pos":[261259,261260]},{"pos":[261268,261285],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[261287,261341]},{"pos":[261377,261391],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[261424,261446],"content":"Method OnPageActivated","linkify":"Method OnPageActivated","nodes":[{"content":"Method OnPageActivated","pos":[0,22]}]},{"pos":[261535,261545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[261547,261553]},{"content":"e","pos":[261567,261568]},{"pos":[261576,261589],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[261591,261691]},{"pos":[261773,261783],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[261785,261795]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[261798,261883]},{"content":"dragMode","pos":[261895,261903]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[261906,261991]},{"content":"x","pos":[262003,262004]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[262007,262092]},{"content":"y","pos":[262104,262105]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[262108,262193]},{"pos":[262199,262212],"content":"Method expand","linkify":"Method expand","nodes":[{"content":"Method expand","pos":[0,13]}]},{"pos":[262244,262259],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[262261,262307]},{"pos":[262341,262362],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[262364,262433]},{"pos":[262495,262505],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[262507,262512]},{"content":"The preferred height of the control.","pos":[262515,262551]},{"content":"height","pos":[262563,262569]},{"content":"The preferred height of the control.","pos":[262572,262608]},{"pos":[262614,262625],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[262627,262679]},{"pos":[262709,262728],"content":"Method activatePage","linkify":"Method activatePage","nodes":[{"content":"Method activatePage","pos":[0,19]}]},{"pos":[262766,262780],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[262782,262822]},{"pos":[262855,262865],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[262867,262900]},{"pos":[262929,262945],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[262947,262989]},{"pos":[263024,263045],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[263047,263068]},{"pos":[263108,263136],"content":"Method OnAllowPageDeactivate","linkify":"Method OnAllowPageDeactivate","nodes":[{"content":"Method OnAllowPageDeactivate","pos":[0,28]}]},{"pos":[263231,263241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[263243,263249]},{"content":"e","pos":[263263,263264]},{"pos":[263272,263290],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[263292,263363]},{"pos":[263414,263424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[263426,263435]},{"content":"The string value to use to filter data; optional.","pos":[263438,263487]},{"pos":[263493,263509],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[263511,263607]},{"pos":[263642,263659],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[263743,263753],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[263755,263761]},{"content":"e","pos":[263775,263776]},{"pos":[263783,263804],"content":"Class FormTimeControl","linkify":"Class FormTimeControl","nodes":[{"content":"Class FormTimeControl","pos":[0,21]}]},{"pos":[263856,263863],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[263869,263877],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[263883,263890],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[263894,263900]},{"content":"Description","pos":[264004,264015]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[264458,264504],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[264568,264608]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[264740,264775],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[265022,265065],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[265132,265199]},{"content":"public boolean allowSysSetup()","pos":[265304,265334]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[265414,265497]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[265586,265622],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[265868,265917],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[265978,266076]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[266150,266191],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[266260,266309]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[266432,266467],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[266542,266604]},{"content":"public int beginDrag(int x, int y)","pos":[266714,266748]},{"content":"Is called when the user begins dragging a form control.","pos":[266824,266879]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[266996,267026],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that was used to output text in the control.","pos":[267106,267182]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[267278,267310],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[267388,267444]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[267560,267601],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[267842,267896]},{"content":"Retrieves the size of the control.","pos":[267952,267986]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[268124,268162],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[268234,268277]},{"content":"public int charFromPos(int x, int y)","pos":[268406,268442]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[268688,268725],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[268798,268843]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[268970,269042],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[269080,269147]},{"content":"public List configurationKeyEx()","pos":[269252,269284]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[269362,269458]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[269534,269578],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[269644,269722]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[269816,269875],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[270098,270141],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public int dataFieldArrayIndex()","pos":[270380,270412]},{"content":"public FieldName dataFieldName()","pos":[270662,270694]},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[270944,270980],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[271226,271268],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[271336,271461]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[271508,271548],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[271618,271690]},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271790,271825],"source":"public int direction(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[272072,272130],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[272354,272406],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272636,272680],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[272918,272976],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[273200,273252],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[273482,273526],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[273764,273803],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[273874,274073]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[274078,274112],"source":"public int dragDrop(\\[int value\\])"},{"content":"Indicates whether to enable or disable drag-and-drop operations for the control.","pos":[274188,274268]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[274360,274441]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[274470,274564]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[274642,274719]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[274752,274848]},{"content":"public str dragText()","pos":[274924,274945]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[275034,275104]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[275206,275247],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[275316,275367]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[275488,275552],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[275770,275810],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[276052,276082],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[276162,276219]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[276334,276368],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[276444,276501]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[276616,276657],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[276726,276777]},{"content":"public container getCursorPos()","pos":[276898,276929]},{"content":"public int getFirstVisibleLine()","pos":[277180,277212]},{"content":"public str getLine(int lineNo)","pos":[277462,277492]},{"content":"public int getLineCount()","pos":[277744,277769]},{"content":"public container getSelection()","pos":[278026,278057]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[278308,278350],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[278418,278506]},{"content":"public boolean hasUserSetting()","pos":[278590,278621]},{"content":"Indicates whether the control has custom user settings.","pos":[278700,278755]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[278872,278914],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[278982,279021]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[279154,279190],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[279264,279326]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[279436,279473],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[279546,279585]},{"content":"public str helpField()","pos":[279718,279740]},{"content":"Retrieves the Help text for the control.","pos":[279828,279868]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[280000,280034],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[280110,280214]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[280282,280323],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[280392,280455]},{"content":"public int hWnd()","pos":[280564,280581]},{"content":"Retrieves the Windows handle for the control.","pos":[280674,280719]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[280846,280879],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[281128,281156]},{"content":"public boolean isDisplayed()","pos":[281410,281438]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[281520,281586]},{"content":"public boolean isRestricted()","pos":[281692,281721]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[281802,281869]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[281974,282030]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[282084,282185]},{"content":"public boolean isValid()","pos":[282256,282280]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[282538,282578],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[282820,282851],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[282930,282967]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[283102,283142],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[283384,283419],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[283666,283709],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[283948,283983],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[284230,284269],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[284512,284558],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[284794,284830],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[285076,285123],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[285358,285399],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[285640,285682],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[285922,285967],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[286204,286288]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[286486,286566]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[286768,286846]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[287050,287089],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[287332,287380],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[287614,287660],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[287896,287936],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[288178,288219],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[288460,288482]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[288742,288782],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[288852,288916]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[289024,289058],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[289134,289195]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[289306,289341],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[289416,289480]},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[289588,289642],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[289870,289918],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[290152,290192],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lineFromChar(int charIndex)","pos":[290434,290472]},{"content":"public int lineIndex(int lineNo)","pos":[290716,290748]},{"content":"public int lineLength(int lineNo)","pos":[290998,291031]},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[291280,291318],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[291562,291605],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[291844,291891],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[291954,292007]},{"content":"public boolean modified()","pos":[292126,292151]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[292408,292487]},{"content":"Is called when the control is double-clicked by the user.","pos":[292518,292575]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[292690,292765]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[292800,292865]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[292972,293047]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[293082,293147]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[293254,293327]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[293364,293436]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[293536,293566],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[293646,293799]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[293834,293876],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[294116,294155]},{"content":"public FormControl parentControl()","pos":[294398,294432]},{"content":"Retrieves the parent control for the control.","pos":[294508,294553]},{"content":"public container posFromChar(int charIndex)","pos":[294680,294723]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[294962,295002],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[295244,295280],"source":"public int promptrect(\\[int value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[295526,295575],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[295808,295850],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[296090,296126],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[296372,296429],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[296482,296541]},{"content":"public int showContextMenu(int menuHandle)","pos":[296654,296696]},{"content":"Shows the shortcut menu for the control.","pos":[296764,296804]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[296936,296979],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[297218,297256],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[297328,297455]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[297500,297544],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297782,297813],"source":"public int style(\\[int value\\])"},{"content":"public int timeFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298064,298100],"source":"public int timeFormat(\\[int value\\])"},{"content":"public int timeHours(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298346,298381],"source":"public int timeHours(\\[int value\\])"},{"content":"public int timeMinute(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298628,298664],"source":"public int timeMinute(\\[int value\\])"},{"content":"public int timeSeconds(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298910,298947],"source":"public int timeSeconds(\\[int value\\])"},{"content":"public int timeSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[299192,299231],"source":"public int timeSeparator(\\[int value\\])"},{"content":"public str toolTip()","pos":[299474,299494]},{"content":"Retrieves the tooltip text for the control.","pos":[299584,299627]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[299756,299795],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[299866,299928]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[300038,300071],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[300148,300207]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[300320,300354],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[300430,300492]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[300602,300632],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[300884,300927],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[301166,301217]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[301448,301482],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[301558,301601]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[301730,301768],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[301840,301888]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[302012,302051],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[302122,302181]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[302294,302331],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[302404,302487]},{"content":"public int userFastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[302576,302620],"source":"public int userFastTabSummary(\\[int value\\])"},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[302858,302894],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[302968,303020]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[303140,303174],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[303250,303332]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[303422,303464],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[303532,303588]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[303704,303744],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[303814,303868]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[303986,304026],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[304096,304145]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[304268,304311],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[304378,304431]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[304550,304584],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[304660,304808]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[304832,304867],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[304942,305019]},{"content":"public boolean validate()","pos":[305114,305139]},{"content":"public int value(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[305396,305427],"source":"public int value(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[305678,305738],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[305788,305849]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[305960,306014],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[306070,306129]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[306242,306288],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[306352,306413]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[306524,306562],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[306806,306847],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[306916,306986]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[307088,307129],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[307198,307236]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[307370,307405],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[307480,307542]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[307652,307688],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[307762,307800]},{"content":"public void performTypeLookup(<ph id=\"ph1\">\\[</ph>int userType<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[307934,308033],"source":"public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])"},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[308216,308292],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void endDrag()","pos":[308498,308519]},{"content":"Is called when the user has finished dragging a form control.","pos":[308608,308669]},{"content":"public void textChange()","pos":[308780,308804]},{"content":"public void lookup()","pos":[309062,309082]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[309344,309416],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseLeave()","pos":[309626,309650]},{"content":"Indicates that the mouse pointer has left the control.","pos":[309736,309790]},{"content":"public void undo()","pos":[309908,309926]},{"content":"public void setCursorPos(int x, int y)","pos":[310190,310228]},{"content":"public void performDBLookup(<ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>TableId tableId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[310472,310573],"source":"public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])"},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[310754,310830],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void context()","pos":[311036,311057]},{"content":"Shows the shortcut menu for the control.","pos":[311146,311186]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[311318,311387]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[311428,311528]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[311600,311674],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[311882,311919],"source":"public void filter(\\[str filterStr\\])"},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[312164,312237],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void resetUserSetting()","pos":[312446,312476]},{"content":"Resets the user settings for the control.","pos":[312556,312597]},{"content":"public void displayControl()","pos":[312728,312756]},{"content":"Displays the control.","pos":[312838,312859]},{"content":"public void enter()","pos":[313010,313029]},{"content":"public void inputSearch(str searchStr)","pos":[313292,313330]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[313402,313473]},{"content":"public void setFocus()","pos":[313574,313596]},{"content":"Sets the focus on the control.","pos":[313684,313714]},{"content":"public void gotFocus()","pos":[313856,313878]},{"content":"Indicates that the control has received focus.","pos":[313966,314012]},{"content":"public void copy()","pos":[314138,314156]},{"content":"Copies the contents of the control to the clipboard.","pos":[314248,314300]},{"content":"public void dragLeave()","pos":[314420,314443]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[314530,314626]},{"content":"public void lineScroll(int dx, int dy)","pos":[314702,314740]},{"content":"public void cut()","pos":[314984,315001]},{"content":"Cuts the contents of the control.","pos":[315094,315127]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[315266,315341],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void performFormLookup(xFormRun form)","pos":[315548,315592]},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[315830,315905],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void paste()","pos":[316112,316131]},{"content":"Pastes the contents of the clipboard into the control.","pos":[316222,316276]},{"content":"public void prefColumnSize(int width, int height)","pos":[316394,316443]},{"content":"Specifies the preferred column width and height for the form control.","pos":[316504,316573]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[316676,316783],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void jumpRef()","pos":[316958,316979]},{"content":"public void lostFocus()","pos":[317240,317263]},{"content":"Indicates that the control has lost focus.","pos":[317350,317392]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[317522,317599]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[317632,317702]},{"content":"public void scrollCursor()","pos":[317804,317830]},{"content":"public void pasteText(str pasteStr, <ph id=\"ph1\">\\[</ph>boolean InsertSel<ph id=\"ph2\">\\]</ph>)","pos":[318086,318144],"source":"public void pasteText(str pasteStr, \\[boolean InsertSel\\])"},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[318368,318445],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[318650,318723]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[318760,318858]},{"content":"public void setSelection(int charIndexFrom, int charIndexTo)","pos":[318932,318992]},{"pos":[319217,319236],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[319238,319278]},{"pos":[319335,319345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319347,319352]},{"content":"The new value for the property; optional.","pos":[319355,319396]},{"pos":[319403,319415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[319417,319473]},{"pos":[319480,319487],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[319489,319568]},{"pos":[319574,319590],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[319636,319646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319648,319653]},{"pos":[319662,319674],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319680,319696],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[319698,319765]},{"pos":[319819,319829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319831,319836]},{"content":"The value to assign to the allowEdit property.","pos":[319839,319885]},{"pos":[319892,319904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[319906,319958]},{"pos":[319965,319972],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[319974,320096]},{"pos":[320102,320122],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[320124,320207]},{"pos":[320250,320262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[320264,320332]},{"pos":[320338,320355],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[320402,320412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320414,320419]},{"pos":[320428,320440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320446,320468],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[320470,320568]},{"pos":[320628,320638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320640,320645]},{"content":"The new value for the property; optional.","pos":[320648,320689]},{"pos":[320696,320708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[320710,320789]},{"pos":[320796,320803],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[320805,320842]},{"pos":[320848,320870],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[320872,320921]},{"pos":[320973,320983],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320985,320990]},{"pos":[320999,321011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[321013,321057]},{"pos":[321064,321071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[321073,321141]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[321147,321217]},{"content":"The second byte contains a value for green.","pos":[321222,321265]},{"content":"The third byte contains a value for blue.","pos":[321270,321311]},{"content":"The high-order byte must be zero.","pos":[321316,321349]},{"content":"The maximum value for a single byte is 255.","pos":[321354,321397]},{"pos":[321403,321419],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[321421,321483]},{"pos":[321529,321539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321541,321546]},{"pos":[321555,321567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[321569,321630]},{"pos":[321636,321652],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user begins dragging a form control.","pos":[321654,321709]},{"pos":[321756,321766],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[321768,321769]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[321772,321842]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[321843,321910]},{"content":"y","pos":[321922,321923]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[321926,321996]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[321997,322064]},{"pos":[322071,322083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[322085,322124]},{"pos":[322131,322138],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[322140,322221]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[322222,322326]},{"pos":[322332,322343],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that was used to output text in the control.","pos":[322345,322421]},{"pos":[322462,322472],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322474,322479]},{"pos":[322488,322500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[322502,322552]},{"pos":[322559,322566],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[322568,322640]},{"content":"0 Use the default font weight.","pos":[322646,322676]},{"content":"1 Thin.","pos":[322681,322688]},{"content":"2 Extra-light.","pos":[322693,322707]},{"content":"3 Light.","pos":[322712,322720]},{"content":"4 Normal.","pos":[322725,322734]},{"content":"5 Medium.","pos":[322739,322748]},{"content":"6 Semibold.","pos":[322753,322764]},{"content":"7 Bold.","pos":[322769,322776]},{"content":"8 Extra-bold.","pos":[322781,322794]},{"content":"9 Heavy.","pos":[322799,322807]},{"pos":[322813,322826],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[322828,322884]},{"pos":[322927,322937],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322939,322944]},{"pos":[322953,322965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[322967,323011]},{"pos":[323018,323025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows.","pos":[323027,323119]},{"content":"Value","pos":[323123,323128]},{"content":"Description","pos":[323131,323142]},{"content":"0","pos":[323171,323172]},{"content":"Auto","pos":[323179,323183]},{"content":"1","pos":[323195,323196]},{"content":"3D","pos":[323203,323205]},{"content":"2","pos":[323219,323220]},{"content":"Single line","pos":[323227,323238]},{"content":"3","pos":[323243,323244]},{"content":"Flat","pos":[323251,323255]},{"content":"4","pos":[323267,323268]},{"content":"None","pos":[323275,323279]},{"pos":[323294,323316],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[323368,323378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323380,323385]},{"pos":[323394,323406],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323412,323434],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[323436,323470]},{"pos":[323537,323547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[323549,323554]},{"content":"The number of lines to use to determine the height.","pos":[323557,323608]},{"content":"lines","pos":[323620,323625]},{"content":"The number of lines to use to determine the height.","pos":[323628,323679]},{"pos":[323686,323698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[323700,323746]},{"pos":[323752,323771],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[323773,323816]},{"pos":[323865,323875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323877,323882]},{"pos":[323891,323903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[323905,323967]},{"pos":[323974,323981],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table.","pos":[323983,324087]},{"content":"Value","pos":[324091,324096]},{"content":"Description","pos":[324099,324110]},{"content":"0","pos":[324157,324158]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324165,324178],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[324190,324191]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324198,324214],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[324223,324224]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324231,324246],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[324256,324258]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324264,324276],"source":"MAC\\_CHARSET"},{"content":"128","pos":[324289,324292]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324297,324314],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[324322,324325]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324330,324345],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[324355,324358]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324363,324378],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[324388,324391]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324396,324416],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[324421,324424]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324429,324443],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[324454,324457]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324462,324478],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[324487,324490]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324495,324514],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[324520,324523]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324528,324543],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[324553,324556]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324561,324577],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[324586,324589]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324594,324613],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[324619,324622]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324627,324639],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[324651,324739]},{"content":"Value","pos":[324743,324748]},{"content":"Description","pos":[324751,324762]},{"content":"130","pos":[324797,324800]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324805,324819],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[324823,324909]},{"content":"Value","pos":[324913,324918]},{"content":"Description","pos":[324921,324932]},{"content":"177","pos":[324969,324972]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[324977,324992],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[324997,325000]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[325005,325020],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[325024,325101]},{"content":"Value","pos":[325105,325110]},{"content":"Description","pos":[325113,325124]},{"content":"222","pos":[325157,325160]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[325165,325178],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[325182,325266]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[325267,325358],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[325359,325473]},{"pos":[325479,325497],"content":"Method charFromPos","linkify":"Method charFromPos","nodes":[{"content":"Method charFromPos","pos":[0,18]}]},{"pos":[325546,325556],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[325558,325559]},{"content":"y","pos":[325573,325574]},{"pos":[325583,325595],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325601,325619],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[325621,325666]},{"pos":[325714,325724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325726,325731]},{"pos":[325740,325752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[325754,325797]},{"pos":[325804,325811],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[325813,325874]},{"content":"Value","pos":[325878,325883]},{"content":"Style","pos":[325886,325891]},{"content":"0","pos":[325946,325947]},{"content":"Default","pos":[325954,325961]},{"content":"1","pos":[325980,325981]},{"content":"The Windows palette","pos":[325988,326007]},{"content":"2","pos":[326014,326015]},{"content":"The true-color scheme","pos":[326022,326043]},{"pos":[326051,326074],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[326076,326143]},{"pos":[326226,326236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[326238,326243]},{"content":"The ID of the configuration key being assigned to the control; optional.","pos":[326246,326318]},{"pos":[326325,326337],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[326339,326411]},{"pos":[326418,326425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[326427,326508]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[326509,326602]},{"pos":[326608,326633],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[326635,326731]},{"pos":[326776,326788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[326790,326876]},{"pos":[326883,326890],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[326892,326941]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[326942,327090]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[327091,327225]},{"pos":[327231,327256],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[327258,327336]},{"pos":[327391,327401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[327403,327408]},{"content":"The string that contains the country/region codes to set; optional.","pos":[327411,327478]},{"pos":[327485,327497],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[327499,327564]},{"pos":[327570,327602],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[327672,327682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[327684,327689]},{"pos":[327698,327710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[327716,327732],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[327786,327796],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[327798,327803]},{"pos":[327812,327824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[327830,327856],"content":"Method dataFieldArrayIndex","linkify":"Method dataFieldArrayIndex","nodes":[{"content":"Method dataFieldArrayIndex","pos":[0,26]}]},{"pos":[327901,327913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[327919,327939],"content":"Method dataFieldName","linkify":"Method dataFieldName","nodes":[{"content":"Method dataFieldName","pos":[0,20]}]},{"pos":[327984,327996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[328002,328019],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[328066,328076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[328078,328083]},{"pos":[328092,328104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[328110,328133],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[328135,328260]},{"pos":[328313,328323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[328325,328330]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[328333,328407]},{"pos":[328414,328426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[328428,328540]},{"pos":[328547,328554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[328556,328683]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[328684,328777]},{"pos":[328783,328800],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[328802,328874]},{"pos":[328925,328935],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[328937,328942]},{"pos":[328951,328963],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[328965,329017]},{"pos":[329023,329039],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[329085,329095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[329097,329102]},{"pos":[329111,329123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[329129,329149],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[329216,329226],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[329228,329233]},{"content":"mode","pos":[329247,329251]},{"pos":[329260,329272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[329278,329302],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[329365,329375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[329377,329381]},{"pos":[329390,329402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[329408,329433],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[329488,329498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[329500,329505]},{"pos":[329514,329526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[329532,329552],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[329619,329629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[329631,329636]},{"content":"mode","pos":[329650,329654]},{"pos":[329663,329675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[329681,329705],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[329768,329778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[329780,329784]},{"pos":[329793,329805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[329811,329836],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[329891,329901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[329903,329908]},{"pos":[329917,329929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[329935,329955],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[329957,330156]},{"pos":[330206,330216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[330218,330223]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[330226,330300]},{"pos":[330307,330319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[330321,330465]},{"pos":[330471,330486],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Indicates whether to enable or disable drag-and-drop operations for the control.","pos":[330488,330568]},{"pos":[330613,330623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[330625,330630]},{"content":"An integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[330633,330711]},{"pos":[330718,330730],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, 0.","pos":[330732,330788]},{"pos":[330795,330802],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave Method, the dragOver Method, and the dragOverEx Method to specify the behavior.","pos":[330804,330901]},{"pos":[330907,330922],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[330924,331018]},{"pos":[331112,331122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[331124,331134]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[331137,331222]},{"content":"dragMode","pos":[331234,331242]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[331245,331330]},{"content":"x","pos":[331342,331343]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[331346,331431]},{"content":"y","pos":[331443,331444]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[331447,331532]},{"pos":[331539,331551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[331553,331618]},{"pos":[331624,331641],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[331643,331739]},{"pos":[331829,331839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[331841,331851]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[331854,331939]},{"content":"dragMode","pos":[331951,331959]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[331962,332047]},{"content":"x","pos":[332059,332060]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[332063,332148]},{"content":"y","pos":[332160,332161]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[332164,332249]},{"pos":[332256,332268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[332270,332335]},{"pos":[332341,332356],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[332358,332428]},{"pos":[332462,332474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[332476,332607]},{"pos":[332613,332627],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[332629,332680]},{"pos":[332732,332742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[332744,332749]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[332752,332824]},{"pos":[332831,332843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[332845,332893]},{"pos":[332900,332907],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[332909,332984]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[332985,333080]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[333081,333215]},{"pos":[333221,333244],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[333319,333329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[333331,333336]},{"pos":[333345,333357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[333363,333384],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[333435,333445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[333447,333452]},{"pos":[333461,333473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[333479,333490],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[333492,333549]},{"pos":[333590,333600],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[333602,333607]},{"pos":[333616,333628],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[333630,333685]},{"pos":[333691,333706],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[333708,333765]},{"pos":[333810,333820],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[333822,333827]},{"pos":[333836,333848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[333850,333883]},{"pos":[333889,333911],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[333913,333964]},{"pos":[334016,334026],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[334028,334033]},{"pos":[334042,334054],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[334056,334100]},{"pos":[334107,334114],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[334116,334184]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[334190,334260]},{"content":"The second byte contains a value for green.","pos":[334265,334308]},{"content":"The third byte contains a value for blue.","pos":[334313,334354]},{"content":"The high-order byte must be zero.","pos":[334359,334392]},{"content":"The maximum value for a single byte is 255.","pos":[334397,334440]},{"pos":[334446,334465],"content":"Method getCursorPos","linkify":"Method getCursorPos","nodes":[{"content":"Method getCursorPos","pos":[0,19]}]},{"pos":[334509,334521],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[334527,334553],"content":"Method getFirstVisibleLine","linkify":"Method getFirstVisibleLine","nodes":[{"content":"Method getFirstVisibleLine","pos":[0,26]}]},{"pos":[334598,334610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[334616,334630],"content":"Method getLine","linkify":"Method getLine","nodes":[{"content":"Method getLine","pos":[0,14]}]},{"pos":[334673,334683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[334685,334691]},{"pos":[334700,334712],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[334718,334737],"content":"Method getLineCount","linkify":"Method getLineCount","nodes":[{"content":"Method getLineCount","pos":[0,19]}]},{"pos":[334775,334787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[334793,334812],"content":"Method getSelection","linkify":"Method getSelection","nodes":[{"content":"Method getSelection","pos":[0,19]}]},{"pos":[334856,334868],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[334874,334891],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[334893,334981]},{"pos":[335034,335044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[335046,335049]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[335052,335122]},{"pos":[335129,335141],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[335143,335210]},{"pos":[335216,335237],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[335239,335294]},{"pos":[335338,335350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[335352,335415]},{"pos":[335421,335434],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[335436,335475]},{"pos":[335528,335538],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[335540,335545]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[335548,335613]},{"content":"mode","pos":[335625,335629]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[335632,335697]},{"pos":[335704,335716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[335718,335754]},{"pos":[335761,335768],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[335770,335823]},{"content":"Calculate the height according to the following table.","pos":[335824,335878]},{"content":"Mode","pos":[335882,335886]},{"content":"Height calculation","pos":[335900,335918]},{"content":"-1 Exact","pos":[336106,336114]},{"content":"The exact height in pixels of the controls is used.","pos":[336124,336175]},{"content":"0 Auto","pos":[336218,336224]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[336236,336325]},{"content":"1 Column height","pos":[336330,336345]},{"content":"The layout of the form determines the height of the control.","pos":[336348,336408]},{"content":"The height and height calculation mode can be set separately.","pos":[336441,336502]},{"pos":[336508,336525],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[336527,336589]},{"pos":[336636,336646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[336648,336653]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[336656,336731]},{"pos":[336738,336750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[336752,336773]},{"pos":[336780,336787],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[336789,336843]},{"content":"Mode","pos":[336847,336851]},{"content":"Height calculation","pos":[336863,336881]},{"content":"Exact","pos":[337067,337072]},{"content":"The exact height in pixels of the controls is used.","pos":[337083,337134]},{"content":"Auto","pos":[337177,337181]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[337193,337282]},{"content":"Column height","pos":[337287,337300]},{"content":"The layout of the form determines the height of the control.","pos":[337303,337363]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[337396,337481]},{"pos":[337487,337505],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[337507,337546]},{"pos":[337594,337604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[337606,337611]},{"content":"An integer that specifies the height in pixels; optional.","pos":[337614,337671]},{"pos":[337678,337690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[337692,337713]},{"pos":[337720,337727],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[337729,337819]},{"pos":[337825,337841],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[337843,337883]},{"pos":[337918,337930],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[337932,338020]},{"pos":[338027,338034],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[338036,338106]},{"content":"Use the helpText method to set the value of the Help text.","pos":[338107,338165]},{"pos":[338171,338186],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[338188,338292]},{"pos":[338337,338347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[338349,338354]},{"content":"The value to assign as the Help text for the control.","pos":[338357,338410]},{"pos":[338417,338429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[338431,338486]},{"pos":[338493,338500],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[338502,338570]},{"content":"The Help text must not exceed 250 characters.","pos":[338571,338616]},{"pos":[338622,338644],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[338646,338709]},{"pos":[338761,338771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[338773,338778]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[338781,338848]},{"pos":[338855,338867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[338869,338919]},{"pos":[338925,338936],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[338938,338983]},{"pos":[339013,339025],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[339027,339054]},{"pos":[339061,339068],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[339070,339114]},{"pos":[339120,339134],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[339178,339188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[339190,339195]},{"pos":[339204,339216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[339222,339240],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[339281,339293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[339299,339317],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[339319,339385]},{"pos":[339426,339438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[339440,339491]},{"pos":[339498,339505],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[339507,339575]},{"pos":[339581,339600],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[339602,339669]},{"pos":[339711,339723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[339725,339777]},{"pos":[339783,339808],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[339810,339911]},{"pos":[339980,339990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[339992,340009]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[340012,340140]},{"pos":[340147,340159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[340161,340320]},{"pos":[340327,340334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[340336,340413]},{"content":"FormAllowUserSetup::No 0","pos":[340753,340777]},{"content":"No changes can be made to the control.","pos":[340788,340826]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[340827,340916]},{"content":"FormAllowUserSetup::Restricted 1","pos":[340921,340953]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[340956,341048]},{"content":"The user cannot move the control.","pos":[341049,341082]},{"content":"FormAllowUserSetup::Yes 2","pos":[341089,341114]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[341124,341216]},{"content":"The user can also move the control.","pos":[341217,341252]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[341256,341445]},{"pos":[341451,341465],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[341502,341514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341520,341533],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[341584,341594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341596,341601]},{"pos":[341610,341622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341628,341640],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[341642,341679]},{"pos":[341721,341731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341733,341738]},{"pos":[341747,341759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[341761,341799]},{"pos":[341806,341813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[341815,341893]},{"content":"The label property value cannot exceed 250 characters.","pos":[341894,341948]},{"pos":[341954,341975],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[342026,342036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342038,342043]},{"pos":[342052,342064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342070,342086],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[342132,342142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342144,342149]},{"pos":[342158,342170],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342176,342200],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[342254,342264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342266,342271]},{"pos":[342280,342292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342298,342314],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[342360,342370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342372,342377]},{"pos":[342386,342398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342404,342424],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[342474,342484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342486,342491]},{"pos":[342500,342512],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342518,342545],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[342602,342612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342614,342619]},{"pos":[342628,342640],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342646,342663],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[342710,342720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342722,342727]},{"pos":[342736,342748],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342754,342772],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[342830,342840],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342842,342847]},{"content":"mode","pos":[342861,342865]},{"pos":[342874,342886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342892,342914],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[342966,342976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342978,342983]},{"pos":[342992,343004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343010,343033],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[343086,343096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[343098,343103]},{"pos":[343112,343124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343130,343148],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[343204,343214],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[343216,343221]},{"pos":[343230,343242],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343248,343273],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[343370,343380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[343382,343383]},{"content":"y","pos":[343397,343398]},{"content":"button","pos":[343412,343418]},{"content":"Ctrl","pos":[343432,343436]},{"content":"Shift","pos":[343450,343455]},{"pos":[343464,343476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343482,343503],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[343596,343606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[343608,343609]},{"content":"y","pos":[343623,343624]},{"content":"button","pos":[343638,343644]},{"content":"Ctrl","pos":[343658,343662]},{"content":"Shift","pos":[343676,343681]},{"pos":[343690,343702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343708,343727],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[343818,343828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[343830,343831]},{"content":"y","pos":[343845,343846]},{"content":"button","pos":[343860,343866]},{"content":"Ctrl","pos":[343880,343884]},{"content":"Shift","pos":[343898,343903]},{"pos":[343912,343924],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343930,343950],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[344000,344010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344012,344017]},{"pos":[344026,344038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344044,344065],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[344124,344134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344136,344141]},{"pos":[344150,344162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344168,344185],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[344242,344252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344254,344259]},{"content":"mode","pos":[344273,344277]},{"pos":[344286,344298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344304,344325],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[344376,344386],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344388,344393]},{"pos":[344402,344414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344420,344442],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[344494,344504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344506,344511]},{"pos":[344520,344532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344538,344550],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[344585,344597],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344603,344614],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[344616,344680]},{"pos":[344731,344741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344743,344748]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[344751,344837]},{"content":"mode","pos":[344849,344853]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[344856,344942]},{"pos":[344949,344961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[344963,345014]},{"pos":[345020,345035],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[345037,345098]},{"pos":[345143,345153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345155,345160]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[345163,345249]},{"pos":[345256,345268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[345270,345326]},{"pos":[345332,345348],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[345350,345414]},{"pos":[345460,345470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345472,345477]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[345480,345561]},{"pos":[345568,345580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[345582,345633]},{"pos":[345639,345655],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[345718,345728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345730,345735]},{"content":"mode","pos":[345749,345753]},{"pos":[345762,345774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[345780,345800],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[345859,345869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[345871,345875]},{"pos":[345884,345896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[345902,345923],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[345974,345984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345986,345991]},{"pos":[346000,346012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346018,346037],"content":"Method lineFromChar","linkify":"Method lineFromChar","nodes":[{"content":"Method lineFromChar","pos":[0,19]}]},{"pos":[346088,346098],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[346100,346109]},{"pos":[346118,346130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346136,346152],"content":"Method lineIndex","linkify":"Method lineIndex","nodes":[{"content":"Method lineIndex","pos":[0,16]}]},{"pos":[346197,346207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[346209,346215]},{"pos":[346224,346236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346242,346259],"content":"Method lineLength","linkify":"Method lineLength","nodes":[{"content":"Method lineLength","pos":[0,17]}]},{"pos":[346305,346315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[346317,346323]},{"pos":[346332,346344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346350,346369],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[346418,346428],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[346430,346435]},{"pos":[346444,346456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346462,346478],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[346532,346542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[346544,346549]},{"pos":[346558,346570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346576,346596],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[346598,346651]},{"pos":[346709,346719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[346721,346726]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[346729,346823]},{"pos":[346830,346842],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[346844,346917]},{"pos":[346923,346938],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[346976,346988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346994,347014],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[347016,347073]},{"pos":[347165,347175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[347177,347178]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347181,347242]},{"content":"y","pos":[347254,347255]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347258,347319]},{"content":"button","pos":[347331,347337]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347340,347401]},{"content":"Ctrl","pos":[347413,347417]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347420,347481]},{"content":"Shift","pos":[347493,347498]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347501,347562]},{"pos":[347569,347581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[347583,347622]},{"pos":[347629,347636],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[347638,347742]},{"pos":[347748,347764],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[347766,347831]},{"pos":[347919,347929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[347931,347932]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347935,347996]},{"content":"y","pos":[348008,348009]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348012,348073]},{"content":"button","pos":[348085,348091]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348094,348155]},{"content":"Ctrl","pos":[348167,348171]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348174,348235]},{"content":"Shift","pos":[348247,348252]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348255,348316]},{"pos":[348323,348335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[348337,348376]},{"pos":[348383,348390],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[348392,348496]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[348497,348632]},{"pos":[348638,348654],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[348656,348721]},{"pos":[348809,348819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[348821,348822]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348825,348886]},{"content":"y","pos":[348898,348899]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348902,348963]},{"content":"button","pos":[348975,348981]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348984,349045]},{"content":"Ctrl","pos":[349057,349061]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[349064,349125]},{"content":"Shift","pos":[349137,349142]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[349145,349206]},{"pos":[349213,349225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[349227,349266]},{"pos":[349273,349280],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[349282,349386]},{"pos":[349392,349406],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[349408,349480]},{"pos":[349566,349576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[349578,349579]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[349582,349643]},{"content":"y","pos":[349655,349656]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[349659,349720]},{"content":"button","pos":[349732,349738]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[349741,349802]},{"content":"Ctrl","pos":[349814,349818]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[349821,349882]},{"content":"Shift","pos":[349894,349899]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[349902,349963]},{"pos":[349970,349982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[349984,350023]},{"pos":[350030,350037],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[350039,350143]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[350144,350279]},{"pos":[350285,350296],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[350298,350451]},{"pos":[350492,350502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[350504,350509]},{"content":"The name to assign to the control.","pos":[350512,350546]},{"pos":[350553,350565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[350567,350631]},{"pos":[350638,350645],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[350647,350741]},{"content":"Begins with a letter.","pos":[350747,350768]},{"content":"Doesn't exceed 250 characters.","pos":[350773,350803]},{"content":"Can include numbers and underscore characters.","pos":[350808,350854]},{"content":"Cannot include punctuation or spaces.","pos":[350859,350896]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.","pos":[350901,351031]},{"pos":[351037,351060],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[351113,351123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351125,351130]},{"pos":[351139,351151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351157,351184],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[351236,351248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351254,351274],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[351276,351321]},{"pos":[351368,351380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[351382,351417]},{"pos":[351423,351441],"content":"Method posFromChar","linkify":"Method posFromChar","nodes":[{"content":"Method posFromChar","pos":[0,18]}]},{"pos":[351497,351507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[351509,351518]},{"pos":[351527,351539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351545,351566],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[351617,351627],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351629,351634]},{"pos":[351643,351655],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351661,351678],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[351725,351735],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351737,351742]},{"pos":[351751,351763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351769,351791],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[351851,351861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351863,351868]},{"pos":[351877,351889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351895,351918],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[351971,351981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351983,351988]},{"pos":[351997,352009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352015,352032],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[352079,352089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352091,352096]},{"pos":[352105,352117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352123,352141],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[352143,352202]},{"pos":[352270,352280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352282,352287]},{"content":"The ID of the security key to assign to the control; optional.","pos":[352290,352352]},{"pos":[352359,352371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[352373,352472]},{"pos":[352478,352500],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[352502,352542]},{"pos":[352597,352607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[352609,352619]},{"content":"The ID of the menu to show.","pos":[352622,352649]},{"pos":[352656,352668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[352670,352729]},{"pos":[352735,352751],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[352805,352815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352817,352822]},{"pos":[352831,352843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352849,352860],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[352862,352989]},{"pos":[353038,353048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353050,353055]},{"content":"The value to assign to the skip property of the control; optional.","pos":[353058,353124]},{"pos":[353131,353143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[353145,353251]},{"pos":[353258,353265],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[353267,353462]},{"pos":[353468,353479],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[353534,353544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[353546,353559]},{"pos":[353568,353580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353586,353598],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[353640,353650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353652,353657]},{"pos":[353666,353678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353684,353701],"content":"Method timeFormat","linkify":"Method timeFormat","nodes":[{"content":"Method timeFormat","pos":[0,17]}]},{"pos":[353748,353758],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353760,353765]},{"pos":[353774,353786],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353792,353808],"content":"Method timeHours","linkify":"Method timeHours","nodes":[{"content":"Method timeHours","pos":[0,16]}]},{"pos":[353854,353864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353866,353871]},{"pos":[353880,353892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353898,353915],"content":"Method timeMinute","linkify":"Method timeMinute","nodes":[{"content":"Method timeMinute","pos":[0,17]}]},{"pos":[353962,353972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353974,353979]},{"pos":[353988,354000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354006,354024],"content":"Method timeSeconds","linkify":"Method timeSeconds","nodes":[{"content":"Method timeSeconds","pos":[0,18]}]},{"pos":[354072,354082],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354084,354089]},{"pos":[354098,354110],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354116,354136],"content":"Method timeSeparator","linkify":"Method timeSeparator","nodes":[{"content":"Method timeSeparator","pos":[0,20]}]},{"pos":[354186,354196],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354198,354203]},{"pos":[354212,354224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354230,354244],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[354246,354289]},{"pos":[354322,354334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[354336,354438]},{"pos":[354445,354452],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[354454,354526]},{"pos":[354532,354542],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[354544,354606]},{"pos":[354656,354666],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354668,354673]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[354676,354760]},{"content":"mode","pos":[354772,354776]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[354779,354863]},{"pos":[354870,354882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[354884,354933]},{"pos":[354939,354953],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[354955,355014]},{"pos":[355058,355068],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355070,355075]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[355078,355162]},{"pos":[355169,355181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[355183,355237]},{"pos":[355243,355258],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[355260,355322]},{"pos":[355367,355377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355379,355384]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[355387,355466]},{"pos":[355473,355485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[355487,355536]},{"pos":[355542,355553],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[355594,355604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355606,355611]},{"pos":[355620,355632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355638,355654],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[355708,355718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355720,355725]},{"pos":[355734,355746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355752,355779],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[355843,355853],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[355855,355859]},{"pos":[355868,355880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355886,355901],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[355903,355946]},{"pos":[355991,356001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356003,356008]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[356011,356083]},{"pos":[356090,356102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[356104,356134]},{"pos":[356140,356159],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[356161,356209]},{"pos":[356258,356268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356270,356275]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[356278,356355]},{"pos":[356362,356374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[356376,356411]},{"pos":[356417,356437],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[356439,356498]},{"pos":[356548,356558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356560,356565]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[356568,356656]},{"pos":[356663,356675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[356677,356723]},{"pos":[356729,356747],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[356749,356832]},{"pos":[356880,356890],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356892,356897]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[356900,356980]},{"pos":[356987,356999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[357001,357057]},{"pos":[357063,357088],"content":"Method userFastTabSummary","linkify":"Method userFastTabSummary","nodes":[{"content":"Method userFastTabSummary","pos":[0,25]}]},{"pos":[357143,357153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357155,357160]},{"pos":[357169,357181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[357187,357204],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[357206,357258]},{"pos":[357305,357315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357317,357322]},{"content":"The user height for the control; optional.","pos":[357325,357367]},{"pos":[357374,357386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[357388,357427]},{"pos":[357433,357448],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[357450,357532]},{"pos":[357577,357587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357589,357594]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[357597,357676]},{"pos":[357683,357695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[357697,357752]},{"pos":[357759,357766],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[357768,357938]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[357939,358014]},{"content":"This method lets you programmatically determine and set the value.","pos":[358015,358081]},{"pos":[358087,358110],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[358112,358168]},{"pos":[358221,358231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358233,358238]},{"content":"The organization container to set for the control; optional.","pos":[358241,358301]},{"pos":[358308,358320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[358322,358365]},{"pos":[358371,358392],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[358394,358448]},{"pos":[358499,358509],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358511,358516]},{"content":"The organization sibling to set for the control; optional.","pos":[358519,358577]},{"pos":[358584,358596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[358598,358639]},{"pos":[358645,358666],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[358668,358717]},{"pos":[358768,358778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358780,358785]},{"content":"The user label text to set for the control; optional.","pos":[358788,358841]},{"pos":[358848,358860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[358862,358898]},{"pos":[358904,358928],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[358930,358983]},{"pos":[359037,359047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359049,359054]},{"content":"The user security level to set for the control; optional.","pos":[359057,359114]},{"pos":[359121,359133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[359135,359175]},{"pos":[359181,359196],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[359198,359346]},{"pos":[359391,359401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359403,359408]},{"content":"The value to assign to the userSkip property; optional.","pos":[359411,359466]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[359467,359562]},{"pos":[359569,359581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[359583,359652]},{"pos":[359658,359674],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[359676,359753]},{"pos":[359799,359809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359811,359816]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[359819,359885]},{"pos":[359892,359904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[359906,360035]},{"pos":[360042,360049],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[360051,360145]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[360146,360262],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[360263,360413]},{"pos":[360419,360434],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[360472,360484],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[360490,360502],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[360544,360554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[360556,360561]},{"pos":[360570,360582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[360588,360610],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[360612,360673]},{"pos":[360742,360752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[360754,360759]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[360762,360839]},{"content":"mode","pos":[360851,360855]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[360858,360935]},{"pos":[360942,360954],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[360956,361004]},{"pos":[361010,361036],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[361038,361097]},{"pos":[361162,361172],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[361174,361178]},{"pos":[361187,361199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[361201,361255]},{"pos":[361261,361288],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[361290,361351]},{"pos":[361408,361418],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361420,361425]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[361428,361506]},{"pos":[361513,361525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[361527,361575]},{"pos":[361581,361600],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[361649,361659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361661,361666]},{"pos":[361675,361687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361693,361707],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[361709,361779]},{"pos":[361831,361841],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361843,361848]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[361851,361923]},{"pos":[361930,361942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[361944,361993]},{"pos":[361999,362011],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[362013,362051]},{"pos":[362103,362113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362115,362120]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[362123,362187]},{"content":"mode","pos":[362199,362203]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[362206,362270]},{"pos":[362277,362289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[362291,362326]},{"pos":[362333,362340],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[362342,362395]},{"content":"Calculate the width according to the following table.","pos":[362396,362449]},{"content":"Mode","pos":[362453,362457]},{"content":"Width calculation","pos":[362470,362487]},{"content":"-1 Exact","pos":[362673,362681]},{"content":"The exact width in pixels of the controls is used.","pos":[362690,362740]},{"content":"0 Auto","pos":[362783,362789]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[362800,362888]},{"content":"1 Column width","pos":[362893,362907]},{"content":"The layout of the form determines the width of the control.","pos":[362910,362969]},{"content":"The width and width calculation mode can be set separately.","pos":[363002,363061]},{"pos":[363067,363083],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[363085,363147]},{"pos":[363193,363203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363205,363210]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[363213,363287]},{"pos":[363294,363306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[363308,363369]},{"pos":[363376,363383],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[363385,363438]},{"content":"Mode","pos":[363442,363446]},{"content":"Width calculation","pos":[363457,363474]},{"content":"Exact","pos":[363658,363663]},{"content":"The exact width in pixels of the controls is used.","pos":[363673,363723]},{"content":"Auto","pos":[363766,363770]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[363781,363869]},{"content":"Column width","pos":[363874,363886]},{"content":"The layout of the form determines the width of the control.","pos":[363889,363948]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[363981,364064]},{"pos":[364070,364087],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[364089,364127]},{"pos":[364174,364184],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364186,364191]},{"content":"An integer that specifies the width in pixels; optional.","pos":[364194,364250]},{"pos":[364257,364269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[364271,364306]},{"pos":[364313,364320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[364322,364395]},{"pos":[364401,364425],"content":"Method performTypeLookup","linkify":"Method performTypeLookup","nodes":[{"content":"Method performTypeLookup","pos":[0,24]}]},{"pos":[364531,364541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userType","pos":[364543,364551]},{"content":"arrayIndex","pos":[364565,364575]},{"content":"company","pos":[364589,364596]},{"pos":[364604,364622],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[364707,364717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[364719,364725]},{"content":"e","pos":[364739,364740]},{"pos":[364748,364762],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[364764,364825]},{"pos":[364859,364866],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[364868,364996]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[364997,365101]},{"pos":[365107,365124],"content":"Method textChange","linkify":"Method textChange","nodes":[{"content":"Method textChange","pos":[0,17]}]},{"pos":[365160,365173],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[365205,365219],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[365300,365310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[365312,365318]},{"content":"e","pos":[365332,365333]},{"pos":[365341,365358],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[365360,365414]},{"pos":[365450,365461],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[365491,365510],"content":"Method setCursorPos","linkify":"Method setCursorPos","nodes":[{"content":"Method setCursorPos","pos":[0,19]}]},{"pos":[365561,365571],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[365573,365574]},{"content":"y","pos":[365588,365589]},{"pos":[365597,365619],"content":"Method performDBLookup","linkify":"Method performDBLookup","nodes":[{"content":"Method performDBLookup","pos":[0,22]}]},{"pos":[365727,365737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[365739,365746]},{"content":"tableId","pos":[365760,365767]},{"content":"company","pos":[365781,365788]},{"pos":[365796,365814],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[365899,365909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[365911,365917]},{"content":"e","pos":[365931,365932]},{"pos":[365940,365954],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[365956,365996]},{"pos":[366029,366042],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[366044,366144]},{"pos":[366226,366236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[366238,366248]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[366251,366336]},{"content":"dragMode","pos":[366348,366356]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[366359,366444]},{"content":"x","pos":[366456,366457]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[366460,366545]},{"content":"y","pos":[366557,366558]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[366561,366646]},{"pos":[366652,366668],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[366751,366761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[366763,366769]},{"content":"e","pos":[366783,366784]},{"pos":[366792,366805],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[366853,366863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[366865,366874]},{"pos":[366882,366897],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[366979,366989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[366991,366997]},{"content":"e","pos":[367011,367012]},{"pos":[367020,367043],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[367045,367086]},{"pos":[367128,367149],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[367151,367172]},{"pos":[367212,367224],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[367255,367273],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[367275,367346]},{"pos":[367397,367407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[367409,367418]},{"content":"The string value to use to filter data; optional.","pos":[367421,367470]},{"pos":[367476,367491],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[367493,367523]},{"pos":[367557,367572],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[367574,367620]},{"pos":[367654,367665],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[367667,367719]},{"pos":[367749,367765],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[367767,367863]},{"pos":[367898,367915],"content":"Method lineScroll","linkify":"Method lineScroll","nodes":[{"content":"Method lineScroll","pos":[0,17]}]},{"pos":[367966,367976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dx","pos":[367978,367980]},{"content":"dy","pos":[367994,367996]},{"pos":[368004,368014],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[368016,368049]},{"pos":[368078,368095],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[368179,368189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[368191,368197]},{"content":"e","pos":[368211,368212]},{"pos":[368220,368244],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[368301,368311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[368313,368317]},{"pos":[368325,368342],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[368426,368436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[368438,368444]},{"content":"e","pos":[368458,368459]},{"pos":[368467,368479],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[368481,368535]},{"pos":[368566,368587],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[368589,368658]},{"pos":[368720,368730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[368732,368737]},{"content":"The preferred height of the control.","pos":[368740,368776]},{"content":"height","pos":[368788,368794]},{"content":"The preferred height of the control.","pos":[368797,368833]},{"pos":[368839,368868],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[368986,368996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[368998,369014]},{"content":"objectMethodToCall","pos":[369028,369046]},{"content":"overrideObject","pos":[369060,369074]},{"pos":[369082,369096],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[369129,369145],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[369147,369189]},{"pos":[369224,369241],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[369243,369313]},{"pos":[369403,369413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[369415,369416]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[369419,369480]},{"content":"y","pos":[369492,369493]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[369496,369557]},{"content":"button","pos":[369569,369575]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[369578,369639]},{"content":"Ctrl","pos":[369651,369655]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[369658,369719]},{"content":"Shift","pos":[369731,369736]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[369739,369800]},{"pos":[369806,369825],"content":"Method scrollCursor","linkify":"Method scrollCursor","nodes":[{"content":"Method scrollCursor","pos":[0,19]}]},{"pos":[369863,369879],"content":"Method pasteText","linkify":"Method pasteText","nodes":[{"content":"Method pasteText","pos":[0,16]}]},{"pos":[369948,369958],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pasteStr","pos":[369960,369968]},{"content":"InsertSel","pos":[369982,369991]},{"pos":[369999,370018],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[370104,370114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[370116,370122]},{"content":"e","pos":[370136,370137]},{"pos":[370145,370156],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[370158,370256]},{"pos":[370342,370352],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[370354,370364]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[370367,370452]},{"content":"dragMode","pos":[370464,370472]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[370475,370560]},{"content":"x","pos":[370572,370573]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[370576,370661]},{"content":"y","pos":[370673,370674]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[370677,370762]},{"pos":[370768,370787],"content":"Method setSelection","linkify":"Method setSelection","nodes":[{"content":"Method setSelection","pos":[0,19]}]},{"pos":[370860,370870],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndexFrom","pos":[370872,370885]},{"content":"charIndexTo","pos":[370899,370910]},{"pos":[370917,370938],"content":"Class FormTreeControl","linkify":"Class FormTreeControl","nodes":[{"content":"Class FormTreeControl","pos":[0,21]}]},{"pos":[370990,370997],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[371003,371011],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[371017,371024],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[371028,371034]},{"content":"Description","pos":[371138,371149]},{"content":"public int add(int parent, int insertAfter, str Text, <ph id=\"ph1\">\\[</ph>int image<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int children<ph id=\"ph4\">\\]</ph>)","pos":[371592,371678],"source":"public int add(int parent, int insertAfter, str Text, \\[int image\\], \\[int children\\])"},{"content":"public int addItem(int parent, int insertAfter, FormTreeItem item)","pos":[371874,371940]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[372156,372202],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[372266,372306]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[372438,372481],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can modify the contents of the control.","pos":[372548,372615]},{"content":"public boolean allowSysSetup()","pos":[372720,372750]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[372830,372913]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[373002,373051],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[373112,373210]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[373284,373325],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[373394,373443]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[373566,373601],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[373676,373738]},{"content":"public int beginDrag(int x, int y)","pos":[373848,373882]},{"content":"Is called when the user starts to drag a form tree control.","pos":[373958,374017]},{"content":"public boolean beginLabelEdit(int Idx, str text, AnyType data)","pos":[374130,374192]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[374412,374442],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the font weight that is used to display text in the control.","pos":[374522,374595]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[374694,374726],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the border for the control.","pos":[374804,374857]},{"content":"public container calcControlSize(int chars, int lines)","pos":[374976,375030]},{"content":"Retrieves the size of the control.","pos":[375086,375120]},{"content":"public boolean canScroll(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[375258,375301],"source":"public boolean canScroll(\\[boolean value\\])"},{"content":"public boolean cascadeSelect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[375540,375587],"source":"public boolean cascadeSelect(\\[boolean value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[375822,375860],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[375932,375975]},{"content":"public boolean checkBox(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[376104,376146],"source":"public boolean checkBox(\\[boolean value\\])"},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[376386,376423],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[376496,376541]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[376668,376740],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[376778,376845]},{"content":"public List configurationKeyEx()","pos":[376950,376982]},{"content":"Returns a list that contains the IDs of configuration keys that are in effect for the control.","pos":[377060,377154]},{"content":"public int copyItem(int Idx, int newParent, <ph id=\"ph1\">\\[</ph>int insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[377232,377296],"source":"public int copyItem(int Idx, int newParent, \\[int insertAfter\\])"},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[377514,377558],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[377624,377702]},{"content":"public Imagelist createDragImagelist()","pos":[377796,377834]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[378078,378120],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[378188,378313]},{"content":"public boolean delete(int Idx)","pos":[378360,378390]},{"content":"Deletes the specified item from the form tree control.","pos":[378470,378524]},{"content":"public boolean deleteAll()","pos":[378642,378668]},{"content":"Deletes all items from the form tree control.","pos":[378752,378797]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[378924,378963],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[379034,379233]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[379238,379272],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether drag-and-drop operations are enabled or disabled for the control.","pos":[379348,379432]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[379520,379601]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[379630,379724]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[379802,379879]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[379912,380008]},{"content":"public str dragText()","pos":[380084,380105]},{"content":"Returns the text that is displayed when the form tree control is dragged.","pos":[380194,380267]},{"content":"public boolean editLabels(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[380366,380410],"source":"public boolean editLabels(\\[boolean value\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[380648,380689],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether the object is enabled or disabled.","pos":[380758,380811]},{"content":"public int expand(int Idx, <ph id=\"ph1\">\\[</ph>FormTreeExpand action<ph id=\"ph2\">\\]</ph>)","pos":[380930,380983],"source":"public int expand(int Idx, \\[FormTreeExpand action\\])"},{"content":"public boolean expanding(int Idx, FormTreeExpand action, AnyType data)","pos":[381212,381282]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[381494,381524],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font that is used for the text in the control.","pos":[381604,381679]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[381776,381810],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the font size that is used for the text in the control.","pos":[381886,381954]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[382058,382099],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the color that is used for the text in the control.","pos":[382168,382232]},{"content":"public int getChild(int Idx)","pos":[382340,382368]},{"content":"public int getFirstSelected()","pos":[382622,382651]},{"content":"public int getFirstVisible()","pos":[382904,382932]},{"content":"public Imagelist getImagelist()","pos":[383186,383217]},{"content":"public FormTreeItem getItem(int Idx)","pos":[383468,383504]},{"content":"public int getNextSelected(int idx)","pos":[383750,383785]},{"content":"public int getNextSibling(int Idx)","pos":[384032,384066]},{"content":"public int getNextVisible(int Idx)","pos":[384314,384348]},{"content":"public int getParent(int Idx)","pos":[384596,384625]},{"content":"public int getPrevSelected(int idx)","pos":[384878,384913]},{"content":"public int getPrevSibling(int Idx)","pos":[385160,385194]},{"content":"public int getPrevVisible(int Idx)","pos":[385442,385476]},{"content":"public int getRoot()","pos":[385724,385744]},{"content":"public int getSelectedCount()","pos":[386006,386035]},{"content":"public int getSelection()","pos":[386288,386313]},{"content":"public Imagelist getStateImagelist()","pos":[386570,386606]},{"content":"public int getVisibleCount()","pos":[386852,386880]},{"content":"Returns the number of visible items in the tree control.","pos":[386962,387018]},{"content":"public boolean hasButtons(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[387134,387178],"source":"public boolean hasButtons(\\[boolean value\\])"},{"content":"Returns a value that indicates whether the tree control uses expand/collapse buttons.","pos":[387244,387329]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[387416,387458],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the tree control have changed.","pos":[387526,387619]},{"content":"public boolean hasLines(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[387698,387740],"source":"public boolean hasLines(\\[boolean value\\])"},{"content":"Returns a value that indicates whether the tree control displays tree connector lines.","pos":[387808,387894]},{"content":"public boolean hasUserSetting()","pos":[387980,388011]},{"content":"Indicates whether the control has custom user settings.","pos":[388090,388145]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[388262,388304],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[388372,388411]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[388544,388580],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[388654,388716]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[388826,388863],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[388936,388975]},{"content":"public str helpField()","pos":[389108,389130]},{"content":"Returns the Help text for the control.","pos":[389218,389256]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[389390,389424],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.","pos":[389500,389611]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[389672,389713],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[389782,389845]},{"content":"public container hitTest(int x, int y)","pos":[389954,389992]},{"content":"public int hWnd()","pos":[390236,390253]},{"content":"Returns the Windows handle for the control.","pos":[390346,390389]},{"content":"public boolean isContainer()","pos":[390518,390546]},{"content":"Returns a value that indicates whether the control is a container.","pos":[390628,390694]},{"content":"public boolean isDisplayed()","pos":[390800,390828]},{"content":"Returns a value that indicates whether the control is displayed.","pos":[390910,390974]},{"content":"public boolean isRestricted()","pos":[391082,391111]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[391192,391259]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[391364,391420]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[391474,391575]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[391646,391686],"source":"public boolean italic(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the text in the control is italic.","pos":[391756,391837]},{"content":"public boolean keyDown(int vKey, boolean Ctrl, boolean Shift)","pos":[391928,391989]},{"content":"public boolean leave()","pos":[392210,392232]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[392492,392532],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[392602,392666]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392774,392808],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[392884,392945]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393056,393091],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[393166,393230]},{"content":"public boolean linesAtRoot(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[393338,393383],"source":"public boolean linesAtRoot(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[393620,393667],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[393730,393783]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[393902,393981]},{"content":"Is called when the control is double-clicked by the user.","pos":[394012,394069]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[394184,394259]},{"content":"Is called when the user clicks while the mouse pointer is over the control.","pos":[394294,394369]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[394466,394541]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[394576,394641]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[394748,394821]},{"content":"Is called when the user releases the mouse button while the mouse pointer is over the control.","pos":[394858,394952]},{"content":"public int moveItem(int Idx, int newParent, <ph id=\"ph1\">\\[</ph>int insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[395030,395094],"source":"public int moveItem(int Idx, int newParent, \\[int insertAfter\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[395312,395342],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[395422,395575]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[395610,395652],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[395892,395931]},{"content":"public FormControl parentControl()","pos":[396174,396208]},{"content":"Retrieves the parent control for the control.","pos":[396284,396329]},{"content":"public boolean rowSelect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[396456,396499],"source":"public boolean rowSelect(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[396738,396795],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[396848,396907]},{"content":"public int select(int Idx)","pos":[397020,397046]},{"content":"public int selectEx(int Idx, boolean setSelection)","pos":[397302,397352]},{"content":"public boolean selectionChanging(FormTreeItem OldItem, FormTreeItem NewItem, FormTreeSelect how)","pos":[397584,397680]},{"content":"public int selectItems(int fromIdx, int toIdx)","pos":[397866,397912]},{"content":"public int selectSetFirstVisible(int Idx)","pos":[398148,398189]},{"content":"public boolean setInsertMark(int Idx, boolean After)","pos":[398430,398482]},{"content":"public boolean setItem(FormTreeItem item)","pos":[398712,398753]},{"content":"public int showContextMenu(int menuHandle)","pos":[398994,399036]},{"content":"Shows the shortcut menu for the control.","pos":[399104,399144]},{"content":"public boolean showSelAlways(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[399276,399323],"source":"public boolean showSelAlways(\\[boolean value\\])"},{"content":"public boolean singleSelection(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[399558,399607],"source":"public boolean singleSelection(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[399840,399878],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[399950,400077]},{"content":"public str toolTip()","pos":[400122,400142]},{"content":"Returns the tooltip text for the control.","pos":[400232,400273]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[400404,400443],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[400514,400576]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[400686,400719],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[400796,400855]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[400968,401002],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[401078,401140]},{"content":"public boolean trackSelect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[401250,401295],"source":"public boolean trackSelect(\\[boolean value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[401532,401562],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[401814,401857],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[402096,402147]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[402378,402412],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[402488,402531]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[402660,402698],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[402770,402818]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[402942,402981],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[403052,403111]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[403224,403261],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[403334,403417]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[403506,403542],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[403616,403668]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[403788,403822],"source":"public int userHide(\\[int value\\])"},{"content":"Returns or sets the value that indicates whether the form tree control is hidden from the user.","pos":[403898,403993]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[404070,404112],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[404180,404236]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[404352,404392],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[404462,404516]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[404634,404674],"source":"public str userPromptText(\\[str value\\])"},{"content":"Sets or retrieves the user prompt text for the control.","pos":[404744,404799]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[404916,404959],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[405026,405079]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[405198,405232],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[405308,405456]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[405480,405515],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[405590,405667]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[405762,405822],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[405872,405933]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[406044,406098],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[406154,406213]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[406326,406372],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[406436,406497]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[406608,406649],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[406718,406788]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[406890,406931],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[407000,407038]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[407172,407207],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode for the width of the control.","pos":[407282,407345]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[407454,407490],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[407564,407602]},{"content":"public void checkedStateChanged(int Idx, FormTreeCheckedState newState)","pos":[407736,407807]},{"content":"public void endLabelEdit(int Idx, str text, AnyType data)","pos":[408018,408075]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[408300,408373]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[408410,408508]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[408582,408659]},{"content":"Is called when the user moves the mouse pointer into the control.","pos":[408692,408757]},{"content":"private void OnExpanding(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[408864,408940],"source":"private void OnExpanding(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void cut()","pos":[409146,409163]},{"content":"Cuts the contents of the control.","pos":[409256,409289]},{"content":"public void paste()","pos":[409428,409447]},{"content":"Pastes the form tree control in the form.","pos":[409538,409579]},{"content":"public void resetUserSetting()","pos":[409710,409740]},{"content":"Resets the user settings for the control.","pos":[409820,409861]},{"content":"public void itemMoved(int OldIdx, int NewIdx)","pos":[409992,410037]},{"content":"public void expanded(int Idx, FormTreeExpand action, AnyType data)","pos":[410274,410340]},{"content":"public void setFocus()","pos":[410556,410578]},{"content":"Sets the focus on the control.","pos":[410666,410696]},{"content":"private void OnSelectionChanged(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[410838,410921],"source":"private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[411120,411196],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[411402,411471]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[411512,411612]},{"content":"public void mouseLeave()","pos":[411684,411708]},{"content":"Is called when the user moves the mouse pointer out of the control.","pos":[411794,411861]},{"content":"public void endDrag()","pos":[411966,411987]},{"content":"Is called when the user has finished dragging a form tree control.","pos":[412076,412142]},{"content":"public void context()","pos":[412248,412269]},{"content":"Shows the shortcut menu for the control.","pos":[412358,412398]},{"content":"public void itemCopy(int OldIdx, int NewIdx)","pos":[412530,412574]},{"content":"public void enter()","pos":[412812,412831]},{"content":"public void inputSearch(str searchStr)","pos":[413094,413132]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[413204,413275]},{"content":"public void displayControl()","pos":[413376,413404]},{"content":"Displays the control.","pos":[413486,413507]},{"content":"public void prefColumnSize(int width, int height)","pos":[413658,413707]},{"content":"Specifies the preferred column width and height for the form tree control.","pos":[413768,413842]},{"content":"public void setImagelist(Imagelist imageList)","pos":[413940,413985]},{"content":"private void OnExpanded(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[414222,414297],"source":"private void OnExpanded(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dragLeave()","pos":[414504,414527]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[414614,414710]},{"content":"public void lostFocus()","pos":[414786,414809]},{"content":"Indicates that the control has lost focus.","pos":[414896,414938]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[415068,415140],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void itemDeleted(int Idx, AnyType data)","pos":[415350,415396]},{"content":"public void gotFocus()","pos":[415632,415654]},{"content":"Indicates that the control has received focus.","pos":[415742,415788]},{"content":"public void setStateImagelist(Imagelist imageList)","pos":[415914,415964]},{"content":"public void endEditLabel(boolean cancel)","pos":[416196,416236]},{"content":"public void copy()","pos":[416478,416496]},{"content":"Copies the form tree control.","pos":[416588,416617]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[416760,416835],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[417042,417149],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[417324,417398],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void selectionChanged(FormTreeItem OldItem, FormTreeItem NewItem, FormTreeSelect how)","pos":[417606,417698]},{"content":"Indicates that the user has changed the selected item in the form tree control.","pos":[417716,417795]},{"content":"public void beginEditLabel(int Idx)","pos":[417888,417923]},{"pos":[418173,418183],"content":"Method add","linkify":"Method add","nodes":[{"content":"Method add","pos":[0,10]}]},{"pos":[418278,418288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parent","pos":[418290,418296]},{"content":"insertAfter","pos":[418310,418321]},{"content":"Text","pos":[418335,418339]},{"content":"image","pos":[418353,418358]},{"content":"children","pos":[418372,418380]},{"pos":[418389,418401],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[418407,418421],"content":"Method addItem","linkify":"Method addItem","nodes":[{"content":"Method addItem","pos":[0,14]}]},{"pos":[418500,418510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parent","pos":[418512,418518]},{"content":"insertAfter","pos":[418532,418543]},{"content":"item","pos":[418557,418561]},{"pos":[418570,418582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[418588,418607],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[418609,418649]},{"pos":[418706,418716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418718,418723]},{"content":"The new value for the property; optional.","pos":[418726,418767]},{"pos":[418774,418786],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[418788,418844]},{"pos":[418851,418858],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[418860,418939]},{"pos":[418945,418961],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can modify the contents of the control.","pos":[418963,419030]},{"pos":[419084,419094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419096,419101]},{"content":"The value to assign to the allowEdit property.","pos":[419104,419150]},{"pos":[419157,419169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be modified; otherwise, false.","pos":[419171,419225]},{"pos":[419232,419239],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[419241,419363]},{"pos":[419370,419378],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the value of the allowEdit property.","pos":[419380,419466]},{"pos":[419604,419624],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[419626,419709]},{"pos":[419752,419764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[419766,419834]},{"pos":[419840,419862],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[419864,419962]},{"pos":[420022,420032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420034,420039]},{"content":"The value to assign to the autoDeclaration property.","pos":[420042,420094]},{"pos":[420101,420113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[420115,420194]},{"pos":[420201,420208],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[420210,420247]},{"pos":[420253,420275],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[420277,420326]},{"pos":[420378,420388],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420390,420395]},{"content":"The value to assign as the background color of the control.","pos":[420398,420457]},{"pos":[420464,420476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[420478,420522]},{"pos":[420529,420536],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[420538,420606]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[420612,420682]},{"content":"The second byte contains a value for green.","pos":[420687,420730]},{"content":"The third byte contains a value for blue.","pos":[420735,420776]},{"content":"The high-order byte must be 0 (zero).","pos":[420781,420818]},{"content":"The maximum value for a single byte is 255.","pos":[420823,420866]},{"pos":[420873,420881],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the background color for a control.","pos":[420883,420968]},{"pos":[421181,421197],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[421199,421261]},{"pos":[421307,421317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421319,421324]},{"content":"The value to assign as the background style of the control.","pos":[421327,421386]},{"pos":[421393,421405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[421407,421468]},{"pos":[421475,421483],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the background style.","pos":[421485,421556]},{"pos":[421744,421760],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form tree control.","pos":[421762,421821]},{"pos":[421868,421878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[421880,421881]},{"content":"An Integer data type that indicates the y-coordinate of the mouse pointer.","pos":[421884,421958]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[421959,422026]},{"content":"y","pos":[422038,422039]},{"content":"An Integer data type that indicates the y-coordinate of the mouse pointer.","pos":[422042,422116]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[422117,422184]},{"pos":[422191,422203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[422205,422244]},{"pos":[422251,422258],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[422260,422341]},{"content":"To drag a control, the user presses the mouse button in the control area and then moves the mouse pointer.","pos":[422342,422448]},{"pos":[422455,422463],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example displays the x-coordinates and y-coordinates in the Infolog when the user starts to drag the form tree control.","pos":[422465,422598]},{"pos":[422791,422812],"content":"Method beginLabelEdit","linkify":"Method beginLabelEdit","nodes":[{"content":"Method beginLabelEdit","pos":[0,21]}]},{"pos":[422887,422897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[422899,422902]},{"content":"text","pos":[422916,422920]},{"content":"data","pos":[422934,422938]},{"pos":[422947,422959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422965,422976],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the font weight that is used to display text in the control.","pos":[422978,423051]},{"pos":[423092,423102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423104,423109]},{"content":"The value to assign to the bold setting for the control.","pos":[423112,423168]},{"pos":[423175,423187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between 0 (zero) and 9, inclusive.","pos":[423189,423240]},{"pos":[423247,423254],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[423256,423328]},{"content":"0 – Use the default font weight.","pos":[423334,423366]},{"content":"1 – Thin.","pos":[423371,423380]},{"content":"2 – Extra-light.","pos":[423385,423401]},{"content":"3 – Light.","pos":[423406,423416]},{"content":"4 – Normal.","pos":[423421,423432]},{"content":"5 – Medium.","pos":[423437,423448]},{"content":"6 – Semibold.","pos":[423453,423466]},{"content":"7 – Bold.","pos":[423471,423480]},{"content":"8 – Extra-bold.","pos":[423485,423500]},{"content":"9 – Heavy.","pos":[423505,423515]},{"pos":[423521,423534],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the border for the control.","pos":[423536,423589]},{"pos":[423632,423642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423644,423649]},{"content":"The value to assign as the border style for the control; optional.","pos":[423652,423718]},{"pos":[423725,423737],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between 0 (zero) and 4, inclusive.","pos":[423739,423784]},{"pos":[423791,423798],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the border for the control as follows.","pos":[423800,423889]},{"content":"Value","pos":[423893,423898]},{"content":"Description","pos":[423901,423912]},{"content":"0","pos":[423941,423942]},{"content":"Auto","pos":[423949,423953]},{"content":"1","pos":[423965,423966]},{"content":"3D","pos":[423973,423975]},{"content":"2","pos":[423989,423990]},{"content":"Single line","pos":[423997,424008]},{"content":"3","pos":[424013,424014]},{"content":"Flat","pos":[424021,424025]},{"content":"4","pos":[424037,424038]},{"content":"None","pos":[424045,424049]},{"pos":[424065,424073],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve and set the border style for a control.","pos":[424075,424158]},{"pos":[424299,424321],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[424323,424357]},{"pos":[424424,424434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[424436,424441]},{"content":"The number of lines to use to determine the height.","pos":[424444,424495]},{"content":"lines","pos":[424507,424512]},{"content":"The number of lines to use to determine the height.","pos":[424515,424566]},{"pos":[424573,424585],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[424587,424633]},{"pos":[424639,424655],"content":"Method canScroll","linkify":"Method canScroll","nodes":[{"content":"Method canScroll","pos":[0,16]}]},{"pos":[424709,424719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424721,424726]},{"pos":[424735,424747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424753,424773],"content":"Method cascadeSelect","linkify":"Method cascadeSelect","nodes":[{"content":"Method cascadeSelect","pos":[0,20]}]},{"pos":[424831,424841],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424843,424848]},{"pos":[424857,424869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424875,424894],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[424896,424939]},{"pos":[424988,424998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425000,425005]},{"pos":[425014,425026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[425028,425090]},{"pos":[425097,425104],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table.","pos":[425106,425210]},{"content":"Value","pos":[425214,425219]},{"content":"Description","pos":[425222,425233]},{"content":"0","pos":[425280,425281]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425288,425301],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[425313,425314]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425321,425337],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[425346,425347]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425354,425369],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[425379,425381]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425387,425399],"source":"MAC\\_CHARSET"},{"content":"128","pos":[425412,425415]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425420,425437],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[425445,425448]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425453,425468],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[425478,425481]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425486,425501],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[425511,425514]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425519,425539],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[425544,425547]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425552,425566],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[425577,425580]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425585,425601],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[425610,425613]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425618,425637],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[425643,425646]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425651,425666],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[425676,425679]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425684,425700],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[425709,425712]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425717,425736],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[425742,425745]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425750,425762],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[425774,425862]},{"content":"Value","pos":[425866,425871]},{"content":"Description","pos":[425874,425885]},{"content":"130","pos":[425920,425923]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[425928,425942],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[425946,426032]},{"content":"Value","pos":[426036,426041]},{"content":"Description","pos":[426044,426055]},{"content":"177","pos":[426092,426095]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[426100,426115],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[426120,426123]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[426128,426143],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[426147,426224]},{"content":"Value","pos":[426228,426233]},{"content":"Description","pos":[426236,426247]},{"content":"222","pos":[426280,426283]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[426288,426301],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[426305,426389]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[426390,426481],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[426482,426596]},{"pos":[426602,426617],"content":"Method checkBox","linkify":"Method checkBox","nodes":[{"content":"Method checkBox","pos":[0,15]}]},{"pos":[426670,426680],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426682,426687]},{"pos":[426696,426708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426714,426732],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[426734,426779]},{"pos":[426827,426837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426839,426844]},{"pos":[426853,426865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[426867,426910]},{"pos":[426917,426924],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[426926,426987]},{"content":"Value","pos":[426991,426996]},{"content":"Style","pos":[426999,427004]},{"content":"0","pos":[427059,427060]},{"content":"Default","pos":[427067,427074]},{"content":"1","pos":[427093,427094]},{"content":"The Windows palette","pos":[427101,427120]},{"content":"2","pos":[427127,427128]},{"content":"The true-color scheme","pos":[427135,427156]},{"pos":[427164,427187],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[427189,427256]},{"pos":[427339,427349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427351,427356]},{"content":"The ID of the configuration key to assign to the control.","pos":[427359,427416]},{"pos":[427423,427435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the configuration key that is assigned to the control.","pos":[427437,427501]},{"pos":[427508,427515],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[427517,427598]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[427599,427692]},{"pos":[427699,427707],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to set and retrieve the configuration key for a control.","pos":[427709,427797]},{"pos":[428375,428400],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Returns a list that contains the IDs of configuration keys that are in effect for the control.","pos":[428402,428496]},{"pos":[428541,428553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[428555,428641]},{"pos":[428648,428655],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[428657,428805]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[428806,428940]},{"content":"The list does not contain duplicate IDs.","pos":[428941,428981]},{"pos":[428988,428996],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the configuration key IDs for a control.","pos":[428998,429082]},{"pos":[429678,429693],"content":"Method copyItem","linkify":"Method copyItem","nodes":[{"content":"Method copyItem","pos":[0,15]}]},{"pos":[429768,429778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[429780,429783]},{"content":"newParent","pos":[429797,429806]},{"content":"insertAfter","pos":[429820,429831]},{"pos":[429840,429852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429858,429883],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[429885,429963]},{"pos":[430018,430028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[430030,430035]},{"content":"The string that contains the country/region codes to set; optional.","pos":[430038,430105]},{"pos":[430112,430124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[430126,430191]},{"pos":[430197,430223],"content":"Method createDragImagelist","linkify":"Method createDragImagelist","nodes":[{"content":"Method createDragImagelist","pos":[0,26]}]},{"pos":[430274,430286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[430292,430315],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[430317,430442]},{"pos":[430495,430505],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[430507,430512]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[430515,430589]},{"pos":[430596,430608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[430610,430722]},{"pos":[430729,430736],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[430738,430865]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[430866,430959]},{"pos":[430965,430978],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"content":"Deletes the specified item from the form tree control.","pos":[430980,431034]},{"pos":[431077,431087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[431089,431092]},{"content":"An integer that specifies the zero-based index of the item to delete.","pos":[431095,431164]},{"pos":[431171,431183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the item was successfully deleted; otherwise, false.","pos":[431185,431245]},{"pos":[431252,431260],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to delete the first item in the form tree control.","pos":[431262,431344]},{"pos":[431489,431505],"content":"Method deleteAll","linkify":"Method deleteAll","nodes":[{"content":"Method deleteAll","pos":[0,16]}]},{"content":"Deletes all items from the form tree control.","pos":[431507,431552]},{"pos":[431591,431603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if all items were successfully deleted; otherwise, false.","pos":[431605,431667]},{"pos":[431674,431682],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to delete all items from a form tree control.","pos":[431684,431761]},{"pos":[431907,431927],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[431929,432128]},{"pos":[432178,432188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432190,432195]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[432198,432272]},{"pos":[432279,432291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[432293,432437]},{"pos":[432443,432458],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether drag-and-drop operations are enabled or disabled for the control.","pos":[432460,432544]},{"pos":[432589,432599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432601,432606]},{"content":"An Integer data type that indicates whether drag-and-drop behavior is enabled.","pos":[432609,432687]},{"pos":[432694,432706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[432708,432768]},{"pos":[432775,432783],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return or set the value that indicates whether drag-and-drop behavior is enabled.","pos":[432785,432901]},{"pos":[433173,433188],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[433190,433284]},{"pos":[433378,433388],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[433390,433400]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[433403,433488]},{"content":"dragMode","pos":[433500,433508]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[433511,433596]},{"content":"x","pos":[433608,433609]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[433612,433697]},{"content":"y","pos":[433709,433710]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[433713,433798]},{"pos":[433805,433817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[433819,433884]},{"pos":[433890,433907],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[433909,434005]},{"pos":[434095,434105],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[434107,434117]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[434120,434205]},{"content":"dragMode","pos":[434217,434225]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[434228,434313]},{"content":"x","pos":[434325,434326]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[434329,434414]},{"content":"y","pos":[434426,434427]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[434430,434515]},{"pos":[434522,434534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[434536,434601]},{"pos":[434607,434622],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Returns the text that is displayed when the form tree control is dragged.","pos":[434624,434697]},{"pos":[434731,434743],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the tree control is dragged; an empty string if there is no text to display when the tree control is dragged.","pos":[434745,434886]},{"pos":[434892,434909],"content":"Method editLabels","linkify":"Method editLabels","nodes":[{"content":"Method editLabels","pos":[0,17]}]},{"pos":[434964,434974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[434976,434981]},{"pos":[434990,435002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[435008,435022],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether the object is enabled or disabled.","pos":[435024,435077]},{"pos":[435129,435139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[435141,435146]},{"content":"A Boolean value that specifies whether the control is enabled.","pos":[435149,435211]},{"pos":[435218,435230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[435232,435280]},{"pos":[435287,435294],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property lets you enable or disable controls at run time.","pos":[435296,435365]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[435366,435461]},{"content":"You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.","pos":[435462,435594]},{"pos":[435601,435609],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the enabled property for a control.","pos":[435611,435696]},{"pos":[435861,435874],"content":"Method expand","linkify":"Method expand","nodes":[{"content":"Method expand","pos":[0,13]}]},{"pos":[435938,435948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[435950,435953]},{"content":"action","pos":[435967,435973]},{"pos":[435982,435994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[436000,436016],"content":"Method expanding","linkify":"Method expanding","nodes":[{"content":"Method expanding","pos":[0,16]}]},{"pos":[436099,436109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[436111,436114]},{"content":"action","pos":[436128,436134]},{"content":"data","pos":[436148,436152]},{"pos":[436161,436173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[436179,436190],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font that is used for the text in the control.","pos":[436192,436267]},{"pos":[436308,436318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[436320,436325]},{"content":"A string value that indicates the font to use for the text in a form tree control.","pos":[436328,436410]},{"pos":[436417,436429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[436431,436486]},{"pos":[436493,436501],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the font for a form tree control.","pos":[436503,436586]},{"pos":[436814,436829],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the font size that is used for the text in the control.","pos":[436831,436899]},{"pos":[436944,436954],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[436956,436961]},{"content":"An Integer data type that indicates the font size, in points, for the text in a form tree control.","pos":[436964,437062]},{"pos":[437069,437081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[437083,437116]},{"pos":[437123,437131],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the font size for a control.","pos":[437133,437211]},{"pos":[437429,437451],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the color that is used for the text in the control.","pos":[437453,437517]},{"pos":[437569,437579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437581,437586]},{"pos":[437595,437607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[437609,437653]},{"pos":[437660,437667],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[437669,437737]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[437743,437813]},{"content":"The second byte contains a value for green.","pos":[437818,437861]},{"content":"The third byte contains a value for blue.","pos":[437866,437907]},{"content":"The high-order byte must be 0 (zero).","pos":[437912,437949]},{"content":"The maximum value for a single byte is 255.","pos":[437954,437997]},{"pos":[438003,438018],"content":"Method getChild","linkify":"Method getChild","nodes":[{"content":"Method getChild","pos":[0,15]}]},{"pos":[438059,438069],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[438071,438074]},{"pos":[438083,438095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438101,438124],"content":"Method getFirstSelected","linkify":"Method getFirstSelected","nodes":[{"content":"Method getFirstSelected","pos":[0,23]}]},{"pos":[438166,438178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438184,438206],"content":"Method getFirstVisible","linkify":"Method getFirstVisible","nodes":[{"content":"Method getFirstVisible","pos":[0,22]}]},{"pos":[438247,438259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438265,438284],"content":"Method getImagelist","linkify":"Method getImagelist","nodes":[{"content":"Method getImagelist","pos":[0,19]}]},{"pos":[438328,438340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438346,438360],"content":"Method getItem","linkify":"Method getItem","nodes":[{"content":"Method getItem","pos":[0,14]}]},{"pos":[438409,438419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[438421,438424]},{"pos":[438433,438445],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438451,438473],"content":"Method getNextSelected","linkify":"Method getNextSelected","nodes":[{"content":"Method getNextSelected","pos":[0,22]}]},{"pos":[438521,438531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"idx","pos":[438533,438536]},{"pos":[438545,438557],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438563,438584],"content":"Method getNextSibling","linkify":"Method getNextSibling","nodes":[{"content":"Method getNextSibling","pos":[0,21]}]},{"pos":[438631,438641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[438643,438646]},{"pos":[438655,438667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438673,438694],"content":"Method getNextVisible","linkify":"Method getNextVisible","nodes":[{"content":"Method getNextVisible","pos":[0,21]}]},{"pos":[438741,438751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[438753,438756]},{"pos":[438765,438777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438783,438799],"content":"Method getParent","linkify":"Method getParent","nodes":[{"content":"Method getParent","pos":[0,16]}]},{"pos":[438841,438851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[438853,438856]},{"pos":[438865,438877],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438883,438905],"content":"Method getPrevSelected","linkify":"Method getPrevSelected","nodes":[{"content":"Method getPrevSelected","pos":[0,22]}]},{"pos":[438953,438963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"idx","pos":[438965,438968]},{"pos":[438977,438989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438995,439016],"content":"Method getPrevSibling","linkify":"Method getPrevSibling","nodes":[{"content":"Method getPrevSibling","pos":[0,21]}]},{"pos":[439063,439073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[439075,439078]},{"pos":[439087,439099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439105,439126],"content":"Method getPrevVisible","linkify":"Method getPrevVisible","nodes":[{"content":"Method getPrevVisible","pos":[0,21]}]},{"pos":[439173,439183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[439185,439188]},{"pos":[439197,439209],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439215,439229],"content":"Method getRoot","linkify":"Method getRoot","nodes":[{"content":"Method getRoot","pos":[0,14]}]},{"pos":[439262,439274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439280,439303],"content":"Method getSelectedCount","linkify":"Method getSelectedCount","nodes":[{"content":"Method getSelectedCount","pos":[0,23]}]},{"pos":[439345,439357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439363,439382],"content":"Method getSelection","linkify":"Method getSelection","nodes":[{"content":"Method getSelection","pos":[0,19]}]},{"pos":[439420,439432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439438,439462],"content":"Method getStateImagelist","linkify":"Method getStateImagelist","nodes":[{"content":"Method getStateImagelist","pos":[0,24]}]},{"pos":[439511,439523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439529,439551],"content":"Method getVisibleCount","linkify":"Method getVisibleCount","nodes":[{"content":"Method getVisibleCount","pos":[0,22]}]},{"content":"Returns the number of visible items in the tree control.","pos":[439553,439609]},{"pos":[439650,439662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of visibile items in the tree control.","pos":[439664,439713]},{"pos":[439720,439728],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the number of visible items in the tree control.","pos":[439730,439822]},{"pos":[439943,439960],"content":"Method hasButtons","linkify":"Method hasButtons","nodes":[{"content":"Method hasButtons","pos":[0,17]}]},{"content":"Returns a value that indicates whether the tree control uses expand/collapse buttons.","pos":[439962,440047]},{"pos":[440102,440112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440114,440119]},{"pos":[440128,440140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the tree control uses expand/collapse buttons; otherwise, false.","pos":[440142,440214]},{"pos":[440221,440229],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the value that indicates whether the tree control uses expand/collapse buttons.","pos":[440231,440354]},{"pos":[440554,440571],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the tree control have changed.","pos":[440573,440666]},{"pos":[440719,440729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[440731,440734]},{"content":"The value to assign as the hasChanged value for the tree control.","pos":[440737,440802]},{"pos":[440809,440821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the tree control have changed; otherwise, false.","pos":[440823,440895]},{"pos":[440902,440910],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the value that indicates whether the contents of the tree control have changed.","pos":[440912,441041]},{"pos":[441304,441319],"content":"Method hasLines","linkify":"Method hasLines","nodes":[{"content":"Method hasLines","pos":[0,15]}]},{"content":"Returns a value that indicates whether the tree control displays tree connector lines.","pos":[441321,441407]},{"pos":[441460,441470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[441472,441477]},{"pos":[441486,441498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the tree control displays tree connector lines; otherwise, false.","pos":[441500,441573]},{"pos":[441580,441588],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the value that indicates whether the tree control displays tree connector lines.","pos":[441590,441714]},{"pos":[441903,441924],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[441926,441981]},{"pos":[442025,442037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[442039,442102]},{"pos":[442108,442121],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[442123,442162]},{"pos":[442215,442225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[442227,442232]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[442235,442310]},{"content":"This can be one of the following values:","pos":[442311,442351]},{"content":"mode","pos":[442363,442367]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[442370,442445]},{"content":"This can be one of the following values:","pos":[442446,442486]},{"pos":[442493,442505],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[442507,442543]},{"pos":[442550,442557],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[442559,442612]},{"content":"Calculate the height according to the following table.","pos":[442613,442667]},{"content":"Mode","pos":[442671,442675]},{"content":"Height calculation","pos":[442691,442709]},{"content":"-1 – Exact","pos":[442901,442911]},{"content":"The exact height of the control in pixels is used.","pos":[442921,442971]},{"content":"0 – Auto","pos":[443016,443024]},{"content":"The height of the control is calculated automatically, and the value parameter is ignored.","pos":[443036,443126]},{"content":"1 – Column height","pos":[443131,443148]},{"content":"The layout of the form determines the height of the control.","pos":[443151,443211]},{"content":"The height and the height calculation mode can be set separately.","pos":[443245,443310]},{"pos":[443316,443333],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[443335,443397]},{"pos":[443444,443454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[443456,443461]},{"content":"An Integer data type value that indicates how the height of the control is calculated.","pos":[443464,443550]},{"content":"This value can be -1 for Exact mode, 0 for Auto mode, or 1 for Column height mode.","pos":[443551,443633]},{"pos":[443640,443652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height calculation mode.","pos":[443654,443682]},{"pos":[443689,443696],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[443698,443752]},{"content":"Mode","pos":[443756,443760]},{"content":"Height calculation","pos":[443772,443790]},{"content":"Exact","pos":[443978,443983]},{"content":"The exact height of the control in pixels is used.","pos":[443994,444044]},{"content":"Auto","pos":[444089,444093]},{"content":"The height of the control is calculated automatically, and the value parameter is ignored.","pos":[444105,444195]},{"content":"Column height","pos":[444200,444213]},{"content":"The layout of the form determines the height of the control.","pos":[444216,444276]},{"content":"The height of the control might change when the calculation mode is set to Auto or Column height.","pos":[444310,444407]},{"pos":[444414,444422],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the height calculation mode for a form tree control.","pos":[444424,444526]},{"pos":[444831,444849],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[444851,444890]},{"pos":[444938,444948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444950,444955]},{"content":"An Integer data type that specifies the height in pixels.","pos":[444958,445015]},{"pos":[445022,445034],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[445036,445057]},{"pos":[445064,445071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the Exact height calculation mode is used.","pos":[445073,445163]},{"pos":[445170,445178],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the height value of a form tree control.","pos":[445180,445270]},{"pos":[445549,445565],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Returns the Help text for the control.","pos":[445567,445605]},{"pos":[445640,445652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[445654,445742]},{"pos":[445749,445756],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[445758,445828]},{"content":"Use the helpText method to set the value of the Help text.","pos":[445829,445887]},{"pos":[445894,445902],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to use the helpField method.","pos":[445904,445964]},{"pos":[446021,446036],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.","pos":[446038,446149]},{"pos":[446194,446204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446206,446211]},{"content":"The value to assign as the Help text for the control.","pos":[446214,446267]},{"pos":[446274,446286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is displayed at the bottom of the screen.","pos":[446288,446345]},{"pos":[446352,446359],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[446361,446429]},{"content":"The Help text must not exceed 250 characters.","pos":[446430,446475]},{"pos":[446482,446490],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to set and return the Help text for a control.","pos":[446492,446570]},{"pos":[446767,446789],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[446791,446854]},{"pos":[446906,446916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446918,446923]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[446926,446993]},{"pos":[447000,447012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[447014,447064]},{"pos":[447070,447084],"content":"Method hitTest","linkify":"Method hitTest","nodes":[{"content":"Method hitTest","pos":[0,14]}]},{"pos":[447135,447145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[447147,447148]},{"content":"y","pos":[447162,447163]},{"pos":[447172,447184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[447190,447201],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Returns the Windows handle for the control.","pos":[447203,447246]},{"pos":[447276,447288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[447290,447317]},{"pos":[447324,447331],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[447333,447377]},{"pos":[447384,447392],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the Windows handle for a control.","pos":[447394,447471]},{"pos":[447546,447564],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Returns a value that indicates whether the control is a container.","pos":[447566,447632]},{"pos":[447673,447685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is a container; otherwise false.","pos":[447687,447739]},{"pos":[447746,447754],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to determine whether a control is a container.","pos":[447756,447834]},{"pos":[447898,447916],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Returns a value that indicates whether the control is displayed.","pos":[447918,447982]},{"pos":[448023,448035],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[448037,448088]},{"pos":[448095,448102],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[448104,448172]},{"pos":[448179,448187],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to determine whether a control is visible.","pos":[448189,448263]},{"pos":[448327,448346],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[448348,448415]},{"pos":[448457,448469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[448471,448523]},{"pos":[448529,448554],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[448556,448657]},{"pos":[448726,448736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[448738,448755]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[448758,448886]},{"pos":[448893,448905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[448907,449066]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[449067,449256]},{"pos":[449263,449270],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[449272,449349]},{"content":"FormAllowUserSetup::No 0","pos":[449689,449713]},{"content":"No changes can be made to the control.","pos":[449724,449762]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[449763,449852]},{"content":"FormAllowUserSetup::Restricted 1","pos":[449857,449889]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[449892,449984]},{"content":"The user cannot move the control.","pos":[449985,450018]},{"content":"FormAllowUserSetup::Yes 2","pos":[450025,450050]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[450060,450152]},{"content":"The user can also move the control.","pos":[450153,450188]},{"pos":[450197,450205],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to determine the user setup rights for a control.","pos":[450207,450288]},{"pos":[450902,450915],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"content":"Sets or returns a value that indicates whether the text in the control is italic.","pos":[450917,450998]},{"pos":[451049,451059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[451061,451066]},{"content":"The value to assign to the italic setting for the control.","pos":[451069,451127]},{"pos":[451134,451146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is italic; otherwise, false.","pos":[451148,451208]},{"pos":[451214,451228],"content":"Method keyDown","linkify":"Method keyDown","nodes":[{"content":"Method keyDown","pos":[0,14]}]},{"pos":[451302,451312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"vKey","pos":[451314,451318]},{"content":"Ctrl","pos":[451332,451336]},{"content":"Shift","pos":[451350,451355]},{"pos":[451364,451376],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[451382,451394],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[451429,451441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[451447,451458],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[451460,451524]},{"pos":[451575,451585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[451587,451592]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[451595,451681]},{"content":"mode","pos":[451693,451697]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[451700,451786]},{"pos":[451793,451805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[451807,451858]},{"pos":[451864,451879],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[451881,451942]},{"pos":[451987,451997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[451999,452004]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[452007,452093]},{"pos":[452100,452112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[452114,452170]},{"pos":[452176,452192],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[452194,452258]},{"pos":[452304,452314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[452316,452321]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[452324,452405]},{"pos":[452412,452424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[452426,452477]},{"pos":[452483,452501],"content":"Method linesAtRoot","linkify":"Method linesAtRoot","nodes":[{"content":"Method linesAtRoot","pos":[0,18]}]},{"pos":[452557,452567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[452569,452574]},{"pos":[452583,452595],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[452601,452621],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[452623,452676]},{"pos":[452734,452744],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[452746,452751]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[452754,452848]},{"pos":[452855,452867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[452869,452942]},{"pos":[452948,452968],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[452970,453027]},{"pos":[453119,453129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[453131,453132]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[453135,453196]},{"content":"y","pos":[453208,453209]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[453212,453273]},{"content":"button","pos":[453285,453291]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[453294,453355]},{"content":"Ctrl","pos":[453367,453371]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[453374,453435]},{"content":"Shift","pos":[453447,453452]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[453455,453516]},{"pos":[453523,453535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[453537,453576]},{"pos":[453583,453590],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[453592,453696]},{"pos":[453703,453711],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a mouseDblClick event in the Infolog.","pos":[453713,453811]},{"pos":[454379,454395],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks while the mouse pointer is over the control.","pos":[454397,454472]},{"pos":[454560,454570],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[454572,454573]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[454576,454637]},{"content":"y","pos":[454649,454650]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[454653,454714]},{"content":"button","pos":[454726,454732]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[454735,454796]},{"content":"Ctrl","pos":[454808,454812]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[454815,454876]},{"content":"Shift","pos":[454888,454893]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[454896,454957]},{"pos":[454964,454976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[454978,455017]},{"pos":[455024,455031],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[455033,455137]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[455138,455273]},{"pos":[455280,455288],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a mouseDown event in the Infolog.","pos":[455290,455384]},{"pos":[455968,455984],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[455986,456051]},{"pos":[456139,456149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[456151,456152]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[456155,456216]},{"content":"y","pos":[456228,456229]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[456232,456293]},{"content":"button","pos":[456305,456311]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[456314,456375]},{"content":"Ctrl","pos":[456387,456391]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[456394,456455]},{"content":"Shift","pos":[456467,456472]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[456475,456536]},{"pos":[456543,456555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[456557,456596]},{"pos":[456603,456610],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[456612,456716]},{"pos":[456723,456731],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a mouseMove event in the Infolog.","pos":[456733,456827]},{"pos":[457375,457389],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button while the mouse pointer is over the control.","pos":[457391,457485]},{"pos":[457571,457581],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[457583,457584]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[457587,457648]},{"content":"y","pos":[457660,457661]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[457664,457725]},{"content":"button","pos":[457737,457743]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[457746,457807]},{"content":"Ctrl","pos":[457819,457823]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[457826,457887]},{"content":"Shift","pos":[457899,457904]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[457907,457968]},{"pos":[457975,457987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[457989,458028]},{"pos":[458035,458042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[458044,458148]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[458149,458284]},{"pos":[458291,458299],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a mouseUp event in the Infolog.","pos":[458301,458393]},{"pos":[458931,458946],"content":"Method moveItem","linkify":"Method moveItem","nodes":[{"content":"Method moveItem","pos":[0,15]}]},{"pos":[459021,459031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[459033,459036]},{"content":"newParent","pos":[459050,459059]},{"content":"insertAfter","pos":[459073,459084]},{"pos":[459093,459105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[459111,459122],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[459124,459277]},{"pos":[459318,459328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[459330,459335]},{"content":"The name to assign to the control.","pos":[459338,459372]},{"pos":[459379,459391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[459393,459457]},{"pos":[459464,459471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[459473,459567]},{"content":"Begins with a letter.","pos":[459573,459594]},{"content":"Doesn't exceed 250 characters.","pos":[459599,459629]},{"content":"Can include numbers and underscore characters.","pos":[459634,459680]},{"content":"Cannot include punctuation or spaces.","pos":[459685,459722]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.","pos":[459727,459857]},{"pos":[459863,459886],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[459939,459949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[459951,459956]},{"pos":[459965,459977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[459983,460010],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[460062,460074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[460080,460100],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[460102,460147]},{"pos":[460194,460206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[460208,460243]},{"pos":[460249,460265],"content":"Method rowSelect","linkify":"Method rowSelect","nodes":[{"content":"Method rowSelect","pos":[0,16]}]},{"pos":[460319,460329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[460331,460336]},{"pos":[460345,460357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[460363,460381],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[460383,460442]},{"pos":[460510,460520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[460522,460527]},{"content":"The ID of the security key to assign to the control.","pos":[460530,460582]},{"pos":[460589,460601],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[460603,460702]},{"pos":[460709,460717],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve and assign a security key ID for a control.","pos":[460719,460806]},{"pos":[461346,461359],"content":"Method select","linkify":"Method select","nodes":[{"content":"Method select","pos":[0,13]}]},{"pos":[461398,461408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[461410,461413]},{"pos":[461422,461434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[461440,461455],"content":"Method selectEx","linkify":"Method selectEx","nodes":[{"content":"Method selectEx","pos":[0,15]}]},{"pos":[461518,461528],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[461530,461533]},{"content":"setSelection","pos":[461547,461559]},{"pos":[461568,461580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[461586,461610],"content":"Method selectionChanging","linkify":"Method selectionChanging","nodes":[{"content":"Method selectionChanging","pos":[0,24]}]},{"pos":[461719,461729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"OldItem","pos":[461731,461738]},{"content":"NewItem","pos":[461752,461759]},{"content":"how","pos":[461773,461776]},{"pos":[461785,461797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[461803,461821],"content":"Method selectItems","linkify":"Method selectItems","nodes":[{"content":"Method selectItems","pos":[0,18]}]},{"pos":[461880,461890],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fromIdx","pos":[461892,461899]},{"content":"toIdx","pos":[461913,461918]},{"pos":[461927,461939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[461945,461973],"content":"Method selectSetFirstVisible","linkify":"Method selectSetFirstVisible","nodes":[{"content":"Method selectSetFirstVisible","pos":[0,28]}]},{"pos":[462027,462037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[462039,462042]},{"pos":[462051,462063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[462069,462089],"content":"Method setInsertMark","linkify":"Method setInsertMark","nodes":[{"content":"Method setInsertMark","pos":[0,20]}]},{"pos":[462154,462164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[462166,462169]},{"content":"After","pos":[462183,462188]},{"pos":[462197,462209],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[462215,462229],"content":"Method setItem","linkify":"Method setItem","nodes":[{"content":"Method setItem","pos":[0,14]}]},{"pos":[462283,462293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"item","pos":[462295,462299]},{"pos":[462308,462320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[462326,462348],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[462350,462390]},{"pos":[462445,462455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[462457,462467]},{"content":"The ID of the menu to show.","pos":[462470,462497]},{"pos":[462504,462516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[462518,462577]},{"pos":[462583,462603],"content":"Method showSelAlways","linkify":"Method showSelAlways","nodes":[{"content":"Method showSelAlways","pos":[0,20]}]},{"pos":[462661,462671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[462673,462678]},{"pos":[462687,462699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[462705,462727],"content":"Method singleSelection","linkify":"Method singleSelection","nodes":[{"content":"Method singleSelection","pos":[0,22]}]},{"pos":[462787,462797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[462799,462804]},{"pos":[462813,462825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[462831,462842],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[462844,462971]},{"pos":[463020,463030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[463032,463037]},{"content":"The value to assign to the skip property of the control.","pos":[463040,463096]},{"pos":[463103,463115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[463117,463223]},{"pos":[463230,463237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[463239,463434]},{"pos":[463441,463449],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following shows how to return and set the skip property of a control.","pos":[463451,463524]},{"pos":[463687,463701],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Returns the tooltip text for the control.","pos":[463703,463744]},{"pos":[463777,463789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[463791,463893]},{"pos":[463900,463907],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method can be overridden to provide a value to the toolTip method.","pos":[463909,463979]},{"pos":[463986,463994],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to override the toolTip method.","pos":[463996,464059]},{"pos":[464168,464178],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[464180,464242]},{"pos":[464292,464302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[464304,464309]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[464312,464396]},{"content":"mode","pos":[464408,464412]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[464415,464499]},{"pos":[464506,464518],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[464520,464569]},{"pos":[464575,464589],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[464591,464650]},{"pos":[464694,464704],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[464706,464711]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[464714,464798]},{"pos":[464805,464817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[464819,464873]},{"pos":[464879,464894],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[464896,464958]},{"pos":[465003,465013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[465015,465020]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[465023,465102]},{"pos":[465109,465121],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[465123,465172]},{"pos":[465178,465196],"content":"Method trackSelect","linkify":"Method trackSelect","nodes":[{"content":"Method trackSelect","pos":[0,18]}]},{"pos":[465252,465262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[465264,465269]},{"pos":[465278,465290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[465296,465307],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[465348,465358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[465360,465365]},{"pos":[465374,465386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[465392,465408],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[465462,465472],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[465474,465479]},{"pos":[465488,465500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[465506,465533],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[465597,465607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[465609,465613]},{"pos":[465622,465634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[465640,465655],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[465657,465700]},{"pos":[465745,465755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[465757,465762]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[465765,465837]},{"pos":[465844,465856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[465858,465888]},{"pos":[465894,465913],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[465915,465963]},{"pos":[466012,466022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[466024,466029]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[466032,466109]},{"pos":[466116,466128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[466130,466165]},{"pos":[466171,466191],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[466193,466252]},{"pos":[466302,466312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[466314,466319]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[466322,466410]},{"pos":[466417,466429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[466431,466477]},{"pos":[466483,466501],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[466503,466586]},{"pos":[466634,466644],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[466646,466651]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[466654,466734]},{"pos":[466741,466753],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[466755,466811]},{"pos":[466817,466834],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[466836,466888]},{"pos":[466935,466945],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[466947,466952]},{"content":"The user height for the control; optional.","pos":[466955,466997]},{"pos":[467004,467016],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[467018,467057]},{"pos":[467063,467078],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Returns or sets the value that indicates whether the form tree control is hidden from the user.","pos":[467080,467175]},{"pos":[467220,467230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[467232,467237]},{"content":"The value that indicates whether the form tree control is hidden from the user.","pos":[467240,467319]},{"pos":[467326,467338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the tree control is hidden from the user; otherwise, 0.","pos":[467340,467400]},{"pos":[467407,467414],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[467416,467586]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[467587,467662]},{"content":"This method lets you programmatically determine and set the value.","pos":[467663,467729]},{"pos":[467736,467744],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the value that specifies whether the form tree control is hidden from the user.","pos":[467746,467875]},{"pos":[468119,468142],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[468144,468200]},{"pos":[468253,468263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[468265,468270]},{"content":"The organization container to set for the control; optional.","pos":[468273,468333]},{"pos":[468340,468352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[468354,468397]},{"pos":[468403,468424],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[468426,468480]},{"pos":[468531,468541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[468543,468548]},{"content":"The organization sibling to set for the control; optional.","pos":[468551,468609]},{"pos":[468616,468628],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[468630,468671]},{"pos":[468677,468698],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Sets or retrieves the user prompt text for the control.","pos":[468700,468755]},{"pos":[468806,468816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[468818,468823]},{"content":"The value to assign as the user prompt text for the control.","pos":[468826,468886]},{"pos":[468893,468905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user prompt text for the control; an empty string if no user prompt text is assigned to the control.","pos":[468907,469011]},{"pos":[469017,469041],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[469043,469096]},{"pos":[469150,469160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[469162,469167]},{"content":"The user security level to set for the control; optional.","pos":[469170,469227]},{"pos":[469234,469246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[469248,469288]},{"pos":[469294,469309],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[469311,469459]},{"pos":[469504,469514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[469516,469521]},{"content":"The value to assign to the userSkip property.","pos":[469524,469569]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[469570,469665]},{"pos":[469672,469684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[469686,469755]},{"pos":[469762,469770],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the userSkip property.","pos":[469772,469844]},{"pos":[470085,470101],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[470103,470180]},{"pos":[470226,470236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[470238,470243]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[470246,470312]},{"pos":[470319,470331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[470333,470462]},{"pos":[470469,470476],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[470478,470572]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[470573,470689],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[470690,470840]},{"pos":[470847,470855],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the user width of a form tree control.","pos":[470857,470945]},{"pos":[471198,471220],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[471222,471283]},{"pos":[471352,471362],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[471364,471369]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[471372,471449]},{"content":"mode","pos":[471461,471465]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[471468,471545]},{"pos":[471552,471564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[471566,471614]},{"pos":[471620,471646],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[471648,471707]},{"pos":[471772,471782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[471784,471788]},{"pos":[471797,471809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[471811,471865]},{"pos":[471871,471898],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[471900,471961]},{"pos":[472018,472028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[472030,472035]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[472038,472116]},{"pos":[472123,472135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[472137,472185]},{"pos":[472191,472205],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[472207,472277]},{"pos":[472329,472339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[472341,472346]},{"content":"The value to assign to the visibility setting for the control.","pos":[472349,472411]},{"pos":[472418,472430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[472432,472481]},{"pos":[472487,472499],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[472501,472539]},{"pos":[472591,472601],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[472603,472608]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[472611,472675]},{"content":"mode","pos":[472687,472691]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[472694,472758]},{"pos":[472765,472777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[472779,472814]},{"pos":[472821,472828],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[472830,472883]},{"content":"Calculate the width according to the following table.","pos":[472884,472937]},{"content":"Mode","pos":[472941,472945]},{"content":"Width calculation","pos":[472960,472977]},{"content":"-1 – Exact","pos":[473167,473177]},{"content":"The exact width of the control in pixels is used.","pos":[473186,473235]},{"content":"0 – Auto","pos":[473280,473288]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[473299,473388]},{"content":"1 – Column width","pos":[473393,473409]},{"content":"The layout of the form determines the width of the control.","pos":[473412,473471]},{"content":"The width and the width calculation mode can be set separately.","pos":[473505,473568]},{"pos":[473574,473590],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode for the width of the control.","pos":[473592,473655]},{"pos":[473701,473711],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[473713,473718]},{"content":"An Integer data type value that indicates how control width is calculated.","pos":[473721,473795]},{"content":"This value can be -1 for Exact mode, 0 for Auto mode, or 1 for Column width mode.","pos":[473796,473877]},{"pos":[473884,473896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current width calculation mode.","pos":[473898,473965]},{"pos":[473972,473979],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[473981,474034]},{"content":"Mode","pos":[474038,474042]},{"content":"Width calculation","pos":[474053,474070]},{"content":"Exact","pos":[474256,474261]},{"content":"The exact width of the control in pixels is used.","pos":[474271,474320]},{"content":"Auto","pos":[474365,474369]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[474380,474469]},{"content":"Column width","pos":[474474,474486]},{"content":"The layout of the form determines the width of the control.","pos":[474489,474548]},{"content":"The width of the control might change when the calculation mode is set to Auto or Column width.","pos":[474582,474677]},{"pos":[474684,474692],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the width calculation mode for a form tree control.","pos":[474694,474795]},{"pos":[475083,475100],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[475102,475140]},{"pos":[475187,475197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[475199,475204]},{"content":"An Integer data type that specifies the width in pixels.","pos":[475207,475263]},{"pos":[475270,475282],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[475284,475319]},{"pos":[475326,475333],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the Exact width calculation mode.","pos":[475335,475408]},{"pos":[475415,475423],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the width value of a form tree control.","pos":[475425,475514]},{"pos":[475783,475809],"content":"Method checkedStateChanged","linkify":"Method checkedStateChanged","nodes":[{"content":"Method checkedStateChanged","pos":[0,26]}]},{"pos":[475893,475903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[475905,475908]},{"content":"newState","pos":[475922,475930]},{"pos":[475938,475957],"content":"Method endLabelEdit","linkify":"Method endLabelEdit","nodes":[{"content":"Method endLabelEdit","pos":[0,19]}]},{"pos":[476027,476037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[476039,476042]},{"content":"text","pos":[476056,476060]},{"content":"data","pos":[476074,476078]},{"pos":[476086,476097],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[476099,476197]},{"pos":[476283,476293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[476295,476305]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[476308,476393]},{"content":"dragMode","pos":[476405,476413]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[476416,476501]},{"content":"x","pos":[476513,476514]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[476517,476602]},{"content":"y","pos":[476614,476615]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[476618,476703]},{"pos":[476709,476726],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control.","pos":[476728,476793]},{"pos":[476883,476893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[476895,476896]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[476899,476960]},{"content":"y","pos":[476972,476973]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[476976,477037]},{"content":"button","pos":[477049,477055]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[477058,477119]},{"content":"Ctrl","pos":[477131,477135]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[477138,477199]},{"content":"Shift","pos":[477211,477216]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[477219,477280]},{"pos":[477287,477294],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[477296,477400]},{"pos":[477406,477424],"content":"Method OnExpanding","linkify":"Method OnExpanding","nodes":[{"content":"Method OnExpanding","pos":[0,18]}]},{"pos":[477509,477519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[477521,477527]},{"content":"e","pos":[477541,477542]},{"pos":[477550,477560],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[477562,477595]},{"pos":[477624,477636],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the form tree control in the form.","pos":[477638,477679]},{"pos":[477710,477733],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[477735,477776]},{"pos":[477818,477834],"content":"Method itemMoved","linkify":"Method itemMoved","nodes":[{"content":"Method itemMoved","pos":[0,16]}]},{"pos":[477892,477902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"OldIdx","pos":[477904,477910]},{"content":"NewIdx","pos":[477924,477930]},{"pos":[477938,477953],"content":"Method expanded","linkify":"Method expanded","nodes":[{"content":"Method expanded","pos":[0,15]}]},{"pos":[478032,478042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[478044,478047]},{"content":"action","pos":[478061,478067]},{"content":"data","pos":[478081,478085]},{"pos":[478093,478108],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[478110,478140]},{"pos":[478174,478199],"content":"Method OnSelectionChanged","linkify":"Method OnSelectionChanged","nodes":[{"content":"Method OnSelectionChanged","pos":[0,25]}]},{"pos":[478291,478301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[478303,478309]},{"content":"e","pos":[478323,478324]},{"pos":[478332,478350],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[478435,478445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[478447,478453]},{"content":"e","pos":[478467,478468]},{"pos":[478476,478489],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[478491,478591]},{"pos":[478673,478683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[478685,478695]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[478698,478783]},{"content":"dragMode","pos":[478795,478803]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[478806,478891]},{"content":"x","pos":[478903,478904]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[478907,478992]},{"content":"y","pos":[479004,479005]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[479008,479093]},{"pos":[479099,479116],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer out of the control.","pos":[479118,479185]},{"pos":[479222,479230],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example writes to the Infolog when the mouse pointer leaves the control area.","pos":[479232,479323]},{"pos":[479467,479481],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form tree control.","pos":[479483,479549]},{"pos":[479583,479590],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[479592,479720]},{"content":"To drag a control, the user presses the mouse button in the control area and then moves the mouse pointer.","pos":[479721,479827]},{"pos":[479834,479842],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example displays a message in the Infolog when the user has finished dragging the form tree control.","pos":[479844,479958]},{"pos":[480059,480073],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[480075,480115]},{"pos":[480148,480163],"content":"Method itemCopy","linkify":"Method itemCopy","nodes":[{"content":"Method itemCopy","pos":[0,15]}]},{"pos":[480220,480230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"OldIdx","pos":[480232,480238]},{"content":"NewIdx","pos":[480252,480258]},{"pos":[480266,480278],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[480309,480327],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[480329,480400]},{"pos":[480451,480461],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[480463,480472]},{"content":"The string value to use to filter data; optional.","pos":[480475,480524]},{"pos":[480530,480551],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[480553,480574]},{"pos":[480614,480635],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form tree control.","pos":[480637,480711]},{"pos":[480773,480783],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[480785,480790]},{"content":"The preferred height of the control measures in pixels.","pos":[480793,480848]},{"content":"height","pos":[480860,480866]},{"content":"The preferred height of the control measures in pixels.","pos":[480869,480924]},{"pos":[480931,480939],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to set the preferred width and height of a form tree control.","pos":[480941,481034]},{"pos":[481262,481281],"content":"Method setImagelist","linkify":"Method setImagelist","nodes":[{"content":"Method setImagelist","pos":[0,19]}]},{"pos":[481339,481349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"imageList","pos":[481351,481360]},{"pos":[481368,481385],"content":"Method OnExpanded","linkify":"Method OnExpanded","nodes":[{"content":"Method OnExpanded","pos":[0,17]}]},{"pos":[481469,481479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[481481,481487]},{"content":"e","pos":[481501,481502]},{"pos":[481510,481526],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[481528,481624]},{"pos":[481659,481675],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[481677,481719]},{"pos":[481754,481768],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[481849,481859],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[481861,481867]},{"content":"e","pos":[481881,481882]},{"pos":[481890,481908],"content":"Method itemDeleted","linkify":"Method itemDeleted","nodes":[{"content":"Method itemDeleted","pos":[0,18]}]},{"pos":[481967,481977],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[481979,481982]},{"content":"data","pos":[481996,482000]},{"pos":[482008,482023],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[482025,482071]},{"pos":[482105,482129],"content":"Method setStateImagelist","linkify":"Method setStateImagelist","nodes":[{"content":"Method setStateImagelist","pos":[0,24]}]},{"pos":[482192,482202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"imageList","pos":[482204,482213]},{"pos":[482221,482240],"content":"Method endEditLabel","linkify":"Method endEditLabel","nodes":[{"content":"Method endEditLabel","pos":[0,19]}]},{"pos":[482293,482303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cancel","pos":[482305,482311]},{"pos":[482319,482330],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the form tree control.","pos":[482332,482361]},{"pos":[482391,482408],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[482492,482502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[482504,482510]},{"content":"e","pos":[482524,482525]},{"pos":[482533,482562],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[482680,482690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[482692,482708]},{"content":"objectMethodToCall","pos":[482722,482740]},{"content":"overrideObject","pos":[482754,482768]},{"pos":[482776,482792],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[482875,482885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[482887,482893]},{"content":"e","pos":[482907,482908]},{"pos":[482916,482939],"content":"Method selectionChanged","linkify":"Method selectionChanged","nodes":[{"content":"Method selectionChanged","pos":[0,23]}]},{"content":"Indicates that the user has changed the selected item in the form tree control.","pos":[482941,483020]},{"pos":[483125,483135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"OldItem","pos":[483137,483144]},{"content":"The value that indicates how the item that is specified by the <ph id=\"ph1\">\\_</ph>NewItem parameter was selected.","pos":[483147,483243],"source":"The value that indicates how the item that is specified by the \\_NewItem parameter was selected."},{"content":"NewItem","pos":[483255,483262]},{"content":"The value that indicates how the item that is specified by the <ph id=\"ph1\">\\_</ph>NewItem parameter was selected.","pos":[483265,483361],"source":"The value that indicates how the item that is specified by the \\_NewItem parameter was selected."},{"content":"how","pos":[483373,483376]},{"content":"The value that indicates how the item that is specified by the <ph id=\"ph1\">\\_</ph>NewItem parameter was selected.","pos":[483379,483475],"source":"The value that indicates how the item that is specified by the \\_NewItem parameter was selected."},{"pos":[483481,483502],"content":"Method beginEditLabel","linkify":"Method beginEditLabel","nodes":[{"content":"Method beginEditLabel","pos":[0,21]}]},{"pos":[483550,483560],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[483562,483565]},{"pos":[483572,483590],"content":"Class FormTreeItem","linkify":"Class FormTreeItem","nodes":[{"content":"Class FormTreeItem","pos":[0,18]}]},{"pos":[483634,483641],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[483647,483655],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[483661,483668],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[483672,483678]},{"content":"Description","pos":[483755,483766]},{"content":"public int children(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[483996,484030],"source":"public int children(\\[int value\\])"},{"content":"public AnyType data(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[484158,484196],"source":"public AnyType data(\\[AnyType value\\])"},{"content":"public int idx()","pos":[484320,484336]},{"content":"public int image(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[484482,484513],"source":"public int image(\\[int value\\])"},{"content":"public int overlayImage(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[484644,484682],"source":"public int overlayImage(\\[int value\\])"},{"content":"public int selectedImage(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[484806,484845],"source":"public int selectedImage(\\[int value\\])"},{"content":"public boolean stateBold(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[484968,485011],"source":"public boolean stateBold(\\[boolean value\\])"},{"content":"public FormTreeCheckedState stateChecked(<ph id=\"ph1\">\\[</ph>FormTreeCheckedState value<ph id=\"ph2\">\\]</ph>)","pos":[485130,485202],"source":"public FormTreeCheckedState stateChecked(\\[FormTreeCheckedState value\\])"},{"content":"public boolean stateCut(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[485292,485334],"source":"public boolean stateCut(\\[boolean value\\])"},{"content":"public boolean stateDropHilited(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[485454,485504],"source":"public boolean stateDropHilited(\\[boolean value\\])"},{"content":"public boolean stateExpanded(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[485616,485663],"source":"public boolean stateExpanded(\\[boolean value\\])"},{"content":"public boolean stateExpandedOnce(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[485778,485829],"source":"public boolean stateExpandedOnce(\\[boolean value\\])"},{"content":"public int stateImage(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[485940,485976],"source":"public int stateImage(\\[int value\\])"},{"content":"public boolean stateSelected(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[486102,486149],"source":"public boolean stateSelected(\\[boolean value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[486264,486294],"source":"public str text(\\[str value\\])"},{"content":"Sets or returns the text for the control.","pos":[486347,486388]},{"content":"public str toString()","pos":[486426,486447]},{"content":"Returns a string representation of the instance of the FormTreeItem class.","pos":[486509,486583]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>str Text<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int Image<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int children<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>AnyType Data<ph id=\"ph8\">\\]</ph>)","pos":[486588,486668],"source":"public void new(\\[str Text\\], \\[int Image\\], \\[int children\\], \\[AnyType Data\\])"},{"content":"Initializes a new instance of the Object class.","pos":[486671,486718]},{"content":"public void finalize()","pos":[486750,486772]},{"pos":[486915,486930],"content":"Method children","linkify":"Method children","nodes":[{"content":"Method children","pos":[0,15]}]},{"pos":[486975,486985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[486987,486992]},{"pos":[487001,487013],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487019,487030],"content":"Method data","linkify":"Method data","nodes":[{"content":"Method data","pos":[0,11]}]},{"pos":[487079,487089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487091,487096]},{"pos":[487105,487117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487123,487133],"content":"Method idx","linkify":"Method idx","nodes":[{"content":"Method idx","pos":[0,10]}]},{"pos":[487162,487174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487180,487192],"content":"Method image","linkify":"Method image","nodes":[{"content":"Method image","pos":[0,12]}]},{"pos":[487234,487244],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487246,487251]},{"pos":[487260,487272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487278,487297],"content":"Method overlayImage","linkify":"Method overlayImage","nodes":[{"content":"Method overlayImage","pos":[0,19]}]},{"pos":[487346,487356],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487358,487363]},{"pos":[487372,487384],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487390,487410],"content":"Method selectedImage","linkify":"Method selectedImage","nodes":[{"content":"Method selectedImage","pos":[0,20]}]},{"pos":[487460,487470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487472,487477]},{"pos":[487486,487498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487504,487520],"content":"Method stateBold","linkify":"Method stateBold","nodes":[{"content":"Method stateBold","pos":[0,16]}]},{"pos":[487574,487584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487586,487591]},{"pos":[487600,487612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487618,487637],"content":"Method stateChecked","linkify":"Method stateChecked","nodes":[{"content":"Method stateChecked","pos":[0,19]}]},{"pos":[487720,487730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487732,487737]},{"pos":[487746,487758],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487764,487779],"content":"Method stateCut","linkify":"Method stateCut","nodes":[{"content":"Method stateCut","pos":[0,15]}]},{"pos":[487832,487842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487844,487849]},{"pos":[487858,487870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487876,487899],"content":"Method stateDropHilited","linkify":"Method stateDropHilited","nodes":[{"content":"Method stateDropHilited","pos":[0,23]}]},{"pos":[487960,487970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487972,487977]},{"pos":[487986,487998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[488004,488024],"content":"Method stateExpanded","linkify":"Method stateExpanded","nodes":[{"content":"Method stateExpanded","pos":[0,20]}]},{"pos":[488082,488092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488094,488099]},{"pos":[488108,488120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[488126,488150],"content":"Method stateExpandedOnce","linkify":"Method stateExpandedOnce","nodes":[{"content":"Method stateExpandedOnce","pos":[0,24]}]},{"pos":[488212,488222],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488224,488229]},{"pos":[488238,488250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[488256,488273],"content":"Method stateImage","linkify":"Method stateImage","nodes":[{"content":"Method stateImage","pos":[0,17]}]},{"pos":[488320,488330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488332,488337]},{"pos":[488346,488358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[488364,488384],"content":"Method stateSelected","linkify":"Method stateSelected","nodes":[{"content":"Method stateSelected","pos":[0,20]}]},{"pos":[488442,488452],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488454,488459]},{"pos":[488468,488480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[488486,488497],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"content":"Sets or returns the text for the control.","pos":[488499,488540]},{"pos":[488581,488591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488593,488598]},{"content":"The value to assign as the text for the control; optional.","pos":[488601,488659]},{"pos":[488666,488678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text for the control; an empty string if no text has been assigned to the control.","pos":[488680,488766]},{"pos":[488772,488787],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string representation of the instance of the FormTreeItem class.","pos":[488789,488863]},{"pos":[488897,488909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains a description of the instance of the FormTreeItem class.","pos":[488911,488990]},{"pos":[488997,489004],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation returns the class name of the object.","pos":[489006,489070]},{"content":"The method can be overridden in a derived class to return values that are meaningful for that type.","pos":[489071,489170]},{"pos":[489177,489185],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to use the toString method.","pos":[489187,489246]},{"pos":[489291,489301],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[489303,489350]},{"pos":[489435,489445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Text","pos":[489447,489451]},{"content":"Image","pos":[489465,489470]},{"content":"children","pos":[489484,489492]},{"content":"Data","pos":[489506,489510]},{"pos":[489518,489533],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[489566,489589],"content":"Class FormWindowControl","linkify":"Class FormWindowControl","nodes":[{"content":"Class FormWindowControl","pos":[0,23]}]},{"pos":[489643,489650],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[489656,489664],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[489670,489677],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[489681,489687]},{"content":"Description","pos":[489810,489821]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[490283,490329],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[490412,490452]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[490584,490627],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[490713,490780]},{"content":"public boolean allowSysSetup()","pos":[490885,490915]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[491014,491097]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[491186,491235],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[491315,491413]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[491487,491528],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[491616,491665]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[491788,491823],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[491917,491978]},{"content":"public int beginDrag(int x, int y)","pos":[492089,492123]},{"content":"Is called when the user starts to drag a form control.","pos":[492218,492272]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[492390,492431],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[492691,492745]},{"content":"Retrieves the size of the control.","pos":[492820,492854]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[492992,493029],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[493121,493166]},{"content":"public int command(int wParam, int lParam)","pos":[493293,493335]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[493594,493666],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[493723,493790]},{"content":"public List configurationKeyEx()","pos":[493895,493927]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[494024,494120]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[494196,494240],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[494325,494403]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[494497,494556],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[494798,494841],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[495099,495135],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[495400,495442],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[495529,495654]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[495701,495741],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[495830,495902]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[496002,496041],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[496131,496330]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[496335,496369],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[496464,496545]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[496636,496717]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[496765,496859]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[496937,497014]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[497066,497162]},{"content":"public str dragText()","pos":[497238,497259]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[497367,497437]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[497539,497580],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[497668,497719]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[497840,497881],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[497969,498020]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[498141,498183],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[498270,498358]},{"content":"public boolean hasUserSetting()","pos":[498442,498473]},{"content":"Indicates whether the control has custom user settings.","pos":[498571,498626]},{"content":"public int hDC()","pos":[498743,498759]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[499044,499086],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[499173,499212]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[499345,499381],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[499474,499536]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[499646,499683],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[499775,499814]},{"content":"public str helpField()","pos":[499947,499969]},{"content":"Retrieves the Help text for the control.","pos":[500076,500116]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[500248,500282],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[500377,500481]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[500549,500590],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[500678,500741]},{"content":"public int hWnd()","pos":[500850,500867]},{"content":"Retrieves the Windows handle for the control.","pos":[500979,501024]},{"content":"public Image image(<ph id=\"ph1\">\\[</ph>Image value<ph id=\"ph2\">\\]</ph>)","pos":[501151,501186],"source":"public Image image(\\[Image value\\])"},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[501452,501491],"source":"public int imageLocation(\\[int value\\])"},{"content":"public Imagelist imageList(<ph id=\"ph1\">\\[</ph>Imagelist value<ph id=\"ph2\">\\]</ph>)","pos":[501753,501800],"source":"public Imagelist imageList(\\[Imagelist value\\])"},{"content":"public int imagemode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[502054,502089],"source":"public int imagemode(\\[int value\\])"},{"content":"public str imageName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[502355,502390],"source":"public str imageName(\\[str value\\])"},{"content":"public int imageResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[502656,502695],"source":"public int imageResource(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[502957,502985]},{"content":"public boolean isDisplayed()","pos":[503258,503286]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[503387,503453]},{"content":"public boolean isRestricted()","pos":[503559,503588]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[503688,503755]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[503860,503916]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[503989,504090]},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[504161,504192],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[504290,504327]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[504462,504502],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[504763,504798],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[505064,505107],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[505365,505400],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[505666,505705],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[505967,506013],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[506268,506304],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[506569,506616],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[506870,506911],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[507171,507213],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[507472,507517],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[507773,507857]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[508074,508154]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[508375,508453]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[508676,508715],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[508977,509025],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[509278,509324],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[509579,509619],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[509880,509921],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[510181,510203]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[510482,510522],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[510611,510675]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[510783,510817],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[510912,510973]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[511084,511119],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[511213,511277]},{"content":"public str location(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[511385,511419],"source":"public str location(\\[str value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[511686,511733],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[511815,511868]},{"content":"public boolean modified()","pos":[511987,512012]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[512288,512367]},{"content":"Is called when the control is double-clicked by the user.","pos":[512417,512474]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[512589,512664]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[512718,512783]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[512890,512965]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[513019,513084]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[513191,513264]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[513320,513392]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[513492,513522],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[513621,513774]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[513809,513851],"source":"public int neededPermission(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[514110,514147],"source":"public str normalImage(\\[str value\\])"},{"content":"public int onHScroll(int pos)","pos":[514411,514440]},{"content":"public int onVScroll(int pos)","pos":[514712,514741]},{"content":"public container SysObsoleteAttribute()","pos":[515013,515052]},{"content":"public int paint()","pos":[515314,515332]},{"content":"public FormControl parentControl()","pos":[515615,515649]},{"content":"Retrieves the parent control for the control.","pos":[515744,515789]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[515916,515956],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[516217,516253],"source":"public int promptrect(\\[int value\\])"},{"content":"public int scrollInfo(int VertScroller, <ph id=\"ph1\">\\[</ph>int Pos<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int PageDelta<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int MoveDelta<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>int MinLimit<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>int MaxLimit<ph id=\"ph10\">\\]</ph>)","pos":[516518,516644],"source":"public int scrollInfo(int VertScroller, \\[int Pos\\], \\[int PageDelta\\], \\[int MoveDelta\\], \\[int MinLimit\\], \\[int MaxLimit\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[516819,516876],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[516948,517007]},{"content":"public int showContextMenu(int menuHandle)","pos":[517120,517162]},{"content":"Shows the shortcut menu for the control.","pos":[517249,517289]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[517421,517464],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[517722,517760],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[517851,517978]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[518023,518067],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public str toolTip()","pos":[518324,518344]},{"content":"Retrieves the tooltip text for the control.","pos":[518453,518496]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[518625,518664],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[518754,518816]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[518926,518959],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[519055,519114]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[519227,519261],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[519356,519418]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[519528,519558],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[519829,519880]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[520130,520164],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[520259,520302]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[520431,520469],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[520560,520608]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[520732,520771],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[520861,520920]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[521033,521070],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[521162,521245]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[521334,521370],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[521463,521515]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[521635,521669],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[521764,521846]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[521936,521978],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[522065,522121]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[522237,522277],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[522366,522420]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[522538,522578],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[522667,522716]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[522839,522882],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[522968,523021]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[523140,523174],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[523269,523417]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[523441,523476],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[523570,523647]},{"content":"public boolean validate()","pos":[523742,523767]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[524043,524103],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[524172,524233]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[524344,524398],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[524473,524532]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[524645,524691],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[524774,524835]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[524946,524987],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[525075,525145]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[525247,525288],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[525376,525414]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[525548,525583],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[525677,525739]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[525849,525885],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[525978,526016]},{"content":"public void lostFocus()","pos":[526150,526173]},{"content":"Indicates that the control has lost focus.","pos":[526279,526321]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[526451,526558],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[526752,526829]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[526881,526951]},{"content":"public void dragLeave()","pos":[527053,527076]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[527182,527278]},{"content":"public void gotFocus()","pos":[527354,527376]},{"content":"Indicates that the control has received focus.","pos":[527483,527529]},{"content":"public void context()","pos":[527655,527676]},{"content":"Shows the shortcut menu for the control.","pos":[527784,527824]},{"content":"public void lockDC()","pos":[527956,527976]},{"content":"public void enter()","pos":[528257,528276]},{"content":"public void endDrag()","pos":[528558,528579]},{"content":"Is called when the user has finished dragging a form control.","pos":[528687,528748]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[528859,528936],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[529160,529232],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setDirty(<ph id=\"ph1\">\\[</ph>int x<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int y<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int width<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>int height<ph id=\"ph8\">\\]</ph>)","pos":[529461,529534],"source":"public void setDirty(\\[int x\\], \\[int y\\], \\[int width\\], \\[int height\\])"},{"content":"public void resetUserSetting()","pos":[529762,529792]},{"content":"Resets the user settings for the control.","pos":[529891,529932]},{"content":"private void OnClicked(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[530063,530137],"source":"private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[530364,530437],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[530665,530702],"source":"public void filter(\\[str filterStr\\])"},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[530966,531041],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[531267,531343],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void size(int width, int height)","pos":[531568,531607]},{"content":"public void dropFile(str FileName)","pos":[531869,531903]},{"content":"public void cut()","pos":[532170,532187]},{"content":"Cuts the contents of the control.","pos":[532299,532332]},{"content":"public void lookup()","pos":[532471,532491]},{"content":"public void setFocus()","pos":[532772,532794]},{"content":"Sets the focus on the control.","pos":[532901,532931]},{"content":"public void undo()","pos":[533073,533091]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[533374,533448],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void jumpRef()","pos":[533675,533696]},{"content":"public void setScrollInfo()","pos":[533976,534003]},{"content":"public void paste()","pos":[534277,534296]},{"content":"Pastes the contents of the clipboard into the control.","pos":[534406,534460]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[534578,534653],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void clicked()","pos":[534879,534900]},{"content":"public void inputSearch(str searchStr)","pos":[535180,535218]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[535309,535380]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[535481,535557],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseLeave()","pos":[535782,535806]},{"content":"Indicates that the mouse pointer has left the control.","pos":[535911,535965]},{"content":"public void copy()","pos":[536083,536101]},{"content":"Copies the contents of the control to the clipboard.","pos":[536212,536264]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[536384,536457]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[536513,536611]},{"content":"public void displayControl()","pos":[536685,536713]},{"content":"Displays the control.","pos":[536814,536835]},{"content":"public void unlockDC()","pos":[536986,537008]},{"content":"public void prefColumnSize(int width, int height)","pos":[537287,537336]},{"content":"Specifies the preferred column width and height for the form control.","pos":[537416,537485]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[537588,537657]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[537717,537817]},{"pos":[537892,537911],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[537913,537953]},{"pos":[538010,538020],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[538022,538027]},{"pos":[538036,538048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[538050,538106]},{"pos":[538113,538120],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[538122,538201]},{"pos":[538207,538223],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[538225,538292]},{"pos":[538346,538356],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[538358,538363]},{"pos":[538372,538384],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[538386,538438]},{"pos":[538445,538452],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[538454,538576]},{"pos":[538582,538602],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[538604,538687]},{"pos":[538730,538742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[538744,538812]},{"pos":[538818,538840],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[538842,538940]},{"pos":[539000,539010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[539012,539017]},{"pos":[539026,539038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[539040,539119]},{"pos":[539126,539133],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[539135,539172]},{"pos":[539178,539200],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[539202,539251]},{"pos":[539303,539313],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[539315,539320]},{"pos":[539329,539341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[539343,539387]},{"pos":[539394,539401],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[539403,539471]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[539477,539547]},{"content":"The second byte contains a value for green.","pos":[539552,539595]},{"content":"The third byte contains a value for blue.","pos":[539600,539641]},{"content":"The high-order byte must be zero.","pos":[539646,539679]},{"content":"The maximum value for a single byte is 255.","pos":[539684,539727]},{"pos":[539733,539749],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[539751,539812]},{"pos":[539858,539868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[539870,539875]},{"pos":[539884,539896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[539898,539959]},{"pos":[539965,539981],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[539983,540037]},{"pos":[540084,540094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[540096,540097]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[540100,540170]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[540171,540238]},{"content":"y","pos":[540250,540251]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[540254,540324]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[540325,540392]},{"pos":[540399,540411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[540413,540452]},{"pos":[540459,540466],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[540468,540549]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[540550,540654]},{"pos":[540660,540682],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[540734,540744],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[540746,540751]},{"pos":[540760,540772],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[540778,540800],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[540802,540836]},{"pos":[540903,540913],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[540915,540920]},{"content":"The number of lines to use to determine the height.","pos":[540923,540974]},{"content":"lines","pos":[540986,540991]},{"content":"The number of lines to use to determine the height.","pos":[540994,541045]},{"pos":[541052,541064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[541066,541112]},{"pos":[541118,541136],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[541138,541183]},{"pos":[541231,541241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[541243,541248]},{"pos":[541257,541269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[541271,541314]},{"pos":[541321,541328],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[541330,541391]},{"content":"Value","pos":[541395,541400]},{"content":"Style","pos":[541403,541408]},{"content":"0","pos":[541477,541478]},{"content":"Default","pos":[541485,541492]},{"content":"1","pos":[541518,541519]},{"content":"The MicrosoftWindows palette","pos":[541526,541554]},{"content":"2","pos":[541559,541560]},{"content":"The true-color scheme","pos":[541567,541588]},{"pos":[541603,541617],"content":"Method command","linkify":"Method command","nodes":[{"content":"Method command","pos":[0,14]}]},{"pos":[541672,541682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"wParam","pos":[541684,541690]},{"content":"lParam","pos":[541704,541710]},{"pos":[541719,541731],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[541737,541760],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[541762,541829]},{"pos":[541912,541922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[541924,541929]},{"pos":[541938,541950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[541952,542024]},{"pos":[542031,542038],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[542040,542121]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[542122,542215]},{"pos":[542221,542246],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[542248,542344]},{"pos":[542389,542401],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[542403,542489]},{"pos":[542496,542503],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[542505,542554]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[542555,542703]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[542704,542838]},{"pos":[542844,542869],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[542871,542949]},{"pos":[543004,543014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[543016,543021]},{"content":"The string that contains the country/region codes to set; optional.","pos":[543024,543091]},{"pos":[543098,543110],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[543112,543177]},{"pos":[543183,543215],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[543285,543295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[543297,543302]},{"pos":[543311,543323],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[543329,543345],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[543399,543409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[543411,543416]},{"pos":[543425,543437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[543443,543460],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[543507,543517],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[543519,543524]},{"pos":[543533,543545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[543551,543574],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[543576,543701]},{"pos":[543754,543764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[543766,543771]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[543774,543848]},{"pos":[543855,543867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[543869,543981]},{"pos":[543988,543995],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[543997,544124]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[544125,544218]},{"pos":[544224,544241],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[544243,544315]},{"pos":[544366,544376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[544378,544383]},{"pos":[544392,544404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[544406,544458]},{"pos":[544464,544484],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[544486,544685]},{"pos":[544735,544745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[544747,544752]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[544755,544829]},{"pos":[544836,544848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[544850,544994]},{"pos":[545000,545015],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[545017,545098]},{"pos":[545143,545153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[545155,545160]},{"pos":[545169,545181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[545183,545243]},{"pos":[545249,545264],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[545266,545360]},{"pos":[545454,545464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[545466,545476]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[545479,545564]},{"content":"dragMode","pos":[545576,545584]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[545587,545672]},{"content":"x","pos":[545684,545685]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[545688,545773]},{"content":"y","pos":[545785,545786]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[545789,545874]},{"pos":[545881,545893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[545895,545960]},{"pos":[545966,545983],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[545985,546081]},{"pos":[546171,546181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[546183,546193]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[546196,546281]},{"content":"dragMode","pos":[546293,546301]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[546304,546389]},{"content":"x","pos":[546401,546402]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[546405,546490]},{"content":"y","pos":[546502,546503]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[546506,546591]},{"pos":[546598,546610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[546612,546677]},{"pos":[546683,546698],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[546700,546770]},{"pos":[546804,546816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[546818,546949]},{"pos":[546955,546969],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[546971,547022]},{"pos":[547074,547084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[547086,547091]},{"pos":[547100,547112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[547114,547162]},{"pos":[547169,547176],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property gives for controls to be enabled or disabled at run time.","pos":[547178,547256]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[547257,547352]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[547353,547487]},{"pos":[547493,547515],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[547517,547568]},{"pos":[547620,547630],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[547632,547637]},{"pos":[547646,547658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[547660,547704]},{"pos":[547711,547718],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[547720,547788]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[547794,547864]},{"content":"The second byte contains a value for green.","pos":[547869,547912]},{"content":"The third byte contains a value for blue.","pos":[547917,547958]},{"content":"The high-order byte must be zero.","pos":[547963,547996]},{"content":"The maximum value for a single byte is 255.","pos":[548001,548044]},{"pos":[548050,548067],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[548069,548157]},{"pos":[548210,548220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[548222,548225]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[548228,548298]},{"pos":[548305,548317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[548319,548386]},{"pos":[548392,548413],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[548415,548470]},{"pos":[548514,548526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[548528,548591]},{"pos":[548597,548607],"content":"Method hDC","linkify":"Method hDC","nodes":[{"content":"Method hDC","pos":[0,10]}]},{"pos":[548636,548648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[548654,548667],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[548669,548708]},{"pos":[548761,548771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[548773,548778]},{"content":"mode","pos":[548792,548796]},{"pos":[548805,548817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[548819,548855]},{"pos":[548862,548869],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[548871,548924]},{"content":"Calculate the height according to the following table.","pos":[548925,548979]},{"content":"Mode","pos":[548983,548987]},{"content":"Height calculation","pos":[549001,549019]},{"content":"-1 Exact","pos":[549207,549215]},{"content":"The exact height in pixels of the controls is used.","pos":[549225,549276]},{"content":"0 Auto","pos":[549319,549325]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[549337,549426]},{"content":"1 Column height","pos":[549431,549446]},{"content":"The layout of the form determines the height of the control.","pos":[549449,549509]},{"content":"The height and height calculation mode can be set separately.","pos":[549542,549603]},{"pos":[549609,549626],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[549628,549690]},{"pos":[549737,549747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[549749,549754]},{"pos":[549763,549775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[549777,549798]},{"pos":[549805,549812],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[549814,549868]},{"content":"Mode","pos":[549872,549876]},{"content":"Height calculation","pos":[549888,549906]},{"content":"Exact","pos":[550092,550097]},{"content":"The exact height in pixels of the controls is used.","pos":[550108,550159]},{"content":"Auto","pos":[550202,550206]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[550218,550307]},{"content":"Column height","pos":[550312,550325]},{"content":"The layout of the form determines the height of the control.","pos":[550328,550388]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[550421,550506]},{"pos":[550512,550530],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[550532,550571]},{"pos":[550619,550629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[550631,550636]},{"pos":[550645,550657],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[550659,550680]},{"pos":[550687,550694],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[550696,550786]},{"pos":[550792,550808],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[550810,550850]},{"pos":[550885,550897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[550899,550987]},{"pos":[550994,551001],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[551003,551073]},{"content":"Use the helpText method to set the value of the Help text.","pos":[551074,551132]},{"pos":[551138,551153],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[551155,551259]},{"pos":[551304,551314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[551316,551321]},{"pos":[551330,551342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[551344,551399]},{"pos":[551406,551413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[551415,551483]},{"content":"The Help text must not exceed 250 characters.","pos":[551484,551529]},{"pos":[551535,551557],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[551559,551622]},{"pos":[551674,551684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[551686,551691]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[551694,551761]},{"pos":[551768,551780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[551782,551832]},{"pos":[551838,551849],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[551851,551896]},{"pos":[551926,551938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[551940,551967]},{"pos":[551974,551981],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[551983,552027]},{"pos":[552033,552045],"content":"Method image","linkify":"Method image","nodes":[{"content":"Method image","pos":[0,12]}]},{"pos":[552091,552101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[552103,552108]},{"pos":[552117,552129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552135,552155],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[552205,552215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[552217,552222]},{"pos":[552231,552243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552249,552265],"content":"Method imageList","linkify":"Method imageList","nodes":[{"content":"Method imageList","pos":[0,16]}]},{"pos":[552323,552333],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[552335,552340]},{"pos":[552349,552361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552367,552383],"content":"Method imagemode","linkify":"Method imagemode","nodes":[{"content":"Method imagemode","pos":[0,16]}]},{"pos":[552429,552439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[552441,552446]},{"pos":[552455,552467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552473,552489],"content":"Method imageName","linkify":"Method imageName","nodes":[{"content":"Method imageName","pos":[0,16]}]},{"pos":[552535,552545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[552547,552552]},{"pos":[552561,552573],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552579,552599],"content":"Method imageResource","linkify":"Method imageResource","nodes":[{"content":"Method imageResource","pos":[0,20]}]},{"pos":[552649,552659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[552661,552666]},{"pos":[552675,552687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552693,552711],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[552752,552764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[552770,552788],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[552790,552856]},{"pos":[552897,552909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[552911,552962]},{"pos":[552969,552976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[552978,553046]},{"pos":[553052,553071],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[553073,553140]},{"pos":[553182,553194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[553196,553248]},{"pos":[553254,553279],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[553281,553382]},{"pos":[553451,553461],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[553463,553480]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[553483,553611]},{"pos":[553618,553630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[553632,553791]},{"pos":[553798,553805],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[553807,553884]},{"content":"FormAllowUserSetup::No 0","pos":[554224,554248]},{"content":"No changes can be made to the control.","pos":[554259,554297]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[554298,554387]},{"content":"FormAllowUserSetup::Restricted 1","pos":[554392,554424]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[554427,554519]},{"content":"The user cannot move the control.","pos":[554520,554553]},{"content":"FormAllowUserSetup::Yes 2","pos":[554560,554585]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[554595,554687]},{"content":"The user can also move the control.","pos":[554688,554723]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[554727,554916]},{"pos":[554922,554934],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[554936,554973]},{"pos":[555015,555025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555027,555032]},{"pos":[555041,555053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[555055,555093]},{"pos":[555100,555107],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[555109,555187]},{"content":"The label property value cannot exceed 250 characters.","pos":[555188,555242]},{"pos":[555248,555269],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[555320,555330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555332,555337]},{"pos":[555346,555358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[555364,555380],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[555426,555436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555438,555443]},{"pos":[555452,555464],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[555470,555494],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[555548,555558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555560,555565]},{"pos":[555574,555586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[555592,555608],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[555654,555664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555666,555671]},{"pos":[555680,555692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[555698,555718],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[555768,555778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555780,555785]},{"pos":[555794,555806],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[555812,555839],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[555896,555906],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[555908,555913]},{"pos":[555922,555934],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[555940,555957],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[556004,556014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556016,556021]},{"pos":[556030,556042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556048,556066],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[556124,556134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556136,556141]},{"content":"mode","pos":[556155,556159]},{"pos":[556168,556180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556186,556208],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[556260,556270],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556272,556277]},{"pos":[556286,556298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556304,556327],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[556380,556390],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556392,556397]},{"pos":[556406,556418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556424,556442],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[556498,556508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[556510,556515]},{"pos":[556524,556536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556542,556567],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[556664,556674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[556676,556677]},{"content":"y","pos":[556691,556692]},{"content":"button","pos":[556706,556712]},{"content":"Ctrl","pos":[556726,556730]},{"content":"Shift","pos":[556744,556749]},{"pos":[556758,556770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[556776,556797],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[556890,556900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[556902,556903]},{"content":"y","pos":[556917,556918]},{"content":"button","pos":[556932,556938]},{"content":"Ctrl","pos":[556952,556956]},{"content":"Shift","pos":[556970,556975]},{"pos":[556984,556996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557002,557021],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[557112,557122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[557124,557125]},{"content":"y","pos":[557139,557140]},{"content":"button","pos":[557154,557160]},{"content":"Ctrl","pos":[557174,557178]},{"content":"Shift","pos":[557192,557197]},{"pos":[557206,557218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557224,557244],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[557294,557304],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557306,557311]},{"pos":[557320,557332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557338,557359],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[557418,557428],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557430,557435]},{"pos":[557444,557456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557462,557479],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[557536,557546],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557548,557553]},{"content":"mode","pos":[557567,557571]},{"pos":[557580,557592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557598,557619],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[557670,557680],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557682,557687]},{"pos":[557696,557708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557714,557736],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[557788,557798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[557800,557805]},{"pos":[557814,557826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557832,557844],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[557879,557891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[557897,557908],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[557910,557974]},{"pos":[558025,558035],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[558037,558042]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[558045,558131]},{"content":"mode","pos":[558143,558147]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[558150,558236]},{"pos":[558243,558255],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[558257,558308]},{"pos":[558314,558329],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[558331,558392]},{"pos":[558437,558447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[558449,558454]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[558457,558543]},{"pos":[558550,558562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[558564,558620]},{"pos":[558626,558642],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[558644,558708]},{"pos":[558754,558764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[558766,558771]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[558774,558855]},{"pos":[558862,558874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[558876,558927]},{"pos":[558933,558948],"content":"Method location","linkify":"Method location","nodes":[{"content":"Method location","pos":[0,15]}]},{"pos":[558993,559003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[559005,559010]},{"pos":[559019,559031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[559037,559057],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[559059,559112]},{"pos":[559170,559180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[559182,559187]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[559190,559284]},{"pos":[559291,559303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[559305,559378]},{"pos":[559384,559399],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[559437,559449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[559455,559475],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[559477,559534]},{"pos":[559626,559636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[559638,559639]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[559642,559703]},{"content":"y","pos":[559715,559716]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[559719,559780]},{"content":"button","pos":[559792,559798]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[559801,559862]},{"content":"Ctrl","pos":[559874,559878]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[559881,559942]},{"content":"Shift","pos":[559954,559959]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[559962,560023]},{"pos":[560030,560042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[560044,560083]},{"pos":[560090,560097],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[560099,560203]},{"pos":[560209,560225],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[560227,560292]},{"pos":[560380,560390],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[560392,560393]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[560396,560457]},{"content":"y","pos":[560469,560470]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[560473,560534]},{"content":"button","pos":[560546,560552]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[560555,560616]},{"content":"Ctrl","pos":[560628,560632]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[560635,560696]},{"content":"Shift","pos":[560708,560713]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[560716,560777]},{"pos":[560784,560796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[560798,560837]},{"pos":[560844,560851],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[560853,560957]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[560958,561093]},{"pos":[561099,561115],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[561117,561182]},{"pos":[561270,561280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[561282,561283]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[561286,561347]},{"content":"y","pos":[561359,561360]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[561363,561424]},{"content":"button","pos":[561436,561442]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[561445,561506]},{"content":"Ctrl","pos":[561518,561522]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[561525,561586]},{"content":"Shift","pos":[561598,561603]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[561606,561667]},{"pos":[561674,561686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[561688,561727]},{"pos":[561734,561741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[561743,561847]},{"pos":[561853,561867],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[561869,561941]},{"pos":[562027,562037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[562039,562040]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[562043,562104]},{"content":"y","pos":[562116,562117]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[562120,562181]},{"content":"button","pos":[562193,562199]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[562202,562263]},{"content":"Ctrl","pos":[562275,562279]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[562282,562343]},{"content":"Shift","pos":[562355,562360]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[562363,562424]},{"pos":[562431,562443],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[562445,562484]},{"pos":[562491,562498],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[562500,562604]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[562605,562740]},{"pos":[562746,562757],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[562759,562912]},{"pos":[562953,562963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[562965,562970]},{"pos":[562979,562991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[562993,563057]},{"pos":[563064,563071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[563073,563167]},{"content":"Begins with a letter.","pos":[563173,563194]},{"content":"Doesn't exceed 250 characters.","pos":[563199,563229]},{"content":"Can include numbers and underscore characters.","pos":[563234,563280]},{"content":"Cannot include punctuation or spaces.","pos":[563285,563322]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.","pos":[563327,563457]},{"pos":[563463,563486],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[563539,563549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[563551,563556]},{"pos":[563565,563577],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563583,563601],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[563649,563659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[563661,563666]},{"pos":[563675,563687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563693,563709],"content":"Method onHScroll","linkify":"Method onHScroll","nodes":[{"content":"Method onHScroll","pos":[0,16]}]},{"pos":[563751,563761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pos","pos":[563763,563766]},{"pos":[563775,563787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563793,563809],"content":"Method onVScroll","linkify":"Method onVScroll","nodes":[{"content":"Method onVScroll","pos":[0,16]}]},{"pos":[563851,563861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pos","pos":[563863,563866]},{"pos":[563875,563887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563893,563920],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[563972,563984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[563990,564002],"content":"Method paint","linkify":"Method paint","nodes":[{"content":"Method paint","pos":[0,12]}]},{"pos":[564033,564045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[564051,564071],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[564073,564118]},{"pos":[564165,564177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[564179,564214]},{"pos":[564220,564241],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[564292,564302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[564304,564309]},{"pos":[564318,564330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[564336,564353],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[564400,564410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[564412,564417]},{"pos":[564426,564438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[564444,564461],"content":"Method scrollInfo","linkify":"Method scrollInfo","nodes":[{"content":"Method scrollInfo","pos":[0,17]}]},{"pos":[564590,564600],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"VertScroller","pos":[564602,564614]},{"content":"Pos","pos":[564628,564631]},{"content":"PageDelta","pos":[564645,564654]},{"content":"MoveDelta","pos":[564668,564677]},{"content":"MinLimit","pos":[564691,564699]},{"content":"MaxLimit","pos":[564713,564721]},{"pos":[564730,564742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[564748,564766],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[564768,564827]},{"pos":[564895,564905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[564907,564912]},{"content":"The ID of the security key to assign to the control; optional.","pos":[564915,564977]},{"pos":[564984,564996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[564998,565097]},{"pos":[565103,565125],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[565127,565167]},{"pos":[565222,565232],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[565234,565244]},{"content":"The ID of the menu to show.","pos":[565247,565274]},{"pos":[565281,565293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[565295,565354]},{"pos":[565360,565376],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[565430,565440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565442,565447]},{"pos":[565456,565468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565474,565485],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[565487,565614]},{"pos":[565663,565673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565675,565680]},{"content":"The value to assign to the skip property of the control; optional.","pos":[565683,565749]},{"pos":[565756,565768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[565770,565876]},{"pos":[565883,565890],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[565892,566087]},{"pos":[566093,566104],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[566159,566169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[566171,566184]},{"pos":[566193,566205],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[566211,566225],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[566227,566270]},{"pos":[566303,566315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[566317,566419]},{"pos":[566426,566433],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[566435,566507]},{"pos":[566513,566523],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[566525,566587]},{"pos":[566637,566647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[566649,566654]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[566657,566741]},{"content":"mode","pos":[566753,566757]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[566760,566844]},{"pos":[566851,566863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[566865,566914]},{"pos":[566920,566934],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[566936,566995]},{"pos":[567039,567049],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567051,567056]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[567059,567143]},{"pos":[567150,567162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[567164,567218]},{"pos":[567224,567239],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[567241,567303]},{"pos":[567348,567358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567360,567365]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[567368,567447]},{"pos":[567454,567466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[567468,567517]},{"pos":[567523,567534],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[567575,567585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567587,567592]},{"pos":[567601,567613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[567619,567646],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[567710,567720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[567722,567726]},{"pos":[567735,567747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[567753,567768],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[567770,567813]},{"pos":[567858,567868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567870,567875]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[567878,567950]},{"pos":[567957,567969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[567971,568001]},{"pos":[568007,568026],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[568028,568076]},{"pos":[568125,568135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[568137,568142]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[568145,568222]},{"pos":[568229,568241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[568243,568278]},{"pos":[568284,568304],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[568306,568365]},{"pos":[568415,568425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[568427,568432]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[568435,568523]},{"pos":[568530,568542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[568544,568590]},{"pos":[568596,568614],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[568616,568699]},{"pos":[568747,568757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[568759,568764]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[568767,568847]},{"pos":[568854,568866],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[568868,568924]},{"pos":[568930,568947],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[568949,569001]},{"pos":[569048,569058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[569060,569065]},{"content":"The user height for the control; optional.","pos":[569068,569110]},{"pos":[569117,569129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[569131,569170]},{"pos":[569176,569191],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[569193,569275]},{"pos":[569320,569330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[569332,569337]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[569340,569419]},{"pos":[569426,569438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[569440,569495]},{"pos":[569502,569509],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[569511,569681]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[569682,569757]},{"content":"This method lets you programmatically determine and set the value.","pos":[569758,569824]},{"pos":[569830,569853],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[569855,569911]},{"pos":[569964,569974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[569976,569981]},{"content":"The organization container to set for the control; optional.","pos":[569984,570044]},{"pos":[570051,570063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[570065,570108]},{"pos":[570114,570135],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[570137,570191]},{"pos":[570242,570252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570254,570259]},{"content":"The organization sibling to set for the control; optional.","pos":[570262,570320]},{"pos":[570327,570339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[570341,570382]},{"pos":[570388,570409],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[570411,570460]},{"pos":[570511,570521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570523,570528]},{"content":"The user label text to set for the control; optional.","pos":[570531,570584]},{"pos":[570591,570603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[570605,570641]},{"pos":[570647,570671],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[570673,570726]},{"pos":[570780,570790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570792,570797]},{"content":"The user security level to set for the control; optional.","pos":[570800,570857]},{"pos":[570864,570876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[570878,570918]},{"pos":[570924,570939],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[570941,571089]},{"pos":[571134,571144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[571146,571151]},{"content":"The value to assign to the userSkip property; optional.","pos":[571154,571209]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[571210,571305]},{"pos":[571312,571324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[571326,571395]},{"pos":[571401,571417],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[571419,571496]},{"pos":[571542,571552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[571554,571559]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[571562,571628]},{"pos":[571635,571647],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[571649,571778]},{"pos":[571785,571792],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[571794,571888]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[571889,572005],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[572006,572156]},{"pos":[572162,572177],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[572215,572227],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[572233,572255],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[572257,572318]},{"pos":[572387,572397],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[572399,572404]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[572407,572484]},{"content":"mode","pos":[572496,572500]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[572503,572580]},{"pos":[572587,572599],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[572601,572649]},{"pos":[572655,572681],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[572683,572742]},{"pos":[572807,572817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[572819,572823]},{"pos":[572832,572844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[572846,572900]},{"pos":[572906,572933],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[572935,572996]},{"pos":[573053,573063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[573065,573070]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[573073,573151]},{"pos":[573158,573170],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[573172,573220]},{"pos":[573226,573240],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[573242,573312]},{"pos":[573364,573374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[573376,573381]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[573384,573456]},{"pos":[573463,573475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[573477,573526]},{"pos":[573532,573544],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[573546,573584]},{"pos":[573636,573646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[573648,573653]},{"content":"mode","pos":[573667,573671]},{"pos":[573680,573692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[573694,573729]},{"pos":[573736,573743],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[573745,573798]},{"content":"Calculate the width according to the following table.","pos":[573799,573852]},{"content":"Mode","pos":[573856,573860]},{"content":"Width calculation","pos":[573873,573890]},{"content":"-1 Exact","pos":[574076,574084]},{"content":"The exact width in pixels of the controls is used.","pos":[574093,574143]},{"content":"0 Auto","pos":[574186,574192]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[574203,574291]},{"content":"1 Column width","pos":[574296,574310]},{"content":"The layout of the form determines the width of the control.","pos":[574313,574372]},{"content":"The width and width calculation mode can be set separately.","pos":[574405,574464]},{"pos":[574470,574486],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[574488,574550]},{"pos":[574596,574606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[574608,574613]},{"pos":[574622,574634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[574636,574697]},{"pos":[574704,574711],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[574713,574766]},{"content":"Mode","pos":[574770,574774]},{"content":"Width calculation","pos":[574785,574802]},{"content":"Exact","pos":[574986,574991]},{"content":"The exact width in pixels of the controls is used.","pos":[575001,575051]},{"content":"Auto","pos":[575094,575098]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[575109,575197]},{"content":"Column width","pos":[575202,575214]},{"content":"The layout of the form determines the width of the control.","pos":[575217,575276]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[575309,575392]},{"pos":[575398,575415],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[575417,575455]},{"pos":[575502,575512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[575514,575519]},{"pos":[575528,575540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[575542,575577]},{"pos":[575584,575591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[575593,575666]},{"pos":[575672,575688],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[575690,575732]},{"pos":[575767,575796],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[575914,575924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[575926,575942]},{"content":"objectMethodToCall","pos":[575956,575974]},{"content":"overrideObject","pos":[575988,576002]},{"pos":[576010,576027],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[576029,576099]},{"pos":[576189,576199],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[576201,576202]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[576205,576266]},{"content":"y","pos":[576278,576279]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[576282,576343]},{"content":"button","pos":[576355,576361]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[576364,576425]},{"content":"Ctrl","pos":[576437,576441]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[576444,576505]},{"content":"Shift","pos":[576517,576522]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[576525,576586]},{"pos":[576592,576608],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[576610,576706]},{"pos":[576741,576756],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[576758,576804]},{"pos":[576838,576852],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[576854,576894]},{"pos":[576927,576940],"content":"Method lockDC","linkify":"Method lockDC","nodes":[{"content":"Method lockDC","pos":[0,13]}]},{"pos":[576972,576984],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[577015,577029],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[577031,577092]},{"pos":[577126,577133],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[577135,577263]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[577264,577368]},{"pos":[577374,577393],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[577479,577489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[577491,577497]},{"content":"e","pos":[577511,577512]},{"pos":[577520,577534],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[577615,577625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[577627,577633]},{"content":"e","pos":[577647,577648]},{"pos":[577656,577671],"content":"Method setDirty","linkify":"Method setDirty","nodes":[{"content":"Method setDirty","pos":[0,15]}]},{"pos":[577749,577759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[577761,577762]},{"content":"y","pos":[577776,577777]},{"content":"width","pos":[577791,577796]},{"content":"height","pos":[577810,577816]},{"pos":[577824,577847],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[577849,577890]},{"pos":[577932,577948],"content":"Method OnClicked","linkify":"Method OnClicked","nodes":[{"content":"Method OnClicked","pos":[0,16]}]},{"pos":[578031,578041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[578043,578049]},{"content":"e","pos":[578063,578064]},{"pos":[578072,578087],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[578169,578179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[578181,578187]},{"content":"e","pos":[578201,578202]},{"pos":[578210,578223],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[578271,578281],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[578283,578292]},{"pos":[578300,578317],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[578401,578411],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[578413,578419]},{"content":"e","pos":[578433,578434]},{"pos":[578442,578460],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[578545,578555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[578557,578563]},{"content":"e","pos":[578577,578578]},{"pos":[578586,578597],"content":"Method size","linkify":"Method size","nodes":[{"content":"Method size","pos":[0,11]}]},{"pos":[578649,578659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[578661,578666]},{"content":"height","pos":[578680,578686]},{"pos":[578694,578709],"content":"Method dropFile","linkify":"Method dropFile","nodes":[{"content":"Method dropFile","pos":[0,15]}]},{"pos":[578756,578766],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"FileName","pos":[578768,578776]},{"pos":[578784,578794],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[578796,578829]},{"pos":[578858,578871],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[578903,578918],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[578920,578950]},{"pos":[578984,578995],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[579025,579041],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[579124,579134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[579136,579142]},{"content":"e","pos":[579156,579157]},{"pos":[579165,579179],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[579212,579232],"content":"Method setScrollInfo","linkify":"Method setScrollInfo","nodes":[{"content":"Method setScrollInfo","pos":[0,20]}]},{"pos":[579271,579283],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[579285,579339]},{"pos":[579370,579387],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[579471,579481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[579483,579489]},{"content":"e","pos":[579503,579504]},{"pos":[579512,579526],"content":"Method clicked","linkify":"Method clicked","nodes":[{"content":"Method clicked","pos":[0,14]}]},{"pos":[579559,579577],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[579579,579650]},{"pos":[579701,579711],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[579713,579722]},{"content":"The string value to use to filter data; optional.","pos":[579725,579774]},{"pos":[579780,579798],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[579883,579893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[579895,579901]},{"content":"e","pos":[579915,579916]},{"pos":[579924,579941],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[579943,579997]},{"pos":[580033,580044],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[580046,580098]},{"pos":[580128,580139],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[580141,580239]},{"pos":[580325,580335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[580337,580347]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[580350,580435]},{"content":"dragMode","pos":[580447,580455]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[580458,580543]},{"content":"x","pos":[580555,580556]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[580559,580644]},{"content":"y","pos":[580656,580657]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[580660,580745]},{"pos":[580751,580772],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[580774,580795]},{"pos":[580835,580850],"content":"Method unlockDC","linkify":"Method unlockDC","nodes":[{"content":"Method unlockDC","pos":[0,15]}]},{"pos":[580884,580905],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[580907,580976]},{"pos":[581038,581048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[581050,581055]},{"content":"The preferred height of the control.","pos":[581058,581094]},{"content":"height","pos":[581106,581112]},{"content":"The preferred height of the control.","pos":[581115,581151]},{"pos":[581157,581170],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[581172,581272]},{"pos":[581354,581364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[581366,581376]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[581379,581464]},{"content":"dragMode","pos":[581476,581484]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[581487,581572]},{"content":"x","pos":[581584,581585]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[581588,581673]},{"content":"y","pos":[581685,581686]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[581689,581774]}]}