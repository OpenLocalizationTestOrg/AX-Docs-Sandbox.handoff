{"nodes":[{"pos":[32,99],"content":"Diagnose problems and analyze performance issues using Trace parser","needQuote":true,"needEscape":true,"nodes":[{"content":"Diagnose problems and analyze performance issues using Trace parser","pos":[0,67]}]},{"pos":[113,403],"content":"This topic explains how you can use the Trace parser to consume traces and analyze performance in your deployment. You can use the Trace Parser to find and diagnose various types of errors. You can also use the tool to visualize execution of X++ methods, as well as the execution call tree.","needQuote":true,"needEscape":true,"nodes":[{"content":"This topic explains how you can use the Trace parser to consume traces and analyze performance in your deployment. You can use the Trace Parser to find and diagnose various types of errors. You can also use the tool to visualize execution of X++ methods, as well as the execution call tree.","pos":[0,290],"nodes":[{"content":"This topic explains how you can use the Trace parser to consume traces and analyze performance in your deployment.","pos":[0,114]},{"content":"You can use the Trace Parser to find and diagnose various types of errors.","pos":[115,189]},{"content":"You can also use the tool to visualize execution of X++ methods, as well as the execution call tree.","pos":[190,290]}]}]},{"pos":[912,979],"content":"Diagnose problems and analyze performance issues using Trace parser","linkify":"Diagnose problems and analyze performance issues using Trace parser","nodes":[{"content":"Diagnose problems and analyze performance issues using Trace parser","pos":[0,67]}]},{"content":"This topic explains how you can use the Trace parser to consume traces and analyze performance in your deployment.","pos":[981,1095]},{"content":"You can use the Trace Parser to find and diagnose various types of errors.","pos":[1096,1170]},{"content":"You can also use the tool to visualize execution of X++ methods, as well as the execution call tree.","pos":[1171,1271]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> There are many more features in the Trace parser which work similar to Microsoft Dynamics AX 2012.","pos":[1273,1381],"source":"**Note:** There are many more features in the Trace parser which work similar to Microsoft Dynamics AX 2012."},{"content":"See <bpt id=\"p1\">&lt;</bpt>http://blogs.msdn.com/axperf<ept id=\"p1\">&gt;</ept> for more information.","pos":[1382,1438],"source":" See <http://blogs.msdn.com/axperf> for more information."},{"pos":[1443,1467],"content":"Finding the Trace parser","linkify":"Finding the Trace parser","nodes":[{"content":"Finding the Trace parser","pos":[0,24]}]},{"content":"Trace parser should be preinstalled with your developer deployment or VHD.","pos":[1468,1542]},{"content":"The install location is here: C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Microsoft Dynamics AX<ph id=\"ph3\">\\\\</ph>Microsoft.Dynamics.AX.Tracing.TraceParser.exe In case it is not installed you can find the \"traceparser.msi\" in C:<ph id=\"ph4\">\\\\</ph>PerfSDK.","pos":[1543,1745],"source":" The install location is here: C:\\\\Program Files (x86)\\\\Microsoft Dynamics AX\\\\Microsoft.Dynamics.AX.Tracing.TraceParser.exe In case it is not installed you can find the \"traceparser.msi\" in C:\\\\PerfSDK."},{"content":"If the for any reason the PerfSDK is not installed you can find the .msi here: C:<ph id=\"ph1\">\\\\</ph>Services<ph id=\"ph2\">\\\\</ph>PerfSDK<ph id=\"ph3\">\\\\</ph>Scripts.","pos":[1746,1856],"source":" If the for any reason the PerfSDK is not installed you can find the .msi here: C:\\\\Services\\\\PerfSDK\\\\Scripts."},{"pos":[1861,1877],"content":"Capturing events","linkify":"Capturing events","nodes":[{"content":"Capturing events","pos":[0,16]}]},{"content":"There are two ways that you can obtain the data that you will analyze in the Trace parser.","pos":[1878,1968]},{"content":"They include:","pos":[1969,1982]},{"content":"Capture events from the local installation.","pos":[1988,2031]},{"content":"If the <bpt id=\"p1\">**</bpt>Select Trace<ept id=\"p1\">**</ept> window isn’t already open, go to the <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> menu and click <bpt id=\"p3\">**</bpt>Open trace<ept id=\"p3\">**</ept>.","pos":[2040,2140],"source":"If the **Select Trace** window isn’t already open, go to the **File** menu and click **Open trace**."},{"content":"In the <bpt id=\"p1\">**</bpt>Select Trace<ept id=\"p1\">**</ept> window, click <bpt id=\"p2\">**</bpt>Capture Events<ept id=\"p2\">**</ept>.","pos":[2141,2198],"source":" In the **Select Trace** window, click **Capture Events**."},{"content":"After selecting your providers, click <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>.","pos":[2199,2247],"source":" After selecting your providers, click **Start**."},{"content":"The Trace Parser tool will start listening to all the providers and capturing the events.","pos":[2248,2337]},{"content":"Capturing stops when you click <bpt id=\"p1\">**</bpt>Stop and Import<ept id=\"p1\">**</ept>.","pos":[2338,2389],"source":" Capturing stops when you click **Stop and Import**."},{"content":"Open an existing ETL (Windows Event) file that was captured using tools such as Logman.","pos":[2394,2481]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>1<ph id=\"ph2\">\\_</ph>Desktop<ept id=\"p1\">](./media/1_desktop.png)](./media/1_desktop.png)</ept>","pos":[2482,2543],"source":"[![1\\_Desktop](./media/1_desktop.png)](./media/1_desktop.png)"},{"pos":[2548,2562],"content":"Viewing traces","linkify":"Viewing traces","nodes":[{"content":"Viewing traces","pos":[0,14]}]},{"content":"<bpt id=\"p1\">**</bpt>Timeline view<ept id=\"p1\">**</ept> The Timeline tab is the first tab that you see after you import a trace into the Trace Parser.","pos":[2563,2675],"source":"**Timeline view** The Timeline tab is the first tab that you see after you import a trace into the Trace Parser."},{"content":"This tab is shown in the following illustration.","pos":[2676,2724]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>2<ph id=\"ph2\">\\_</ph>Desktop<ept id=\"p1\">](./media/2_desktop.png)](./media/2_desktop.png)</ept> The <bpt id=\"p2\">**</bpt>Timeline<ept id=\"p2\">**</ept> tab has the following major components:","pos":[2725,2843],"source":"[![2\\_Desktop](./media/2_desktop.png)](./media/2_desktop.png) The **Timeline** tab has the following major components:"},{"pos":[2849,3118],"content":"The <bpt id=\"p1\">**</bpt>Select Grouping<ept id=\"p1\">**</ept> drop-down allows you to group based on a variety of categories, such as Customer ID, Username, Session Name, etc. Groupings will display maximum and minimum timestamp of events, total number of events, and lowest event level within the grouping.","source":"The **Select Grouping** drop-down allows you to group based on a variety of categories, such as Customer ID, Username, Session Name, etc. Groupings will display maximum and minimum timestamp of events, total number of events, and lowest event level within the grouping."},{"content":"List of all events in a threaded or unthreaded view.","pos":[3123,3175]},{"content":"Property grid displayed for the selected event.","pos":[3180,3227]},{"content":"Timeline chart for all the selected events.","pos":[3232,3275]},{"content":"Filtering of events.","pos":[3280,3300]},{"content":"Session analysis notes.","pos":[3305,3328]},{"content":"<bpt id=\"p1\">**</bpt>Call tree view<ept id=\"p1\">**</ept> By selecting the <bpt id=\"p2\">**</bpt>Call Tree<ept id=\"p2\">**</ept> tab, you can see the call tree for all X++ methods.","pos":[3330,3431],"source":"**Call tree view** By selecting the **Call Tree** tab, you can see the call tree for all X++ methods."},{"content":"The tab is shown below.","pos":[3432,3455]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>3<ph id=\"ph2\">\\_</ph>Desktop<ept id=\"p1\">](./media/3_desktop.png)](./media/3_desktop.png)</ept> Similarly, you can display the <bpt id=\"p2\">**</bpt>X++<ept id=\"p2\">**</ept> tab to view a list of all the X++ methods.","pos":[3456,3599],"source":"[![3\\_Desktop](./media/3_desktop.png)](./media/3_desktop.png) Similarly, you can display the **X++** tab to view a list of all the X++ methods."},{"content":"They will be sorted by fields such as Inclusive/Exclusive durations, RPC, or Database calls.","pos":[3600,3692]},{"content":"Note that these are similar to the corresponding tabs in Trace Parser and have the same behavior.","pos":[3693,3790]},{"pos":[3792,3800],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3811,3864],"content":"<bpt id=\"p1\">[</bpt>Technical Concepts Guide<ept id=\"p1\">](developer-landing-page.md)</ept>","source":"[Technical Concepts Guide](developer-landing-page.md)"}],"content":"---\n# required metadata\n\ntitle: Diagnose problems and analyze performance issues using Trace parser\ndescription: This topic explains how you can use the Trace parser to consume traces and analyze performance in your deployment. You can use the Trace Parser to find and diagnose various types of errors. You can also use the tool to visualize execution of X++ methods, as well as the execution call tree.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2015-12-02 20 - 54 - 04\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: 61\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 13441\nms.assetid: eb0fbbaf-07d4-4a02-85e8-0d4f7920a0b9\nms.search.region: Global\n# ms.search.industry: \nms.author: chwolf\nms.dyn365.ops.intro: 01-02-2016\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# Diagnose problems and analyze performance issues using Trace parser\n\nThis topic explains how you can use the Trace parser to consume traces and analyze performance in your deployment. You can use the Trace Parser to find and diagnose various types of errors. You can also use the tool to visualize execution of X++ methods, as well as the execution call tree.\n\n**Note:** There are many more features in the Trace parser which work similar to Microsoft Dynamics AX 2012. See <http://blogs.msdn.com/axperf> for more information.\n\n## Finding the Trace parser\nTrace parser should be preinstalled with your developer deployment or VHD. The install location is here: C:\\\\Program Files (x86)\\\\Microsoft Dynamics AX\\\\Microsoft.Dynamics.AX.Tracing.TraceParser.exe In case it is not installed you can find the \"traceparser.msi\" in C:\\\\PerfSDK. If the for any reason the PerfSDK is not installed you can find the .msi here: C:\\\\Services\\\\PerfSDK\\\\Scripts.\n\n## Capturing events\nThere are two ways that you can obtain the data that you will analyze in the Trace parser. They include:\n\n-   Capture events from the local installation.\n    -   If the **Select Trace** window isn’t already open, go to the **File** menu and click **Open trace**. In the **Select Trace** window, click **Capture Events**. After selecting your providers, click **Start**. The Trace Parser tool will start listening to all the providers and capturing the events. Capturing stops when you click **Stop and Import**.\n-   Open an existing ETL (Windows Event) file that was captured using tools such as Logman. [![1\\_Desktop](./media/1_desktop.png)](./media/1_desktop.png)\n\n## Viewing traces\n**Timeline view** The Timeline tab is the first tab that you see after you import a trace into the Trace Parser. This tab is shown in the following illustration. [![2\\_Desktop](./media/2_desktop.png)](./media/2_desktop.png) The **Timeline** tab has the following major components:\n\n-   The **Select Grouping** drop-down allows you to group based on a variety of categories, such as Customer ID, Username, Session Name, etc. Groupings will display maximum and minimum timestamp of events, total number of events, and lowest event level within the grouping.\n-   List of all events in a threaded or unthreaded view.\n-   Property grid displayed for the selected event.\n-   Timeline chart for all the selected events.\n-   Filtering of events.\n-   Session analysis notes.\n\n**Call tree view** By selecting the **Call Tree** tab, you can see the call tree for all X++ methods. The tab is shown below. [![3\\_Desktop](./media/3_desktop.png)](./media/3_desktop.png) Similarly, you can display the **X++** tab to view a list of all the X++ methods. They will be sorted by fields such as Inclusive/Exclusive durations, RPC, or Database calls. Note that these are similar to the corresponding tabs in Trace Parser and have the same behavior.\n\nSee also\n--------\n\n[Technical Concepts Guide](developer-landing-page.md)\n\n"}