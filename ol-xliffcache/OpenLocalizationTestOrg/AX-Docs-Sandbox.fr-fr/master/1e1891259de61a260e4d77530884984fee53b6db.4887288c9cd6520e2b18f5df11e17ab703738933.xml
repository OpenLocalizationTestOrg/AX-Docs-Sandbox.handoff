{"nodes":[{"pos":[32,78],"content":"F Classes - FormGroupControl to FormIntControl","needQuote":true,"needEscape":true,"nodes":[{"content":"F Classes - FormGroupControl to FormIntControl","pos":[0,46]}]},{"pos":[92,191],"content":"This wiki contains API reference documentation for classes from FormGroupControl to FormIntControl.","needQuote":true,"needEscape":true,"nodes":[{"content":"This wiki contains API reference documentation for classes from FormGroupControl to FormIntControl.","pos":[0,99]}]},{"pos":[704,750],"content":"F Classes - FormGroupControl to FormIntControl","linkify":"F Classes - FormGroupControl to FormIntControl","nodes":[{"content":"F Classes - FormGroupControl to FormIntControl","pos":[0,46]}]},{"content":"This wiki contains API reference documentation for classes from FormGroupControl to FormIntControl.","pos":[752,851]},{"pos":[853,875],"content":"Class FormGroupControl","linkify":"Class FormGroupControl","nodes":[{"content":"Class FormGroupControl","pos":[0,22]}]},{"pos":[952,959],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[965,973],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[979,986],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[990,996]},{"content":"Description","pos":[1108,1119]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[1626,1730],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"Adds a form control to a form group control.","pos":[1744,1788]},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[1944,2039],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[2262,2377],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"Adds a table field.","pos":[2380,2399]},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2580,2624],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"Sets or returns a Boolean value that indicates whether a form group control is aligned in the same manner as other controls in a form.","pos":[2698,2832]},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2898,2945],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"Sets or returns a Boolean value that indicates whether the child controls are aligned.","pos":[3016,3102]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[3216,3262],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether the control is aligned with other controls.","pos":[3334,3396]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[3534,3577],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can modify the contents of the control.","pos":[3652,3719]},{"content":"public boolean allowSysSetup()","pos":[3852,3882]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[3970,4053]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4170,4210],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"Sets or gets the level of modification that can be performed for a form group control.","pos":[4288,4374]},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4488,4526],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4806,4845],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"Sets or returns an integer value that indicates how controls in a form group control are arranged.","pos":[4924,5022]},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[5124,5161],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"Sets or returns an integer value that specifies when the controls are arranged.","pos":[5242,5321]},{"content":"public boolean autoDataGroup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[5442,5489],"source":"public boolean autoDataGroup(\\[boolean value\\])"},{"content":"Sets or returns a Boolean value that specifies whether a form group control can contain only the fields in the data group that are specified for the control.","pos":[5560,5717]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[5760,5809],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[5878,5976]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[6078,6119],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[6196,6245]},{"content":"public Image backgroundImage(<ph id=\"ph1\">\\[</ph>Image image<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int drawMode<ph id=\"ph4\">\\]</ph>)","pos":[6396,6459],"source":"public Image backgroundImage(\\[Image image\\], \\[int drawMode\\])"},{"content":"Specifies the background image for a form group control.","pos":[6514,6570]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[6714,6749],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[6832,6893]},{"content":"public int beginDrag(int x, int y)","pos":[7032,7066]},{"content":"Is called when the user starts to move a form group control.","pos":[7150,7210]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[7350,7380],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to display text in the control.","pos":[7468,7544]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[7668,7725],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Sets or returns the bottom margin of a form group control in pixels and specifies whether the margin is automatically adjusted.","pos":[7786,7913]},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[7986,8037],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"Sets or returns an AutoMode enumeration value that indicates whether the bottom margin is automatically adjusted.","pos":[8104,8217]},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[8304,8347],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"Sets or returns the bottom margin of a form group control in pixels.","pos":[8422,8490]},{"content":"public boolean breakable(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[8622,8665],"source":"public boolean breakable(\\[boolean value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[8940,8994]},{"content":"Calculates the size of a form group control, based on the number of characters and the number of lines.","pos":[9058,9161]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[9258,9343],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"Indicates whether a table field can be added.","pos":[9376,9421]},{"content":"public boolean canContain(FormControl control)","pos":[9576,9622]},{"content":"Specifies whether a form group control can contain the specified form control.","pos":[9694,9772]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[9894,9927],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[10012,10051]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10212,10250],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[10330,10373]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10530,10567],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[10648,10693]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[10848,10903],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"Sets or returns the number of columns in a form group control in pixels, and specifies whether the number is automatically adjusted.","pos":[10966,11098]},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[11166,11218],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"Sets or returns a value that indicates whether the number of columns in a form group control is fixed, or whether it is automatically adjusted based on other form settings, such as the form size.","pos":[11284,11479]},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[11484,11540],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Sets or returns the amount of space between columns in a form group control in pixels and indicates whether the space is automatically adjusted based on other form settings, such the font size.","pos":[11602,11795]},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[11802,11852],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"Sets or returns an AutoMode enumeration value that indicates whether the amount of space between columns in a form group control is automatically adjusted.","pos":[11920,12075]},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[12120,12162],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"Sets or returns the amount of space between columns in a form group control in pixels.","pos":[12238,12324]},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[12438,12476],"source":"public int columnsValue(\\[int value\\])"},{"content":"Sets or returns the number of columns in a form group control.","pos":[12556,12618]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[12756,12828],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[12874,12941]},{"content":"public List configurationKeyEx()","pos":[13074,13106]},{"content":"Retrieves a list that contains the IDs of configuration keys that are activated for a form group control.","pos":[13192,13297]},{"content":"public boolean contains(FormControl control)","pos":[13392,13436]},{"content":"Specifies whether a form group control contains a specified form control.","pos":[13510,13583]},{"content":"public int controlCount()","pos":[13710,13735]},{"content":"Returns the number of controls in a form group control.","pos":[13828,13883]},{"content":"public FormControl controlNum(int controlNo)","pos":[14028,14072]},{"content":"Returns a FormControl object for a specified control in a form group control.","pos":[14146,14223]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[14346,14390],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[14464,14542]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[14664,14723],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataGroup(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[14982,15017],"source":"public str dataGroup(\\[str value\\])"},{"content":"Sets or returns a data group for a form group control.","pos":[15100,15154]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[15300,15342],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[15418,15543]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[15618,15658],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[15736,15808]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[15936,15975],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[16054,16253]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[16286,16320],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether drag-and-drop operations are enabled or disabled for the control.","pos":[16404,16488]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[16604,16685]},{"content":"Is called when an object is dragged over the bounds of a form group control.","pos":[16722,16798]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[16922,16999]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[17040,17136]},{"content":"public str dragText()","pos":[17240,17261]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[17358,17428]},{"content":"public boolean enableChilds(<ph id=\"ph1\">\\[</ph>boolean enable<ph id=\"ph2\">\\]</ph>)","pos":[17558,17605],"source":"public boolean enableChilds(\\[boolean enable\\])"},{"content":"Specifies whether the child controls are enabled for a form group control.","pos":[17676,17750]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[17876,17917],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether the object is enabled or disabled.","pos":[17994,18047]},{"content":"public boolean expand(<ph id=\"ph1\">\\[</ph>boolean expand<ph id=\"ph2\">\\]</ph>)","pos":[18194,18235],"source":"public boolean expand(\\[boolean expand\\])"},{"content":"Specifies whether a form group control is expanded.","pos":[18312,18363]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[18512,18542],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font that is used for text in a control.","pos":[18630,18699]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18830,18864],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the font size to use for text in a control.","pos":[18948,19004]},{"content":"public int frameOptionButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[19148,19191],"source":"public int frameOptionButton(\\[int value\\])"},{"content":"Sets or returns the option button for a form group control.","pos":[19266,19325]},{"content":"public int framePosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[19466,19505],"source":"public int framePosition(\\[int value\\])"},{"content":"Sets or returns the location of the frame for a form group control.","pos":[19584,19651]},{"content":"public int frameType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[19784,19819],"source":"public int frameType(\\[int value\\])"},{"content":"Sets or returns the frame style for a form group control.","pos":[19902,19959]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[20102,20144],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a Boolean value that indicates whether the contents of a form group control have changed.","pos":[20220,20325]},{"content":"public boolean hasUserSetting()","pos":[20420,20451]},{"content":"Indicates whether the control has custom user settings.","pos":[20538,20593]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[20738,20780],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[20856,20895]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[21056,21092],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[21174,21236]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[21374,21411],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[21492,21531]},{"content":"public str helpField()","pos":[21692,21714]},{"content":"Returns the Help text that is displayed in the status bar when a form group control is selected.","pos":[21810,21906]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[22010,22044],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.","pos":[22128,22239]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[22328,22373],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"Sets or gets a Boolean value that indicates whether a form group control is visible when the controls in the group are not visible.","pos":[22446,22577]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[22646,22687],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[22764,22827]},{"content":"public int hWnd()","pos":[22964,22981]},{"content":"Returns a handle for a form group control.","pos":[23082,23124]},{"content":"public boolean isContainer()","pos":[23282,23310]},{"content":"Indicates whether a form group control is a container.","pos":[23400,23454]},{"content":"public boolean isDisplayed()","pos":[23600,23628]},{"content":"Indicates whether a form group control is displayed.","pos":[23718,23770]},{"content":"public boolean isRestricted()","pos":[23918,23947]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[24036,24103]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[24236,24292]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[24354,24453]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[24554,24594],"source":"public boolean italic(\\[boolean value\\])"},{"content":"Sets or returns a Boolean value that indicates whether the text for a form group control is italic.","pos":[24672,24771]},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[24872,24907],"source":"public int labelBold(\\[int value\\])"},{"content":"Sets or returns the font weight of the label text for a form group control.","pos":[24990,25065]},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[25190,25233],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"Sets or returns the character set of the font for the label text for a form group control.","pos":[25308,25398]},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[25508,25543],"source":"public str labelFont(\\[str value\\])"},{"content":"Sets or returns the font for the label text for a form group control.","pos":[25626,25695]},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[25826,25865],"source":"public int labelFontSize(\\[int value\\])"},{"content":"Sets or returns the font size of the label text for a form group control.","pos":[25944,26017]},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[26144,26189],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"Sets or returns a Boolean data type that indicates whether the label text for a form group control is italic.","pos":[26262,26371]},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[26462,26510],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"Sets or returns a Boolean data type that indicates whether the label text for a form group control is underlined.","pos":[26580,26693]},{"content":"public boolean leave()","pos":[26780,26802]},{"content":"Is called when the user moves the mouse pointer out of a form group control.","pos":[26898,26974]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[27098,27138],"source":"public int left(int value, \\[int mode\\])"},{"content":"Sets or returns the horizontal position of a form group control in pixels and specifies how the position is calculated.","pos":[27216,27335]},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[27416,27471],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Sets or returns the size of the left margin for a form group control in pixels and specifies whether the size is automatically adjusted.","pos":[27534,27670]},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[27734,27783],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"Sets or returns a value that indicates whether the size of the left margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.","pos":[27852,28040]},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[28052,28093],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"Sets or returns the size of the left margin for a form group control in pixels.","pos":[28170,28249]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[28370,28404],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets or returns a value that indicates how the horizontal position of a form group control is calculated.","pos":[28488,28593]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[28688,28723],"source":"public int leftValue(\\[int value\\])"},{"content":"Sets or returns the horizontal position of a form group control in pixels.","pos":[28806,28880]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[29006,29053],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[29124,29177]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[29324,29403]},{"content":"Is called when the user double-clicks a form group control.","pos":[29442,29501]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[29642,29717]},{"content":"Is called when the user presses the mouse button in a form group control.","pos":[29760,29833]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[29960,30035]},{"content":"Is called when the user moves the mouse pointer over a form group control.","pos":[30078,30152]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[30278,30351]},{"content":"Is called when the user releases the mouse button over a form group control.","pos":[30396,30472]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[30596,30656],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"Moves a specified control.","pos":[30714,30740]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[30914,30944],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[31032,31183]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[31248,31290],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int optionValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[31566,31603],"source":"public int optionValue(\\[int value\\])"},{"content":"Sets or returns the value for the option button that is associated with a form group control.","pos":[31684,31777]},{"content":"public container SysObsoleteAttribute()","pos":[31884,31923]},{"content":"public FormControl parentControl()","pos":[32202,32236]},{"content":"Retrieves the parent control for the control.","pos":[32320,32365]},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[32520,32576],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Sets or returns the size of the right margin for a form group control in pixels and specifies whether the size is automatically adjusted.","pos":[32638,32775]},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[32838,32888],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"Sets or returns a value that indicates whether the size of the right margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.","pos":[32956,33145]},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33156,33198],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"Sets or returns the size of the right margin for a form group control in pixels.","pos":[33274,33354]},{"content":"public boolean saveFilter(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[33474,33518],"source":"public boolean saveFilter(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[33792,33849],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the security key ID for a form group control.","pos":[33910,33971]},{"content":"public int showContextMenu(int menuHandle)","pos":[34110,34152]},{"content":"Shows a shortcut menu for a form group control.","pos":[34228,34275]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[34428,34466],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a Boolean value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[34546,34681]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[34746,34790],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"Sorts the controls that are contained in a form group control.","pos":[34864,34926]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[35064,35095],"source":"public int style(\\[int value\\])"},{"content":"public str toolTip()","pos":[35382,35402]},{"content":"Returns the text string for the tooltip for a form group control.","pos":[35500,35565]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[35700,35739],"source":"public int top(int value, \\[int mode\\])"},{"content":"Sets or returns the vertical position of a form group control in pixels and specifies how the position is calculated.","pos":[35818,35935]},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[36018,36072],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Sets or returns the top margin for a form group control in pixels and specifies whether the size is automatically adjusted.","pos":[36136,36259]},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[36336,36384],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"Sets or returns a value that indicates whether the size of the top margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.","pos":[36454,36641]},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[36654,36694],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[36972,37005],"source":"public int topMode(\\[int value\\])"},{"content":"Sets or returns a value that indicates how the vertical position of a form group control is calculated.","pos":[37090,37193]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[37290,37324],"source":"public int topValue(\\[int value\\])"},{"content":"Sets or returns the vertical position of a form group control in pixels.","pos":[37408,37480]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[37608,37638],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[37926,37969],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[38044,38111]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[38244,38295]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[38562,38596],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[38680,38723]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[38880,38918],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[38998,39046]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[39198,39237],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[39316,39375]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[39516,39553],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[39634,39717]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[39834,39870],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[39952,40004]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[40152,40186],"source":"public int userHide(\\[int value\\])"},{"content":"Sets or returns an integer data type that indicates whether a control is hidden from the user.","pos":[40270,40364]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[40470,40512],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[40588,40644]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[40788,40828],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[40906,40960]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[41106,41146],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[41224,41273]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[41424,41467],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[41542,41595]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[41742,41776],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns an integer that indicates whether the form group control is skipped when the user presses the TAB key to move to controls.","pos":[41860,41998]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[42060,42095],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns an integer that indicates the width of a form group control in pixels.","pos":[42178,42264]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[42378,42425],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"Specifies whether to use the user-specified layout of a form group control.","pos":[42496,42571]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[42696,42756],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the amount of space above and below a form group control in pixels, and specifies how the space is calculated.","pos":[42814,42937]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[43014,43068],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets or returns a value that indicates how the amount of space above and below a form group control is calculated.","pos":[43132,43246]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[43332,43378],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the amount of space above and below a form group control in pixels.","pos":[43450,43530]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[43650,43688],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[43968,44009],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Gets or sets a Boolean data type that displays or hides a form group control.","pos":[44086,44163]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[44286,44327],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[44404,44442]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44604,44639],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode for the width of the control.","pos":[44722,44785]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44922,44958],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[45040,45078]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[45240,45347],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[45558,45631]},{"content":"Is called when a user drops a form group control or an item in a form group control into a new position.","pos":[45676,45780]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[45876,45952],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[46194,46266],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseLeave()","pos":[46512,46536]},{"content":"Is called when the user moves the mouse pointer away from the control.","pos":[46630,46700]},{"content":"public void context()","pos":[46830,46851]},{"content":"Is called when the user right-clicks a form group control.","pos":[46948,47006]},{"content":"public void copy()","pos":[47148,47166]},{"content":"Copies a form group control.","pos":[47266,47294]},{"content":"public void cut()","pos":[47466,47483]},{"content":"Cuts the contents of the control.","pos":[47584,47617]},{"content":"public void paste()","pos":[47784,47803]},{"content":"Pastes a form group control.","pos":[47902,47930]},{"content":"public void arrange()","pos":[48102,48123]},{"content":"public void clicked()","pos":[48420,48441]},{"content":"Is called when a form group control is clicked by the user.","pos":[48538,48597]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[48738,48812],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void inputSearch(str searchStr)","pos":[49056,49094]},{"content":"Is called when the user enters a search string in a bound control.","pos":[49174,49240]},{"content":"public void resetUserSetting()","pos":[49374,49404]},{"content":"Resets the user settings for a form group control.","pos":[49492,49542]},{"content":"private void OnClicked(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[49692,49766],"source":"private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lostFocus()","pos":[50010,50033]},{"content":"Is called when the user brings a form group control out of focus.","pos":[50128,50193]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[50328,50397]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[50446,50546]},{"content":"public void endDrag()","pos":[50646,50667]},{"content":"Is called when the user has finished moving a form group control.","pos":[50764,50829]},{"content":"public void jumpRef()","pos":[50964,50985]},{"content":"Is called when a user clicks the Go to the Main Table Form command on a control shortcut menu in a form group control.","pos":[51082,51200]},{"content":"public void setFocus()","pos":[51282,51304]},{"content":"Sets the focus on the control.","pos":[51400,51430]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[51600,51637],"source":"public void filter(\\[str filterStr\\])"},{"content":"Is called when the user right-clicks a form group control and then clicks Filter By Selection.","pos":[51718,51812]},{"content":"public void displayControl()","pos":[51918,51946]},{"content":"Displays a form group control.","pos":[52036,52066]},{"content":"public void gotFocus()","pos":[52236,52258]},{"content":"Determines when the user brings a form group control into focus.","pos":[52354,52418]},{"content":"public void prefColumnSize(int width, int height)","pos":[52554,52603]},{"content":"Specifies the height and width of columns for a form group control.","pos":[52672,52739]},{"content":"public void dragLeave()","pos":[52872,52895]},{"content":"Is called when the user drags an object out of the bounds of a form group control.","pos":[52990,53072]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[53190,53265],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void enter()","pos":[53508,53527]},{"content":"Is called when the user moves focus to a form group control.","pos":[53626,53686]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[53826,53903]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[53944,54014]},{"pos":[54147,54164],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"content":"Adds a form control to a form group control.","pos":[54166,54210]},{"pos":[54325,54335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[54337,54348]},{"content":"A value that indicates the position of the control; optional.","pos":[54351,54412]},{"content":"The default value is nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[54413,54499]},{"content":"controlName","pos":[54511,54522]},{"content":"A value that indicates the position of the control; optional.","pos":[54525,54586]},{"content":"The default value is nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[54587,54673]},{"content":"insertAfter","pos":[54685,54696]},{"content":"A value that indicates the position of the control; optional.","pos":[54699,54760]},{"content":"The default value is nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[54761,54847]},{"pos":[54854,54866],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormControl object that configures form controls.","pos":[54868,54919]},{"pos":[54925,54944],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[55050,55060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[55062,55074]},{"content":"controlName","pos":[55088,55099]},{"content":"insertAfter","pos":[55113,55124]},{"pos":[55133,55145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55151,55170],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"content":"Adds a table field.","pos":[55172,55191]},{"pos":[55315,55325],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[55327,55339]},{"content":"fieldId","pos":[55353,55360]},{"content":"insertAfter","pos":[55374,55385]},{"content":"arrayIndex","pos":[55399,55409]},{"pos":[55418,55430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormControl object that modifies a form control.","pos":[55432,55482]},{"pos":[55488,55505],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"content":"Sets or returns a Boolean value that indicates whether a form group control is aligned in the same manner as other controls in a form.","pos":[55507,55641]},{"pos":[55696,55706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[55708,55713]},{"content":"A Boolean value that indicates whether a form group control is aligned in the same manner as other controls in a form; optional.","pos":[55716,55844]},{"pos":[55851,55863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a control is aligned; otherwise, false.","pos":[55865,55912]},{"pos":[55918,55938],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"content":"Sets or returns a Boolean value that indicates whether the child controls are aligned.","pos":[55940,56026]},{"pos":[56084,56094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[56096,56101]},{"content":"A Boolean value that indicates whether the child controls are aligned; optional.","pos":[56104,56184]},{"pos":[56191,56203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the child controls are aligned; otherwise, false.","pos":[56205,56262]},{"pos":[56268,56287],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether the control is aligned with other controls.","pos":[56289,56351]},{"pos":[56408,56418],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[56420,56425]},{"content":"A Boolean value that indicates whether a form group control is aligned with other controls.","pos":[56428,56519]},{"pos":[56526,56538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[56540,56596]},{"pos":[56603,56610],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned based on the longest label.","pos":[56612,56687]},{"pos":[56693,56709],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can modify the contents of the control.","pos":[56711,56778]},{"pos":[56832,56842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[56844,56849]},{"content":"A Boolean value that indicates whether data can be modified; optional.","pos":[56852,56922]},{"pos":[56929,56941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be modified; otherwise, false.","pos":[56943,56997]},{"pos":[57004,57011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[57013,57133]},{"pos":[57139,57159],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[57161,57244]},{"pos":[57287,57299],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[57301,57369]},{"pos":[57375,57396],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"content":"Sets or gets the level of modification that can be performed for a form group control.","pos":[57398,57484]},{"pos":[57535,57545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[57547,57552]},{"content":"An Integer data type that indicates the level of modification that can be performed; optional.","pos":[57555,57649]},{"pos":[57656,57668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the level of modification that can be performed.","pos":[57670,57750]},{"pos":[57757,57764],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use a FormAllowUserSetup enumeration value for the value parameter.","pos":[57766,57841]},{"pos":[57847,57866],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[57915,57925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[57927,57932]},{"pos":[57941,57953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57959,57979],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"content":"Sets or returns an integer value that indicates how controls in a form group control are arranged.","pos":[57981,58079]},{"pos":[58129,58139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[58141,58146]},{"content":"An integer value that indicates how controls in a form group control are arranged; optional.","pos":[58149,58241]},{"pos":[58248,58260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates how controls in a form group control are arranged.","pos":[58262,58344]},{"pos":[58351,58358],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use an ArrangeMethod enumeration value for the <ph id=\"ph1\">\\_</ph>value parameter.","pos":[58360,58433],"source":"You can use an ArrangeMethod enumeration value for the \\_value parameter."},{"pos":[58439,58457],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"content":"Sets or returns an integer value that specifies when the controls are arranged.","pos":[58459,58538]},{"pos":[58586,58596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[58598,58603]},{"content":"An integer value that specifies when the controls are arranged; optional.","pos":[58606,58679]},{"pos":[58686,58698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies when the controls are arranged.","pos":[58700,58763]},{"pos":[58769,58789],"content":"Method autoDataGroup","linkify":"Method autoDataGroup","nodes":[{"content":"Method autoDataGroup","pos":[0,20]}]},{"content":"Sets or returns a Boolean value that specifies whether a form group control can contain only the fields in the data group that are specified for the control.","pos":[58791,58948]},{"pos":[59006,59016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[59018,59023]},{"content":"A Boolean data type that indicates whether a form group control can contain only fields in the data group; optional.","pos":[59026,59142]},{"pos":[59149,59161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a form group control can contain only fields in the data group; otherwise, false.","pos":[59163,59252]},{"pos":[59259,59266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You use the FormGroupControl.dataGroup method to set or return a data group for a form group control.","pos":[59268,59369]},{"pos":[59375,59397],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[59399,59497]},{"pos":[59557,59567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[59569,59574]},{"content":"A Boolean value that indicates whether the system declares a variable of the same name as a form group control; optional.","pos":[59577,59698]},{"pos":[59705,59717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[59719,59798]},{"pos":[59805,59812],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[59814,59851]},{"pos":[59857,59879],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[59881,59930]},{"pos":[59982,59992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[59994,59999]},{"content":"An Integer data type that specifies the background color; optional.","pos":[60002,60069]},{"pos":[60076,60088],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[60090,60134]},{"pos":[60141,60148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[60150,60218]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[60224,60294]},{"content":"The second byte contains a value for green.","pos":[60299,60342]},{"content":"The third byte contains a value for blue.","pos":[60347,60388]},{"content":"The high-order byte must be 0 (zero).","pos":[60393,60430]},{"content":"The maximum value for a single byte is 255.","pos":[60435,60478]},{"pos":[60484,60506],"content":"Method backgroundImage","linkify":"Method backgroundImage","nodes":[{"content":"Method backgroundImage","pos":[0,22]}]},{"content":"Specifies the background image for a form group control.","pos":[60508,60564]},{"pos":[60636,60646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"image","pos":[60648,60653]},{"content":"An Integer data type that specifies how the image is drawn; optional.","pos":[60656,60725]},{"content":"drawMode","pos":[60737,60745]},{"content":"An Integer data type that specifies how the image is drawn; optional.","pos":[60748,60817]},{"pos":[60824,60836],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Image object.","pos":[60838,60854]},{"pos":[60860,60876],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[60878,60939]},{"pos":[60985,60995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60997,61002]},{"content":"An Integer data type that indicates the background style; optional.","pos":[61005,61072]},{"pos":[61079,61091],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[61093,61154]},{"pos":[61160,61176],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to move a form group control.","pos":[61178,61238]},{"pos":[61285,61295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[61297,61298]},{"content":"An integer value that indicates the y-coordinate for the move event.","pos":[61301,61369]},{"content":"y","pos":[61381,61382]},{"content":"An integer value that indicates the y-coordinate for the move event.","pos":[61385,61453]},{"pos":[61460,61472],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[61474,61513]},{"pos":[61519,61530],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to display text in the control.","pos":[61532,61608]},{"pos":[61649,61659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[61661,61666]},{"content":"An integer value that specifies the font weight; optional.","pos":[61669,61727]},{"pos":[61734,61746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between 0 (zero) and 9, inclusive.","pos":[61748,61799]},{"pos":[61806,61813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the font weight as follows:","pos":[61815,61880]},{"content":"0 – Use the default font weight.","pos":[61886,61918]},{"content":"1 – Thin.","pos":[61923,61932]},{"content":"2 – Extra-light.","pos":[61937,61953]},{"content":"3 – Light.","pos":[61958,61968]},{"content":"4 – Normal.","pos":[61973,61984]},{"content":"5 – Medium.","pos":[61989,62000]},{"content":"6 – Semibold.","pos":[62005,62018]},{"content":"7 – Bold.","pos":[62023,62032]},{"content":"8 – Extra-bold.","pos":[62037,62052]},{"content":"9 – Heavy.","pos":[62057,62067]},{"pos":[62073,62092],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"content":"Sets or returns the bottom margin of a form group control in pixels and specifies whether the margin is automatically adjusted.","pos":[62094,62221]},{"pos":[62287,62297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62299,62304]},{"content":"An AutoMode enumeration value that indicates whether the bottom margin is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.","pos":[62307,62490]},{"content":"mode","pos":[62502,62506]},{"content":"An AutoMode enumeration value that indicates whether the bottom margin is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.","pos":[62509,62692]},{"pos":[62699,62711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that specifies the bottom margin in pixels.","pos":[62713,62783]},{"pos":[62789,62812],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"content":"Sets or returns an AutoMode enumeration value that indicates whether the bottom margin is automatically adjusted.","pos":[62814,62927]},{"pos":[62989,62999],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[63001,63005]},{"content":"An AutoMode enumeration value that indicates whether the bottom margin is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.","pos":[63008,63191]},{"pos":[63198,63210],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"AutoMode::Auto if the margin is automatically adjusted based on other form settings, such as the font size; otherwise, AutoMode::Fixed.","pos":[63212,63347]},{"pos":[63353,63377],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"content":"Sets or returns the bottom margin of a form group control in pixels.","pos":[63379,63447]},{"pos":[63501,63511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63513,63518]},{"content":"An Integer data type that specifies the bottom margin in pixels; optional.","pos":[63521,63595]},{"pos":[63602,63614],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that specifies the bottom margin in pixels.","pos":[63616,63686]},{"pos":[63692,63708],"content":"Method breakable","linkify":"Method breakable","nodes":[{"content":"Method breakable","pos":[0,16]}]},{"pos":[63762,63772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63774,63779]},{"pos":[63788,63800],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63806,63828],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Calculates the size of a form group control, based on the number of characters and the number of lines.","pos":[63830,63933]},{"pos":[64000,64010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[64012,64017]},{"content":"An Integer data type that specifies the number of lines.","pos":[64020,64076]},{"content":"lines","pos":[64088,64093]},{"content":"An Integer data type that specifies the number of lines.","pos":[64096,64152]},{"pos":[64159,64171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Container data type value that specifies the size of a form group control.","pos":[64173,64249]},{"pos":[64255,64277],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"content":"Indicates whether a table field can be added.","pos":[64279,64324]},{"pos":[64420,64430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[64432,64444]},{"content":"fieldId","pos":[64458,64465]},{"content":"arrayIndex","pos":[64479,64489]},{"pos":[64498,64510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a table field can be added; otherwise, false.","pos":[64512,64565]},{"pos":[64571,64588],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"content":"Specifies whether a form group control can contain the specified form control.","pos":[64590,64668]},{"pos":[64727,64737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[64739,64746]},{"content":"A FormControl object that specifies a form control.","pos":[64749,64800]},{"pos":[64807,64819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a form group control can contain the specified form control; otherwise, false.","pos":[64821,64907]},{"pos":[64913,64927],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[64929,64968]},{"pos":[65012,65022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65024,65029]},{"content":"A String data type that specifies the caption text; optional.","pos":[65032,65093]},{"pos":[65100,65112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[65114,65168]},{"pos":[65174,65193],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[65195,65238]},{"pos":[65287,65297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65299,65304]},{"content":"An Integer data type that specifies the character set for the text font; optional.","pos":[65307,65389]},{"pos":[65396,65408],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[65410,65472]},{"pos":[65479,65486],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set, as shown in the following table.","pos":[65488,65592]},{"content":"Value","pos":[65596,65601]},{"content":"Description","pos":[65604,65615]},{"content":"0","pos":[65662,65663]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[65670,65683],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[65695,65696]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[65703,65719],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[65728,65729]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[65736,65751],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[65761,65763]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[65769,65781],"source":"MAC\\_CHARSET"},{"content":"128","pos":[65794,65797]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[65802,65819],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[65827,65830]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[65835,65850],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[65860,65863]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[65868,65883],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[65893,65896]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[65901,65921],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[65926,65929]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[65934,65948],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[65959,65962]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[65967,65983],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[65992,65995]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[66000,66019],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[66025,66028]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[66033,66048],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[66058,66061]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[66066,66082],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[66091,66094]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[66099,66118],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[66124,66127]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[66132,66144],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[66156,66244]},{"content":"Value","pos":[66248,66253]},{"content":"Description","pos":[66256,66267]},{"content":"130","pos":[66302,66305]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[66310,66324],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[66328,66414]},{"content":"Value","pos":[66418,66423]},{"content":"Description","pos":[66426,66437]},{"content":"177","pos":[66474,66477]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[66482,66497],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[66502,66505]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[66510,66525],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[66529,66606]},{"content":"Value","pos":[66610,66615]},{"content":"Description","pos":[66618,66629]},{"content":"222","pos":[66662,66665]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[66670,66683],"source":"THAI\\_CHARSET"},{"content":"The value that the default character is set to depends on the current system locale.","pos":[66687,66771]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[66772,66863],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[66864,66978]},{"pos":[66984,67002],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[67004,67049]},{"pos":[67097,67107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67109,67114]},{"content":"An Integer data type that specifies the color palette for a form group control; optional.","pos":[67117,67206]},{"pos":[67213,67225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between 0 (zero) and 2, inclusive.","pos":[67227,67272]},{"pos":[67279,67286],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[67288,67349]},{"content":"Value","pos":[67353,67358]},{"content":"Style","pos":[67361,67366]},{"content":"0","pos":[67423,67424]},{"content":"Default.","pos":[67431,67439]},{"content":"1","pos":[67458,67459]},{"content":"The Windows palette.","pos":[67466,67486]},{"content":"2","pos":[67493,67494]},{"content":"The true-color scheme.","pos":[67501,67523]},{"pos":[67531,67545],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"content":"Sets or returns the number of columns in a form group control in pixels, and specifies whether the number is automatically adjusted.","pos":[67547,67679]},{"pos":[67743,67753],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67755,67760]},{"content":"An AutoMode enumeration value that specifies whether the number of columns is fixed, or whether it is automatically adjusted based on other form settings, such as the form size.","pos":[67763,67940]},{"content":"mode","pos":[67952,67956]},{"content":"An AutoMode enumeration value that specifies whether the number of columns is fixed, or whether it is automatically adjusted based on other form settings, such as the form size.","pos":[67959,68136]},{"pos":[68143,68155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the number of columns in a form group control in pixels.","pos":[68157,68245]},{"pos":[68251,68269],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"content":"Sets or returns a value that indicates whether the number of columns in a form group control is fixed, or whether it is automatically adjusted based on other form settings, such as the form size.","pos":[68271,68466]},{"pos":[68529,68539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[68541,68545]},{"content":"An AutoMode enumeration value that specifies whether the number of columns is fixed, or whether it is automatically adjusted based on other form settings, such as the form size; optional.","pos":[68548,68735]},{"pos":[68742,68754],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Automode::Auto if the number of columns is automatically adjusted; otherwise, Automode::Fixed.","pos":[68756,68850]},{"pos":[68856,68874],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"content":"Sets or returns the amount of space between columns in a form group control in pixels and indicates whether the space is automatically adjusted based on other form settings, such the font size.","pos":[68876,69069]},{"pos":[69134,69144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69146,69151]},{"content":"An AutoMode enumeration value that indicates whether the amount of space between columns is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.","pos":[69154,69355]},{"content":"mode","pos":[69367,69371]},{"content":"An AutoMode enumeration value that indicates whether the amount of space between columns is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.","pos":[69374,69575]},{"pos":[69582,69594],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the space between columns in a form group control in pixels.","pos":[69596,69688]},{"pos":[69694,69716],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"content":"Sets or returns an AutoMode enumeration value that indicates whether the amount of space between columns in a form group control is automatically adjusted.","pos":[69718,69873]},{"pos":[69934,69944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[69946,69950]},{"content":"An AutoMode enumeration value that indicates whether the amount of space between columns is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.","pos":[69953,70154]},{"pos":[70161,70173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"AutoMode::Auto if the amount of space is automatically adjusted; otherwise, AutoMode::Fixed.","pos":[70175,70267]},{"pos":[70273,70296],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"content":"Sets or returns the amount of space between columns in a form group control in pixels.","pos":[70298,70384]},{"pos":[70437,70447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70449,70454]},{"content":"An Integer data type that specifies the amount of space between columns in a form group control in pixels; optional.","pos":[70457,70573]},{"pos":[70580,70592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the amount of space between columns in a form group control in pixels.","pos":[70594,70696]},{"pos":[70702,70721],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"content":"Sets or returns the number of columns in a form group control.","pos":[70723,70785]},{"pos":[70834,70844],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70846,70851]},{"content":"An Integer data type that specifies the number of columns in a form group control; optional.","pos":[70854,70946]},{"pos":[70953,70965],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that specifies the number of columns in a form group control.","pos":[70967,71055]},{"pos":[71061,71084],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[71086,71153]},{"pos":[71236,71246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71248,71253]},{"content":"A configurationKeyId system data type that specifies the configuration key ID; optional.","pos":[71256,71344]},{"pos":[71351,71363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[71365,71437]},{"pos":[71444,71451],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[71453,71534]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[71535,71628]},{"pos":[71634,71659],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are activated for a form group control.","pos":[71661,71766]},{"pos":[71811,71823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A List object that contains the IDs of configuration keys that are activated for a form group control.","pos":[71825,71927]},{"pos":[71934,71941],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list does not contain duplicate IDs.","pos":[71943,71983]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[71984,72132]},{"content":"In addition, the returned list contains any configuration key IDs that are applied to the extended data type.","pos":[72133,72242]},{"pos":[72248,72263],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"content":"Specifies whether a form group control contains a specified form control.","pos":[72265,72338]},{"pos":[72395,72405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[72407,72414]},{"content":"A FormControl object that specifies a form control.","pos":[72417,72468]},{"pos":[72475,72487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a form group control contains the specified form control; otherwise, false.","pos":[72489,72572]},{"pos":[72578,72597],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"content":"Returns the number of controls in a form group control.","pos":[72599,72654]},{"pos":[72692,72704],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that specifies the number of controls in a form group control.","pos":[72706,72795]},{"pos":[72802,72809],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can add a control to a form group control by using the FormGroupControl.addControl method.","pos":[72811,72905]},{"pos":[72911,72928],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"content":"Returns a FormControl object for a specified control in a form group control.","pos":[72930,73007]},{"pos":[73064,73074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[73076,73085]},{"content":"An Integer data type that specifies a control in a form group control.","pos":[73088,73158]},{"pos":[73165,73177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormControl object that can be used to modify and provide information about a form control.","pos":[73179,73272]},{"pos":[73278,73303],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[73305,73383]},{"pos":[73438,73448],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73450,73455]},{"content":"The string that contains the country/region codes to set; optional.","pos":[73458,73525]},{"pos":[73532,73544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[73546,73611]},{"pos":[73617,73649],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[73719,73729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73731,73736]},{"pos":[73745,73757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73763,73779],"content":"Method dataGroup","linkify":"Method dataGroup","nodes":[{"content":"Method dataGroup","pos":[0,16]}]},{"content":"Sets or returns a data group for a form group control.","pos":[73781,73835]},{"pos":[73881,73891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73893,73898]},{"content":"A String data type that specifies the data group; optional.","pos":[73901,73960]},{"pos":[73967,73979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A String data type value that specifies the data group.","pos":[73981,74036]},{"pos":[74043,74050],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A data group corresponds to a field group on a table that is a data source for the form.","pos":[74052,74140]},{"pos":[74146,74169],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[74171,74296]},{"pos":[74349,74359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74361,74366]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[74369,74443]},{"pos":[74450,74462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[74464,74576]},{"pos":[74583,74590],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[74592,74719]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[74720,74813]},{"pos":[74819,74836],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[74838,74910]},{"pos":[74961,74971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74973,74978]},{"pos":[74987,74999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[75001,75053]},{"pos":[75059,75079],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[75081,75280]},{"pos":[75330,75340],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75342,75347]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[75350,75424]},{"pos":[75431,75443],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[75445,75589]},{"pos":[75595,75610],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether drag-and-drop operations are enabled or disabled for the control.","pos":[75612,75696]},{"pos":[75741,75751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75753,75758]},{"content":"An integer value that indicates whether drag-and-drop behavior is enabled; optional.","pos":[75761,75845]},{"pos":[75852,75864],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[75866,75926]},{"pos":[75933,75940],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You use the FormGroupControl.dragLeave and FormGroupControl.dragOver methods to specify the behavior.","pos":[75942,76043]},{"content":"You can pass a value of true or false for the value parameter.","pos":[76044,76106]},{"pos":[76112,76127],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Is called when an object is dragged over the bounds of a form group control.","pos":[76129,76205]},{"pos":[76299,76309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[76311,76321]},{"content":"An Integer data type that indicates the y-coordinate of the object position.","pos":[76324,76400]},{"content":"dragMode","pos":[76412,76420]},{"content":"An Integer data type that indicates the y-coordinate of the object position.","pos":[76423,76499]},{"content":"x","pos":[76511,76512]},{"content":"An Integer data type that indicates the y-coordinate of the object position.","pos":[76515,76591]},{"content":"y","pos":[76603,76604]},{"content":"An Integer data type that indicates the y-coordinate of the object position.","pos":[76607,76683]},{"pos":[76690,76702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag system enumeration value that indicates whether the object is moved, copied, or not moved to a specified position.","pos":[76704,76829]},{"pos":[76836,76843],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking dragOver.","pos":[76845,77005]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[77006,77084]},{"pos":[77090,77107],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[77109,77205]},{"pos":[77295,77305],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[77307,77317]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[77320,77405]},{"content":"dragMode","pos":[77417,77425]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[77428,77513]},{"content":"x","pos":[77525,77526]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[77529,77614]},{"content":"y","pos":[77626,77627]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[77630,77715]},{"pos":[77722,77734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[77736,77801]},{"pos":[77807,77822],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[77824,77894]},{"pos":[77928,77940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[77942,78073]},{"pos":[78079,78098],"content":"Method enableChilds","linkify":"Method enableChilds","nodes":[{"content":"Method enableChilds","pos":[0,19]}]},{"content":"Specifies whether the child controls are enabled for a form group control.","pos":[78100,78174]},{"pos":[78232,78242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enable","pos":[78244,78250]},{"content":"A Boolean value that indicates whether the child controls are enabled; optional.","pos":[78253,78333]},{"pos":[78340,78352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the child controls are enabled; otherwise, false.","pos":[78354,78411]},{"pos":[78417,78431],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether the object is enabled or disabled.","pos":[78433,78486]},{"pos":[78538,78548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78550,78555]},{"content":"A Boolean value that indicates whether a form group control is enabled; optional.","pos":[78558,78639]},{"pos":[78646,78658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[78660,78708]},{"pos":[78715,78722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property lets you enable or disable controls at run time.","pos":[78724,78793]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[78794,78889]},{"content":"You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.","pos":[78890,79022]},{"pos":[79028,79041],"content":"Method expand","linkify":"Method expand","nodes":[{"content":"Method expand","pos":[0,13]}]},{"content":"Specifies whether a form group control is expanded.","pos":[79043,79094]},{"pos":[79146,79156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"expand","pos":[79158,79164]},{"content":"A Boolean value that indicates whether a form group control is expanded; optional.","pos":[79167,79249]},{"pos":[79256,79268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a form group control is expanded; otherwise, false.","pos":[79270,79329]},{"pos":[79335,79346],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font that is used for text in a control.","pos":[79348,79417]},{"pos":[79458,79468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79470,79475]},{"content":"A String data type that indicates the font for text in a form group control; optional.","pos":[79478,79564]},{"pos":[79571,79583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font that should be used, such as Tahoma or Verdana.","pos":[79585,79653]},{"pos":[79659,79674],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the font size to use for text in a control.","pos":[79676,79732]},{"pos":[79777,79787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79789,79794]},{"content":"An integer value that indicates the font size in points for text in a form group control; optional.","pos":[79797,79896]},{"pos":[79903,79915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[79917,79950]},{"pos":[79956,79980],"content":"Method frameOptionButton","linkify":"Method frameOptionButton","nodes":[{"content":"Method frameOptionButton","pos":[0,24]}]},{"content":"Sets or returns the option button for a form group control.","pos":[79982,80041]},{"pos":[80095,80105],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80107,80112]},{"content":"An Integer data type that specifies the type of option button; optional.","pos":[80115,80187]},{"pos":[80194,80206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the type of option button.","pos":[80208,80266]},{"pos":[80273,80280],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use a FormFrameOptionButton enumeration value for the value parameter.","pos":[80282,80360]},{"pos":[80366,80386],"content":"Method framePosition","linkify":"Method framePosition","nodes":[{"content":"Method framePosition","pos":[0,20]}]},{"content":"Sets or returns the location of the frame for a form group control.","pos":[80388,80455]},{"pos":[80505,80515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80517,80522]},{"content":"An integer value that specifies the location of the frame; optional.","pos":[80525,80593]},{"pos":[80600,80612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the location of the frame.","pos":[80614,80672]},{"pos":[80678,80694],"content":"Method frameType","linkify":"Method frameType","nodes":[{"content":"Method frameType","pos":[0,16]}]},{"content":"Sets or returns the frame style for a form group control.","pos":[80696,80753]},{"pos":[80799,80809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80811,80816]},{"content":"An integer value that indicates the frame style for a form group control; optional.","pos":[80819,80902]},{"pos":[80909,80921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the frame style for a form group control.","pos":[80923,80996]},{"pos":[81003,81010],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use a FormFrameType enumeration value for the value parameter.","pos":[81012,81082]},{"pos":[81088,81105],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a Boolean value that indicates whether the contents of a form group control have changed.","pos":[81107,81212]},{"pos":[81265,81275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[81277,81280]},{"content":"A Boolean value that indicates whether the contents of a form group control have changed; optional.","pos":[81283,81382]},{"pos":[81389,81401],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents have changed; otherwise, false.","pos":[81403,81455]},{"pos":[81461,81482],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[81484,81539]},{"pos":[81583,81595],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[81597,81660]},{"pos":[81666,81679],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[81681,81720]},{"pos":[81773,81783],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81785,81790]},{"content":"An integer value that indicates how the height is calculated; optional.","pos":[81793,81864]},{"content":"mode","pos":[81876,81880]},{"content":"An integer value that indicates how the height is calculated; optional.","pos":[81883,81954]},{"pos":[81961,81973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[81975,82011]},{"pos":[82018,82025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[82027,82080]},{"content":"Calculate the height according to the following table.","pos":[82081,82135]},{"content":"Mode","pos":[82139,82143]},{"content":"Height calculation","pos":[82159,82177]},{"content":"-1 – Exact","pos":[82369,82379]},{"content":"The exact height of the control in pixels is used.","pos":[82389,82439]},{"content":"0 – Auto","pos":[82484,82492]},{"content":"The height of the control is calculated automatically, and the value parameter is ignored.","pos":[82504,82594]},{"content":"1 – Column height","pos":[82599,82616]},{"content":"The layout of the form determines the height of the control.","pos":[82619,82679]},{"content":"The height and the height calculation mode can be set separately.","pos":[82713,82778]},{"pos":[82785,82793],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the height method to the set the control height to 120 pixels.","pos":[82795,82895]},{"pos":[84558,84575],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[84577,84639]},{"pos":[84686,84696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84698,84703]},{"content":"An integer value that indicates how the height of the control is calculated; optional.","pos":[84706,84792]},{"pos":[84799,84811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[84813,84834]},{"pos":[84841,84848],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[84850,84904]},{"content":"Mode","pos":[84908,84912]},{"content":"Height calculation","pos":[84924,84942]},{"content":"Exact","pos":[85130,85135]},{"content":"The exact height of the control in pixels is used.","pos":[85146,85196]},{"content":"Auto","pos":[85241,85245]},{"content":"The height of the control is calculated automatically, and the value parameter is ignored.","pos":[85257,85347]},{"content":"Column height","pos":[85352,85365]},{"content":"The layout of the form determines the height of the control.","pos":[85368,85428]},{"content":"The height of the control might change when the calculation mode is set to Auto or Column height.","pos":[85462,85559]},{"pos":[85566,85574],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the heightMode method to adjust the control height, based on an exact pixel value.","pos":[85576,85696]},{"pos":[87402,87420],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[87422,87461]},{"pos":[87509,87519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87521,87526]},{"content":"An integer value that specifies the height in pixels; optional.","pos":[87529,87592]},{"pos":[87599,87611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[87613,87634]},{"pos":[87641,87648],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the Exact height calculation mode is used.","pos":[87650,87740]},{"pos":[87747,87755],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the heightValue method that sets the height to 5 pixels.","pos":[87757,87851]},{"pos":[89556,89572],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Returns the Help text that is displayed in the status bar when a form group control is selected.","pos":[89574,89670]},{"pos":[89705,89717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A String data type value that contains the Help text.","pos":[89719,89772]},{"pos":[89778,89793],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.","pos":[89795,89906]},{"pos":[89951,89961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89963,89968]},{"content":"A String data type value that contains the Help text.","pos":[89971,90024]},{"pos":[90031,90043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that should be displayed at the bottom of the screen.","pos":[90045,90109]},{"pos":[90116,90123],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[90125,90193]},{"content":"The Help text must not exceed 250 characters.","pos":[90194,90239]},{"pos":[90245,90263],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"content":"Sets or gets a Boolean value that indicates whether a form group control is visible when the controls in the group are not visible.","pos":[90265,90396]},{"pos":[90452,90462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90464,90469]},{"content":"A Boolean value that indicates whether a form group control is visible; optional.","pos":[90472,90553]},{"pos":[90560,90572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the form group control is not visible; otherwise, false.","pos":[90574,90638]},{"pos":[90644,90666],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[90668,90731]},{"pos":[90783,90793],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90795,90800]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[90803,90870]},{"pos":[90877,90889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[90891,90941]},{"pos":[90947,90958],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Returns a handle for a form group control.","pos":[90960,91002]},{"pos":[91032,91044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the handle.","pos":[91046,91089]},{"pos":[91095,91113],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Indicates whether a form group control is a container.","pos":[91115,91169]},{"pos":[91210,91222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a form group control is a container; otherwise, false.","pos":[91224,91286]},{"pos":[91292,91310],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Indicates whether a form group control is displayed.","pos":[91312,91364]},{"pos":[91405,91417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a form group is displayed; otherwise, false.","pos":[91419,91471]},{"pos":[91477,91496],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[91498,91565]},{"pos":[91607,91619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[91621,91673]},{"pos":[91679,91704],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[91706,91805]},{"pos":[91874,91884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[91886,91903]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[91906,92034]},{"pos":[92041,92053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[92055,92214]},{"content":"For this method to return true, the AllowUserSetup property for the design and for all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[92215,92408]},{"pos":[92415,92422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[92424,92501]},{"content":"FormAllowUserSetup::No 0","pos":[92841,92865]},{"content":"No changes can be made to the control.","pos":[92876,92914]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[92915,93004]},{"content":"FormAllowUserSetup::Restricted 1","pos":[93009,93041]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[93044,93136]},{"content":"The user cannot move the control.","pos":[93137,93170]},{"content":"FormAllowUserSetup::Yes 2","pos":[93177,93202]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[93212,93304]},{"content":"The user can also move the control.","pos":[93305,93340]},{"pos":[93349,93357],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to determine the user setup rights for a control.","pos":[93359,93440]},{"pos":[94054,94067],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"content":"Sets or returns a Boolean value that indicates whether the text for a form group control is italic.","pos":[94069,94168]},{"pos":[94219,94229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[94231,94236]},{"content":"A Boolean value that indicates whether the text for a form group control is italic; optional.","pos":[94239,94332]},{"pos":[94339,94351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text is italic; otherwise, false.","pos":[94353,94398]},{"pos":[94404,94420],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"content":"Sets or returns the font weight of the label text for a form group control.","pos":[94422,94497]},{"pos":[94543,94553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[94555,94560]},{"content":"An integer value that specifies the font weight of the label text; optional.","pos":[94563,94639]},{"pos":[94646,94658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the font weight of the label text.","pos":[94660,94726]},{"pos":[94733,94740],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For more information about possible values for the value parameter and return value, see the bold method.","pos":[94742,94847]},{"pos":[94853,94877],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"content":"Sets or returns the character set of the font for the label text for a form group control.","pos":[94879,94969]},{"pos":[95023,95033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95035,95040]},{"content":"An integer value that specifies the character set of the font for the label text; optional.","pos":[95043,95134]},{"pos":[95141,95153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that specifies the character set of the font for the label text.","pos":[95155,95246]},{"pos":[95253,95260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A character set is a group of alphabetical, numeric, and other characters that have some relationship in common.","pos":[95262,95374]},{"content":"For example, a character set might be used for a specific country/region or language.","pos":[95375,95460]},{"content":"For a list of possible values for the value parameter, see the characterSet method.","pos":[95461,95544]},{"content":"For a list of possible return values, see the characterSet method.","pos":[95545,95611]},{"pos":[95617,95633],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"content":"Sets or returns the font for the label text for a form group control.","pos":[95635,95704]},{"pos":[95750,95760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95762,95767]},{"content":"A String data type that specifies the font for the label text; optional.","pos":[95770,95842]},{"pos":[95849,95861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A String data type value that specifies the font for the label text.","pos":[95863,95931]},{"pos":[95937,95957],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"content":"Sets or returns the font size of the label text for a form group control.","pos":[95959,96032]},{"pos":[96082,96092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96094,96099]},{"content":"An integer value that specifies the font size of the label text; optional.","pos":[96102,96176]},{"pos":[96183,96195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the font size of the label text.","pos":[96197,96261]},{"pos":[96267,96285],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"content":"Sets or returns a Boolean data type that indicates whether the label text for a form group control is italic.","pos":[96287,96396]},{"pos":[96452,96462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96464,96469]},{"content":"A Boolean value that indicates whether the label text is italic; optional.","pos":[96472,96546]},{"pos":[96553,96565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the label text is italic; otherwise, false.","pos":[96567,96618]},{"pos":[96624,96645],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"content":"Sets or returns a Boolean data type that indicates whether the label text for a form group control is underlined.","pos":[96647,96760]},{"pos":[96819,96829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96831,96836]},{"content":"A Boolean value that indicates whether the label text is underlined; optional.","pos":[96839,96917]},{"pos":[96924,96936],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the label text is underlined; otherwise, false.","pos":[96938,96993]},{"pos":[96999,97011],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"content":"Is called when the user moves the mouse pointer out of a form group control.","pos":[97013,97089]},{"pos":[97124,97136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the mouse pointer is moved out of a form group control; otherwise, false.","pos":[97138,97219]},{"pos":[97226,97233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking leave.","pos":[97235,97392]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[97393,97471]},{"pos":[97477,97488],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Sets or returns the horizontal position of a form group control in pixels and specifies how the position is calculated.","pos":[97490,97609]},{"pos":[97660,97670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97672,97677]},{"content":"An integer value that indicates how the position is calculated; optional.","pos":[97680,97753]},{"content":"mode","pos":[97765,97769]},{"content":"An integer value that indicates how the position is calculated; optional.","pos":[97772,97845]},{"pos":[97852,97864],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the horizontal position of a form group control in pixels.","pos":[97866,97956]},{"pos":[97963,97970],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The mode parameter can be one of the following values:","pos":[97972,98026]},{"content":"-1 (default) – Use Exact mode, where the value of the value parameter is used exactly.","pos":[98032,98118]},{"content":"A FormLeft enumeration value.","pos":[98123,98152]},{"pos":[98159,98167],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the left method that sets the horizontal position to 50 pixels.","pos":[98169,98270]},{"pos":[99929,99946],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"content":"Sets or returns the size of the left margin for a form group control in pixels and specifies whether the size is automatically adjusted.","pos":[99948,100084]},{"pos":[100148,100158],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100160,100165]},{"content":"An AutoMode enumeration value that specifies whether the size of the left margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.","pos":[100168,100347]},{"content":"mode","pos":[100359,100363]},{"content":"An AutoMode enumeration value that specifies whether the size of the left margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.","pos":[100366,100545]},{"pos":[100552,100564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the size of the left margin for a form group control in pixels.","pos":[100566,100661]},{"pos":[100667,100688],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"content":"Sets or returns a value that indicates whether the size of the left margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.","pos":[100690,100878]},{"pos":[100938,100948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[100950,100954]},{"content":"An AutoMode enumeration value that specifies whether the size of the left margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.","pos":[100957,101136]},{"pos":[101143,101155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Automode::Auto if the size of the left margin is automatically adjusted; otherwise, Automode::Fixed.","pos":[101157,101257]},{"pos":[101263,101285],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"content":"Sets or returns the size of the left margin for a form group control in pixels.","pos":[101287,101366]},{"pos":[101418,101428],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101430,101435]},{"content":"An integer value that specifies the size of the left margin for a form group control in pixels; optional.","pos":[101438,101543]},{"pos":[101550,101562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the size of the left margin for a form group control in pixels.","pos":[101564,101659]},{"pos":[101665,101680],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets or returns a value that indicates how the horizontal position of a form group control is calculated.","pos":[101682,101787]},{"pos":[101832,101842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101844,101849]},{"content":"An Integer data type that indicates how the horizontal position is calculated; optional.","pos":[101852,101940]},{"pos":[101947,101959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that indicates how the horizontal position is calculated: -1 for an exact pixel value, or a FormLeft enumeration value.","pos":[101961,102107]},{"pos":[102114,102122],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the leftMode method that calculates the horizontal position of a form group control, based on an exact pixel value.","pos":[102124,102277]},{"pos":[103978,103994],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Sets or returns the horizontal position of a form group control in pixels.","pos":[103996,104070]},{"pos":[104116,104126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104128,104133]},{"content":"An integer value that indicates the horizontal position in pixels; optional.","pos":[104136,104212]},{"pos":[104219,104231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the horizontal position in pixels.","pos":[104233,104299]},{"pos":[104306,104313],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The horizontal position is not changed unless the left mode is set for an exact pixel value.","pos":[104315,104407]},{"pos":[104414,104422],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the leftValue method that sets the horizontal position to 50 pixels.","pos":[104424,104530]},{"pos":[106231,106251],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[106253,106306]},{"pos":[106364,106374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[106376,106381]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[106384,106478]},{"pos":[106485,106497],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[106499,106572]},{"pos":[106578,106598],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the user double-clicks a form group control.","pos":[106600,106659]},{"pos":[106751,106761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[106763,106764]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[106767,106828]},{"content":"y","pos":[106840,106841]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[106844,106905]},{"content":"button","pos":[106917,106923]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[106926,106987]},{"content":"Ctrl","pos":[106999,107003]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[107006,107067]},{"content":"Shift","pos":[107079,107084]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[107087,107148]},{"pos":[107155,107167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[107169,107208]},{"pos":[107215,107222],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[107224,107328]},{"content":"The following are the possible values for the button parameter.","pos":[107329,107392]},{"content":"1","pos":[107458,107459]},{"content":"Left mouse button.","pos":[107464,107482]},{"content":"2","pos":[107489,107490]},{"content":"Middle mouse button.","pos":[107495,107515]},{"content":"3","pos":[107520,107521]},{"content":"Right mouse button.","pos":[107526,107545]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseDblClick.","pos":[107550,107715]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[107716,107794]},{"pos":[107800,107816],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user presses the mouse button in a form group control.","pos":[107818,107891]},{"pos":[107979,107989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[107991,107992]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[107995,108056]},{"content":"y","pos":[108068,108069]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[108072,108133]},{"content":"button","pos":[108145,108151]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[108154,108215]},{"content":"Ctrl","pos":[108227,108231]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[108234,108295]},{"content":"Shift","pos":[108307,108312]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[108315,108376]},{"pos":[108383,108395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[108397,108436]},{"pos":[108443,108450],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[108452,108556]},{"content":"The following are the possible values for the button parameter.","pos":[108557,108620]},{"content":"1","pos":[108686,108687]},{"content":"Left mouse button.","pos":[108692,108710]},{"content":"2","pos":[108717,108718]},{"content":"Middle mouse button.","pos":[108723,108743]},{"content":"3","pos":[108748,108749]},{"content":"Right mouse button.","pos":[108754,108773]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseDown.","pos":[108778,108939]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[108940,109018]},{"pos":[109024,109040],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over a form group control.","pos":[109042,109116]},{"pos":[109204,109214],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[109216,109217]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[109220,109281]},{"content":"y","pos":[109293,109294]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[109297,109358]},{"content":"button","pos":[109370,109376]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[109379,109440]},{"content":"Ctrl","pos":[109452,109456]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[109459,109520]},{"content":"Shift","pos":[109532,109537]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[109540,109601]},{"pos":[109608,109620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[109622,109661]},{"pos":[109668,109675],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[109677,109781]},{"content":"The following are the possible values for the <ph id=\"ph1\">\\_</ph>button parameter.","pos":[109782,109847],"source":" The following are the possible values for the \\_button parameter."},{"content":"1","pos":[109913,109914]},{"content":"Left mouse button.","pos":[109919,109937]},{"content":"2","pos":[109944,109945]},{"content":"Middle mouse button.","pos":[109950,109970]},{"content":"3","pos":[109975,109976]},{"content":"Right mouse button.","pos":[109981,110000]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseMove.","pos":[110005,110166]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[110167,110245]},{"pos":[110251,110265],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over a form group control.","pos":[110267,110343]},{"pos":[110429,110439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[110441,110442]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[110445,110506]},{"content":"y","pos":[110518,110519]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[110522,110583]},{"content":"button","pos":[110595,110601]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[110604,110665]},{"content":"Ctrl","pos":[110677,110681]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[110684,110745]},{"content":"Shift","pos":[110757,110762]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[110765,110826]},{"pos":[110833,110845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[110847,110886]},{"pos":[110893,110900],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[110902,111006]},{"content":"The following are the possible values for the <ph id=\"ph1\">\\_</ph>button parameter.","pos":[111007,111072],"source":" The following are the possible values for the \\_button parameter."},{"content":"1","pos":[111138,111139]},{"content":"Left mouse button.","pos":[111144,111162]},{"content":"2","pos":[111169,111170]},{"content":"Middle mouse button.","pos":[111175,111195]},{"content":"3","pos":[111200,111201]},{"content":"Right mouse button.","pos":[111206,111225]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseUp.","pos":[111230,111389]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[111390,111468]},{"pos":[111474,111492],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"content":"Moves a specified control.","pos":[111494,111520]},{"pos":[111591,111601],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[111603,111612]},{"content":"An integer value that indicates which control the specified control is inserted after; optional.","pos":[111615,111711]},{"content":"insertAfterId","pos":[111723,111736]},{"content":"An integer value that indicates which control the specified control is inserted after; optional.","pos":[111739,111835]},{"pos":[111842,111854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that specifies the control ID.","pos":[111856,111913]},{"pos":[111919,111930],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[111932,112083]},{"pos":[112124,112134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[112136,112141]},{"content":"The name to assign to the control.","pos":[112144,112178]},{"pos":[112185,112197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[112199,112263]},{"pos":[112270,112277],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[112279,112373]},{"content":"It must begin with a letter.","pos":[112379,112407]},{"content":"It cannot exceed 250 characters.","pos":[112412,112444]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[112449,112503],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[112508,112548]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[112553,112663]},{"pos":[112669,112692],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[112745,112755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[112757,112762]},{"pos":[112771,112783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[112789,112807],"content":"Method optionValue","linkify":"Method optionValue","nodes":[{"content":"Method optionValue","pos":[0,18]}]},{"content":"Sets or returns the value for the option button that is associated with a form group control.","pos":[112809,112902]},{"pos":[112950,112960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[112962,112967]},{"content":"An integer value that specifies the value for the option button; optional.","pos":[112970,113044]},{"pos":[113051,113063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the value for the option button.","pos":[113065,113129]},{"pos":[113136,113143],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the FormGroupControl.frameOptionButton method to set or return the option button for a form group control.","pos":[113145,113255]},{"pos":[113261,113288],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[113340,113352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[113358,113378],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[113380,113425]},{"pos":[113472,113484],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[113486,113521]},{"pos":[113527,113545],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"content":"Sets or returns the size of the right margin for a form group control in pixels and specifies whether the size is automatically adjusted.","pos":[113547,113684]},{"pos":[113749,113759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[113761,113766]},{"content":"An AutoMode enumeration value that specifies whether the size of the right margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.","pos":[113769,113949]},{"content":"mode","pos":[113961,113965]},{"content":"An AutoMode enumeration value that specifies whether the size of the right margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.","pos":[113968,114148]},{"pos":[114155,114167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the size of the right margin for a form group control in pixels.","pos":[114169,114265]},{"pos":[114271,114293],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"content":"Sets or returns a value that indicates whether the size of the right margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.","pos":[114295,114484]},{"pos":[114545,114555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[114557,114561]},{"content":"An AutoMode enumeration value that specifies whether the size of the right margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.","pos":[114564,114744]},{"pos":[114751,114763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Automode enumeration value that specifies whether the size of the right margin is fixed, or whether it is automatically adjusted: Auto if the size of the right margin is automatically adjusted; otherwise, Fixed.","pos":[114765,114979]},{"pos":[114985,115008],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"content":"Sets or returns the size of the right margin for a form group control in pixels.","pos":[115010,115090]},{"pos":[115143,115153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[115155,115160]},{"content":"An integer value that specifies the size of the right margin for a form group control in pixels; optional.","pos":[115163,115269]},{"pos":[115276,115288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the size of the right margin for a form group control in pixels.","pos":[115290,115386]},{"pos":[115392,115409],"content":"Method saveFilter","linkify":"Method saveFilter","nodes":[{"content":"Method saveFilter","pos":[0,17]}]},{"pos":[115464,115474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[115476,115481]},{"pos":[115490,115502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[115508,115526],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the security key ID for a form group control.","pos":[115528,115589]},{"pos":[115657,115667],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[115669,115674]},{"content":"A securityKeyId data type that contains the ID; optional.","pos":[115677,115734]},{"pos":[115741,115753],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A securityKeyId data type value that contains the ID.","pos":[115755,115808]},{"pos":[115814,115836],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows a shortcut menu for a form group control.","pos":[115838,115885]},{"pos":[115940,115950],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[115952,115962]},{"content":"An integer value that specifies the handle for the shortcut menu.","pos":[115965,116030]},{"pos":[116037,116049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that specifies the selection of the user.","pos":[116051,116109]},{"pos":[116115,116126],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a Boolean value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[116128,116263]},{"pos":[116312,116322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[116324,116329]},{"content":"A Boolean value that indicates whether the control is skipped; optional.","pos":[116332,116404]},{"pos":[116411,116423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[116425,116531]},{"pos":[116537,116548],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"content":"Sorts the controls that are contained in a form group control.","pos":[116550,116612]},{"pos":[116667,116677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[116679,116692]},{"content":"A system enumeration value that indicates the sort order for controls; optional.","pos":[116695,116775]},{"pos":[116782,116794],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that contains the sort order.","pos":[116796,116842]},{"pos":[116848,116860],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[116902,116912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[116914,116919]},{"pos":[116928,116940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[116946,116960],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Returns the text string for the tooltip for a form group control.","pos":[116962,117027]},{"pos":[117060,117072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string value that contains the text for the tooltip.","pos":[117074,117128]},{"pos":[117134,117144],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Sets or returns the vertical position of a form group control in pixels and specifies how the position is calculated.","pos":[117146,117263]},{"pos":[117313,117323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[117325,117330]},{"content":"An integer value that indicates how the vertical position is calculated; optional.","pos":[117333,117415]},{"content":"mode","pos":[117427,117431]},{"content":"An integer value that indicates how the vertical position is calculated; optional.","pos":[117434,117516]},{"pos":[117523,117535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the vertical position of a form group control in pixels.","pos":[117537,117625]},{"pos":[117632,117639],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The mode parameter can be one of the following values:","pos":[117641,117695]},{"content":"-1 (default) – Use Exact mode, where the value of the value parameter is used exactly.","pos":[117701,117787]},{"content":"A FormTop enumeration value.","pos":[117792,117820]},{"pos":[117827,117835],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example calls the top method to set the vertical position to 50 pixels.","pos":[117837,117922]},{"pos":[119580,119596],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"content":"Sets or returns the top margin for a form group control in pixels and specifies whether the size is automatically adjusted.","pos":[119598,119721]},{"pos":[119784,119794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119796,119801]},{"content":"An AutoMode enumeration value that specifies whether the size of the top margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.","pos":[119804,119982]},{"content":"mode","pos":[119994,119998]},{"content":"An AutoMode enumeration value that specifies whether the size of the top margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.","pos":[120001,120179]},{"pos":[120186,120198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that specifies the size of the top margin for a form group control in pixels.","pos":[120200,120288]},{"pos":[120294,120314],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"content":"Sets or returns a value that indicates whether the size of the top margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.","pos":[120316,120503]},{"pos":[120562,120572],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[120574,120578]},{"content":"An Automode enumeration value that specifies whether the size of the top margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.","pos":[120581,120759]},{"pos":[120766,120778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Automode enumeration value of Auto if the size of the top margin is automatically adjusted; otherwise, Fixed.","pos":[120780,120892]},{"pos":[120898,120919],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[120970,120980],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[120982,120987]},{"pos":[120996,121008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121014,121028],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets or returns a value that indicates how the vertical position of a form group control is calculated.","pos":[121030,121133]},{"pos":[121177,121187],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121189,121194]},{"content":"An integer that indicates how the vertical position is calculated; optional.","pos":[121197,121273]},{"pos":[121280,121292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates how the vertical position is calculated: -1 for an exact pixel value, or a FormTop enumeration value.","pos":[121294,121427]},{"pos":[121434,121442],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the topMode method that calculates the vertical position, based on an exact pixel value.","pos":[121444,121570]},{"pos":[123269,123284],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Sets or returns the vertical position of a form group control in pixels.","pos":[123286,123358]},{"pos":[123403,123413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[123415,123420]},{"content":"An Integer data type that specifies the vertical position.","pos":[123423,123481]},{"pos":[123488,123500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that specifies the vertical position of a form group control.","pos":[123502,123590]},{"pos":[123597,123604],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The vertical position is not changed unless the top mode is set for an exact pixel value.","pos":[123606,123695]},{"content":"For more information, see the topMode method.","pos":[123696,123741]},{"pos":[123748,123756],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the topValue method that sets the vertical position to 50 pixels.","pos":[123758,123861]},{"pos":[125548,125559],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[125600,125610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[125612,125617]},{"pos":[125626,125638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[125644,125660],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[125662,125729]},{"pos":[125783,125793],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[125795,125800]},{"content":"The value to assign to the underline property of the control; optional.","pos":[125803,125874]},{"pos":[125881,125893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[125895,125959]},{"pos":[125965,125992],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[126056,126066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[126068,126072]},{"pos":[126081,126093],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[126099,126114],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[126116,126159]},{"pos":[126204,126214],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[126216,126221]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[126224,126296]},{"pos":[126303,126315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[126317,126347]},{"pos":[126353,126372],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[126374,126422]},{"pos":[126471,126481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[126483,126488]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[126491,126568]},{"pos":[126575,126587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[126589,126624]},{"pos":[126630,126650],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[126652,126711]},{"pos":[126761,126771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[126773,126778]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[126781,126869]},{"pos":[126876,126888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[126890,126936]},{"pos":[126942,126960],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[126962,127045]},{"pos":[127093,127103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[127105,127110]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[127113,127193]},{"pos":[127200,127212],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[127214,127270]},{"pos":[127276,127293],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[127295,127347]},{"pos":[127394,127404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[127406,127411]},{"content":"The user height for the control; optional.","pos":[127414,127456]},{"pos":[127463,127475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[127477,127516]},{"pos":[127522,127537],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Sets or returns an integer data type that indicates whether a control is hidden from the user.","pos":[127539,127633]},{"pos":[127678,127688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[127690,127695]},{"content":"An integer value that indicates whether a form group control is hidden from the user; optional.","pos":[127698,127793]},{"pos":[127800,127812],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the form group control is hidden from the user; otherwise, 0.","pos":[127814,127880]},{"pos":[127887,127894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user can hide a form group control by right-clicking the control and then clicking Hide.","pos":[127896,127988]},{"content":"This method lets you programmatically determine whether the control is hidden.","pos":[127989,128067]},{"pos":[128073,128096],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[128098,128154]},{"pos":[128207,128217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[128219,128224]},{"content":"The organization container to set for the control; optional.","pos":[128227,128287]},{"pos":[128294,128306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[128308,128351]},{"pos":[128357,128378],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[128380,128434]},{"pos":[128485,128495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[128497,128502]},{"content":"The organization sibling to set for the control; optional.","pos":[128505,128563]},{"pos":[128570,128582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[128584,128625]},{"pos":[128631,128652],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[128654,128703]},{"pos":[128754,128764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[128766,128771]},{"content":"The user label text to set for the control; optional.","pos":[128774,128827]},{"pos":[128834,128846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[128848,128884]},{"pos":[128890,128914],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[128916,128969]},{"pos":[129023,129033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[129035,129040]},{"content":"The user security level to set for the control; optional.","pos":[129043,129100]},{"pos":[129107,129119],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[129121,129161]},{"pos":[129167,129182],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns an integer that indicates whether the form group control is skipped when the user presses the TAB key to move to controls.","pos":[129184,129322]},{"pos":[129367,129377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[129379,129384]},{"content":"An integer that indicates the user setting for whether a form group control is skipped; optional.","pos":[129387,129484]},{"pos":[129491,129503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the form group control is skipped; otherwise, 0.","pos":[129505,129558]},{"pos":[129565,129572],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user chooses whether to skip a form group control by using the User setup form.","pos":[129574,129657]},{"pos":[129663,129679],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns an integer that indicates the width of a form group control in pixels.","pos":[129681,129767]},{"pos":[129813,129823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[129825,129830]},{"content":"An integer that indicates the width of a form group control in pixels; optional.","pos":[129833,129913]},{"pos":[129920,129932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the width of a form group control in pixels; 0 (zero) if the user did not specify a width.","pos":[129934,130056]},{"pos":[130063,130070],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies the width in characters by using the User setup form.","pos":[130072,130144]},{"content":"This method returns the width in pixels, based on six times the number of characters.","pos":[130145,130230]},{"pos":[130236,130256],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"content":"Specifies whether to use the user-specified layout of a form group control.","pos":[130258,130333]},{"pos":[130391,130401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[130403,130408]},{"content":"A Boolean value that specifies whether to use the user-specified layout of a form group control; optional.","pos":[130411,130517]},{"pos":[130524,130536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the user-specified layout of a form group control is used; otherwise, false.","pos":[130538,130622]},{"pos":[130629,130636],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies the layout by using the User setup form.","pos":[130638,130697]},{"pos":[130703,130725],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the amount of space above and below a form group control in pixels, and specifies how the space is calculated.","pos":[130727,130850]},{"pos":[130919,130929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[130931,130936]},{"content":"An AutoMode system enumeration value that indicates how the space is calculated; optional.","pos":[130939,131029]},{"content":"mode","pos":[131041,131045]},{"content":"An AutoMode system enumeration value that indicates how the space is calculated; optional.","pos":[131048,131138]},{"pos":[131145,131157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the amount of space above and below a control.","pos":[131159,131237]},{"pos":[131243,131269],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets or returns a value that indicates how the amount of space above and below a form group control is calculated.","pos":[131271,131385]},{"pos":[131450,131460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[131462,131466]},{"content":"An AutoMode system enumeration value that indicates how the space is calculated; optional.","pos":[131469,131559]},{"pos":[131566,131578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An AutoMode enumeration that is set to Auto if the space is automatically adjusted based on other form settings, such as the font size; otherwise, Fixed.","pos":[131580,131733]},{"pos":[131739,131766],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the amount of space above and below a form group control in pixels.","pos":[131768,131848]},{"pos":[131905,131915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[131917,131922]},{"content":"An integer that indicates the amount of space above and below a control; optional.","pos":[131925,132007]},{"pos":[132014,132026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the amount of space above and below a control.","pos":[132028,132106]},{"pos":[132112,132131],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[132180,132190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[132192,132197]},{"pos":[132206,132218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[132224,132238],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Gets or sets a Boolean data type that displays or hides a form group control.","pos":[132240,132317]},{"pos":[132369,132379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[132381,132386]},{"content":"A Boolean value that displays or hides a form group control; optional.","pos":[132389,132459]},{"pos":[132466,132478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the form group control is displayed; otherwise, false.","pos":[132480,132542]},{"pos":[132548,132560],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[132562,132600]},{"pos":[132652,132662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[132664,132669]},{"content":"An integer that indicates how the width is calculated.","pos":[132672,132726]},{"content":"This can be one of the following values:","pos":[132727,132767]},{"content":"mode","pos":[132779,132783]},{"content":"An integer that indicates how the width is calculated.","pos":[132786,132840]},{"content":"This can be one of the following values:","pos":[132841,132881]},{"pos":[132888,132900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[132902,132937]},{"pos":[132944,132951],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[132953,133006]},{"content":"Calculate the width according to the following table.","pos":[133007,133060]},{"content":"Mode","pos":[133064,133068]},{"content":"Width calculation","pos":[133083,133100]},{"content":"-1 – Exact","pos":[133290,133300]},{"content":"The exact width of the control in pixels is used.","pos":[133309,133358]},{"content":"0 – Auto","pos":[133403,133411]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[133422,133511]},{"content":"1 – Column width","pos":[133516,133532]},{"content":"The layout of the form determines the width of the control.","pos":[133535,133594]},{"content":"The width and the width calculation mode can be set separately.","pos":[133628,133691]},{"pos":[133698,133706],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the width method to set the control width to 200 pixels.","pos":[133708,133802]},{"pos":[135463,135479],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode for the width of the control.","pos":[135481,135544]},{"pos":[135590,135600],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135602,135607]},{"content":"An integer value that indicates how the control width is calculated; optional.","pos":[135610,135688]},{"pos":[135695,135707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the width current calculation mode.","pos":[135709,135776]},{"pos":[135783,135790],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[135792,135845]},{"content":"Mode","pos":[135849,135853]},{"content":"Width calculation","pos":[135864,135881]},{"content":"Exact","pos":[136067,136072]},{"content":"The exact width of the control in pixels is used.","pos":[136082,136131]},{"content":"Auto","pos":[136176,136180]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[136191,136280]},{"content":"Column width","pos":[136285,136297]},{"content":"The layout of the form determines the width of the control.","pos":[136300,136359]},{"content":"The width of the control might change when the calculation mode is set to Auto or Column width.","pos":[136393,136488]},{"pos":[136495,136503],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the widthMode method to calculate the control width, based on an exact pixel value.","pos":[136505,136626]},{"pos":[138330,138347],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[138349,138387]},{"pos":[138434,138444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138446,138451]},{"content":"An integer that specifies the width of the control in pixels.","pos":[138454,138515]},{"pos":[138522,138534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[138536,138571]},{"pos":[138578,138585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the Exact width calculation mode.","pos":[138587,138660]},{"pos":[138667,138675],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the widthValue method that sets the control width to 200 pixels.","pos":[138677,138779]},{"pos":[140483,140512],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[140630,140640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[140642,140658]},{"content":"objectMethodToCall","pos":[140672,140690]},{"content":"overrideObject","pos":[140704,140718]},{"pos":[140726,140737],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Is called when a user drops a form group control or an item in a form group control into a new position.","pos":[140739,140843]},{"pos":[140929,140939],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[140941,140951]},{"content":"An integer value that indicates the y-coordinate of the object position.","pos":[140954,141026]},{"content":"dragMode","pos":[141038,141046]},{"content":"An integer value that indicates the y-coordinate of the object position.","pos":[141049,141121]},{"content":"x","pos":[141133,141134]},{"content":"An integer value that indicates the y-coordinate of the object position.","pos":[141137,141209]},{"content":"y","pos":[141221,141222]},{"content":"An integer value that indicates the y-coordinate of the object position.","pos":[141225,141297]},{"pos":[141304,141311],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking drop.","pos":[141313,141469]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[141470,141548]},{"pos":[141554,141572],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[141657,141667],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[141669,141675]},{"content":"e","pos":[141689,141690]},{"pos":[141698,141712],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[141793,141803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[141805,141811]},{"content":"e","pos":[141825,141826]},{"pos":[141834,141851],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer away from the control.","pos":[141853,141923]},{"pos":[141960,141967],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseLeave.","pos":[141969,142131]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[142132,142210]},{"pos":[142216,142230],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Is called when the user right-clicks a form group control.","pos":[142232,142290]},{"pos":[142324,142331],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking context.","pos":[142333,142492]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[142493,142571]},{"pos":[142577,142588],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies a form group control.","pos":[142590,142618]},{"pos":[142648,142658],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[142660,142693]},{"pos":[142722,142734],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes a form group control.","pos":[142736,142764]},{"pos":[142795,142809],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[142842,142856],"content":"Method clicked","linkify":"Method clicked","nodes":[{"content":"Method clicked","pos":[0,14]}]},{"content":"Is called when a form group control is clicked by the user.","pos":[142858,142917]},{"pos":[142950,142966],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[143049,143059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[143061,143067]},{"content":"e","pos":[143081,143082]},{"pos":[143090,143108],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Is called when the user enters a search string in a bound control.","pos":[143110,143176]},{"pos":[143227,143237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[143239,143248]},{"content":"A String data type that contains search text; optional.","pos":[143251,143306]},{"pos":[143313,143320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking inputSearch.","pos":[143322,143485]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[143486,143564]},{"pos":[143570,143593],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for a form group control.","pos":[143595,143645]},{"pos":[143687,143703],"content":"Method OnClicked","linkify":"Method OnClicked","nodes":[{"content":"Method OnClicked","pos":[0,16]}]},{"pos":[143786,143796],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[143798,143804]},{"content":"e","pos":[143818,143819]},{"pos":[143827,143843],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Is called when the user brings a form group control out of focus.","pos":[143845,143910]},{"pos":[143946,143953],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking lostFocus.","pos":[143955,144116]},{"content":"For information about best practices for forms and code, see the No Code in Forms form.","pos":[144117,144204]},{"pos":[144210,144223],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[144225,144325]},{"pos":[144407,144417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[144419,144429]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[144432,144517]},{"content":"dragMode","pos":[144529,144537]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[144540,144625]},{"content":"x","pos":[144637,144638]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[144641,144726]},{"content":"y","pos":[144738,144739]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[144742,144827]},{"pos":[144833,144847],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished moving a form group control.","pos":[144849,144914]},{"pos":[144947,144961],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"content":"Is called when a user clicks the Go to the Main Table Form command on a control shortcut menu in a form group control.","pos":[144963,145081]},{"pos":[145114,145129],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[145131,145161]},{"pos":[145195,145208],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"content":"Is called when the user right-clicks a form group control and then clicks Filter By Selection.","pos":[145210,145304]},{"pos":[145352,145362],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[145364,145373]},{"content":"A String data type that specifies the text for the filter; optional.","pos":[145376,145444]},{"pos":[145451,145458],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking filter.","pos":[145460,145618]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[145619,145697]},{"pos":[145703,145724],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays a form group control.","pos":[145726,145756]},{"pos":[145796,145811],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Determines when the user brings a form group control into focus.","pos":[145813,145877]},{"pos":[145912,145919],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking gotFocus.","pos":[145921,146081]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[146082,146160]},{"pos":[146166,146187],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the height and width of columns for a form group control.","pos":[146189,146256]},{"pos":[146318,146328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[146330,146335]},{"content":"An integer value that specifies the height of columns.","pos":[146338,146392]},{"content":"height","pos":[146404,146410]},{"content":"An integer value that specifies the height of columns.","pos":[146413,146467]},{"pos":[146473,146489],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Is called when the user drags an object out of the bounds of a form group control.","pos":[146491,146573]},{"pos":[146609,146616],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking dragLeave.","pos":[146618,146779]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[146780,146858]},{"pos":[146864,146881],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[146965,146975],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[146977,146983]},{"content":"e","pos":[146997,146998]},{"pos":[147006,147018],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"content":"Is called when the user moves focus to a form group control.","pos":[147020,147080]},{"pos":[147112,147119],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking enter.","pos":[147121,147278]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[147279,147357]},{"pos":[147363,147380],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[147382,147452]},{"pos":[147542,147552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[147554,147555]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[147558,147619]},{"content":"y","pos":[147631,147632]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[147635,147696]},{"content":"button","pos":[147708,147714]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[147717,147778]},{"content":"Ctrl","pos":[147790,147794]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[147797,147858]},{"content":"Shift","pos":[147870,147875]},{"content":"A Boolean value that specifies whether the SHIFT key is down.","pos":[147878,147939]},{"pos":[147946,147953],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following are the possible values for the button parameter.","pos":[147955,148018]},{"content":"1","pos":[148084,148085]},{"content":"Left mouse button.","pos":[148090,148108]},{"content":"2","pos":[148115,148116]},{"content":"Middle mouse button.","pos":[148121,148141]},{"content":"3","pos":[148146,148147]},{"content":"Right mouse button.","pos":[148152,148171]},{"content":"You can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseEnter.","pos":[148176,148338]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[148339,148417]},{"pos":[148422,148443],"content":"Class FormGuidControl","linkify":"Class FormGuidControl","nodes":[{"content":"Class FormGuidControl","pos":[0,21]}]},{"pos":[148495,148502],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[148508,148516],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[148522,148529],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[148533,148539]},{"content":"Description","pos":[148643,148654]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[149097,149143],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[149207,149247]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[149379,149414],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[149661,149704],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[149771,149838]},{"content":"public boolean allowSysSetup()","pos":[149943,149973]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[150053,150136]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[150225,150261],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[150507,150556],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[150617,150715]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[150789,150830],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[150899,150948]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[151071,151106],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[151181,151243]},{"content":"public int beginDrag(int x, int y)","pos":[151353,151387]},{"content":"Is called when the user starts to drag a form control.","pos":[151463,151517]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[151635,151665],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[151745,151812]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[151917,151949],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[152027,152083]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[152199,152240],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[152481,152535]},{"content":"Retrieves the size of the control.","pos":[152591,152625]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[152763,152801],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[152873,152916]},{"content":"public int charFromPos(int x, int y)","pos":[153045,153081]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[153327,153364],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[153437,153482]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[153609,153681],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[153719,153786]},{"content":"public List configurationKeyEx()","pos":[153891,153923]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[154001,154097]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[154173,154217],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[154283,154361]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[154455,154514],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[154737,154780],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public int dataFieldArrayIndex()","pos":[155019,155051]},{"content":"public FieldName dataFieldName()","pos":[155301,155333]},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[155583,155619],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[155865,155907],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[155975,156100]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[156147,156187],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[156257,156322]},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[156429,156464],"source":"public int direction(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[156711,156769],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[156993,157045],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[157275,157319],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[157557,157615],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[157839,157891],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[158121,158165],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[158403,158442],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[158513,158712]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[158717,158751],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[158827,158908]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[158999,159080]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[159109,159203]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[159281,159358]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[159391,159487]},{"content":"public str dragText()","pos":[159563,159584]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[159673,159743]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[159845,159886],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[159955,160006]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[160127,160191],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[160409,160449],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[160691,160721],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[160801,160858]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[160973,161007],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[161083,161140]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[161255,161296],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[161365,161416]},{"content":"public container getCursorPos()","pos":[161537,161568]},{"content":"public int getFirstVisibleLine()","pos":[161819,161851]},{"content":"public str getLine(int lineNo)","pos":[162101,162131]},{"content":"public int getLineCount()","pos":[162383,162408]},{"content":"public container getSelection()","pos":[162665,162696]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[162947,162989],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[163057,163145]},{"content":"public boolean hasUserSetting()","pos":[163229,163260]},{"content":"Indicates whether the control has custom user settings.","pos":[163339,163394]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[163511,163553],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[163621,163660]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[163793,163829],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[163903,163965]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[164075,164112],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[164185,164224]},{"content":"public str helpField()","pos":[164357,164379]},{"content":"Retrieves the Help text for the control.","pos":[164467,164507]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[164639,164673],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[164749,164853]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[164921,164962],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[165031,165094]},{"content":"public int hWnd()","pos":[165203,165220]},{"content":"Retrieves the Windows handle for the control.","pos":[165313,165358]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[165485,165518],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[165767,165795]},{"content":"public boolean isDisplayed()","pos":[166049,166077]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[166159,166225]},{"content":"public boolean isRestricted()","pos":[166331,166360]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[166441,166508]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[166613,166669]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[166723,166822]},{"content":"public boolean isValid()","pos":[166895,166919]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[167177,167217],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[167459,167490],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[167569,167606]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[167741,167781],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[168023,168058],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[168305,168348],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[168587,168622],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[168869,168908],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169151,169197],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169433,169469],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[169715,169762],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169997,170038],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[170279,170321],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[170561,170606],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[170843,170927]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[171125,171205]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[171407,171485]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[171689,171728],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[171971,172019],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[172253,172299],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[172535,172575],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[172817,172858],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[173099,173121]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[173381,173421],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[173491,173555]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[173663,173697],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[173773,173834]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[173945,173980],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[174055,174119]},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[174227,174281],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[174509,174557],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[174791,174831],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lineFromChar(int charIndex)","pos":[175073,175111]},{"content":"public int lineIndex(int lineNo)","pos":[175355,175387]},{"content":"public int lineLength(int lineNo)","pos":[175637,175670]},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[175919,175957],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[176201,176244],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[176483,176530],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[176593,176646]},{"content":"public boolean modified()","pos":[176765,176790]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[177047,177126]},{"content":"Is called when the control is double-clicked by the user.","pos":[177157,177214]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[177329,177404]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[177439,177504]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[177611,177686]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[177721,177786]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[177893,177966]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[178003,178075]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[178175,178205],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[178285,178436]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[178473,178515],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[178755,178794]},{"content":"public FormControl parentControl()","pos":[179037,179071]},{"content":"Retrieves the parent control for the control.","pos":[179147,179192]},{"content":"public container posFromChar(int charIndex)","pos":[179319,179362]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[179601,179641],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[179883,179919],"source":"public int promptrect(\\[int value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[180165,180214],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[180447,180489],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[180729,180765],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[181011,181068],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[181121,181180]},{"content":"public int showContextMenu(int menuHandle)","pos":[181293,181335]},{"content":"Shows the shortcut menu for the control.","pos":[181403,181443]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[181575,181618],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[181857,181895],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[181967,182094]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[182139,182183],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[182421,182452],"source":"public int style(\\[int value\\])"},{"content":"public str toolTip()","pos":[182703,182723]},{"content":"Retrieves the tooltip text for the control.","pos":[182813,182856]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[182985,183024],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[183095,183157]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[183267,183300],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[183377,183436]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[183549,183583],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[183659,183721]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[183831,183861],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[184113,184156],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[184223,184290]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[184395,184446]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[184677,184711],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[184787,184830]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[184959,184997],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[185069,185117]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[185241,185280],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[185351,185410]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[185523,185560],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[185633,185716]},{"content":"public int userFastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[185805,185849],"source":"public int userFastTabSummary(\\[int value\\])"},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[186087,186123],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[186197,186249]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[186369,186403],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[186479,186561]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[186651,186693],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[186761,186817]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[186933,186973],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[187043,187097]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[187215,187255],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[187325,187374]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[187497,187540],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[187607,187660]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[187779,187813],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[187889,188037]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[188061,188096],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[188171,188222]},{"content":"public boolean validate()","pos":[188343,188368]},{"content":"public Guid value(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[188625,188658],"source":"public Guid value(\\[Guid value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[188907,188967],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[189017,189078]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[189189,189243],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[189299,189358]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[189471,189517],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[189581,189642]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[189753,189791],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[190035,190076],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[190145,190215]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[190317,190358],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[190427,190465]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[190599,190634],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[190709,190771]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[190881,190917],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[190991,191029]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[191163,191239],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseLeave()","pos":[191445,191469]},{"content":"Indicates that the mouse pointer has left the control.","pos":[191555,191609]},{"content":"public void setCursorPos(int x, int y)","pos":[191727,191765]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[192009,192086],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[192291,192360]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[192401,192501]},{"content":"public void performDBLookup(<ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>TableId tableId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[192573,192674],"source":"public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])"},{"content":"public void context()","pos":[192855,192876]},{"content":"Shows the shortcut menu for the control.","pos":[192965,193005]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[193137,193209],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[193419,193456],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void resetUserSetting()","pos":[193701,193731]},{"content":"Resets the user settings for the control.","pos":[193811,193852]},{"content":"public void inputSearch(str searchStr)","pos":[193983,194021]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[194093,194164]},{"content":"public void enter()","pos":[194265,194284]},{"content":"public void displayControl()","pos":[194547,194575]},{"content":"Displays the control.","pos":[194657,194678]},{"content":"public void undo()","pos":[194829,194847]},{"content":"public void setFocus()","pos":[195111,195133]},{"content":"Sets the focus on the control.","pos":[195221,195251]},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[195393,195469],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void gotFocus()","pos":[195675,195697]},{"content":"Indicates that the control has received focus.","pos":[195785,195831]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[195957,196031],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dragLeave()","pos":[196239,196262]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[196349,196445]},{"content":"public void copy()","pos":[196521,196539]},{"content":"Copies the contents of the control to the clipboard.","pos":[196631,196683]},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[196803,196876],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void paste()","pos":[197085,197104]},{"content":"Pastes the contents of the clipboard into the control.","pos":[197195,197249]},{"content":"public void lineScroll(int dx, int dy)","pos":[197367,197405]},{"content":"public void cut()","pos":[197649,197666]},{"content":"Cuts the contents of the control.","pos":[197759,197792]},{"content":"public void performFormLookup(xFormRun form)","pos":[197931,197975]},{"content":"public void prefColumnSize(int width, int height)","pos":[198213,198262]},{"content":"Specifies the preferred column width and height for the form control.","pos":[198323,198392]},{"content":"public void lostFocus()","pos":[198495,198518]},{"content":"Indicates that the control has lost focus.","pos":[198605,198647]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[198777,198854]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[198887,198957]},{"content":"public void jumpRef()","pos":[199059,199080]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[199341,199448],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void scrollCursor()","pos":[199623,199649]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[199905,199980],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setSelection(int charIndexFrom, int charIndexTo)","pos":[200187,200247]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[200469,200542]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[200579,200677]},{"content":"public void pasteText(str pasteStr, <ph id=\"ph1\">\\[</ph>boolean InsertSel<ph id=\"ph2\">\\]</ph>)","pos":[200751,200809],"source":"public void pasteText(str pasteStr, \\[boolean InsertSel\\])"},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[201033,201108],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void endDrag()","pos":[201315,201336]},{"content":"Is called when the user has finished dragging a form control.","pos":[201425,201486]},{"content":"public void performTypeLookup(<ph id=\"ph1\">\\[</ph>int userType<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[201597,201696],"source":"public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])"},{"content":"public void textChange()","pos":[201879,201903]},{"content":"public void lookup()","pos":[202161,202181]},{"pos":[202446,202465],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[202467,202507]},{"pos":[202564,202574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202576,202581]},{"content":"The new value for the property; optional.","pos":[202584,202625]},{"pos":[202632,202644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[202646,202702]},{"pos":[202709,202716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[202718,202797]},{"pos":[202803,202819],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[202865,202875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202877,202882]},{"pos":[202891,202903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202909,202925],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[202927,202994]},{"pos":[203048,203058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203060,203065]},{"content":"The value to assign to the allowEdit property.","pos":[203068,203114]},{"pos":[203121,203133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[203135,203187]},{"pos":[203194,203201],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[203203,203329]},{"pos":[203335,203355],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[203357,203440]},{"pos":[203483,203495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[203497,203565]},{"pos":[203571,203588],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[203635,203645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203647,203652]},{"pos":[203661,203673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203679,203701],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[203703,203801]},{"pos":[203861,203871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203873,203878]},{"content":"The value to assign to the property.","pos":[203881,203917]},{"pos":[203924,203936],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[203938,204017]},{"pos":[204024,204031],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[204033,204070]},{"pos":[204076,204098],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[204100,204149]},{"pos":[204201,204211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204213,204218]},{"pos":[204227,204239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[204241,204285]},{"pos":[204292,204299],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[204301,204369]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[204375,204445]},{"content":"The second byte contains a value for green.","pos":[204450,204493]},{"content":"The third byte contains a value for blue.","pos":[204498,204539]},{"content":"The high-order byte must be zero.","pos":[204544,204577]},{"content":"The maximum value for a single byte is 255.","pos":[204582,204625]},{"pos":[204631,204647],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[204649,204711]},{"pos":[204757,204767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204769,204774]},{"pos":[204783,204795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[204797,204858]},{"pos":[204864,204880],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[204882,204936]},{"pos":[204983,204993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[204995,204996]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[204999,205069]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[205070,205137]},{"content":"y","pos":[205149,205150]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[205153,205223]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[205224,205291]},{"pos":[205298,205310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[205312,205351]},{"pos":[205358,205365],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[205367,205448]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[205449,205553]},{"pos":[205559,205570],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[205572,205639]},{"pos":[205680,205690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205692,205697]},{"pos":[205706,205718],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[205720,205770]},{"pos":[205777,205784],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[205786,205858]},{"content":"0 Use the default font weight.","pos":[205864,205894]},{"content":"1 Thin.","pos":[205899,205906]},{"content":"2 Extra-light.","pos":[205911,205925]},{"content":"3 Light.","pos":[205930,205938]},{"content":"4 Normal.","pos":[205943,205952]},{"content":"5 Medium.","pos":[205957,205966]},{"content":"6 Semibold.","pos":[205971,205982]},{"content":"7 Bold.","pos":[205987,205994]},{"content":"8 Extra-bold.","pos":[205999,206012]},{"content":"9 Heavy.","pos":[206017,206025]},{"pos":[206031,206044],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[206046,206102]},{"pos":[206145,206155],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206157,206162]},{"pos":[206171,206183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[206185,206229]},{"pos":[206236,206243],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[206245,206337]},{"content":"Value.","pos":[206341,206347]},{"content":"Description.","pos":[206350,206362]},{"content":"0","pos":[206393,206394]},{"content":"Auto.","pos":[206402,206407]},{"content":"1","pos":[206419,206420]},{"content":"3D.","pos":[206428,206431]},{"content":"2","pos":[206445,206446]},{"content":"Single line.","pos":[206454,206466]},{"content":"3","pos":[206471,206472]},{"content":"Flat.","pos":[206480,206485]},{"content":"4","pos":[206497,206498]},{"content":"None.","pos":[206506,206511]},{"pos":[206526,206548],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[206600,206610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206612,206617]},{"pos":[206626,206638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206644,206666],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[206668,206702]},{"pos":[206769,206779],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[206781,206786]},{"content":"The number of lines to use to determine the height.","pos":[206789,206840]},{"content":"lines","pos":[206852,206857]},{"content":"The number of lines to use to determine the height.","pos":[206860,206911]},{"pos":[206918,206930],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[206932,206978]},{"pos":[206984,207003],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[207005,207048]},{"pos":[207097,207107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207109,207114]},{"pos":[207123,207135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[207137,207199]},{"pos":[207206,207213],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[207215,207319]},{"content":"Value.","pos":[207323,207329]},{"content":"Description.","pos":[207332,207344]},{"content":"0","pos":[207391,207392]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207400,207413],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[207425,207426]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207434,207450],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[207459,207460]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207468,207483],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[207493,207495]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207502,207514],"source":"MAC\\_CHARSET"},{"content":"128","pos":[207527,207530]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207536,207553],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[207561,207564]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207570,207585],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[207595,207598]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207604,207619],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[207629,207632]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207638,207658],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[207663,207666]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207672,207686],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[207697,207700]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207706,207722],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[207731,207734]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207740,207759],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[207765,207768]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207774,207789],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[207799,207802]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207808,207824],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[207833,207836]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207842,207861],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[207867,207870]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[207876,207888],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[207900,207988]},{"content":"Value.","pos":[207992,207998]},{"content":"Description.","pos":[208001,208013]},{"content":"130","pos":[208048,208051]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[208057,208071],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[208075,208161]},{"content":"Value.","pos":[208165,208171]},{"content":"Description.","pos":[208174,208186]},{"content":"177","pos":[208223,208226]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[208232,208247],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[208252,208255]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[208261,208276],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[208280,208357]},{"content":"Value.","pos":[208361,208367]},{"content":"Description.","pos":[208370,208382]},{"content":"222","pos":[208415,208418]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[208424,208437],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[208441,208520]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[208521,208612],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[208613,208727]},{"pos":[208733,208751],"content":"Method charFromPos","linkify":"Method charFromPos","nodes":[{"content":"Method charFromPos","pos":[0,18]}]},{"pos":[208800,208810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[208812,208813]},{"content":"y","pos":[208827,208828]},{"pos":[208837,208849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208855,208873],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[208875,208920]},{"pos":[208968,208978],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208980,208985]},{"pos":[208994,209006],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[209008,209051]},{"pos":[209058,209065],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[209067,209128]},{"content":"Value.","pos":[209132,209138]},{"content":"Style.","pos":[209141,209147]},{"content":"0","pos":[209204,209205]},{"content":"Default.","pos":[209213,209221]},{"content":"1","pos":[209240,209241]},{"content":"The Windows palette.","pos":[209249,209269]},{"content":"2","pos":[209276,209277]},{"content":"The true-color scheme.","pos":[209285,209307]},{"pos":[209315,209338],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[209340,209407]},{"pos":[209490,209500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209502,209507]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[209510,209577]},{"pos":[209584,209596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[209598,209670]},{"pos":[209677,209684],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[209686,209767]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[209768,209861]},{"pos":[209867,209892],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[209894,209990]},{"pos":[210035,210047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[210049,210135]},{"pos":[210142,210149],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[210151,210200]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[210201,210349]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[210350,210484]},{"pos":[210490,210515],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[210517,210595]},{"pos":[210650,210660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210662,210667]},{"content":"The string that contains the country/region codes to set; optional.","pos":[210670,210737]},{"pos":[210744,210756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[210758,210823]},{"pos":[210829,210861],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[210931,210941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210943,210948]},{"pos":[210957,210969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210975,210991],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[211045,211055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211057,211062]},{"pos":[211071,211083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[211089,211115],"content":"Method dataFieldArrayIndex","linkify":"Method dataFieldArrayIndex","nodes":[{"content":"Method dataFieldArrayIndex","pos":[0,26]}]},{"pos":[211160,211172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[211178,211198],"content":"Method dataFieldName","linkify":"Method dataFieldName","nodes":[{"content":"Method dataFieldName","pos":[0,20]}]},{"pos":[211243,211255],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[211261,211278],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[211325,211335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211337,211342]},{"pos":[211351,211363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[211369,211392],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[211394,211519]},{"pos":[211572,211582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211584,211589]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[211592,211666]},{"pos":[211673,211685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[211687,211799]},{"pos":[211806,211813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[211815,211942]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[211943,212036]},{"pos":[212042,212059],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[212061,212126]},{"pos":[212177,212187],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212189,212194]},{"pos":[212203,212215],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[212217,212262]},{"pos":[212268,212284],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[212330,212340],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212342,212347]},{"pos":[212356,212368],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212374,212394],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[212461,212471],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212473,212478]},{"content":"mode","pos":[212492,212496]},{"pos":[212505,212517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212523,212547],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[212610,212620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[212622,212626]},{"pos":[212635,212647],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212653,212678],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[212733,212743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212745,212750]},{"pos":[212759,212771],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212777,212797],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[212864,212874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212876,212881]},{"content":"mode","pos":[212895,212899]},{"pos":[212908,212920],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212926,212950],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[213013,213023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[213025,213029]},{"pos":[213038,213050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[213056,213081],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[213136,213146],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[213148,213153]},{"pos":[213162,213174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[213180,213200],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[213202,213401]},{"pos":[213451,213461],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[213463,213468]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[213471,213545]},{"pos":[213552,213564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[213566,213710]},{"pos":[213716,213731],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[213733,213814]},{"pos":[213859,213869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[213871,213876]},{"content":"An Integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[213879,213957]},{"pos":[213964,213976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[213978,214038]},{"pos":[214045,214052],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave, the dragOver, and the dragOverEx to specify the behavior.","pos":[214054,214130]},{"pos":[214136,214151],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[214153,214247]},{"pos":[214341,214351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[214353,214363]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[214366,214451]},{"content":"dragMode","pos":[214463,214471]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[214474,214559]},{"content":"x","pos":[214571,214572]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[214575,214660]},{"content":"y","pos":[214672,214673]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[214676,214761]},{"pos":[214768,214780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[214782,214847]},{"pos":[214853,214870],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[214872,214968]},{"pos":[215058,215068],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[215070,215080]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[215083,215168]},{"content":"dragMode","pos":[215180,215188]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[215191,215276]},{"content":"x","pos":[215288,215289]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[215292,215377]},{"content":"y","pos":[215389,215390]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[215393,215478]},{"pos":[215485,215497],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[215499,215564]},{"pos":[215570,215585],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[215587,215657]},{"pos":[215691,215703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[215705,215836]},{"pos":[215842,215856],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[215858,215909]},{"pos":[215961,215971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[215973,215978]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[215981,216053]},{"pos":[216060,216072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[216074,216122]},{"pos":[216129,216136],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[216138,216213]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[216214,216309]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[216310,216444]},{"pos":[216450,216473],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[216548,216558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[216560,216565]},{"pos":[216574,216586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[216592,216613],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[216664,216674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[216676,216681]},{"pos":[216690,216702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[216708,216719],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[216721,216778]},{"pos":[216819,216829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[216831,216836]},{"pos":[216845,216857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[216859,216914]},{"pos":[216920,216935],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[216937,216994]},{"pos":[217039,217049],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[217051,217056]},{"pos":[217065,217077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[217079,217112]},{"pos":[217118,217140],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[217142,217193]},{"pos":[217245,217255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[217257,217262]},{"pos":[217271,217283],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[217285,217329]},{"pos":[217336,217343],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[217345,217413]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[217419,217489]},{"content":"The second byte contains a value for green.","pos":[217494,217537]},{"content":"The third byte contains a value for blue.","pos":[217542,217583]},{"content":"The high-order byte must be zero.","pos":[217588,217621]},{"content":"The maximum value for a single byte is 255.","pos":[217626,217669]},{"pos":[217675,217694],"content":"Method getCursorPos","linkify":"Method getCursorPos","nodes":[{"content":"Method getCursorPos","pos":[0,19]}]},{"pos":[217738,217750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[217756,217782],"content":"Method getFirstVisibleLine","linkify":"Method getFirstVisibleLine","nodes":[{"content":"Method getFirstVisibleLine","pos":[0,26]}]},{"pos":[217827,217839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[217845,217859],"content":"Method getLine","linkify":"Method getLine","nodes":[{"content":"Method getLine","pos":[0,14]}]},{"pos":[217902,217912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[217914,217920]},{"pos":[217929,217941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[217947,217966],"content":"Method getLineCount","linkify":"Method getLineCount","nodes":[{"content":"Method getLineCount","pos":[0,19]}]},{"pos":[218004,218016],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[218022,218041],"content":"Method getSelection","linkify":"Method getSelection","nodes":[{"content":"Method getSelection","pos":[0,19]}]},{"pos":[218085,218097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[218103,218120],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[218122,218210]},{"pos":[218263,218273],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[218275,218278]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[218281,218351]},{"pos":[218358,218370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[218372,218439]},{"pos":[218445,218466],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[218468,218523]},{"pos":[218567,218579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[218581,218644]},{"pos":[218650,218663],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[218665,218704]},{"pos":[218757,218767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[218769,218774]},{"content":"An Integer that indicates how the height is calculated; optional.","pos":[218777,218842]},{"content":"mode","pos":[218854,218858]},{"content":"An Integer that indicates how the height is calculated; optional.","pos":[218861,218926]},{"pos":[218933,218945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[218947,218983]},{"pos":[218990,218997],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[218999,219052]},{"content":"Calculate the height according to the following table:","pos":[219053,219107]},{"content":"Mode.","pos":[219111,219116]},{"content":"Height calculation.","pos":[219130,219149]},{"content":"-1 Exact.","pos":[219337,219346]},{"content":"The exact height in pixels of the controls is used.","pos":[219356,219407]},{"content":"0 Auto.","pos":[219450,219457]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[219469,219558]},{"content":"1 Column height.","pos":[219563,219579]},{"content":"The layout of the form determines the height of the control.","pos":[219582,219642]},{"content":"The height and height calculation mode can be set separately.","pos":[219675,219736]},{"pos":[219742,219759],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[219761,219823]},{"pos":[219870,219880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[219882,219887]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[219890,219965]},{"pos":[219972,219984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[219986,220007]},{"pos":[220014,220021],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[220023,220077]},{"content":"Mode.","pos":[220081,220086]},{"content":"Height Calculation.","pos":[220098,220117]},{"content":"Exact.","pos":[220303,220309]},{"content":"The exact height in pixels of the controls is used.","pos":[220320,220371]},{"content":"Auto.","pos":[220414,220419]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[220431,220520]},{"content":"Column height.","pos":[220525,220539]},{"content":"The layout of the form determines the height of the control.","pos":[220542,220602]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[220635,220720]},{"pos":[220726,220744],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[220746,220785]},{"pos":[220833,220843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220845,220850]},{"content":"An Integer that specifies the height in pixels; optional.","pos":[220853,220910]},{"pos":[220917,220929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[220931,220952]},{"pos":[220959,220966],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[220968,221058]},{"pos":[221064,221080],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[221082,221122]},{"pos":[221157,221169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[221171,221259]},{"pos":[221266,221273],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[221275,221345]},{"content":"Use the helpText method to set the value of the Help text.","pos":[221346,221404]},{"pos":[221410,221425],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[221427,221531]},{"pos":[221576,221586],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221588,221593]},{"content":"The value to assign as the Help text for the control.","pos":[221596,221649]},{"pos":[221656,221668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[221670,221725]},{"pos":[221732,221739],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[221741,221809]},{"content":"The Help text must not exceed 250 characters.","pos":[221810,221855]},{"pos":[221861,221883],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[221885,221948]},{"pos":[222000,222010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222012,222017]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[222020,222087]},{"pos":[222094,222106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[222108,222158]},{"pos":[222164,222175],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[222177,222222]},{"pos":[222252,222264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[222266,222293]},{"pos":[222300,222307],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[222309,222353]},{"pos":[222359,222373],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[222417,222427],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222429,222434]},{"pos":[222443,222455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[222461,222479],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[222520,222532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[222538,222556],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[222558,222624]},{"pos":[222665,222677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[222679,222730]},{"pos":[222737,222744],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[222746,222814]},{"pos":[222820,222839],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[222841,222908]},{"pos":[222950,222962],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[222964,223016]},{"pos":[223022,223047],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[223049,223148]},{"pos":[223217,223227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[223229,223246]},{"content":"A FormAllowUserSetup enumeration value that specifies the level of customization that is being requested for the control.","pos":[223249,223370]},{"pos":[223377,223389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[223391,223550]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must be at least as high as the level that is specified by the neededSetupRights parameter.","pos":[223551,223743]},{"pos":[223750,223757],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[223759,223836]},{"content":"FormAllowUserSetup::No 0","pos":[224176,224200]},{"content":"No changes can be made to the control.","pos":[224211,224249]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[224250,224339]},{"content":"FormAllowUserSetup::Restricted 1","pos":[224344,224376]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[224379,224471]},{"content":"The user cannot move the control.","pos":[224472,224505]},{"content":"FormAllowUserSetup::Yes 2","pos":[224512,224537]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[224547,224639]},{"content":"The user can also move the control.","pos":[224640,224675]},{"pos":[224683,224697],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[224734,224746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224752,224765],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[224816,224826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224828,224833]},{"pos":[224842,224854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224860,224872],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[224874,224911]},{"pos":[224953,224963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224965,224970]},{"pos":[224979,224991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[224993,225031]},{"pos":[225038,225045],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[225047,225125]},{"content":"The label property value cannot exceed 250 characters.","pos":[225126,225180]},{"pos":[225186,225207],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[225258,225268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225270,225275]},{"pos":[225284,225296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225302,225318],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[225364,225374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225376,225381]},{"pos":[225390,225402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225408,225432],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[225486,225496],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225498,225503]},{"pos":[225512,225524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225530,225546],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[225592,225602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225604,225609]},{"pos":[225618,225630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225636,225656],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[225706,225716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225718,225723]},{"pos":[225732,225744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225750,225777],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[225834,225844],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225846,225851]},{"pos":[225860,225872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225878,225895],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[225942,225952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225954,225959]},{"pos":[225968,225980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225986,226004],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[226062,226072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226074,226079]},{"content":"mode","pos":[226093,226097]},{"pos":[226106,226118],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[226124,226146],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[226198,226208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226210,226215]},{"pos":[226224,226236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[226242,226265],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[226318,226328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226330,226335]},{"pos":[226344,226356],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[226362,226380],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[226436,226446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226448,226453]},{"pos":[226462,226474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[226480,226505],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[226602,226612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[226614,226615]},{"content":"y","pos":[226629,226630]},{"content":"button","pos":[226644,226650]},{"content":"Ctrl","pos":[226664,226668]},{"content":"Shift","pos":[226682,226687]},{"pos":[226696,226708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[226714,226735],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[226828,226838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[226840,226841]},{"content":"y","pos":[226855,226856]},{"content":"button","pos":[226870,226876]},{"content":"Ctrl","pos":[226890,226894]},{"content":"Shift","pos":[226908,226913]},{"pos":[226922,226934],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[226940,226959],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[227050,227060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[227062,227063]},{"content":"y","pos":[227077,227078]},{"content":"button","pos":[227092,227098]},{"content":"Ctrl","pos":[227112,227116]},{"content":"Shift","pos":[227130,227135]},{"pos":[227144,227156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227162,227182],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[227232,227242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227244,227249]},{"pos":[227258,227270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227276,227297],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[227356,227366],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227368,227373]},{"pos":[227382,227394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227400,227417],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[227474,227484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227486,227491]},{"content":"mode","pos":[227505,227509]},{"pos":[227518,227530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227536,227557],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[227608,227618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227620,227625]},{"pos":[227634,227646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227652,227674],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[227726,227736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227738,227743]},{"pos":[227752,227764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227770,227782],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[227817,227829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[227835,227846],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[227848,227912]},{"pos":[227963,227973],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227975,227980]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[227983,228069]},{"content":"mode","pos":[228081,228085]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[228088,228174]},{"pos":[228181,228193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[228195,228246]},{"pos":[228252,228267],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[228269,228330]},{"pos":[228375,228385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[228387,228392]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[228395,228481]},{"pos":[228488,228500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[228502,228558]},{"pos":[228564,228580],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[228582,228646]},{"pos":[228692,228702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[228704,228709]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[228712,228793]},{"pos":[228800,228812],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[228814,228865]},{"pos":[228871,228887],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[228950,228960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[228962,228967]},{"content":"mode","pos":[228981,228985]},{"pos":[228994,229006],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229012,229032],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[229091,229101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[229103,229107]},{"pos":[229116,229128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229134,229155],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[229206,229216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229218,229223]},{"pos":[229232,229244],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229250,229269],"content":"Method lineFromChar","linkify":"Method lineFromChar","nodes":[{"content":"Method lineFromChar","pos":[0,19]}]},{"pos":[229320,229330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[229332,229341]},{"pos":[229350,229362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229368,229384],"content":"Method lineIndex","linkify":"Method lineIndex","nodes":[{"content":"Method lineIndex","pos":[0,16]}]},{"pos":[229429,229439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[229441,229447]},{"pos":[229456,229468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229474,229491],"content":"Method lineLength","linkify":"Method lineLength","nodes":[{"content":"Method lineLength","pos":[0,17]}]},{"pos":[229537,229547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[229549,229555]},{"pos":[229564,229576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229582,229601],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[229650,229660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229662,229667]},{"pos":[229676,229688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229694,229710],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[229764,229774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229776,229781]},{"pos":[229790,229802],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229808,229828],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[229830,229883]},{"pos":[229941,229951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229953,229958]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[229961,230055]},{"pos":[230062,230074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[230076,230149]},{"pos":[230155,230170],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[230208,230220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[230226,230246],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[230248,230305]},{"pos":[230397,230407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[230409,230410]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[230413,230474]},{"content":"y","pos":[230486,230487]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[230490,230551]},{"content":"button","pos":[230563,230569]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[230572,230633]},{"content":"Ctrl","pos":[230645,230649]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[230652,230713]},{"content":"Shift","pos":[230725,230730]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[230733,230794]},{"pos":[230801,230813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[230815,230854]},{"pos":[230861,230868],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[230870,230974]},{"pos":[230980,230996],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[230998,231063]},{"pos":[231151,231161],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[231163,231164]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[231167,231228]},{"content":"y","pos":[231240,231241]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[231244,231305]},{"content":"button","pos":[231317,231323]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[231326,231387]},{"content":"Ctrl","pos":[231399,231403]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[231406,231467]},{"content":"Shift","pos":[231479,231484]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[231487,231548]},{"pos":[231555,231567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[231569,231608]},{"pos":[231615,231622],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[231624,231728]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[231729,231864]},{"pos":[231870,231886],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[231888,231953]},{"pos":[232041,232051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[232053,232054]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[232057,232118]},{"content":"y","pos":[232130,232131]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[232134,232195]},{"content":"button","pos":[232207,232213]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[232216,232277]},{"content":"Ctrl","pos":[232289,232293]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[232296,232357]},{"content":"Shift","pos":[232369,232374]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[232377,232438]},{"pos":[232445,232457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[232459,232498]},{"pos":[232505,232512],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[232514,232618]},{"pos":[232624,232638],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[232640,232712]},{"pos":[232798,232808],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[232810,232811]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[232814,232875]},{"content":"y","pos":[232887,232888]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[232891,232952]},{"content":"button","pos":[232964,232970]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[232973,233034]},{"content":"Ctrl","pos":[233046,233050]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[233053,233114]},{"content":"Shift","pos":[233126,233131]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[233134,233195]},{"pos":[233202,233214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[233216,233255]},{"pos":[233262,233269],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[233271,233375]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[233376,233511]},{"pos":[233517,233528],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[233530,233681]},{"pos":[233722,233732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[233734,233739]},{"content":"The name to assign to the control; optional.","pos":[233742,233786]},{"pos":[233793,233805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[233807,233871]},{"pos":[233878,233885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[233887,233981]},{"content":"It must start with a letter.","pos":[233987,234015]},{"content":"It cannot exceed 250 characters.","pos":[234020,234052]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[234057,234111],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[234116,234156]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[234161,234271]},{"pos":[234277,234300],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[234353,234363],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234365,234370]},{"pos":[234379,234391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234397,234424],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[234476,234488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234494,234514],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[234516,234561]},{"pos":[234608,234620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[234622,234657]},{"pos":[234663,234681],"content":"Method posFromChar","linkify":"Method posFromChar","nodes":[{"content":"Method posFromChar","pos":[0,18]}]},{"pos":[234737,234747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[234749,234758]},{"pos":[234767,234779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234785,234806],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[234857,234867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234869,234874]},{"pos":[234883,234895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234901,234918],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[234965,234975],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234977,234982]},{"pos":[234991,235003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235009,235031],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[235091,235101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235103,235108]},{"pos":[235117,235129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235135,235158],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[235211,235221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235223,235228]},{"pos":[235237,235249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235255,235272],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[235319,235329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235331,235336]},{"pos":[235345,235357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235363,235381],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[235383,235442]},{"pos":[235510,235520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235522,235527]},{"content":"The ID of the security key to assign to the control; optional.","pos":[235530,235592]},{"pos":[235599,235611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[235613,235712]},{"pos":[235718,235740],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[235742,235782]},{"pos":[235837,235847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[235849,235859]},{"content":"The ID of the menu to show.","pos":[235862,235889]},{"pos":[235896,235908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[235910,235969]},{"pos":[235975,235991],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[236045,236055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236057,236062]},{"pos":[236071,236083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236089,236100],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[236102,236229]},{"pos":[236278,236288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236290,236295]},{"content":"The value to assign to the skip property of the control; optional.","pos":[236298,236364]},{"pos":[236371,236383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[236385,236491]},{"pos":[236497,236508],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[236563,236573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[236575,236588]},{"pos":[236597,236609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236615,236627],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[236669,236679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236681,236686]},{"pos":[236695,236707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236713,236727],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[236729,236772]},{"pos":[236805,236817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[236819,236921]},{"pos":[236928,236935],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[236937,237009]},{"pos":[237015,237025],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[237027,237089]},{"pos":[237139,237149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237151,237156]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[237159,237243]},{"content":"mode","pos":[237255,237259]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[237262,237346]},{"pos":[237353,237365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[237367,237416]},{"pos":[237422,237436],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[237438,237497]},{"pos":[237541,237551],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237553,237558]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[237561,237645]},{"pos":[237652,237664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[237666,237720]},{"pos":[237726,237741],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[237743,237805]},{"pos":[237850,237860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237862,237867]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[237870,237949]},{"pos":[237956,237968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[237970,238019]},{"pos":[238025,238036],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[238077,238087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238089,238094]},{"pos":[238103,238115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238121,238137],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[238139,238206]},{"pos":[238260,238270],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238272,238277]},{"content":"The value to assign to the underline property of the control; optional.","pos":[238280,238351]},{"pos":[238358,238370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[238372,238436]},{"pos":[238442,238469],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[238533,238543],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[238545,238549]},{"pos":[238558,238570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238576,238591],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[238593,238636]},{"pos":[238681,238691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238693,238698]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[238701,238773]},{"pos":[238780,238792],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[238794,238824]},{"pos":[238830,238849],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[238851,238899]},{"pos":[238948,238958],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238960,238965]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[238968,239045]},{"pos":[239052,239064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[239066,239101]},{"pos":[239107,239127],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[239129,239188]},{"pos":[239238,239248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239250,239255]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[239258,239346]},{"pos":[239353,239365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[239367,239413]},{"pos":[239419,239437],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[239439,239522]},{"pos":[239570,239580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239582,239587]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[239590,239670]},{"pos":[239677,239689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[239691,239747]},{"pos":[239753,239778],"content":"Method userFastTabSummary","linkify":"Method userFastTabSummary","nodes":[{"content":"Method userFastTabSummary","pos":[0,25]}]},{"pos":[239833,239843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239845,239850]},{"pos":[239859,239871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[239877,239894],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[239896,239948]},{"pos":[239995,240005],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[240007,240012]},{"content":"The user height for the control; optional.","pos":[240015,240057]},{"pos":[240064,240076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[240078,240117]},{"pos":[240123,240138],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[240140,240222]},{"pos":[240267,240277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[240279,240284]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[240287,240366]},{"pos":[240373,240385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[240387,240442]},{"pos":[240449,240456],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[240458,240628]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[240629,240704]},{"content":"This method lets you programmatically determine and set the value.","pos":[240705,240771]},{"pos":[240777,240800],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[240802,240858]},{"pos":[240911,240921],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[240923,240928]},{"content":"The organization container to set for the control; optional.","pos":[240931,240991]},{"pos":[240998,241010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[241012,241055]},{"pos":[241061,241082],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[241084,241138]},{"pos":[241189,241199],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[241201,241206]},{"content":"The organization sibling to set for the control; optional.","pos":[241209,241267]},{"pos":[241274,241286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[241288,241329]},{"pos":[241335,241356],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[241358,241407]},{"pos":[241458,241468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[241470,241475]},{"content":"The user label text to set for the control; optional.","pos":[241478,241531]},{"pos":[241538,241550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[241552,241588]},{"pos":[241594,241618],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[241620,241673]},{"pos":[241727,241737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[241739,241744]},{"content":"The user security level to set for the control; optional.","pos":[241747,241804]},{"pos":[241811,241823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[241825,241865]},{"pos":[241871,241886],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[241888,242036]},{"pos":[242081,242091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[242093,242098]},{"content":"The value to assign to the userSkip property; optional.","pos":[242101,242156]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[242157,242252]},{"pos":[242259,242271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[242273,242342]},{"pos":[242348,242364],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[242366,242417]},{"pos":[242463,242473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[242475,242480]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[242483,242549]},{"pos":[242556,242568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[242570,242699]},{"pos":[242706,242713],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[242715,242809]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[242810,242926],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[242927,243077]},{"pos":[243083,243098],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[243136,243148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[243154,243166],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[243210,243220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[243222,243227]},{"pos":[243236,243248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[243254,243276],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[243278,243339]},{"pos":[243408,243418],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[243420,243425]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[243428,243505]},{"content":"mode","pos":[243517,243521]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[243524,243601]},{"pos":[243608,243620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[243622,243670]},{"pos":[243676,243702],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[243704,243763]},{"pos":[243828,243838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[243840,243844]},{"pos":[243853,243865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[243867,243921]},{"pos":[243927,243954],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[243956,244017]},{"pos":[244074,244084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[244086,244091]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[244094,244172]},{"pos":[244179,244191],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[244193,244241]},{"pos":[244247,244266],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[244315,244325],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[244327,244332]},{"pos":[244341,244353],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[244359,244373],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[244375,244445]},{"pos":[244497,244507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[244509,244514]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[244517,244589]},{"pos":[244596,244608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[244610,244659]},{"pos":[244665,244677],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[244679,244717]},{"pos":[244769,244779],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[244781,244786]},{"content":"An Integer that indicates how the width is calculated; optional.","pos":[244789,244853]},{"content":"mode","pos":[244865,244869]},{"content":"An Integer that indicates how the width is calculated; optional.","pos":[244872,244936]},{"pos":[244943,244955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[244957,244992]},{"pos":[244999,245006],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[245008,245061]},{"content":"Calculate the width according to the following table:","pos":[245062,245115]},{"content":"Mode.","pos":[245119,245124]},{"content":"Width calculation.","pos":[245137,245155]},{"content":"-1 Exact.","pos":[245341,245350]},{"content":"The exact width in pixels of the controls is used.","pos":[245359,245409]},{"content":"0 Auto.","pos":[245452,245459]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[245470,245558]},{"content":"1 Column width.","pos":[245563,245578]},{"content":"The layout of the form determines the width of the control.","pos":[245581,245640]},{"content":"The width and width calculation mode can be set separately.","pos":[245673,245732]},{"pos":[245738,245754],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[245756,245818]},{"pos":[245864,245874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[245876,245881]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[245884,245958]},{"pos":[245965,245977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[245979,246040]},{"pos":[246047,246054],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[246056,246109]},{"content":"Mode.","pos":[246113,246118]},{"content":"Width Calculation.","pos":[246129,246147]},{"content":"Exact.","pos":[246331,246337]},{"content":"The exact width in pixels of the controls is used.","pos":[246347,246397]},{"content":"Auto.","pos":[246440,246445]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[246456,246544]},{"content":"Column width.","pos":[246549,246562]},{"content":"The layout of the form determines the width of the control.","pos":[246565,246624]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[246657,246740]},{"pos":[246746,246763],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[246765,246803]},{"pos":[246850,246860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246862,246867]},{"content":"An Integer that specifies the width in pixels; optional.","pos":[246870,246926]},{"pos":[246933,246945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[246947,246982]},{"pos":[246989,246996],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[246998,247071]},{"pos":[247077,247095],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[247180,247190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[247192,247198]},{"content":"e","pos":[247212,247213]},{"pos":[247221,247238],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[247240,247294]},{"pos":[247330,247349],"content":"Method setCursorPos","linkify":"Method setCursorPos","nodes":[{"content":"Method setCursorPos","pos":[0,19]}]},{"pos":[247400,247410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[247412,247413]},{"content":"y","pos":[247427,247428]},{"pos":[247436,247455],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[247541,247551],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[247553,247559]},{"content":"e","pos":[247573,247574]},{"pos":[247582,247595],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[247597,247697]},{"pos":[247779,247789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[247791,247801]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[247804,247889]},{"content":"dragMode","pos":[247901,247909]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[247912,247997]},{"content":"x","pos":[248009,248010]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[248013,248098]},{"content":"y","pos":[248110,248111]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[248114,248199]},{"pos":[248205,248227],"content":"Method performDBLookup","linkify":"Method performDBLookup","nodes":[{"content":"Method performDBLookup","pos":[0,22]}]},{"pos":[248335,248345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[248347,248354]},{"content":"tableId","pos":[248368,248375]},{"content":"company","pos":[248389,248396]},{"pos":[248404,248418],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[248420,248460]},{"pos":[248493,248507],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[248588,248598],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[248600,248606]},{"content":"e","pos":[248620,248621]},{"pos":[248629,248642],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[248690,248700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[248702,248711]},{"pos":[248719,248742],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[248744,248785]},{"pos":[248827,248845],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[248847,248918]},{"pos":[248969,248979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[248981,248990]},{"content":"The string value to use to filter data; optional.","pos":[248993,249042]},{"pos":[249048,249060],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[249091,249112],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[249114,249135]},{"pos":[249175,249186],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[249216,249231],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[249233,249263]},{"pos":[249297,249315],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[249400,249410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[249412,249418]},{"content":"e","pos":[249432,249433]},{"pos":[249441,249456],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[249458,249504]},{"pos":[249538,249554],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[249637,249647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[249649,249655]},{"content":"e","pos":[249669,249670]},{"pos":[249678,249694],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[249696,249792]},{"pos":[249827,249838],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[249840,249892]},{"pos":[249922,249937],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[250019,250029],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[250031,250037]},{"content":"e","pos":[250051,250052]},{"pos":[250060,250072],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[250074,250128]},{"pos":[250159,250176],"content":"Method lineScroll","linkify":"Method lineScroll","nodes":[{"content":"Method lineScroll","pos":[0,17]}]},{"pos":[250227,250237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dx","pos":[250239,250241]},{"content":"dy","pos":[250255,250257]},{"pos":[250265,250275],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[250277,250310]},{"pos":[250339,250363],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[250420,250430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[250432,250436]},{"pos":[250444,250465],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[250467,250536]},{"pos":[250598,250608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[250610,250615]},{"content":"The preferred height of the control.","pos":[250618,250654]},{"content":"height","pos":[250666,250672]},{"content":"The preferred height of the control.","pos":[250675,250711]},{"pos":[250717,250733],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[250735,250777]},{"pos":[250812,250829],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[250831,250901]},{"pos":[250991,251001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[251003,251004]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[251007,251068]},{"content":"y","pos":[251080,251081]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[251084,251145]},{"content":"button","pos":[251157,251163]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[251166,251227]},{"content":"Ctrl","pos":[251239,251243]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[251246,251307]},{"content":"Shift","pos":[251319,251324]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[251327,251388]},{"pos":[251394,251408],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[251441,251470],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[251588,251598],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[251600,251616]},{"content":"objectMethodToCall","pos":[251630,251648]},{"content":"overrideObject","pos":[251662,251676]},{"pos":[251684,251703],"content":"Method scrollCursor","linkify":"Method scrollCursor","nodes":[{"content":"Method scrollCursor","pos":[0,19]}]},{"pos":[251741,251758],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[251842,251852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[251854,251860]},{"content":"e","pos":[251874,251875]},{"pos":[251883,251902],"content":"Method setSelection","linkify":"Method setSelection","nodes":[{"content":"Method setSelection","pos":[0,19]}]},{"pos":[251975,251985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndexFrom","pos":[251987,252000]},{"content":"charIndexTo","pos":[252014,252025]},{"pos":[252033,252044],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[252046,252144]},{"pos":[252230,252240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[252242,252252]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[252255,252340]},{"content":"dragMode","pos":[252352,252360]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[252363,252448]},{"content":"x","pos":[252460,252461]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[252464,252549]},{"content":"y","pos":[252561,252562]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[252565,252650]},{"pos":[252656,252672],"content":"Method pasteText","linkify":"Method pasteText","nodes":[{"content":"Method pasteText","pos":[0,16]}]},{"pos":[252741,252751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pasteStr","pos":[252753,252761]},{"content":"InsertSel","pos":[252775,252784]},{"pos":[252792,252809],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[252893,252903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[252905,252911]},{"content":"e","pos":[252925,252926]},{"pos":[252934,252948],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[252950,253011]},{"pos":[253045,253052],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[253054,253182]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[253183,253287]},{"pos":[253293,253317],"content":"Method performTypeLookup","linkify":"Method performTypeLookup","nodes":[{"content":"Method performTypeLookup","pos":[0,24]}]},{"pos":[253423,253433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userType","pos":[253435,253443]},{"content":"arrayIndex","pos":[253457,253467]},{"content":"company","pos":[253481,253488]},{"pos":[253496,253513],"content":"Method textChange","linkify":"Method textChange","nodes":[{"content":"Method textChange","pos":[0,17]}]},{"pos":[253549,253562],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[253593,253614],"content":"Class FormHTMLControl","linkify":"Class FormHTMLControl","nodes":[{"content":"Class FormHTMLControl","pos":[0,21]}]},{"pos":[253666,253673],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[253679,253687],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[253693,253700],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[253704,253710]},{"content":"Description","pos":[253814,253825]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[254268,254314],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[254378,254418]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[254550,254593],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[254660,254727]},{"content":"public boolean allowSysSetup()","pos":[254832,254862]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[254942,255025]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[255114,255163],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[255224,255322]},{"content":"public int beginDrag(int x, int y)","pos":[255396,255430]},{"content":"Is called when the user starts to drag a form control.","pos":[255506,255560]},{"content":"public container calcControlSize(int chars, int lines)","pos":[255678,255732]},{"content":"Retrieves the size of the control.","pos":[255788,255822]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[255960,255993],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[256070,256109]},{"content":"public str className(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[256242,256277],"source":"public str className(\\[str value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[256524,256596],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[256634,256701]},{"content":"public List configurationKeyEx()","pos":[256806,256838]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[256916,257012]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[257088,257132],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[257198,257276]},{"content":"public str custom(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[257370,257402],"source":"public str custom(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[257652,257694],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[257762,257887]},{"content":"public AnyType dispatch(VarArg )","pos":[257934,257966]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[258216,258255],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[258326,258525]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[258530,258564],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[258640,258721]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[258812,258893]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[258922,259016]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[259094,259171]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[259204,259300]},{"content":"public str dragText()","pos":[259376,259397]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[259486,259556]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[259658,259699],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[259768,259819]},{"content":"public COMError error()","pos":[259940,259963]},{"content":"public str getText()","pos":[260222,260242]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[260504,260546],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[260614,260702]},{"content":"public boolean hasUserSetting()","pos":[260786,260817]},{"content":"Indicates whether the control has custom user settings.","pos":[260896,260951]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[261068,261110],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[261178,261217]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[261350,261386],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[261460,261522]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[261632,261669],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[261742,261781]},{"content":"public str helpField()","pos":[261914,261936]},{"content":"Retrieves the Help text for the control.","pos":[262024,262064]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[262196,262230],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[262306,262410]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[262478,262519],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[262588,262651]},{"content":"public int hWnd()","pos":[262760,262777]},{"content":"Retrieves the Windows handle for the control.","pos":[262870,262915]},{"content":"public ComInterface interface()","pos":[263042,263073]},{"content":"public boolean isContainer()","pos":[263324,263352]},{"content":"public boolean isDisplayed()","pos":[263606,263634]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[263716,263782]},{"content":"public boolean isRestricted()","pos":[263888,263917]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[263998,264065]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[264170,264226]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[264280,264379]},{"content":"public boolean leave()","pos":[264452,264474]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[264734,264774],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[264844,264908]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[265016,265050],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[265126,265187]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[265298,265333],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[265408,265472]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[265580,265627],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[265690,265743]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[265862,265941]},{"content":"Is called when the control is double-clicked by the user.","pos":[265972,266029]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[266144,266219]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[266254,266319]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[266426,266501]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[266536,266601]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[266708,266781]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[266818,266890]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[266990,267020],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[267100,267251]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[267288,267330],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[267570,267609]},{"content":"public FormControl parentControl()","pos":[267852,267886]},{"content":"Retrieves the parent control for the control.","pos":[267962,268007]},{"content":"public str processPicture(str picture)","pos":[268134,268172]},{"content":"public boolean rTLCapable(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[268416,268460],"source":"public boolean rTLCapable(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[268698,268755],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[268808,268867]},{"content":"public int showContextMenu(int menuHandle)","pos":[268980,269022]},{"content":"Shows the shortcut menu for the control.","pos":[269090,269130]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[269262,269300],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[269372,269499]},{"content":"public str toolTip()","pos":[269544,269564]},{"content":"Retrieves the tooltip text for the control.","pos":[269654,269697]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[269826,269865],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[269936,269998]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270108,270141],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[270218,270277]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270390,270424],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[270500,270562]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270672,270702],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[270954,271005]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271236,271270],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[271346,271389]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271518,271556],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[271628,271676]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271800,271839],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[271910,271969]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272082,272119],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[272192,272275]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272364,272400],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[272474,272526]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272646,272680],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[272756,272838]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272928,272970],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[273038,273094]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[273210,273250],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[273320,273374]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[273492,273532],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[273602,273651]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[273774,273817],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[273884,273937]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[274056,274090],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[274166,274314]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[274338,274373],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[274448,274499]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[274620,274680],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[274730,274791]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[274902,274956],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[275012,275071]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[275184,275230],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[275294,275355]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[275466,275507],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[275576,275646]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[275748,275789],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[275858,275896]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[276030,276065],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[276140,276202]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[276312,276348],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[276422,276460]},{"content":"public void copy()","pos":[276594,276612]},{"content":"Copies the contents of the control to the clipboard.","pos":[276704,276756]},{"content":"public void insertText(str Text, <ph id=\"ph1\">\\[</ph>NoYes repaint<ph id=\"ph2\">\\]</ph>)","pos":[276876,276927],"source":"public void insertText(str Text, \\[NoYes repaint\\])"},{"content":"public void cut()","pos":[277158,277175]},{"content":"Cuts the contents of the control.","pos":[277268,277301]},{"content":"public void processBase(str base)","pos":[277440,277473]},{"content":"public void setFont(int fontid, HtmlFont htmlFont, <ph id=\"ph1\">\\[</ph>NoYes repaint<ph id=\"ph2\">\\]</ph>)","pos":[277722,277791],"source":"public void setFont(int fontid, HtmlFont htmlFont, \\[NoYes repaint\\])"},{"content":"public void getFont(int fontid, HtmlFont htmlFont)","pos":[278004,278054]},{"content":"public void gotFocus()","pos":[278286,278308]},{"content":"Indicates that the control has received focus.","pos":[278396,278442]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[278568,278640],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dragLeave()","pos":[278850,278873]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[278960,279056]},{"content":"public void mouseLeave()","pos":[279132,279156]},{"content":"Indicates that the mouse pointer has left the control.","pos":[279242,279296]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[279414,279483]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[279524,279624]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[279696,279769]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[279806,279904]},{"content":"public void updateSize()","pos":[279978,280002]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[280260,280337]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[280370,280440]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[280542,280616],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lostFocus()","pos":[280824,280847]},{"content":"Indicates that the control has lost focus.","pos":[280934,280976]},{"content":"public void displayControl()","pos":[281106,281134]},{"content":"Displays the control.","pos":[281216,281237]},{"content":"public void processLink(str link)","pos":[281388,281421]},{"content":"public void prefColumnSize(int width, int height)","pos":[281670,281719]},{"content":"Specifies the preferred column width and height for the form control.","pos":[281780,281849]},{"content":"public void processTitle(str title)","pos":[281952,281987]},{"content":"public void read(str FileName, <ph id=\"ph1\">\\[</ph>str TagName<ph id=\"ph2\">\\]</ph>)","pos":[282234,282281],"source":"public void read(str FileName, \\[str TagName\\])"},{"content":"public void setFocus()","pos":[282516,282538]},{"content":"Sets the focus on the control.","pos":[282626,282656]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[282798,282874],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setText(str Text, <ph id=\"ph1\">\\[</ph>str TagName<ph id=\"ph2\">\\]</ph>)","pos":[283080,283126],"source":"public void setText(str Text, \\[str TagName\\])"},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[283362,283437],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void resetUserSetting()","pos":[283644,283674]},{"content":"Resets the user settings for the control.","pos":[283754,283795]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[283926,284033],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void endDrag()","pos":[284208,284229]},{"content":"Is called when the user has finished dragging a form control.","pos":[284318,284379]},{"content":"public void save(str FileName)","pos":[284490,284520]},{"content":"public void command(int command)","pos":[284772,284804]},{"content":"public void paste()","pos":[285054,285073]},{"content":"Pastes the contents of the clipboard into the control.","pos":[285164,285218]},{"content":"public void insertLink(str Text, str Url, str Name, <ph id=\"ph1\">\\[</ph>NoYes repaint<ph id=\"ph2\">\\]</ph>)","pos":[285336,285406],"source":"public void insertLink(str Text, str Url, str Name, \\[NoYes repaint\\])"},{"content":"public void context()","pos":[285618,285639]},{"content":"Shows the shortcut menu for the control.","pos":[285728,285768]},{"content":"public void enter()","pos":[285900,285919]},{"content":"public void inputSearch(str searchStr)","pos":[286182,286220]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[286292,286363]},{"content":"public void clearWindow()","pos":[286464,286489]},{"content":"public void processForm(int formHandle)","pos":[286746,286785]},{"content":"public void setMargin(int Left, int Right, int Top, int Bottom, <ph id=\"ph1\">\\[</ph>NoYes repaint<ph id=\"ph2\">\\]</ph>)","pos":[287028,287110],"source":"public void setMargin(int Left, int Right, int Top, int Bottom, \\[NoYes repaint\\])"},{"pos":[287313,287332],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[287334,287374]},{"pos":[287431,287441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287443,287448]},{"content":"The new value for the property; optional.","pos":[287451,287492]},{"pos":[287499,287511],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[287513,287569]},{"pos":[287576,287583],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[287585,287664]},{"pos":[287670,287686],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[287688,287755]},{"pos":[287809,287819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287821,287826]},{"content":"The value to assign to the allowEdit property.","pos":[287829,287875]},{"pos":[287882,287894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[287896,287948]},{"pos":[287955,287962],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[287964,288090]},{"pos":[288096,288116],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[288118,288201]},{"pos":[288244,288256],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[288258,288326]},{"pos":[288332,288354],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[288356,288454]},{"pos":[288514,288524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[288526,288531]},{"content":"If supplied, the property is set to this value.","pos":[288534,288581]},{"pos":[288588,288600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[288602,288681]},{"pos":[288688,288695],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[288697,288734]},{"pos":[288740,288756],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[288758,288812]},{"pos":[288859,288869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[288871,288872]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[288875,288945]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[288946,289013]},{"content":"y","pos":[289025,289026]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[289029,289099]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[289100,289167]},{"pos":[289174,289186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[289188,289227]},{"pos":[289234,289241],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[289243,289324]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[289325,289429]},{"pos":[289435,289457],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[289459,289493]},{"pos":[289560,289570],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[289572,289577]},{"content":"The number of lines to use to determine the height.","pos":[289580,289631]},{"content":"lines","pos":[289643,289648]},{"content":"The number of lines to use to determine the height.","pos":[289651,289702]},{"pos":[289709,289721],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[289723,289769]},{"pos":[289775,289789],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[289791,289830]},{"pos":[289874,289884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289886,289891]},{"pos":[289900,289912],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[289914,289968]},{"pos":[289974,289990],"content":"Method className","linkify":"Method className","nodes":[{"content":"Method className","pos":[0,16]}]},{"pos":[290036,290046],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290048,290053]},{"pos":[290062,290074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[290080,290103],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[290105,290172]},{"pos":[290255,290265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290267,290272]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[290275,290342]},{"pos":[290349,290361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[290363,290435]},{"pos":[290442,290449],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[290451,290532]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[290533,290626]},{"pos":[290632,290657],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[290659,290755]},{"pos":[290800,290812],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[290814,290900]},{"pos":[290907,290914],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[290916,290965]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[290966,291114]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[291115,291249]},{"pos":[291255,291280],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[291282,291360]},{"pos":[291415,291425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291427,291432]},{"content":"The string that contains the country/region codes to set; optional.","pos":[291435,291502]},{"pos":[291509,291521],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[291523,291588]},{"pos":[291594,291607],"content":"Method custom","linkify":"Method custom","nodes":[{"content":"Method custom","pos":[0,13]}]},{"pos":[291650,291660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291662,291667]},{"pos":[291676,291688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[291694,291717],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[291719,291844]},{"pos":[291897,291907],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291909,291914]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[291917,291991]},{"pos":[291998,292010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[292012,292124]},{"pos":[292131,292138],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[292140,292267]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[292268,292361]},{"pos":[292367,292382],"content":"Method dispatch","linkify":"Method dispatch","nodes":[{"content":"Method dispatch","pos":[0,15]}]},{"pos":[292427,292437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[292448,292460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[292466,292486],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[292488,292687]},{"pos":[292737,292747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[292749,292754]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[292757,292831]},{"pos":[292838,292850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[292852,292996]},{"pos":[293002,293017],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[293019,293100]},{"pos":[293145,293155],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[293157,293162]},{"content":"An integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[293165,293243]},{"pos":[293250,293262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[293264,293324]},{"pos":[293331,293338],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave, the dragOver, and the dragOverEx to specify the behavior.","pos":[293340,293416]},{"pos":[293422,293437],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[293439,293533]},{"pos":[293627,293637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[293639,293649]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[293652,293737]},{"content":"dragMode","pos":[293749,293757]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[293760,293845]},{"content":"x","pos":[293857,293858]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[293861,293946]},{"content":"y","pos":[293958,293959]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[293962,294047]},{"pos":[294054,294066],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[294068,294133]},{"pos":[294139,294156],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[294158,294254]},{"pos":[294344,294354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[294356,294366]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[294369,294454]},{"content":"dragMode","pos":[294466,294474]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[294477,294562]},{"content":"x","pos":[294574,294575]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[294578,294663]},{"content":"y","pos":[294675,294676]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[294679,294764]},{"pos":[294771,294783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[294785,294850]},{"pos":[294856,294871],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[294873,294943]},{"pos":[294977,294989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[294991,295122]},{"pos":[295128,295142],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[295144,295195]},{"pos":[295247,295257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295259,295264]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[295267,295339]},{"pos":[295346,295358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[295360,295408]},{"pos":[295415,295422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[295424,295499]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[295500,295595]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[295596,295730]},{"pos":[295736,295748],"content":"Method error","linkify":"Method error","nodes":[{"content":"Method error","pos":[0,12]}]},{"pos":[295784,295796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295802,295816],"content":"Method getText","linkify":"Method getText","nodes":[{"content":"Method getText","pos":[0,14]}]},{"pos":[295849,295861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295867,295884],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[295886,295974]},{"pos":[296027,296037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[296039,296042]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[296045,296115]},{"pos":[296122,296134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[296136,296203]},{"pos":[296209,296230],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[296232,296287]},{"pos":[296331,296343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[296345,296408]},{"pos":[296414,296427],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[296429,296468]},{"pos":[296521,296531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[296533,296538]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[296541,296606]},{"content":"mode","pos":[296618,296622]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[296625,296690]},{"pos":[296697,296709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[296711,296747]},{"pos":[296754,296761],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[296763,296870]},{"content":"Mode.","pos":[296874,296879]},{"content":"Height calculation.","pos":[296893,296912]},{"content":"-1 Exact.","pos":[297100,297109]},{"content":"The exact height in pixels of the controls is used.","pos":[297119,297170]},{"content":"0 Auto.","pos":[297213,297220]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[297232,297321]},{"content":"1 Column height.","pos":[297326,297342]},{"content":"The layout of the form determines the height of the control.","pos":[297345,297405]},{"content":"The height and height calculation mode can be set separately.","pos":[297438,297499]},{"pos":[297505,297522],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[297524,297586]},{"pos":[297633,297643],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297645,297650]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[297653,297728]},{"pos":[297735,297747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[297749,297770]},{"pos":[297777,297784],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[297786,297840]},{"content":"Mode.","pos":[297844,297849]},{"content":"Height Calculation.","pos":[297861,297880]},{"content":"Exact.","pos":[298066,298072]},{"content":"The exact height in pixels of the controls is used.","pos":[298083,298134]},{"content":"Auto.","pos":[298177,298182]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[298194,298283]},{"content":"Column height.","pos":[298288,298302]},{"content":"The layout of the form determines the height of the control.","pos":[298305,298365]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[298398,298483]},{"pos":[298489,298507],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[298509,298548]},{"pos":[298596,298606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298608,298613]},{"content":"An integer that specifies the height in pixels; optional.","pos":[298616,298673]},{"pos":[298680,298692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[298694,298715]},{"pos":[298722,298729],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[298731,298821]},{"pos":[298827,298843],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[298845,298885]},{"pos":[298920,298932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[298934,299022]},{"pos":[299029,299036],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[299038,299108]},{"content":"Use the helpText method to set the value of the Help text.","pos":[299109,299167]},{"pos":[299173,299188],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[299190,299294]},{"pos":[299339,299349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299351,299356]},{"content":"The value to assign as the Help text for the control.","pos":[299359,299412]},{"pos":[299419,299431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[299433,299488]},{"pos":[299495,299502],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[299504,299572]},{"content":"The Help text must not exceed 250 characters.","pos":[299573,299618]},{"pos":[299624,299646],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[299648,299711]},{"pos":[299763,299773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299775,299780]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[299783,299850]},{"pos":[299857,299869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[299871,299921]},{"pos":[299927,299938],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[299940,299985]},{"pos":[300015,300027],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[300029,300056]},{"pos":[300063,300070],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[300072,300116]},{"pos":[300122,300138],"content":"Method interface","linkify":"Method interface","nodes":[{"content":"Method interface","pos":[0,16]}]},{"pos":[300182,300194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300200,300218],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[300259,300271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300277,300295],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[300297,300363]},{"pos":[300404,300416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[300418,300469]},{"pos":[300476,300483],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[300485,300553]},{"pos":[300559,300578],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[300580,300647]},{"pos":[300689,300701],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[300703,300755]},{"pos":[300761,300786],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[300788,300887]},{"pos":[300956,300966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[300968,300985]},{"content":"A FormAllowUserSetup enumeration value that specifies the level of customization that is being requested for the control.","pos":[300988,301109]},{"pos":[301116,301128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[301130,301289]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must be at least as high as the level that is specified by the neededSetupRights parameter.","pos":[301290,301482]},{"pos":[301489,301496],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[301498,301575]},{"content":"FormAllowUserSetup::No 0","pos":[301915,301939]},{"content":"No changes can be made to the control.","pos":[301950,301988]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[301989,302078]},{"content":"FormAllowUserSetup::Restricted 1","pos":[302083,302115]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[302118,302210]},{"content":"The user cannot move the control.","pos":[302211,302244]},{"content":"FormAllowUserSetup::Yes 2","pos":[302251,302276]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[302286,302378]},{"content":"The user can also move the control.","pos":[302379,302414]},{"pos":[302422,302434],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[302469,302481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302487,302498],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[302500,302564]},{"pos":[302615,302625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302627,302632]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[302635,302721]},{"content":"mode","pos":[302733,302737]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[302740,302826]},{"pos":[302833,302845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[302847,302898]},{"pos":[302904,302919],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[302921,302982]},{"pos":[303027,303037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303039,303044]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[303047,303133]},{"pos":[303140,303152],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[303154,303210]},{"pos":[303216,303232],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[303234,303298]},{"pos":[303344,303354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303356,303361]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[303364,303445]},{"pos":[303452,303464],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[303466,303517]},{"pos":[303523,303543],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[303545,303598]},{"pos":[303656,303666],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303668,303673]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[303676,303770]},{"pos":[303777,303789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[303791,303864]},{"pos":[303870,303890],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[303892,303949]},{"pos":[304041,304051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[304053,304054]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[304057,304118]},{"content":"y","pos":[304130,304131]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[304134,304195]},{"content":"button","pos":[304207,304213]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[304216,304277]},{"content":"Ctrl","pos":[304289,304293]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[304296,304357]},{"content":"Shift","pos":[304369,304374]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[304377,304438]},{"pos":[304445,304457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[304459,304498]},{"pos":[304505,304512],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[304514,304618]},{"pos":[304624,304640],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[304642,304707]},{"pos":[304795,304805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[304807,304808]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[304811,304872]},{"content":"y","pos":[304884,304885]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[304888,304949]},{"content":"button","pos":[304961,304967]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[304970,305031]},{"content":"Ctrl","pos":[305043,305047]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[305050,305111]},{"content":"Shift","pos":[305123,305128]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[305131,305192]},{"pos":[305199,305211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[305213,305252]},{"pos":[305259,305266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[305268,305372]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[305373,305508]},{"pos":[305514,305530],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[305532,305597]},{"pos":[305685,305695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[305697,305698]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[305701,305762]},{"content":"y","pos":[305774,305775]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[305778,305839]},{"content":"button","pos":[305851,305857]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[305860,305921]},{"content":"Ctrl","pos":[305933,305937]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[305940,306001]},{"content":"Shift","pos":[306013,306018]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306021,306082]},{"pos":[306089,306101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[306103,306142]},{"pos":[306149,306156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[306158,306262]},{"pos":[306268,306282],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[306284,306356]},{"pos":[306442,306452],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[306454,306455]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306458,306519]},{"content":"y","pos":[306531,306532]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306535,306596]},{"content":"button","pos":[306608,306614]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306617,306678]},{"content":"Ctrl","pos":[306690,306694]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306697,306758]},{"content":"Shift","pos":[306770,306775]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306778,306839]},{"pos":[306846,306858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[306860,306899]},{"pos":[306906,306913],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[306915,307019]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[307020,307155]},{"pos":[307161,307172],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[307174,307325]},{"pos":[307366,307376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307378,307383]},{"content":"The name to assign to the control; optional.","pos":[307386,307430]},{"pos":[307437,307449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[307451,307515]},{"pos":[307522,307529],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[307531,307625]},{"content":"It must start with a letter.","pos":[307631,307659]},{"content":"It cannot exceed 250 characters.","pos":[307664,307696]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[307701,307755],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[307760,307800]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[307805,307915]},{"pos":[307921,307944],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[307997,308007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308009,308014]},{"pos":[308023,308035],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308041,308068],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[308120,308132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308138,308158],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[308160,308205]},{"pos":[308252,308264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[308266,308301]},{"pos":[308307,308328],"content":"Method processPicture","linkify":"Method processPicture","nodes":[{"content":"Method processPicture","pos":[0,21]}]},{"pos":[308379,308389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"picture","pos":[308391,308398]},{"pos":[308407,308419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308425,308442],"content":"Method rTLCapable","linkify":"Method rTLCapable","nodes":[{"content":"Method rTLCapable","pos":[0,17]}]},{"pos":[308497,308507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308509,308514]},{"pos":[308523,308535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308541,308559],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[308561,308620]},{"pos":[308688,308698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308700,308705]},{"content":"The ID of the security key to assign to the control; optional.","pos":[308708,308770]},{"pos":[308777,308789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[308791,308890]},{"pos":[308896,308918],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[308920,308960]},{"pos":[309015,309025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[309027,309037]},{"content":"The ID of the menu to show.","pos":[309040,309067]},{"pos":[309074,309086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[309088,309147]},{"pos":[309153,309164],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[309166,309293]},{"pos":[309342,309352],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309354,309359]},{"content":"The value to assign to the skip property of the control.","pos":[309362,309418]},{"pos":[309425,309437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[309439,309545]},{"pos":[309551,309565],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[309567,309610]},{"pos":[309643,309655],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[309657,309759]},{"pos":[309766,309773],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[309775,309847]},{"pos":[309853,309863],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[309865,309927]},{"pos":[309977,309987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309989,309994]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[309997,310081]},{"content":"mode","pos":[310093,310097]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[310100,310184]},{"pos":[310191,310203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[310205,310254]},{"pos":[310260,310274],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[310276,310335]},{"pos":[310379,310389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310391,310396]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[310399,310483]},{"pos":[310490,310502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[310504,310558]},{"pos":[310564,310579],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[310581,310643]},{"pos":[310688,310698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310700,310705]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[310708,310787]},{"pos":[310794,310806],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[310808,310857]},{"pos":[310863,310874],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[310915,310925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310927,310932]},{"pos":[310941,310953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310959,310986],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[311050,311060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[311062,311066]},{"pos":[311075,311087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311093,311108],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[311110,311153]},{"pos":[311198,311208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311210,311215]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[311218,311290]},{"pos":[311297,311309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[311311,311341]},{"pos":[311347,311366],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[311368,311416]},{"pos":[311465,311475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311477,311482]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[311485,311562]},{"pos":[311569,311581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[311583,311618]},{"pos":[311624,311644],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[311646,311705]},{"pos":[311755,311765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311767,311772]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[311775,311863]},{"pos":[311870,311882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[311884,311930]},{"pos":[311936,311954],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[311956,312039]},{"pos":[312087,312097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312099,312104]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[312107,312187]},{"pos":[312194,312206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[312208,312264]},{"pos":[312270,312287],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[312289,312341]},{"pos":[312388,312398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312400,312405]},{"content":"The user height for the control; optional.","pos":[312408,312450]},{"pos":[312457,312469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[312471,312510]},{"pos":[312516,312531],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[312533,312615]},{"pos":[312660,312670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312672,312677]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[312680,312759]},{"pos":[312766,312778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[312780,312835]},{"pos":[312842,312849],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[312851,313021]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[313022,313097]},{"content":"This method lets you programmatically determine and set the value.","pos":[313098,313164]},{"pos":[313170,313193],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[313195,313251]},{"pos":[313304,313314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313316,313321]},{"content":"The organization container to set for the control; optional.","pos":[313324,313384]},{"pos":[313391,313403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[313405,313448]},{"pos":[313454,313475],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[313477,313531]},{"pos":[313582,313592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313594,313599]},{"content":"The organization sibling to set for the control; optional.","pos":[313602,313660]},{"pos":[313667,313679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[313681,313722]},{"pos":[313728,313749],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[313751,313800]},{"pos":[313851,313861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313863,313868]},{"content":"The user label text to set for the control; optional.","pos":[313871,313924]},{"pos":[313931,313943],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[313945,313981]},{"pos":[313987,314011],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[314013,314066]},{"pos":[314120,314130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314132,314137]},{"content":"The user security level to set for the control; optional.","pos":[314140,314197]},{"pos":[314204,314216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[314218,314258]},{"pos":[314264,314279],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[314281,314429]},{"pos":[314474,314484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314486,314491]},{"content":"The value to assign to the userSkip property; optional.","pos":[314494,314549]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[314550,314645]},{"pos":[314652,314664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[314666,314735]},{"pos":[314741,314757],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[314759,314810]},{"pos":[314856,314866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314868,314873]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[314876,314942]},{"pos":[314949,314961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[314963,315092]},{"pos":[315099,315106],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[315108,315202]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[315203,315319],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[315320,315470]},{"pos":[315476,315498],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[315500,315561]},{"pos":[315630,315640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315642,315647]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[315650,315727]},{"content":"mode","pos":[315739,315743]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[315746,315823]},{"pos":[315830,315842],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[315844,315892]},{"pos":[315898,315924],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[315926,315985]},{"pos":[316050,316060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[316062,316066]},{"pos":[316075,316087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[316089,316143]},{"pos":[316149,316176],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[316178,316239]},{"pos":[316296,316306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316308,316313]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[316316,316394]},{"pos":[316401,316413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[316415,316463]},{"pos":[316469,316483],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[316485,316555]},{"pos":[316607,316617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316619,316624]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[316627,316699]},{"pos":[316706,316718],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[316720,316769]},{"pos":[316775,316787],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[316789,316827]},{"pos":[316879,316889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316891,316896]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[316899,316963]},{"content":"mode","pos":[316975,316979]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[316982,317046]},{"pos":[317053,317065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[317067,317102]},{"pos":[317109,317116],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[317118,317171]},{"content":"Calculate the width according to the following table:","pos":[317172,317225]},{"content":"Mode.","pos":[317229,317234]},{"content":"Width calculation.","pos":[317247,317265]},{"content":"-1 Exact.","pos":[317451,317460]},{"content":"The exact width in pixels of the controls is used.","pos":[317469,317519]},{"content":"0 Auto.","pos":[317562,317569]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[317580,317668]},{"content":"1 Column width.","pos":[317673,317688]},{"content":"The layout of the form determines the width of the control.","pos":[317691,317750]},{"content":"The width and width calculation mode can be set separately.","pos":[317783,317842]},{"pos":[317848,317864],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[317866,317928]},{"pos":[317974,317984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317986,317991]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[317994,318068]},{"pos":[318075,318087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[318089,318150]},{"pos":[318157,318164],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[318166,318219]},{"content":"Mode.","pos":[318223,318228]},{"content":"Width Calculation.","pos":[318239,318257]},{"content":"Exact.","pos":[318441,318447]},{"content":"The exact width in pixels of the controls is used.","pos":[318457,318507]},{"content":"Auto.","pos":[318550,318555]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[318566,318654]},{"content":"Column width.","pos":[318659,318672]},{"content":"The layout of the form determines the width of the control.","pos":[318675,318734]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[318767,318850]},{"pos":[318856,318873],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[318875,318913]},{"pos":[318960,318970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318972,318977]},{"content":"An integer that specifies the width in pixels; optional.","pos":[318980,319036]},{"pos":[319043,319055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[319057,319092]},{"pos":[319099,319106],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[319108,319181]},{"pos":[319187,319198],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[319200,319252]},{"pos":[319282,319299],"content":"Method insertText","linkify":"Method insertText","nodes":[{"content":"Method insertText","pos":[0,17]}]},{"pos":[319361,319371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Text","pos":[319373,319377]},{"content":"repaint","pos":[319391,319398]},{"pos":[319406,319416],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[319418,319451]},{"pos":[319480,319498],"content":"Method processBase","linkify":"Method processBase","nodes":[{"content":"Method processBase","pos":[0,18]}]},{"pos":[319544,319554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"base","pos":[319556,319560]},{"pos":[319568,319582],"content":"Method setFont","linkify":"Method setFont","nodes":[{"content":"Method setFont","pos":[0,14]}]},{"pos":[319662,319672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fontid","pos":[319674,319680]},{"content":"htmlFont","pos":[319694,319702]},{"content":"repaint","pos":[319716,319723]},{"pos":[319731,319745],"content":"Method getFont","linkify":"Method getFont","nodes":[{"content":"Method getFont","pos":[0,14]}]},{"pos":[319808,319818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fontid","pos":[319820,319826]},{"content":"htmlFont","pos":[319840,319848]},{"pos":[319856,319871],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[319873,319919]},{"pos":[319953,319967],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[320048,320058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[320060,320066]},{"content":"e","pos":[320080,320081]},{"pos":[320089,320105],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[320107,320203]},{"pos":[320238,320255],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[320257,320311]},{"pos":[320347,320360],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[320362,320462]},{"pos":[320544,320554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[320556,320566]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[320569,320654]},{"content":"dragMode","pos":[320666,320674]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[320677,320762]},{"content":"x","pos":[320774,320775]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[320778,320863]},{"content":"y","pos":[320875,320876]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[320879,320964]},{"pos":[320970,320981],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[320983,321081]},{"pos":[321167,321177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[321179,321189]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[321192,321277]},{"content":"dragMode","pos":[321289,321297]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[321300,321385]},{"content":"x","pos":[321397,321398]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[321401,321486]},{"content":"y","pos":[321498,321499]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[321502,321587]},{"pos":[321593,321610],"content":"Method updateSize","linkify":"Method updateSize","nodes":[{"content":"Method updateSize","pos":[0,17]}]},{"pos":[321646,321663],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[321665,321735]},{"pos":[321825,321835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[321837,321838]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[321841,321902]},{"content":"y","pos":[321914,321915]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[321918,321979]},{"content":"button","pos":[321991,321997]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[322000,322061]},{"content":"Ctrl","pos":[322073,322077]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[322080,322141]},{"content":"Shift","pos":[322153,322158]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[322161,322222]},{"pos":[322228,322244],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[322327,322337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[322339,322345]},{"content":"e","pos":[322359,322360]},{"pos":[322368,322384],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[322386,322428]},{"pos":[322463,322484],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[322486,322507]},{"pos":[322547,322565],"content":"Method processLink","linkify":"Method processLink","nodes":[{"content":"Method processLink","pos":[0,18]}]},{"pos":[322611,322621],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"link","pos":[322623,322627]},{"pos":[322635,322656],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[322658,322727]},{"pos":[322789,322799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[322801,322806]},{"content":"The preferred height of the control.","pos":[322809,322845]},{"content":"height","pos":[322857,322863]},{"content":"The preferred height of the control.","pos":[322866,322902]},{"pos":[322908,322927],"content":"Method processTitle","linkify":"Method processTitle","nodes":[{"content":"Method processTitle","pos":[0,19]}]},{"pos":[322975,322985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"title","pos":[322987,322992]},{"pos":[323000,323011],"content":"Method read","linkify":"Method read","nodes":[{"content":"Method read","pos":[0,11]}]},{"pos":[323069,323079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"FileName","pos":[323081,323089]},{"content":"TagName","pos":[323103,323110]},{"pos":[323118,323133],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[323135,323165]},{"pos":[323199,323217],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[323302,323312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[323314,323320]},{"content":"e","pos":[323334,323335]},{"pos":[323343,323357],"content":"Method setText","linkify":"Method setText","nodes":[{"content":"Method setText","pos":[0,14]}]},{"pos":[323414,323424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Text","pos":[323426,323430]},{"content":"TagName","pos":[323444,323451]},{"pos":[323459,323476],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[323560,323570],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[323572,323578]},{"content":"e","pos":[323592,323593]},{"pos":[323601,323624],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[323626,323667]},{"pos":[323709,323738],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[323856,323866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[323868,323884]},{"content":"objectMethodToCall","pos":[323898,323916]},{"content":"overrideObject","pos":[323930,323944]},{"pos":[323952,323966],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[323968,324029]},{"pos":[324063,324070],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[324072,324200]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[324201,324305]},{"pos":[324311,324322],"content":"Method save","linkify":"Method save","nodes":[{"content":"Method save","pos":[0,11]}]},{"pos":[324365,324375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"FileName","pos":[324377,324385]},{"pos":[324393,324407],"content":"Method command","linkify":"Method command","nodes":[{"content":"Method command","pos":[0,14]}]},{"pos":[324452,324462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"command","pos":[324464,324471]},{"pos":[324479,324491],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[324493,324547]},{"pos":[324578,324595],"content":"Method insertLink","linkify":"Method insertLink","nodes":[{"content":"Method insertLink","pos":[0,17]}]},{"pos":[324676,324686],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Text","pos":[324688,324692]},{"content":"Url","pos":[324706,324709]},{"content":"Name","pos":[324723,324727]},{"content":"repaint","pos":[324741,324748]},{"pos":[324756,324770],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[324772,324812]},{"pos":[324845,324857],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[324888,324906],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[324908,324979]},{"pos":[325030,325040],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[325042,325051]},{"content":"The string value to use to filter data; optional.","pos":[325054,325103]},{"pos":[325109,325127],"content":"Method clearWindow","linkify":"Method clearWindow","nodes":[{"content":"Method clearWindow","pos":[0,18]}]},{"pos":[325164,325182],"content":"Method processForm","linkify":"Method processForm","nodes":[{"content":"Method processForm","pos":[0,18]}]},{"pos":[325234,325244],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formHandle","pos":[325246,325256]},{"pos":[325264,325280],"content":"Method setMargin","linkify":"Method setMargin","nodes":[{"content":"Method setMargin","pos":[0,16]}]},{"pos":[325373,325383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Left","pos":[325385,325389]},{"content":"Right","pos":[325403,325408]},{"content":"Top","pos":[325422,325425]},{"content":"Bottom","pos":[325439,325445]},{"content":"repaint","pos":[325459,325466]},{"pos":[325473,325493],"content":"Class FormIntControl","linkify":"Class FormIntControl","nodes":[{"content":"Class FormIntControl","pos":[0,20]}]},{"pos":[325544,325551],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[325557,325565],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[325571,325578],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[325582,325588]},{"content":"Description","pos":[325692,325703]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[326146,326192],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[326256,326296]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[326428,326463],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[326710,326753],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[326820,326887]},{"content":"public int allowNegative(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[326992,327031],"source":"public int allowNegative(\\[int value\\])"},{"content":"public boolean allowSysSetup()","pos":[327274,327304]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[327384,327467]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[327556,327592],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[327838,327887],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[327948,328046]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[328120,328161],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[328230,328279]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[328402,328437],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[328512,328574]},{"content":"public int beginDrag(int x, int y)","pos":[328684,328718]},{"content":"Is called when the user starts to drag a form control.","pos":[328794,328848]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[328966,328996],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[329076,329143]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329248,329280],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[329358,329414]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329530,329571],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[329812,329866]},{"content":"Retrieves the size of the control.","pos":[329922,329956]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330094,330132],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[330204,330247]},{"content":"public int charFromPos(int x, int y)","pos":[330376,330412]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330658,330695],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[330768,330813]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[330940,331012],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[331050,331117]},{"content":"public List configurationKeyEx()","pos":[331222,331254]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[331332,331428]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[331504,331548],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[331614,331692]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[331786,331845],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[332068,332111],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public int dataFieldArrayIndex()","pos":[332350,332382]},{"content":"public FieldName dataFieldName()","pos":[332632,332664]},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[332914,332950],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[333196,333238],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[333306,333431]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[333478,333518],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[333588,333653]},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[333760,333795],"source":"public int direction(\\[int value\\])"},{"content":"public int displaceNegative(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[334042,334103],"source":"public int displaceNegative(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displaceNegativeMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[334324,334379],"source":"public AutoMode displaceNegativeMode(\\[AutoMode mode\\])"},{"content":"public int displaceNegativeValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334606,334653],"source":"public int displaceNegativeValue(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[334888,334946],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[335170,335222],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[335452,335496],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[335734,335792],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[336016,336068],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336298,336342],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336580,336619],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[336690,336889]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336894,336928],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[337004,337085]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[337176,337257]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[337286,337380]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[337458,337535]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[337568,337664]},{"content":"public str dragText()","pos":[337740,337761]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[337850,337920]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[338022,338063],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[338132,338183]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[338304,338368],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338586,338626],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[338868,338898],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[338978,339035]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[339150,339184],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[339260,339317]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[339432,339473],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[339542,339593]},{"content":"public container getCursorPos()","pos":[339714,339745]},{"content":"public int getFirstVisibleLine()","pos":[339996,340028]},{"content":"public str getLine(int lineNo)","pos":[340278,340308]},{"content":"public int getLineCount()","pos":[340560,340585]},{"content":"public container getSelection()","pos":[340842,340873]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[341124,341166],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[341234,341322]},{"content":"public boolean hasUserSetting()","pos":[341406,341437]},{"content":"Indicates whether the control has custom user settings.","pos":[341516,341571]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[341688,341730],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[341798,341837]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[341970,342006],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[342080,342142]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[342252,342289],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[342362,342401]},{"content":"public str helpField()","pos":[342534,342556]},{"content":"Retrieves the Help text for the control.","pos":[342644,342684]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[342816,342850],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[342926,343030]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[343098,343139],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[343208,343271]},{"content":"public int hWnd()","pos":[343380,343397]},{"content":"Retrieves the Windows handle for the control.","pos":[343490,343535]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[343662,343695],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[343944,343972]},{"content":"public boolean isDisplayed()","pos":[344226,344254]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[344336,344402]},{"content":"public boolean isRestricted()","pos":[344508,344537]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[344618,344685]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[344790,344846]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[344900,344999]},{"content":"public boolean isValid()","pos":[345072,345096]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[345354,345394],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[345636,345667],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[345746,345783]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[345918,345958],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[346200,346235],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[346482,346525],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[346764,346799],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[347046,347085],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[347328,347374],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[347610,347646],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[347892,347939],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[348174,348215],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[348456,348498],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[348738,348783],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[349020,349104]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[349302,349382]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[349584,349662]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[349866,349905],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[350148,350196],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[350430,350476],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350712,350752],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350994,351035],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[351276,351298]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[351558,351598],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[351668,351732]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[351840,351874],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[351950,352011]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352122,352157],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[352232,352296]},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[352404,352458],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[352686,352734],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352968,353008],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lineFromChar(int charIndex)","pos":[353250,353288]},{"content":"public int lineIndex(int lineNo)","pos":[353532,353564]},{"content":"public int lineLength(int lineNo)","pos":[353814,353847]},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[354096,354134],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[354378,354421],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[354660,354707],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[354770,354823]},{"content":"public boolean modified()","pos":[354942,354967]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[355224,355303]},{"content":"Is called when the control is double-clicked by the user.","pos":[355334,355391]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[355506,355581]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[355616,355681]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[355788,355863]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[355898,355963]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[356070,356143]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[356180,356252]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[356352,356382],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[356462,356613]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[356650,356692],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[356932,356971]},{"content":"public FormControl parentControl()","pos":[357214,357248]},{"content":"Retrieves the parent control for the control.","pos":[357324,357369]},{"content":"public container posFromChar(int charIndex)","pos":[357496,357539]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[357778,357818],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[358060,358096],"source":"public int promptrect(\\[int value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[358342,358391],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public int rotateSign(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[358624,358660],"source":"public int rotateSign(\\[int value\\])"},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[358906,358948],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[359188,359224],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[359470,359527],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[359580,359639]},{"content":"public int showContextMenu(int menuHandle)","pos":[359752,359794]},{"content":"Shows the shortcut menu for the control.","pos":[359862,359902]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[360034,360077],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public int showZero(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[360316,360350],"source":"public int showZero(\\[int value\\])"},{"content":"public int signDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[360598,360635],"source":"public int signDisplay(\\[int value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[360880,360918],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[360990,361117]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[361162,361206],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[361444,361475],"source":"public int style(\\[int value\\])"},{"content":"public str toolTip()","pos":[361726,361746]},{"content":"Retrieves the tooltip text for the control.","pos":[361836,361879]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[362008,362047],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[362118,362180]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[362290,362323],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[362400,362459]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[362572,362606],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[362682,362744]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[362854,362884],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[363136,363179],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[363246,363313]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[363418,363469]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[363700,363734],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[363810,363853]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[363982,364020],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[364092,364140]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[364264,364303],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[364374,364433]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[364546,364583],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[364656,364739]},{"content":"public int userFastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[364828,364872],"source":"public int userFastTabSummary(\\[int value\\])"},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[365110,365146],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[365220,365272]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[365392,365426],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[365502,365584]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[365674,365716],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[365784,365840]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[365956,365996],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[366066,366120]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[366238,366278],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[366348,366397]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[366520,366563],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[366630,366683]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[366802,366836],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[366912,367060]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[367084,367119],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[367194,367245]},{"content":"public boolean validate()","pos":[367366,367391]},{"content":"public int value(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[367648,367679],"source":"public int value(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[367930,367990],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[368040,368101]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[368212,368266],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[368322,368381]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[368494,368540],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[368604,368665]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[368776,368814],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[369058,369099],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[369168,369238]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[369340,369381],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[369450,369488]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[369622,369657],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[369732,369794]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[369904,369940],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[370014,370052]},{"content":"public void setFocus()","pos":[370186,370208]},{"content":"Sets the focus on the control.","pos":[370296,370326]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[370468,370545]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[370578,370648]},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[370750,370825],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void jumpRef()","pos":[371032,371053]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[371314,371389],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void performTypeLookup(<ph id=\"ph1\">\\[</ph>int userType<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[371596,371695],"source":"public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[371878,371951]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[371988,372086]},{"content":"public void endDrag()","pos":[372160,372181]},{"content":"Is called when the user has finished dragging a form control.","pos":[372270,372331]},{"content":"public void textChange()","pos":[372442,372466]},{"content":"public void pasteText(str pasteStr, <ph id=\"ph1\">\\[</ph>boolean InsertSel<ph id=\"ph2\">\\]</ph>)","pos":[372724,372782],"source":"public void pasteText(str pasteStr, \\[boolean InsertSel\\])"},{"content":"public void lookup()","pos":[373006,373026]},{"content":"public void mouseLeave()","pos":[373288,373312]},{"content":"Indicates that the mouse pointer has left the control.","pos":[373398,373452]},{"content":"public void scrollCursor()","pos":[373570,373596]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[373852,373928],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[374134,374211],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void context()","pos":[374416,374437]},{"content":"Shows the shortcut menu for the control.","pos":[374526,374566]},{"content":"public void setSelection(int charIndexFrom, int charIndexTo)","pos":[374698,374758]},{"content":"public void inputSearch(str searchStr)","pos":[374980,375018]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[375090,375161]},{"content":"public void enter()","pos":[375262,375281]},{"content":"public void performDBLookup(<ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>TableId tableId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[375544,375645],"source":"public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])"},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[375826,375898],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void displayControl()","pos":[376108,376136]},{"content":"Displays the control.","pos":[376218,376239]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[376390,376427],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[376672,376741]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[376782,376882]},{"content":"public void copy()","pos":[376954,376972]},{"content":"Copies the contents of the control to the clipboard.","pos":[377064,377116]},{"content":"public void gotFocus()","pos":[377236,377258]},{"content":"Indicates that the control has received focus.","pos":[377346,377392]},{"content":"public void undo()","pos":[377518,377536]},{"content":"public void resetUserSetting()","pos":[377800,377830]},{"content":"Resets the user settings for the control.","pos":[377910,377951]},{"content":"public void setCursorPos(int x, int y)","pos":[378082,378120]},{"content":"public void lineScroll(int dx, int dy)","pos":[378364,378402]},{"content":"public void dragLeave()","pos":[378646,378669]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[378756,378852]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[378928,379002],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void paste()","pos":[379210,379229]},{"content":"Pastes the contents of the clipboard into the control.","pos":[379320,379374]},{"content":"public void cut()","pos":[379492,379509]},{"content":"Cuts the contents of the control.","pos":[379602,379635]},{"content":"public void performFormLookup(xFormRun form)","pos":[379774,379818]},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[380056,380132],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[380338,380411],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void prefColumnSize(int width, int height)","pos":[380620,380669]},{"content":"Specifies the preferred column width and height for the form control.","pos":[380730,380799]},{"content":"public void lostFocus()","pos":[380902,380925]},{"content":"Indicates that the control has lost focus.","pos":[381012,381054]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[381184,381291],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[381469,381488],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[381490,381530]},{"pos":[381587,381597],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[381599,381604]},{"pos":[381613,381625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[381627,381683]},{"pos":[381690,381697],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[381699,381778]},{"pos":[381784,381800],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[381846,381856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[381858,381863]},{"pos":[381872,381884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[381890,381906],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[381908,381975]},{"pos":[382029,382039],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[382041,382046]},{"pos":[382055,382067],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[382069,382121]},{"pos":[382128,382135],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[382137,382263]},{"pos":[382269,382289],"content":"Method allowNegative","linkify":"Method allowNegative","nodes":[{"content":"Method allowNegative","pos":[0,20]}]},{"pos":[382339,382349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[382351,382356]},{"pos":[382365,382377],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[382383,382403],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[382405,382488]},{"pos":[382531,382543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[382545,382613]},{"pos":[382619,382636],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[382683,382693],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[382695,382700]},{"pos":[382709,382721],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[382727,382749],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[382751,382849]},{"pos":[382909,382919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[382921,382926]},{"pos":[382935,382947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[382949,383028]},{"pos":[383035,383042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[383044,383081]},{"pos":[383087,383109],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[383111,383160]},{"pos":[383212,383222],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[383224,383229]},{"pos":[383238,383250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[383252,383296]},{"pos":[383303,383310],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[383312,383380]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[383386,383456]},{"content":"The second byte contains a value for green.","pos":[383461,383504]},{"content":"The third byte contains a value for blue.","pos":[383509,383550]},{"content":"The high-order byte must be zero.","pos":[383555,383588]},{"content":"The maximum value for a single byte is 255.","pos":[383593,383636]},{"pos":[383642,383658],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[383660,383722]},{"pos":[383768,383778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[383780,383785]},{"pos":[383794,383806],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[383808,383869]},{"pos":[383875,383891],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[383893,383947]},{"pos":[383994,384004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[384006,384007]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[384010,384080]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[384081,384148]},{"content":"y","pos":[384160,384161]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[384164,384234]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[384235,384302]},{"pos":[384309,384321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[384323,384362]},{"pos":[384369,384376],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[384378,384459]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[384460,384564]},{"pos":[384570,384581],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[384583,384650]},{"pos":[384691,384701],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[384703,384708]},{"pos":[384717,384729],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[384731,384781]},{"pos":[384788,384795],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[384797,384869]},{"content":"0 Use the default font weight.","pos":[384875,384905]},{"content":"1 Thin.","pos":[384910,384917]},{"content":"2 Extra-light.","pos":[384922,384936]},{"content":"3 Light.","pos":[384941,384949]},{"content":"4 Normal.","pos":[384954,384963]},{"content":"5 Medium.","pos":[384968,384977]},{"content":"6 Semibold.","pos":[384982,384993]},{"content":"7 Bold.","pos":[384998,385005]},{"content":"8 Extra-bold.","pos":[385010,385023]},{"content":"9 Heavy.","pos":[385028,385036]},{"pos":[385042,385055],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[385057,385113]},{"pos":[385156,385166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[385168,385173]},{"pos":[385182,385194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[385196,385240]},{"pos":[385247,385254],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[385256,385348]},{"content":"Value.","pos":[385352,385358]},{"content":"Description.","pos":[385361,385373]},{"content":"0","pos":[385404,385405]},{"content":"Auto.","pos":[385413,385418]},{"content":"1","pos":[385430,385431]},{"content":"3D.","pos":[385439,385442]},{"content":"2","pos":[385456,385457]},{"content":"Single line.","pos":[385465,385477]},{"content":"3","pos":[385482,385483]},{"content":"Flat.","pos":[385491,385496]},{"content":"4","pos":[385508,385509]},{"content":"None.","pos":[385517,385522]},{"pos":[385537,385559],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[385611,385621],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[385623,385628]},{"pos":[385637,385649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[385655,385677],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[385679,385713]},{"pos":[385780,385790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[385792,385797]},{"content":"The number of lines to use to determine the height.","pos":[385800,385851]},{"content":"lines","pos":[385863,385868]},{"content":"The number of lines to use to determine the height.","pos":[385871,385922]},{"pos":[385929,385941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[385943,385989]},{"pos":[385995,386014],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[386016,386059]},{"pos":[386108,386118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[386120,386125]},{"pos":[386134,386146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[386148,386210]},{"pos":[386217,386224],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[386226,386330]},{"content":"Value.","pos":[386334,386340]},{"content":"Description.","pos":[386343,386355]},{"content":"0","pos":[386402,386403]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386411,386424],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[386436,386437]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386445,386461],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[386470,386471]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386479,386494],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[386504,386506]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386513,386525],"source":"MAC\\_CHARSET"},{"content":"128","pos":[386538,386541]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386547,386564],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[386572,386575]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386581,386596],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[386606,386609]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386615,386630],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[386640,386643]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386649,386669],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[386674,386677]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386683,386697],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[386708,386711]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386717,386733],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[386742,386745]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386751,386770],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[386776,386779]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386785,386800],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[386810,386813]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386819,386835],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[386844,386847]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386853,386872],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[386878,386881]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[386887,386899],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[386911,386999]},{"content":"Value.","pos":[387003,387009]},{"content":"Description.","pos":[387012,387024]},{"content":"130","pos":[387059,387062]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[387068,387082],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[387086,387172]},{"content":"Value.","pos":[387176,387182]},{"content":"Description.","pos":[387185,387197]},{"content":"177","pos":[387234,387237]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[387243,387258],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[387263,387266]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[387272,387287],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[387291,387368]},{"content":"Value.","pos":[387372,387378]},{"content":"Description.","pos":[387381,387393]},{"content":"222","pos":[387426,387429]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[387435,387448],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[387452,387531]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[387532,387623],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[387624,387738]},{"pos":[387744,387762],"content":"Method charFromPos","linkify":"Method charFromPos","nodes":[{"content":"Method charFromPos","pos":[0,18]}]},{"pos":[387811,387821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[387823,387824]},{"content":"y","pos":[387838,387839]},{"pos":[387848,387860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[387866,387884],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[387886,387931]},{"pos":[387979,387989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[387991,387996]},{"pos":[388005,388017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[388019,388062]},{"pos":[388069,388076],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[388078,388139]},{"content":"Value.","pos":[388143,388149]},{"content":"Style.","pos":[388152,388158]},{"content":"0","pos":[388215,388216]},{"content":"Default.","pos":[388224,388232]},{"content":"1","pos":[388251,388252]},{"content":"The Windows palette.","pos":[388260,388280]},{"content":"2","pos":[388287,388288]},{"content":"The true-color scheme.","pos":[388296,388318]},{"pos":[388326,388349],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[388351,388418]},{"pos":[388501,388511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[388513,388518]},{"pos":[388527,388539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[388541,388613]},{"pos":[388620,388627],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[388629,388710]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[388711,388804]},{"pos":[388810,388835],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[388837,388933]},{"pos":[388978,388990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[388992,389078]},{"pos":[389085,389092],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[389094,389143]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[389144,389292]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[389293,389427]},{"pos":[389433,389458],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[389460,389538]},{"pos":[389593,389603],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[389605,389610]},{"content":"The string that contains the country/region codes to set; optional.","pos":[389613,389680]},{"pos":[389687,389699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[389701,389766]},{"pos":[389772,389804],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[389874,389884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[389886,389891]},{"pos":[389900,389912],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[389918,389934],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[389988,389998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390000,390005]},{"pos":[390014,390026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390032,390058],"content":"Method dataFieldArrayIndex","linkify":"Method dataFieldArrayIndex","nodes":[{"content":"Method dataFieldArrayIndex","pos":[0,26]}]},{"pos":[390103,390115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390121,390141],"content":"Method dataFieldName","linkify":"Method dataFieldName","nodes":[{"content":"Method dataFieldName","pos":[0,20]}]},{"pos":[390186,390198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390204,390221],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[390268,390278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390280,390285]},{"pos":[390294,390306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390312,390335],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[390337,390462]},{"pos":[390515,390525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390527,390532]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[390535,390609]},{"pos":[390616,390628],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[390630,390742]},{"pos":[390749,390756],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[390758,390885]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[390886,390979]},{"pos":[390985,391002],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[391004,391069]},{"pos":[391120,391130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[391132,391137]},{"pos":[391146,391158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[391160,391205]},{"pos":[391211,391227],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[391273,391283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[391285,391290]},{"pos":[391299,391311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[391317,391340],"content":"Method displaceNegative","linkify":"Method displaceNegative","nodes":[{"content":"Method displaceNegative","pos":[0,23]}]},{"pos":[391410,391420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[391422,391427]},{"content":"mode","pos":[391441,391445]},{"pos":[391454,391466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[391472,391499],"content":"Method displaceNegativeMode","linkify":"Method displaceNegativeMode","nodes":[{"content":"Method displaceNegativeMode","pos":[0,27]}]},{"pos":[391565,391575],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[391577,391581]},{"pos":[391590,391602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[391608,391636],"content":"Method displaceNegativeValue","linkify":"Method displaceNegativeValue","nodes":[{"content":"Method displaceNegativeValue","pos":[0,28]}]},{"pos":[391694,391704],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[391706,391711]},{"pos":[391720,391732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[391738,391758],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[391825,391835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[391837,391842]},{"content":"mode","pos":[391856,391860]},{"pos":[391869,391881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[391887,391911],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[391974,391984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[391986,391990]},{"pos":[391999,392011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[392017,392042],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[392097,392107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[392109,392114]},{"pos":[392123,392135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[392141,392161],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[392228,392238],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[392240,392245]},{"content":"mode","pos":[392259,392263]},{"pos":[392272,392284],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[392290,392314],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[392377,392387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[392389,392393]},{"pos":[392402,392414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[392420,392445],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[392500,392510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[392512,392517]},{"pos":[392526,392538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[392544,392564],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[392566,392765]},{"pos":[392815,392825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[392827,392832]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[392835,392909]},{"pos":[392916,392928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[392930,393074]},{"pos":[393080,393095],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[393097,393178]},{"pos":[393223,393233],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393235,393240]},{"pos":[393249,393261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[393263,393323]},{"pos":[393329,393344],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[393346,393440]},{"pos":[393534,393544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[393546,393556]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[393559,393644]},{"content":"dragMode","pos":[393656,393664]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[393667,393752]},{"content":"x","pos":[393764,393765]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[393768,393853]},{"content":"y","pos":[393865,393866]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[393869,393954]},{"pos":[393961,393973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[393975,394040]},{"pos":[394046,394063],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[394065,394161]},{"pos":[394251,394261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[394263,394273]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[394276,394361]},{"content":"dragMode","pos":[394373,394381]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[394384,394469]},{"content":"x","pos":[394481,394482]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[394485,394570]},{"content":"y","pos":[394582,394583]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[394586,394671]},{"pos":[394678,394690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[394692,394757]},{"pos":[394763,394778],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[394780,394850]},{"pos":[394884,394896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[394898,395029]},{"pos":[395035,395049],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[395051,395102]},{"pos":[395154,395164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395166,395171]},{"pos":[395180,395192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[395194,395242]},{"pos":[395249,395256],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[395258,395333]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[395334,395429]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[395430,395564]},{"pos":[395570,395593],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[395668,395678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395680,395685]},{"pos":[395694,395706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[395712,395733],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[395784,395794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395796,395801]},{"pos":[395810,395822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[395828,395839],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[395841,395898]},{"pos":[395939,395949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395951,395956]},{"pos":[395965,395977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[395979,396034]},{"pos":[396040,396055],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[396057,396114]},{"pos":[396159,396169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[396171,396176]},{"pos":[396185,396197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[396199,396232]},{"pos":[396238,396260],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[396262,396313]},{"pos":[396365,396375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[396377,396382]},{"pos":[396391,396403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[396405,396449]},{"pos":[396456,396463],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[396465,396533]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[396539,396609]},{"content":"The second byte contains a value for green.","pos":[396614,396657]},{"content":"The third byte contains a value for blue.","pos":[396662,396703]},{"content":"The high-order byte must be zero.","pos":[396708,396741]},{"content":"The maximum value for a single byte is 255.","pos":[396746,396789]},{"pos":[396795,396814],"content":"Method getCursorPos","linkify":"Method getCursorPos","nodes":[{"content":"Method getCursorPos","pos":[0,19]}]},{"pos":[396858,396870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[396876,396902],"content":"Method getFirstVisibleLine","linkify":"Method getFirstVisibleLine","nodes":[{"content":"Method getFirstVisibleLine","pos":[0,26]}]},{"pos":[396947,396959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[396965,396979],"content":"Method getLine","linkify":"Method getLine","nodes":[{"content":"Method getLine","pos":[0,14]}]},{"pos":[397022,397032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[397034,397040]},{"pos":[397049,397061],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[397067,397086],"content":"Method getLineCount","linkify":"Method getLineCount","nodes":[{"content":"Method getLineCount","pos":[0,19]}]},{"pos":[397124,397136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[397142,397161],"content":"Method getSelection","linkify":"Method getSelection","nodes":[{"content":"Method getSelection","pos":[0,19]}]},{"pos":[397205,397217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[397223,397240],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[397242,397330]},{"pos":[397383,397393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[397395,397398]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[397401,397471]},{"pos":[397478,397490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[397492,397559]},{"pos":[397565,397586],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[397588,397643]},{"pos":[397687,397699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[397701,397764]},{"pos":[397770,397783],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[397785,397824]},{"pos":[397877,397887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397889,397894]},{"content":"mode","pos":[397908,397912]},{"pos":[397921,397933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[397935,397971]},{"pos":[397978,397985],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[397987,398040]},{"content":"Calculate the height according to the following table:","pos":[398041,398095]},{"content":"Mode.","pos":[398099,398104]},{"content":"Height calculation.","pos":[398118,398137]},{"content":"-1 Exact.","pos":[398325,398334]},{"content":"The exact height in pixels of the controls is used.","pos":[398344,398395]},{"content":"0 Auto.","pos":[398438,398445]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[398457,398546]},{"content":"1 Column height.","pos":[398551,398567]},{"content":"The layout of the form determines the height of the control.","pos":[398570,398630]},{"content":"The height and height calculation mode can be set separately.","pos":[398663,398724]},{"pos":[398730,398747],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[398749,398811]},{"pos":[398858,398868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398870,398875]},{"pos":[398884,398896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[398898,398919]},{"pos":[398926,398933],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[398935,398989]},{"content":"Mode.","pos":[398993,398998]},{"content":"Height Calculation.","pos":[399010,399029]},{"content":"Exact.","pos":[399215,399221]},{"content":"The exact height in pixels of the controls is used.","pos":[399232,399283]},{"content":"Auto.","pos":[399326,399331]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[399343,399432]},{"content":"Column height.","pos":[399437,399451]},{"content":"The layout of the form determines the height of the control.","pos":[399454,399514]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[399547,399632]},{"pos":[399638,399656],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[399658,399697]},{"pos":[399745,399755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399757,399762]},{"pos":[399771,399783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[399785,399806]},{"pos":[399813,399820],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[399822,399912]},{"pos":[399918,399934],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[399936,399976]},{"pos":[400011,400023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[400025,400113]},{"pos":[400120,400127],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[400129,400199]},{"content":"Use the helpText method to set the value of the Help text.","pos":[400200,400258]},{"pos":[400264,400279],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[400281,400385]},{"pos":[400430,400440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400442,400447]},{"pos":[400456,400468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[400470,400525]},{"pos":[400532,400539],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[400541,400609]},{"content":"The Help text must not exceed 250 characters.","pos":[400610,400655]},{"pos":[400661,400683],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[400685,400748]},{"pos":[400800,400810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400812,400817]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[400820,400887]},{"pos":[400894,400906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[400908,400958]},{"pos":[400964,400975],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[400977,401022]},{"pos":[401052,401064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[401066,401093]},{"pos":[401100,401107],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[401109,401153]},{"pos":[401159,401173],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[401217,401227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401229,401234]},{"pos":[401243,401255],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401261,401279],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[401320,401332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401338,401356],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[401358,401424]},{"pos":[401465,401477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[401479,401530]},{"pos":[401537,401544],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[401546,401614]},{"pos":[401620,401639],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[401641,401708]},{"pos":[401750,401762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[401764,401816]},{"pos":[401822,401847],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[401849,401948]},{"pos":[402017,402027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[402029,402046]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[402049,402177]},{"pos":[402184,402196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[402198,402357]},{"pos":[402364,402371],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[402373,402562]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[402563,402640]},{"content":"FormAllowUserSetup::No 0","pos":[402980,403004]},{"content":"No changes can be made to the control.","pos":[403015,403053]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[403054,403143]},{"content":"FormAllowUserSetup::Restricted 1","pos":[403148,403180]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[403183,403275]},{"content":"The user cannot move the control.","pos":[403276,403309]},{"content":"FormAllowUserSetup::Yes 2","pos":[403316,403341]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[403351,403443]},{"content":"The user can also move the control.","pos":[403444,403479]},{"pos":[403487,403501],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[403538,403550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403556,403569],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[403620,403630],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403632,403637]},{"pos":[403646,403658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403664,403676],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[403678,403715]},{"pos":[403757,403767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403769,403774]},{"pos":[403783,403795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[403797,403835]},{"pos":[403842,403849],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[403851,403929]},{"content":"The label property value cannot exceed 250 characters.","pos":[403930,403984]},{"pos":[403990,404011],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[404062,404072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404074,404079]},{"pos":[404088,404100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404106,404122],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[404168,404178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404180,404185]},{"pos":[404194,404206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404212,404236],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[404290,404300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404302,404307]},{"pos":[404316,404328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404334,404350],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[404396,404406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404408,404413]},{"pos":[404422,404434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404440,404460],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[404510,404520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404522,404527]},{"pos":[404536,404548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404554,404581],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[404638,404648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404650,404655]},{"pos":[404664,404676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404682,404699],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[404746,404756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404758,404763]},{"pos":[404772,404784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404790,404808],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[404866,404876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404878,404883]},{"content":"mode","pos":[404897,404901]},{"pos":[404910,404922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404928,404950],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[405002,405012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405014,405019]},{"pos":[405028,405040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[405046,405069],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[405122,405132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405134,405139]},{"pos":[405148,405160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[405166,405184],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[405240,405250],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405252,405257]},{"pos":[405266,405278],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[405284,405309],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[405406,405416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[405418,405419]},{"content":"y","pos":[405433,405434]},{"content":"button","pos":[405448,405454]},{"content":"Ctrl","pos":[405468,405472]},{"content":"Shift","pos":[405486,405491]},{"pos":[405500,405512],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[405518,405539],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[405632,405642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[405644,405645]},{"content":"y","pos":[405659,405660]},{"content":"button","pos":[405674,405680]},{"content":"Ctrl","pos":[405694,405698]},{"content":"Shift","pos":[405712,405717]},{"pos":[405726,405738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[405744,405763],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[405854,405864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[405866,405867]},{"content":"y","pos":[405881,405882]},{"content":"button","pos":[405896,405902]},{"content":"Ctrl","pos":[405916,405920]},{"content":"Shift","pos":[405934,405939]},{"pos":[405948,405960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[405966,405986],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[406036,406046],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[406048,406053]},{"pos":[406062,406074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[406080,406101],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[406160,406170],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[406172,406177]},{"pos":[406186,406198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[406204,406221],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[406278,406288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[406290,406295]},{"content":"mode","pos":[406309,406313]},{"pos":[406322,406334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[406340,406361],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[406412,406422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[406424,406429]},{"pos":[406438,406450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[406456,406478],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[406530,406540],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[406542,406547]},{"pos":[406556,406568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[406574,406586],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[406621,406633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[406639,406650],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[406652,406716]},{"pos":[406767,406777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[406779,406784]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[406787,406873]},{"content":"mode","pos":[406885,406889]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[406892,406978]},{"pos":[406985,406997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[406999,407050]},{"pos":[407056,407071],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[407073,407134]},{"pos":[407179,407189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[407191,407196]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[407199,407285]},{"pos":[407292,407304],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[407306,407362]},{"pos":[407368,407384],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[407386,407450]},{"pos":[407496,407506],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[407508,407513]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[407516,407597]},{"pos":[407604,407616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[407618,407669]},{"pos":[407675,407691],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[407754,407764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[407766,407771]},{"content":"mode","pos":[407785,407789]},{"pos":[407798,407810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[407816,407836],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[407895,407905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[407907,407911]},{"pos":[407920,407932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[407938,407959],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[408010,408020],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408022,408027]},{"pos":[408036,408048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408054,408073],"content":"Method lineFromChar","linkify":"Method lineFromChar","nodes":[{"content":"Method lineFromChar","pos":[0,19]}]},{"pos":[408124,408134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[408136,408145]},{"pos":[408154,408166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408172,408188],"content":"Method lineIndex","linkify":"Method lineIndex","nodes":[{"content":"Method lineIndex","pos":[0,16]}]},{"pos":[408233,408243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[408245,408251]},{"pos":[408260,408272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408278,408295],"content":"Method lineLength","linkify":"Method lineLength","nodes":[{"content":"Method lineLength","pos":[0,17]}]},{"pos":[408341,408351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[408353,408359]},{"pos":[408368,408380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408386,408405],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[408454,408464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408466,408471]},{"pos":[408480,408492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408498,408514],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[408568,408578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408580,408585]},{"pos":[408594,408606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408612,408632],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[408634,408687]},{"pos":[408745,408755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408757,408762]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[408765,408859]},{"pos":[408866,408878],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[408880,408953]},{"pos":[408959,408974],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[409012,409024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409030,409050],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[409052,409109]},{"pos":[409201,409211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[409213,409214]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[409217,409278]},{"content":"y","pos":[409290,409291]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[409294,409355]},{"content":"button","pos":[409367,409373]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[409376,409437]},{"content":"Ctrl","pos":[409449,409453]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[409456,409517]},{"content":"Shift","pos":[409529,409534]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[409537,409598]},{"pos":[409605,409617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[409619,409658]},{"pos":[409665,409672],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[409674,409778]},{"pos":[409784,409800],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[409802,409867]},{"pos":[409955,409965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[409967,409968]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[409971,410032]},{"content":"y","pos":[410044,410045]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[410048,410109]},{"content":"button","pos":[410121,410127]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[410130,410191]},{"content":"Ctrl","pos":[410203,410207]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[410210,410271]},{"content":"Shift","pos":[410283,410288]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[410291,410352]},{"pos":[410359,410371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[410373,410412]},{"pos":[410419,410426],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[410428,410532]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[410533,410668]},{"pos":[410674,410690],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[410692,410757]},{"pos":[410845,410855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[410857,410858]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[410861,410922]},{"content":"y","pos":[410934,410935]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[410938,410999]},{"content":"button","pos":[411011,411017]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[411020,411081]},{"content":"Ctrl","pos":[411093,411097]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[411100,411161]},{"content":"Shift","pos":[411173,411178]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[411181,411242]},{"pos":[411249,411261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[411263,411302]},{"pos":[411309,411316],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[411318,411422]},{"pos":[411428,411442],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[411444,411516]},{"pos":[411602,411612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[411614,411615]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[411618,411679]},{"content":"y","pos":[411691,411692]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[411695,411756]},{"content":"button","pos":[411768,411774]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[411777,411838]},{"content":"Ctrl","pos":[411850,411854]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[411857,411918]},{"content":"Shift","pos":[411930,411935]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[411938,411999]},{"pos":[412006,412018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[412020,412059]},{"pos":[412066,412073],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[412075,412179]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[412180,412315]},{"pos":[412321,412332],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[412334,412485]},{"pos":[412526,412536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412538,412543]},{"content":"The name to assign to the control; optional.","pos":[412546,412590]},{"pos":[412597,412609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[412611,412675]},{"pos":[412682,412689],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[412691,412785]},{"content":"It must start with a letter.","pos":[412791,412819]},{"content":"It cannot exceed 250 characters.","pos":[412824,412856]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[412861,412915],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[412920,412960]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[412965,413075]},{"pos":[413081,413104],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[413157,413167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413169,413174]},{"pos":[413183,413195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[413201,413228],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[413280,413292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[413298,413318],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[413320,413365]},{"pos":[413412,413424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[413426,413461]},{"pos":[413467,413485],"content":"Method posFromChar","linkify":"Method posFromChar","nodes":[{"content":"Method posFromChar","pos":[0,18]}]},{"pos":[413541,413551],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[413553,413562]},{"pos":[413571,413583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[413589,413610],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[413661,413671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413673,413678]},{"pos":[413687,413699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[413705,413722],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[413769,413779],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413781,413786]},{"pos":[413795,413807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[413813,413835],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[413895,413905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413907,413912]},{"pos":[413921,413933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[413939,413956],"content":"Method rotateSign","linkify":"Method rotateSign","nodes":[{"content":"Method rotateSign","pos":[0,17]}]},{"pos":[414003,414013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414015,414020]},{"pos":[414029,414041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[414047,414070],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[414123,414133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414135,414140]},{"pos":[414149,414161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[414167,414184],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[414231,414241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414243,414248]},{"pos":[414257,414269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[414275,414293],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[414295,414354]},{"pos":[414422,414432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414434,414439]},{"content":"The ID of the security key to assign to the control; optional.","pos":[414442,414504]},{"pos":[414511,414523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[414525,414624]},{"pos":[414630,414652],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[414654,414694]},{"pos":[414749,414759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[414761,414771]},{"content":"The ID of the menu to show.","pos":[414774,414801]},{"pos":[414808,414820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[414822,414881]},{"pos":[414887,414903],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[414957,414967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414969,414974]},{"pos":[414983,414995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415001,415016],"content":"Method showZero","linkify":"Method showZero","nodes":[{"content":"Method showZero","pos":[0,15]}]},{"pos":[415061,415071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415073,415078]},{"pos":[415087,415099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415105,415123],"content":"Method signDisplay","linkify":"Method signDisplay","nodes":[{"content":"Method signDisplay","pos":[0,18]}]},{"pos":[415171,415181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415183,415188]},{"pos":[415197,415209],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415215,415226],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[415228,415355]},{"pos":[415404,415414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415416,415421]},{"content":"The value to assign to the skip property of the control; optional.","pos":[415424,415490]},{"pos":[415497,415509],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[415511,415617]},{"pos":[415623,415634],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[415689,415699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[415701,415714]},{"pos":[415723,415735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415741,415753],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[415795,415805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415807,415812]},{"pos":[415821,415833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415839,415853],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[415855,415898]},{"pos":[415931,415943],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[415945,416047]},{"pos":[416054,416061],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[416063,416135]},{"pos":[416141,416151],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[416153,416215]},{"pos":[416265,416275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[416277,416282]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[416285,416369]},{"content":"mode","pos":[416381,416385]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[416388,416472]},{"pos":[416479,416491],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[416493,416542]},{"pos":[416548,416562],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[416564,416623]},{"pos":[416667,416677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[416679,416684]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[416687,416771]},{"pos":[416778,416790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[416792,416846]},{"pos":[416852,416867],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[416869,416931]},{"pos":[416976,416986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[416988,416993]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[416996,417075]},{"pos":[417082,417094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[417096,417145]},{"pos":[417151,417162],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[417203,417213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[417215,417220]},{"pos":[417229,417241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[417247,417263],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[417265,417332]},{"pos":[417386,417396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[417398,417403]},{"content":"The value to assign to the underline property of the control; optional.","pos":[417406,417477]},{"pos":[417484,417496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[417498,417562]},{"pos":[417568,417595],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[417659,417669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[417671,417675]},{"pos":[417684,417696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[417702,417717],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[417719,417762]},{"pos":[417807,417817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[417819,417824]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[417827,417899]},{"pos":[417906,417918],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[417920,417950]},{"pos":[417956,417975],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[417977,418025]},{"pos":[418074,418084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418086,418091]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[418094,418171]},{"pos":[418178,418190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[418192,418227]},{"pos":[418233,418253],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[418255,418314]},{"pos":[418364,418374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418376,418381]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[418384,418472]},{"pos":[418479,418491],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[418493,418539]},{"pos":[418545,418563],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[418565,418648]},{"pos":[418696,418706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418708,418713]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[418716,418796]},{"pos":[418803,418815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[418817,418873]},{"pos":[418879,418904],"content":"Method userFastTabSummary","linkify":"Method userFastTabSummary","nodes":[{"content":"Method userFastTabSummary","pos":[0,25]}]},{"pos":[418959,418969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418971,418976]},{"pos":[418985,418997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[419003,419020],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[419022,419074]},{"pos":[419121,419131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419133,419138]},{"content":"The user height for the control; optional.","pos":[419141,419183]},{"pos":[419190,419202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[419204,419243]},{"pos":[419249,419264],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[419266,419348]},{"pos":[419393,419403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419405,419410]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[419413,419492]},{"pos":[419499,419511],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[419513,419568]},{"pos":[419575,419582],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[419584,419754]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[419755,419830]},{"content":"This method lets you programmatically determine and set the value.","pos":[419831,419897]},{"pos":[419903,419926],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[419928,419984]},{"pos":[420037,420047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420049,420054]},{"content":"The organization container to set for the control; optional.","pos":[420057,420117]},{"pos":[420124,420136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[420138,420181]},{"pos":[420187,420208],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[420210,420264]},{"pos":[420315,420325],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420327,420332]},{"content":"The organization sibling to set for the control; optional.","pos":[420335,420393]},{"pos":[420400,420412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[420414,420455]},{"pos":[420461,420482],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[420484,420533]},{"pos":[420584,420594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420596,420601]},{"content":"The user label text to set for the control; optional.","pos":[420604,420657]},{"pos":[420664,420676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[420678,420714]},{"pos":[420720,420744],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[420746,420799]},{"pos":[420853,420863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420865,420870]},{"content":"The user security level to set for the control; optional.","pos":[420873,420930]},{"pos":[420937,420949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[420951,420991]},{"pos":[420997,421012],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[421014,421162]},{"pos":[421207,421217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421219,421224]},{"content":"The value to assign to the userSkip property; optional.","pos":[421227,421282]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[421283,421378]},{"pos":[421385,421397],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[421399,421468]},{"pos":[421474,421490],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[421492,421543]},{"pos":[421589,421599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421601,421606]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[421609,421675]},{"pos":[421682,421694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[421696,421825]},{"pos":[421832,421839],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[421841,421935]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[421936,422052],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[422053,422203]},{"pos":[422209,422224],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[422262,422274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422280,422292],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[422334,422344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[422346,422351]},{"pos":[422360,422372],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[422378,422400],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[422402,422463]},{"pos":[422532,422542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[422544,422549]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[422552,422629]},{"content":"mode","pos":[422641,422645]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[422648,422725]},{"pos":[422732,422744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[422746,422794]},{"pos":[422800,422826],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[422828,422887]},{"pos":[422952,422962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[422964,422968]},{"pos":[422977,422989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[422991,423045]},{"pos":[423051,423078],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[423080,423141]},{"pos":[423198,423208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423210,423215]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[423218,423296]},{"pos":[423303,423315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[423317,423365]},{"pos":[423371,423390],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[423439,423449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423451,423456]},{"pos":[423465,423477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[423483,423497],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[423499,423569]},{"pos":[423621,423631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423633,423638]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[423641,423713]},{"pos":[423720,423732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[423734,423783]},{"pos":[423789,423801],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[423803,423841]},{"pos":[423893,423903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423905,423910]},{"content":"mode","pos":[423924,423928]},{"pos":[423937,423949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[423951,423986]},{"pos":[423993,424000],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[424002,424055]},{"content":"Calculate the width according to the following table:","pos":[424056,424109]},{"content":"Mode.","pos":[424113,424118]},{"content":"Width calculation.","pos":[424131,424149]},{"content":"-1 Exact.","pos":[424335,424344]},{"content":"The exact width in pixels of the controls is used.","pos":[424353,424403]},{"content":"0 Auto.","pos":[424446,424453]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[424464,424552]},{"content":"1 Column width.","pos":[424557,424572]},{"content":"The layout of the form determines the width of the control.","pos":[424575,424634]},{"content":"The width and width calculation mode can be set separately.","pos":[424667,424726]},{"pos":[424732,424748],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[424750,424812]},{"pos":[424858,424868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424870,424875]},{"pos":[424884,424896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[424898,424959]},{"pos":[424966,424973],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[424975,425028]},{"content":"Mode.","pos":[425032,425037]},{"content":"Width Calculation.","pos":[425048,425066]},{"content":"Exact.","pos":[425250,425256]},{"content":"The exact width in pixels of the controls is used.","pos":[425266,425316]},{"content":"Auto.","pos":[425359,425364]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[425375,425463]},{"content":"Column width.","pos":[425468,425481]},{"content":"The layout of the form determines the width of the control.","pos":[425484,425543]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[425576,425659]},{"pos":[425665,425682],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[425684,425722]},{"pos":[425769,425779],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425781,425786]},{"pos":[425795,425807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[425809,425844]},{"pos":[425851,425858],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[425860,425933]},{"pos":[425939,425954],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[425956,425986]},{"pos":[426020,426037],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[426039,426109]},{"pos":[426199,426209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[426211,426212]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[426215,426276]},{"content":"y","pos":[426288,426289]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[426292,426353]},{"content":"button","pos":[426365,426371]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[426374,426435]},{"content":"Ctrl","pos":[426447,426451]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[426454,426515]},{"content":"Shift","pos":[426527,426532]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[426535,426596]},{"pos":[426602,426619],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[426703,426713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[426715,426721]},{"content":"e","pos":[426735,426736]},{"pos":[426744,426758],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[426791,426808],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[426892,426902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[426904,426910]},{"content":"e","pos":[426924,426925]},{"pos":[426933,426957],"content":"Method performTypeLookup","linkify":"Method performTypeLookup","nodes":[{"content":"Method performTypeLookup","pos":[0,24]}]},{"pos":[427063,427073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userType","pos":[427075,427083]},{"content":"arrayIndex","pos":[427097,427107]},{"content":"company","pos":[427121,427128]},{"pos":[427136,427147],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[427149,427247]},{"pos":[427333,427343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[427345,427355]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[427358,427443]},{"content":"dragMode","pos":[427455,427463]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[427466,427551]},{"content":"x","pos":[427563,427564]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[427567,427652]},{"content":"y","pos":[427664,427665]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[427668,427753]},{"pos":[427759,427773],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[427775,427836]},{"pos":[427870,427877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[427879,428007]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[428008,428112]},{"pos":[428118,428135],"content":"Method textChange","linkify":"Method textChange","nodes":[{"content":"Method textChange","pos":[0,17]}]},{"pos":[428171,428187],"content":"Method pasteText","linkify":"Method pasteText","nodes":[{"content":"Method pasteText","pos":[0,16]}]},{"pos":[428256,428266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pasteStr","pos":[428268,428276]},{"content":"InsertSel","pos":[428290,428299]},{"pos":[428307,428320],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[428352,428369],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[428371,428425]},{"pos":[428461,428480],"content":"Method scrollCursor","linkify":"Method scrollCursor","nodes":[{"content":"Method scrollCursor","pos":[0,19]}]},{"pos":[428518,428536],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[428621,428631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[428633,428639]},{"content":"e","pos":[428653,428654]},{"pos":[428662,428681],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[428767,428777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[428779,428785]},{"content":"e","pos":[428799,428800]},{"pos":[428808,428822],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[428824,428864]},{"pos":[428897,428916],"content":"Method setSelection","linkify":"Method setSelection","nodes":[{"content":"Method setSelection","pos":[0,19]}]},{"pos":[428989,428999],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndexFrom","pos":[429001,429014]},{"content":"charIndexTo","pos":[429028,429039]},{"pos":[429047,429065],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[429067,429138]},{"pos":[429189,429199],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[429201,429210]},{"content":"The string value to use to filter data; optional.","pos":[429213,429262]},{"pos":[429268,429280],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[429311,429333],"content":"Method performDBLookup","linkify":"Method performDBLookup","nodes":[{"content":"Method performDBLookup","pos":[0,22]}]},{"pos":[429441,429451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[429453,429460]},{"content":"tableId","pos":[429474,429481]},{"content":"company","pos":[429495,429502]},{"pos":[429510,429524],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[429605,429615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[429617,429623]},{"content":"e","pos":[429637,429638]},{"pos":[429646,429667],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[429669,429690]},{"pos":[429730,429743],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[429791,429801],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[429803,429812]},{"pos":[429820,429833],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[429835,429935]},{"pos":[430017,430027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[430029,430039]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[430042,430127]},{"content":"dragMode","pos":[430139,430147]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[430150,430235]},{"content":"x","pos":[430247,430248]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[430251,430336]},{"content":"y","pos":[430348,430349]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[430352,430437]},{"pos":[430443,430454],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[430456,430508]},{"pos":[430538,430553],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[430555,430601]},{"pos":[430635,430646],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[430676,430699],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[430701,430742]},{"pos":[430784,430803],"content":"Method setCursorPos","linkify":"Method setCursorPos","nodes":[{"content":"Method setCursorPos","pos":[0,19]}]},{"pos":[430854,430864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[430866,430867]},{"content":"y","pos":[430881,430882]},{"pos":[430890,430907],"content":"Method lineScroll","linkify":"Method lineScroll","nodes":[{"content":"Method lineScroll","pos":[0,17]}]},{"pos":[430958,430968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dx","pos":[430970,430972]},{"content":"dy","pos":[430986,430988]},{"pos":[430996,431012],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[431014,431110]},{"pos":[431145,431161],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[431244,431254],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[431256,431262]},{"content":"e","pos":[431276,431277]},{"pos":[431285,431297],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[431299,431353]},{"pos":[431384,431394],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[431396,431429]},{"pos":[431458,431482],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[431539,431549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[431551,431555]},{"pos":[431563,431581],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[431666,431676],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[431678,431684]},{"content":"e","pos":[431698,431699]},{"pos":[431707,431722],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[431804,431814],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[431816,431822]},{"content":"e","pos":[431836,431837]},{"pos":[431845,431866],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[431868,431937]},{"pos":[431999,432009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[432011,432016]},{"content":"The preferred height of the control.","pos":[432019,432055]},{"content":"height","pos":[432067,432073]},{"content":"The preferred height of the control.","pos":[432076,432112]},{"pos":[432118,432134],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[432136,432178]},{"pos":[432213,432242],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[432360,432370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[432372,432388]},{"content":"objectMethodToCall","pos":[432402,432420]},{"content":"overrideObject","pos":[432434,432448]}],"content":"---\n# required metadata\n\ntitle: F Classes - FormGroupControl to FormIntControl\ndescription: This wiki contains API reference documentation for classes from FormGroupControl to FormIntControl.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2016-03-09 00 - 04 - 30\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 63823\nms.assetid: f28e493d-2766-466d-a597-ef82e87cdfa6\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# F Classes - FormGroupControl to FormIntControl\n\nThis wiki contains API reference documentation for classes from FormGroupControl to FormIntControl.\n\nClass FormGroupControl\n----------------------\n\n    class FormGroupControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                                                                                                                                                         |\n|---------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            | Adds a form control to a form group control.                                                                                                                                                        |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                                                                                                                                                     |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) | Adds a table field.                                                                                                                                                                                 |\n| public boolean alignChild(\\[boolean value\\])                                                                        | Sets or returns a Boolean value that indicates whether a form group control is aligned in the same manner as other controls in a form.                                                              |\n| public boolean alignChildren(\\[boolean value\\])                                                                     | Sets or returns a Boolean value that indicates whether the child controls are aligned.                                                                                                              |\n| public boolean alignControl(\\[boolean value\\])                                                                      | Determines whether the control is aligned with other controls.                                                                                                                                      |\n| public boolean allowEdit(\\[boolean value\\])                                                                         | Determines whether the user can modify the contents of the control.                                                                                                                                 |\n| public boolean allowSysSetup()                                                                                      | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                                                 |\n| public int allowUserSetup(\\[int value\\])                                                                            | Sets or gets the level of modification that can be performed for a form group control.                                                                                                              |\n| public int arrangeGuide(\\[int value\\])                                                                              |                                                                                                                                                                                                     |\n| public int arrangeMethod(\\[int value\\])                                                                             | Sets or returns an integer value that indicates how controls in a form group control are arranged.                                                                                                  |\n| public int arrangeWhen(\\[int value\\])                                                                               | Sets or returns an integer value that specifies when the controls are arranged.                                                                                                                     |\n| public boolean autoDataGroup(\\[boolean value\\])                                                                     | Sets or returns a Boolean value that specifies whether a form group control can contain only the fields in the data group that are specified for the control.                                       |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   | Determines whether the system can declare a member variable that has the same name as the control.                                                                                                  |\n| public int backgroundColor(\\[int value\\])                                                                           | Gets or sets the background color of the control.                                                                                                                                                   |\n| public Image backgroundImage(\\[Image image\\], \\[int drawMode\\])                                                     | Specifies the background image for a form group control.                                                                                                                                            |\n| public int backStyle(\\[int value\\])                                                                                 | Determines whether the control background can be transparent.                                                                                                                                       |\n| public int beginDrag(int x, int y)                                                                                  | Is called when the user starts to move a form group control.                                                                                                                                        |\n| public int bold(\\[int value\\])                                                                                      | Gets or sets the weight of font that is used to display text in the control.                                                                                                                        |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                           | Sets or returns the bottom margin of a form group control in pixels and specifies whether the margin is automatically adjusted.                                                                     |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                                 | Sets or returns an AutoMode enumeration value that indicates whether the bottom margin is automatically adjusted.                                                                                   |\n| public int bottomMarginValue(\\[int value\\])                                                                         | Sets or returns the bottom margin of a form group control in pixels.                                                                                                                                |\n| public boolean breakable(\\[boolean value\\])                                                                         |                                                                                                                                                                                                     |\n| public container calcControlSize(int chars, int lines)                                                              | Calculates the size of a form group control, based on the number of characters and the number of lines.                                                                                             |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               | Indicates whether a table field can be added.                                                                                                                                                       |\n| public boolean canContain(FormControl control)                                                                      | Specifies whether a form group control can contain the specified form control.                                                                                                                      |\n| public str caption(\\[str value\\])                                                                                   | Gets or set the caption of the control.                                                                                                                                                             |\n| public int characterSet(\\[int value\\])                                                                              | Gets or sets the character set of the font.                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                               | Gets or sets the color scheme of the control.                                                                                                                                                       |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                             | Sets or returns the number of columns in a form group control in pixels, and specifies whether the number is automatically adjusted.                                                                |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                                | Sets or returns a value that indicates whether the number of columns in a form group control is fixed, or whether it is automatically adjusted based on other form settings, such as the form size. |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                            | Sets or returns the amount of space between columns in a form group control in pixels and indicates whether the space is automatically adjusted based on other form settings, such the font size.   |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                                  | Sets or returns an AutoMode enumeration value that indicates whether the amount of space between columns in a form group control is automatically adjusted.                                         |\n| public int columnspaceValue(\\[int value\\])                                                                          | Sets or returns the amount of space between columns in a form group control in pixels.                                                                                                              |\n| public int columnsValue(\\[int value\\])                                                                              | Sets or returns the number of columns in a form group control.                                                                                                                                      |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            | Gets or sets the configuration key that is assigned to the control.                                                                                                                                 |\n| public List configurationKeyEx()                                                                                    | Retrieves a list that contains the IDs of configuration keys that are activated for a form group control.                                                                                           |\n| public boolean contains(FormControl control)                                                                        | Specifies whether a form group control contains a specified form control.                                                                                                                           |\n| public int controlCount()                                                                                           | Returns the number of controls in a form group control.                                                                                                                                             |\n| public FormControl controlNum(int controlNo)                                                                        | Returns a FormControl object for a specified control in a form group control.                                                                                                                       |\n| public str countryRegionCodes(\\[str value\\])                                                                        | Gets or sets the comma-separated list of country/region codes for the control.                                                                                                                      |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                         |                                                                                                                                                                                                     |\n| public str dataGroup(\\[str value\\])                                                                                 | Sets or returns a data group for a form group control.                                                                                                                                              |\n| public str dataRelationPath(\\[str value\\])                                                                          | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                                                       |\n| public int dataSource(\\[AnyType value\\])                                                                            | Gets or sets a data source that will be used by the control or the form.                                                                                                                            |\n| public int displayTarget(\\[int value\\])                                                                             | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.                             |\n| public int dragDrop(\\[int value\\])                                                                                  | Determines whether drag-and-drop operations are enabled or disabled for the control.                                                                                                                |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Is called when an object is dragged over the bounds of a form group control.                                                                                                                        |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                                                    |\n| public str dragText()                                                                                               | Retrieves the text that is displayed when the form control is dragged.                                                                                                                              |\n| public boolean enableChilds(\\[boolean enable\\])                                                                     | Specifies whether the child controls are enabled for a form group control.                                                                                                                          |\n| public boolean enabled(\\[boolean value\\])                                                                           | Determines whether the object is enabled or disabled.                                                                                                                                               |\n| public boolean expand(\\[boolean expand\\])                                                                           | Specifies whether a form group control is expanded.                                                                                                                                                 |\n| public str font(\\[str value\\])                                                                                      | Gets or sets the name of the font that is used for text in a control.                                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                                  | Gets or sets the font size to use for text in a control.                                                                                                                                            |\n| public int frameOptionButton(\\[int value\\])                                                                         | Sets or returns the option button for a form group control.                                                                                                                                         |\n| public int framePosition(\\[int value\\])                                                                             | Sets or returns the location of the frame for a form group control.                                                                                                                                 |\n| public int frameType(\\[int value\\])                                                                                 | Sets or returns the frame style for a form group control.                                                                                                                                           |\n| public boolean hasChanged(\\[boolean val\\])                                                                          | Sets or returns a Boolean value that indicates whether the contents of a form group control have changed.                                                                                           |\n| public boolean hasUserSetting()                                                                                     | Indicates whether the control has custom user settings.                                                                                                                                             |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                                                                                                                                                             |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.                                                                                                                                      |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                                                                                                                                                             |\n| public str helpField()                                                                                              | Returns the Help text that is displayed in the status bar when a form group control is selected.                                                                                                    |\n| public str helpText(\\[str value\\])                                                                                  | Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.                                                                                     |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                       | Sets or gets a Boolean value that indicates whether a form group control is visible when the controls in the group are not visible.                                                                 |\n| public str hierarchyParent(\\[str value\\])                                                                           | Gets or sets the HierarchyParent property value of the control.                                                                                                                                     |\n| public int hWnd()                                                                                                   | Returns a handle for a form group control.                                                                                                                                                          |\n| public boolean isContainer()                                                                                        | Indicates whether a form group control is a container.                                                                                                                                              |\n| public boolean isDisplayed()                                                                                        | Indicates whether a form group control is displayed.                                                                                                                                                |\n| public boolean isRestricted()                                                                                       | Retrieves a value that indicates whether the control is restricted.                                                                                                                                 |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            | Returns a value that indicates whether the control allows for the specified level of customization.                                                                                                 |\n| public boolean italic(\\[boolean value\\])                                                                            | Sets or returns a Boolean value that indicates whether the text for a form group control is italic.                                                                                                 |\n| public int labelBold(\\[int value\\])                                                                                 | Sets or returns the font weight of the label text for a form group control.                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                         | Sets or returns the character set of the font for the label text for a form group control.                                                                                                          |\n| public str labelFont(\\[str value\\])                                                                                 | Sets or returns the font for the label text for a form group control.                                                                                                                               |\n| public int labelFontSize(\\[int value\\])                                                                             | Sets or returns the font size of the label text for a form group control.                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                                                                       | Sets or returns a Boolean data type that indicates whether the label text for a form group control is italic.                                                                                       |\n| public boolean labelUnderline(\\[boolean value\\])                                                                    | Sets or returns a Boolean data type that indicates whether the label text for a form group control is underlined.                                                                                   |\n| public boolean leave()                                                                                              | Is called when the user moves the mouse pointer out of a form group control.                                                                                                                        |\n| public int left(int value, \\[int mode\\])                                                                            | Sets or returns the horizontal position of a form group control in pixels and specifies how the position is calculated.                                                                             |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                             | Sets or returns the size of the left margin for a form group control in pixels and specifies whether the size is automatically adjusted.                                                            |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                                   | Sets or returns a value that indicates whether the size of the left margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.        |\n| public int leftMarginValue(\\[int value\\])                                                                           | Sets or returns the size of the left margin for a form group control in pixels.                                                                                                                     |\n| public int leftMode(\\[int value\\])                                                                                  | Sets or returns a value that indicates how the horizontal position of a form group control is calculated.                                                                                           |\n| public int leftValue(\\[int value\\])                                                                                 | Sets or returns the horizontal position of a form group control in pixels.                                                                                                                          |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     | Marks or unmarks the control as a user-added control.                                                                                                                                               |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     | Is called when the user double-clicks a form group control.                                                                                                                                         |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user presses the mouse button in a form group control.                                                                                                                           |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user moves the mouse pointer over a form group control.                                                                                                                          |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           | Is called when the user releases the mouse button over a form group control.                                                                                                                        |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        | Moves a specified control.                                                                                                                                                                          |\n| public str name(\\[str value\\])                                                                                      | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.                                                             |\n| public int neededPermission(\\[int value\\])                                                                          |                                                                                                                                                                                                     |\n| public int optionValue(\\[int value\\])                                                                               | Sets or returns the value for the option button that is associated with a form group control.                                                                                                       |\n| public container SysObsoleteAttribute()                                                                             |                                                                                                                                                                                                     |\n| public FormControl parentControl()                                                                                  | Retrieves the parent control for the control.                                                                                                                                                       |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                            | Sets or returns the size of the right margin for a form group control in pixels and specifies whether the size is automatically adjusted.                                                           |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                                  | Sets or returns a value that indicates whether the size of the right margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.       |\n| public int rightMarginValue(\\[int value\\])                                                                          | Sets or returns the size of the right margin for a form group control in pixels.                                                                                                                    |\n| public boolean saveFilter(\\[boolean value\\])                                                                        |                                                                                                                                                                                                     |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           | Sets or returns the security key ID for a form group control.                                                                                                                                       |\n| public int showContextMenu(int menuHandle)                                                                          | Shows a shortcut menu for a form group control.                                                                                                                                                     |\n| public boolean skip(\\[boolean value\\])                                                                              | Sets or returns a Boolean value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                                             |\n| public int sort(\\[SortOrder sortDirection\\])                                                                        | Sorts the controls that are contained in a form group control.                                                                                                                                      |\n| public int style(\\[int value\\])                                                                                     |                                                                                                                                                                                                     |\n| public str toolTip()                                                                                                | Returns the text string for the tooltip for a form group control.                                                                                                                                   |\n| public int top(int value, \\[int mode\\])                                                                             | Sets or returns the vertical position of a form group control in pixels and specifies how the position is calculated.                                                                               |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                              | Sets or returns the top margin for a form group control in pixels and specifies whether the size is automatically adjusted.                                                                         |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                                    | Sets or returns a value that indicates whether the size of the top margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.         |\n| public int topMarginValue(\\[int value\\])                                                                            |                                                                                                                                                                                                     |\n| public int topMode(\\[int value\\])                                                                                   | Sets or returns a value that indicates how the vertical position of a form group control is calculated.                                                                                             |\n| public int topValue(\\[int value\\])                                                                                  | Sets or returns the vertical position of a form group control in pixels.                                                                                                                            |\n| public int type(\\[int value\\])                                                                                      |                                                                                                                                                                                                     |\n| public boolean underline(\\[boolean value\\])                                                                         | Sets or returns the underline property for the text in the control.                                                                                                                                 |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                                                                                                                                                     |\n| public int userData(\\[int value\\])                                                                                  | Gets or sets the user data for the control.                                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                              | Gets or sets the user data item for the control.                                                                                                                                                    |\n| public int userDataItems(\\[int value\\])                                                                             | Gets or sets the number of user data items for the control.                                                                                                                                         |\n| public int userDisable(\\[int value\\])                                                                               | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                                                 |\n| public int userHeight(\\[int value\\])                                                                                | Gets or sets the custom user height for the control.                                                                                                                                                |\n| public int userHide(\\[int value\\])                                                                                  | Sets or returns an integer data type that indicates whether a control is hidden from the user.                                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                          | Gets or sets the organization container for the control.                                                                                                                                            |\n| public int userOrgSibling(\\[int value\\])                                                                            | Gets or sets the organization sibling for the control.                                                                                                                                              |\n| public str userPromptText(\\[str value\\])                                                                            | Gets or sets the user label text for the control.                                                                                                                                                   |\n| public int userSecurityLevel(\\[int value\\])                                                                         | Gets or sets the user security level for the control.                                                                                                                                               |\n| public int userSkip(\\[int value\\])                                                                                  | Sets or returns an integer that indicates whether the form group control is skipped when the user presses the TAB key to move to controls.                                                          |\n| public int userWidth(\\[int value\\])                                                                                 | Sets or returns an integer that indicates the width of a form group control in pixels.                                                                                                              |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     | Specifies whether to use the user-specified layout of a form group control.                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        | Gets or sets the amount of space above and below a form group control in pixels, and specifies how the space is calculated.                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              | Sets or returns a value that indicates how the amount of space above and below a form group control is calculated.                                                                                  |\n| public int verticalSpacingValue(\\[int value\\])                                                                      | Gets or sets the amount of space above and below a form group control in pixels.                                                                                                                    |\n| public int viewEditMode(\\[int value\\])                                                                              |                                                                                                                                                                                                     |\n| public boolean visible(\\[boolean value\\])                                                                           | Gets or sets a Boolean data type that displays or hides a form group control.                                                                                                                       |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                                                                                                                                                              |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode for the width of the control.                                                                                                                                     |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                                                                                                                                                              |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |                                                                                                                                                                                                     |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           | Is called when a user drops a form group control or an item in a form group control into a new position.                                                                                            |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                                                                     |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                            |                                                                                                                                                                                                     |\n| public void mouseLeave()                                                                                            | Is called when the user moves the mouse pointer away from the control.                                                                                                                              |\n| public void context()                                                                                               | Is called when the user right-clicks a form group control.                                                                                                                                          |\n| public void copy()                                                                                                  | Copies a form group control.                                                                                                                                                                        |\n| public void cut()                                                                                                   | Cuts the contents of the control.                                                                                                                                                                   |\n| public void paste()                                                                                                 | Pastes a form group control.                                                                                                                                                                        |\n| public void arrange()                                                                                               |                                                                                                                                                                                                     |\n| public void clicked()                                                                                               | Is called when a form group control is clicked by the user.                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                          |                                                                                                                                                                                                     |\n| public void inputSearch(str searchStr)                                                                              | Is called when the user enters a search string in a bound control.                                                                                                                                  |\n| public void resetUserSetting()                                                                                      | Resets the user settings for a form group control.                                                                                                                                                  |\n| private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                          |                                                                                                                                                                                                     |\n| public void lostFocus()                                                                                             | Is called when the user brings a form group control out of focus.                                                                                                                                   |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                                                |\n| public void endDrag()                                                                                               | Is called when the user has finished moving a form group control.                                                                                                                                   |\n| public void jumpRef()                                                                                               | Is called when a user clicks the Go to the Main Table Form command on a control shortcut menu in a form group control.                                                                              |\n| public void setFocus()                                                                                              | Sets the focus on the control.                                                                                                                                                                      |\n| public void filter(\\[str filterStr\\])                                                                               | Is called when the user right-clicks a form group control and then clicks Filter By Selection.                                                                                                      |\n| public void displayControl()                                                                                        | Displays a form group control.                                                                                                                                                                      |\n| public void gotFocus()                                                                                              | Determines when the user brings a form group control into focus.                                                                                                                                    |\n| public void prefColumnSize(int width, int height)                                                                   | Specifies the height and width of columns for a form group control.                                                                                                                                 |\n| public void dragLeave()                                                                                             | Is called when the user drags an object out of the bounds of a form group control.                                                                                                                  |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                                                                     |\n| public void enter()                                                                                                 | Is called when the user moves focus to a form group control.                                                                                                                                        |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       | Is called when the user moves the mouse pointer into the control area.                                                                                                                              |\n\n### Method addControl\n\nAdds a form control to a form group control.\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \nA value that indicates the position of the control; optional. The default value is nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n<!-- -->\n\ncontrolName  \nA value that indicates the position of the control; optional. The default value is nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n<!-- -->\n\ninsertAfter  \nA value that indicates the position of the control; optional. The default value is nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n#### Return Value\n\nA FormControl object that configures form controls.\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\nAdds a table field.\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\nA FormControl object that modifies a form control.\n\n### Method alignChild\n\nSets or returns a Boolean value that indicates whether a form group control is aligned in the same manner as other controls in a form.\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether a form group control is aligned in the same manner as other controls in a form; optional.\n\n#### Return Value\n\ntrue if a control is aligned; otherwise, false.\n\n### Method alignChildren\n\nSets or returns a Boolean value that indicates whether the child controls are aligned.\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the child controls are aligned; optional.\n\n#### Return Value\n\ntrue if the child controls are aligned; otherwise, false.\n\n### Method alignControl\n\nDetermines whether the control is aligned with other controls.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether a form group control is aligned with other controls.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned based on the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can modify the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether data can be modified; optional.\n\n#### Return Value\n\ntrue if the control can be modified; otherwise, false.\n\n#### Remarks\n\nIf this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method allowUserSetup\n\nSets or gets the level of modification that can be performed for a form group control.\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates the level of modification that can be performed; optional.\n\n#### Return Value\n\nAn integer value that indicates the level of modification that can be performed.\n\n#### Remarks\n\nYou can use a FormAllowUserSetup enumeration value for the value parameter.\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\nSets or returns an integer value that indicates how controls in a form group control are arranged.\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how controls in a form group control are arranged; optional.\n\n#### Return Value\n\nAn integer value that indicates how controls in a form group control are arranged.\n\n#### Remarks\n\nYou can use an ArrangeMethod enumeration value for the \\_value parameter.\n\n### Method arrangeWhen\n\nSets or returns an integer value that specifies when the controls are arranged.\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies when the controls are arranged; optional.\n\n#### Return Value\n\nAn integer value that specifies when the controls are arranged.\n\n### Method autoDataGroup\n\nSets or returns a Boolean value that specifies whether a form group control can contain only the fields in the data group that are specified for the control.\n\n    public boolean autoDataGroup([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean data type that indicates whether a form group control can contain only fields in the data group; optional.\n\n#### Return Value\n\ntrue if a form group control can contain only fields in the data group; otherwise, false.\n\n#### Remarks\n\nYou use the FormGroupControl.dataGroup method to set or return a data group for a form group control.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the system declares a variable of the same name as a form group control; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the background color; optional.\n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be 0 (zero).\n-   The maximum value for a single byte is 255.\n\n### Method backgroundImage\n\nSpecifies the background image for a form group control.\n\n    public Image backgroundImage([Image image], [int drawMode])\n\n#### Parameters\n\nimage  \nAn Integer data type that specifies how the image is drawn; optional.\n\n<!-- -->\n\ndrawMode  \nAn Integer data type that specifies how the image is drawn; optional.\n\n#### Return Value\n\nAn Image object.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates the background style; optional.\n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to move a form group control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate for the move event.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate for the move event.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n### Method bold\n\nGets or sets the weight of font that is used to display text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the font weight; optional.\n\n#### Return Value\n\nAn integer value between 0 (zero) and 9, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the font weight as follows:\n\n-   0 – Use the default font weight.\n-   1 – Thin.\n-   2 – Extra-light.\n-   3 – Light.\n-   4 – Normal.\n-   5 – Medium.\n-   6 – Semibold.\n-   7 – Bold.\n-   8 – Extra-bold.\n-   9 – Heavy.\n\n### Method bottomMargin\n\nSets or returns the bottom margin of a form group control in pixels and specifies whether the margin is automatically adjusted.\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn AutoMode enumeration value that indicates whether the bottom margin is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.\n\n<!-- -->\n\nmode  \nAn AutoMode enumeration value that indicates whether the bottom margin is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.\n\n#### Return Value\n\nAn Integer data type value that specifies the bottom margin in pixels.\n\n### Method bottomMarginMode\n\nSets or returns an AutoMode enumeration value that indicates whether the bottom margin is automatically adjusted.\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \nAn AutoMode enumeration value that indicates whether the bottom margin is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.\n\n#### Return Value\n\nAutoMode::Auto if the margin is automatically adjusted based on other form settings, such as the font size; otherwise, AutoMode::Fixed.\n\n### Method bottomMarginValue\n\nSets or returns the bottom margin of a form group control in pixels.\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the bottom margin in pixels; optional.\n\n#### Return Value\n\nAn Integer data type value that specifies the bottom margin in pixels.\n\n### Method breakable\n\n    public boolean breakable([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nCalculates the size of a form group control, based on the number of characters and the number of lines.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nAn Integer data type that specifies the number of lines.\n\n<!-- -->\n\nlines  \nAn Integer data type that specifies the number of lines.\n\n#### Return Value\n\nA Container data type value that specifies the size of a form group control.\n\n### Method canAddDataField\n\nIndicates whether a table field can be added.\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\ntrue if a table field can be added; otherwise, false.\n\n### Method canContain\n\nSpecifies whether a form group control can contain the specified form control.\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \nA FormControl object that specifies a form control.\n\n#### Return Value\n\ntrue if a form group control can contain the specified form control; otherwise, false.\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \nA String data type that specifies the caption text; optional.\n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the character set for the text font; optional.\n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set, as shown in the following table.\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value | Description   |\n|-------|---------------|\n| 222   | THAI\\_CHARSET |\n\nThe value that the default character is set to depends on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the color palette for a form group control; optional.\n\n#### Return Value\n\nAn integer between 0 (zero) and 2, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                  |\n|-------|------------------------|\n| 0     | Default.               |\n| 1     | The Windows palette.   |\n| 2     | The true-color scheme. |\n\n### Method columns\n\nSets or returns the number of columns in a form group control in pixels, and specifies whether the number is automatically adjusted.\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \nAn AutoMode enumeration value that specifies whether the number of columns is fixed, or whether it is automatically adjusted based on other form settings, such as the form size.\n\n<!-- -->\n\nmode  \nAn AutoMode enumeration value that specifies whether the number of columns is fixed, or whether it is automatically adjusted based on other form settings, such as the form size.\n\n#### Return Value\n\nAn integer value that specifies the number of columns in a form group control in pixels.\n\n### Method columnsMode\n\nSets or returns a value that indicates whether the number of columns in a form group control is fixed, or whether it is automatically adjusted based on other form settings, such as the form size.\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \nAn AutoMode enumeration value that specifies whether the number of columns is fixed, or whether it is automatically adjusted based on other form settings, such as the form size; optional.\n\n#### Return Value\n\nAutomode::Auto if the number of columns is automatically adjusted; otherwise, Automode::Fixed.\n\n### Method columnspace\n\nSets or returns the amount of space between columns in a form group control in pixels and indicates whether the space is automatically adjusted based on other form settings, such the font size.\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn AutoMode enumeration value that indicates whether the amount of space between columns is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.\n\n<!-- -->\n\nmode  \nAn AutoMode enumeration value that indicates whether the amount of space between columns is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.\n\n#### Return Value\n\nAn integer value that specifies the space between columns in a form group control in pixels.\n\n### Method columnspaceMode\n\nSets or returns an AutoMode enumeration value that indicates whether the amount of space between columns in a form group control is automatically adjusted.\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \nAn AutoMode enumeration value that indicates whether the amount of space between columns is fixed, or whether it is automatically adjusted based on other form settings, such as the font size; optional.\n\n#### Return Value\n\nAutoMode::Auto if the amount of space is automatically adjusted; otherwise, AutoMode::Fixed.\n\n### Method columnspaceValue\n\nSets or returns the amount of space between columns in a form group control in pixels.\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the amount of space between columns in a form group control in pixels; optional.\n\n#### Return Value\n\nAn integer value that specifies the amount of space between columns in a form group control in pixels.\n\n### Method columnsValue\n\nSets or returns the number of columns in a form group control.\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the number of columns in a form group control; optional.\n\n#### Return Value\n\nAn Integer data type value that specifies the number of columns in a form group control.\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nA configurationKeyId system data type that specifies the configuration key ID; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are activated for a form group control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA List object that contains the IDs of configuration keys that are activated for a form group control.\n\n#### Remarks\n\nThe list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. In addition, the returned list contains any configuration key IDs that are applied to the extended data type.\n\n### Method contains\n\nSpecifies whether a form group control contains a specified form control.\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \nA FormControl object that specifies a form control.\n\n#### Return Value\n\ntrue if a form group control contains the specified form control; otherwise, false.\n\n### Method controlCount\n\nReturns the number of controls in a form group control.\n\n    public int controlCount()\n\n#### Return Value\n\nAn Integer data type value that specifies the number of controls in a form group control.\n\n#### Remarks\n\nYou can add a control to a form group control by using the FormGroupControl.addControl method.\n\n### Method controlNum\n\nReturns a FormControl object for a specified control in a form group control.\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \nAn Integer data type that specifies a control in a form group control.\n\n#### Return Value\n\nA FormControl object that can be used to modify and provide information about a form control.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataGroup\n\nSets or returns a data group for a form group control.\n\n    public str dataGroup([str value])\n\n#### Parameters\n\nvalue  \nA String data type that specifies the data group; optional.\n\n#### Return Value\n\nA String data type value that specifies the data group.\n\n#### Remarks\n\nA data group corresponds to a field group on a table that is a data source for the form.\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether drag-and-drop operations are enabled or disabled for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nYou use the FormGroupControl.dragLeave and FormGroupControl.dragOver methods to specify the behavior. You can pass a value of true or false for the value parameter.\n\n### Method dragOver\n\nIs called when an object is dragged over the bounds of a form group control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn Integer data type that indicates the y-coordinate of the object position.\n\n<!-- -->\n\ndragMode  \nAn Integer data type that indicates the y-coordinate of the object position.\n\n<!-- -->\n\nx  \nAn Integer data type that indicates the y-coordinate of the object position.\n\n<!-- -->\n\ny  \nAn Integer data type that indicates the y-coordinate of the object position.\n\n#### Return Value\n\nA FormDrag system enumeration value that indicates whether the object is moved, copied, or not moved to a specified position.\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking dragOver. For information about best practices for forms and code, see No Code in Forms.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enableChilds\n\nSpecifies whether the child controls are enabled for a form group control.\n\n    public boolean enableChilds([boolean enable])\n\n#### Parameters\n\nenable  \nA Boolean value that indicates whether the child controls are enabled; optional.\n\n#### Return Value\n\ntrue if the child controls are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether the object is enabled or disabled.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether a form group control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property lets you enable or disable controls at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.\n\n### Method expand\n\nSpecifies whether a form group control is expanded.\n\n    public boolean expand([boolean expand])\n\n#### Parameters\n\nexpand  \nA Boolean value that indicates whether a form group control is expanded; optional.\n\n#### Return Value\n\ntrue if a form group control is expanded; otherwise, false.\n\n### Method font\n\nGets or sets the name of the font that is used for text in a control.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \nA String data type that indicates the font for text in a form group control; optional.\n\n#### Return Value\n\nThe name of the font that should be used, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the font size to use for text in a control.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the font size in points for text in a form group control; optional.\n\n#### Return Value\n\nThe height of the font in points.\n\n### Method frameOptionButton\n\nSets or returns the option button for a form group control.\n\n    public int frameOptionButton([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the type of option button; optional.\n\n#### Return Value\n\nAn integer value that specifies the type of option button.\n\n#### Remarks\n\nYou can use a FormFrameOptionButton enumeration value for the value parameter.\n\n### Method framePosition\n\nSets or returns the location of the frame for a form group control.\n\n    public int framePosition([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the location of the frame; optional.\n\n#### Return Value\n\nAn integer value that specifies the location of the frame.\n\n### Method frameType\n\nSets or returns the frame style for a form group control.\n\n    public int frameType([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the frame style for a form group control; optional.\n\n#### Return Value\n\nAn integer value that indicates the frame style for a form group control.\n\n#### Remarks\n\nYou can use a FormFrameType enumeration value for the value parameter.\n\n### Method hasChanged\n\nSets or returns a Boolean value that indicates whether the contents of a form group control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nA Boolean value that indicates whether the contents of a form group control have changed; optional.\n\n#### Return Value\n\ntrue if the contents have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode              | Height calculation                                                                         |\n|-------------------|--------------------------------------------------------------------------------------------|\n| -1 – Exact        | The exact height of the control in pixels is used.                                         |\n| 0 – Auto          | The height of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column height | The layout of the form determines the height of the control.                               |\n\nThe height and the height calculation mode can be set separately.\n\n#### Examples\n\nThe following example shows a call to the height method to the set the control height to 120 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.height(120, -1); \n    }\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the height of the control is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                         |\n|---------------|--------------------------------------------------------------------------------------------|\n| Exact         | The exact height of the control in pixels is used.                                         |\n| Auto          | The height of the control is calculated automatically, and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                               |\n\nThe height of the control might change when the calculation mode is set to Auto or Column height.\n\n#### Examples\n\nThe following example shows a call to the heightMode method to adjust the control height, based on an exact pixel value.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.heightMode(-1); \n        formGroupControl.heightValue(120); \n    }\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the Exact height calculation mode is used.\n\n#### Examples\n\nThe following example shows a call to the heightValue method that sets the height to 5 pixels.\n\n    static void createForm(Args _args) \n    { \n       Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.heightMode(-1); \n        formGroupControl.heightValue(120); \n    }\n\n### Method helpField\n\nReturns the Help text that is displayed in the status bar when a form group control is selected.\n\n    public str helpField()\n\n#### Return Value\n\nA String data type value that contains the Help text.\n\n### Method helpText\n\nGets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nA String data type value that contains the Help text.\n\n#### Return Value\n\nThe string that should be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\nSets or gets a Boolean value that indicates whether a form group control is visible when the controls in the group are not visible.\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether a form group control is visible; optional.\n\n#### Return Value\n\ntrue if the form group control is not visible; otherwise, false.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nReturns a handle for a form group control.\n\n    public int hWnd()\n\n#### Return Value\n\nAn integer value that specifies the handle.\n\n### Method isContainer\n\nIndicates whether a form group control is a container.\n\n    public boolean isContainer()\n\n#### Return Value\n\ntrue if a form group control is a container; otherwise, false.\n\n### Method isDisplayed\n\nIndicates whether a form group control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if a form group is displayed; otherwise, false.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false. For this method to return true, the AllowUserSetup property for the design and for all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\n#### Examples\n\nThe following example shows how to determine the user setup rights for a control.\n\n    FormAllowUserSetup formAllowUserSetup = FormAllowUserSetup::No; \n    switch (true) \n    { \n        case this.isUserSetupEnabled(FormAllowUserSetup::Yes): \n            formAllowUserSetup = FormAllowUserSetup::Yes; \n            break; \n        case this.isUserSetupEnabled(FormAllowUserSetup::Restricted): \n            formAllowUserSetup = FormAllowUserSetup::Restricted; \n            break; \n        case this.isUserSetupEnabled(FormAllowUserSetup::No): \n           formAllowUserSetup = FormAllowUserSetup::No; \n            break; \n    } \n    info (strfmt(\"formAllowUserSetup: %1\", formAllowUserSetup));\n\n### Method italic\n\nSets or returns a Boolean value that indicates whether the text for a form group control is italic.\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the text for a form group control is italic; optional.\n\n#### Return Value\n\ntrue if the text is italic; otherwise, false.\n\n### Method labelBold\n\nSets or returns the font weight of the label text for a form group control.\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the font weight of the label text; optional.\n\n#### Return Value\n\nAn integer value that specifies the font weight of the label text.\n\n#### Remarks\n\nFor more information about possible values for the value parameter and return value, see the bold method.\n\n### Method labelCharacterSet\n\nSets or returns the character set of the font for the label text for a form group control.\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the character set of the font for the label text; optional.\n\n#### Return Value\n\nAn Integer data type value that specifies the character set of the font for the label text.\n\n#### Remarks\n\nA character set is a group of alphabetical, numeric, and other characters that have some relationship in common. For example, a character set might be used for a specific country/region or language. For a list of possible values for the value parameter, see the characterSet method. For a list of possible return values, see the characterSet method.\n\n### Method labelFont\n\nSets or returns the font for the label text for a form group control.\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \nA String data type that specifies the font for the label text; optional.\n\n#### Return Value\n\nA String data type value that specifies the font for the label text.\n\n### Method labelFontSize\n\nSets or returns the font size of the label text for a form group control.\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the font size of the label text; optional.\n\n#### Return Value\n\nAn integer value that specifies the font size of the label text.\n\n### Method labelItalic\n\nSets or returns a Boolean data type that indicates whether the label text for a form group control is italic.\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the label text is italic; optional.\n\n#### Return Value\n\ntrue if the label text is italic; otherwise, false.\n\n### Method labelUnderline\n\nSets or returns a Boolean data type that indicates whether the label text for a form group control is underlined.\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the label text is underlined; optional.\n\n#### Return Value\n\ntrue if the label text is underlined; otherwise, false.\n\n### Method leave\n\nIs called when the user moves the mouse pointer out of a form group control.\n\n    public boolean leave()\n\n#### Return Value\n\ntrue if the mouse pointer is moved out of a form group control; otherwise, false.\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking leave. For information about best practices for forms and code, see No Code in Forms.\n\n### Method left\n\nSets or returns the horizontal position of a form group control in pixels and specifies how the position is calculated.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the position is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates how the position is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the horizontal position of a form group control in pixels.\n\n#### Remarks\n\nThe mode parameter can be one of the following values:\n\n-   -1 (default) – Use Exact mode, where the value of the value parameter is used exactly.\n-   A FormLeft enumeration value.\n\n#### Examples\n\nThe following example shows a call to the left method that sets the horizontal position to 50 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.left(50,-1); \n    }\n\n### Method leftMargin\n\nSets or returns the size of the left margin for a form group control in pixels and specifies whether the size is automatically adjusted.\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn AutoMode enumeration value that specifies whether the size of the left margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.\n\n<!-- -->\n\nmode  \nAn AutoMode enumeration value that specifies whether the size of the left margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.\n\n#### Return Value\n\nAn integer value that specifies the size of the left margin for a form group control in pixels.\n\n### Method leftMarginMode\n\nSets or returns a value that indicates whether the size of the left margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \nAn AutoMode enumeration value that specifies whether the size of the left margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.\n\n#### Return Value\n\nAutomode::Auto if the size of the left margin is automatically adjusted; otherwise, Automode::Fixed.\n\n### Method leftMarginValue\n\nSets or returns the size of the left margin for a form group control in pixels.\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the size of the left margin for a form group control in pixels; optional.\n\n#### Return Value\n\nAn integer value that specifies the size of the left margin for a form group control in pixels.\n\n### Method leftMode\n\nSets or returns a value that indicates how the horizontal position of a form group control is calculated.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the horizontal position is calculated; optional.\n\n#### Return Value\n\nAn Integer data type value that indicates how the horizontal position is calculated: -1 for an exact pixel value, or a FormLeft enumeration value.\n\n#### Examples\n\nThe following example shows a call to the leftMode method that calculates the horizontal position of a form group control, based on an exact pixel value.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.leftMode(-1); \n        formGroupControl.leftValue(50); \n    }\n\n### Method leftValue\n\nSets or returns the horizontal position of a form group control in pixels.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position in pixels; optional.\n\n#### Return Value\n\nAn integer value that indicates the horizontal position in pixels.\n\n#### Remarks\n\nThe horizontal position is not changed unless the left mode is set for an exact pixel value.\n\n#### Examples\n\nThe following example shows a call to the leftValue method that sets the horizontal position to 50 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        //C reate the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.leftMode(-1); \n        formGroupControl.leftValue(50); \n    }\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the user double-clicks a form group control.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that specifies whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. The following are the possible values for the button parameter.\n\n|     |                      |\n|-----|----------------------|\n| 1   | Left mouse button.   |\n| 2   | Middle mouse button. |\n| 3   | Right mouse button.  |\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseDblClick. For information about best practices for forms and code, see No Code in Forms.\n\n### Method mouseDown\n\nIs called when the user presses the mouse button in a form group control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that specifies whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. The following are the possible values for the button parameter.\n\n|     |                      |\n|-----|----------------------|\n| 1   | Left mouse button.   |\n| 2   | Middle mouse button. |\n| 3   | Right mouse button.  |\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseDown. For information about best practices for forms and code, see No Code in Forms.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over a form group control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that specifies whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. The following are the possible values for the \\_button parameter.\n\n|     |                      |\n|-----|----------------------|\n| 1   | Left mouse button.   |\n| 2   | Middle mouse button. |\n| 3   | Right mouse button.  |\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseMove. For information about best practices for forms and code, see No Code in Forms.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over a form group control.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that specifies whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. The following are the possible values for the \\_button parameter.\n\n|     |                      |\n|-----|----------------------|\n| 1   | Left mouse button.   |\n| 2   | Middle mouse button. |\n| 3   | Right mouse button.  |\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseUp. For information about best practices for forms and code, see No Code in Forms.\n\n### Method moveControl\n\nMoves a specified control.\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \nAn integer value that indicates which control the specified control is inserted after; optional.\n\n<!-- -->\n\ninsertAfterId  \nAn integer value that indicates which control the specified control is inserted after; optional.\n\n#### Return Value\n\nAn Integer data type value that specifies the control ID.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must begin with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method optionValue\n\nSets or returns the value for the option button that is associated with a form group control.\n\n    public int optionValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the value for the option button; optional.\n\n#### Return Value\n\nAn integer value that specifies the value for the option button.\n\n#### Remarks\n\nUse the FormGroupControl.frameOptionButton method to set or return the option button for a form group control.\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method rightMargin\n\nSets or returns the size of the right margin for a form group control in pixels and specifies whether the size is automatically adjusted.\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn AutoMode enumeration value that specifies whether the size of the right margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.\n\n<!-- -->\n\nmode  \nAn AutoMode enumeration value that specifies whether the size of the right margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.\n\n#### Return Value\n\nAn integer value that specifies the size of the right margin for a form group control in pixels.\n\n### Method rightMarginMode\n\nSets or returns a value that indicates whether the size of the right margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \nAn AutoMode enumeration value that specifies whether the size of the right margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.\n\n#### Return Value\n\nAn Automode enumeration value that specifies whether the size of the right margin is fixed, or whether it is automatically adjusted: Auto if the size of the right margin is automatically adjusted; otherwise, Fixed.\n\n### Method rightMarginValue\n\nSets or returns the size of the right margin for a form group control in pixels.\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the size of the right margin for a form group control in pixels; optional.\n\n#### Return Value\n\nAn integer value that specifies the size of the right margin for a form group control in pixels.\n\n### Method saveFilter\n\n    public boolean saveFilter([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the security key ID for a form group control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nA securityKeyId data type that contains the ID; optional.\n\n#### Return Value\n\nA securityKeyId data type value that contains the ID.\n\n### Method showContextMenu\n\nShows a shortcut menu for a form group control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nAn integer value that specifies the handle for the shortcut menu.\n\n#### Return Value\n\nAn integer value that specifies the selection of the user.\n\n### Method skip\n\nSets or returns a Boolean value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the control is skipped; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method sort\n\nSorts the controls that are contained in a form group control.\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \nA system enumeration value that indicates the sort order for controls; optional.\n\n#### Return Value\n\nAn integer value that contains the sort order.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nReturns the text string for the tooltip for a form group control.\n\n    public str toolTip()\n\n#### Return Value\n\nA string value that contains the text for the tooltip.\n\n### Method top\n\nSets or returns the vertical position of a form group control in pixels and specifies how the position is calculated.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the vertical position is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates how the vertical position is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the vertical position of a form group control in pixels.\n\n#### Remarks\n\nThe mode parameter can be one of the following values:\n\n-   -1 (default) – Use Exact mode, where the value of the value parameter is used exactly.\n-   A FormTop enumeration value.\n\n#### Examples\n\nThe following example calls the top method to set the vertical position to 50 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.top(50,-1); \n    }\n\n### Method topMargin\n\nSets or returns the top margin for a form group control in pixels and specifies whether the size is automatically adjusted.\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn AutoMode enumeration value that specifies whether the size of the top margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.\n\n<!-- -->\n\nmode  \nAn AutoMode enumeration value that specifies whether the size of the top margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.\n\n#### Return Value\n\nAn integer that specifies the size of the top margin for a form group control in pixels.\n\n### Method topMarginMode\n\nSets or returns a value that indicates whether the size of the top margin for a form group control is fixed, or whether it is automatically adjusted based on other form property settings.\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \nAn Automode enumeration value that specifies whether the size of the top margin is fixed, or whether it is automatically adjusted based on other form property settings; optional.\n\n#### Return Value\n\nAn Automode enumeration value of Auto if the size of the top margin is automatically adjusted; otherwise, Fixed.\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\nSets or returns a value that indicates how the vertical position of a form group control is calculated.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the vertical position is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates how the vertical position is calculated: -1 for an exact pixel value, or a FormTop enumeration value.\n\n#### Examples\n\nThe following example shows a call to the topMode method that calculates the vertical position, based on an exact pixel value.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run time-form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.topMode(-1); \n        formGroupControl.topValue(50); \n    }\n\n### Method topValue\n\nSets or returns the vertical position of a form group control in pixels.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the vertical position.\n\n#### Return Value\n\nAn Integer data type value that specifies the vertical position of a form group control.\n\n#### Remarks\n\nThe vertical position is not changed unless the top mode is set for an exact pixel value. For more information, see the topMode method.\n\n#### Examples\n\nThe following example shows a call to the topValue method that sets the vertical position to 50 pixels.\n\n    void FormGoupControl() \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.topMode(-1); \n        formGroupControl.topValue(50); \n    }\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nSets or returns an integer data type that indicates whether a control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates whether a form group control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the form group control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user can hide a form group control by right-clicking the control and then clicking Hide. This method lets you programmatically determine whether the control is hidden.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns an integer that indicates whether the form group control is skipped when the user presses the TAB key to move to controls.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates the user setting for whether a form group control is skipped; optional.\n\n#### Return Value\n\n1 if the form group control is skipped; otherwise, 0.\n\n#### Remarks\n\nThe user chooses whether to skip a form group control by using the User setup form.\n\n### Method userWidth\n\nSets or returns an integer that indicates the width of a form group control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates the width of a form group control in pixels; optional.\n\n#### Return Value\n\nAn integer value that indicates the width of a form group control in pixels; 0 (zero) if the user did not specify a width.\n\n#### Remarks\n\nThe user specifies the width in characters by using the User setup form. This method returns the width in pixels, based on six times the number of characters.\n\n### Method useUserLayout\n\nSpecifies whether to use the user-specified layout of a form group control.\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether to use the user-specified layout of a form group control; optional.\n\n#### Return Value\n\ntrue if the user-specified layout of a form group control is used; otherwise, false.\n\n#### Remarks\n\nThe user specifies the layout by using the User setup form.\n\n### Method verticalSpacing\n\nGets or sets the amount of space above and below a form group control in pixels, and specifies how the space is calculated.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn AutoMode system enumeration value that indicates how the space is calculated; optional.\n\n<!-- -->\n\nmode  \nAn AutoMode system enumeration value that indicates how the space is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the amount of space above and below a control.\n\n### Method verticalSpacingMode\n\nSets or returns a value that indicates how the amount of space above and below a form group control is calculated.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \nAn AutoMode system enumeration value that indicates how the space is calculated; optional.\n\n#### Return Value\n\nAn AutoMode enumeration that is set to Auto if the space is automatically adjusted based on other form settings, such as the font size; otherwise, Fixed.\n\n### Method verticalSpacingValue\n\nGets or sets the amount of space above and below a form group control in pixels.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates the amount of space above and below a control; optional.\n\n#### Return Value\n\nAn integer value that indicates the amount of space above and below a control.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nGets or sets a Boolean data type that displays or hides a form group control.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that displays or hides a form group control; optional.\n\n#### Return Value\n\ntrue if the form group control is displayed; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the width is calculated. This can be one of the following values:\n\n<!-- -->\n\nmode  \nAn integer that indicates how the width is calculated. This can be one of the following values:\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode             | Width calculation                                                                         |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 – Exact       | The exact width of the control in pixels is used.                                         |\n| 0 – Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column width | The layout of the form determines the width of the control.                               |\n\nThe width and the width calculation mode can be set separately.\n\n#### Examples\n\nThe following example shows a call to the width method to set the control width to 200 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.width(200,-1); \n    }\n\n### Method widthMode\n\nGets or sets the calculation mode for the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the width current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                         |\n|--------------|-------------------------------------------------------------------------------------------|\n| Exact        | The exact width of the control in pixels is used.                                         |\n| Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                               |\n\nThe width of the control might change when the calculation mode is set to Auto or Column width.\n\n#### Examples\n\nThe following example shows a call to the widthMode method to calculate the control width, based on an exact pixel value.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.widthMode(-1); \n        formGroupControl.widthValue(200); \n    }\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the width of the control in pixels.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nTo change the width of the control, use the Exact width calculation mode.\n\n#### Examples\n\nThe following example shows a call to the widthValue method that sets the control width to 200 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildStringControl formBuildStringControl; \n        FormBuildGroupControl formBuildGroupControl; \n        FormGroupControl formGroupControl; \n        int idx; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add controls. \n        formBuildGroupControl = \n     formBuildDesign.addControl(FormControlType::Group,\"Group\"); \n        idx = formBuildGroupControl.id(); \n        formBuildStringControl = \n     formBuildGroupControl.addControl(FormControlType::String,\"String\"); \n        // Add data fields to the controls. \n        formBuildGroupControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataSource(formBuildDataSource.id()); \n        formBuildStringControl.dataField(2); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formGroupControl = formRun.control(idx); \n        formGroupControl.widthMode(-1); \n        formGroupControl.widthValue(200); \n    }\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method drop\n\nIs called when a user drops a form group control or an item in a form group control into a new position.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the y-coordinate of the object position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the y-coordinate of the object position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the y-coordinate of the object position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the object position.\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking drop. For information about best practices for forms and code, see No Code in Forms.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseLeave\n\nIs called when the user moves the mouse pointer away from the control.\n\n    public void mouseLeave()\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseLeave. For information about best practices for forms and code, see No Code in Forms.\n\n### Method context\n\nIs called when the user right-clicks a form group control.\n\n    public void context()\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking context. For information about best practices for forms and code, see No Code in Forms.\n\n### Method copy\n\nCopies a form group control.\n\n    public void copy()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method paste\n\nPastes a form group control.\n\n    public void paste()\n\n### Method arrange\n\n    public void arrange()\n\n### Method clicked\n\nIs called when a form group control is clicked by the user.\n\n    public void clicked()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method inputSearch\n\nIs called when the user enters a search string in a bound control.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nA String data type that contains search text; optional.\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking inputSearch. For information about best practices for forms and code, see No Code in Forms.\n\n### Method resetUserSetting\n\nResets the user settings for a form group control.\n\n    public void resetUserSetting()\n\n### Method OnClicked\n\n    private void OnClicked([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lostFocus\n\nIs called when the user brings a form group control out of focus.\n\n    public void lostFocus()\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking lostFocus. For information about best practices for forms and code, see the No Code in Forms form.\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method endDrag\n\nIs called when the user has finished moving a form group control.\n\n    public void endDrag()\n\n### Method jumpRef\n\nIs called when a user clicks the Go to the Main Table Form command on a control shortcut menu in a form group control.\n\n    public void jumpRef()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method filter\n\nIs called when the user right-clicks a form group control and then clicks Filter By Selection.\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \nA String data type that specifies the text for the filter; optional.\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking filter. For information about best practices for forms and code, see No Code in Forms.\n\n### Method displayControl\n\nDisplays a form group control.\n\n    public void displayControl()\n\n### Method gotFocus\n\nDetermines when the user brings a form group control into focus.\n\n    public void gotFocus()\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking gotFocus. For information about best practices for forms and code, see No Code in Forms.\n\n### Method prefColumnSize\n\nSpecifies the height and width of columns for a form group control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nAn integer value that specifies the height of columns.\n\n<!-- -->\n\nheight  \nAn integer value that specifies the height of columns.\n\n### Method dragLeave\n\nIs called when the user drags an object out of the bounds of a form group control.\n\n    public void dragLeave()\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking dragLeave. For information about best practices for forms and code, see No Code in Forms.\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method enter\n\nIs called when the user moves focus to a form group control.\n\n    public void enter()\n\n#### Remarks\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking enter. For information about best practices for forms and code, see No Code in Forms.\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that specifies whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that specifies whether the SHIFT key is down.\n\n#### Remarks\n\nThe following are the possible values for the button parameter.\n\n|     |                      |\n|-----|----------------------|\n| 1   | Left mouse button.   |\n| 2   | Middle mouse button. |\n| 3   | Right mouse button.  |\n\nYou can override this method in a form group control by right-clicking the Methods node below the control, clicking Override Method, and then clicking mouseEnter. For information about best practices for forms and code, see No Code in Forms.\n\n## Class FormGuidControl\n    class FormGuidControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int charFromPos(int x, int y)                                                                        |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public int dataFieldArrayIndex()                                                                            |                                                                                                                                                                         |\n| public FieldName dataFieldName()                                                                            |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public container getCursorPos()                                                                             |                                                                                                                                                                         |\n| public int getFirstVisibleLine()                                                                            |                                                                                                                                                                         |\n| public str getLine(int lineNo)                                                                              |                                                                                                                                                                         |\n| public int getLineCount()                                                                                   |                                                                                                                                                                         |\n| public container getSelection()                                                                             |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                                                         |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int lineFromChar(int charIndex)                                                                      |                                                                                                                                                                         |\n| public int lineIndex(int lineNo)                                                                            |                                                                                                                                                                         |\n| public int lineLength(int lineNo)                                                                           |                                                                                                                                                                         |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public container posFromChar(int charIndex)                                                                 |                                                                                                                                                                         |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                                                         |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                                                     |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userFastTabSummary(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public Guid value(\\[Guid value\\])                                                                           |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void setCursorPos(int x, int y)                                                                      |                                                                                                                                                                         |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])       |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void lineScroll(int dx, int dy)                                                                      |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void performFormLookup(xFormRun form)                                                                |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void scrollCursor()                                                                                  |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void setSelection(int charIndexFrom, int charIndexTo)                                                |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void pasteText(str pasteStr, \\[boolean InsertSel\\])                                                  |                                                                                                                                                                         |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])         |                                                                                                                                                                         |\n| public void textChange()                                                                                    |                                                                                                                                                                         |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the property.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method charFromPos\n\n    public int charFromPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataFieldArrayIndex\n\n    public int dataFieldArrayIndex()\n\n#### Return Value\n\n### Method dataFieldName\n\n    public FieldName dataFieldName()\n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave, the dragOver, and the dragOverEx to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method getCursorPos\n\n    public container getCursorPos()\n\n#### Return Value\n\n### Method getFirstVisibleLine\n\n    public int getFirstVisibleLine()\n\n#### Return Value\n\n### Method getLine\n\n    public str getLine(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method getLineCount\n\n    public int getLineCount()\n\n#### Return Value\n\n### Method getSelection\n\n    public container getSelection()\n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA FormAllowUserSetup enumeration value that specifies the level of customization that is being requested for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false. For this method to return true, the AllowUserSetup property for the design and all parent containers must be at least as high as the level that is specified by the neededSetupRights parameter.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineFromChar\n\n    public int lineFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method lineIndex\n\n    public int lineIndex(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lineLength\n\n    public int lineLength(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method posFromChar\n\n    public container posFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userFastTabSummary\n\n    public int userFastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method value\n\n    public Guid value([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method setCursorPos\n\n    public void setCursorPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method performDBLookup\n\n    public void performDBLookup([FieldId fieldId], [TableId tableId], [SelectableDataArea company])\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\ntableId  \n\n<!-- -->\n\ncompany  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method enter\n\n    public void enter()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method undo\n\n    public void undo()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method lineScroll\n\n    public void lineScroll(int dx, int dy)\n\n#### Parameters\n\ndx  \n\n<!-- -->\n\ndy  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method performFormLookup\n\n    public void performFormLookup(xFormRun form)\n\n#### Parameters\n\nform  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method scrollCursor\n\n    public void scrollCursor()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setSelection\n\n    public void setSelection(int charIndexFrom, int charIndexTo)\n\n#### Parameters\n\ncharIndexFrom  \n\n<!-- -->\n\ncharIndexTo  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method pasteText\n\n    public void pasteText(str pasteStr, [boolean InsertSel])\n\n#### Parameters\n\npasteStr  \n\n<!-- -->\n\nInsertSel  \n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method performTypeLookup\n\n    public void performTypeLookup([int userType], [int arrayIndex], [SelectableDataArea company])\n\n#### Parameters\n\nuserType  \n\n<!-- -->\n\narrayIndex  \n\n<!-- -->\n\ncompany  \n\n### Method textChange\n\n    public void textChange()\n\n### Method lookup\n\n    public void lookup()\n\n## Class FormHTMLControl\n    class FormHTMLControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                                                 |\n| public str className(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public str custom(\\[str value\\])                                                                            |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public AnyType dispatch(VarArg )                                                                            |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public COMError error()                                                                                     |                                                                                                                                                                         |\n| public str getText()                                                                                        |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public ComInterface interface()                                                                             |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public str processPicture(str picture)                                                                      |                                                                                                                                                                         |\n| public boolean rTLCapable(\\[boolean value\\])                                                                |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void insertText(str Text, \\[NoYes repaint\\])                                                         |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void processBase(str base)                                                                           |                                                                                                                                                                         |\n| public void setFont(int fontid, HtmlFont htmlFont, \\[NoYes repaint\\])                                       |                                                                                                                                                                         |\n| public void getFont(int fontid, HtmlFont htmlFont)                                                          |                                                                                                                                                                         |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void updateSize()                                                                                    |                                                                                                                                                                         |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void processLink(str link)                                                                           |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void processTitle(str title)                                                                         |                                                                                                                                                                         |\n| public void read(str FileName, \\[str TagName\\])                                                             |                                                                                                                                                                         |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void setText(str Text, \\[str TagName\\])                                                              |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void save(str FileName)                                                                              |                                                                                                                                                                         |\n| public void command(int command)                                                                            |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void insertLink(str Text, str Url, str Name, \\[NoYes repaint\\])                                      |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void clearWindow()                                                                                   |                                                                                                                                                                         |\n| public void processForm(int formHandle)                                                                     |                                                                                                                                                                         |\n| public void setMargin(int Left, int Right, int Top, int Bottom, \\[NoYes repaint\\])                          |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nIf supplied, the property is set to this value.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method className\n\n    public str className([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method custom\n\n    public str custom([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dispatch\n\n    public AnyType dispatch(VarArg )\n\n#### Parameters\n\n  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave, the dragOver, and the dragOverEx to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method error\n\n    public COMError error()\n\n#### Return Value\n\n### Method getText\n\n    public str getText()\n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method interface\n\n    public ComInterface interface()\n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA FormAllowUserSetup enumeration value that specifies the level of customization that is being requested for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false. For this method to return true, the AllowUserSetup property for the design and all parent containers must be at least as high as the level that is specified by the neededSetupRights parameter.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method processPicture\n\n    public str processPicture(str picture)\n\n#### Parameters\n\npicture  \n\n#### Return Value\n\n### Method rTLCapable\n\n    public boolean rTLCapable([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method insertText\n\n    public void insertText(str Text, [NoYes repaint])\n\n#### Parameters\n\nText  \n\n<!-- -->\n\nrepaint  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method processBase\n\n    public void processBase(str base)\n\n#### Parameters\n\nbase  \n\n### Method setFont\n\n    public void setFont(int fontid, HtmlFont htmlFont, [NoYes repaint])\n\n#### Parameters\n\nfontid  \n\n<!-- -->\n\nhtmlFont  \n\n<!-- -->\n\nrepaint  \n\n### Method getFont\n\n    public void getFont(int fontid, HtmlFont htmlFont)\n\n#### Parameters\n\nfontid  \n\n<!-- -->\n\nhtmlFont  \n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method updateSize\n\n    public void updateSize()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method processLink\n\n    public void processLink(str link)\n\n#### Parameters\n\nlink  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method processTitle\n\n    public void processTitle(str title)\n\n#### Parameters\n\ntitle  \n\n### Method read\n\n    public void read(str FileName, [str TagName])\n\n#### Parameters\n\nFileName  \n\n<!-- -->\n\nTagName  \n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setText\n\n    public void setText(str Text, [str TagName])\n\n#### Parameters\n\nText  \n\n<!-- -->\n\nTagName  \n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method save\n\n    public void save(str FileName)\n\n#### Parameters\n\nFileName  \n\n### Method command\n\n    public void command(int command)\n\n#### Parameters\n\ncommand  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method insertLink\n\n    public void insertLink(str Text, str Url, str Name, [NoYes repaint])\n\n#### Parameters\n\nText  \n\n<!-- -->\n\nUrl  \n\n<!-- -->\n\nName  \n\n<!-- -->\n\nrepaint  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method enter\n\n    public void enter()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method clearWindow\n\n    public void clearWindow()\n\n### Method processForm\n\n    public void processForm(int formHandle)\n\n#### Parameters\n\nformHandle  \n\n### Method setMargin\n\n    public void setMargin(int Left, int Right, int Top, int Bottom, [NoYes repaint])\n\n#### Parameters\n\nLeft  \n\n<!-- -->\n\nRight  \n\n<!-- -->\n\nTop  \n\n<!-- -->\n\nBottom  \n\n<!-- -->\n\nrepaint  \n\n## Class FormIntControl\n    class FormIntControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public int allowNegative(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int charFromPos(int x, int y)                                                                        |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public int dataFieldArrayIndex()                                                                            |                                                                                                                                                                         |\n| public FieldName dataFieldName()                                                                            |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int displaceNegative(\\[int value\\], \\[AutoMode mode\\])                                               |                                                                                                                                                                         |\n| public AutoMode displaceNegativeMode(\\[AutoMode mode\\])                                                     |                                                                                                                                                                         |\n| public int displaceNegativeValue(\\[int value\\])                                                             |                                                                                                                                                                         |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public container getCursorPos()                                                                             |                                                                                                                                                                         |\n| public int getFirstVisibleLine()                                                                            |                                                                                                                                                                         |\n| public str getLine(int lineNo)                                                                              |                                                                                                                                                                         |\n| public int getLineCount()                                                                                   |                                                                                                                                                                         |\n| public container getSelection()                                                                             |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                                                         |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int lineFromChar(int charIndex)                                                                      |                                                                                                                                                                         |\n| public int lineIndex(int lineNo)                                                                            |                                                                                                                                                                         |\n| public int lineLength(int lineNo)                                                                           |                                                                                                                                                                         |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public container posFromChar(int charIndex)                                                                 |                                                                                                                                                                         |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                                                         |\n| public int rotateSign(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public int showZero(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int signDisplay(\\[int value\\])                                                                       |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                                                     |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userFastTabSummary(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int value(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])         |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void textChange()                                                                                    |                                                                                                                                                                         |\n| public void pasteText(str pasteStr, \\[boolean InsertSel\\])                                                  |                                                                                                                                                                         |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void scrollCursor()                                                                                  |                                                                                                                                                                         |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void setSelection(int charIndexFrom, int charIndexTo)                                                |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])       |                                                                                                                                                                         |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void setCursorPos(int x, int y)                                                                      |                                                                                                                                                                         |\n| public void lineScroll(int dx, int dy)                                                                      |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void performFormLookup(xFormRun form)                                                                |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowNegative\n\n    public int allowNegative([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method charFromPos\n\n    public int charFromPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataFieldArrayIndex\n\n    public int dataFieldArrayIndex()\n\n#### Return Value\n\n### Method dataFieldName\n\n    public FieldName dataFieldName()\n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displaceNegative\n\n    public int displaceNegative([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displaceNegativeMode\n\n    public AutoMode displaceNegativeMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displaceNegativeValue\n\n    public int displaceNegativeValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method getCursorPos\n\n    public container getCursorPos()\n\n#### Return Value\n\n### Method getFirstVisibleLine\n\n    public int getFirstVisibleLine()\n\n#### Return Value\n\n### Method getLine\n\n    public str getLine(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method getLineCount\n\n    public int getLineCount()\n\n#### Return Value\n\n### Method getSelection\n\n    public container getSelection()\n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter. The following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineFromChar\n\n    public int lineFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method lineIndex\n\n    public int lineIndex(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lineLength\n\n    public int lineLength(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method posFromChar\n\n    public container posFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rotateSign\n\n    public int rotateSign([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showZero\n\n    public int showZero([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method signDisplay\n\n    public int signDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userFastTabSummary\n\n    public int userFastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method value\n\n    public int value([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method performTypeLookup\n\n    public void performTypeLookup([int userType], [int arrayIndex], [SelectableDataArea company])\n\n#### Parameters\n\nuserType  \n\n<!-- -->\n\narrayIndex  \n\n<!-- -->\n\ncompany  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method textChange\n\n    public void textChange()\n\n### Method pasteText\n\n    public void pasteText(str pasteStr, [boolean InsertSel])\n\n#### Parameters\n\npasteStr  \n\n<!-- -->\n\nInsertSel  \n\n### Method lookup\n\n    public void lookup()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method scrollCursor\n\n    public void scrollCursor()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method setSelection\n\n    public void setSelection(int charIndexFrom, int charIndexTo)\n\n#### Parameters\n\ncharIndexFrom  \n\n<!-- -->\n\ncharIndexTo  \n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method enter\n\n    public void enter()\n\n### Method performDBLookup\n\n    public void performDBLookup([FieldId fieldId], [TableId tableId], [SelectableDataArea company])\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\ntableId  \n\n<!-- -->\n\ncompany  \n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method undo\n\n    public void undo()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method setCursorPos\n\n    public void setCursorPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n### Method lineScroll\n\n    public void lineScroll(int dx, int dy)\n\n#### Parameters\n\ndx  \n\n<!-- -->\n\ndy  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method performFormLookup\n\n    public void performFormLookup(xFormRun form)\n\n#### Parameters\n\nform  \n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n\n\n"}