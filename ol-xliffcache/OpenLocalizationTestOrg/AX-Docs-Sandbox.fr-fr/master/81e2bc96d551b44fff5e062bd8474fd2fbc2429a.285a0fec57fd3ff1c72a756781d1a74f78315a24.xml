{"nodes":[{"pos":[32,102],"content":"F Classes - FormReferenceControl to FormStringControl | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"F Classes - FormReferenceControl to FormStringControl | Microsoft Docs","pos":[0,70]}]},{"pos":[116,189],"content":"API reference for classes from FormReferenceControl to FormStringControl.","needQuote":true,"needEscape":true,"nodes":[{"content":"API reference for classes from FormReferenceControl to FormStringControl.","pos":[0,73]}]},{"pos":[614,667],"content":"F Classes - FormReferenceControl to FormStringControl","linkify":"F Classes - FormReferenceControl to FormStringControl","nodes":[{"content":"F Classes - FormReferenceControl to FormStringControl","pos":[0,53]}]},{"content":"API reference for classes from FormReferenceControl to FormStringControl.","pos":[669,742]},{"pos":[744,770],"content":"Class FormReferenceControl","linkify":"Class FormReferenceControl","nodes":[{"content":"Class FormReferenceControl","pos":[0,26]}]},{"pos":[855,862],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[868,876],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[882,889],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[893,899]},{"content":"Description","pos":[976,987]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[1403,1449],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[1486,1526]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[1658,1701],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[1741,1808]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[1913,1962],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[1996,2094]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[2168,2240],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[2251,2318]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[2423,2467],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[2506,2584]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[2678,2737],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public int dataField()","pos":[2933,2955]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[3188,3230],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[3271,3396]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[3443,3483],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[3526,3591]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3698,3737],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[3781,3948]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3953,3987],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[4036,4117]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[4208,4249],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[4291,4342]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[4463,4527],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public FilterValue filterValue(FieldBinding fieldBinding)","pos":[4718,4775]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[4973,5015],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[5056,5095]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[5228,5264],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[5311,5373]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[5483,5520],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[5566,5605]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[5738,5772],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[5821,5925]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[5993,6034],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[6076,6139]},{"content":"public boolean isResolvingReference()","pos":[6248,6285]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[6503,6543],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[6586,6650]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[6758,6792],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[6841,6902]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[7013,7048],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[7096,7160]},{"content":"public Common lookupReference()","pos":[7268,7299]},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[7523,7566],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[7778,7808],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[7861,7996]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[8033,8075],"source":"public int neededPermission(\\[int value\\])"},{"content":"public FormObjectSet referenceDataSource()","pos":[8288,8330]},{"content":"public FieldId referenceField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[8543,8591],"source":"public FieldId referenceField(\\[FieldId value\\])"},{"content":"public str replacementFieldGroup(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[8798,8845],"source":"public str replacementFieldGroup(\\[str value\\])"},{"content":"public Common resolveReference()","pos":[9053,9085]},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[9308,9365],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[9391,9450]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[9563,9601],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[9646,9773]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[9818,9857],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[9901,9963]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10073,10106],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[10156,10215]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10328,10362],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[10411,10473]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10583,10613],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10838,10872],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[10921,10964]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[11093,11131],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[11176,11224]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[11348,11387],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[11431,11490]},{"content":"public Int64 value(<ph id=\"ph1\">\\[</ph>Int64 value<ph id=\"ph2\">\\]</ph>)","pos":[11603,11638],"source":"public Int64 value(\\[Int64 value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[11858,11918],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[11941,12002]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[12113,12167],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[12196,12255]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[12368,12414],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[12451,12512]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[12623,12664],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[12706,12776]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[12878,12919],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[12961,12999]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13133,13168],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[13216,13278]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13388,13424],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[13471,13509]},{"content":"::public static boolean CanUserAdd(FormDataSource formDataSource, str fieldName)","pos":[13643,13723]},{"content":"public void resolveChanges()","pos":[13898,13926]},{"content":"public void performFormLookup(xFormRun form)","pos":[14153,14197]},{"pos":[14411,14430],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[14432,14472]},{"pos":[14529,14539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[14541,14546]},{"pos":[14555,14567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[14569,14625]},{"pos":[14632,14639],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[14641,14720]},{"pos":[14726,14742],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[14744,14811]},{"pos":[14865,14875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[14877,14882]},{"pos":[14891,14903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[14905,14957]},{"pos":[14964,14971],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[14973,15099]},{"pos":[15105,15127],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[15129,15227]},{"pos":[15287,15297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[15299,15304]},{"pos":[15313,15325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[15327,15406]},{"pos":[15413,15420],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[15422,15459]},{"pos":[15465,15488],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[15490,15557]},{"pos":[15640,15650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[15652,15657]},{"pos":[15666,15678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[15680,15752]},{"pos":[15759,15766],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[15768,15849]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[15850,15943]},{"pos":[15949,15974],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[15976,16054]},{"pos":[16109,16119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[16121,16126]},{"content":"The string that contains the country/region codes to set; optional.","pos":[16129,16196]},{"pos":[16203,16215],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[16217,16282]},{"pos":[16288,16320],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[16390,16400],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[16402,16407]},{"pos":[16416,16428],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16434,16450],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[16485,16497],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16503,16526],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[16528,16653]},{"pos":[16706,16716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[16718,16723]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[16726,16800]},{"pos":[16807,16819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[16821,16933]},{"pos":[16940,16947],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[16949,17076]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[17077,17170]},{"pos":[17176,17193],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[17195,17260]},{"pos":[17311,17321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[17323,17328]},{"pos":[17337,17349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[17351,17396]},{"pos":[17402,17422],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[17424,17591]},{"pos":[17641,17651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[17653,17658]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[17661,17735]},{"pos":[17742,17754],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[17756,17884]},{"pos":[17890,17905],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[17907,17988]},{"pos":[18033,18043],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[18045,18050]},{"pos":[18059,18071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[18073,18133]},{"pos":[18139,18153],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[18155,18206]},{"pos":[18258,18268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[18270,18275]},{"pos":[18284,18296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[18298,18346]},{"pos":[18353,18360],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[18362,18437]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[18438,18533]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[18534,18668]},{"pos":[18674,18697],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[18772,18782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[18784,18789]},{"pos":[18798,18810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18816,18834],"content":"Method filterValue","linkify":"Method filterValue","nodes":[{"content":"Method filterValue","pos":[0,18]}]},{"pos":[18904,18914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldBinding","pos":[18916,18928]},{"pos":[18937,18949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18955,18968],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[18970,19009]},{"pos":[19062,19072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[19074,19079]},{"content":"mode","pos":[19093,19097]},{"pos":[19106,19118],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[19120,19156]},{"pos":[19163,19170],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[19172,19225]},{"content":"Calculate the height according to the following table.","pos":[19226,19280]},{"content":"Mode","pos":[19284,19288]},{"content":"Height calculation","pos":[19302,19320]},{"content":"-1 Exact","pos":[19508,19516]},{"content":"The exact height in pixels of the controls is used.","pos":[19526,19577]},{"content":"0 Auto","pos":[19620,19626]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[19638,19727]},{"content":"1 Column height","pos":[19732,19747]},{"content":"The layout of the form determines the height of the control.","pos":[19750,19810]},{"content":"The height and height calculation mode can be set separately.","pos":[19843,19904]},{"pos":[19910,19927],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[19929,19991]},{"pos":[20038,20048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[20050,20055]},{"pos":[20064,20076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[20078,20099]},{"pos":[20106,20113],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[20115,20169]},{"content":"Mode","pos":[20173,20177]},{"content":"Height calculation","pos":[20189,20207]},{"content":"Exact","pos":[20393,20398]},{"content":"The exact height in pixels of the controls is used.","pos":[20409,20460]},{"content":"Auto","pos":[20503,20507]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[20519,20608]},{"content":"Column height","pos":[20613,20626]},{"content":"The layout of the form determines the height of the control.","pos":[20629,20689]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[20722,20807]},{"pos":[20813,20831],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[20833,20872]},{"pos":[20920,20930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[20932,20937]},{"pos":[20946,20958],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[20960,20981]},{"pos":[20988,20995],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[20997,21087]},{"pos":[21093,21108],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[21110,21214]},{"pos":[21259,21269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[21271,21276]},{"pos":[21285,21297],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[21299,21354]},{"pos":[21361,21368],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[21370,21438]},{"content":"The Help text must not exceed 250 characters.","pos":[21439,21484]},{"pos":[21490,21512],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[21514,21577]},{"pos":[21629,21639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[21641,21646]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[21649,21716]},{"pos":[21723,21735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[21737,21787]},{"pos":[21793,21820],"content":"Method isResolvingReference","linkify":"Method isResolvingReference","nodes":[{"content":"Method isResolvingReference","pos":[0,27]}]},{"pos":[21870,21882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21888,21899],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[21901,21965]},{"pos":[22016,22026],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22028,22033]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[22036,22122]},{"content":"mode","pos":[22134,22138]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[22141,22227]},{"pos":[22234,22246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[22248,22299]},{"pos":[22305,22320],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[22322,22383]},{"pos":[22428,22438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22440,22445]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[22448,22534]},{"pos":[22541,22553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[22555,22611]},{"pos":[22617,22633],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[22635,22699]},{"pos":[22745,22755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22757,22762]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[22765,22846]},{"pos":[22853,22865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[22867,22918]},{"pos":[22924,22946],"content":"Method lookupReference","linkify":"Method lookupReference","nodes":[{"content":"Method lookupReference","pos":[0,22]}]},{"pos":[22990,23002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23008,23024],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[23078,23088],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[23090,23095]},{"pos":[23104,23116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23122,23133],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[23135,23270]},{"pos":[23311,23321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[23323,23328]},{"content":"The name to assign to the control.","pos":[23331,23365]},{"pos":[23372,23384],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[23386,23450]},{"pos":[23457,23464],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[23466,23560]},{"content":"It must start with a letter.","pos":[23566,23594]},{"content":"It cannot exceed 250 characters.","pos":[23599,23631]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[23636,23690],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[23695,23735]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[23740,23850]},{"pos":[23856,23879],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[23932,23942],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[23944,23949]},{"pos":[23958,23970],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23976,24002],"content":"Method referenceDataSource","linkify":"Method referenceDataSource","nodes":[{"content":"Method referenceDataSource","pos":[0,26]}]},{"pos":[24057,24069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24075,24096],"content":"Method referenceField","linkify":"Method referenceField","nodes":[{"content":"Method referenceField","pos":[0,21]}]},{"pos":[24155,24165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[24167,24172]},{"pos":[24181,24193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24199,24227],"content":"Method replacementFieldGroup","linkify":"Method replacementFieldGroup","nodes":[{"content":"Method replacementFieldGroup","pos":[0,28]}]},{"pos":[24285,24295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[24297,24302]},{"pos":[24311,24323],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24329,24352],"content":"Method resolveReference","linkify":"Method resolveReference","nodes":[{"content":"Method resolveReference","pos":[0,23]}]},{"pos":[24397,24409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24415,24433],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[24435,24494]},{"pos":[24562,24572],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[24574,24579]},{"content":"The ID of the security key to assign to the control; optional.","pos":[24582,24644]},{"pos":[24651,24663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[24665,24764]},{"pos":[24770,24781],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[24783,24910]},{"pos":[24959,24969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[24971,24976]},{"content":"The value to assign to the skip property of the control; optional.","pos":[24979,25045]},{"pos":[25052,25064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[25066,25172]},{"pos":[25179,25186],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[25188,25383]},{"pos":[25389,25399],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[25401,25463]},{"pos":[25513,25523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[25525,25530]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[25533,25617]},{"content":"mode","pos":[25629,25633]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[25636,25720]},{"pos":[25727,25739],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[25741,25790]},{"pos":[25796,25810],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[25812,25871]},{"pos":[25915,25925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[25927,25932]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[25935,26019]},{"pos":[26026,26038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[26040,26094]},{"pos":[26100,26115],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[26117,26179]},{"pos":[26224,26234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[26236,26241]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[26244,26323]},{"pos":[26330,26342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[26344,26393]},{"pos":[26399,26410],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[26451,26461],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[26463,26468]},{"pos":[26477,26489],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26495,26510],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[26512,26555]},{"pos":[26600,26610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[26612,26617]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[26620,26692]},{"pos":[26699,26711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[26713,26743]},{"pos":[26749,26768],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[26770,26818]},{"pos":[26867,26877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[26879,26884]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[26887,26964]},{"pos":[26971,26983],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[26985,27020]},{"pos":[27026,27046],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[27048,27107]},{"pos":[27157,27167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[27169,27174]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[27177,27265]},{"pos":[27272,27284],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[27286,27332]},{"pos":[27338,27350],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[27396,27406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[27408,27413]},{"pos":[27422,27434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27440,27462],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[27464,27525]},{"pos":[27594,27604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[27606,27611]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[27614,27685]},{"content":"mode","pos":[27697,27701]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[27704,27775]},{"pos":[27782,27794],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[27796,27844]},{"pos":[27850,27876],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[27878,27937]},{"pos":[28002,28012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[28014,28018]},{"pos":[28027,28039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[28041,28095]},{"pos":[28101,28128],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[28130,28191]},{"pos":[28248,28258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28260,28265]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[28268,28346]},{"pos":[28353,28365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[28367,28415]},{"pos":[28421,28435],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[28437,28507]},{"pos":[28559,28569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28571,28576]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[28579,28651]},{"pos":[28658,28670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[28672,28721]},{"pos":[28727,28739],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[28741,28779]},{"pos":[28831,28841],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28843,28848]},{"content":"mode","pos":[28862,28866]},{"pos":[28875,28887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[28889,28924]},{"pos":[28931,28938],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[28940,28993]},{"content":"Calculate the width according to the following table.","pos":[28994,29047]},{"content":"Mode","pos":[29051,29055]},{"content":"Width calculation","pos":[29068,29085]},{"content":"-1 Exact","pos":[29271,29279]},{"content":"The exact width in pixels of the controls is used.","pos":[29288,29338]},{"content":"0 Auto","pos":[29381,29387]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[29398,29486]},{"content":"1 Column width","pos":[29491,29505]},{"content":"The layout of the form determines the width of the control.","pos":[29508,29567]},{"content":"The width and width calculation mode can be set separately.","pos":[29600,29659]},{"pos":[29665,29681],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[29683,29745]},{"pos":[29791,29801],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[29803,29808]},{"pos":[29817,29829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[29831,29892]},{"pos":[29899,29906],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[29908,29961]},{"content":"Mode","pos":[29965,29969]},{"content":"Width calculation","pos":[29980,29997]},{"content":"Exact","pos":[30181,30186]},{"content":"The exact width in pixels of the controls is used.","pos":[30196,30246]},{"content":"Auto","pos":[30289,30293]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[30304,30392]},{"content":"Column width","pos":[30397,30409]},{"content":"The layout of the form determines the width of the control.","pos":[30412,30471]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[30504,30587]},{"pos":[30593,30610],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[30612,30650]},{"pos":[30697,30707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[30709,30714]},{"pos":[30723,30735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[30737,30772]},{"pos":[30779,30786],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[30788,30861]},{"pos":[30867,30884],"content":"Method CanUserAdd","linkify":"Method CanUserAdd","nodes":[{"content":"Method CanUserAdd","pos":[0,17]}]},{"pos":[30975,30985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formDataSource","pos":[30987,31001]},{"content":"fieldName","pos":[31015,31024]},{"pos":[31033,31045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[31051,31072],"content":"Method resolveChanges","linkify":"Method resolveChanges","nodes":[{"content":"Method resolveChanges","pos":[0,21]}]},{"pos":[31112,31136],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[31193,31203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[31205,31209]},{"pos":[31216,31247],"content":"Class FormReferenceGroupControl","linkify":"Class FormReferenceGroupControl","nodes":[{"content":"Class FormReferenceGroupControl","pos":[0,31]}]},{"pos":[31318,31325],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[31331,31339],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[31345,31352],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[31356,31362]},{"content":"Description","pos":[31474,31485]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[31936,32040],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[32226,32321],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[32516,32631],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[32806,32852],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[32924,32964]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[33096,33139],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[33214,33281]},{"content":"public boolean allowSysSetup()","pos":[33386,33416]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[33504,33587]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[33676,33725],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[33794,33892]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33966,34007],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[34084,34133]},{"content":"public Image backgroundImage(<ph id=\"ph1\">\\[</ph>Image image<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int drawMode<ph id=\"ph4\">\\]</ph>)","pos":[34256,34319],"source":"public Image backgroundImage(\\[Image image\\], \\[int drawMode\\])"},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[34546,34581],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[34664,34726]},{"content":"public int beginDrag(int x, int y)","pos":[34836,34870]},{"content":"Is called when the user starts to drag a form control.","pos":[34954,35008]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[35126,35156],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[35244,35311]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[35416,35448],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[35534,35590]},{"content":"public container calcControlSize(int chars, int lines)","pos":[35706,35760]},{"content":"Retrieves the size of the control.","pos":[35824,35858]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[35996,36081],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[36286,36332]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[36576,36614],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[36694,36737]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[36866,36903],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[36984,37029]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[37156,37228],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[37274,37341]},{"content":"public List configurationKeyEx()","pos":[37446,37478]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[37564,37660]},{"content":"public boolean contains(FormControl control)","pos":[37736,37780]},{"content":"public int controlCount()","pos":[38026,38051]},{"content":"public FormControl controlNum(int controlNo)","pos":[38316,38360]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[38606,38650],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[38724,38802]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[38896,38955],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[39186,39228],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[39304,39429]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[39476,39516],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[39594,39659]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[39766,39805],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[39884,40051]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[40056,40090],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[40174,40255]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[40346,40427]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[40464,40558]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[40636,40713]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[40754,40850]},{"content":"public str dragText()","pos":[40926,40947]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[41044,41114]},{"content":"public boolean enableChilds(<ph id=\"ph1\">\\[</ph>boolean enable<ph id=\"ph2\">\\]</ph>)","pos":[41216,41263],"source":"public boolean enableChilds(\\[boolean enable\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[41506,41547],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[41624,41675]},{"content":"public boolean expand(<ph id=\"ph1\">\\[</ph>boolean expand<ph id=\"ph2\">\\]</ph>)","pos":[41796,41837],"source":"public boolean expand(\\[boolean expand\\])"},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[42086,42150],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[42376,42406],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[42494,42551]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[42666,42700],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[42784,42841]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[42956,42997],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[43074,43125]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[43246,43288],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[43364,43452]},{"content":"public boolean hasUserSetting()","pos":[43536,43567]},{"content":"Indicates whether the control has custom user settings.","pos":[43654,43709]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[43826,43868],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[43944,43983]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44116,44152],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[44234,44296]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44406,44443],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[44524,44563]},{"content":"public str helpField()","pos":[44696,44718]},{"content":"Retrieves the Help text for the control.","pos":[44814,44854]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[44986,45020],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[45104,45208]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[45276,45321],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[45566,45607],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[45684,45747]},{"content":"public int hWnd()","pos":[45856,45873]},{"content":"Retrieves the Windows handle for the control.","pos":[45974,46019]},{"content":"public boolean isContainer()","pos":[46146,46174]},{"content":"public boolean isDisplayed()","pos":[46436,46464]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[46554,46620]},{"content":"public boolean isRestricted()","pos":[46726,46755]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[46844,46911]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[47016,47072]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[47134,47233]},{"content":"public boolean isValid()","pos":[47306,47330]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[47596,47636],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[47886,47917],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[48004,48041]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[48176,48216],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[48466,48501],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[48756,48799],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[49046,49081],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[49336,49375],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[49626,49672],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[49916,49952],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[50206,50253],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50496,50537],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50786,50828],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[51076,51121],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[51366,51450]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[51656,51736]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[51946,52024]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[52236,52275],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[52526,52574],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[52816,52862],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[53106,53146],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[53396,53437],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[53686,53708]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[53976,54016],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[54094,54158]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[54266,54300],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[54384,54445]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[54556,54591],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[54674,54738]},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[54846,54889],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[55136,55183],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[55254,55307]},{"content":"public boolean modified()","pos":[55426,55451]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[55716,55795]},{"content":"Is called when the control is double-clicked by the user.","pos":[55834,55891]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[56006,56081]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[56124,56189]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[56296,56371]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[56414,56479]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[56586,56659]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[56704,56776]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[56876,56936],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[57166,57196],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[57284,57419]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[57456,57498],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[57746,57785]},{"content":"public FormControl parentControl()","pos":[58036,58070]},{"content":"Retrieves the parent control for the control.","pos":[58154,58199]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[58326,58366],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[58616,58652],"source":"public int promptrect(\\[int value\\])"},{"content":"public FieldId referenceField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[58906,58954],"source":"public FieldId referenceField(\\[FieldId value\\])"},{"content":"public str replacementFieldGroup(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[59196,59243],"source":"public str replacementFieldGroup(\\[str value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[59486,59543],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[59604,59663]},{"content":"public int showContextMenu(int menuHandle)","pos":[59776,59818]},{"content":"Shows the shortcut menu for the control.","pos":[59894,59934]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[60066,60109],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[60356,60394],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[60474,60601]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[60646,60690],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60936,60967],"source":"public int style(\\[int value\\])"},{"content":"public str toolTip()","pos":[61226,61246]},{"content":"Retrieves the tooltip text for the control.","pos":[61344,61387]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[61516,61555],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[61634,61696]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[61806,61839],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[61924,61983]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[62096,62130],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[62214,62276]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[62386,62416],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[62676,62719],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[62966,63017]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[63256,63290],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[63374,63417]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[63546,63584],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[63664,63712]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[63836,63875],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[63954,64013]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[64126,64163],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[64244,64327]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[64416,64452],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[64534,64586]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[64706,64740],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[64824,64906]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[64996,65038],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[65114,65170]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[65286,65326],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[65404,65458]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[65576,65616],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[65694,65743]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[65866,65909],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[65984,66037]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[66156,66190],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[66274,66422]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[66446,66481],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[66564,66641]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[66736,66783],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public boolean validate()","pos":[67026,67051]},{"content":"public Int64 value(<ph id=\"ph1\">\\[</ph>Int64 value<ph id=\"ph2\">\\]</ph>)","pos":[67316,67351],"source":"public Int64 value(\\[Int64 value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[67606,67666],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[67724,67785]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[67896,67950],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[68014,68073]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[68186,68232],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[68304,68365]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[68476,68514],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[68766,68807],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[68884,68954]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[69056,69097],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[69174,69212]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[69346,69381],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[69464,69526]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[69636,69672],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[69754,69792]},{"content":"public void lostFocus()","pos":[69926,69949]},{"content":"Indicates that the control has lost focus.","pos":[70044,70086]},{"content":"public void displayControl()","pos":[70216,70244]},{"content":"Displays the control.","pos":[70334,70355]},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[70506,70581],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void jumpRef()","pos":[70796,70817]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[71086,71193],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void cut()","pos":[71376,71393]},{"content":"Cuts the contents of the control.","pos":[71494,71527]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[71666,71743]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[71784,71854]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[71956,72028],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dragLeave()","pos":[72246,72269]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[72364,72460]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[72536,72573],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void arrange()","pos":[72826,72847]},{"content":"public void enter()","pos":[73116,73135]},{"content":"public void paste()","pos":[73406,73425]},{"content":"Pastes the contents of the clipboard into the control.","pos":[73524,73578]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[73696,73773],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setFocus()","pos":[73986,74008]},{"content":"Sets the focus on the control.","pos":[74104,74134]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[74276,74351],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[74566,74640],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void inputSearch(str searchStr)","pos":[74856,74894]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[74974,75045]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[75146,75219]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[75264,75362]},{"content":"public void mouseLeave()","pos":[75436,75460]},{"content":"Indicates that the mouse pointer has left the control.","pos":[75554,75608]},{"content":"public void prefColumnSize(int width, int height)","pos":[75726,75775]},{"content":"Specifies the preferred column width and height for the form control.","pos":[75844,75913]},{"content":"public void undo()","pos":[76016,76034]},{"content":"public void gotFocus()","pos":[76306,76328]},{"content":"Indicates that the control has received focus.","pos":[76424,76470]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[76596,76672],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lookup()","pos":[76886,76906]},{"content":"public void resetUserSetting()","pos":[77176,77206]},{"content":"Resets the user settings for the control.","pos":[77294,77335]},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[77466,77539],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[77756,77832],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void copy()","pos":[78046,78064]},{"content":"Copies the contents of the control to the clipboard.","pos":[78164,78216]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[78336,78405]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[78454,78554]},{"content":"public void context()","pos":[78626,78647]},{"content":"Shows the shortcut menu for the control.","pos":[78744,78784]},{"content":"public void endDrag()","pos":[78916,78937]},{"content":"Is called when the user has finished dragging a form control.","pos":[79034,79095]},{"pos":[79209,79226],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[79341,79351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[79353,79364]},{"content":"controlName","pos":[79378,79389]},{"content":"insertAfter","pos":[79403,79414]},{"pos":[79423,79435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79441,79460],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[79566,79576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[79578,79590]},{"content":"controlName","pos":[79604,79615]},{"content":"insertAfter","pos":[79629,79640]},{"pos":[79649,79661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79667,79686],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[79810,79820],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[79822,79834]},{"content":"fieldId","pos":[79848,79855]},{"content":"insertAfter","pos":[79869,79880]},{"content":"arrayIndex","pos":[79894,79904]},{"pos":[79913,79925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79931,79950],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[79952,79992]},{"pos":[80049,80059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80061,80066]},{"content":"The new value for the property; optional.","pos":[80069,80110]},{"pos":[80117,80129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[80131,80187]},{"pos":[80194,80201],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[80203,80282]},{"pos":[80288,80304],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[80306,80373]},{"pos":[80427,80437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80439,80444]},{"content":"The value to assign to the allowEdit property.","pos":[80447,80493]},{"pos":[80500,80512],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[80514,80566]},{"pos":[80573,80580],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[80582,80708]},{"pos":[80714,80734],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[80736,80819]},{"pos":[80862,80874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[80876,80944]},{"pos":[80950,80972],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[80974,81072]},{"pos":[81132,81142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81144,81149]},{"content":"The new value for the property; optional.","pos":[81152,81193]},{"pos":[81200,81212],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[81214,81293]},{"pos":[81300,81307],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[81309,81346]},{"pos":[81352,81374],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[81376,81425]},{"pos":[81477,81487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81489,81494]},{"pos":[81503,81515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[81517,81561]},{"pos":[81568,81575],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[81577,81645]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[81651,81721]},{"content":"The second byte contains a value for green.","pos":[81726,81769]},{"content":"The third byte contains a value for blue.","pos":[81774,81815]},{"content":"The high-order byte must be zero.","pos":[81820,81853]},{"content":"The maximum value for a single byte is 255.","pos":[81858,81901]},{"pos":[81907,81929],"content":"Method backgroundImage","linkify":"Method backgroundImage","nodes":[{"content":"Method backgroundImage","pos":[0,22]}]},{"pos":[82001,82011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"image","pos":[82013,82018]},{"content":"drawMode","pos":[82032,82040]},{"pos":[82049,82061],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82067,82083],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[82085,82147]},{"pos":[82193,82203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82205,82210]},{"pos":[82219,82231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[82233,82294]},{"pos":[82300,82316],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[82318,82372]},{"pos":[82419,82429],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[82431,82432]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[82435,82505]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[82506,82573]},{"content":"y","pos":[82585,82586]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[82589,82659]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[82660,82727]},{"pos":[82734,82746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[82748,82787]},{"pos":[82794,82801],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[82803,82884]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[82885,82989]},{"pos":[82995,83006],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[83008,83075]},{"pos":[83116,83126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83128,83133]},{"pos":[83142,83154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[83156,83206]},{"pos":[83213,83220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[83222,83294]},{"content":"0 Use the default font weight.","pos":[83300,83330]},{"content":"1 Thin.","pos":[83335,83342]},{"content":"2 Extra-light.","pos":[83347,83361]},{"content":"3 Light.","pos":[83366,83374]},{"content":"4 Normal.","pos":[83379,83388]},{"content":"5 Medium.","pos":[83393,83402]},{"content":"6 Semibold.","pos":[83407,83418]},{"content":"7 Bold.","pos":[83423,83430]},{"content":"8 Extra-bold.","pos":[83435,83448]},{"content":"9 Heavy.","pos":[83453,83461]},{"pos":[83467,83480],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[83482,83538]},{"pos":[83581,83591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83593,83598]},{"pos":[83607,83619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[83621,83665]},{"pos":[83672,83679],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[83681,83773]},{"content":"Value","pos":[83777,83782]},{"content":"Description","pos":[83785,83796]},{"content":"0","pos":[83825,83826]},{"content":"Auto","pos":[83833,83837]},{"content":"1","pos":[83849,83850]},{"content":"3D","pos":[83857,83859]},{"content":"2","pos":[83873,83874]},{"content":"Single line","pos":[83881,83892]},{"content":"3","pos":[83897,83898]},{"content":"Flat","pos":[83905,83909]},{"content":"4","pos":[83921,83922]},{"content":"None","pos":[83929,83933]},{"pos":[83948,83970],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[83972,84006]},{"pos":[84073,84083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[84085,84090]},{"content":"The number of lines to use to determine the height.","pos":[84093,84144]},{"content":"lines","pos":[84156,84161]},{"content":"The number of lines to use to determine the height.","pos":[84164,84215]},{"pos":[84222,84234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[84236,84282]},{"pos":[84288,84310],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[84406,84416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[84418,84430]},{"content":"fieldId","pos":[84444,84451]},{"content":"arrayIndex","pos":[84465,84475]},{"pos":[84484,84496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84502,84519],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[84578,84588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[84590,84597]},{"pos":[84606,84618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84624,84643],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[84645,84688]},{"pos":[84737,84747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84749,84754]},{"pos":[84763,84775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[84777,84839]},{"pos":[84846,84853],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table.","pos":[84855,84959]},{"content":"Value","pos":[84963,84968]},{"content":"Description","pos":[84971,84982]},{"content":"0","pos":[85029,85030]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85037,85050],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[85062,85063]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85070,85086],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[85095,85096]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85103,85118],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[85128,85130]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85136,85148],"source":"MAC\\_CHARSET"},{"content":"128","pos":[85161,85164]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85169,85186],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[85194,85197]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85202,85217],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[85227,85230]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85235,85250],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[85260,85263]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85268,85288],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[85293,85296]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85301,85315],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[85326,85329]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85334,85350],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[85359,85362]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85367,85386],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[85392,85395]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85400,85415],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[85425,85428]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85433,85449],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[85458,85461]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85466,85485],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[85491,85494]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85499,85511],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[85523,85611]},{"content":"Value","pos":[85615,85620]},{"content":"Description","pos":[85623,85634]},{"content":"130","pos":[85669,85672]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85677,85691],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[85695,85781]},{"content":"Value","pos":[85785,85790]},{"content":"Description","pos":[85793,85804]},{"content":"177","pos":[85841,85844]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85849,85864],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[85869,85872]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[85877,85892],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[85896,85973]},{"content":"Value","pos":[85977,85982]},{"content":"Description","pos":[85985,85996]},{"content":"222","pos":[86029,86032]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[86037,86050],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[86054,86133]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[86134,86225],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[86226,86340]},{"pos":[86346,86364],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[86366,86411]},{"pos":[86459,86469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86471,86476]},{"pos":[86485,86497],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[86499,86542]},{"pos":[86549,86556],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[86558,86619]},{"content":"Value","pos":[86623,86628]},{"content":"Style","pos":[86631,86636]},{"content":"0","pos":[86691,86692]},{"content":"Default","pos":[86699,86706]},{"content":"1","pos":[86725,86726]},{"content":"The Windows palette","pos":[86733,86752]},{"content":"2","pos":[86759,86760]},{"content":"The true-color scheme","pos":[86767,86788]},{"pos":[86796,86819],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[86821,86888]},{"pos":[86971,86981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86983,86988]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[86991,87058]},{"pos":[87065,87077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[87079,87151]},{"pos":[87158,87165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[87167,87248]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[87249,87342]},{"pos":[87348,87373],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[87375,87471]},{"pos":[87516,87528],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[87530,87616]},{"pos":[87623,87630],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[87632,87681]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[87682,87830]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[87831,87965]},{"pos":[87971,87986],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[88043,88053],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[88055,88062]},{"pos":[88071,88083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88089,88108],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[88146,88158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88164,88181],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[88238,88248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[88250,88259]},{"pos":[88268,88280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88286,88311],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[88313,88391]},{"pos":[88446,88456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88458,88463]},{"content":"The string that contains the country/region codes to set; optional.","pos":[88466,88533]},{"pos":[88540,88552],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[88554,88619]},{"pos":[88625,88657],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[88727,88737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88739,88744]},{"pos":[88753,88765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88771,88794],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[88796,88921]},{"pos":[88974,88984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88986,88991]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[88994,89068]},{"pos":[89075,89087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[89089,89201]},{"pos":[89208,89215],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[89217,89344]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[89345,89438]},{"pos":[89444,89461],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[89463,89528]},{"pos":[89579,89589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89591,89596]},{"pos":[89605,89617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[89619,89664]},{"pos":[89670,89690],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[89692,89859]},{"pos":[89909,89919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89921,89926]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[89929,90003]},{"pos":[90010,90022],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[90024,90152]},{"pos":[90158,90173],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[90175,90256]},{"pos":[90301,90311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90313,90318]},{"content":"An Integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[90321,90399]},{"pos":[90406,90418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[90420,90480]},{"pos":[90487,90494],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave, the dragOver, and the dragOverEx to specify the behavior.","pos":[90496,90572]},{"pos":[90578,90593],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[90595,90689]},{"pos":[90783,90793],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[90795,90805]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[90808,90893]},{"content":"dragMode","pos":[90905,90913]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[90916,91001]},{"content":"x","pos":[91013,91014]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[91017,91102]},{"content":"y","pos":[91114,91115]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[91118,91203]},{"pos":[91210,91222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[91224,91289]},{"pos":[91295,91312],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[91314,91410]},{"pos":[91500,91510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[91512,91522]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[91525,91610]},{"content":"dragMode","pos":[91622,91630]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[91633,91718]},{"content":"x","pos":[91730,91731]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[91734,91819]},{"content":"y","pos":[91831,91832]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[91835,91920]},{"pos":[91927,91939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[91941,92006]},{"pos":[92012,92027],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[92029,92099]},{"pos":[92133,92145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[92147,92278]},{"pos":[92284,92303],"content":"Method enableChilds","linkify":"Method enableChilds","nodes":[{"content":"Method enableChilds","pos":[0,19]}]},{"pos":[92361,92371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enable","pos":[92373,92379]},{"pos":[92388,92400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92406,92420],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[92422,92473]},{"pos":[92525,92535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92537,92542]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[92545,92617]},{"pos":[92624,92636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[92638,92686]},{"pos":[92693,92700],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[92702,92777]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[92778,92873]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[92874,93008]},{"pos":[93014,93027],"content":"Method expand","linkify":"Method expand","nodes":[{"content":"Method expand","pos":[0,13]}]},{"pos":[93079,93089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"expand","pos":[93091,93097]},{"pos":[93106,93118],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93124,93147],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[93222,93232],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93234,93239]},{"pos":[93248,93260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93266,93277],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[93279,93336]},{"pos":[93377,93387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93389,93394]},{"pos":[93403,93415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[93417,93472]},{"pos":[93478,93493],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[93495,93552]},{"pos":[93597,93607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93609,93614]},{"pos":[93623,93635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[93637,93670]},{"pos":[93676,93698],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[93700,93751]},{"pos":[93803,93813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93815,93820]},{"pos":[93829,93841],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[93843,93887]},{"pos":[93894,93901],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[93903,93971]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[93977,94047]},{"content":"The second byte contains a value for green.","pos":[94052,94095]},{"content":"The third byte contains a value for blue.","pos":[94100,94141]},{"content":"The high-order byte must be zero.","pos":[94146,94179]},{"content":"The maximum value for a single byte is 255.","pos":[94184,94227]},{"pos":[94233,94250],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[94252,94340]},{"pos":[94393,94403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[94405,94408]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[94411,94481]},{"pos":[94488,94500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[94502,94569]},{"pos":[94575,94596],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[94598,94653]},{"pos":[94697,94709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[94711,94774]},{"pos":[94780,94793],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[94795,94834]},{"pos":[94887,94897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[94899,94904]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[94907,94972]},{"content":"mode","pos":[94984,94988]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[94991,95056]},{"pos":[95063,95075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[95077,95113]},{"pos":[95120,95127],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[95129,95182]},{"content":"Calculate the height according to the following table.","pos":[95183,95237]},{"content":"Mode","pos":[95241,95245]},{"content":"Height calculation","pos":[95259,95277]},{"content":"-1 Exact","pos":[95465,95473]},{"content":"The exact height in pixels of the controls is used.","pos":[95483,95534]},{"content":"0 Auto","pos":[95577,95583]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[95595,95684]},{"content":"1 Column height","pos":[95689,95704]},{"content":"The layout of the form determines the height of the control.","pos":[95707,95767]},{"content":"The height and height calculation mode can be set separately.","pos":[95800,95861]},{"pos":[95867,95884],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[95886,95948]},{"pos":[95995,96005],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96007,96012]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[96015,96090]},{"pos":[96097,96109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[96111,96132]},{"pos":[96139,96146],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[96148,96202]},{"content":"Mode","pos":[96206,96210]},{"content":"Height calculation","pos":[96222,96240]},{"content":"Exact","pos":[96426,96431]},{"content":"The exact height in pixels of the controls is used.","pos":[96442,96493]},{"content":"Auto","pos":[96536,96540]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[96552,96641]},{"content":"Column height","pos":[96646,96659]},{"content":"The layout of the form determines the height of the control.","pos":[96662,96722]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[96755,96840]},{"pos":[96846,96864],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[96866,96905]},{"pos":[96953,96963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96965,96970]},{"content":"An Integer that specifies the height in pixels; optional.","pos":[96973,97030]},{"pos":[97037,97049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[97051,97072]},{"pos":[97079,97086],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[97088,97178]},{"pos":[97184,97200],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[97202,97242]},{"pos":[97277,97289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[97291,97379]},{"pos":[97386,97393],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[97395,97465]},{"content":"Use the helpText method to set the value of the Help text.","pos":[97466,97524]},{"pos":[97530,97545],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[97547,97651]},{"pos":[97696,97706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97708,97713]},{"content":"The value that is assigned as the Help text for the control.","pos":[97716,97776]},{"pos":[97783,97795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[97797,97852]},{"pos":[97859,97866],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[97868,97936]},{"content":"The Help text must not exceed 250 characters.","pos":[97937,97982]},{"pos":[97988,98006],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[98062,98072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[98074,98079]},{"pos":[98088,98100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[98106,98128],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[98130,98193]},{"pos":[98245,98255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[98257,98262]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[98265,98332]},{"pos":[98339,98351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[98353,98403]},{"pos":[98409,98420],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[98422,98467]},{"pos":[98497,98509],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[98511,98538]},{"pos":[98545,98552],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[98554,98598]},{"pos":[98604,98622],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[98663,98675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[98681,98699],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[98701,98767]},{"pos":[98808,98820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[98822,98873]},{"pos":[98880,98887],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[98889,98957]},{"pos":[98963,98982],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[98984,99051]},{"pos":[99093,99105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[99107,99159]},{"pos":[99165,99190],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[99192,99291]},{"pos":[99360,99370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[99372,99389]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[99392,99520]},{"pos":[99527,99539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[99541,99700]},{"pos":[99707,99714],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[99716,99793]},{"content":"FormAllowUserSetup::No 0","pos":[100133,100157]},{"content":"No changes can be made to the control.","pos":[100168,100206]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[100207,100296]},{"content":"FormAllowUserSetup::Restricted 1","pos":[100301,100333]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[100336,100428]},{"content":"The user cannot move the control.","pos":[100429,100462]},{"content":"FormAllowUserSetup::Yes 2","pos":[100469,100494]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[100504,100596]},{"content":"The user can also move the control.","pos":[100597,100632]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[100636,100825]},{"pos":[100831,100845],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[100882,100894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100900,100913],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[100964,100974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100976,100981]},{"pos":[100990,101002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101008,101020],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[101022,101059]},{"pos":[101101,101111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101113,101118]},{"pos":[101127,101139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[101141,101179]},{"pos":[101186,101193],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[101195,101273]},{"content":"The label property value cannot exceed 250 characters.","pos":[101274,101328]},{"pos":[101334,101355],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[101406,101416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101418,101423]},{"pos":[101432,101444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101450,101466],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[101512,101522],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101524,101529]},{"pos":[101538,101550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101556,101580],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[101634,101644],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101646,101651]},{"pos":[101660,101672],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101678,101694],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[101740,101750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101752,101757]},{"pos":[101766,101778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101784,101804],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[101854,101864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101866,101871]},{"pos":[101880,101892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101898,101925],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[101982,101992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101994,101999]},{"pos":[102008,102020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102026,102043],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[102090,102100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102102,102107]},{"pos":[102116,102128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102134,102152],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[102210,102220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102222,102227]},{"content":"mode","pos":[102241,102245]},{"pos":[102254,102266],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102272,102294],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[102346,102356],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102358,102363]},{"pos":[102372,102384],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102390,102413],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[102466,102476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102478,102483]},{"pos":[102492,102504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102510,102528],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[102584,102594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102596,102601]},{"pos":[102610,102622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102628,102653],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[102750,102760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[102762,102763]},{"content":"y","pos":[102777,102778]},{"content":"button","pos":[102792,102798]},{"content":"Ctrl","pos":[102812,102816]},{"content":"Shift","pos":[102830,102835]},{"pos":[102844,102856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102862,102883],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[102976,102986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[102988,102989]},{"content":"y","pos":[103003,103004]},{"content":"button","pos":[103018,103024]},{"content":"Ctrl","pos":[103038,103042]},{"content":"Shift","pos":[103056,103061]},{"pos":[103070,103082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103088,103107],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[103198,103208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[103210,103211]},{"content":"y","pos":[103225,103226]},{"content":"button","pos":[103240,103246]},{"content":"Ctrl","pos":[103260,103264]},{"content":"Shift","pos":[103278,103283]},{"pos":[103292,103304],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103310,103330],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[103380,103390],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103392,103397]},{"pos":[103406,103418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103424,103445],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[103504,103514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103516,103521]},{"pos":[103530,103542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103548,103565],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[103622,103632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103634,103639]},{"content":"mode","pos":[103653,103657]},{"pos":[103666,103678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103684,103705],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[103756,103766],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103768,103773]},{"pos":[103782,103794],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103800,103822],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[103874,103884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103886,103891]},{"pos":[103900,103912],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103918,103930],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[103965,103977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103983,103994],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[103996,104060]},{"pos":[104111,104121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104123,104128]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[104131,104217]},{"content":"mode","pos":[104229,104233]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[104236,104322]},{"pos":[104329,104341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[104343,104394]},{"pos":[104400,104415],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[104417,104478]},{"pos":[104523,104533],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104535,104540]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[104543,104629]},{"pos":[104636,104648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[104650,104706]},{"pos":[104712,104728],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[104730,104794]},{"pos":[104840,104850],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104852,104857]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[104860,104941]},{"pos":[104948,104960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[104962,105013]},{"pos":[105019,105035],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[105089,105099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[105101,105106]},{"pos":[105115,105127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[105133,105153],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[105155,105208]},{"pos":[105266,105276],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[105278,105283]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[105286,105380]},{"pos":[105387,105399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[105401,105474]},{"pos":[105480,105495],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[105533,105545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[105551,105571],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[105573,105630]},{"pos":[105722,105732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[105734,105735]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[105738,105799]},{"content":"y","pos":[105811,105812]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[105815,105876]},{"content":"button","pos":[105888,105894]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[105897,105958]},{"content":"Ctrl","pos":[105970,105974]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[105977,106038]},{"content":"Shift","pos":[106050,106055]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106058,106119]},{"pos":[106126,106138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[106140,106179]},{"pos":[106186,106193],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[106195,106299]},{"pos":[106305,106321],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[106323,106388]},{"pos":[106476,106486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[106488,106489]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106492,106553]},{"content":"y","pos":[106565,106566]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106569,106630]},{"content":"button","pos":[106642,106648]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106651,106712]},{"content":"Ctrl","pos":[106724,106728]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106731,106792]},{"content":"Shift","pos":[106804,106809]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106812,106873]},{"pos":[106880,106892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[106894,106933]},{"pos":[106940,106947],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[106949,107053]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[107054,107189]},{"pos":[107195,107211],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[107213,107278]},{"pos":[107366,107376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[107378,107379]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[107382,107443]},{"content":"y","pos":[107455,107456]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[107459,107520]},{"content":"button","pos":[107532,107538]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[107541,107602]},{"content":"Ctrl","pos":[107614,107618]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[107621,107682]},{"content":"Shift","pos":[107694,107699]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[107702,107763]},{"pos":[107770,107782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[107784,107823]},{"pos":[107830,107837],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[107839,107943]},{"pos":[107949,107963],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[107965,108037]},{"pos":[108123,108133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[108135,108136]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[108139,108200]},{"content":"y","pos":[108212,108213]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[108216,108277]},{"content":"button","pos":[108289,108295]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[108298,108359]},{"content":"Ctrl","pos":[108371,108375]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[108378,108439]},{"content":"Shift","pos":[108451,108456]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[108459,108520]},{"pos":[108527,108539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[108541,108580]},{"pos":[108587,108594],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[108596,108700]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[108701,108836]},{"pos":[108842,108860],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[108931,108941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[108943,108952]},{"content":"insertAfterId","pos":[108966,108979]},{"pos":[108988,109000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[109006,109017],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[109019,109154]},{"pos":[109195,109205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[109207,109212]},{"content":"The name to assign to the control.","pos":[109215,109249]},{"pos":[109256,109268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[109270,109334]},{"pos":[109341,109348],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[109350,109444]},{"content":"It must start with a letter.","pos":[109450,109478]},{"content":"It cannot exceed 250 characters.","pos":[109483,109515]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[109520,109574],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[109579,109619]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[109624,109734]},{"pos":[109740,109763],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[109816,109826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[109828,109833]},{"pos":[109842,109854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[109860,109887],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[109939,109951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[109957,109977],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[109979,110024]},{"pos":[110071,110083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[110085,110120]},{"pos":[110126,110147],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[110198,110208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[110210,110215]},{"pos":[110224,110236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[110242,110259],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[110306,110316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[110318,110323]},{"pos":[110332,110344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[110350,110371],"content":"Method referenceField","linkify":"Method referenceField","nodes":[{"content":"Method referenceField","pos":[0,21]}]},{"pos":[110430,110440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[110442,110447]},{"pos":[110456,110468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[110474,110502],"content":"Method replacementFieldGroup","linkify":"Method replacementFieldGroup","nodes":[{"content":"Method replacementFieldGroup","pos":[0,28]}]},{"pos":[110560,110570],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[110572,110577]},{"pos":[110586,110598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[110604,110622],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[110624,110683]},{"pos":[110751,110761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[110763,110768]},{"content":"The ID of the security key to assign to the control; optional.","pos":[110771,110833]},{"pos":[110840,110852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[110854,110953]},{"pos":[110959,110981],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[110983,111023]},{"pos":[111078,111088],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[111090,111100]},{"content":"The ID of the menu to show.","pos":[111103,111130]},{"pos":[111137,111149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[111151,111210]},{"pos":[111216,111232],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[111286,111296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[111298,111303]},{"pos":[111312,111324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[111330,111341],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[111343,111470]},{"pos":[111519,111529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[111531,111536]},{"content":"The value to assign to the skip property of the control; optional.","pos":[111539,111605]},{"pos":[111612,111624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[111626,111732]},{"pos":[111739,111746],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[111748,111943]},{"pos":[111949,111960],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[112015,112025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[112027,112040]},{"pos":[112049,112061],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[112067,112079],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[112121,112131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[112133,112138]},{"pos":[112147,112159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[112165,112179],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[112181,112224]},{"pos":[112257,112269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[112271,112373]},{"pos":[112380,112387],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[112389,112461]},{"pos":[112467,112477],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[112479,112541]},{"pos":[112591,112601],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[112603,112608]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[112611,112695]},{"content":"mode","pos":[112707,112711]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[112714,112798]},{"pos":[112805,112817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[112819,112868]},{"pos":[112874,112888],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[112890,112949]},{"pos":[112993,113003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[113005,113010]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[113013,113097]},{"pos":[113104,113116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[113118,113172]},{"pos":[113178,113193],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[113195,113257]},{"pos":[113302,113312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[113314,113319]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[113322,113401]},{"pos":[113408,113420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[113422,113471]},{"pos":[113477,113488],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[113529,113539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[113541,113546]},{"pos":[113555,113567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[113573,113589],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[113643,113653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[113655,113660]},{"pos":[113669,113681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[113687,113714],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[113778,113788],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[113790,113794]},{"pos":[113803,113815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[113821,113836],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[113838,113881]},{"pos":[113926,113936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[113938,113943]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[113946,114018]},{"pos":[114025,114037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[114039,114069]},{"pos":[114075,114094],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[114096,114144]},{"pos":[114193,114203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[114205,114210]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[114213,114290]},{"pos":[114297,114309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[114311,114346]},{"pos":[114352,114372],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[114374,114433]},{"pos":[114483,114493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[114495,114500]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[114503,114591]},{"pos":[114598,114610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[114612,114658]},{"pos":[114664,114682],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[114684,114767]},{"pos":[114815,114825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[114827,114832]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[114835,114915]},{"pos":[114922,114934],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[114936,114992]},{"pos":[114998,115015],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[115017,115069]},{"pos":[115116,115126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[115128,115133]},{"content":"The user height for the control; optional.","pos":[115136,115178]},{"pos":[115185,115197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[115199,115238]},{"pos":[115244,115259],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[115261,115343]},{"pos":[115388,115398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[115400,115405]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[115408,115487]},{"pos":[115494,115506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[115508,115563]},{"pos":[115570,115577],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[115579,115749]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[115750,115825]},{"content":"This method lets you programmatically determine and set the value.","pos":[115826,115892]},{"pos":[115898,115921],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[115923,115979]},{"pos":[116032,116042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[116044,116049]},{"content":"The organization container to set for the control; optional.","pos":[116052,116112]},{"pos":[116119,116131],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[116133,116176]},{"pos":[116182,116203],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[116205,116259]},{"pos":[116310,116320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[116322,116327]},{"content":"The organization sibling to set for the control; optional.","pos":[116330,116388]},{"pos":[116395,116407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[116409,116450]},{"pos":[116456,116477],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[116479,116528]},{"pos":[116579,116589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[116591,116596]},{"content":"The user label text to set for the control; optional.","pos":[116599,116652]},{"pos":[116659,116671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[116673,116709]},{"pos":[116715,116739],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[116741,116794]},{"pos":[116848,116858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[116860,116865]},{"content":"The user security level to set for the control; optional.","pos":[116868,116925]},{"pos":[116932,116944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[116946,116986]},{"pos":[116992,117007],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[117009,117157]},{"pos":[117202,117212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[117214,117219]},{"content":"The value to assign to the userSkip property; optional.","pos":[117222,117277]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[117278,117373]},{"pos":[117380,117392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[117394,117463]},{"pos":[117469,117485],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[117487,117564]},{"pos":[117610,117620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[117622,117627]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[117630,117696]},{"pos":[117703,117715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[117717,117846]},{"pos":[117853,117860],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[117862,117956]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[117957,118073],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[118074,118224]},{"pos":[118230,118250],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[118308,118318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118320,118325]},{"pos":[118334,118346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118352,118367],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[118405,118417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118423,118435],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[118481,118491],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118493,118498]},{"pos":[118507,118519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118525,118547],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[118549,118610]},{"pos":[118679,118689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118691,118696]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[118699,118776]},{"content":"mode","pos":[118788,118792]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[118795,118872]},{"pos":[118879,118891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[118893,118941]},{"pos":[118947,118973],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[118975,119034]},{"pos":[119099,119109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[119111,119115]},{"pos":[119124,119136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[119138,119192]},{"pos":[119198,119225],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[119227,119288]},{"pos":[119345,119355],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119357,119362]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[119365,119443]},{"pos":[119450,119462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[119464,119512]},{"pos":[119518,119537],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[119586,119596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119598,119603]},{"pos":[119612,119624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[119630,119644],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[119646,119716]},{"pos":[119768,119778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119780,119785]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[119788,119860]},{"pos":[119867,119879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[119881,119930]},{"pos":[119936,119948],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[119950,119988]},{"pos":[120040,120050],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[120052,120057]},{"content":"An Integer that indicates how the width is calculated; optional.","pos":[120060,120124]},{"content":"mode","pos":[120136,120140]},{"content":"An Integer that indicates how the width is calculated; optional.","pos":[120143,120207]},{"pos":[120214,120226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[120228,120263]},{"pos":[120270,120277],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[120279,120332]},{"content":"Calculate the width according to the following table.","pos":[120333,120386]},{"content":"Mode","pos":[120390,120394]},{"content":"Width calculation","pos":[120407,120424]},{"content":"-1 Exact","pos":[120610,120618]},{"content":"The exact width in pixels of the controls is used.","pos":[120627,120677]},{"content":"0 Auto","pos":[120720,120726]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[120737,120825]},{"content":"1 Column width","pos":[120830,120844]},{"content":"The layout of the form determines the width of the control.","pos":[120847,120906]},{"content":"The width and width calculation mode can be set separately.","pos":[120939,120998]},{"pos":[121004,121020],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[121022,121084]},{"pos":[121130,121140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121142,121147]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[121150,121224]},{"pos":[121231,121243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[121245,121306]},{"pos":[121313,121320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[121322,121375]},{"content":"Mode","pos":[121379,121383]},{"content":"Width calculation","pos":[121394,121411]},{"content":"Exact","pos":[121595,121600]},{"content":"The exact width in pixels of the controls is used.","pos":[121610,121660]},{"content":"Auto","pos":[121703,121707]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[121718,121806]},{"content":"Column width","pos":[121811,121823]},{"content":"The layout of the form determines the width of the control.","pos":[121826,121885]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[121918,122001]},{"pos":[122007,122024],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[122026,122064]},{"pos":[122111,122121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[122123,122128]},{"content":"An Integer that specifies the width in pixels; optional.","pos":[122131,122187]},{"pos":[122194,122206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[122208,122243]},{"pos":[122250,122257],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[122259,122332]},{"pos":[122338,122354],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[122356,122398]},{"pos":[122433,122454],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[122456,122477]},{"pos":[122517,122534],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[122618,122628],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[122630,122636]},{"content":"e","pos":[122650,122651]},{"pos":[122659,122673],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[122706,122735],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[122853,122863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[122865,122881]},{"content":"objectMethodToCall","pos":[122895,122913]},{"content":"overrideObject","pos":[122927,122941]},{"pos":[122949,122959],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[122961,122994]},{"pos":[123023,123040],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[123042,123112]},{"pos":[123202,123212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[123214,123215]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[123218,123279]},{"content":"y","pos":[123291,123292]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[123295,123356]},{"content":"button","pos":[123368,123374]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[123377,123438]},{"content":"Ctrl","pos":[123450,123454]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[123457,123518]},{"content":"Shift","pos":[123530,123535]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[123538,123599]},{"pos":[123605,123619],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[123700,123710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[123712,123718]},{"content":"e","pos":[123732,123733]},{"pos":[123741,123757],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[123759,123855]},{"pos":[123890,123903],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[123951,123961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[123963,123972]},{"pos":[123980,123994],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[124027,124039],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[124070,124082],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[124084,124138]},{"pos":[124169,124188],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[124274,124284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[124286,124292]},{"content":"e","pos":[124306,124307]},{"pos":[124315,124330],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[124332,124362]},{"pos":[124396,124413],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[124497,124507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[124509,124515]},{"content":"e","pos":[124529,124530]},{"pos":[124538,124554],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[124637,124647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[124649,124655]},{"content":"e","pos":[124669,124670]},{"pos":[124678,124696],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[124698,124769]},{"pos":[124820,124830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[124832,124841]},{"content":"The string value to use to filter data; optional.","pos":[124844,124893]},{"pos":[124899,124910],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[124912,125010]},{"pos":[125096,125106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[125108,125118]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[125121,125206]},{"content":"dragMode","pos":[125218,125226]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[125229,125314]},{"content":"x","pos":[125326,125327]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[125330,125415]},{"content":"y","pos":[125427,125428]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[125431,125516]},{"pos":[125522,125539],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[125541,125595]},{"pos":[125631,125652],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[125654,125723]},{"pos":[125785,125795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[125797,125802]},{"content":"The preferred height of the control.","pos":[125805,125841]},{"content":"height","pos":[125853,125859]},{"content":"The preferred height of the control.","pos":[125862,125898]},{"pos":[125904,125915],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[125945,125960],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[125962,126008]},{"pos":[126042,126060],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[126145,126155],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[126157,126163]},{"content":"e","pos":[126177,126178]},{"pos":[126186,126199],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[126231,126254],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[126256,126297]},{"pos":[126339,126354],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[126436,126446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[126448,126454]},{"content":"e","pos":[126468,126469]},{"pos":[126477,126495],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[126580,126590],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[126592,126598]},{"content":"e","pos":[126612,126613]},{"pos":[126621,126632],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[126634,126686]},{"pos":[126716,126729],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[126731,126831]},{"pos":[126913,126923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[126925,126935]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[126938,127023]},{"content":"dragMode","pos":[127035,127043]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[127046,127131]},{"content":"x","pos":[127143,127144]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[127147,127232]},{"content":"y","pos":[127244,127245]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[127248,127333]},{"pos":[127339,127353],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[127355,127395]},{"pos":[127428,127442],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[127444,127505]},{"pos":[127539,127546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[127548,127676]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[127677,127781]},{"pos":[127786,127811],"content":"Class FormReferenceObject","linkify":"Class FormReferenceObject","nodes":[{"content":"Class FormReferenceObject","pos":[0,25]}]},{"pos":[127870,127877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[127883,127891],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[127897,127904],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[127908,127914]},{"content":"Description","pos":[127984,127995]},{"content":"public int allowAdd(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128404,128438],"source":"public int allowAdd(\\[int value\\])"},{"content":"Sets or returns the value of the allowAdd property for the form data object.","pos":[128480,128556]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[128652,128695],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Indicates whether the user can change the contents of the control.","pos":[128728,128794]},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[128900,128943],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[129148,129189],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Indicates whether to enable or disable the object.","pos":[129224,129274]},{"content":"public Common lookupReference(FormReferenceControl formReferenceControl)","pos":[129396,129468]},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[129644,129687],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the data field is mandatory.","pos":[129720,129795]},{"content":"public Common resolveReference(FormReferenceControl formReferenceControl)","pos":[129892,129965]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[130140,130178],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control that is associated with the data source.","pos":[130216,130383]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[130388,130429],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[130464,130534]},{"pos":[130639,130654],"content":"Method allowAdd","linkify":"Method allowAdd","nodes":[{"content":"Method allowAdd","pos":[0,15]}]},{"content":"Sets or returns the value of the allowAdd property for the form data object.","pos":[130656,130732]},{"pos":[130777,130787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[130789,130794]},{"content":"The value that is assigned to the allowEdit property.","pos":[130797,130850]},{"pos":[130857,130869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormAllowAdd enumeration value that indicates whether the allowAdd property is set to No, Restricted, or Yes.","pos":[130871,130982]},{"pos":[130988,131004],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Indicates whether the user can change the contents of the control.","pos":[131006,131072]},{"pos":[131126,131136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[131138,131143]},{"pos":[131152,131164],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[131166,131218]},{"pos":[131225,131232],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[131234,131356]},{"pos":[131362,131378],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[131432,131442],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[131444,131449]},{"pos":[131458,131470],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[131476,131490],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Indicates whether to enable or disable the object.","pos":[131492,131542]},{"pos":[131594,131604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[131606,131611]},{"pos":[131620,131632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[131634,131682]},{"pos":[131689,131696],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[131698,131777]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[131778,131873]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[131874,132008]},{"pos":[132014,132036],"content":"Method lookupReference","linkify":"Method lookupReference","nodes":[{"content":"Method lookupReference","pos":[0,22]}]},{"pos":[132121,132131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formReferenceControl","pos":[132133,132153]},{"pos":[132162,132174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[132180,132196],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"content":"Sets or returns a value that indicates whether the data field is mandatory.","pos":[132198,132273]},{"pos":[132327,132337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[132339,132344]},{"content":"The value that is assigned to the mandatory property of the field.","pos":[132347,132413]},{"pos":[132420,132432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the field is mandatory; otherwise, false.","pos":[132434,132483]},{"pos":[132489,132512],"content":"Method resolveReference","linkify":"Method resolveReference","nodes":[{"content":"Method resolveReference","pos":[0,23]}]},{"pos":[132598,132608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formReferenceControl","pos":[132610,132630]},{"pos":[132639,132651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[132657,132668],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control that is associated with the data source.","pos":[132670,132837]},{"pos":[132886,132896],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[132898,132903]},{"content":"The value that is assigned to the skip property of the data source that is associated with the control; optional.","pos":[132906,133019]},{"pos":[133026,133038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control associated with the data source; otherwise, false.","pos":[133040,133178]},{"pos":[133185,133192],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[133194,133389]},{"content":"Controls are skipped if the skip value of either the control or the data source is true.","pos":[133390,133478]},{"pos":[133484,133498],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[133500,133570]},{"pos":[133622,133632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[133634,133639]},{"content":"The value that is assigned to the visibility setting for the control.","pos":[133642,133711]},{"pos":[133718,133730],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[133732,133781]},{"content":"The default is true.","pos":[133782,133802]},{"pos":[133809,133816],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls that refer to a data source field are visible only when the visible property is set to true on both the control and the underlying data source field.","pos":[133818,133976]},{"content":"By setting the property on the data source field instead of the control, you make sure that the field is handled consistently throughout the form.","pos":[133977,134123]},{"content":"This makes upgrades easier.","pos":[134124,134151]},{"pos":[134156,134181],"content":"Class FormRichTextControl","linkify":"Class FormRichTextControl","nodes":[{"content":"Class FormRichTextControl","pos":[0,25]}]},{"pos":[134237,134244],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[134250,134258],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[134264,134271],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[134275,134281]},{"content":"Description","pos":[134385,134396]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[134839,134885],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[134949,134989]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[135121,135164],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[135231,135298]},{"content":"public boolean allowSysSetup()","pos":[135403,135433]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[135513,135596]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[135685,135721],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[135967,136016],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[136077,136175]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[136249,136290],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[136359,136408]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[136531,136566],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[136641,136703]},{"content":"public int beginDrag(int x, int y)","pos":[136813,136847]},{"content":"Is called when the user starts to drag a form control.","pos":[136923,136977]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[137095,137125],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[137205,137272]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[137377,137409],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[137487,137543]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[137659,137700],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[137941,137995]},{"content":"Retrieves the size of the control.","pos":[138051,138085]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138223,138261],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[138333,138376]},{"content":"public int charFromPos(int x, int y)","pos":[138505,138541]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138787,138824],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[138897,138942]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[139069,139141],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[139179,139246]},{"content":"public List configurationKeyEx()","pos":[139351,139383]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[139461,139557]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[139633,139677],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[139743,139821]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[139915,139974],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[140197,140240],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public int dataFieldArrayIndex()","pos":[140479,140511]},{"content":"public FieldName dataFieldName()","pos":[140761,140793]},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[141043,141079],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[141325,141367],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[141435,141560]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[141607,141647],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[141717,141782]},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[141889,141924],"source":"public int direction(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[142171,142229],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[142453,142505],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[142735,142779],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[143017,143075],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[143299,143351],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[143581,143625],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[143863,143902],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[143973,144140]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[144145,144179],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[144255,144336]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[144427,144508]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[144537,144631]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[144709,144786]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[144819,144915]},{"content":"public str dragText()","pos":[144991,145012]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[145101,145171]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[145273,145314],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[145383,145434]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[145555,145619],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[145837,145877],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public int find(<ph id=\"ph1\">\\[</ph>str findStr<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int start<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int end<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>int flags<ph id=\"ph8\">\\]</ph>)","pos":[146119,146194],"source":"public int find(\\[str findStr\\], \\[int start\\], \\[int end\\], \\[int flags\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[146401,146431],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[146511,146568]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[146683,146717],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[146793,146850]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[146965,147006],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[147075,147126]},{"content":"public container getCursorPos()","pos":[147247,147278]},{"content":"public int getFirstVisibleLine()","pos":[147529,147561]},{"content":"public str getLine(int lineNo)","pos":[147811,147841]},{"content":"public int getLineCount()","pos":[148093,148118]},{"content":"public container getSelection()","pos":[148375,148406]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[148657,148699],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[148767,148855]},{"content":"public boolean hasUserSetting()","pos":[148939,148970]},{"content":"Indicates whether the control has custom user settings.","pos":[149049,149104]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[149221,149263],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[149331,149370]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[149503,149539],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[149613,149675]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[149785,149822],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[149895,149934]},{"content":"public str helpField()","pos":[150067,150089]},{"content":"Retrieves the Help text for the control.","pos":[150177,150217]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[150349,150383],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[150459,150563]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[150631,150672],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[150741,150804]},{"content":"public int hWnd()","pos":[150913,150930]},{"content":"Retrieves the Windows handle for the control.","pos":[151023,151068]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[151195,151228],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[151477,151505]},{"content":"public boolean isDisplayed()","pos":[151759,151787]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[151869,151935]},{"content":"public boolean isRestricted()","pos":[152041,152070]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[152151,152218]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[152323,152379]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[152433,152534]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[152605,152645],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[152887,152918],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[152997,153034]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[153169,153209],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[153451,153486],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[153733,153776],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[154015,154050],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[154297,154336],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[154579,154625],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[154861,154897],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[155143,155190],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[155425,155466],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[155707,155749],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[155989,156034],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[156271,156355]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[156553,156633]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[156835,156913]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[157117,157156],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[157399,157447],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[157681,157727],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[157963,158003],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[158245,158286],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[158527,158549]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[158809,158849],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[158919,158983]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[159091,159125],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[159201,159262]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[159373,159408],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[159483,159547]},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[159655,159709],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[159937,159985],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[160219,160259],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lineFromChar(int charIndex)","pos":[160501,160539]},{"content":"public int lineIndex(int lineNo)","pos":[160783,160815]},{"content":"public int lineLength(int lineNo)","pos":[161065,161098]},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[161347,161385],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[161629,161672],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[161911,161958],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[162021,162074]},{"content":"public boolean modified()","pos":[162193,162218]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[162475,162554]},{"content":"Is called when the control is double-clicked by the user.","pos":[162585,162642]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[162757,162832]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[162867,162932]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[163039,163114]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[163149,163214]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[163321,163394]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[163431,163503]},{"content":"public boolean multiLine(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[163603,163646],"source":"public boolean multiLine(\\[boolean value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[163885,163915],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[163995,164130]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[164167,164209],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[164449,164488]},{"content":"public FormControl parentControl()","pos":[164731,164765]},{"content":"Retrieves the parent control for the control.","pos":[164841,164886]},{"content":"public container posFromChar(int charIndex)","pos":[165013,165056]},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[165295,165331],"source":"public int promptrect(\\[int value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[165577,165626],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public int replaceText(<ph id=\"ph1\">\\[</ph>str findStr<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>str replaceStr<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int start<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>int end<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>int flags<ph id=\"ph10\">\\]</ph>)","pos":[165859,165961],"source":"public int replaceText(\\[str findStr\\], \\[str replaceStr\\], \\[int start\\], \\[int end\\], \\[int flags\\])"},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[166141,166183],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[166423,166459],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[166705,166762],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[166815,166874]},{"content":"public int showContextMenu(int menuHandle)","pos":[166987,167029]},{"content":"Shows the shortcut menu for the control.","pos":[167097,167137]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[167269,167312],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[167551,167589],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[167661,167788]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[167833,167877],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[168115,168146],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[168397,168427],"source":"public str text(\\[str value\\])"},{"content":"public str toolTip()","pos":[168679,168699]},{"content":"Retrieves the tooltip text for the control.","pos":[168789,168832]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[168961,169000],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[169071,169133]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169243,169276],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[169353,169412]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169525,169559],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[169635,169697]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169807,169837],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[170089,170132],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[170371,170422]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[170653,170687],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[170763,170806]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[170935,170973],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[171045,171093]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[171217,171256],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[171327,171386]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[171499,171536],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[171609,171692]},{"content":"public int userFastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[171781,171825],"source":"public int userFastTabSummary(\\[int value\\])"},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[172063,172099],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[172173,172225]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[172345,172379],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[172455,172537]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[172627,172669],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[172737,172793]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[172909,172949],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[173019,173073]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[173191,173231],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[173301,173350]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[173473,173516],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[173583,173636]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[173755,173789],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[173865,174013]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[174037,174072],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[174147,174224]},{"content":"public boolean validate()","pos":[174319,174344]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[174601,174661],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[174711,174772]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[174883,174937],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[174993,175052]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[175165,175211],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[175275,175336]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[175447,175485],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[175729,175770],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[175839,175909]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[176011,176052],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[176121,176159]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[176293,176328],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[176403,176465]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[176575,176611],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[176685,176723]},{"content":"public void lookup()","pos":[176857,176877]},{"content":"public void prefColumnSize(int width, int height)","pos":[177139,177188]},{"content":"Specifies the preferred column width and height for the form control.","pos":[177249,177318]},{"content":"public void endDrag()","pos":[177421,177442]},{"content":"Is called when the user has finished dragging a form control.","pos":[177531,177592]},{"content":"public void performFormLookup(xFormRun form)","pos":[177703,177747]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[177985,178058]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[178095,178193]},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[178267,178340],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void paste()","pos":[178549,178568]},{"content":"Pastes the contents of the clipboard into the control.","pos":[178659,178713]},{"content":"public void scrollCursor()","pos":[178831,178857]},{"content":"public void undo()","pos":[179113,179131]},{"content":"public void mouseLeave()","pos":[179395,179419]},{"content":"Indicates that the mouse pointer has left the control.","pos":[179505,179559]},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[179677,179752],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[179959,180028]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[180069,180169]},{"content":"public void setSelection(int charIndexFrom, int charIndexTo)","pos":[180241,180301]},{"content":"public void pasteText(str pasteStr, <ph id=\"ph1\">\\[</ph>boolean InsertSel<ph id=\"ph2\">\\]</ph>)","pos":[180523,180581],"source":"public void pasteText(str pasteStr, \\[boolean InsertSel\\])"},{"content":"public void context()","pos":[180805,180826]},{"content":"Shows the shortcut menu for the control.","pos":[180915,180955]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[181087,181159],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[181369,181406],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void enter()","pos":[181651,181670]},{"content":"public void displayControl()","pos":[181933,181961]},{"content":"Displays the control.","pos":[182043,182064]},{"content":"public void performTypeLookup(<ph id=\"ph1\">\\[</ph>int userType<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[182215,182314],"source":"public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])"},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[182497,182574],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setCursorPos(int x, int y)","pos":[182779,182817]},{"content":"public void copy()","pos":[183061,183079]},{"content":"Copies the contents of the control to the clipboard.","pos":[183171,183223]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[183343,183417],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dragLeave()","pos":[183625,183648]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[183735,183831]},{"content":"public void lineScroll(int dx, int dy)","pos":[183907,183945]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[184189,184264],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void performDBLookup(<ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>TableId tableId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[184471,184572],"source":"public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])"},{"content":"public void cut()","pos":[184753,184770]},{"content":"Cuts the contents of the control.","pos":[184863,184896]},{"content":"public void lostFocus()","pos":[185035,185058]},{"content":"Indicates that the control has lost focus.","pos":[185145,185187]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[185317,185424],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void textChange()","pos":[185599,185623]},{"content":"public void resetUserSetting()","pos":[185881,185911]},{"content":"Resets the user settings for the control.","pos":[185991,186032]},{"content":"public void inputSearch(str searchStr)","pos":[186163,186201]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[186273,186344]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[186445,186521],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[186727,186804]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[186837,186907]},{"content":"public void gotFocus()","pos":[187009,187031]},{"content":"Indicates that the control has received focus.","pos":[187119,187165]},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[187291,187367],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setFocus()","pos":[187573,187595]},{"content":"Sets the focus on the control.","pos":[187683,187713]},{"content":"public void jumpRef()","pos":[187855,187876]},{"pos":[188140,188159],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[188161,188201]},{"pos":[188258,188268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188270,188275]},{"pos":[188284,188296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[188298,188354]},{"pos":[188361,188368],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[188370,188449]},{"pos":[188455,188471],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[188473,188540]},{"pos":[188594,188604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188606,188611]},{"pos":[188620,188632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[188634,188686]},{"pos":[188693,188700],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[188702,188828]},{"pos":[188834,188854],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[188856,188939]},{"pos":[188982,188994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[188996,189064]},{"pos":[189070,189087],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[189134,189144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189146,189151]},{"pos":[189160,189172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189178,189200],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[189202,189300]},{"pos":[189360,189370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189372,189377]},{"pos":[189386,189398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[189400,189479]},{"pos":[189486,189493],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[189495,189532]},{"pos":[189538,189560],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[189562,189611]},{"pos":[189663,189673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189675,189680]},{"pos":[189689,189701],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[189703,189747]},{"pos":[189754,189761],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[189763,189831]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[189837,189907]},{"content":"The second byte contains a value for green.","pos":[189912,189955]},{"content":"The third byte contains a value for blue.","pos":[189960,190001]},{"content":"The high-order byte must be zero.","pos":[190006,190039]},{"content":"The maximum value for a single byte is 255.","pos":[190044,190087]},{"pos":[190093,190109],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[190111,190173]},{"pos":[190219,190229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190231,190236]},{"pos":[190245,190257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[190259,190320]},{"pos":[190326,190342],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[190344,190398]},{"pos":[190445,190455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[190457,190458]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[190461,190531]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[190532,190599]},{"content":"y","pos":[190611,190612]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[190615,190685]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[190686,190753]},{"pos":[190760,190772],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[190774,190813]},{"pos":[190820,190827],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[190829,190910]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[190911,191015]},{"pos":[191021,191032],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[191034,191101]},{"pos":[191142,191152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191154,191159]},{"pos":[191168,191180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[191182,191232]},{"pos":[191239,191246],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[191248,191320]},{"content":"0 Use the default font weight.","pos":[191326,191356]},{"content":"1 Thin.","pos":[191361,191368]},{"content":"2 Extra-light.","pos":[191373,191387]},{"content":"3 Light.","pos":[191392,191400]},{"content":"4 Normal.","pos":[191405,191414]},{"content":"5 Medium.","pos":[191419,191428]},{"content":"6 Semibold.","pos":[191433,191444]},{"content":"7 Bold.","pos":[191449,191456]},{"content":"8 Extra-bold.","pos":[191461,191474]},{"content":"9 Heavy.","pos":[191479,191487]},{"pos":[191493,191506],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[191508,191564]},{"pos":[191607,191617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191619,191624]},{"pos":[191633,191645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[191647,191691]},{"pos":[191698,191705],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows.","pos":[191707,191799]},{"content":"Value","pos":[191803,191808]},{"content":"Description","pos":[191811,191822]},{"content":"0","pos":[191851,191852]},{"content":"Auto","pos":[191859,191863]},{"content":"1","pos":[191875,191876]},{"content":"3D","pos":[191883,191885]},{"content":"2","pos":[191899,191900]},{"content":"Single line","pos":[191907,191918]},{"content":"3","pos":[191923,191924]},{"content":"Flat","pos":[191931,191935]},{"content":"4","pos":[191947,191948]},{"content":"None","pos":[191955,191959]},{"pos":[191974,191996],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[192048,192058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192060,192065]},{"pos":[192074,192086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192092,192114],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[192116,192150]},{"pos":[192217,192227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[192229,192234]},{"content":"The number of lines to use to determine the height.","pos":[192237,192288]},{"content":"lines","pos":[192300,192305]},{"content":"The number of lines to use to determine the height.","pos":[192308,192359]},{"pos":[192366,192378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[192380,192426]},{"pos":[192432,192451],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[192453,192496]},{"pos":[192545,192555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192557,192562]},{"pos":[192571,192583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[192585,192647]},{"pos":[192654,192661],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table.","pos":[192663,192767]},{"content":"Value","pos":[192771,192776]},{"content":"Description","pos":[192779,192790]},{"content":"0","pos":[192837,192838]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192845,192858],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[192870,192871]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192878,192894],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[192903,192904]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192911,192926],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[192936,192938]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192944,192956],"source":"MAC\\_CHARSET"},{"content":"128","pos":[192969,192972]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[192977,192994],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[193002,193005]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193010,193025],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[193035,193038]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193043,193058],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[193068,193071]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193076,193096],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[193101,193104]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193109,193123],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[193134,193137]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193142,193158],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[193167,193170]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193175,193194],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[193200,193203]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193208,193223],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[193233,193236]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193241,193257],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[193266,193269]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193274,193293],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[193299,193302]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193307,193319],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[193331,193419]},{"content":"Value","pos":[193423,193428]},{"content":"Description","pos":[193431,193442]},{"content":"130","pos":[193477,193480]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193485,193499],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[193503,193589]},{"content":"Value","pos":[193593,193598]},{"content":"Description","pos":[193601,193612]},{"content":"177","pos":[193649,193652]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193657,193672],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[193677,193680]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193685,193700],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[193704,193781]},{"content":"Value","pos":[193785,193790]},{"content":"Description","pos":[193793,193804]},{"content":"222","pos":[193837,193840]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[193845,193858],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[193862,193941]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[193942,194033],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[194034,194148]},{"pos":[194154,194172],"content":"Method charFromPos","linkify":"Method charFromPos","nodes":[{"content":"Method charFromPos","pos":[0,18]}]},{"pos":[194221,194231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[194233,194234]},{"content":"y","pos":[194248,194249]},{"pos":[194258,194270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194276,194294],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[194296,194341]},{"pos":[194389,194399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194401,194406]},{"pos":[194415,194427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[194429,194472]},{"pos":[194479,194486],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[194488,194549]},{"content":"Value","pos":[194553,194558]},{"content":"Style","pos":[194561,194566]},{"content":"0","pos":[194621,194622]},{"content":"Default","pos":[194629,194636]},{"content":"1","pos":[194655,194656]},{"content":"The Windows palette","pos":[194663,194682]},{"content":"2","pos":[194689,194690]},{"content":"The true-color scheme","pos":[194697,194718]},{"pos":[194726,194749],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[194751,194818]},{"pos":[194901,194911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194913,194918]},{"pos":[194927,194939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[194941,195013]},{"pos":[195020,195027],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[195029,195110]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[195111,195204]},{"pos":[195210,195235],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[195237,195333]},{"pos":[195378,195390],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[195392,195478]},{"pos":[195485,195492],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[195494,195543]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[195544,195692]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[195693,195827]},{"pos":[195833,195858],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[195860,195938]},{"pos":[195993,196003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196005,196010]},{"content":"The string that contains the country/region codes to set; optional.","pos":[196013,196080]},{"pos":[196087,196099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[196101,196166]},{"pos":[196172,196204],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[196274,196284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196286,196291]},{"pos":[196300,196312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196318,196334],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[196388,196398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196400,196405]},{"pos":[196414,196426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196432,196458],"content":"Method dataFieldArrayIndex","linkify":"Method dataFieldArrayIndex","nodes":[{"content":"Method dataFieldArrayIndex","pos":[0,26]}]},{"pos":[196503,196515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196521,196541],"content":"Method dataFieldName","linkify":"Method dataFieldName","nodes":[{"content":"Method dataFieldName","pos":[0,20]}]},{"pos":[196586,196598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196604,196621],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[196668,196678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196680,196685]},{"pos":[196694,196706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196712,196735],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[196737,196862]},{"pos":[196915,196925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196927,196932]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[196935,197009]},{"pos":[197016,197028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[197030,197142]},{"pos":[197149,197156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[197158,197285]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[197286,197379]},{"pos":[197385,197402],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[197404,197469]},{"pos":[197520,197530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[197532,197537]},{"pos":[197546,197558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[197560,197605]},{"pos":[197611,197627],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[197673,197683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[197685,197690]},{"pos":[197699,197711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197717,197737],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[197804,197814],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[197816,197821]},{"content":"mode","pos":[197835,197839]},{"pos":[197848,197860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197866,197890],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[197953,197963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[197965,197969]},{"pos":[197978,197990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[197996,198021],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[198076,198086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[198088,198093]},{"pos":[198102,198114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[198120,198140],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[198207,198217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[198219,198224]},{"content":"mode","pos":[198238,198242]},{"pos":[198251,198263],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[198269,198293],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[198356,198366],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[198368,198372]},{"pos":[198381,198393],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[198399,198424],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[198479,198489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[198491,198496]},{"pos":[198505,198517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[198523,198543],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[198545,198712]},{"pos":[198762,198772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[198774,198779]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[198782,198856]},{"pos":[198863,198875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[198877,199005]},{"pos":[199011,199026],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[199028,199109]},{"pos":[199154,199164],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199166,199171]},{"pos":[199180,199192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[199194,199254]},{"pos":[199260,199275],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[199277,199371]},{"pos":[199465,199475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[199477,199487]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[199490,199575]},{"content":"dragMode","pos":[199587,199595]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[199598,199683]},{"content":"x","pos":[199695,199696]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[199699,199784]},{"content":"y","pos":[199796,199797]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[199800,199885]},{"pos":[199892,199904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[199906,199971]},{"pos":[199977,199994],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[199996,200092]},{"pos":[200182,200192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[200194,200204]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[200207,200292]},{"content":"dragMode","pos":[200304,200312]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[200315,200400]},{"content":"x","pos":[200412,200413]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[200416,200501]},{"content":"y","pos":[200513,200514]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[200517,200602]},{"pos":[200609,200621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[200623,200688]},{"pos":[200694,200709],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[200711,200781]},{"pos":[200815,200827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[200829,200960]},{"pos":[200966,200980],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[200982,201033]},{"pos":[201085,201095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201097,201102]},{"pos":[201111,201123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[201125,201173]},{"pos":[201180,201187],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[201189,201264]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[201265,201360]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[201361,201495]},{"pos":[201501,201524],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[201599,201609],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201611,201616]},{"pos":[201625,201637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201643,201664],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[201715,201725],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201727,201732]},{"pos":[201741,201753],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201759,201770],"content":"Method find","linkify":"Method find","nodes":[{"content":"Method find","pos":[0,11]}]},{"pos":[201850,201860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"findStr","pos":[201862,201869]},{"content":"start","pos":[201883,201888]},{"content":"end","pos":[201902,201905]},{"content":"flags","pos":[201919,201924]},{"pos":[201933,201945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201951,201962],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[201964,202021]},{"pos":[202062,202072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202074,202079]},{"pos":[202088,202100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[202102,202157]},{"pos":[202163,202178],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[202180,202237]},{"pos":[202282,202292],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202294,202299]},{"pos":[202308,202320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[202322,202355]},{"pos":[202361,202383],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[202385,202436]},{"pos":[202488,202498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202500,202505]},{"pos":[202514,202526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[202528,202572]},{"pos":[202579,202586],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[202588,202656]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[202662,202732]},{"content":"The second byte contains a value for green.","pos":[202737,202780]},{"content":"The third byte contains a value for blue.","pos":[202785,202826]},{"content":"The high-order byte must be zero.","pos":[202831,202864]},{"content":"The maximum value for a single byte is 255.","pos":[202869,202912]},{"pos":[202918,202937],"content":"Method getCursorPos","linkify":"Method getCursorPos","nodes":[{"content":"Method getCursorPos","pos":[0,19]}]},{"pos":[202981,202993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202999,203025],"content":"Method getFirstVisibleLine","linkify":"Method getFirstVisibleLine","nodes":[{"content":"Method getFirstVisibleLine","pos":[0,26]}]},{"pos":[203070,203082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203088,203102],"content":"Method getLine","linkify":"Method getLine","nodes":[{"content":"Method getLine","pos":[0,14]}]},{"pos":[203145,203155],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[203157,203163]},{"pos":[203172,203184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203190,203209],"content":"Method getLineCount","linkify":"Method getLineCount","nodes":[{"content":"Method getLineCount","pos":[0,19]}]},{"pos":[203247,203259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203265,203284],"content":"Method getSelection","linkify":"Method getSelection","nodes":[{"content":"Method getSelection","pos":[0,19]}]},{"pos":[203328,203340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203346,203363],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[203365,203453]},{"pos":[203506,203516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[203518,203521]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[203524,203594]},{"pos":[203601,203613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[203615,203682]},{"pos":[203688,203709],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[203711,203766]},{"pos":[203810,203822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[203824,203887]},{"pos":[203893,203906],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[203908,203947]},{"pos":[204000,204010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204012,204017]},{"content":"mode","pos":[204031,204035]},{"pos":[204044,204056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[204058,204094]},{"pos":[204101,204108],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[204110,204163]},{"content":"Calculate the height according to the following table.","pos":[204164,204218]},{"content":"Mode","pos":[204222,204226]},{"content":"Height calculation","pos":[204240,204258]},{"content":"-1 Exact","pos":[204446,204454]},{"content":"The exact height in pixels of the controls is used.","pos":[204464,204515]},{"content":"0 Auto","pos":[204558,204564]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[204576,204665]},{"content":"1 Column height","pos":[204670,204685]},{"content":"The layout of the form determines the height of the control.","pos":[204688,204748]},{"content":"The height and height calculation mode can be set separately.","pos":[204781,204842]},{"pos":[204848,204865],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[204867,204929]},{"pos":[204976,204986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204988,204993]},{"pos":[205002,205014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[205016,205037]},{"pos":[205044,205051],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[205053,205107]},{"content":"Mode.","pos":[205111,205116]},{"content":"Height calculation","pos":[205127,205145]},{"content":"Exact","pos":[205331,205336]},{"content":"The exact height in pixels of the controls is used.","pos":[205347,205398]},{"content":"Auto","pos":[205441,205445]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[205457,205546]},{"content":"Column height","pos":[205551,205564]},{"content":"The layout of the form determines the height of the control.","pos":[205567,205627]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[205660,205745]},{"pos":[205751,205769],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[205771,205810]},{"pos":[205858,205868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205870,205875]},{"pos":[205884,205896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[205898,205919]},{"pos":[205926,205933],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[205935,206025]},{"pos":[206031,206047],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[206049,206089]},{"pos":[206124,206136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[206138,206226]},{"pos":[206233,206240],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[206242,206312]},{"content":"Use the helpText method to set the value of the Help text.","pos":[206313,206371]},{"pos":[206377,206392],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[206394,206498]},{"pos":[206543,206553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206555,206560]},{"pos":[206569,206581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[206583,206638]},{"pos":[206645,206652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[206654,206722]},{"content":"The Help text must not exceed 250 characters.","pos":[206723,206768]},{"pos":[206774,206796],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[206798,206861]},{"pos":[206913,206923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206925,206930]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[206933,207000]},{"pos":[207007,207019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[207021,207071]},{"pos":[207077,207088],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[207090,207135]},{"pos":[207165,207177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[207179,207206]},{"pos":[207213,207220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[207222,207266]},{"pos":[207272,207286],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[207330,207340],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207342,207347]},{"pos":[207356,207368],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207374,207392],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[207433,207445],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207451,207469],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[207471,207537]},{"pos":[207578,207590],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[207592,207643]},{"pos":[207650,207657],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[207659,207727]},{"pos":[207733,207752],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[207754,207821]},{"pos":[207863,207875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[207877,207929]},{"pos":[207935,207960],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[207962,208063]},{"pos":[208132,208142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[208144,208161]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[208164,208292]},{"pos":[208299,208311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[208313,208472]},{"pos":[208479,208486],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[208488,208565]},{"content":"FormAllowUserSetup::No 0","pos":[208905,208929]},{"content":"No changes can be made to the control.","pos":[208940,208978]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[208979,209068]},{"content":"FormAllowUserSetup::Restricted 1","pos":[209073,209105]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[209108,209200]},{"content":"The user cannot move the control.","pos":[209201,209234]},{"content":"FormAllowUserSetup::Yes 2","pos":[209241,209266]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[209276,209368]},{"content":"The user can also move the control.","pos":[209369,209404]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[209408,209597]},{"pos":[209603,209616],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[209667,209677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209679,209684]},{"pos":[209693,209705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[209711,209723],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[209725,209762]},{"pos":[209804,209814],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209816,209821]},{"pos":[209830,209842],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[209844,209882]},{"pos":[209889,209896],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[209898,209976]},{"content":"The label property value cannot exceed 250 characters.","pos":[209977,210031]},{"pos":[210037,210058],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[210109,210119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210121,210126]},{"pos":[210135,210147],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210153,210169],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[210215,210225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210227,210232]},{"pos":[210241,210253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210259,210283],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[210337,210347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210349,210354]},{"pos":[210363,210375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210381,210397],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[210443,210453],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210455,210460]},{"pos":[210469,210481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210487,210507],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[210557,210567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210569,210574]},{"pos":[210583,210595],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210601,210628],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[210685,210695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210697,210702]},{"pos":[210711,210723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210729,210746],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[210793,210803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210805,210810]},{"pos":[210819,210831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210837,210855],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[210913,210923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210925,210930]},{"content":"mode","pos":[210944,210948]},{"pos":[210957,210969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[210975,210997],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[211049,211059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211061,211066]},{"pos":[211075,211087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[211093,211116],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[211169,211179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211181,211186]},{"pos":[211195,211207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[211213,211231],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[211287,211297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211299,211304]},{"pos":[211313,211325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[211331,211356],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[211453,211463],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[211465,211466]},{"content":"y","pos":[211480,211481]},{"content":"button","pos":[211495,211501]},{"content":"Ctrl","pos":[211515,211519]},{"content":"Shift","pos":[211533,211538]},{"pos":[211547,211559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[211565,211586],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[211679,211689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[211691,211692]},{"content":"y","pos":[211706,211707]},{"content":"button","pos":[211721,211727]},{"content":"Ctrl","pos":[211741,211745]},{"content":"Shift","pos":[211759,211764]},{"pos":[211773,211785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[211791,211810],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[211901,211911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[211913,211914]},{"content":"y","pos":[211928,211929]},{"content":"button","pos":[211943,211949]},{"content":"Ctrl","pos":[211963,211967]},{"content":"Shift","pos":[211981,211986]},{"pos":[211995,212007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212013,212033],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[212083,212093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212095,212100]},{"pos":[212109,212121],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212127,212148],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[212207,212217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212219,212224]},{"pos":[212233,212245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212251,212268],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[212325,212335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212337,212342]},{"content":"mode","pos":[212356,212360]},{"pos":[212369,212381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212387,212408],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[212459,212469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212471,212476]},{"pos":[212485,212497],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212503,212525],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[212577,212587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212589,212594]},{"pos":[212603,212615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212621,212633],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[212668,212680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[212686,212697],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[212699,212763]},{"pos":[212814,212824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[212826,212831]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[212834,212920]},{"content":"mode","pos":[212932,212936]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[212939,213025]},{"pos":[213032,213044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[213046,213097]},{"pos":[213103,213118],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[213120,213181]},{"pos":[213226,213236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[213238,213243]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[213246,213332]},{"pos":[213339,213351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[213353,213409]},{"pos":[213415,213431],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[213433,213497]},{"pos":[213543,213553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[213555,213560]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[213563,213644]},{"pos":[213651,213663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[213665,213716]},{"pos":[213722,213738],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[213801,213811],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[213813,213818]},{"content":"mode","pos":[213832,213836]},{"pos":[213845,213857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[213863,213883],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[213942,213952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[213954,213958]},{"pos":[213967,213979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[213985,214006],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[214057,214067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214069,214074]},{"pos":[214083,214095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[214101,214120],"content":"Method lineFromChar","linkify":"Method lineFromChar","nodes":[{"content":"Method lineFromChar","pos":[0,19]}]},{"pos":[214171,214181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[214183,214192]},{"pos":[214201,214213],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[214219,214235],"content":"Method lineIndex","linkify":"Method lineIndex","nodes":[{"content":"Method lineIndex","pos":[0,16]}]},{"pos":[214280,214290],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[214292,214298]},{"pos":[214307,214319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[214325,214342],"content":"Method lineLength","linkify":"Method lineLength","nodes":[{"content":"Method lineLength","pos":[0,17]}]},{"pos":[214388,214398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[214400,214406]},{"pos":[214415,214427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[214433,214452],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[214501,214511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214513,214518]},{"pos":[214527,214539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[214545,214561],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[214615,214625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214627,214632]},{"pos":[214641,214653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[214659,214679],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[214681,214734]},{"pos":[214792,214802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214804,214809]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[214812,214906]},{"pos":[214913,214925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[214927,215000]},{"pos":[215006,215021],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[215059,215071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[215077,215097],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[215099,215156]},{"pos":[215248,215258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[215260,215261]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[215264,215325]},{"content":"y","pos":[215337,215338]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[215341,215402]},{"content":"button","pos":[215414,215420]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[215423,215484]},{"content":"Ctrl","pos":[215496,215500]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[215503,215564]},{"content":"Shift","pos":[215576,215581]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[215584,215645]},{"pos":[215652,215664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[215666,215705]},{"pos":[215712,215719],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[215721,215825]},{"pos":[215831,215847],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[215849,215914]},{"pos":[216002,216012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[216014,216015]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[216018,216079]},{"content":"y","pos":[216091,216092]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[216095,216156]},{"content":"button","pos":[216168,216174]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[216177,216238]},{"content":"Ctrl","pos":[216250,216254]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[216257,216318]},{"content":"Shift","pos":[216330,216335]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[216338,216399]},{"pos":[216406,216418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[216420,216459]},{"pos":[216466,216473],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[216475,216579]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[216580,216715]},{"pos":[216721,216737],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[216739,216804]},{"pos":[216892,216902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[216904,216905]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[216908,216969]},{"content":"y","pos":[216981,216982]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[216985,217046]},{"content":"button","pos":[217058,217064]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[217067,217128]},{"content":"Ctrl","pos":[217140,217144]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[217147,217208]},{"content":"Shift","pos":[217220,217225]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[217228,217289]},{"pos":[217296,217308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[217310,217349]},{"pos":[217356,217363],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[217365,217469]},{"pos":[217475,217489],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[217491,217563]},{"pos":[217649,217659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[217661,217662]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[217665,217726]},{"content":"y","pos":[217738,217739]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[217742,217803]},{"content":"button","pos":[217815,217821]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[217824,217885]},{"content":"Ctrl","pos":[217897,217901]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[217904,217965]},{"content":"Shift","pos":[217977,217982]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[217985,218046]},{"pos":[218053,218065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[218067,218106]},{"pos":[218113,218120],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[218122,218226]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[218227,218362]},{"pos":[218368,218384],"content":"Method multiLine","linkify":"Method multiLine","nodes":[{"content":"Method multiLine","pos":[0,16]}]},{"pos":[218438,218448],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[218450,218455]},{"pos":[218464,218476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[218482,218493],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[218495,218630]},{"pos":[218671,218681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[218683,218688]},{"pos":[218697,218709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[218711,218775]},{"pos":[218782,218789],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[218791,218885]},{"content":"It must start with a letter.","pos":[218891,218919]},{"content":"It cannot exceed 250 characters.","pos":[218924,218956]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[218961,219015],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[219020,219060]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[219065,219175]},{"pos":[219181,219204],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[219257,219267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[219269,219274]},{"pos":[219283,219295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[219301,219328],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[219380,219392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[219398,219418],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[219420,219465]},{"pos":[219512,219524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[219526,219561]},{"pos":[219567,219585],"content":"Method posFromChar","linkify":"Method posFromChar","nodes":[{"content":"Method posFromChar","pos":[0,18]}]},{"pos":[219641,219651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[219653,219662]},{"pos":[219671,219683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[219689,219706],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[219753,219763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[219765,219770]},{"pos":[219779,219791],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[219797,219819],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[219879,219889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[219891,219896]},{"pos":[219905,219917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[219923,219941],"content":"Method replaceText","linkify":"Method replaceText","nodes":[{"content":"Method replaceText","pos":[0,18]}]},{"pos":[220046,220056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"findStr","pos":[220058,220065]},{"content":"replaceStr","pos":[220079,220089]},{"content":"start","pos":[220103,220108]},{"content":"end","pos":[220122,220125]},{"content":"flags","pos":[220139,220144]},{"pos":[220153,220165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[220171,220194],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[220247,220257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220259,220264]},{"pos":[220273,220285],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[220291,220308],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[220355,220365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220367,220372]},{"pos":[220381,220393],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[220399,220417],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[220419,220478]},{"pos":[220546,220556],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220558,220563]},{"content":"The ID of the security key to assign to the control; optional.","pos":[220566,220628]},{"pos":[220635,220647],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[220649,220748]},{"pos":[220754,220776],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[220778,220818]},{"pos":[220873,220883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[220885,220895]},{"content":"The ID of the menu to show.","pos":[220898,220925]},{"pos":[220932,220944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[220946,221005]},{"pos":[221011,221027],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[221081,221091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221093,221098]},{"pos":[221107,221119],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221125,221136],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[221138,221265]},{"pos":[221314,221324],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221326,221331]},{"content":"The value to assign to the skip property of the control; optional.","pos":[221334,221400]},{"pos":[221407,221419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[221421,221527]},{"pos":[221534,221541],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[221543,221738]},{"pos":[221744,221755],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[221810,221820],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[221822,221835]},{"pos":[221844,221856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221862,221874],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[221916,221926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221928,221933]},{"pos":[221942,221954],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221960,221971],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[222012,222022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222024,222029]},{"pos":[222038,222050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[222056,222070],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[222072,222115]},{"pos":[222148,222160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[222162,222264]},{"pos":[222271,222278],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[222280,222352]},{"pos":[222358,222368],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[222370,222432]},{"pos":[222482,222492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222494,222499]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[222502,222586]},{"content":"mode","pos":[222598,222602]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[222605,222689]},{"pos":[222696,222708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[222710,222759]},{"pos":[222765,222779],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[222781,222840]},{"pos":[222884,222894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222896,222901]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[222904,222988]},{"pos":[222995,223007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[223009,223063]},{"pos":[223069,223084],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[223086,223148]},{"pos":[223193,223203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223205,223210]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[223213,223292]},{"pos":[223299,223311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[223313,223362]},{"pos":[223368,223379],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[223420,223430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223432,223437]},{"pos":[223446,223458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223464,223480],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[223534,223544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223546,223551]},{"pos":[223560,223572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223578,223605],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[223669,223679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[223681,223685]},{"pos":[223694,223706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223712,223727],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[223729,223772]},{"pos":[223817,223827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223829,223834]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[223837,223909]},{"pos":[223916,223928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[223930,223960]},{"pos":[223966,223985],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[223987,224035]},{"pos":[224084,224094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224096,224101]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[224104,224181]},{"pos":[224188,224200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[224202,224237]},{"pos":[224243,224263],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[224265,224324]},{"pos":[224374,224384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224386,224391]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[224394,224482]},{"pos":[224489,224501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[224503,224549]},{"pos":[224555,224573],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[224575,224658]},{"pos":[224706,224716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224718,224723]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[224726,224806]},{"pos":[224813,224825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[224827,224883]},{"pos":[224889,224914],"content":"Method userFastTabSummary","linkify":"Method userFastTabSummary","nodes":[{"content":"Method userFastTabSummary","pos":[0,25]}]},{"pos":[224969,224979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224981,224986]},{"pos":[224995,225007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225013,225030],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[225032,225084]},{"pos":[225131,225141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225143,225148]},{"content":"The user height for the control; optional.","pos":[225151,225193]},{"pos":[225200,225212],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[225214,225253]},{"pos":[225259,225274],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[225276,225358]},{"pos":[225403,225413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225415,225420]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[225423,225502]},{"pos":[225509,225521],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[225523,225578]},{"pos":[225585,225592],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[225594,225764]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[225765,225840]},{"content":"This method lets you programmatically determine and set the value.","pos":[225841,225907]},{"pos":[225913,225936],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[225938,225994]},{"pos":[226047,226057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226059,226064]},{"content":"The organization container to set for the control; optional.","pos":[226067,226127]},{"pos":[226134,226146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[226148,226191]},{"pos":[226197,226218],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[226220,226274]},{"pos":[226325,226335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226337,226342]},{"content":"The organization sibling to set for the control; optional.","pos":[226345,226403]},{"pos":[226410,226422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[226424,226465]},{"pos":[226471,226492],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[226494,226543]},{"pos":[226594,226604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226606,226611]},{"content":"The user label text to set for the control; optional.","pos":[226614,226667]},{"pos":[226674,226686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[226688,226724]},{"pos":[226730,226754],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[226756,226809]},{"pos":[226863,226873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226875,226880]},{"content":"The user security level to set for the control; optional.","pos":[226883,226940]},{"pos":[226947,226959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[226961,227001]},{"pos":[227007,227022],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[227024,227172]},{"pos":[227217,227227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227229,227234]},{"content":"The value to assign to the userSkip property; optional.","pos":[227237,227292]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[227293,227388]},{"pos":[227395,227407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[227409,227478]},{"pos":[227484,227500],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[227502,227579]},{"pos":[227625,227635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227637,227642]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[227645,227711]},{"pos":[227718,227730],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[227732,227861]},{"pos":[227868,227875],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[227877,227971]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[227972,228088],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[228089,228239]},{"pos":[228245,228260],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[228298,228310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[228316,228338],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[228340,228401]},{"pos":[228470,228480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[228482,228487]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[228490,228567]},{"content":"mode","pos":[228579,228583]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[228586,228663]},{"pos":[228670,228682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[228684,228732]},{"pos":[228738,228764],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[228766,228825]},{"pos":[228890,228900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[228902,228906]},{"pos":[228915,228927],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[228929,228983]},{"pos":[228989,229016],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[229018,229079]},{"pos":[229136,229146],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229148,229153]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[229156,229234]},{"pos":[229241,229253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[229255,229303]},{"pos":[229309,229328],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[229377,229387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229389,229394]},{"pos":[229403,229415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229421,229435],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[229437,229507]},{"pos":[229559,229569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229571,229576]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[229579,229651]},{"pos":[229658,229670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[229672,229721]},{"pos":[229727,229739],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[229741,229779]},{"pos":[229831,229841],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229843,229848]},{"content":"mode","pos":[229862,229866]},{"pos":[229875,229887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[229889,229924]},{"pos":[229931,229938],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[229940,229993]},{"content":"Calculate the width according to the following table.","pos":[229994,230047]},{"content":"Mode","pos":[230051,230055]},{"content":"Width calculation","pos":[230068,230085]},{"content":"-1 Exact","pos":[230271,230279]},{"content":"The exact width in pixels of the controls is used.","pos":[230288,230338]},{"content":"0 Auto","pos":[230381,230387]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[230398,230486]},{"content":"1 Column width","pos":[230491,230505]},{"content":"The layout of the form determines the width of the control.","pos":[230508,230567]},{"content":"The width and width calculation mode can be set separately.","pos":[230600,230659]},{"pos":[230665,230681],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[230683,230745]},{"pos":[230791,230801],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[230803,230808]},{"pos":[230817,230829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[230831,230892]},{"pos":[230899,230906],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[230908,230961]},{"content":"Mode","pos":[230965,230969]},{"content":"Width calculation","pos":[230980,230997]},{"content":"Exact","pos":[231181,231186]},{"content":"The exact width in pixels of the controls is used.","pos":[231196,231246]},{"content":"Auto","pos":[231289,231293]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[231304,231392]},{"content":"Column width","pos":[231397,231409]},{"content":"The layout of the form determines the width of the control.","pos":[231412,231471]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[231504,231587]},{"pos":[231593,231610],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[231612,231650]},{"pos":[231697,231707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[231709,231714]},{"pos":[231723,231735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[231737,231772]},{"pos":[231779,231786],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[231788,231861]},{"pos":[231867,231880],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[231912,231933],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[231935,232004]},{"pos":[232066,232076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[232078,232083]},{"content":"The preferred height of the control.","pos":[232086,232122]},{"content":"height","pos":[232134,232140]},{"content":"The preferred height of the control.","pos":[232143,232179]},{"pos":[232185,232199],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[232201,232262]},{"pos":[232296,232303],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[232305,232433]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[232434,232538]},{"pos":[232544,232568],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[232625,232635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[232637,232641]},{"pos":[232649,232660],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[232662,232760]},{"pos":[232846,232856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[232858,232868]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[232871,232956]},{"content":"dragMode","pos":[232968,232976]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[232979,233064]},{"content":"x","pos":[233076,233077]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[233080,233165]},{"content":"y","pos":[233177,233178]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[233181,233266]},{"pos":[233272,233287],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[233369,233379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[233381,233387]},{"content":"e","pos":[233401,233402]},{"pos":[233410,233422],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[233424,233478]},{"pos":[233509,233528],"content":"Method scrollCursor","linkify":"Method scrollCursor","nodes":[{"content":"Method scrollCursor","pos":[0,19]}]},{"pos":[233566,233577],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[233607,233624],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[233626,233680]},{"pos":[233716,233733],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[233817,233827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[233829,233835]},{"content":"e","pos":[233849,233850]},{"pos":[233858,233871],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[233873,233973]},{"pos":[234055,234065],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[234067,234077]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[234080,234165]},{"content":"dragMode","pos":[234177,234185]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[234188,234273]},{"content":"x","pos":[234285,234286]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[234289,234374]},{"content":"y","pos":[234386,234387]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[234390,234475]},{"pos":[234481,234500],"content":"Method setSelection","linkify":"Method setSelection","nodes":[{"content":"Method setSelection","pos":[0,19]}]},{"pos":[234573,234583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndexFrom","pos":[234585,234598]},{"content":"charIndexTo","pos":[234612,234623]},{"pos":[234631,234647],"content":"Method pasteText","linkify":"Method pasteText","nodes":[{"content":"Method pasteText","pos":[0,16]}]},{"pos":[234716,234726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pasteStr","pos":[234728,234736]},{"content":"InsertSel","pos":[234750,234759]},{"pos":[234767,234781],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[234783,234823]},{"pos":[234856,234870],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[234951,234961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[234963,234969]},{"content":"e","pos":[234983,234984]},{"pos":[234992,235005],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[235053,235063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[235065,235074]},{"pos":[235082,235094],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[235125,235146],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[235148,235169]},{"pos":[235209,235233],"content":"Method performTypeLookup","linkify":"Method performTypeLookup","nodes":[{"content":"Method performTypeLookup","pos":[0,24]}]},{"pos":[235339,235349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userType","pos":[235351,235359]},{"content":"arrayIndex","pos":[235373,235383]},{"content":"company","pos":[235397,235404]},{"pos":[235412,235431],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[235517,235527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[235529,235535]},{"content":"e","pos":[235549,235550]},{"pos":[235558,235577],"content":"Method setCursorPos","linkify":"Method setCursorPos","nodes":[{"content":"Method setCursorPos","pos":[0,19]}]},{"pos":[235628,235638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[235640,235641]},{"content":"y","pos":[235655,235656]},{"pos":[235664,235675],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[235677,235729]},{"pos":[235759,235775],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[235858,235868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[235870,235876]},{"content":"e","pos":[235890,235891]},{"pos":[235899,235915],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[235917,236013]},{"pos":[236048,236065],"content":"Method lineScroll","linkify":"Method lineScroll","nodes":[{"content":"Method lineScroll","pos":[0,17]}]},{"pos":[236116,236126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dx","pos":[236128,236130]},{"content":"dy","pos":[236144,236146]},{"pos":[236154,236171],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[236255,236265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[236267,236273]},{"content":"e","pos":[236287,236288]},{"pos":[236296,236318],"content":"Method performDBLookup","linkify":"Method performDBLookup","nodes":[{"content":"Method performDBLookup","pos":[0,22]}]},{"pos":[236426,236436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[236438,236445]},{"content":"tableId","pos":[236459,236466]},{"content":"company","pos":[236480,236487]},{"pos":[236495,236505],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[236507,236540]},{"pos":[236569,236585],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[236587,236629]},{"pos":[236664,236693],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[236811,236821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[236823,236839]},{"content":"objectMethodToCall","pos":[236853,236871]},{"content":"overrideObject","pos":[236885,236899]},{"pos":[236907,236924],"content":"Method textChange","linkify":"Method textChange","nodes":[{"content":"Method textChange","pos":[0,17]}]},{"pos":[236960,236983],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[236985,237026]},{"pos":[237068,237086],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[237088,237159]},{"pos":[237210,237220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[237222,237231]},{"content":"The string value to use to filter data; optional.","pos":[237234,237283]},{"pos":[237289,237307],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[237392,237402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[237404,237410]},{"content":"e","pos":[237424,237425]},{"pos":[237433,237450],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[237452,237522]},{"pos":[237612,237622],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[237624,237625]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[237628,237689]},{"content":"y","pos":[237701,237702]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[237705,237766]},{"content":"button","pos":[237778,237784]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[237787,237848]},{"content":"Ctrl","pos":[237860,237864]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[237867,237928]},{"content":"Shift","pos":[237940,237945]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[237948,238009]},{"pos":[238015,238030],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[238032,238078]},{"pos":[238112,238130],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[238215,238225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[238227,238233]},{"content":"e","pos":[238247,238248]},{"pos":[238256,238271],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[238273,238303]},{"pos":[238337,238351],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[238383,238409],"content":"Class FormRowDisplayOption","linkify":"Class FormRowDisplayOption","nodes":[{"content":"Class FormRowDisplayOption","pos":[0,26]}]},{"pos":[238461,238468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[238474,238482],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[238488,238495],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[238499,238505]},{"content":"Description","pos":[238567,238578]},{"content":"public int backColor(<ph id=\"ph1\">\\[</ph>int color<ph id=\"ph2\">\\]</ph>)","pos":[238667,238702],"source":"public int backColor(\\[int color\\])"},{"content":"public boolean fontBold(<ph id=\"ph1\">\\[</ph>boolean bold<ph id=\"ph2\">\\]</ph>)","pos":[238751,238792],"source":"public boolean fontBold(\\[boolean bold\\])"},{"content":"public boolean fontItalic(<ph id=\"ph1\">\\[</ph>boolean italic<ph id=\"ph2\">\\]</ph>)","pos":[238835,238880],"source":"public boolean fontItalic(\\[boolean italic\\])"},{"content":"public boolean fontStrikethrough(<ph id=\"ph1\">\\[</ph>boolean strikethrough<ph id=\"ph2\">\\]</ph>)","pos":[238919,238978],"source":"public boolean fontStrikethrough(\\[boolean strikethrough\\])"},{"content":"public boolean fontUnderline(<ph id=\"ph1\">\\[</ph>boolean underline<ph id=\"ph2\">\\]</ph>)","pos":[239003,239054],"source":"public boolean fontUnderline(\\[boolean underline\\])"},{"content":"public int textColor(<ph id=\"ph1\">\\[</ph>int color<ph id=\"ph2\">\\]</ph>)","pos":[239087,239122],"source":"public int textColor(\\[int color\\])"},{"content":"public void clear()","pos":[239171,239190]},{"content":"public void clearTextColor()","pos":[239255,239283]},{"content":"public void affectedElementsByField(<ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>, VarArg )","pos":[239339,239404],"source":"public void affectedElementsByField(\\[FieldId fieldId\\], VarArg )"},{"content":"public void affectedElementsByControl(<ph id=\"ph1\">\\[</ph>int controlId<ph id=\"ph2\">\\]</ph>, VarArg )","pos":[239423,239488],"source":"public void affectedElementsByControl(\\[int controlId\\], VarArg )"},{"content":"public void clearBackColor()","pos":[239507,239535]},{"pos":[239594,239610],"content":"Method backColor","linkify":"Method backColor","nodes":[{"content":"Method backColor","pos":[0,16]}]},{"pos":[239656,239666],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"color","pos":[239668,239673]},{"pos":[239682,239694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[239700,239715],"content":"Method fontBold","linkify":"Method fontBold","nodes":[{"content":"Method fontBold","pos":[0,15]}]},{"pos":[239767,239777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"bold","pos":[239779,239783]},{"pos":[239792,239804],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[239810,239827],"content":"Method fontItalic","linkify":"Method fontItalic","nodes":[{"content":"Method fontItalic","pos":[0,17]}]},{"pos":[239883,239893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"italic","pos":[239895,239901]},{"pos":[239910,239922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[239928,239952],"content":"Method fontStrikethrough","linkify":"Method fontStrikethrough","nodes":[{"content":"Method fontStrikethrough","pos":[0,24]}]},{"pos":[240022,240032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"strikethrough","pos":[240034,240047]},{"pos":[240056,240068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[240074,240094],"content":"Method fontUnderline","linkify":"Method fontUnderline","nodes":[{"content":"Method fontUnderline","pos":[0,20]}]},{"pos":[240156,240166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"underline","pos":[240168,240177]},{"pos":[240186,240198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[240204,240220],"content":"Method textColor","linkify":"Method textColor","nodes":[{"content":"Method textColor","pos":[0,16]}]},{"pos":[240266,240276],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"color","pos":[240278,240283]},{"pos":[240292,240304],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[240310,240322],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"pos":[240353,240374],"content":"Method clearTextColor","linkify":"Method clearTextColor","nodes":[{"content":"Method clearTextColor","pos":[0,21]}]},{"pos":[240414,240444],"content":"Method affectedElementsByField","linkify":"Method affectedElementsByField","nodes":[{"content":"Method affectedElementsByField","pos":[0,30]}]},{"pos":[240520,240530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[240532,240539]},{"pos":[240561,240593],"content":"Method affectedElementsByControl","linkify":"Method affectedElementsByControl","nodes":[{"content":"Method affectedElementsByControl","pos":[0,32]}]},{"pos":[240669,240679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[240681,240690]},{"pos":[240712,240733],"content":"Method clearBackColor","linkify":"Method clearBackColor","nodes":[{"content":"Method clearBackColor","pos":[0,21]}]},{"pos":[240772,240789],"content":"Class FormSegment","linkify":"Class FormSegment","nodes":[{"content":"Class FormSegment","pos":[0,17]}]},{"content":"The FormSegment class is used to represent a segment in the SegmentedEntry control.","pos":[240828,240911]},{"pos":[240917,240924],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[240930,240938],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[240944,240951],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[240955,240961]},{"content":"Description","pos":[241021,241032]},{"content":"public str text()","pos":[241173,241190]},{"content":"Gets the current text of the segment.","pos":[241239,241276]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[241282,241325],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"public str description(<ph id=\"ph1\">\\[</ph>str description<ph id=\"ph2\">\\]</ph>)","pos":[241391,241434],"source":"public str description(\\[str description\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[241500,241541],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"public int getIndex()","pos":[241609,241630]},{"content":"public str name()","pos":[241718,241735]},{"content":"public SegmentedEntryState state(<ph id=\"ph1\">\\[</ph>SegmentedEntryState state<ph id=\"ph2\">\\]</ph>)","pos":[241827,241890],"source":"public SegmentedEntryState state(\\[SegmentedEntryState state\\])"},{"content":"public str value(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[241936,241967],"source":"public str value(\\[str value\\])"},{"content":"Gets the current value of the segment.","pos":[242002,242040]},{"pos":[242048,242059],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"content":"Gets the current text of the segment.","pos":[242061,242098]},{"pos":[242128,242140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current text of the segment.","pos":[242142,242174]},{"pos":[242181,242188],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method always returns the current text of the segment, even while it is being modified.","pos":[242190,242282]},{"content":"To retrieve the last value that was persisted for the segment, use the value method.","pos":[242283,242367]},{"pos":[242373,242389],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"pos":[242443,242453],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[242455,242460]},{"pos":[242469,242481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[242487,242505],"content":"Method description","linkify":"Method description","nodes":[{"content":"Method description","pos":[0,18]}]},{"pos":[242559,242569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"description","pos":[242571,242582]},{"pos":[242591,242603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[242609,242623],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"pos":[242675,242685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[242687,242692]},{"pos":[242701,242713],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[242719,242734],"content":"Method getIndex","linkify":"Method getIndex","nodes":[{"content":"Method getIndex","pos":[0,15]}]},{"pos":[242768,242780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[242786,242797],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"pos":[242827,242839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[242845,242857],"content":"Method state","linkify":"Method state","nodes":[{"content":"Method state","pos":[0,12]}]},{"pos":[242931,242941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"state","pos":[242943,242948]},{"pos":[242957,242969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[242975,242987],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"content":"Gets the current value of the segment.","pos":[242989,243027]},{"pos":[243069,243079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[243081,243086]},{"pos":[243095,243107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the segment.","pos":[243109,243142]},{"pos":[243149,243156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method always returns the current persisted value of the segment, even while it is being modified.","pos":[243158,243261]},{"content":"To retrieve the current text of the control while it is being modified, use the text method.","pos":[243262,243354]},{"pos":[243359,243390],"content":"Class FormSegmentedEntryControl","linkify":"Class FormSegmentedEntryControl","nodes":[{"content":"Class FormSegmentedEntryControl","pos":[0,31]}]},{"pos":[243461,243468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[243474,243482],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[243488,243495],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[243499,243505]},{"content":"Description","pos":[243609,243620]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[244063,244109],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[244173,244213]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[244345,244388],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[244455,244522]},{"content":"public boolean allowSysSetup()","pos":[244627,244657]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[244737,244820]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[244909,244958],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[245019,245117]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[245191,245232],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[245301,245350]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[245473,245508],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[245583,245645]},{"content":"public int beginDrag(int x, int y)","pos":[245755,245789]},{"content":"Is called when the user starts to drag a form control.","pos":[245865,245919]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[246037,246069],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[246147,246203]},{"content":"public container calcControlSize(int chars, int lines)","pos":[246319,246373]},{"content":"Retrieves the size of the control.","pos":[246429,246463]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[246601,246638],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[246711,246756]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[246883,246955],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[246993,247060]},{"content":"public List configurationKeyEx()","pos":[247165,247197]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[247275,247371]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[247447,247491],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[247557,247635]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[247729,247788],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[248011,248053],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[248121,248246]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[248293,248333],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[248403,248475]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[248575,248614],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[248685,248852]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[248857,248891],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[248967,249048]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[249139,249220]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[249249,249343]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[249421,249498]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[249531,249627]},{"content":"public str dragText()","pos":[249703,249724]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[249813,249883]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[249985,250026],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[250095,250146]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[250267,250331],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[250549,250590],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[250659,250710]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[250831,250873],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[250941,251029]},{"content":"public boolean hasUserSetting()","pos":[251113,251144]},{"content":"Indicates whether the control has custom user settings.","pos":[251223,251278]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[251395,251437],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[251505,251544]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[251677,251713],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[251787,251849]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[251959,251996],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[252069,252108]},{"content":"public str helpField()","pos":[252241,252263]},{"content":"Retrieves the Help text for the control.","pos":[252351,252391]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[252523,252557],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[252633,252737]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[252805,252846],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[252915,252978]},{"content":"public int hWnd()","pos":[253087,253104]},{"content":"Retrieves the Windows handle for the control.","pos":[253197,253242]},{"content":"public boolean isContainer()","pos":[253369,253397]},{"content":"public boolean isDisplayed()","pos":[253651,253679]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[253761,253827]},{"content":"public boolean isRestricted()","pos":[253933,253962]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[254043,254110]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[254215,254271]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[254325,254426]},{"content":"public boolean isValid()","pos":[254497,254521]},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[254779,254810],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[254889,254926]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[255061,255101],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[255343,255378],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[255625,255668],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[255907,255942],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[256189,256228],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[256471,256517],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[256753,256789],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[257035,257082],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[257317,257358],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[257599,257641],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[257881,257926],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[258163,258247]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[258445,258525]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[258727,258805]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[259009,259048],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[259291,259339],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[259573,259619],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[259855,259895],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[260137,260178],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[260419,260441]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[260701,260741],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[260811,260875]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[260983,261017],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[261093,261154]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[261265,261300],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[261375,261439]},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[261547,261590],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[261829,261876],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[261939,261992]},{"content":"public boolean modified()","pos":[262111,262136]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[262393,262472]},{"content":"Is called when the control is double-clicked by the user.","pos":[262503,262560]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[262675,262750]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[262785,262850]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[262957,263032]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[263067,263132]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[263239,263312]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[263349,263421]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[263521,263551],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[263631,263766]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[263803,263845],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[264085,264124]},{"content":"public FormControl parentControl()","pos":[264367,264401]},{"content":"Retrieves the parent control for the control.","pos":[264477,264522]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[264649,264689],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[264931,264967],"source":"public int promptrect(\\[int value\\])"},{"content":"public FieldId referenceField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[265213,265261],"source":"public FieldId referenceField(\\[FieldId value\\])"},{"content":"public str replacementFieldGroup(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[265495,265542],"source":"public str replacementFieldGroup(\\[str value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[265777,265834],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[265887,265946]},{"content":"public int showContextMenu(int menuHandle)","pos":[266059,266101]},{"content":"Shows the shortcut menu for the control.","pos":[266169,266209]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[266341,266384],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[266623,266661],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[266733,266860]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[266905,266949],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public str toolTip()","pos":[267187,267207]},{"content":"Retrieves the tooltip text for the control.","pos":[267297,267340]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[267469,267508],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[267579,267641]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[267751,267784],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[267861,267920]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[268033,268067],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[268143,268205]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[268315,268345],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[268597,268648]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[268879,268913],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[268989,269032]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[269161,269199],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[269271,269319]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[269443,269482],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[269553,269612]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[269725,269762],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[269835,269918]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270007,270043],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[270117,270169]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270289,270323],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[270399,270481]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270571,270613],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[270681,270737]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270853,270893],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[270963,271017]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[271135,271175],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[271245,271294]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271417,271460],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[271527,271580]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271699,271733],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[271809,271957]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271981,272016],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[272091,272168]},{"content":"public boolean validate()","pos":[272263,272288]},{"content":"public Int64 value(<ph id=\"ph1\">\\[</ph>Int64 value<ph id=\"ph2\">\\]</ph>)","pos":[272545,272580],"source":"public Int64 value(\\[Int64 value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[272827,272887],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[272937,272998]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[273109,273163],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[273219,273278]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[273391,273437],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[273501,273562]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[273673,273711],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[273955,273996],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[274065,274135]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[274237,274278],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[274347,274385]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[274519,274554],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[274629,274691]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[274801,274837],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[274911,274949]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[275083,275158],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lostFocus()","pos":[275365,275388]},{"content":"Indicates that the control has lost focus.","pos":[275475,275517]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[275647,275719],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void displayControl()","pos":[275929,275957]},{"content":"Displays the control.","pos":[276039,276060]},{"content":"public void gotFocus()","pos":[276211,276233]},{"content":"Indicates that the control has received focus.","pos":[276321,276367]},{"content":"public void undo()","pos":[276493,276511]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[276775,276882],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[277057,277133],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void jumpRef()","pos":[277339,277360]},{"content":"public void enter()","pos":[277621,277640]},{"content":"public void setFocus()","pos":[277903,277925]},{"content":"Sets the focus on the control.","pos":[278013,278043]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[278185,278258]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[278295,278393]},{"content":"public void dragLeave()","pos":[278467,278490]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[278577,278673]},{"content":"public void cut()","pos":[278749,278766]},{"content":"Cuts the contents of the control.","pos":[278859,278892]},{"content":"public void lookup()","pos":[279031,279051]},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[279313,279388],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void prefColumnSize(int width, int height)","pos":[279595,279644]},{"content":"Specifies the preferred column width and height for the form control.","pos":[279705,279774]},{"content":"public void resetUserSetting()","pos":[279877,279907]},{"content":"Resets the user settings for the control.","pos":[279987,280028]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[280159,280196],"source":"public void filter(\\[str filterStr\\])"},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[280441,280515],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[280723,280792]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[280833,280933]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[281005,281082],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[281287,281364]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[281397,281467]},{"content":"public void endDrag()","pos":[281569,281590]},{"content":"Is called when the user has finished dragging a form control.","pos":[281679,281740]},{"content":"public void copy()","pos":[281851,281869]},{"content":"Copies the contents of the control to the clipboard.","pos":[281961,282013]},{"content":"public void mouseLeave()","pos":[282133,282157]},{"content":"Indicates that the mouse pointer has left the control.","pos":[282243,282297]},{"content":"public void context()","pos":[282415,282436]},{"content":"Shows the shortcut menu for the control.","pos":[282525,282565]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[282697,282773],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void paste()","pos":[282979,282998]},{"content":"Pastes the contents of the clipboard into the control.","pos":[283089,283143]},{"content":"public void inputSearch(str searchStr)","pos":[283261,283299]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[283371,283442]},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[283543,283616],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"pos":[283828,283847],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[283849,283889]},{"pos":[283946,283956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[283958,283963]},{"content":"The new value for the property; optional.","pos":[283966,284007]},{"pos":[284014,284026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[284028,284084]},{"pos":[284091,284098],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[284100,284179]},{"pos":[284185,284201],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[284203,284270]},{"pos":[284324,284334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[284336,284341]},{"content":"The value to assign to the allowEdit property.","pos":[284344,284390]},{"pos":[284397,284409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[284411,284463]},{"pos":[284470,284477],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[284479,284601]},{"pos":[284607,284627],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[284629,284712]},{"pos":[284755,284767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[284769,284837]},{"pos":[284843,284865],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[284867,284965]},{"pos":[285025,285035],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285037,285042]},{"content":"The new value for the property; optional.","pos":[285045,285086]},{"pos":[285093,285105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[285107,285186]},{"pos":[285193,285200],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[285202,285239]},{"pos":[285245,285267],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[285269,285318]},{"pos":[285370,285380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285382,285387]},{"pos":[285396,285408],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[285410,285454]},{"pos":[285461,285468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[285470,285538]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[285544,285614]},{"content":"The second byte contains a value for green.","pos":[285619,285662]},{"content":"The third byte contains a value for blue.","pos":[285667,285708]},{"content":"The high-order byte must be zero.","pos":[285713,285746]},{"content":"The maximum value for a single byte is 255.","pos":[285751,285794]},{"pos":[285800,285816],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[285818,285880]},{"pos":[285926,285936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285938,285943]},{"pos":[285952,285964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[285966,286027]},{"pos":[286033,286049],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[286051,286105]},{"pos":[286152,286162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[286164,286165]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[286168,286238]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[286239,286306]},{"content":"y","pos":[286318,286319]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[286322,286392]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[286393,286460]},{"pos":[286467,286479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[286481,286520]},{"pos":[286527,286534],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[286536,286617]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[286618,286722]},{"pos":[286728,286741],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[286743,286799]},{"pos":[286842,286852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286854,286859]},{"pos":[286868,286880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[286882,286926]},{"pos":[286933,286940],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows.","pos":[286942,287034]},{"content":"Value","pos":[287038,287043]},{"content":"Description","pos":[287046,287057]},{"content":"0","pos":[287086,287087]},{"content":"Auto","pos":[287094,287098]},{"content":"1","pos":[287110,287111]},{"content":"3D","pos":[287118,287120]},{"content":"2","pos":[287134,287135]},{"content":"Single line","pos":[287142,287153]},{"content":"3","pos":[287158,287159]},{"content":"Flat","pos":[287166,287170]},{"content":"4","pos":[287182,287183]},{"content":"None","pos":[287190,287194]},{"pos":[287209,287231],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[287233,287267]},{"pos":[287334,287344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[287346,287351]},{"content":"The number of lines to use to determine the height.","pos":[287354,287405]},{"content":"lines","pos":[287417,287422]},{"content":"The number of lines to use to determine the height.","pos":[287425,287476]},{"pos":[287483,287495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[287497,287543]},{"pos":[287549,287567],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[287569,287614]},{"pos":[287662,287672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287674,287679]},{"pos":[287688,287700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[287702,287745]},{"pos":[287752,287759],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[287761,287822]},{"content":"Value","pos":[287826,287831]},{"content":"Style","pos":[287834,287839]},{"content":"0","pos":[287908,287909]},{"content":"Default","pos":[287916,287923]},{"content":"1","pos":[287949,287950]},{"content":"The MicrosoftWindows palette","pos":[287957,287985]},{"content":"2","pos":[287990,287991]},{"content":"The true-color scheme","pos":[287998,288019]},{"pos":[288034,288057],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[288059,288126]},{"pos":[288209,288219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[288221,288226]},{"content":"The ID of the configuration key being assigned to the control; optional.","pos":[288229,288301]},{"pos":[288308,288320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[288322,288394]},{"pos":[288401,288408],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[288410,288491]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[288492,288585]},{"pos":[288591,288616],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[288618,288714]},{"pos":[288759,288771],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[288773,288859]},{"pos":[288866,288873],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[288875,288924]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[288925,289073]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[289074,289208]},{"pos":[289214,289239],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[289241,289319]},{"pos":[289374,289384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289386,289391]},{"content":"The string that contains the country/region codes to set; optional.","pos":[289394,289461]},{"pos":[289468,289480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[289482,289547]},{"pos":[289553,289585],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[289655,289665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289667,289672]},{"pos":[289681,289693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[289699,289722],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[289724,289849]},{"pos":[289902,289912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289914,289919]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[289922,289996]},{"pos":[290003,290015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[290017,290129]},{"pos":[290136,290143],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[290145,290272]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[290273,290366]},{"pos":[290372,290389],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[290391,290463]},{"pos":[290514,290524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290526,290531]},{"pos":[290540,290552],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to use.","pos":[290554,290595]},{"pos":[290601,290621],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[290623,290790]},{"pos":[290840,290850],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290852,290857]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[290860,290934]},{"pos":[290941,290953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[290955,291083]},{"pos":[291089,291104],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[291106,291187]},{"pos":[291232,291242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291244,291249]},{"content":"An integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[291252,291330]},{"pos":[291337,291349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[291351,291411]},{"pos":[291418,291425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave Method, the dragOver Method, and the dragOverEx Method to specify the behavior.","pos":[291427,291524]},{"pos":[291530,291545],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[291547,291641]},{"pos":[291735,291745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[291747,291757]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[291760,291845]},{"content":"dragMode","pos":[291857,291865]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[291868,291953]},{"content":"x","pos":[291965,291966]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[291969,292054]},{"content":"y","pos":[292066,292067]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[292070,292155]},{"pos":[292162,292174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[292176,292241]},{"pos":[292247,292264],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[292266,292362]},{"pos":[292452,292462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[292464,292474]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[292477,292562]},{"content":"dragMode","pos":[292574,292582]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[292585,292670]},{"content":"x","pos":[292682,292683]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[292686,292771]},{"content":"y","pos":[292783,292784]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[292787,292872]},{"pos":[292879,292891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[292893,292958]},{"pos":[292964,292979],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[292981,293051]},{"pos":[293085,293097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[293099,293230]},{"pos":[293236,293250],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[293252,293303]},{"pos":[293355,293365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[293367,293372]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[293375,293447]},{"pos":[293454,293466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[293468,293516]},{"pos":[293523,293530],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[293532,293611]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[293612,293707]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[293708,293842]},{"pos":[293848,293871],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[293946,293956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[293958,293963]},{"pos":[293972,293984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[293990,294012],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[294014,294065]},{"pos":[294117,294127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[294129,294134]},{"pos":[294143,294155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[294157,294201]},{"pos":[294208,294215],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[294217,294285]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[294291,294361]},{"content":"The second byte contains a value for green.","pos":[294366,294409]},{"content":"The third byte contains a value for blue.","pos":[294414,294455]},{"content":"The high-order byte must be zero.","pos":[294460,294493]},{"content":"The maximum value for a single byte is 255.","pos":[294498,294541]},{"pos":[294547,294564],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[294566,294654]},{"pos":[294707,294717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[294719,294722]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[294725,294795]},{"pos":[294802,294814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[294816,294883]},{"pos":[294889,294910],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[294912,294967]},{"pos":[295011,295023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[295025,295088]},{"pos":[295094,295107],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[295109,295148]},{"pos":[295201,295211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295213,295218]},{"content":"An integer value that indicates how the height is calculated; optional.","pos":[295221,295292]},{"content":"mode","pos":[295304,295308]},{"content":"An integer value that indicates how the height is calculated; optional.","pos":[295311,295382]},{"pos":[295389,295401],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[295403,295439]},{"pos":[295446,295453],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the valueparameter is omitted.","pos":[295455,295507]},{"content":"Calculate the height according to the following table.","pos":[295508,295562]},{"content":"Mode","pos":[295566,295570]},{"content":"Height calculation","pos":[295584,295602]},{"content":"-1 Exact","pos":[295790,295798]},{"content":"The exact height in pixels of the controls is used.","pos":[295808,295859]},{"content":"0 Auto","pos":[295902,295908]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[295920,296009]},{"content":"1 Column height","pos":[296014,296029]},{"content":"The layout of the form determines the height of the control.","pos":[296032,296092]},{"content":"The height and height calculation mode can be set separately.","pos":[296125,296186]},{"pos":[296192,296209],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[296211,296273]},{"pos":[296320,296330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[296332,296337]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[296340,296415]},{"pos":[296422,296434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[296436,296457]},{"pos":[296464,296471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[296473,296527]},{"content":"Mode","pos":[296531,296535]},{"content":"Height calculation","pos":[296547,296565]},{"content":"Exact","pos":[296751,296756]},{"content":"The exact height in pixels of the controls is used.","pos":[296767,296818]},{"content":"Auto","pos":[296861,296865]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[296877,296966]},{"content":"Column height","pos":[296971,296984]},{"content":"The layout of the form determines the height of the control.","pos":[296987,297047]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[297080,297165]},{"pos":[297171,297189],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[297191,297230]},{"pos":[297278,297288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297290,297295]},{"content":"An integer that specifies the height in pixels; optional.","pos":[297298,297355]},{"pos":[297362,297374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[297376,297397]},{"pos":[297404,297411],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[297413,297503]},{"pos":[297509,297525],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[297527,297567]},{"pos":[297602,297614],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[297616,297704]},{"pos":[297711,297718],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[297720,297790]},{"content":"Use the helpText method to set the value of the Help text.","pos":[297791,297849]},{"pos":[297855,297870],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[297872,297976]},{"pos":[298021,298031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298033,298038]},{"content":"The value to assign as the Help text for the control.","pos":[298041,298094]},{"pos":[298101,298113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[298115,298170]},{"pos":[298177,298184],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[298186,298254]},{"content":"The Help text must not exceed 250 characters.","pos":[298255,298300]},{"pos":[298306,298328],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[298330,298393]},{"pos":[298445,298455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298457,298462]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[298465,298532]},{"pos":[298539,298551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[298553,298603]},{"pos":[298609,298620],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[298622,298667]},{"pos":[298697,298709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[298711,298738]},{"pos":[298745,298752],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This handle can be used with the Windows API.","pos":[298754,298799]},{"pos":[298805,298823],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[298864,298876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[298882,298900],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[298902,298968]},{"pos":[299009,299021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[299023,299074]},{"pos":[299081,299088],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[299090,299158]},{"pos":[299164,299183],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[299185,299252]},{"pos":[299294,299306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[299308,299360]},{"pos":[299366,299391],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[299393,299494]},{"pos":[299563,299573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[299575,299592]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[299595,299723]},{"pos":[299730,299742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[299744,299903]},{"pos":[299910,299917],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[299919,299996]},{"content":"FormAllowUserSetup::No 0","pos":[300336,300360]},{"content":"No changes can be made to the control.","pos":[300371,300409]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[300410,300499]},{"content":"FormAllowUserSetup::Restricted 1","pos":[300504,300536]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[300539,300631]},{"content":"The user cannot move the control.","pos":[300632,300665]},{"content":"FormAllowUserSetup::Yes 2","pos":[300672,300697]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[300707,300799]},{"content":"The user can also move the control.","pos":[300800,300835]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[300839,301028]},{"pos":[301034,301048],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[301085,301097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301103,301115],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[301117,301154]},{"pos":[301196,301206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301208,301213]},{"pos":[301222,301234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[301236,301274]},{"pos":[301281,301288],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[301290,301368]},{"content":"The label property value cannot exceed 250 characters.","pos":[301369,301423]},{"pos":[301429,301450],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[301501,301511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301513,301518]},{"pos":[301527,301539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301545,301561],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[301607,301617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301619,301624]},{"pos":[301633,301645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301651,301675],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[301729,301739],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301741,301746]},{"pos":[301755,301767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301773,301789],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[301835,301845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301847,301852]},{"pos":[301861,301873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301879,301899],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[301949,301959],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301961,301966]},{"pos":[301975,301987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301993,302020],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[302077,302087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302089,302094]},{"pos":[302103,302115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302121,302138],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[302185,302195],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302197,302202]},{"pos":[302211,302223],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302229,302247],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[302305,302315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302317,302322]},{"content":"mode","pos":[302336,302340]},{"pos":[302349,302361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302367,302389],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[302441,302451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302453,302458]},{"pos":[302467,302479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302485,302508],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[302561,302571],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302573,302578]},{"pos":[302587,302599],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302605,302623],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[302679,302689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302691,302696]},{"pos":[302705,302717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302723,302748],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[302845,302855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[302857,302858]},{"content":"y","pos":[302872,302873]},{"content":"button","pos":[302887,302893]},{"content":"Ctrl","pos":[302907,302911]},{"content":"Shift","pos":[302925,302930]},{"pos":[302939,302951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302957,302978],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[303071,303081],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[303083,303084]},{"content":"y","pos":[303098,303099]},{"content":"button","pos":[303113,303119]},{"content":"Ctrl","pos":[303133,303137]},{"content":"Shift","pos":[303151,303156]},{"pos":[303165,303177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303183,303202],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[303293,303303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[303305,303306]},{"content":"y","pos":[303320,303321]},{"content":"button","pos":[303335,303341]},{"content":"Ctrl","pos":[303355,303359]},{"content":"Shift","pos":[303373,303378]},{"pos":[303387,303399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303405,303425],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[303475,303485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303487,303492]},{"pos":[303501,303513],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303519,303540],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[303599,303609],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303611,303616]},{"pos":[303625,303637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303643,303660],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[303717,303727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303729,303734]},{"content":"mode","pos":[303748,303752]},{"pos":[303761,303773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303779,303800],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[303851,303861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303863,303868]},{"pos":[303877,303889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303895,303917],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[303969,303979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303981,303986]},{"pos":[303995,304007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304013,304025],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[304060,304072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304078,304089],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[304091,304155]},{"pos":[304206,304216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304218,304223]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[304226,304312]},{"content":"mode","pos":[304324,304328]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[304331,304417]},{"pos":[304424,304436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[304438,304489]},{"pos":[304495,304510],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[304512,304573]},{"pos":[304618,304628],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304630,304635]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[304638,304724]},{"pos":[304731,304743],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[304745,304801]},{"pos":[304807,304823],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[304825,304889]},{"pos":[304935,304945],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304947,304952]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[304955,305036]},{"pos":[305043,305055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[305057,305108]},{"pos":[305114,305130],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[305184,305194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305196,305201]},{"pos":[305210,305222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305228,305248],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[305250,305303]},{"pos":[305361,305371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305373,305378]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[305381,305475]},{"pos":[305482,305494],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[305496,305569]},{"pos":[305575,305590],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[305628,305640],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305646,305666],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[305668,305725]},{"pos":[305817,305827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[305829,305830]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[305833,305894]},{"content":"y","pos":[305906,305907]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[305910,305971]},{"content":"button","pos":[305983,305989]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[305992,306053]},{"content":"Ctrl","pos":[306065,306069]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306072,306133]},{"content":"Shift","pos":[306145,306150]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306153,306214]},{"pos":[306221,306233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[306235,306274]},{"pos":[306281,306288],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[306290,306394]},{"pos":[306400,306416],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[306418,306483]},{"pos":[306571,306581],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[306583,306584]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306587,306648]},{"content":"y","pos":[306660,306661]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306664,306725]},{"content":"button","pos":[306737,306743]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306746,306807]},{"content":"Ctrl","pos":[306819,306823]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306826,306887]},{"content":"Shift","pos":[306899,306904]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[306907,306968]},{"pos":[306975,306987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[306989,307028]},{"pos":[307035,307042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[307044,307148]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[307149,307284]},{"pos":[307290,307306],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[307308,307373]},{"pos":[307461,307471],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[307473,307474]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[307477,307538]},{"content":"y","pos":[307550,307551]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[307554,307615]},{"content":"button","pos":[307627,307633]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[307636,307697]},{"content":"Ctrl","pos":[307709,307713]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[307716,307777]},{"content":"Shift","pos":[307789,307794]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[307797,307858]},{"pos":[307865,307877],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[307879,307918]},{"pos":[307925,307932],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[307934,308038]},{"pos":[308044,308058],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[308060,308132]},{"pos":[308218,308228],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[308230,308231]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[308234,308295]},{"content":"y","pos":[308307,308308]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[308311,308372]},{"content":"button","pos":[308384,308390]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[308393,308454]},{"content":"Ctrl","pos":[308466,308470]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[308473,308534]},{"content":"Shift","pos":[308546,308551]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[308554,308615]},{"pos":[308622,308634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[308636,308675]},{"pos":[308682,308689],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[308691,308795]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[308796,308931]},{"pos":[308937,308948],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[308950,309085]},{"pos":[309126,309136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309138,309143]},{"content":"The name to assign to the control.","pos":[309146,309180]},{"pos":[309187,309199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[309201,309265]},{"pos":[309272,309279],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[309281,309375]},{"content":"It must start with a letter.","pos":[309381,309409]},{"content":"It cannot exceed 250 characters.","pos":[309414,309446]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[309451,309505],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[309510,309550]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[309555,309665]},{"pos":[309671,309694],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[309747,309757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309759,309764]},{"pos":[309773,309785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309791,309818],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[309870,309882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309888,309908],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[309910,309955]},{"pos":[310002,310014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[310016,310051]},{"pos":[310057,310078],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[310129,310139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310141,310146]},{"pos":[310155,310167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310173,310190],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[310237,310247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310249,310254]},{"pos":[310263,310275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310281,310302],"content":"Method referenceField","linkify":"Method referenceField","nodes":[{"content":"Method referenceField","pos":[0,21]}]},{"pos":[310361,310371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310373,310378]},{"pos":[310387,310399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310405,310433],"content":"Method replacementFieldGroup","linkify":"Method replacementFieldGroup","nodes":[{"content":"Method replacementFieldGroup","pos":[0,28]}]},{"pos":[310491,310501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310503,310508]},{"pos":[310517,310529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310535,310553],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[310555,310614]},{"pos":[310682,310692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310694,310699]},{"content":"The ID of the security key to assign to the control; optional.","pos":[310702,310764]},{"pos":[310771,310783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[310785,310884]},{"pos":[310890,310912],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[310914,310954]},{"pos":[311009,311019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[311021,311031]},{"content":"The ID of the menu to show.","pos":[311034,311061]},{"pos":[311068,311080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[311082,311141]},{"pos":[311147,311163],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[311217,311227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311229,311234]},{"pos":[311243,311255],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311261,311272],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[311274,311401]},{"pos":[311450,311460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311462,311467]},{"content":"The value to assign to the skip property of the control; optional.","pos":[311470,311536]},{"pos":[311543,311555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[311557,311663]},{"pos":[311670,311677],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[311679,311874]},{"pos":[311880,311891],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[311946,311956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[311958,311971]},{"pos":[311980,311992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[311998,312012],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[312014,312057]},{"pos":[312090,312102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[312104,312206]},{"pos":[312213,312220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[312222,312294]},{"pos":[312300,312310],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[312312,312374]},{"pos":[312424,312434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312436,312441]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[312444,312528]},{"content":"mode","pos":[312540,312544]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[312547,312631]},{"pos":[312638,312650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[312652,312701]},{"pos":[312707,312721],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[312723,312782]},{"pos":[312826,312836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312838,312843]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[312846,312930]},{"pos":[312937,312949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[312951,313005]},{"pos":[313011,313026],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[313028,313090]},{"pos":[313135,313145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313147,313152]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[313155,313234]},{"pos":[313241,313253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[313255,313304]},{"pos":[313310,313321],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[313362,313372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313374,313379]},{"pos":[313388,313400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313406,313433],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[313497,313507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[313509,313513]},{"pos":[313522,313534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313540,313555],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[313557,313600]},{"pos":[313645,313655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313657,313662]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[313665,313737]},{"pos":[313744,313756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[313758,313788]},{"pos":[313794,313813],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[313815,313863]},{"pos":[313912,313922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313924,313929]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[313932,314009]},{"pos":[314016,314028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[314030,314065]},{"pos":[314071,314091],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[314093,314152]},{"pos":[314202,314212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314214,314219]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[314222,314310]},{"pos":[314317,314329],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[314331,314377]},{"pos":[314383,314401],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[314403,314486]},{"pos":[314534,314544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314546,314551]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[314554,314634]},{"pos":[314641,314653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[314655,314711]},{"pos":[314717,314734],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[314736,314788]},{"pos":[314835,314845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314847,314852]},{"content":"The user height for the control; optional.","pos":[314855,314897]},{"pos":[314904,314916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[314918,314957]},{"pos":[314963,314978],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[314980,315062]},{"pos":[315107,315117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315119,315124]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[315127,315206]},{"pos":[315213,315225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[315227,315282]},{"pos":[315289,315296],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[315298,315468]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[315469,315544]},{"content":"This method lets you programmatically determine and set the value.","pos":[315545,315611]},{"pos":[315617,315640],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[315642,315698]},{"pos":[315751,315761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315763,315768]},{"content":"The organization container to set for the control; optional.","pos":[315771,315831]},{"pos":[315838,315850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[315852,315895]},{"pos":[315901,315922],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[315924,315978]},{"pos":[316029,316039],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316041,316046]},{"content":"The organization sibling to set for the control; optional.","pos":[316049,316107]},{"pos":[316114,316126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[316128,316169]},{"pos":[316175,316196],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[316198,316247]},{"pos":[316298,316308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316310,316315]},{"content":"The user label text to set for the control; optional.","pos":[316318,316371]},{"pos":[316378,316390],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[316392,316428]},{"pos":[316434,316458],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[316460,316513]},{"pos":[316567,316577],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316579,316584]},{"content":"The user security level to set for the control; optional.","pos":[316587,316644]},{"pos":[316651,316663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[316665,316705]},{"pos":[316711,316726],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[316728,316876]},{"pos":[316921,316931],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316933,316938]},{"content":"The value to assign to the userSkip property; optional.","pos":[316941,316996]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[316997,317092]},{"pos":[317099,317111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[317113,317182]},{"pos":[317188,317204],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[317206,317283]},{"pos":[317329,317339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317341,317346]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[317349,317415]},{"pos":[317422,317434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[317436,317565]},{"pos":[317572,317579],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[317581,317675]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[317676,317792],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[317793,317943]},{"pos":[317949,317964],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[318002,318014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318020,318032],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[318078,318088],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318090,318095]},{"pos":[318104,318116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318122,318144],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[318146,318207]},{"pos":[318276,318286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318288,318293]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[318296,318373]},{"content":"mode","pos":[318385,318389]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[318392,318469]},{"pos":[318476,318488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[318490,318538]},{"pos":[318544,318570],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[318572,318631]},{"pos":[318696,318706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[318708,318712]},{"pos":[318721,318733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[318735,318789]},{"pos":[318795,318822],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[318824,318885]},{"pos":[318942,318952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318954,318959]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[318962,319040]},{"pos":[319047,319059],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[319061,319109]},{"pos":[319115,319134],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[319183,319193],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319195,319200]},{"pos":[319209,319221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319227,319241],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[319243,319313]},{"pos":[319365,319375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319377,319382]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[319385,319457]},{"pos":[319464,319476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[319478,319527]},{"pos":[319533,319545],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[319547,319585]},{"pos":[319637,319647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319649,319654]},{"content":"An integer value that indicates how the width is calculated; optional.","pos":[319657,319727]},{"content":"mode","pos":[319739,319743]},{"content":"An integer value that indicates how the width is calculated; optional.","pos":[319746,319816]},{"pos":[319823,319835],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[319837,319872]},{"pos":[319879,319886],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[319888,319941]},{"content":"Calculate the width according to the following table.","pos":[319942,319995]},{"content":"Mode","pos":[319999,320003]},{"content":"Width calculation","pos":[320016,320033]},{"content":"-1 Exact","pos":[320219,320227]},{"content":"The exact width in pixels of the controls is used.","pos":[320236,320286]},{"content":"0 Auto","pos":[320329,320335]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[320346,320434]},{"content":"1 Column width","pos":[320439,320453]},{"content":"The layout of the form determines the width of the control.","pos":[320456,320515]},{"content":"The width and width calculation mode can be set separately.","pos":[320548,320607]},{"pos":[320613,320629],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[320631,320693]},{"pos":[320739,320749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320751,320756]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[320759,320833]},{"pos":[320840,320852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[320854,320915]},{"pos":[320922,320929],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[320931,320984]},{"content":"Mode","pos":[320988,320992]},{"content":"Width calculation","pos":[321003,321020]},{"content":"Exact","pos":[321204,321209]},{"content":"The exact width in pixels of the controls is used.","pos":[321219,321269]},{"content":"Auto","pos":[321312,321316]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[321327,321415]},{"content":"Column width","pos":[321420,321432]},{"content":"The layout of the form determines the width of the control.","pos":[321435,321494]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[321527,321610]},{"pos":[321616,321633],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[321635,321673]},{"pos":[321720,321730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321732,321737]},{"content":"An integer that specifies the width in pixels; optional.","pos":[321740,321796]},{"pos":[321803,321815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[321817,321852]},{"pos":[321859,321866],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[321868,321941]},{"pos":[321947,321964],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[322048,322058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[322060,322066]},{"content":"e","pos":[322080,322081]},{"pos":[322089,322105],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[322107,322149]},{"pos":[322184,322198],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[322279,322289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[322291,322297]},{"content":"e","pos":[322311,322312]},{"pos":[322320,322341],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[322343,322364]},{"pos":[322404,322419],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[322421,322467]},{"pos":[322501,322512],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[322542,322571],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[322689,322699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[322701,322717]},{"content":"objectMethodToCall","pos":[322731,322749]},{"content":"overrideObject","pos":[322763,322777]},{"pos":[322785,322803],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[322888,322898],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[322900,322906]},{"content":"e","pos":[322920,322921]},{"pos":[322929,322943],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[322976,322988],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[323019,323034],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[323036,323066]},{"pos":[323100,323111],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[323113,323211]},{"pos":[323297,323307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[323309,323319]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[323322,323407]},{"content":"dragMode","pos":[323419,323427]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[323430,323515]},{"content":"x","pos":[323527,323528]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[323531,323616]},{"content":"y","pos":[323628,323629]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[323632,323717]},{"pos":[323723,323739],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[323741,323837]},{"pos":[323872,323882],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[323884,323917]},{"pos":[323946,323959],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[323991,324008],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[324092,324102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[324104,324110]},{"content":"e","pos":[324124,324125]},{"pos":[324133,324154],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[324156,324225]},{"pos":[324287,324297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[324299,324304]},{"content":"The preferred height of the control.","pos":[324307,324343]},{"content":"height","pos":[324355,324361]},{"content":"The preferred height of the control.","pos":[324364,324400]},{"pos":[324406,324429],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[324431,324472]},{"pos":[324514,324527],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[324575,324585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[324587,324596]},{"pos":[324604,324620],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[324703,324713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[324715,324721]},{"content":"e","pos":[324735,324736]},{"pos":[324744,324757],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[324759,324859]},{"pos":[324941,324951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[324953,324963]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[324966,325051]},{"content":"dragMode","pos":[325063,325071]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[325074,325159]},{"content":"x","pos":[325171,325172]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[325175,325260]},{"content":"y","pos":[325272,325273]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[325276,325361]},{"pos":[325367,325386],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[325472,325482],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[325484,325490]},{"content":"e","pos":[325504,325505]},{"pos":[325513,325530],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[325532,325602]},{"pos":[325692,325702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[325704,325705]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[325708,325769]},{"content":"y","pos":[325781,325782]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[325785,325846]},{"content":"button","pos":[325858,325864]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[325867,325928]},{"content":"Ctrl","pos":[325940,325944]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[325947,326008]},{"content":"Shift","pos":[326020,326025]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[326028,326089]},{"pos":[326095,326109],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[326111,326172]},{"pos":[326206,326213],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[326215,326343]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[326344,326448]},{"pos":[326454,326465],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[326467,326519]},{"pos":[326549,326566],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[326568,326622]},{"pos":[326658,326672],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[326674,326714]},{"pos":[326747,326765],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[326850,326860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[326862,326868]},{"content":"e","pos":[326882,326883]},{"pos":[326891,326903],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[326905,326959]},{"pos":[326990,327008],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[327010,327081]},{"pos":[327132,327142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[327144,327153]},{"content":"The string value to use to filter data; optional.","pos":[327156,327205]},{"pos":[327211,327226],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[327308,327318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[327320,327326]},{"content":"e","pos":[327340,327341]},{"pos":[327348,327376],"content":"Class FormsPreloadingManager","linkify":"Class FormsPreloadingManager","nodes":[{"content":"Class FormsPreloadingManager","pos":[0,28]}]},{"content":"The FormsPreloadingManager class manages the preloading of forms, including workspace association and resource pressure management.","pos":[327426,327557]},{"pos":[327563,327570],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[327576,327584],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[327590,327597],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[327601,327607]},{"content":"Description","pos":[327655,327666]},{"content":"::private static FormsPreloadingManager construct()","pos":[327903,327954]},{"content":"public void workspaceActivated()","pos":[328054,328086]},{"content":"Sets the preloading workspace affinity to the last activated workspace.","pos":[328108,328179]},{"content":"private void new()","pos":[328205,328223]},{"content":"Initializes a new instance of the FormsPreloadingManager class.","pos":[328259,328322]},{"content":"public void updateState()","pos":[328356,328381]},{"content":"Queues forms for loading, handles high resource pressure, and updates other internal states.","pos":[328410,328502]},{"pos":[328510,328526],"content":"Method construct","linkify":"Method construct","nodes":[{"content":"Method construct","pos":[0,16]}]},{"pos":[328588,328600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[328606,328631],"content":"Method workspaceActivated","linkify":"Method workspaceActivated","nodes":[{"content":"Method workspaceActivated","pos":[0,25]}]},{"content":"Sets the preloading workspace affinity to the last activated workspace.","pos":[328633,328704]},{"pos":[328749,328756],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is typically called on a timer after a workspace has been activated.","pos":[328758,328838]},{"content":"Call this method directly to force the workspace affinity to change immediately.","pos":[328839,328919]},{"pos":[328925,328935],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the FormsPreloadingManager class.","pos":[328937,329000]},{"pos":[329030,329048],"content":"Method updateState","linkify":"Method updateState","nodes":[{"content":"Method updateState","pos":[0,18]}]},{"content":"Queues forms for loading, handles high resource pressure, and updates other internal states.","pos":[329050,329142]},{"pos":[329180,329187],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is typically called on a timer during idle periods.","pos":[329189,329252]},{"content":"Call this method directly to force a state update during non-idle periods, such as when long-running X++ code is running.","pos":[329253,329374]},{"pos":[329379,329406],"content":"Class FormStaticTextControl","linkify":"Class FormStaticTextControl","nodes":[{"content":"Class FormStaticTextControl","pos":[0,27]}]},{"pos":[329464,329471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[329477,329485],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[329491,329498],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[329502,329508]},{"content":"Description","pos":[329612,329623]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[330066,330112],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[330176,330216]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330348,330383],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[330630,330673],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[330740,330807]},{"content":"public boolean allowSysSetup()","pos":[330912,330942]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[331022,331105]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[331194,331243],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[331304,331402]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331476,331517],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[331586,331635]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331758,331793],"source":"public int backStyle(\\[int value\\])"},{"content":"Indicates whether the control background can be transparent.","pos":[331868,331928]},{"content":"public int beginDrag(int x, int y)","pos":[332040,332074]},{"content":"Is called when the user starts to drag a form control.","pos":[332150,332204]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332322,332352],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[332432,332507]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332604,332645],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[332886,332940]},{"content":"Retrieves the size of the control.","pos":[332996,333030]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[333168,333206],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[333278,333321]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[333450,333487],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[333560,333605]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[333732,333804],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[333842,333909]},{"content":"public List configurationKeyEx()","pos":[334014,334046]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[334124,334220]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[334296,334340],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[334406,334484]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[334578,334637],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[334860,334903],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[335142,335178],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[335424,335466],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[335534,335659]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[335706,335746],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source for use by the control or the form.","pos":[335816,335878]},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[335988,336046],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[336270,336322],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336552,336596],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[336834,336892],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[337116,337168],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[337398,337442],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[337680,337719],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[337790,337957]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[337962,337996],"source":"public int dragDrop(\\[int value\\])"},{"content":"Indicates whether to enable or disable drag-and-drop operations for the control.","pos":[338072,338152]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[338244,338325]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[338354,338448]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[338526,338603]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[338636,338732]},{"content":"public str dragText()","pos":[338808,338829]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[338918,338988]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[339090,339131],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[339200,339251]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[339372,339402],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[339482,339539]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[339654,339688],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[339764,339821]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[339936,339977],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[340046,340097]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[340218,340260],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[340328,340416]},{"content":"public boolean hasUserSetting()","pos":[340500,340531]},{"content":"Indicates whether the control has custom user settings.","pos":[340610,340665]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[340782,340824],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[340892,340931]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[341064,341100],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[341174,341236]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[341346,341383],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[341456,341495]},{"content":"public str helpField()","pos":[341628,341650]},{"content":"Retrieves the Help text for the control.","pos":[341738,341778]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[341910,341944],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[342020,342124]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[342192,342233],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[342302,342365]},{"content":"public int hWnd()","pos":[342474,342491]},{"content":"Retrieves the Windows handle for the control.","pos":[342584,342629]},{"content":"public boolean isContainer()","pos":[342756,342784]},{"content":"public boolean isDisplayed()","pos":[343038,343066]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[343148,343214]},{"content":"public boolean isRestricted()","pos":[343320,343349]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[343430,343497]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[343602,343658]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[343712,343813]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[343884,343924],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[344166,344206],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[344276,344340]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[344448,344482],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[344558,344619]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[344730,344765],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[344840,344904]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[345012,345059],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[345122,345175]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[345294,345373]},{"content":"Is called when the control is double-clicked by the user.","pos":[345404,345461]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[345576,345651]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[345686,345751]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[345858,345933]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[345968,346033]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[346140,346213]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[346250,346322]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[346422,346452],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[346532,346667]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[346704,346746],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[346986,347025]},{"content":"public FormControl parentControl()","pos":[347268,347302]},{"content":"Retrieves the parent control for the control.","pos":[347378,347423]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[347550,347590],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[347832,347889],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[347942,348001]},{"content":"public int showContextMenu(int menuHandle)","pos":[348114,348156]},{"content":"Shows the shortcut menu for the control.","pos":[348224,348264]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[348396,348434],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[348506,348633]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[348678,348722],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[348960,348991],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[349242,349272],"source":"public str text(\\[str value\\])"},{"content":"public str toolTip()","pos":[349524,349544]},{"content":"Retrieves the tooltip text for the control.","pos":[349634,349677]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[349806,349845],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[349916,349978]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350088,350121],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[350198,350257]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350370,350404],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[350480,350542]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350652,350682],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[350934,350977],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[351216,351267]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[351498,351532],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[351608,351651]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[351780,351818],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[351890,351938]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352062,352101],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[352172,352231]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352344,352381],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[352454,352537]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352626,352662],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[352736,352788]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352908,352942],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[353018,353100]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[353190,353232],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[353300,353356]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[353472,353512],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[353582,353636]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[353754,353794],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[353864,353913]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[354036,354079],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[354146,354199]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[354318,354352],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[354428,354576]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[354600,354635],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[354710,354787]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[354882,354942],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[354992,355053]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[355164,355218],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[355274,355333]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[355446,355492],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[355556,355617]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[355728,355769],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[355838,355908]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[356010,356051],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[356120,356158]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[356292,356327],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[356402,356464]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[356574,356610],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[356684,356722]},{"content":"public void paste()","pos":[356856,356875]},{"content":"Pastes the contents of the clipboard into the control.","pos":[356966,357020]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[357138,357175],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void endDrag()","pos":[357420,357441]},{"content":"Is called when the user has finished dragging a form control.","pos":[357530,357591]},{"content":"public void context()","pos":[357702,357723]},{"content":"Shows the shortcut menu for the control.","pos":[357812,357852]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[357984,358059],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void jumpRef()","pos":[358266,358287]},{"content":"public void lostFocus()","pos":[358548,358571]},{"content":"Indicates that the control has lost focus.","pos":[358658,358700]},{"content":"public void copy()","pos":[358830,358848]},{"content":"Copies the contents of the control to the clipboard.","pos":[358940,358992]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[359112,359219],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[359394,359463]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[359504,359604]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[359676,359752],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void inputSearch(str searchStr)","pos":[359958,359996]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[360068,360139]},{"content":"public void dragLeave()","pos":[360240,360263]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[360350,360446]},{"content":"public void cut()","pos":[360522,360539]},{"content":"Cuts the contents of the control.","pos":[360632,360665]},{"content":"public void setFocus()","pos":[360804,360826]},{"content":"Sets the focus on the control.","pos":[360914,360944]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[361086,361159]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[361196,361294]},{"content":"public void displayControl()","pos":[361368,361396]},{"content":"Displays the control.","pos":[361478,361499]},{"content":"public void resetUserSetting()","pos":[361650,361680]},{"content":"Resets the user settings for the control.","pos":[361760,361801]},{"content":"public void prefColumnSize(int width, int height)","pos":[361932,361981]},{"content":"Specifies the preferred column width and height for the form control.","pos":[362042,362111]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[362214,362291]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[362324,362394]},{"content":"public void mouseLeave()","pos":[362496,362520]},{"content":"Indicates that the mouse pointer has left the control.","pos":[362606,362660]},{"content":"public void gotFocus()","pos":[362778,362800]},{"content":"Indicates that the control has received focus.","pos":[362888,362934]},{"pos":[363063,363082],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[363084,363124]},{"pos":[363181,363191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363193,363198]},{"pos":[363207,363219],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[363221,363277]},{"pos":[363284,363291],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[363293,363372]},{"pos":[363378,363394],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[363440,363450],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363452,363457]},{"pos":[363466,363478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363484,363500],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[363502,363569]},{"pos":[363623,363633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363635,363640]},{"pos":[363649,363661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[363663,363715]},{"pos":[363722,363729],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[363731,363853]},{"pos":[363859,363879],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[363881,363964]},{"pos":[364007,364019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[364021,364089]},{"pos":[364095,364117],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[364119,364217]},{"pos":[364277,364287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364289,364294]},{"pos":[364303,364315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[364317,364396]},{"pos":[364403,364410],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[364412,364449]},{"pos":[364455,364477],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[364479,364528]},{"pos":[364580,364590],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364592,364597]},{"pos":[364606,364618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[364620,364664]},{"pos":[364671,364678],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[364680,364748]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[364754,364824]},{"content":"The second byte contains a value for green.","pos":[364829,364872]},{"content":"The third byte contains a value for blue.","pos":[364877,364918]},{"content":"The high-order byte must be zero.","pos":[364923,364956]},{"content":"The maximum value for a single byte is 255.","pos":[364961,365004]},{"pos":[365010,365026],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Indicates whether the control background can be transparent.","pos":[365028,365088]},{"pos":[365134,365144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365146,365151]},{"pos":[365160,365172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[365174,365235]},{"pos":[365241,365257],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[365259,365313]},{"pos":[365360,365370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[365372,365373]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[365376,365446]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[365447,365514]},{"content":"y","pos":[365526,365527]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[365530,365600]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[365601,365668]},{"pos":[365675,365687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[365689,365728]},{"pos":[365735,365742],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[365744,365825]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[365826,365930]},{"pos":[365936,365947],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[365949,366024]},{"pos":[366065,366075],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366077,366082]},{"pos":[366091,366103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[366105,366155]},{"pos":[366162,366169],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[366171,366243]},{"content":"0 Use the default font weight.","pos":[366249,366279]},{"content":"1 Thin.","pos":[366284,366291]},{"content":"2 Extra-light.","pos":[366296,366310]},{"content":"3 Light.","pos":[366315,366323]},{"content":"4 Normal.","pos":[366328,366337]},{"content":"5 Medium.","pos":[366342,366351]},{"content":"6 Semibold.","pos":[366356,366367]},{"content":"7 Bold.","pos":[366372,366379]},{"content":"8 Extra-bold.","pos":[366384,366397]},{"content":"9 Heavy.","pos":[366402,366410]},{"pos":[366416,366438],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[366490,366500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366502,366507]},{"pos":[366516,366528],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366534,366556],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[366558,366592]},{"pos":[366659,366669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[366671,366676]},{"content":"The number of lines to use to determine the height.","pos":[366679,366730]},{"content":"lines","pos":[366742,366747]},{"content":"The number of lines to use to determine the height.","pos":[366750,366801]},{"pos":[366808,366820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[366822,366868]},{"pos":[366874,366893],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[366895,366938]},{"pos":[366987,366997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366999,367004]},{"pos":[367013,367025],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[367027,367089]},{"pos":[367096,367103],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table.","pos":[367105,367209]},{"content":"Value","pos":[367213,367218]},{"content":"Description","pos":[367221,367232]},{"content":"0","pos":[367279,367280]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367287,367300],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[367312,367313]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367320,367336],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[367345,367346]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367353,367368],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[367378,367380]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367386,367398],"source":"MAC\\_CHARSET"},{"content":"128","pos":[367411,367414]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367419,367436],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[367444,367447]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367452,367467],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[367477,367480]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367485,367500],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[367510,367513]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367518,367538],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[367543,367546]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367551,367565],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[367576,367579]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367584,367600],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[367609,367612]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367617,367636],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[367642,367645]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367650,367665],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[367675,367678]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367683,367699],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[367708,367711]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367716,367735],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[367741,367744]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367749,367761],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[367773,367861]},{"content":"Value","pos":[367865,367870]},{"content":"Description","pos":[367873,367884]},{"content":"130","pos":[367919,367922]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[367927,367941],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[367945,368031]},{"content":"Value","pos":[368035,368040]},{"content":"Description","pos":[368043,368054]},{"content":"177","pos":[368091,368094]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[368099,368114],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[368119,368122]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[368127,368142],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[368146,368223]},{"content":"Value","pos":[368227,368232]},{"content":"Description","pos":[368235,368246]},{"content":"222","pos":[368279,368282]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[368287,368300],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[368304,368388]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[368389,368480],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[368481,368595]},{"pos":[368601,368619],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[368621,368666]},{"pos":[368714,368724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368726,368731]},{"pos":[368740,368752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[368754,368797]},{"pos":[368804,368811],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[368813,368874]},{"content":"Value","pos":[368878,368883]},{"content":"Style","pos":[368886,368891]},{"content":"0","pos":[368946,368947]},{"content":"Default","pos":[368954,368961]},{"content":"1","pos":[368980,368981]},{"content":"The Windows palette","pos":[368988,369007]},{"content":"2","pos":[369014,369015]},{"content":"The true-color scheme","pos":[369022,369043]},{"pos":[369051,369074],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[369076,369143]},{"pos":[369226,369236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369238,369243]},{"pos":[369252,369264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[369266,369338]},{"pos":[369345,369352],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[369354,369435]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[369436,369529]},{"pos":[369535,369560],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[369562,369658]},{"pos":[369703,369715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[369717,369803]},{"pos":[369810,369817],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[369819,369868]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[369869,370017]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[370018,370152]},{"pos":[370158,370183],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[370185,370263]},{"pos":[370318,370328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370330,370335]},{"content":"The string that contains the country/region codes to set; optional.","pos":[370338,370405]},{"pos":[370412,370424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[370426,370491]},{"pos":[370497,370529],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[370599,370609],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370611,370616]},{"pos":[370625,370637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370643,370659],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[370713,370723],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370725,370730]},{"pos":[370739,370751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370757,370774],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[370821,370831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370833,370838]},{"pos":[370847,370859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370865,370888],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[370890,371015]},{"pos":[371068,371078],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371080,371085]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[371088,371162]},{"pos":[371169,371181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[371183,371295]},{"pos":[371302,371309],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[371311,371438]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[371439,371532]},{"pos":[371538,371555],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source for use by the control or the form.","pos":[371557,371619]},{"pos":[371670,371680],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371682,371687]},{"pos":[371696,371708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to use.","pos":[371710,371751]},{"pos":[371757,371777],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[371844,371854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371856,371861]},{"content":"mode","pos":[371875,371879]},{"pos":[371888,371900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371906,371930],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[371993,372003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[372005,372009]},{"pos":[372018,372030],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372036,372061],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[372116,372126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372128,372133]},{"pos":[372142,372154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372160,372180],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[372247,372257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372259,372264]},{"content":"mode","pos":[372278,372282]},{"pos":[372291,372303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372309,372333],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[372396,372406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[372408,372412]},{"pos":[372421,372433],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372439,372464],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[372519,372529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372531,372536]},{"pos":[372545,372557],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372563,372583],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[372585,372752]},{"pos":[372802,372812],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372814,372819]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[372822,372896]},{"pos":[372903,372915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[372917,373045]},{"pos":[373051,373066],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Indicates whether to enable or disable drag-and-drop operations for the control.","pos":[373068,373148]},{"pos":[373193,373203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373205,373210]},{"pos":[373219,373231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if drag-and-drop operations are enabled; otherwise, false.","pos":[373233,373296]},{"pos":[373302,373317],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[373319,373413]},{"pos":[373507,373517],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[373519,373529]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[373532,373617]},{"content":"dragMode","pos":[373629,373637]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[373640,373725]},{"content":"x","pos":[373737,373738]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[373741,373826]},{"content":"y","pos":[373838,373839]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[373842,373927]},{"pos":[373934,373946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[373948,374013]},{"pos":[374019,374036],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[374038,374134]},{"pos":[374224,374234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[374236,374246]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[374249,374334]},{"content":"dragMode","pos":[374346,374354]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[374357,374442]},{"content":"x","pos":[374454,374455]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[374458,374543]},{"content":"y","pos":[374555,374556]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[374559,374644]},{"pos":[374651,374663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[374665,374730]},{"pos":[374736,374751],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[374753,374823]},{"pos":[374857,374869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[374871,375002]},{"pos":[375008,375022],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[375024,375075]},{"pos":[375127,375137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375139,375144]},{"pos":[375153,375165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[375167,375215]},{"pos":[375222,375229],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[375231,375310]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[375311,375406]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[375407,375541]},{"pos":[375547,375558],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[375560,375617]},{"pos":[375658,375668],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375670,375675]},{"pos":[375684,375696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[375698,375753]},{"pos":[375759,375774],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[375776,375833]},{"pos":[375878,375888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375890,375895]},{"pos":[375904,375916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[375918,375951]},{"pos":[375957,375979],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[375981,376032]},{"pos":[376084,376094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[376096,376101]},{"pos":[376110,376122],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[376124,376168]},{"pos":[376175,376182],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[376184,376252]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[376258,376328]},{"content":"The second byte contains a value for green.","pos":[376333,376376]},{"content":"The third byte contains a value for blue.","pos":[376381,376422]},{"content":"The high-order byte must be zero.","pos":[376427,376460]},{"content":"The maximum value for a single byte is 255.","pos":[376465,376508]},{"pos":[376514,376531],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[376533,376621]},{"pos":[376674,376684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[376686,376689]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[376692,376762]},{"pos":[376769,376781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[376783,376850]},{"pos":[376856,376877],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[376879,376934]},{"pos":[376978,376990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[376992,377055]},{"pos":[377061,377074],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[377076,377115]},{"pos":[377168,377178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[377180,377185]},{"content":"mode","pos":[377199,377203]},{"pos":[377212,377224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[377226,377262]},{"pos":[377269,377276],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[377278,377331]},{"content":"Calculate the height according to the following table.","pos":[377332,377386]},{"content":"Mode","pos":[377390,377394]},{"content":"Height calculation","pos":[377408,377426]},{"content":"-1 Exact","pos":[377614,377622]},{"content":"The exact height in pixels of the controls is used.","pos":[377632,377683]},{"content":"0 Auto","pos":[377726,377732]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[377744,377833]},{"content":"1 Column height","pos":[377838,377853]},{"content":"The layout of the form determines the height of the control.","pos":[377856,377916]},{"content":"The height and height calculation mode can be set separately.","pos":[377949,378010]},{"pos":[378016,378033],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[378035,378097]},{"pos":[378144,378154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[378156,378161]},{"pos":[378170,378182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[378184,378205]},{"pos":[378212,378219],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[378221,378275]},{"content":"Mode","pos":[378279,378283]},{"content":"Height calculation","pos":[378295,378313]},{"content":"Exact","pos":[378499,378504]},{"content":"The exact height in pixels of the controls is used.","pos":[378515,378566]},{"content":"Auto","pos":[378609,378613]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[378625,378714]},{"content":"Column height","pos":[378719,378732]},{"content":"The layout of the form determines the height of the control.","pos":[378735,378795]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[378828,378913]},{"pos":[378919,378937],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[378939,378978]},{"pos":[379026,379036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[379038,379043]},{"pos":[379052,379064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[379066,379087]},{"pos":[379094,379101],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[379103,379193]},{"pos":[379199,379215],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[379217,379257]},{"pos":[379292,379304],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[379306,379394]},{"pos":[379401,379408],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[379410,379480]},{"content":"Use the helpText method to set the value of the Help text.","pos":[379481,379539]},{"pos":[379545,379560],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[379562,379666]},{"pos":[379711,379721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[379723,379728]},{"pos":[379737,379749],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[379751,379806]},{"pos":[379813,379820],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.","pos":[379822,379895]},{"content":"The Help text must not exceed 250 characters.","pos":[379896,379941]},{"pos":[379947,379969],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[379971,380034]},{"pos":[380086,380096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[380098,380103]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[380106,380173]},{"pos":[380180,380192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[380194,380244]},{"pos":[380250,380261],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[380263,380308]},{"pos":[380338,380350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[380352,380379]},{"pos":[380386,380393],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[380395,380439]},{"pos":[380445,380463],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[380504,380516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[380522,380540],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[380542,380608]},{"pos":[380649,380661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[380663,380714]},{"pos":[380721,380728],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[380730,380798]},{"pos":[380804,380823],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[380825,380892]},{"pos":[380934,380946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[380948,381000]},{"pos":[381006,381031],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[381033,381134]},{"pos":[381203,381213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[381215,381232]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[381235,381363]},{"pos":[381370,381382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[381384,381543]},{"pos":[381550,381557],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[381559,381636]},{"content":"FormAllowUserSetup::No 0","pos":[381976,382000]},{"content":"No changes can be made to the control.","pos":[382011,382049]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[382050,382139]},{"content":"FormAllowUserSetup::Restricted 1","pos":[382144,382176]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[382179,382271]},{"content":"The user cannot move the control.","pos":[382272,382305]},{"content":"FormAllowUserSetup::Yes 2","pos":[382312,382337]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[382347,382439]},{"content":"The user can also move the control.","pos":[382440,382475]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[382479,382668]},{"pos":[382674,382687],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[382738,382748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[382750,382755]},{"pos":[382764,382776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[382782,382793],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[382795,382859]},{"pos":[382910,382920],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[382922,382927]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[382930,383016]},{"content":"mode","pos":[383028,383032]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[383035,383121]},{"pos":[383128,383140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[383142,383193]},{"pos":[383199,383214],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[383216,383277]},{"pos":[383322,383332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[383334,383339]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[383342,383428]},{"pos":[383435,383447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[383449,383505]},{"pos":[383511,383527],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[383529,383593]},{"pos":[383639,383649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[383651,383656]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[383659,383740]},{"pos":[383747,383759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[383761,383812]},{"pos":[383818,383838],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[383840,383893]},{"pos":[383951,383961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[383963,383968]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[383971,384065]},{"pos":[384072,384084],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[384086,384159]},{"pos":[384165,384185],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[384187,384244]},{"pos":[384336,384346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[384348,384349]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[384352,384413]},{"content":"y","pos":[384425,384426]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[384429,384490]},{"content":"button","pos":[384502,384508]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[384511,384572]},{"content":"Ctrl","pos":[384584,384588]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[384591,384652]},{"content":"Shift","pos":[384664,384669]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[384672,384733]},{"pos":[384740,384752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[384754,384793]},{"pos":[384800,384807],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[384809,384913]},{"pos":[384919,384935],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[384937,385002]},{"pos":[385090,385100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[385102,385103]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[385106,385167]},{"content":"y","pos":[385179,385180]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[385183,385244]},{"content":"button","pos":[385256,385262]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[385265,385326]},{"content":"Ctrl","pos":[385338,385342]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[385345,385406]},{"content":"Shift","pos":[385418,385423]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[385426,385487]},{"pos":[385494,385506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[385508,385547]},{"pos":[385554,385561],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[385563,385667]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[385668,385803]},{"pos":[385809,385825],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[385827,385892]},{"pos":[385980,385990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[385992,385993]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[385996,386057]},{"content":"y","pos":[386069,386070]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[386073,386134]},{"content":"button","pos":[386146,386152]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[386155,386216]},{"content":"Ctrl","pos":[386228,386232]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[386235,386296]},{"content":"Shift","pos":[386308,386313]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[386316,386377]},{"pos":[386384,386396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[386398,386437]},{"pos":[386444,386451],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[386453,386557]},{"pos":[386563,386577],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[386579,386651]},{"pos":[386737,386747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[386749,386750]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[386753,386814]},{"content":"y","pos":[386826,386827]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[386830,386891]},{"content":"button","pos":[386903,386909]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[386912,386973]},{"content":"Ctrl","pos":[386985,386989]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[386992,387053]},{"content":"Shift","pos":[387065,387070]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[387073,387134]},{"pos":[387141,387153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[387155,387194]},{"pos":[387201,387208],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[387210,387314]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[387315,387450]},{"pos":[387456,387467],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[387469,387604]},{"pos":[387645,387655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[387657,387662]},{"pos":[387671,387683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[387685,387749]},{"pos":[387756,387763],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[387765,387859]},{"content":"It must start with a letter.","pos":[387865,387893]},{"content":"It cannot exceed 250 characters.","pos":[387898,387930]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[387935,387989],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[387994,388034]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[388039,388149]},{"pos":[388155,388178],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[388231,388241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[388243,388248]},{"pos":[388257,388269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[388275,388302],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[388354,388366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[388372,388392],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[388394,388439]},{"pos":[388486,388498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[388500,388535]},{"pos":[388541,388562],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[388613,388623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[388625,388630]},{"pos":[388639,388651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[388657,388675],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[388677,388736]},{"pos":[388804,388814],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[388816,388821]},{"content":"The ID of the security key to assign to the control; optional.","pos":[388824,388886]},{"pos":[388893,388905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[388907,389006]},{"pos":[389012,389034],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[389036,389076]},{"pos":[389131,389141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[389143,389153]},{"content":"The ID of the menu to show.","pos":[389156,389183]},{"pos":[389190,389202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[389204,389263]},{"pos":[389269,389280],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[389282,389409]},{"pos":[389458,389468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[389470,389475]},{"content":"The value to assign to the skip property of the control; optional.","pos":[389478,389544]},{"pos":[389551,389563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[389565,389671]},{"pos":[389678,389685],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[389687,389882]},{"pos":[389888,389899],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[389954,389964],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[389966,389979]},{"pos":[389988,390000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390006,390018],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[390060,390070],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390072,390077]},{"pos":[390086,390098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390104,390115],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[390156,390166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390168,390173]},{"pos":[390182,390194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390200,390214],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[390216,390259]},{"pos":[390292,390304],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[390306,390408]},{"pos":[390415,390422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[390424,390496]},{"pos":[390502,390512],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[390514,390576]},{"pos":[390626,390636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390638,390643]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[390646,390730]},{"content":"mode","pos":[390742,390746]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[390749,390833]},{"pos":[390840,390852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[390854,390903]},{"pos":[390909,390923],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[390925,390984]},{"pos":[391028,391038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[391040,391045]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[391048,391132]},{"pos":[391139,391151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[391153,391207]},{"pos":[391213,391228],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[391230,391292]},{"pos":[391337,391347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[391349,391354]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[391357,391436]},{"pos":[391443,391455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[391457,391506]},{"pos":[391512,391523],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[391564,391574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[391576,391581]},{"pos":[391590,391602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[391608,391624],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[391678,391688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[391690,391695]},{"pos":[391704,391716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[391722,391749],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[391813,391823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[391825,391829]},{"pos":[391838,391850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[391856,391871],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[391873,391916]},{"pos":[391961,391971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[391973,391978]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[391981,392053]},{"pos":[392060,392072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[392074,392104]},{"pos":[392110,392129],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[392131,392179]},{"pos":[392228,392238],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[392240,392245]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[392248,392325]},{"pos":[392332,392344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[392346,392381]},{"pos":[392387,392407],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[392409,392468]},{"pos":[392518,392528],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[392530,392535]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[392538,392626]},{"pos":[392633,392645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[392647,392693]},{"pos":[392699,392717],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[392719,392802]},{"pos":[392850,392860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[392862,392867]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[392870,392950]},{"pos":[392957,392969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[392971,393027]},{"pos":[393033,393050],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[393052,393104]},{"pos":[393151,393161],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393163,393168]},{"content":"The user height for the control; optional.","pos":[393171,393213]},{"pos":[393220,393232],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[393234,393273]},{"pos":[393279,393294],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[393296,393378]},{"pos":[393423,393433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393435,393440]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[393443,393522]},{"pos":[393529,393541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[393543,393598]},{"pos":[393605,393612],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[393614,393784]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[393785,393860]},{"content":"This method lets you programmatically determine and set the value.","pos":[393861,393927]},{"pos":[393933,393956],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[393958,394014]},{"pos":[394067,394077],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394079,394084]},{"content":"The organization container to set for the control; optional.","pos":[394087,394147]},{"pos":[394154,394166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[394168,394211]},{"pos":[394217,394238],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[394240,394294]},{"pos":[394345,394355],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394357,394362]},{"content":"The organization sibling to set for the control; optional.","pos":[394365,394423]},{"pos":[394430,394442],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[394444,394485]},{"pos":[394491,394512],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[394514,394563]},{"pos":[394614,394624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394626,394631]},{"content":"The user label text to set for the control; optional.","pos":[394634,394687]},{"pos":[394694,394706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[394708,394744]},{"pos":[394750,394774],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[394776,394829]},{"pos":[394883,394893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394895,394900]},{"content":"The user security level to set for the control; optional.","pos":[394903,394960]},{"pos":[394967,394979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[394981,395021]},{"pos":[395027,395042],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[395044,395192]},{"pos":[395237,395247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395249,395254]},{"content":"The value to assign to the userSkip property; optional.","pos":[395257,395312]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[395313,395408]},{"pos":[395415,395427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[395429,395498]},{"pos":[395504,395520],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[395522,395599]},{"pos":[395645,395655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395657,395662]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[395665,395731]},{"pos":[395738,395750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[395752,395881]},{"pos":[395888,395895],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[395897,395991]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[395992,396108],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[396109,396259]},{"pos":[396265,396287],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[396289,396350]},{"pos":[396419,396429],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[396431,396436]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[396439,396516]},{"content":"mode","pos":[396528,396532]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[396535,396612]},{"pos":[396619,396631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[396633,396681]},{"pos":[396687,396713],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[396715,396774]},{"pos":[396839,396849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[396851,396855]},{"pos":[396864,396876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[396878,396932]},{"pos":[396938,396965],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[396967,397028]},{"pos":[397085,397095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397097,397102]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[397105,397183]},{"pos":[397190,397202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[397204,397252]},{"pos":[397258,397272],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[397274,397344]},{"pos":[397396,397406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397408,397413]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[397416,397488]},{"pos":[397495,397507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[397509,397558]},{"pos":[397564,397576],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[397578,397616]},{"pos":[397668,397678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397680,397685]},{"content":"mode","pos":[397699,397703]},{"pos":[397712,397724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[397726,397761]},{"pos":[397768,397775],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[397777,397830]},{"content":"Calculate the width according to the following table.","pos":[397831,397884]},{"content":"Mode","pos":[397888,397892]},{"content":"Width calculation","pos":[397905,397922]},{"content":"-1 Exact","pos":[398108,398116]},{"content":"The exact width in pixels of the controls is used.","pos":[398125,398175]},{"content":"0 Auto","pos":[398218,398224]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[398235,398323]},{"content":"1 Column width","pos":[398328,398342]},{"content":"The layout of the form determines the width of the control.","pos":[398345,398404]},{"content":"The width and width calculation mode can be set separately.","pos":[398437,398496]},{"pos":[398502,398518],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[398520,398582]},{"pos":[398628,398638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398640,398645]},{"pos":[398654,398666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[398668,398729]},{"pos":[398736,398743],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[398745,398798]},{"content":"Mode","pos":[398802,398806]},{"content":"Width calculation","pos":[398817,398834]},{"content":"Exact","pos":[399018,399023]},{"content":"The exact width in pixels of the controls is used.","pos":[399033,399083]},{"content":"Auto","pos":[399126,399130]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[399141,399229]},{"content":"Column width","pos":[399234,399246]},{"content":"The layout of the form determines the width of the control.","pos":[399249,399308]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[399341,399424]},{"pos":[399430,399447],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[399449,399487]},{"pos":[399534,399544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399546,399551]},{"pos":[399560,399572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[399574,399609]},{"pos":[399616,399623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[399625,399698]},{"pos":[399704,399716],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[399718,399772]},{"pos":[399803,399816],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[399864,399874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[399876,399885]},{"pos":[399893,399907],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[399909,399970]},{"pos":[400004,400011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[400013,400141]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[400142,400246]},{"pos":[400252,400266],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[400268,400308]},{"pos":[400341,400358],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[400442,400452],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[400454,400460]},{"content":"e","pos":[400474,400475]},{"pos":[400483,400497],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[400530,400546],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[400548,400590]},{"pos":[400625,400636],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[400638,400690]},{"pos":[400720,400749],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[400867,400877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[400879,400895]},{"content":"objectMethodToCall","pos":[400909,400927]},{"content":"overrideObject","pos":[400941,400955]},{"pos":[400963,400976],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[400978,401078]},{"pos":[401160,401170],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[401172,401182]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[401185,401270]},{"content":"dragMode","pos":[401282,401290]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[401293,401378]},{"content":"x","pos":[401390,401391]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[401394,401479]},{"content":"y","pos":[401491,401492]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[401495,401580]},{"pos":[401586,401604],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[401689,401699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[401701,401707]},{"content":"e","pos":[401721,401722]},{"pos":[401730,401748],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[401750,401821]},{"pos":[401872,401882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[401884,401893]},{"content":"The string value to use to filter data; optional.","pos":[401896,401945]},{"pos":[401951,401967],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[401969,402065]},{"pos":[402100,402110],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[402112,402145]},{"pos":[402174,402189],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[402191,402221]},{"pos":[402255,402266],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[402268,402366]},{"pos":[402452,402462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[402464,402474]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[402477,402562]},{"content":"dragMode","pos":[402574,402582]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[402585,402670]},{"content":"x","pos":[402682,402683]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[402686,402771]},{"content":"y","pos":[402783,402784]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[402787,402872]},{"pos":[402878,402899],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[402901,402922]},{"pos":[402962,402985],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[402987,403028]},{"pos":[403070,403091],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[403093,403162]},{"pos":[403224,403234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[403236,403241]},{"content":"The preferred height of the control.","pos":[403244,403280]},{"content":"height","pos":[403292,403298]},{"content":"The preferred height of the control.","pos":[403301,403337]},{"pos":[403343,403360],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[403362,403432]},{"pos":[403522,403532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[403534,403535]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[403538,403599]},{"content":"y","pos":[403611,403612]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[403615,403676]},{"content":"button","pos":[403688,403694]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[403697,403758]},{"content":"Ctrl","pos":[403770,403774]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[403777,403838]},{"content":"Shift","pos":[403850,403855]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[403858,403919]},{"pos":[403925,403942],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[403944,403998]},{"pos":[404034,404049],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[404051,404097]},{"pos":[404130,404153],"content":"Class FormStringControl","linkify":"Class FormStringControl","nodes":[{"content":"Class FormStringControl","pos":[0,23]}]},{"pos":[404207,404214],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[404220,404228],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[404234,404241],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[404245,404251]},{"content":"Description","pos":[404355,404366]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[404809,404855],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Indicates whether to align the control.","pos":[404919,404958]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[405091,405126],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[405373,405416],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Indicates whether the user can change the contents of the control.","pos":[405483,405549]},{"content":"public boolean allowSysSetup()","pos":[405655,405685]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[405765,405848]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[405937,405973],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[406219,406268],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Indicates whether the system can declare a member variable that has the same name as the control.","pos":[406329,406426]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[406501,406542],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[406611,406660]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[406783,406818],"source":"public int backStyle(\\[int value\\])"},{"content":"Indicates whether the control background can be transparent.","pos":[406893,406953]},{"content":"public int beginDrag(int x, int y)","pos":[407065,407099]},{"content":"Is called when the user starts to drag a form control.","pos":[407175,407229]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[407347,407377],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[407457,407532]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[407629,407661],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[407739,407795]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[407911,407952],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[408193,408247]},{"content":"Retrieves the size of the control.","pos":[408303,408337]},{"content":"public int changeCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[408475,408511],"source":"public int changeCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[408757,408795],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[408867,408910]},{"content":"public int charFromPos(int x, int y)","pos":[409039,409075]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[409321,409358],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[409431,409476]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[409603,409675],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[409713,409780]},{"content":"public List configurationKeyEx()","pos":[409885,409917]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[409995,410091]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[410167,410211],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[410277,410355]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[410449,410508],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[410731,410774],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public int dataFieldArrayIndex()","pos":[411013,411045]},{"content":"public FieldName dataFieldName()","pos":[411295,411327]},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[411577,411613],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[411859,411901],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[411969,412094]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[412141,412181],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[412251,412323]},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[412423,412458],"source":"public int direction(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[412705,412763],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[412987,413039],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[413269,413313],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[413551,413609],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[413833,413885],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[414115,414159],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[414397,414436],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[414507,414674]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[414679,414713],"source":"public int dragDrop(\\[int value\\])"},{"content":"Indicates whether to enable or disable drag-and-drop operations for the control.","pos":[414789,414869]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[414961,415042]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[415071,415165]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[415243,415320]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[415353,415449]},{"content":"public str dragText()","pos":[415525,415546]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[415635,415705]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[415807,415848],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Indicates whether to enable or disable the object.","pos":[415917,415967]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[416089,416153],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[416371,416411],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[416653,416683],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[416763,416820]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[416935,416969],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[417045,417102]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[417217,417258],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[417327,417378]},{"content":"public container getCursorPos()","pos":[417499,417530]},{"content":"public int getFirstVisibleLine()","pos":[417781,417813]},{"content":"public str getLine(int lineNo)","pos":[418063,418093]},{"content":"public int getLineCount()","pos":[418345,418370]},{"content":"public container getSelection()","pos":[418627,418658]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[418909,418951],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[419019,419107]},{"content":"public boolean hasUserSetting()","pos":[419191,419222]},{"content":"Indicates whether the control has custom user settings.","pos":[419301,419356]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[419473,419515],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[419583,419622]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[419755,419791],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[419865,419927]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[420037,420074],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[420147,420186]},{"content":"public str helpField()","pos":[420319,420341]},{"content":"Retrieves the Help text for the control.","pos":[420429,420469]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[420601,420635],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[420711,420815]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[420883,420924],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[420993,421056]},{"content":"public int hWnd()","pos":[421165,421182]},{"content":"Retrieves the Windows handle for the control.","pos":[421275,421320]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[421447,421480],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[421729,421757]},{"content":"public boolean isDisplayed()","pos":[422011,422039]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[422121,422187]},{"content":"public boolean isRestricted()","pos":[422293,422322]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[422403,422470]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[422575,422631]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[422685,422786]},{"content":"public boolean isValid()","pos":[422857,422881]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[423139,423179],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[423421,423452],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[423531,423568]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[423703,423743],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[423985,424020],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[424267,424310],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[424549,424584],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[424831,424870],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[425113,425159],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[425395,425431],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[425677,425724],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[425959,426000],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[426241,426283],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[426523,426568],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[426805,426889]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[427087,427167]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[427369,427447]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[427651,427690],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[427933,427981],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[428215,428261],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[428497,428537],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[428779,428820],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[429061,429083]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[429343,429383],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[429453,429517]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[429625,429659],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[429735,429796]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[429907,429942],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[430017,430081]},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[430189,430243],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[430471,430519],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[430753,430793],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lineFromChar(int charIndex)","pos":[431035,431073]},{"content":"public int lineIndex(int lineNo)","pos":[431317,431349]},{"content":"public int lineLength(int lineNo)","pos":[431599,431632]},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[431881,431919],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean lookupOnly(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[432163,432207],"source":"public boolean lookupOnly(\\[boolean value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[432445,432488],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[432727,432774],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[432837,432890]},{"content":"public boolean modified()","pos":[433009,433034]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[433291,433370]},{"content":"Is called when the control is double-clicked by the user.","pos":[433401,433458]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[433573,433648]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[433683,433748]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[433855,433930]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[433965,434030]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[434137,434210]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[434247,434319]},{"content":"public boolean multiLine(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[434419,434462],"source":"public boolean multiLine(\\[boolean value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[434701,434731],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[434811,434946]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[434983,435025],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[435265,435304]},{"content":"public FormControl parentControl()","pos":[435547,435581]},{"content":"Retrieves the parent control for the control.","pos":[435657,435702]},{"content":"public boolean passwordStyle(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[435829,435876],"source":"public boolean passwordStyle(\\[boolean value\\])"},{"content":"public container posFromChar(int charIndex)","pos":[436111,436154]},{"content":"public FieldId presenceDataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[436393,436444],"source":"public FieldId presenceDataField(\\[FieldId value\\])"},{"content":"public int presenceDataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[436675,436723],"source":"public int presenceDataSource(\\[AnyType value\\])"},{"content":"public int presenceIndicatorAllowed(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[436957,437007],"source":"public int presenceIndicatorAllowed(\\[int value\\])"},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[437239,437279],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[437521,437557],"source":"public int promptrect(\\[int value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[437803,437852],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public str resolveAmbiguousReference()","pos":[438085,438123]},{"content":"public FieldBinding disambiguationLookupTarget()","pos":[438367,438415]},{"content":"public str lookupDisambiguateReference(FieldBinding fieldBinding)","pos":[438649,438714]},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[438931,438973],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[439213,439249],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[439495,439552],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[439605,439664]},{"content":"public int showContextMenu(int menuHandle)","pos":[439777,439819]},{"content":"Shows the shortcut menu for the control.","pos":[439887,439927]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[440059,440102],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[440341,440379],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[440451,440578]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[440623,440667],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[440905,440936],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[441187,441217],"source":"public str text(\\[str value\\])"},{"content":"public str toolTip()","pos":[441469,441489]},{"content":"Retrieves the tooltip text for the control.","pos":[441579,441622]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[441751,441790],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[441861,441923]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[442033,442066],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[442143,442202]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[442315,442349],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[442425,442487]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[442597,442627],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[442879,442922],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[443161,443212]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[443443,443477],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[443553,443596]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[443725,443763],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[443835,443883]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[444007,444046],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[444117,444176]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[444289,444326],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[444399,444482]},{"content":"public int userFastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[444571,444615],"source":"public int userFastTabSummary(\\[int value\\])"},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[444853,444889],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[444963,445015]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[445135,445169],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[445245,445327]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[445417,445459],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[445527,445583]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[445699,445739],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[445809,445863]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[445981,446021],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[446091,446140]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[446263,446306],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[446373,446426]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[446545,446579],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[446655,446803]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[446827,446862],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[446937,447014]},{"content":"public boolean validate()","pos":[447109,447134]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[447391,447451],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[447501,447562]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[447673,447727],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[447783,447842]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[447955,448001],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[448065,448126]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[448237,448275],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[448519,448560],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[448629,448699]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[448801,448842],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[448911,448949]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[449083,449118],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[449193,449255]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[449365,449401],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[449475,449513]},{"content":"public void presenceRefresh()","pos":[449647,449676]},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[449929,450002],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lostFocus()","pos":[450211,450234]},{"content":"Indicates that the control has lost focus.","pos":[450321,450363]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[450493,450570]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[450603,450673]},{"content":"public void performTypeLookup(<ph id=\"ph1\">\\[</ph>int userType<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[450775,450874],"source":"public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])"},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[451057,451131],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void undo()","pos":[451339,451357]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[451621,451728],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void context()","pos":[451903,451924]},{"content":"Shows the shortcut menu for the control.","pos":[452013,452053]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[452185,452260],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setSelection(int charIndexFrom, int charIndexTo)","pos":[452467,452527]},{"content":"public void scrollCursor()","pos":[452749,452775]},{"content":"public void enter()","pos":[453031,453050]},{"content":"public void inputSearch(str searchStr)","pos":[453313,453351]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[453423,453494]},{"content":"public void performDBLookup(<ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>TableId tableId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[453595,453696],"source":"public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])"},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[453877,453914],"source":"public void filter(\\[str filterStr\\])"},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[454159,454234],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[454441,454510]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[454551,454651]},{"content":"public void mouseLeave()","pos":[454723,454747]},{"content":"Indicates that the mouse pointer has left the control.","pos":[454833,454887]},{"content":"public void displayControl()","pos":[455005,455033]},{"content":"Displays the control.","pos":[455115,455136]},{"content":"public void copy()","pos":[455287,455305]},{"content":"Copies the contents of the control to the clipboard.","pos":[455397,455449]},{"content":"public void gotFocus()","pos":[455569,455591]},{"content":"Indicates that the control has received focus.","pos":[455679,455725]},{"content":"public void dragLeave()","pos":[455851,455874]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[455961,456057]},{"content":"public void cut()","pos":[456133,456150]},{"content":"Cuts the contents of the control.","pos":[456243,456276]},{"content":"public void paste()","pos":[456415,456434]},{"content":"Pastes the contents of the clipboard into the control.","pos":[456525,456579]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[456697,456774],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setCursorPos(int x, int y)","pos":[456979,457017]},{"content":"public void performFormLookup(xFormRun form)","pos":[457261,457305]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[457543,457619],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lineScroll(int dx, int dy)","pos":[457825,457863]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[458107,458179],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void prefColumnSize(int width, int height)","pos":[458389,458438]},{"content":"Specifies the preferred column width and height for the form control.","pos":[458499,458568]},{"content":"public void resetUserSetting()","pos":[458671,458701]},{"content":"Resets the user settings for the control.","pos":[458781,458822]},{"content":"public void textChange()","pos":[458953,458977]},{"content":"public void jumpRef()","pos":[459235,459256]},{"content":"public void lookup()","pos":[459517,459537]},{"content":"public void pasteText(str pasteStr, <ph id=\"ph1\">\\[</ph>boolean InsertSel<ph id=\"ph2\">\\]</ph>)","pos":[459799,459857],"source":"public void pasteText(str pasteStr, \\[boolean InsertSel\\])"},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[460081,460157],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[460363,460436]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[460473,460571]},{"content":"public void setFocus()","pos":[460645,460667]},{"content":"Sets the focus on the control.","pos":[460755,460785]},{"content":"public void endDrag()","pos":[460927,460948]},{"content":"Is called when the user has finished dragging a form control.","pos":[461037,461098]},{"pos":[461212,461231],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Indicates whether to align the control.","pos":[461233,461272]},{"pos":[461329,461339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[461341,461346]},{"pos":[461355,461367],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[461369,461425]},{"pos":[461432,461439],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[461441,461520]},{"pos":[461526,461542],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[461588,461598],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[461600,461605]},{"pos":[461614,461626],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[461632,461648],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Indicates whether the user can change the contents of the control.","pos":[461650,461716]},{"pos":[461770,461780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[461782,461787]},{"pos":[461796,461808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[461810,461862]},{"pos":[461869,461876],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[461878,462000]},{"pos":[462006,462026],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[462028,462111]},{"pos":[462154,462166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[462168,462236]},{"pos":[462242,462259],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[462306,462316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[462318,462323]},{"pos":[462332,462344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[462350,462372],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Indicates whether the system can declare a member variable that has the same name as the control.","pos":[462374,462471]},{"pos":[462531,462541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[462543,462548]},{"pos":[462557,462569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[462571,462650]},{"pos":[462657,462664],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[462666,462703]},{"pos":[462709,462731],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[462733,462782]},{"pos":[462834,462844],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[462846,462851]},{"pos":[462860,462872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[462874,462918]},{"pos":[462925,462932],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[462934,463002]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[463008,463078]},{"content":"The second byte contains a value for green.","pos":[463083,463126]},{"content":"The third byte contains a value for blue.","pos":[463131,463172]},{"content":"The high-order byte must be zero.","pos":[463177,463210]},{"content":"The maximum value for a single byte is 255.","pos":[463215,463258]},{"pos":[463264,463280],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Indicates whether the control background can be transparent.","pos":[463282,463342]},{"pos":[463388,463398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[463400,463405]},{"pos":[463414,463426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[463428,463489]},{"pos":[463495,463511],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[463513,463567]},{"pos":[463614,463624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[463626,463627]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[463630,463700]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[463701,463768]},{"content":"y","pos":[463780,463781]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[463784,463854]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[463855,463922]},{"pos":[463929,463941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[463943,463982]},{"pos":[463989,463996],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[463998,464079]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[464080,464184]},{"pos":[464190,464201],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[464203,464278]},{"pos":[464319,464329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[464331,464336]},{"pos":[464345,464357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[464359,464409]},{"pos":[464416,464423],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[464425,464497]},{"content":"0 Use the default font weight.","pos":[464503,464533]},{"content":"1 Thin.","pos":[464538,464545]},{"content":"2 Extra-light.","pos":[464550,464564]},{"content":"3 Light.","pos":[464569,464577]},{"content":"4 Normal.","pos":[464582,464591]},{"content":"5 Medium.","pos":[464596,464605]},{"content":"6 Semibold.","pos":[464610,464621]},{"content":"7 Bold.","pos":[464626,464633]},{"content":"8 Extra-bold.","pos":[464638,464651]},{"content":"9 Heavy.","pos":[464656,464664]},{"pos":[464670,464683],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[464685,464741]},{"pos":[464784,464794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[464796,464801]},{"pos":[464810,464822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[464824,464868]},{"pos":[464875,464882],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows.","pos":[464884,464976]},{"content":"Value","pos":[464980,464985]},{"content":"Description","pos":[464988,464999]},{"content":"0","pos":[465028,465029]},{"content":"Auto","pos":[465036,465040]},{"content":"1","pos":[465052,465053]},{"content":"3D","pos":[465060,465062]},{"content":"2","pos":[465076,465077]},{"content":"Single line","pos":[465084,465095]},{"content":"3","pos":[465100,465101]},{"content":"Flat","pos":[465108,465112]},{"content":"4","pos":[465124,465125]},{"content":"None","pos":[465132,465136]},{"pos":[465151,465173],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[465225,465235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[465237,465242]},{"pos":[465251,465263],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[465269,465291],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[465293,465327]},{"pos":[465394,465404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[465406,465411]},{"content":"The number of lines to use to determine the height.","pos":[465414,465465]},{"content":"lines","pos":[465477,465482]},{"content":"The number of lines to use to determine the height.","pos":[465485,465536]},{"pos":[465543,465555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[465557,465603]},{"pos":[465609,465626],"content":"Method changeCase","linkify":"Method changeCase","nodes":[{"content":"Method changeCase","pos":[0,17]}]},{"pos":[465673,465683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[465685,465690]},{"pos":[465699,465711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[465717,465736],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[465738,465781]},{"pos":[465830,465840],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[465842,465847]},{"pos":[465856,465868],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[465870,465932]},{"pos":[465939,465946],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table.","pos":[465948,466052]},{"content":"Value","pos":[466056,466061]},{"content":"Description","pos":[466064,466075]},{"content":"0","pos":[466122,466123]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466130,466143],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[466155,466156]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466163,466179],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[466188,466189]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466196,466211],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[466221,466223]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466229,466241],"source":"MAC\\_CHARSET"},{"content":"128","pos":[466254,466257]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466262,466279],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[466287,466290]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466295,466310],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[466320,466323]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466328,466343],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[466353,466356]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466361,466381],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[466386,466389]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466394,466408],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[466419,466422]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466427,466443],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[466452,466455]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466460,466479],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[466485,466488]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466493,466508],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[466518,466521]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466526,466542],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[466551,466554]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466559,466578],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[466584,466587]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466592,466604],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[466616,466704]},{"content":"Value","pos":[466708,466713]},{"content":"Description","pos":[466716,466727]},{"content":"130","pos":[466762,466765]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466770,466784],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[466788,466874]},{"content":"Value","pos":[466878,466883]},{"content":"Description","pos":[466886,466897]},{"content":"177","pos":[466934,466937]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466942,466957],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[466962,466965]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[466970,466985],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[466989,467066]},{"content":"Value","pos":[467070,467075]},{"content":"Description","pos":[467078,467089]},{"content":"222","pos":[467122,467125]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[467130,467143],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[467147,467231]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[467232,467323],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[467324,467438]},{"pos":[467444,467462],"content":"Method charFromPos","linkify":"Method charFromPos","nodes":[{"content":"Method charFromPos","pos":[0,18]}]},{"pos":[467511,467521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[467523,467524]},{"content":"y","pos":[467538,467539]},{"pos":[467548,467560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[467566,467584],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[467586,467631]},{"pos":[467679,467689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[467691,467696]},{"pos":[467705,467717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[467719,467762]},{"pos":[467769,467776],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[467778,467839]},{"content":"Value","pos":[467843,467848]},{"content":"Style","pos":[467851,467856]},{"content":"0","pos":[467911,467912]},{"content":"Default","pos":[467919,467926]},{"content":"1","pos":[467945,467946]},{"content":"The Windows palette","pos":[467953,467972]},{"content":"2","pos":[467979,467980]},{"content":"The true-color scheme","pos":[467987,468008]},{"pos":[468016,468039],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[468041,468108]},{"pos":[468191,468201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[468203,468208]},{"pos":[468217,468229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[468231,468303]},{"pos":[468310,468317],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[468319,468400]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[468401,468494]},{"pos":[468500,468525],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[468527,468623]},{"pos":[468668,468680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[468682,468768]},{"pos":[468775,468782],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[468784,468833]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[468834,468982]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[468983,469117]},{"pos":[469123,469148],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[469150,469228]},{"pos":[469283,469293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[469295,469300]},{"content":"The string that contains the country/region codes to set; optional.","pos":[469303,469370]},{"pos":[469377,469389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[469391,469456]},{"pos":[469462,469494],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[469564,469574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[469576,469581]},{"pos":[469590,469602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[469608,469624],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[469678,469688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[469690,469695]},{"pos":[469704,469716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[469722,469748],"content":"Method dataFieldArrayIndex","linkify":"Method dataFieldArrayIndex","nodes":[{"content":"Method dataFieldArrayIndex","pos":[0,26]}]},{"pos":[469793,469805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[469811,469831],"content":"Method dataFieldName","linkify":"Method dataFieldName","nodes":[{"content":"Method dataFieldName","pos":[0,20]}]},{"pos":[469876,469888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[469894,469911],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[469958,469968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[469970,469975]},{"pos":[469984,469996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[470002,470025],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[470027,470152]},{"pos":[470205,470215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[470217,470222]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[470225,470299]},{"pos":[470306,470318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[470320,470432]},{"pos":[470439,470446],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[470448,470575]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[470576,470669]},{"pos":[470675,470692],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[470694,470766]},{"pos":[470817,470827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[470829,470834]},{"pos":[470843,470855],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[470857,470909]},{"pos":[470915,470931],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[470977,470987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[470989,470994]},{"pos":[471003,471015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[471021,471041],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[471108,471118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[471120,471125]},{"content":"mode","pos":[471139,471143]},{"pos":[471152,471164],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[471170,471194],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[471257,471267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[471269,471273]},{"pos":[471282,471294],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[471300,471325],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[471380,471390],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[471392,471397]},{"pos":[471406,471418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[471424,471444],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[471511,471521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[471523,471528]},{"content":"mode","pos":[471542,471546]},{"pos":[471555,471567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[471573,471597],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[471660,471670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[471672,471676]},{"pos":[471685,471697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[471703,471728],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[471783,471793],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[471795,471800]},{"pos":[471809,471821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[471827,471847],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[471849,472016]},{"pos":[472066,472076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[472078,472083]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[472086,472160]},{"pos":[472167,472179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[472181,472309]},{"pos":[472315,472330],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Indicates whether to enable or disable drag-and-drop operations for the control.","pos":[472332,472412]},{"pos":[472457,472467],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[472469,472474]},{"pos":[472483,472495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[472497,472557]},{"pos":[472563,472578],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[472580,472674]},{"pos":[472768,472778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[472780,472790]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[472793,472878]},{"content":"dragMode","pos":[472890,472898]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[472901,472986]},{"content":"x","pos":[472998,472999]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[473002,473087]},{"content":"y","pos":[473099,473100]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[473103,473188]},{"pos":[473195,473207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[473209,473274]},{"pos":[473280,473297],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[473299,473395]},{"pos":[473485,473495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[473497,473507]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[473510,473595]},{"content":"dragMode","pos":[473607,473615]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[473618,473703]},{"content":"x","pos":[473715,473716]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[473719,473804]},{"content":"y","pos":[473816,473817]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[473820,473905]},{"pos":[473912,473924],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[473926,473991]},{"pos":[473997,474012],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[474014,474084]},{"pos":[474118,474130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[474132,474263]},{"pos":[474269,474283],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Indicates whether to enable or disable the object.","pos":[474285,474335]},{"pos":[474387,474397],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[474399,474404]},{"pos":[474413,474425],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[474427,474475]},{"pos":[474482,474489],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[474491,474566]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[474567,474662]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[474663,474797]},{"pos":[474803,474826],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[474901,474911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[474913,474918]},{"pos":[474927,474939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[474945,474966],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[475017,475027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[475029,475034]},{"pos":[475043,475055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[475061,475072],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[475074,475131]},{"pos":[475172,475182],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[475184,475189]},{"pos":[475198,475210],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[475212,475267]},{"pos":[475273,475288],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[475290,475347]},{"pos":[475392,475402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[475404,475409]},{"pos":[475418,475430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[475432,475465]},{"pos":[475471,475493],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[475495,475546]},{"pos":[475598,475608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[475610,475615]},{"pos":[475624,475636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[475638,475682]},{"pos":[475689,475696],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[475698,475766]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[475772,475842]},{"content":"The second byte contains a value for green.","pos":[475847,475890]},{"content":"The third byte contains a value for blue.","pos":[475895,475936]},{"content":"The high-order byte must be zero.","pos":[475941,475974]},{"content":"The maximum value for a single byte is 255.","pos":[475979,476022]},{"pos":[476028,476047],"content":"Method getCursorPos","linkify":"Method getCursorPos","nodes":[{"content":"Method getCursorPos","pos":[0,19]}]},{"pos":[476091,476103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[476109,476135],"content":"Method getFirstVisibleLine","linkify":"Method getFirstVisibleLine","nodes":[{"content":"Method getFirstVisibleLine","pos":[0,26]}]},{"pos":[476180,476192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[476198,476212],"content":"Method getLine","linkify":"Method getLine","nodes":[{"content":"Method getLine","pos":[0,14]}]},{"pos":[476255,476265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[476267,476273]},{"pos":[476282,476294],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[476300,476319],"content":"Method getLineCount","linkify":"Method getLineCount","nodes":[{"content":"Method getLineCount","pos":[0,19]}]},{"pos":[476357,476369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[476375,476394],"content":"Method getSelection","linkify":"Method getSelection","nodes":[{"content":"Method getSelection","pos":[0,19]}]},{"pos":[476438,476450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[476456,476473],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[476475,476563]},{"pos":[476616,476626],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[476628,476631]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[476634,476704]},{"pos":[476711,476723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[476725,476792]},{"pos":[476798,476819],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[476821,476876]},{"pos":[476920,476932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[476934,476997]},{"pos":[477003,477016],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[477018,477057]},{"pos":[477110,477120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[477122,477127]},{"content":"mode","pos":[477141,477145]},{"pos":[477154,477166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[477168,477204]},{"pos":[477211,477218],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[477220,477273]},{"content":"Calculate the height according to the following table.","pos":[477274,477328]},{"content":"Mode","pos":[477332,477336]},{"content":"Height calculation","pos":[477350,477368]},{"content":"-1 Exact","pos":[477556,477564]},{"content":"The exact height in pixels of the controls is used.","pos":[477574,477625]},{"content":"0 Auto","pos":[477668,477674]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[477686,477775]},{"content":"1 Column height","pos":[477780,477795]},{"content":"The layout of the form determines the height of the control.","pos":[477798,477858]},{"content":"The height and height calculation mode can be set separately.","pos":[477891,477952]},{"pos":[477958,477975],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[477977,478039]},{"pos":[478086,478096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[478098,478103]},{"pos":[478112,478124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[478126,478147]},{"pos":[478154,478161],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[478163,478217]},{"content":"Mode","pos":[478221,478225]},{"content":"Height calculation","pos":[478237,478255]},{"content":"Exact","pos":[478441,478446]},{"content":"The exact height in pixels of the controls is used.","pos":[478457,478508]},{"content":"Auto","pos":[478551,478555]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[478567,478656]},{"content":"Column height","pos":[478661,478674]},{"content":"The layout of the form determines the height of the control.","pos":[478677,478737]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[478770,478855]},{"pos":[478861,478879],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[478881,478920]},{"pos":[478968,478978],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[478980,478985]},{"pos":[478994,479006],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[479008,479029]},{"pos":[479036,479043],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[479045,479135]},{"pos":[479141,479157],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[479159,479199]},{"pos":[479234,479246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[479248,479336]},{"pos":[479343,479350],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[479352,479422]},{"content":"Use the helpText method to set the value of the Help text.","pos":[479423,479481]},{"pos":[479487,479502],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[479504,479608]},{"pos":[479653,479663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[479665,479670]},{"pos":[479679,479691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[479693,479748]},{"pos":[479755,479762],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.","pos":[479764,479837]},{"content":"The Help text must not exceed 250 characters.","pos":[479838,479883]},{"pos":[479889,479911],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[479913,479976]},{"pos":[480028,480038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[480040,480045]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[480048,480115]},{"pos":[480122,480134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[480136,480186]},{"pos":[480192,480203],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[480205,480250]},{"pos":[480280,480292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[480294,480321]},{"pos":[480328,480335],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[480337,480381]},{"pos":[480387,480401],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[480445,480455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[480457,480462]},{"pos":[480471,480483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[480489,480507],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[480548,480560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[480566,480584],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[480586,480652]},{"pos":[480693,480705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[480707,480758]},{"pos":[480765,480772],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[480774,480842]},{"pos":[480848,480867],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[480869,480936]},{"pos":[480978,480990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[480992,481044]},{"pos":[481050,481075],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[481077,481178]},{"pos":[481247,481257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[481259,481276]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[481279,481407]},{"pos":[481414,481426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[481428,481587]},{"pos":[481594,481601],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[481603,481680]},{"content":"FormAllowUserSetup::No 0","pos":[482020,482044]},{"content":"No changes can be made to the control.","pos":[482055,482093]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[482094,482183]},{"content":"FormAllowUserSetup::Restricted 1","pos":[482188,482220]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[482223,482315]},{"content":"The user cannot move the control.","pos":[482316,482349]},{"content":"FormAllowUserSetup::Yes 2","pos":[482356,482381]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[482391,482483]},{"content":"The user can also move the control.","pos":[482484,482519]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[482523,482712]},{"pos":[482718,482732],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[482769,482781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[482787,482800],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[482851,482861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[482863,482868]},{"pos":[482877,482889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[482895,482907],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[482909,482946]},{"pos":[482988,482998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[483000,483005]},{"pos":[483014,483026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[483028,483066]},{"pos":[483073,483080],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[483082,483160]},{"content":"The label property value cannot exceed 250 characters.","pos":[483161,483215]},{"pos":[483221,483242],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[483293,483303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[483305,483310]},{"pos":[483319,483331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[483337,483353],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[483399,483409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[483411,483416]},{"pos":[483425,483437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[483443,483467],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[483521,483531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[483533,483538]},{"pos":[483547,483559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[483565,483581],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[483627,483637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[483639,483644]},{"pos":[483653,483665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[483671,483691],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[483741,483751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[483753,483758]},{"pos":[483767,483779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[483785,483812],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[483869,483879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[483881,483886]},{"pos":[483895,483907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[483913,483930],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[483977,483987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[483989,483994]},{"pos":[484003,484015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[484021,484039],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[484097,484107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[484109,484114]},{"content":"mode","pos":[484128,484132]},{"pos":[484141,484153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[484159,484181],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[484233,484243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[484245,484250]},{"pos":[484259,484271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[484277,484300],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[484353,484363],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[484365,484370]},{"pos":[484379,484391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[484397,484415],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[484471,484481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[484483,484488]},{"pos":[484497,484509],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[484515,484540],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[484637,484647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[484649,484650]},{"content":"y","pos":[484664,484665]},{"content":"button","pos":[484679,484685]},{"content":"Ctrl","pos":[484699,484703]},{"content":"Shift","pos":[484717,484722]},{"pos":[484731,484743],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[484749,484770],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[484863,484873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[484875,484876]},{"content":"y","pos":[484890,484891]},{"content":"button","pos":[484905,484911]},{"content":"Ctrl","pos":[484925,484929]},{"content":"Shift","pos":[484943,484948]},{"pos":[484957,484969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[484975,484994],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[485085,485095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[485097,485098]},{"content":"y","pos":[485112,485113]},{"content":"button","pos":[485127,485133]},{"content":"Ctrl","pos":[485147,485151]},{"content":"Shift","pos":[485165,485170]},{"pos":[485179,485191],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485197,485217],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[485267,485277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[485279,485284]},{"pos":[485293,485305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485311,485332],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[485391,485401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[485403,485408]},{"pos":[485417,485429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485435,485452],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[485509,485519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[485521,485526]},{"content":"mode","pos":[485540,485544]},{"pos":[485553,485565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485571,485592],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[485643,485653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[485655,485660]},{"pos":[485669,485681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485687,485709],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[485761,485771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[485773,485778]},{"pos":[485787,485799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485805,485817],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[485852,485864],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485870,485881],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[485883,485947]},{"pos":[485998,486008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[486010,486015]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[486018,486104]},{"content":"mode","pos":[486116,486120]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[486123,486209]},{"pos":[486216,486228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[486230,486281]},{"pos":[486287,486302],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[486304,486365]},{"pos":[486410,486420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[486422,486427]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[486430,486516]},{"pos":[486523,486535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[486537,486593]},{"pos":[486599,486615],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[486617,486681]},{"pos":[486727,486737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[486739,486744]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[486747,486828]},{"pos":[486835,486847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[486849,486900]},{"pos":[486906,486922],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[486985,486995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[486997,487002]},{"content":"mode","pos":[487016,487020]},{"pos":[487029,487041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487047,487067],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[487126,487136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[487138,487142]},{"pos":[487151,487163],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487169,487190],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[487241,487251],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487253,487258]},{"pos":[487267,487279],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487285,487304],"content":"Method lineFromChar","linkify":"Method lineFromChar","nodes":[{"content":"Method lineFromChar","pos":[0,19]}]},{"pos":[487355,487365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[487367,487376]},{"pos":[487385,487397],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487403,487419],"content":"Method lineIndex","linkify":"Method lineIndex","nodes":[{"content":"Method lineIndex","pos":[0,16]}]},{"pos":[487464,487474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[487476,487482]},{"pos":[487491,487503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487509,487526],"content":"Method lineLength","linkify":"Method lineLength","nodes":[{"content":"Method lineLength","pos":[0,17]}]},{"pos":[487572,487582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[487584,487590]},{"pos":[487599,487611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487617,487636],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[487685,487695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487697,487702]},{"pos":[487711,487723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487729,487746],"content":"Method lookupOnly","linkify":"Method lookupOnly","nodes":[{"content":"Method lookupOnly","pos":[0,17]}]},{"pos":[487801,487811],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487813,487818]},{"pos":[487827,487839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487845,487861],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[487915,487925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487927,487932]},{"pos":[487941,487953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487959,487979],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[487981,488034]},{"pos":[488092,488102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488104,488109]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[488112,488206]},{"pos":[488213,488225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[488227,488300]},{"pos":[488306,488321],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[488359,488371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[488377,488397],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[488399,488456]},{"pos":[488548,488558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[488560,488561]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[488564,488625]},{"content":"y","pos":[488637,488638]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[488641,488702]},{"content":"button","pos":[488714,488720]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[488723,488784]},{"content":"Ctrl","pos":[488796,488800]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[488803,488864]},{"content":"Shift","pos":[488876,488881]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[488884,488945]},{"pos":[488952,488964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[488966,489005]},{"pos":[489012,489019],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[489021,489125]},{"pos":[489131,489147],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[489149,489214]},{"pos":[489302,489312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[489314,489315]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[489318,489379]},{"content":"y","pos":[489391,489392]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[489395,489456]},{"content":"button","pos":[489468,489474]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[489477,489538]},{"content":"Ctrl","pos":[489550,489554]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[489557,489618]},{"content":"Shift","pos":[489630,489635]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[489638,489699]},{"pos":[489706,489718],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[489720,489759]},{"pos":[489766,489773],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[489775,489879]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[489880,490015]},{"pos":[490021,490037],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[490039,490104]},{"pos":[490192,490202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[490204,490205]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[490208,490269]},{"content":"y","pos":[490281,490282]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[490285,490346]},{"content":"button","pos":[490358,490364]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[490367,490428]},{"content":"Ctrl","pos":[490440,490444]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[490447,490508]},{"content":"Shift","pos":[490520,490525]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[490528,490589]},{"pos":[490596,490608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[490610,490649]},{"pos":[490656,490663],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[490665,490769]},{"pos":[490775,490789],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[490791,490863]},{"pos":[490949,490959],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[490961,490962]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[490965,491026]},{"content":"y","pos":[491038,491039]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[491042,491103]},{"content":"button","pos":[491115,491121]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[491124,491185]},{"content":"Ctrl","pos":[491197,491201]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[491204,491265]},{"content":"Shift","pos":[491277,491282]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[491285,491346]},{"pos":[491353,491365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[491367,491406]},{"pos":[491413,491420],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[491422,491526]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[491527,491662]},{"pos":[491668,491684],"content":"Method multiLine","linkify":"Method multiLine","nodes":[{"content":"Method multiLine","pos":[0,16]}]},{"pos":[491738,491748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[491750,491755]},{"pos":[491764,491776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[491782,491793],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[491795,491930]},{"pos":[491971,491981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[491983,491988]},{"pos":[491997,492009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[492011,492075]},{"pos":[492082,492089],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[492091,492185]},{"content":"It must start with a letter.","pos":[492191,492219]},{"content":"It cannot exceed 250 characters.","pos":[492224,492256]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[492261,492315],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[492320,492360]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[492365,492475]},{"pos":[492481,492504],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[492557,492567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492569,492574]},{"pos":[492583,492595],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[492601,492628],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[492680,492692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[492698,492718],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[492720,492765]},{"pos":[492812,492824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[492826,492861]},{"pos":[492867,492887],"content":"Method passwordStyle","linkify":"Method passwordStyle","nodes":[{"content":"Method passwordStyle","pos":[0,20]}]},{"pos":[492945,492955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492957,492962]},{"pos":[492971,492983],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[492989,493007],"content":"Method posFromChar","linkify":"Method posFromChar","nodes":[{"content":"Method posFromChar","pos":[0,18]}]},{"pos":[493063,493073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[493075,493084]},{"pos":[493093,493105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493111,493135],"content":"Method presenceDataField","linkify":"Method presenceDataField","nodes":[{"content":"Method presenceDataField","pos":[0,24]}]},{"pos":[493197,493207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493209,493214]},{"pos":[493223,493235],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493241,493266],"content":"Method presenceDataSource","linkify":"Method presenceDataSource","nodes":[{"content":"Method presenceDataSource","pos":[0,25]}]},{"pos":[493325,493335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493337,493342]},{"pos":[493351,493363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493369,493400],"content":"Method presenceIndicatorAllowed","linkify":"Method presenceIndicatorAllowed","nodes":[{"content":"Method presenceIndicatorAllowed","pos":[0,31]}]},{"pos":[493461,493471],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493473,493478]},{"pos":[493487,493499],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493505,493526],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[493577,493587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493589,493594]},{"pos":[493603,493615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493621,493638],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[493685,493695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493697,493702]},{"pos":[493711,493723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493729,493751],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[493811,493821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493823,493828]},{"pos":[493837,493849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493855,493887],"content":"Method resolveAmbiguousReference","linkify":"Method resolveAmbiguousReference","nodes":[{"content":"Method resolveAmbiguousReference","pos":[0,32]}]},{"pos":[493938,493950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493956,493989],"content":"Method disambiguationLookupTarget","linkify":"Method disambiguationLookupTarget","nodes":[{"content":"Method disambiguationLookupTarget","pos":[0,33]}]},{"pos":[494050,494062],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494068,494102],"content":"Method lookupDisambiguateReference","linkify":"Method lookupDisambiguateReference","nodes":[{"content":"Method lookupDisambiguateReference","pos":[0,34]}]},{"pos":[494180,494190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldBinding","pos":[494192,494204]},{"pos":[494213,494225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494231,494254],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[494307,494317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494319,494324]},{"pos":[494333,494345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494351,494368],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[494415,494425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494427,494432]},{"pos":[494441,494453],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494459,494477],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[494479,494538]},{"pos":[494606,494616],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494618,494623]},{"content":"The ID of the security key to assign to the control; optional.","pos":[494626,494688]},{"pos":[494695,494707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[494709,494808]},{"pos":[494814,494836],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[494838,494878]},{"pos":[494933,494943],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[494945,494955]},{"content":"The ID of the menu to show.","pos":[494958,494985]},{"pos":[494992,495004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[495006,495065]},{"pos":[495071,495087],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[495141,495151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495153,495158]},{"pos":[495167,495179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495185,495196],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[495198,495325]},{"pos":[495374,495384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495386,495391]},{"content":"The value to assign to the skip property of the control; optional.","pos":[495394,495460]},{"pos":[495467,495479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[495481,495587]},{"pos":[495594,495601],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[495603,495798]},{"pos":[495804,495815],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[495870,495880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[495882,495895]},{"pos":[495904,495916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495922,495934],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[495976,495986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495988,495993]},{"pos":[496002,496014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[496020,496031],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[496072,496082],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496084,496089]},{"pos":[496098,496110],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[496116,496130],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[496132,496175]},{"pos":[496208,496220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[496222,496324]},{"pos":[496331,496338],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[496340,496412]},{"pos":[496418,496428],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[496430,496492]},{"pos":[496542,496552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496554,496559]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[496562,496646]},{"content":"mode","pos":[496658,496662]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[496665,496749]},{"pos":[496756,496768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[496770,496819]},{"pos":[496825,496839],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[496841,496900]},{"pos":[496944,496954],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496956,496961]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[496964,497048]},{"pos":[497055,497067],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[497069,497123]},{"pos":[497129,497144],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[497146,497208]},{"pos":[497253,497263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497265,497270]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[497273,497352]},{"pos":[497359,497371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[497373,497422]},{"pos":[497428,497439],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[497480,497490],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497492,497497]},{"pos":[497506,497518],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[497524,497540],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[497594,497604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497606,497611]},{"pos":[497620,497632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[497638,497665],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[497729,497739],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[497741,497745]},{"pos":[497754,497766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[497772,497787],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[497789,497832]},{"pos":[497877,497887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497889,497894]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[497897,497969]},{"pos":[497976,497988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[497990,498020]},{"pos":[498026,498045],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[498047,498095]},{"pos":[498144,498154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[498156,498161]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[498164,498241]},{"pos":[498248,498260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[498262,498297]},{"pos":[498303,498323],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[498325,498384]},{"pos":[498434,498444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[498446,498451]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[498454,498542]},{"pos":[498549,498561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[498563,498609]},{"pos":[498615,498633],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[498635,498718]},{"pos":[498766,498776],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[498778,498783]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[498786,498866]},{"pos":[498873,498885],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[498887,498943]},{"pos":[498949,498974],"content":"Method userFastTabSummary","linkify":"Method userFastTabSummary","nodes":[{"content":"Method userFastTabSummary","pos":[0,25]}]},{"pos":[499029,499039],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499041,499046]},{"pos":[499055,499067],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[499073,499090],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[499092,499144]},{"pos":[499191,499201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499203,499208]},{"content":"The user height for the control; optional.","pos":[499211,499253]},{"pos":[499260,499272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[499274,499313]},{"pos":[499319,499334],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[499336,499418]},{"pos":[499463,499473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499475,499480]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[499483,499562]},{"pos":[499569,499581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[499583,499638]},{"pos":[499645,499652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[499654,499824]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[499825,499900]},{"content":"This method lets you programmatically determine and set the value.","pos":[499901,499967]},{"pos":[499973,499996],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[499998,500054]},{"pos":[500107,500117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500119,500124]},{"content":"The organization container to set for the control; optional.","pos":[500127,500187]},{"pos":[500194,500206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[500208,500251]},{"pos":[500257,500278],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[500280,500334]},{"pos":[500385,500395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500397,500402]},{"content":"The organization sibling to set for the control; optional.","pos":[500405,500463]},{"pos":[500470,500482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[500484,500525]},{"pos":[500531,500552],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[500554,500603]},{"pos":[500654,500664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500666,500671]},{"content":"The user label text to set for the control; optional.","pos":[500674,500727]},{"pos":[500734,500746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[500748,500784]},{"pos":[500790,500814],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[500816,500869]},{"pos":[500923,500933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500935,500940]},{"content":"The user security level to set for the control; optional.","pos":[500943,501000]},{"pos":[501007,501019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[501021,501061]},{"pos":[501067,501082],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[501084,501232]},{"pos":[501277,501287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[501289,501294]},{"content":"The value to assign to the userSkip property; optional.","pos":[501297,501352]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[501353,501448]},{"pos":[501455,501467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[501469,501538]},{"pos":[501544,501560],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[501562,501639]},{"pos":[501685,501695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[501697,501702]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[501705,501771]},{"pos":[501778,501790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[501792,501921]},{"pos":[501928,501935],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[501937,502031]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[502032,502148],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[502149,502299]},{"pos":[502305,502320],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[502358,502370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[502376,502398],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[502400,502461]},{"pos":[502530,502540],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502542,502547]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[502550,502627]},{"content":"mode","pos":[502639,502643]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[502646,502723]},{"pos":[502730,502742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[502744,502792]},{"pos":[502798,502824],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[502826,502885]},{"pos":[502950,502960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[502962,502966]},{"pos":[502975,502987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[502989,503043]},{"pos":[503049,503076],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[503078,503139]},{"pos":[503196,503206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503208,503213]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[503216,503294]},{"pos":[503301,503313],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[503315,503363]},{"pos":[503369,503388],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[503437,503447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503449,503454]},{"pos":[503463,503475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[503481,503495],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[503497,503567]},{"pos":[503619,503629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503631,503636]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[503639,503711]},{"pos":[503718,503730],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[503732,503781]},{"pos":[503787,503799],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[503801,503839]},{"pos":[503891,503901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503903,503908]},{"content":"mode","pos":[503922,503926]},{"pos":[503935,503947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[503949,503984]},{"pos":[503991,503998],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[504000,504053]},{"content":"Calculate the width according to the following table.","pos":[504054,504107]},{"content":"Mode","pos":[504111,504115]},{"content":"Width calculation","pos":[504128,504145]},{"content":"-1 Exact","pos":[504331,504339]},{"content":"The exact width in pixels of the controls is used.","pos":[504348,504398]},{"content":"0 Auto","pos":[504441,504447]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[504458,504546]},{"content":"1 Column width","pos":[504551,504565]},{"content":"The layout of the form determines the width of the control.","pos":[504568,504627]},{"content":"The width and width calculation mode can be set separately.","pos":[504660,504719]},{"pos":[504725,504741],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[504743,504805]},{"pos":[504851,504861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504863,504868]},{"pos":[504877,504889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[504891,504952]},{"pos":[504959,504966],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[504968,505021]},{"content":"Mode","pos":[505025,505029]},{"content":"Width calculation","pos":[505040,505057]},{"content":"Exact","pos":[505241,505246]},{"content":"The exact width in pixels of the controls is used.","pos":[505256,505306]},{"content":"Auto","pos":[505349,505353]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[505364,505452]},{"content":"Column width","pos":[505457,505469]},{"content":"The layout of the form determines the width of the control.","pos":[505472,505531]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[505564,505647]},{"pos":[505653,505670],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[505672,505710]},{"pos":[505757,505767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[505769,505774]},{"pos":[505783,505795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[505797,505832]},{"pos":[505839,505846],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[505848,505921]},{"pos":[505927,505949],"content":"Method presenceRefresh","linkify":"Method presenceRefresh","nodes":[{"content":"Method presenceRefresh","pos":[0,22]}]},{"pos":[505990,506005],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[506087,506097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[506099,506105]},{"content":"e","pos":[506119,506120]},{"pos":[506128,506144],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[506146,506188]},{"pos":[506223,506240],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[506242,506312]},{"pos":[506402,506412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[506414,506415]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[506418,506479]},{"content":"y","pos":[506491,506492]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[506495,506556]},{"content":"button","pos":[506568,506574]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[506577,506638]},{"content":"Ctrl","pos":[506650,506654]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[506657,506718]},{"content":"Shift","pos":[506730,506735]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[506738,506799]},{"pos":[506805,506829],"content":"Method performTypeLookup","linkify":"Method performTypeLookup","nodes":[{"content":"Method performTypeLookup","pos":[0,24]}]},{"pos":[506935,506945],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userType","pos":[506947,506955]},{"content":"arrayIndex","pos":[506969,506979]},{"content":"company","pos":[506993,507000]},{"pos":[507008,507024],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[507107,507117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[507119,507125]},{"content":"e","pos":[507139,507140]},{"pos":[507148,507159],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[507189,507218],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[507336,507346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[507348,507364]},{"content":"objectMethodToCall","pos":[507378,507396]},{"content":"overrideObject","pos":[507410,507424]},{"pos":[507432,507446],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[507448,507488]},{"pos":[507521,507538],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[507622,507632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[507634,507640]},{"content":"e","pos":[507654,507655]},{"pos":[507663,507682],"content":"Method setSelection","linkify":"Method setSelection","nodes":[{"content":"Method setSelection","pos":[0,19]}]},{"pos":[507755,507765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndexFrom","pos":[507767,507780]},{"content":"charIndexTo","pos":[507794,507805]},{"pos":[507813,507832],"content":"Method scrollCursor","linkify":"Method scrollCursor","nodes":[{"content":"Method scrollCursor","pos":[0,19]}]},{"pos":[507870,507882],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[507913,507931],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[507933,508004]},{"pos":[508055,508065],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[508067,508076]},{"content":"The string value to use to filter data; optional.","pos":[508079,508128]},{"pos":[508134,508156],"content":"Method performDBLookup","linkify":"Method performDBLookup","nodes":[{"content":"Method performDBLookup","pos":[0,22]}]},{"pos":[508264,508274],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[508276,508283]},{"content":"tableId","pos":[508297,508304]},{"content":"company","pos":[508318,508325]},{"pos":[508333,508346],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[508394,508404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[508406,508415]},{"pos":[508423,508440],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[508524,508534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[508536,508542]},{"content":"e","pos":[508556,508557]},{"pos":[508565,508578],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[508580,508680]},{"pos":[508762,508772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[508774,508784]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[508787,508872]},{"content":"dragMode","pos":[508884,508892]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[508895,508980]},{"content":"x","pos":[508992,508993]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[508996,509081]},{"content":"y","pos":[509093,509094]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[509097,509182]},{"pos":[509188,509205],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[509207,509261]},{"pos":[509297,509318],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[509320,509341]},{"pos":[509381,509392],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[509394,509446]},{"pos":[509476,509491],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[509493,509539]},{"pos":[509573,509589],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[509591,509687]},{"pos":[509722,509732],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[509734,509767]},{"pos":[509796,509808],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[509810,509864]},{"pos":[509895,509914],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[510000,510010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[510012,510018]},{"content":"e","pos":[510032,510033]},{"pos":[510041,510060],"content":"Method setCursorPos","linkify":"Method setCursorPos","nodes":[{"content":"Method setCursorPos","pos":[0,19]}]},{"pos":[510111,510121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[510123,510124]},{"content":"y","pos":[510138,510139]},{"pos":[510147,510171],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[510228,510238],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[510240,510244]},{"pos":[510252,510270],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[510355,510365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[510367,510373]},{"content":"e","pos":[510387,510388]},{"pos":[510396,510413],"content":"Method lineScroll","linkify":"Method lineScroll","nodes":[{"content":"Method lineScroll","pos":[0,17]}]},{"pos":[510464,510474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dx","pos":[510476,510478]},{"content":"dy","pos":[510492,510494]},{"pos":[510502,510516],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[510597,510607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[510609,510615]},{"content":"e","pos":[510629,510630]},{"pos":[510638,510659],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[510661,510730]},{"pos":[510792,510802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[510804,510809]},{"content":"The preferred height of the control.","pos":[510812,510848]},{"content":"height","pos":[510860,510866]},{"content":"The preferred height of the control.","pos":[510869,510905]},{"pos":[510911,510934],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[510936,510977]},{"pos":[511019,511036],"content":"Method textChange","linkify":"Method textChange","nodes":[{"content":"Method textChange","pos":[0,17]}]},{"pos":[511072,511086],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[511119,511132],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[511164,511180],"content":"Method pasteText","linkify":"Method pasteText","nodes":[{"content":"Method pasteText","pos":[0,16]}]},{"pos":[511249,511259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pasteStr","pos":[511261,511269]},{"content":"InsertSel","pos":[511283,511292]},{"pos":[511300,511318],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[511403,511413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[511415,511421]},{"content":"e","pos":[511435,511436]},{"pos":[511444,511455],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[511457,511555]},{"pos":[511641,511651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[511653,511663]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[511666,511751]},{"content":"dragMode","pos":[511763,511771]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[511774,511859]},{"content":"x","pos":[511871,511872]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[511875,511960]},{"content":"y","pos":[511972,511973]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[511976,512061]},{"pos":[512067,512082],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[512084,512114]},{"pos":[512148,512162],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[512164,512225]},{"pos":[512259,512266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[512268,512396]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[512397,512501]}],"content":"---\n# required metadata\n\ntitle: F Classes - FormReferenceControl to FormStringControl | Microsoft Docs\ndescription: API reference for classes from FormReferenceControl to FormStringControl.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2016-03-08 23:43:07\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 63733\nms.assetid: 6b54b6e3-3048-4c46-aa68-fec54ba71dfc\nms.region: Global\n# ms.industry: \nms.author: robinr\n\n---\n\n# F Classes - FormReferenceControl to FormStringControl\n\nAPI reference for classes from FormReferenceControl to FormStringControl.\n\nClass FormReferenceControl\n--------------------------\n\n    class FormReferenceControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                           | Description                                                                                                                                                             |\n|----------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                   | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                      | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])         | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public str countryRegionCodes(\\[str value\\])                                     | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                      |                                                                                                                                                                         |\n| public int dataField()                                                           |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                       | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                         | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int displayTarget(\\[int value\\])                                          | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                               | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public boolean enabled(\\[boolean value\\])                                        | Determines whether to enable or disable the object.                                                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                 |                                                                                                                                                                         |\n| public FilterValue filterValue(FieldBinding fieldBinding)                        |                                                                                                                                                                         |\n| public int height(int value, \\[int mode\\])                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                             | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                            | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpText(\\[str value\\])                                               | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                        | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public boolean isResolvingReference()                                            |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                               | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                              | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public Common lookupReference()                                                  |                                                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                      |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                   | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                       |                                                                                                                                                                         |\n| public FormObjectSet referenceDataSource()                                       |                                                                                                                                                                         |\n| public FieldId referenceField(\\[FieldId value\\])                                 |                                                                                                                                                                         |\n| public str replacementFieldGroup(\\[str value\\])                                  |                                                                                                                                                                         |\n| public Common resolveReference()                                                 |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                        | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public boolean skip(\\[boolean value\\])                                           | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int top(int value, \\[int mode\\])                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                               | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                   |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                               | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                           | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                          | Gets or sets the number of user data items for the control.                                                                                                             |\n| public Int64 value(\\[Int64 value\\])                                              |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                     | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                           | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                   | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                        | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                              | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                             | Gets or sets the width of the control.                                                                                                                                  |\n| ::public static boolean CanUserAdd(FormDataSource formDataSource, str fieldName) |                                                                                                                                                                         |\n| public void resolveChanges()                                                     |                                                                                                                                                                         |\n| public void performFormLookup(xFormRun form)                                     |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public int dataField()\n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method filterValue\n\n    public FilterValue filterValue(FieldBinding fieldBinding)\n\n#### Parameters\n\nfieldBinding  \n\n#### Return Value\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method isResolvingReference\n\n    public boolean isResolvingReference()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method lookupReference\n\n    public Common lookupReference()\n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method referenceDataSource\n\n    public FormObjectSet referenceDataSource()\n\n#### Return Value\n\n### Method referenceField\n\n    public FieldId referenceField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replacementFieldGroup\n\n    public str replacementFieldGroup([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolveReference\n\n    public Common resolveReference()\n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method value\n\n    public Int64 value([Int64 value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method CanUserAdd\n\n    public static boolean CanUserAdd(FormDataSource formDataSource, str fieldName)\n\n#### Parameters\n\nformDataSource  \n\n<!-- -->\n\nfieldName  \n\n#### Return Value\n\n### Method resolveChanges\n\n    public void resolveChanges()\n\n### Method performFormLookup\n\n    public void performFormLookup(xFormRun form)\n\n#### Parameters\n\nform  \n\n## Class FormReferenceGroupControl\n    class FormReferenceGroupControl extends FormReferenceControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                                                                                                                             |\n|---------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |                                                                                                                                                                         |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                                                                                                                         |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |                                                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                                      | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                         | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                                      | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                           | Gets or sets the background color of the control.                                                                                                                       |\n| public Image backgroundImage(\\[Image image\\], \\[int drawMode\\])                                                     |                                                                                                                                                                         |\n| public int backStyle(\\[int value\\])                                                                                 | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                                  | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                                      | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int border(\\[int value\\])                                                                                    | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public container calcControlSize(int chars, int lines)                                                              | Retrieves the size of the control.                                                                                                                                      |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |                                                                                                                                                                         |\n| public boolean canContain(FormControl control)                                                                      |                                                                                                                                                                         |\n| public int characterSet(\\[int value\\])                                                                              | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                               | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                                    | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public boolean contains(FormControl control)                                                                        |                                                                                                                                                                         |\n| public int controlCount()                                                                                           |                                                                                                                                                                         |\n| public FormControl controlNum(int controlNo)                                                                        |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                        | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                         |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                          | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                            | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int displayTarget(\\[int value\\])                                                                             | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                                  | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                               | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enableChilds(\\[boolean enable\\])                                                                     |                                                                                                                                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                           | Determines whether to enable or disable the object.                                                                                                                     |\n| public boolean expand(\\[boolean expand\\])                                                                           |                                                                                                                                                                         |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                                    |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                                      | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                                  | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                           | Gets or sets the text color for the control to use.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                          | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                                     | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                              | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                                  | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                       |                                                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                           | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                                   | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                        |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                        | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                                       | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean isValid()                                                                                            |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                            |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                                     | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                                 |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                                 |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                                |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                                     |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                                       |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                    |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                      |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                                      |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public boolean leave()                                                                                              |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                            | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                                  | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                                 | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean mandatory(\\[boolean value\\])                                                                         |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                           |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                                      | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                             |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                                  | Retrieves the parent control for the control.                                                                                                                           |\n| public str previewPartRef(\\[str value\\])                                                                            |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                                |                                                                                                                                                                         |\n| public FieldId referenceField(\\[FieldId value\\])                                                                    |                                                                                                                                                                         |\n| public str replacementFieldGroup(\\[str value\\])                                                                     |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                          | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                         |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                              | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                        |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                                     |                                                                                                                                                                         |\n| public str toolTip()                                                                                                | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                             | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                                   | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                                  | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                         |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                                  | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                              | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                             | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                               | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                                | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                                  | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                          | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                            | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                            | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                         | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                                  | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                                 | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public boolean validate()                                                                                           |                                                                                                                                                                         |\n| public Int64 value(\\[Int64 value\\])                                                                                 |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                                      | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                           | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                                                                                                                                  |\n| public void lostFocus()                                                                                             | Indicates that the control has lost focus.                                                                                                                              |\n| public void displayControl()                                                                                        | Displays the control.                                                                                                                                                   |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                                         |\n| public void jumpRef()                                                                                               |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |                                                                                                                                                                         |\n| public void cut()                                                                                                   | Cuts the contents of the control.                                                                                                                                       |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                            |                                                                                                                                                                         |\n| public void dragLeave()                                                                                             | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void filter(\\[str filterStr\\])                                                                               |                                                                                                                                                                         |\n| public void arrange()                                                                                               |                                                                                                                                                                         |\n| public void enter()                                                                                                 |                                                                                                                                                                         |\n| public void paste()                                                                                                 | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                       |                                                                                                                                                                         |\n| public void setFocus()                                                                                              | Sets the focus on the control.                                                                                                                                          |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                          |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                              | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void mouseLeave()                                                                                            | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void prefColumnSize(int width, int height)                                                                   | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void undo()                                                                                                  |                                                                                                                                                                         |\n| public void gotFocus()                                                                                              | Indicates that the control has received focus.                                                                                                                          |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                                         |\n| public void lookup()                                                                                                |                                                                                                                                                                         |\n| public void resetUserSetting()                                                                                      | Resets the user settings for the control.                                                                                                                               |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                           |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                                         |\n| public void copy()                                                                                                  | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void context()                                                                                               | Shows the shortcut menu for the control.                                                                                                                                |\n| public void endDrag()                                                                                               | Is called when the user has finished dragging a form control.                                                                                                           |\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backgroundImage\n\n    public Image backgroundImage([Image image], [int drawMode])\n\n#### Parameters\n\nimage  \n\n<!-- -->\n\ndrawMode  \n\n#### Return Value\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value | Description |\n|-------|-------------|\n| 0     | Auto        |\n| 1     | 3D          |\n| 2     | Single line |\n| 3     | Flat        |\n| 4     | None        |\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table.\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value | Description   |\n|-------|---------------|\n| 222   | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                 |\n|-------|-----------------------|\n| 0     | Default               |\n| 1     | The Windows palette   |\n| 2     | The true-color scheme |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave, the dragOver, and the dragOverEx to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enableChilds\n\n    public boolean enableChilds([boolean enable])\n\n#### Parameters\n\nenable  \n\n#### Return Value\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method expand\n\n    public boolean expand([boolean expand])\n\n#### Parameters\n\nexpand  \n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterId  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method referenceField\n\n    public FieldId referenceField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replacementFieldGroup\n\n    public str replacementFieldGroup([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method value\n\n    public Int64 value([Int64 value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method arrange\n\n    public void arrange()\n\n### Method enter\n\n    public void enter()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method undo\n\n    public void undo()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lookup\n\n    public void lookup()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n## Class FormReferenceObject\n    class FormReferenceObject extends FormDataObject\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                    | Description                                                                                                                                                             |\n|---------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public int allowAdd(\\[int value\\])                                        | Sets or returns the value of the allowAdd property for the form data object.                                                                                            |\n| public boolean allowEdit(\\[boolean value\\])                               | Indicates whether the user can change the contents of the control.                                                                                                      |\n| public FieldId dataField(\\[FieldId value\\])                               |                                                                                                                                                                         |\n| public boolean enabled(\\[boolean value\\])                                 | Indicates whether to enable or disable the object.                                                                                                                      |\n| public Common lookupReference(FormReferenceControl formReferenceControl)  |                                                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                               | Sets or returns a value that indicates whether the data field is mandatory.                                                                                             |\n| public Common resolveReference(FormReferenceControl formReferenceControl) |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                    | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control that is associated with the data source. |\n| public boolean visible(\\[boolean value\\])                                 | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n\n### Method allowAdd\n\nSets or returns the value of the allowAdd property for the form data object.\n\n    public int allowAdd([int value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned to the allowEdit property.\n\n#### Return Value\n\nA FormAllowAdd enumeration value that indicates whether the allowAdd property is set to No, Restricted, or Yes.\n\n### Method allowEdit\n\nIndicates whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enabled\n\nIndicates whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method lookupReference\n\n    public Common lookupReference(FormReferenceControl formReferenceControl)\n\n#### Parameters\n\nformReferenceControl  \n\n#### Return Value\n\n### Method mandatory\n\nSets or returns a value that indicates whether the data field is mandatory.\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned to the mandatory property of the field.\n\n#### Return Value\n\ntrue if the field is mandatory; otherwise, false.\n\n### Method resolveReference\n\n    public Common resolveReference(FormReferenceControl formReferenceControl)\n\n#### Parameters\n\nformReferenceControl  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control that is associated with the data source.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned to the skip property of the data source that is associated with the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control associated with the data source; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control. Controls are skipped if the skip value of either the control or the data source is true.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned to the visibility setting for the control.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false. The default is true.\n\n#### Remarks\n\nControls that refer to a data source field are visible only when the visible property is set to true on both the control and the underlying data source field. By setting the property on the data source field instead of the control, you make sure that the field is handled consistently throughout the form. This makes upgrades easier.\n\n## Class FormRichTextControl\n    class FormRichTextControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int charFromPos(int x, int y)                                                                        |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public int dataFieldArrayIndex()                                                                            |                                                                                                                                                                         |\n| public FieldName dataFieldName()                                                                            |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int find(\\[str findStr\\], \\[int start\\], \\[int end\\], \\[int flags\\])                                 |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public container getCursorPos()                                                                             |                                                                                                                                                                         |\n| public int getFirstVisibleLine()                                                                            |                                                                                                                                                                         |\n| public str getLine(int lineNo)                                                                              |                                                                                                                                                                         |\n| public int getLineCount()                                                                                   |                                                                                                                                                                         |\n| public container getSelection()                                                                             |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                                                         |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int lineFromChar(int charIndex)                                                                      |                                                                                                                                                                         |\n| public int lineIndex(int lineNo)                                                                            |                                                                                                                                                                         |\n| public int lineLength(int lineNo)                                                                           |                                                                                                                                                                         |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public boolean multiLine(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public container posFromChar(int charIndex)                                                                 |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                                                         |\n| public int replaceText(\\[str findStr\\], \\[str replaceStr\\], \\[int start\\], \\[int end\\], \\[int flags\\])      |                                                                                                                                                                         |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userFastTabSummary(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void performFormLookup(xFormRun form)                                                                |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void scrollCursor()                                                                                  |                                                                                                                                                                         |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void setSelection(int charIndexFrom, int charIndexTo)                                                |                                                                                                                                                                         |\n| public void pasteText(str pasteStr, \\[boolean InsertSel\\])                                                  |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])         |                                                                                                                                                                         |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void setCursorPos(int x, int y)                                                                      |                                                                                                                                                                         |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void lineScroll(int dx, int dy)                                                                      |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])       |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void textChange()                                                                                    |                                                                                                                                                                         |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows.\n\n| Value | Description |\n|-------|-------------|\n| 0     | Auto        |\n| 1     | 3D          |\n| 2     | Single line |\n| 3     | Flat        |\n| 4     | None        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table.\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value | Description   |\n|-------|---------------|\n| 222   | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method charFromPos\n\n    public int charFromPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                 |\n|-------|-----------------------|\n| 0     | Default               |\n| 1     | The Windows palette   |\n| 2     | The true-color scheme |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataFieldArrayIndex\n\n    public int dataFieldArrayIndex()\n\n#### Return Value\n\n### Method dataFieldName\n\n    public FieldName dataFieldName()\n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method find\n\n    public int find([str findStr], [int start], [int end], [int flags])\n\n#### Parameters\n\nfindStr  \n\n<!-- -->\n\nstart  \n\n<!-- -->\n\nend  \n\n<!-- -->\n\nflags  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method getCursorPos\n\n    public container getCursorPos()\n\n#### Return Value\n\n### Method getFirstVisibleLine\n\n    public int getFirstVisibleLine()\n\n#### Return Value\n\n### Method getLine\n\n    public str getLine(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method getLineCount\n\n    public int getLineCount()\n\n#### Return Value\n\n### Method getSelection\n\n    public container getSelection()\n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.         | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineFromChar\n\n    public int lineFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method lineIndex\n\n    public int lineIndex(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lineLength\n\n    public int lineLength(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method multiLine\n\n    public boolean multiLine([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method posFromChar\n\n    public container posFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceText\n\n    public int replaceText([str findStr], [str replaceStr], [int start], [int end], [int flags])\n\n#### Parameters\n\nfindStr  \n\n<!-- -->\n\nreplaceStr  \n\n<!-- -->\n\nstart  \n\n<!-- -->\n\nend  \n\n<!-- -->\n\nflags  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userFastTabSummary\n\n    public int userFastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method lookup\n\n    public void lookup()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method performFormLookup\n\n    public void performFormLookup(xFormRun form)\n\n#### Parameters\n\nform  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method scrollCursor\n\n    public void scrollCursor()\n\n### Method undo\n\n    public void undo()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method setSelection\n\n    public void setSelection(int charIndexFrom, int charIndexTo)\n\n#### Parameters\n\ncharIndexFrom  \n\n<!-- -->\n\ncharIndexTo  \n\n### Method pasteText\n\n    public void pasteText(str pasteStr, [boolean InsertSel])\n\n#### Parameters\n\npasteStr  \n\n<!-- -->\n\nInsertSel  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method enter\n\n    public void enter()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method performTypeLookup\n\n    public void performTypeLookup([int userType], [int arrayIndex], [SelectableDataArea company])\n\n#### Parameters\n\nuserType  \n\n<!-- -->\n\narrayIndex  \n\n<!-- -->\n\ncompany  \n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setCursorPos\n\n    public void setCursorPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method lineScroll\n\n    public void lineScroll(int dx, int dy)\n\n#### Parameters\n\ndx  \n\n<!-- -->\n\ndy  \n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method performDBLookup\n\n    public void performDBLookup([FieldId fieldId], [TableId tableId], [SelectableDataArea company])\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\ntableId  \n\n<!-- -->\n\ncompany  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method textChange\n\n    public void textChange()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method jumpRef\n\n    public void jumpRef()\n\n## Class FormRowDisplayOption\n    class FormRowDisplayOption extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                            | Description |\n|-------------------------------------------------------------------|-------------|\n| public int backColor(\\[int color\\])                               |             |\n| public boolean fontBold(\\[boolean bold\\])                         |             |\n| public boolean fontItalic(\\[boolean italic\\])                     |             |\n| public boolean fontStrikethrough(\\[boolean strikethrough\\])       |             |\n| public boolean fontUnderline(\\[boolean underline\\])               |             |\n| public int textColor(\\[int color\\])                               |             |\n| public void clear()                                               |             |\n| public void clearTextColor()                                      |             |\n| public void affectedElementsByField(\\[FieldId fieldId\\], VarArg ) |             |\n| public void affectedElementsByControl(\\[int controlId\\], VarArg ) |             |\n| public void clearBackColor()                                      |             |\n\n### Method backColor\n\n    public int backColor([int color])\n\n#### Parameters\n\ncolor  \n\n#### Return Value\n\n### Method fontBold\n\n    public boolean fontBold([boolean bold])\n\n#### Parameters\n\nbold  \n\n#### Return Value\n\n### Method fontItalic\n\n    public boolean fontItalic([boolean italic])\n\n#### Parameters\n\nitalic  \n\n#### Return Value\n\n### Method fontStrikethrough\n\n    public boolean fontStrikethrough([boolean strikethrough])\n\n#### Parameters\n\nstrikethrough  \n\n#### Return Value\n\n### Method fontUnderline\n\n    public boolean fontUnderline([boolean underline])\n\n#### Parameters\n\nunderline  \n\n#### Return Value\n\n### Method textColor\n\n    public int textColor([int color])\n\n#### Parameters\n\ncolor  \n\n#### Return Value\n\n### Method clear\n\n    public void clear()\n\n### Method clearTextColor\n\n    public void clearTextColor()\n\n### Method affectedElementsByField\n\n    public void affectedElementsByField([FieldId fieldId], VarArg )\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\n  \n\n### Method affectedElementsByControl\n\n    public void affectedElementsByControl([int controlId], VarArg )\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\n  \n\n### Method clearBackColor\n\n    public void clearBackColor()\n\n## Class FormSegment\n    class FormSegment extends Object\n\nThe FormSegment class is used to represent a segment in the SegmentedEntry control.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                          | Description                            |\n|-----------------------------------------------------------------|----------------------------------------|\n| public str text()                                               | Gets the current text of the segment.  |\n| public boolean allowEdit(\\[boolean value\\])                     |                                        |\n| public str description(\\[str description\\])                     |                                        |\n| public boolean enabled(\\[boolean value\\])                       |                                        |\n| public int getIndex()                                           |                                        |\n| public str name()                                               |                                        |\n| public SegmentedEntryState state(\\[SegmentedEntryState state\\]) |                                        |\n| public str value(\\[str value\\])                                 | Gets the current value of the segment. |\n\n### Method text\n\nGets the current text of the segment.\n\n    public str text()\n\n#### Return Value\n\nThe current text of the segment.\n\n#### Remarks\n\nThis method always returns the current text of the segment, even while it is being modified. To retrieve the last value that was persisted for the segment, use the value method.\n\n### Method allowEdit\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method description\n\n    public str description([str description])\n\n#### Parameters\n\ndescription  \n\n#### Return Value\n\n### Method enabled\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method getIndex\n\n    public int getIndex()\n\n#### Return Value\n\n### Method name\n\n    public str name()\n\n#### Return Value\n\n### Method state\n\n    public SegmentedEntryState state([SegmentedEntryState state])\n\n#### Parameters\n\nstate  \n\n#### Return Value\n\n### Method value\n\nGets the current value of the segment.\n\n    public str value([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the segment.\n\n#### Remarks\n\nThis method always returns the current persisted value of the segment, even while it is being modified. To retrieve the current text of the control while it is being modified, use the text method.\n\n## Class FormSegmentedEntryControl\n    class FormSegmentedEntryControl extends FormReferenceControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                                                |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public FieldId referenceField(\\[FieldId value\\])                                                            |                                                                                                                                                                         |\n| public str replacementFieldGroup(\\[str value\\])                                                             |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public Int64 value(\\[Int64 value\\])                                                                         |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows.\n\n| Value | Description |\n|-------|-------------|\n| 0     | Auto        |\n| 1     | 3D          |\n| 2     | Single line |\n| 3     | Flat        |\n| 4     | None        |\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                        |\n|-------|------------------------------|\n| 0     | Default                      |\n| 1     | The MicrosoftWindows palette |\n| 2     | The true-color scheme        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key being assigned to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to use.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave Method, the dragOver Method, and the dragOverEx Method to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the valueparameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThis handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method referenceField\n\n    public FieldId referenceField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replacementFieldGroup\n\n    public str replacementFieldGroup([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method value\n\n    public Int64 value([Int64 value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method undo\n\n    public void undo()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method enter\n\n    public void enter()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method lookup\n\n    public void lookup()\n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n## Class FormsPreloadingManager\n    class FormsPreloadingManager extends Object\n\nThe FormsPreloadingManager class manages the preloading of forms, including workspace association and resource pressure management.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                              | Description                                                                                  |\n|-----------------------------------------------------|----------------------------------------------------------------------------------------------|\n| ::private static FormsPreloadingManager construct() |                                                                                              |\n| public void workspaceActivated()                    | Sets the preloading workspace affinity to the last activated workspace.                      |\n| private void new()                                  | Initializes a new instance of the FormsPreloadingManager class.                              |\n| public void updateState()                           | Queues forms for loading, handles high resource pressure, and updates other internal states. |\n\n### Method construct\n\n    private static FormsPreloadingManager construct()\n\n#### Return Value\n\n### Method workspaceActivated\n\nSets the preloading workspace affinity to the last activated workspace.\n\n    public void workspaceActivated()\n\n#### Remarks\n\nThis method is typically called on a timer after a workspace has been activated. Call this method directly to force the workspace affinity to change immediately.\n\n### Method new\n\nInitializes a new instance of the FormsPreloadingManager class.\n\n    private void new()\n\n### Method updateState\n\nQueues forms for loading, handles high resource pressure, and updates other internal states.\n\n    public void updateState()\n\n#### Remarks\n\nThis method is typically called on a timer during idle periods. Call this method directly to force a state update during non-idle periods, such as when long-running X++ code is running.\n\n## Class FormStaticTextControl\n    class FormStaticTextControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Indicates whether the control background can be transparent.                                                                                                            |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                                                             |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source for use by the control or the form.                                                                                                          |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Indicates whether to enable or disable drag-and-drop operations for the control.                                                                                        |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nIndicates whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table.\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value | Description   |\n|-------|---------------|\n| 222   | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                 |\n|-------|-----------------------|\n| 0     | Default               |\n| 1     | The Windows palette   |\n| 2     | The true-color scheme |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source for use by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to use.\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nIndicates whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if drag-and-drop operations are enabled; otherwise, false.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n## Class FormStringControl\n    class FormStringControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Indicates whether to align the control.                                                                                                                                 |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Indicates whether the user can change the contents of the control.                                                                                                      |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Indicates whether the system can declare a member variable that has the same name as the control.                                                                       |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Indicates whether the control background can be transparent.                                                                                                            |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                                                             |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int changeCase(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int charFromPos(int x, int y)                                                                        |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public int dataFieldArrayIndex()                                                                            |                                                                                                                                                                         |\n| public FieldName dataFieldName()                                                                            |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                                                |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Indicates whether to enable or disable drag-and-drop operations for the control.                                                                                        |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Indicates whether to enable or disable the object.                                                                                                                      |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public container getCursorPos()                                                                             |                                                                                                                                                                         |\n| public int getFirstVisibleLine()                                                                            |                                                                                                                                                                         |\n| public str getLine(int lineNo)                                                                              |                                                                                                                                                                         |\n| public int getLineCount()                                                                                   |                                                                                                                                                                         |\n| public container getSelection()                                                                             |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                                                         |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int lineFromChar(int charIndex)                                                                      |                                                                                                                                                                         |\n| public int lineIndex(int lineNo)                                                                            |                                                                                                                                                                         |\n| public int lineLength(int lineNo)                                                                           |                                                                                                                                                                         |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean lookupOnly(\\[boolean value\\])                                                                |                                                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public boolean multiLine(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public boolean passwordStyle(\\[boolean value\\])                                                             |                                                                                                                                                                         |\n| public container posFromChar(int charIndex)                                                                 |                                                                                                                                                                         |\n| public FieldId presenceDataField(\\[FieldId value\\])                                                         |                                                                                                                                                                         |\n| public int presenceDataSource(\\[AnyType value\\])                                                            |                                                                                                                                                                         |\n| public int presenceIndicatorAllowed(\\[int value\\])                                                          |                                                                                                                                                                         |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                                                         |\n| public str resolveAmbiguousReference()                                                                      |                                                                                                                                                                         |\n| public FieldBinding disambiguationLookupTarget()                                                            |                                                                                                                                                                         |\n| public str lookupDisambiguateReference(FieldBinding fieldBinding)                                           |                                                                                                                                                                         |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userFastTabSummary(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void presenceRefresh()                                                                               |                                                                                                                                                                         |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])         |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void setSelection(int charIndexFrom, int charIndexTo)                                                |                                                                                                                                                                         |\n| public void scrollCursor()                                                                                  |                                                                                                                                                                         |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])       |                                                                                                                                                                         |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void setCursorPos(int x, int y)                                                                      |                                                                                                                                                                         |\n| public void performFormLookup(xFormRun form)                                                                |                                                                                                                                                                         |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void lineScroll(int dx, int dy)                                                                      |                                                                                                                                                                         |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void textChange()                                                                                    |                                                                                                                                                                         |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| public void pasteText(str pasteStr, \\[boolean InsertSel\\])                                                  |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n\n### Method alignControl\n\nIndicates whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nIndicates whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nIndicates whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nIndicates whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows.\n\n| Value | Description |\n|-------|-------------|\n| 0     | Auto        |\n| 1     | 3D          |\n| 2     | Single line |\n| 3     | Flat        |\n| 4     | None        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method changeCase\n\n    public int changeCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table.\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value | Description   |\n|-------|---------------|\n| 222   | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method charFromPos\n\n    public int charFromPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                 |\n|-------|-----------------------|\n| 0     | Default               |\n| 1     | The Windows palette   |\n| 2     | The true-color scheme |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataFieldArrayIndex\n\n    public int dataFieldArrayIndex()\n\n#### Return Value\n\n### Method dataFieldName\n\n    public FieldName dataFieldName()\n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nIndicates whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nIndicates whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method getCursorPos\n\n    public container getCursorPos()\n\n#### Return Value\n\n### Method getFirstVisibleLine\n\n    public int getFirstVisibleLine()\n\n#### Return Value\n\n### Method getLine\n\n    public str getLine(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method getLineCount\n\n    public int getLineCount()\n\n#### Return Value\n\n### Method getSelection\n\n    public container getSelection()\n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineFromChar\n\n    public int lineFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method lineIndex\n\n    public int lineIndex(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lineLength\n\n    public int lineLength(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lookupOnly\n\n    public boolean lookupOnly([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method multiLine\n\n    public boolean multiLine([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method passwordStyle\n\n    public boolean passwordStyle([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method posFromChar\n\n    public container posFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method presenceDataField\n\n    public FieldId presenceDataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method presenceDataSource\n\n    public int presenceDataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method presenceIndicatorAllowed\n\n    public int presenceIndicatorAllowed([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resolveAmbiguousReference\n\n    public str resolveAmbiguousReference()\n\n#### Return Value\n\n### Method disambiguationLookupTarget\n\n    public FieldBinding disambiguationLookupTarget()\n\n#### Return Value\n\n### Method lookupDisambiguateReference\n\n    public str lookupDisambiguateReference(FieldBinding fieldBinding)\n\n#### Parameters\n\nfieldBinding  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userFastTabSummary\n\n    public int userFastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method presenceRefresh\n\n    public void presenceRefresh()\n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method performTypeLookup\n\n    public void performTypeLookup([int userType], [int arrayIndex], [SelectableDataArea company])\n\n#### Parameters\n\nuserType  \n\n<!-- -->\n\narrayIndex  \n\n<!-- -->\n\ncompany  \n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method undo\n\n    public void undo()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setSelection\n\n    public void setSelection(int charIndexFrom, int charIndexTo)\n\n#### Parameters\n\ncharIndexFrom  \n\n<!-- -->\n\ncharIndexTo  \n\n### Method scrollCursor\n\n    public void scrollCursor()\n\n### Method enter\n\n    public void enter()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method performDBLookup\n\n    public void performDBLookup([FieldId fieldId], [TableId tableId], [SelectableDataArea company])\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\ntableId  \n\n<!-- -->\n\ncompany  \n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setCursorPos\n\n    public void setCursorPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n### Method performFormLookup\n\n    public void performFormLookup(xFormRun form)\n\n#### Parameters\n\nform  \n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lineScroll\n\n    public void lineScroll(int dx, int dy)\n\n#### Parameters\n\ndx  \n\n<!-- -->\n\ndy  \n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method textChange\n\n    public void textChange()\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method lookup\n\n    public void lookup()\n\n### Method pasteText\n\n    public void pasteText(str pasteStr, [boolean InsertSel])\n\n#### Parameters\n\npasteStr  \n\n<!-- -->\n\nInsertSel  \n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n"}