{"nodes":[{"pos":[32,58],"content":"T Classes | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"T Classes | Microsoft Docs","pos":[0,26]}]},{"pos":[72,120],"content":"System API classes that start with the letter T.","needQuote":true,"needEscape":true,"nodes":[{"content":"System API classes that start with the letter T.","pos":[0,48]}]},{"pos":[534,543],"content":"T Classes","linkify":"T Classes","nodes":[{"content":"T Classes","pos":[0,9]}]},{"pos":[545,565],"content":"Class TableExtension","linkify":"Class TableExtension","nodes":[{"content":"Class TableExtension","pos":[0,20]}]},{"pos":[633,640],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[646,654],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[660,667],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[671,677]},{"content":"Description","pos":[731,742]},{"content":"public void new()","pos":[911,928]},{"content":"Initializes a new instance of the TableExtension class.","pos":[971,1026]},{"content":"public void modifiedField(Common record, FieldId fieldId)","pos":[1031,1088]},{"content":"public void defaultRow(Common record)","pos":[1151,1188]},{"content":"public void defaultField(Common record, FieldId fieldId)","pos":[1271,1327]},{"pos":[1394,1404],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the TableExtension class.","pos":[1406,1461]},{"pos":[1490,1510],"content":"Method modifiedField","linkify":"Method modifiedField","nodes":[{"content":"Method modifiedField","pos":[0,20]}]},{"pos":[1580,1590],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[1592,1598]},{"content":"fieldId","pos":[1612,1619]},{"pos":[1627,1644],"content":"Method defaultRow","linkify":"Method defaultRow","nodes":[{"content":"Method defaultRow","pos":[0,17]}]},{"pos":[1694,1704],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[1706,1712]},{"pos":[1720,1739],"content":"Method defaultField","linkify":"Method defaultField","nodes":[{"content":"Method defaultField","pos":[0,19]}]},{"pos":[1808,1818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[1820,1826]},{"content":"fieldId","pos":[1840,1847]},{"pos":[1854,1870],"content":"Class TextBuffer","linkify":"Class TextBuffer","nodes":[{"content":"Class TextBuffer","pos":[0,16]}]},{"content":"The TextBuffer class manages arbitrary text file content, and generates and manipulates text.","pos":[1908,2001]},{"pos":[2007,2014],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class features various string operations, a simple clipboard, and a file interface.","pos":[2016,2104]},{"pos":[2110,2118],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[2427,2434],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[2438,2444]},{"content":"Description","pos":[2511,2522]},{"content":"public boolean accept(str searchText)","pos":[2796,2833]},{"content":"public int decryptOld(int cryptKey)","pos":[2975,3010]},{"content":"public boolean find(str searchText, <ph id=\"ph1\">\\[</ph>int start<ph id=\"ph2\">\\]</ph>)","pos":[3154,3204],"source":"public boolean find(str searchText, \\[int start\\])"},{"content":"Searches the TextBuffer object for any occurrence of a string expression.","pos":[3227,3300]},{"content":"public boolean fromClipboard()","pos":[3333,3363]},{"content":"Replaces the content of the TextBuffer object with the content of the clipboard.","pos":[3406,3486]},{"content":"public boolean fromFile(str filename, <ph id=\"ph1\">\\[</ph>int encoding<ph id=\"ph2\">\\]</ph>)","pos":[3512,3567],"source":"public boolean fromFile(str filename, \\[int encoding\\])"},{"content":"Replaces the content of a TextBuffer object with the content of the specified file.","pos":[3585,3668]},{"content":"public str getText()","pos":[3691,3711]},{"content":"Retrieves the current content of the TextBuffer object.","pos":[3764,3819]},{"content":"public int getValue()","pos":[3870,3891]},{"content":"public boolean ignoreCase(<ph id=\"ph1\">\\[</ph>boolean ignoreCase<ph id=\"ph2\">\\]</ph>)","pos":[4049,4098],"source":"public boolean ignoreCase(\\[boolean ignoreCase\\])"},{"content":"public boolean isNext(str searchText)","pos":[4228,4265]},{"content":"public int matchLen()","pos":[4407,4428]},{"content":"Returns the string length of the first match in the TextBuffer object.","pos":[4480,4550]},{"content":"public int matchPos()","pos":[4586,4607]},{"content":"Returns the character position of the first occurrence of the search string in the TextBuffer object.","pos":[4659,4760]},{"content":"public str nextToken(<ph id=\"ph1\">\\[</ph>boolean includeWholeLine<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>str stopAtChar<ph id=\"ph4\">\\]</ph>)","pos":[4765,4835],"source":"public str nextToken(\\[boolean includeWholeLine\\], \\[str stopAtChar\\])"},{"content":"public int numLines()","pos":[4944,4965]},{"content":"Retrieves the number of lines in the TextBuffer object.","pos":[5017,5072]},{"content":"public boolean regularExpressions(<ph id=\"ph1\">\\[</ph>boolean useRegularExpressions<ph id=\"ph2\">\\]</ph>)","pos":[5123,5191],"source":"public boolean regularExpressions(\\[boolean useRegularExpressions\\])"},{"content":"public int size()","pos":[5302,5319]},{"content":"public str subStr(int start, int length)","pos":[5481,5521]},{"content":"Retrieves part of the content of the TextBuffer object (a substring).","pos":[5554,5623]},{"content":"public boolean toFile(str filename, <ph id=\"ph1\">\\[</ph>int encoding<ph id=\"ph2\">\\]</ph>)","pos":[5660,5713],"source":"public boolean toFile(str filename, \\[int encoding\\])"},{"content":"Saves the content of the TextBuffer object to a file.","pos":[5733,5786]},{"content":"public str token()","pos":[5839,5857]},{"content":"public str toString()","pos":[6018,6039]},{"content":"Returns a string that represents the current object.","pos":[6091,6143]},{"content":"::public static int strHashKey(str sourceString)","pos":[6197,6245]},{"content":"public void new()","pos":[6376,6393]},{"content":"Initializes a new instance of the TextBuffer class.","pos":[6449,6500]},{"content":"public void removeChar(str charList)","pos":[6555,6591]},{"content":"public void toClipboard()","pos":[6734,6759]},{"content":"Copies the content of a TextBuffer object to the clipboard.","pos":[6807,6866]},{"content":"public void insert(str insertString, int position)","pos":[6913,6963]},{"content":"public void setText(str string)","pos":[7092,7123]},{"content":"Sets the content of the TextBuffer object to the specified string, overwriting any existing content.","pos":[7165,7265]},{"content":"public void appendText(str string)","pos":[7271,7305]},{"content":"Appends a string to the content of the TextBuffer object.","pos":[7344,7401]},{"content":"public void replace(str findString, str replaceString)","pos":[7450,7504]},{"content":"public void delete(int start, int length)","pos":[7629,7670]},{"pos":[7811,7824],"content":"Method accept","linkify":"Method accept","nodes":[{"content":"Method accept","pos":[0,13]}]},{"pos":[7874,7884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchText","pos":[7886,7896]},{"pos":[7905,7917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7923,7940],"content":"Method decryptOld","linkify":"Method decryptOld","nodes":[{"content":"Method decryptOld","pos":[0,17]}]},{"pos":[7988,7998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cryptKey","pos":[8000,8008]},{"pos":[8017,8029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8035,8046],"content":"Method find","linkify":"Method find","nodes":[{"content":"Method find","pos":[0,11]}]},{"content":"Searches the TextBuffer object for any occurrence of a string expression.","pos":[8048,8121]},{"pos":[8182,8192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchText","pos":[8194,8204]},{"content":"A numeric expression that sets the starting position for each search; optional.","pos":[8207,8286]},{"content":"If this parameter is omitted, the search starts at the first character position.","pos":[8287,8367]},{"content":"start","pos":[8379,8384]},{"content":"A numeric expression that sets the starting position for each search; optional.","pos":[8387,8466]},{"content":"If this parameter is omitted, the search starts at the first character position.","pos":[8467,8547]},{"pos":[8554,8566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if searchText is found; otherwise, false.","pos":[8568,8614]},{"pos":[8621,8628],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method performs a textual, case-insensitive comparison by using regular expressions.","pos":[8630,8719]},{"content":"For more information, see the match function.","pos":[8720,8765]},{"content":"Case-insensitivity can be turned off by using the ignoreCase method.","pos":[8766,8834]},{"content":"Regular expressions can be turned off by using the regularExpressions method.","pos":[8835,8912]},{"pos":[8919,8927],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example searches the TextBuffer object for all occurrences of a specified string and prints the position at which the match is found.","pos":[8929,9076]},{"pos":[9408,9428],"content":"Method fromClipboard","linkify":"Method fromClipboard","nodes":[{"content":"Method fromClipboard","pos":[0,20]}]},{"content":"Replaces the content of the TextBuffer object with the content of the clipboard.","pos":[9430,9510]},{"pos":[9553,9565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the replacement was successful; otherwise, false.","pos":[9567,9624]},{"pos":[9631,9639],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[10265,10280],"content":"Method fromFile","linkify":"Method fromFile","nodes":[{"content":"Method fromFile","pos":[0,15]}]},{"content":"Replaces the content of a TextBuffer object with the content of the specified file.","pos":[10282,10365]},{"pos":[10431,10441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[10443,10451]},{"content":"The encoding option to use; optional.","pos":[10454,10491]},{"content":"encoding","pos":[10503,10511]},{"content":"The encoding option to use; optional.","pos":[10514,10551]},{"pos":[10558,10570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the file operation was successful; otherwise, false.","pos":[10572,10632]},{"pos":[10639,10646],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following are possible values for the encoding parameter that are supplied by the FileEncoding system enumeration:","pos":[10648,10766]},{"content":"ACP","pos":[10772,10775]},{"content":"UTF8","pos":[10780,10784]},{"content":"UTF16BE","pos":[10789,10796]},{"content":"UTF16LE","pos":[10801,10808]},{"content":"GB18030","pos":[10813,10820]},{"content":"AUTO","pos":[10825,10829]},{"content":"If the file operation is unsuccessful, the TextBuffer object remains unchanged.","pos":[10831,10910]},{"content":"If an attacker can control input to the fromFile method, a security risk exists.","pos":[10911,10991]},{"content":"Therefore, this method runs under Code Access Security.","pos":[10992,11047]},{"content":"Calls to this method on the server require permission from the ExecutePermission class.","pos":[11048,11135]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[11136,11271]},{"pos":[11277,11291],"content":"Method getText","linkify":"Method getText","nodes":[{"content":"Method getText","pos":[0,14]}]},{"content":"Retrieves the current content of the TextBuffer object.","pos":[11293,11348]},{"pos":[11381,11393],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the content of TextBuffer object.","pos":[11395,11451]},{"pos":[11458,11465],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The TextBuffer can contain new lines, which are then present in the returned string.","pos":[11467,11551]},{"pos":[11557,11572],"content":"Method getValue","linkify":"Method getValue","nodes":[{"content":"Method getValue","pos":[0,15]}]},{"pos":[11606,11618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11624,11641],"content":"Method ignoreCase","linkify":"Method ignoreCase","nodes":[{"content":"Method ignoreCase","pos":[0,17]}]},{"pos":[11701,11711],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ignoreCase","pos":[11713,11723]},{"pos":[11732,11744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11750,11763],"content":"Method isNext","linkify":"Method isNext","nodes":[{"content":"Method isNext","pos":[0,13]}]},{"pos":[11813,11823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchText","pos":[11825,11835]},{"pos":[11844,11856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11862,11877],"content":"Method matchLen","linkify":"Method matchLen","nodes":[{"content":"Method matchLen","pos":[0,15]}]},{"content":"Returns the string length of the first match in the TextBuffer object.","pos":[11879,11949]},{"pos":[11983,11995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The length of the match that is found; 0 (zero) if no match is found.","pos":[11997,12066]},{"pos":[12073,12080],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used as part of a text search (see the find method).","pos":[12082,12149]},{"pos":[12155,12170],"content":"Method matchPos","linkify":"Method matchPos","nodes":[{"content":"Method matchPos","pos":[0,15]}]},{"content":"Returns the character position of the first occurrence of the search string in the TextBuffer object.","pos":[12172,12273]},{"pos":[12307,12319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The position at which the match is found; 0 (zero) if no match is found.","pos":[12321,12393]},{"pos":[12400,12407],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used as part of a text search (see the find method).","pos":[12409,12476]},{"pos":[12482,12498],"content":"Method nextToken","linkify":"Method nextToken","nodes":[{"content":"Method nextToken","pos":[0,16]}]},{"pos":[12577,12587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"includeWholeLine","pos":[12589,12605]},{"content":"stopAtChar","pos":[12619,12629]},{"pos":[12638,12650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12656,12671],"content":"Method numLines","linkify":"Method numLines","nodes":[{"content":"Method numLines","pos":[0,15]}]},{"content":"Retrieves the number of lines in the TextBuffer object.","pos":[12673,12728]},{"pos":[12762,12774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of lines in the content.","pos":[12776,12811]},{"pos":[12818,12825],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Lines are separated by newlines ('<ph id=\"ph1\">\\\\</ph>n').","pos":[12827,12867],"source":"Lines are separated by newlines ('\\\\n')."},{"pos":[12874,12882],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[13072,13097],"content":"Method regularExpressions","linkify":"Method regularExpressions","nodes":[{"content":"Method regularExpressions","pos":[0,25]}]},{"pos":[13176,13186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"useRegularExpressions","pos":[13188,13209]},{"pos":[13218,13230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13236,13247],"content":"Method size","linkify":"Method size","nodes":[{"content":"Method size","pos":[0,11]}]},{"pos":[13277,13289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13295,13308],"content":"Method subStr","linkify":"Method subStr","nodes":[{"content":"Method subStr","pos":[0,13]}]},{"content":"Retrieves part of the content of the TextBuffer object (a substring).","pos":[13310,13379]},{"pos":[13432,13442],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"start","pos":[13444,13449]},{"content":"The length of the desired substring.","pos":[13452,13488]},{"content":"length","pos":[13500,13506]},{"content":"The length of the desired substring.","pos":[13509,13545]},{"pos":[13552,13564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the specified part of the TextBuffer object content.","pos":[13566,13641]},{"pos":[13648,13655],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When you specify the start position for substring, use 1 for the first character in the content, 2 for the second character, and so on.","pos":[13657,13792]},{"pos":[13799,13807],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[14050,14063],"content":"Method toFile","linkify":"Method toFile","nodes":[{"content":"Method toFile","pos":[0,13]}]},{"content":"Saves the content of the TextBuffer object to a file.","pos":[14065,14118]},{"pos":[14182,14192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[14194,14202]},{"content":"encoding","pos":[14216,14224]},{"pos":[14233,14245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the operation is successful; otherwise, false.","pos":[14247,14301]},{"pos":[14308,14315],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the specified file already exists, it is overwritten without confirmation.","pos":[14317,14394]},{"content":"If an attacker can control input to the toFile method, a security risk exists.","pos":[14395,14473]},{"content":"Therefore, this method runs under Code Access Security.","pos":[14474,14529]},{"content":"Calls to this method on the server require permission from the ExecutePermission class.","pos":[14530,14617]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[14618,14753]},{"pos":[14759,14771],"content":"Method token","linkify":"Method token","nodes":[{"content":"Method token","pos":[0,12]}]},{"pos":[14802,14814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14820,14835],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that represents the current object.","pos":[14837,14889]},{"pos":[14923,14935],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that represents the current object.","pos":[14937,14981]},{"pos":[14988,14995],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation returns the class name of the object.","pos":[14997,15061]},{"content":"The method can be overridden in a derived class so that it returns values that are meaningful for that type.","pos":[15062,15170]},{"content":"For example, an instance of the SysMethodInfo class returns the method name and type of the method, such as instance or static.","pos":[15171,15298]},{"pos":[15304,15321],"content":"Method strHashKey","linkify":"Method strHashKey","nodes":[{"content":"Method strHashKey","pos":[0,17]}]},{"pos":[15380,15390],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sourceString","pos":[15392,15404]},{"pos":[15413,15425],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15431,15441],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the TextBuffer class.","pos":[15443,15494]},{"pos":[15523,15540],"content":"Method removeChar","linkify":"Method removeChar","nodes":[{"content":"Method removeChar","pos":[0,17]}]},{"pos":[15589,15599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charList","pos":[15601,15609]},{"pos":[15617,15635],"content":"Method toClipboard","linkify":"Method toClipboard","nodes":[{"content":"Method toClipboard","pos":[0,18]}]},{"content":"Copies the content of a TextBuffer object to the clipboard.","pos":[15637,15696]},{"pos":[15733,15746],"content":"Method insert","linkify":"Method insert","nodes":[{"content":"Method insert","pos":[0,13]}]},{"pos":[15809,15819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"insertString","pos":[15821,15833]},{"content":"position","pos":[15847,15855]},{"pos":[15863,15877],"content":"Method setText","linkify":"Method setText","nodes":[{"content":"Method setText","pos":[0,14]}]},{"content":"Sets the content of the TextBuffer object to the specified string, overwriting any existing content.","pos":[15879,15979]},{"pos":[16023,16033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[16035,16041]},{"content":"A string that contains the new text for the TextBuffer object.","pos":[16044,16106]},{"pos":[16113,16120],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the TextBuffer object contains any content, it is overwritten by the new content.","pos":[16122,16206]},{"pos":[16213,16221],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[16385,16402],"content":"Method appendText","linkify":"Method appendText","nodes":[{"content":"Method appendText","pos":[0,17]}]},{"content":"Appends a string to the content of the TextBuffer object.","pos":[16404,16461]},{"pos":[16508,16518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[16520,16526]},{"content":"The string to append.","pos":[16529,16550]},{"pos":[16557,16565],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[16763,16777],"content":"Method replace","linkify":"Method replace","nodes":[{"content":"Method replace","pos":[0,14]}]},{"pos":[16844,16854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"findString","pos":[16856,16866]},{"content":"replaceString","pos":[16880,16893]},{"pos":[16901,16914],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[16968,16978],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"start","pos":[16980,16985]},{"content":"length","pos":[16999,17005]},{"pos":[17012,17024],"content":"Class TextIo","linkify":"Class TextIo","nodes":[{"content":"Class TextIo","pos":[0,12]}]},{"content":"The TextIo class provides functionality for reading and writing text files.","pos":[17059,17134]},{"pos":[17140,17147],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"TextIO replaces AsciiIO to provide support for non-ANSI code page file I/O.","pos":[17149,17224]},{"content":"The TextIO constructor has an additional optional parameter to set the code page of the file.","pos":[17225,17318]},{"content":"The TextIO.new method has an optional argument that specifies the code page of the file.","pos":[17319,17407]},{"content":"The default value is UTF-16LE (the Microsoft Windows native Unicode representation).","pos":[17408,17492]},{"content":"It is best to use this in most instances, especially if end-users might edit the file in a text editor outside Microsoft Dynamics AX.","pos":[17493,17626]},{"content":"For more information, see TextIo.new.","pos":[17627,17664]},{"content":"When files are read, TextIO examines the first few bytes of the file for a byte-order mark (BOM) and automatically handles UTF-8, UTF-16LE, and UTF-16BE.","pos":[17665,17818]},{"content":"If no BOM is found, the file is assumed to be in the ANSI Code Page (ACP) format.","pos":[17819,17900]},{"pos":[17906,17914],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[17920,17927],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[17931,17937]},{"content":"Description","pos":[17991,18002]},{"content":"public str inFieldDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[18289,18331],"source":"public str inFieldDelimiter(\\[str value\\])"},{"content":"Gets or sets the character that is used for the field delimiter of an input file represented by a TextIO object.","pos":[18349,18461]},{"content":"public str inRecordDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[18468,18511],"source":"public str inRecordDelimiter(\\[str value\\])"},{"content":"Gets or sets the character that is used for the record delimiter of an input file represented by a TextIO object.","pos":[18528,18641]},{"content":"public int inRecordLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18647,18687],"source":"public int inRecordLength(\\[int value\\])"},{"content":"Gets or sets the record length for an input file.","pos":[18707,18756]},{"content":"public str outFieldDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[18826,18869],"source":"public str outFieldDelimiter(\\[str value\\])"},{"content":"Gets or sets the character that is used for the field delimiter of an output file represented by a TextIO object.","pos":[18886,18999]},{"content":"public str outRecordDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[19005,19049],"source":"public str outRecordDelimiter(\\[str value\\])"},{"content":"Gets or sets the character that is used for the record delimiter of an output file represented by a TextIO object.","pos":[19065,19179]},{"content":"public container read()","pos":[19184,19207]},{"content":"Reads the next full record from a TextIO object.","pos":[19244,19292]},{"content":"public IO<ph id=\"ph1\">\\_</ph>Status status()","pos":[19363,19389],"source":"public IO\\_Status status()"},{"content":"Retrieves the status of the last operation performed on a TextIo object.","pos":[19423,19495]},{"content":"public boolean write(VarArg values)","pos":[19542,19577]},{"content":"Writes data to a file represented by a TextIO object.","pos":[19602,19655]},{"content":"public boolean writeChar(int int)","pos":[19721,19754]},{"content":"Writes a Unicode character to a file.","pos":[19781,19818]},{"content":"public boolean writeExp(container data)","pos":[19900,19939]},{"content":"Writes the contents of a container to a file represented by a TextIO object.","pos":[19960,20036]},{"content":"public boolean writeRaw(str data)","pos":[20079,20112]},{"content":"Reserved.","pos":[20139,20148]},{"content":"public void new(str filename, str mode, <ph id=\"ph1\">\\[</ph>int codepage<ph id=\"ph2\">\\]</ph>)","pos":[20258,20315],"source":"public void new(str filename, str mode, \\[int codepage\\])"},{"content":"Creates a new instance of the TextIO class.","pos":[20318,20361]},{"content":"public void finalize()","pos":[20437,20459]},{"content":"Closes the file and, if data was written, flushes the file buffers to disk.","pos":[20497,20572]},{"pos":[20619,20642],"content":"Method inFieldDelimiter","linkify":"Method inFieldDelimiter","nodes":[{"content":"Method inFieldDelimiter","pos":[0,23]}]},{"content":"Gets or sets the character that is used for the field delimiter of an input file represented by a TextIO object.","pos":[20644,20756]},{"pos":[20809,20819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[20821,20826]},{"content":"The character to be used as the field delimiter; optional.","pos":[20829,20887]},{"pos":[20894,20906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character used as the field delimiter.","pos":[20908,20950]},{"pos":[20957,20964],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To set the field delimiter for an output file, use","pos":[20966,21016]},{"pos":[21023,21031],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example sets the field delimiter for an input file to '<ph id=\"ph1\">\\\\</ph>r<ph id=\"ph2\">\\\\</ph>n'.","pos":[21033,21110],"source":"The following example sets the field delimiter for an input file to '\\\\r\\\\n'."},{"pos":[21264,21288],"content":"Method inRecordDelimiter","linkify":"Method inRecordDelimiter","nodes":[{"content":"Method inRecordDelimiter","pos":[0,24]}]},{"content":"Gets or sets the character that is used for the record delimiter of an input file represented by a TextIO object.","pos":[21290,21403]},{"pos":[21457,21467],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[21469,21474]},{"content":"The character to be used as the record delimiter; optional.","pos":[21477,21536]},{"pos":[21543,21555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character used as the record delimiter.","pos":[21557,21600]},{"pos":[21607,21614],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To set the record delimiter for an output file, use the .","pos":[21616,21673]},{"pos":[21680,21688],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example sets the record delimiter to 128.","pos":[21690,21745]},{"pos":[22339,22360],"content":"Method inRecordLength","linkify":"Method inRecordLength","nodes":[{"content":"Method inRecordLength","pos":[0,21]}]},{"content":"Gets or sets the record length for an input file.","pos":[22362,22411]},{"pos":[22462,22472],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22474,22479]},{"content":"The record length for the input file; optional.","pos":[22482,22529]},{"pos":[22536,22548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The record length for the input file.","pos":[22550,22587]},{"pos":[22594,22601],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For files that have a fixed-length format, use the inRecordLength property to ensure that no more than the specified number of characters are read for each record.If the record format is overruled by a specified inRecordDelimiter property value, that is the inRecordDelimiter value is met before the fixed length is read, the record is accepted, and no further data is read.","pos":[22603,22977]},{"content":"To ensure that a fixed number of characters are read, set the inRecordDelimiter property value to an empty string.","pos":[22978,23092]},{"content":"When no inRecordDelimiter property value is found, the inRecordDelimiter property value is the maximum limit of characters to read.","pos":[23093,23224]},{"content":"Set the inRecordDelimiter property value to zero to disable the record length check.","pos":[23225,23309]},{"pos":[23316,23324],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example sets the record length to 128.","pos":[23326,23378]},{"pos":[23972,23996],"content":"Method outFieldDelimiter","linkify":"Method outFieldDelimiter","nodes":[{"content":"Method outFieldDelimiter","pos":[0,24]}]},{"content":"Gets or sets the character that is used for the field delimiter of an output file represented by a TextIO object.","pos":[23998,24111]},{"pos":[24165,24175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[24177,24182]},{"content":"The character to be used as the field delimiter; optional.","pos":[24185,24243]},{"pos":[24250,24262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character used as the field delimiter.","pos":[24264,24306]},{"pos":[24313,24320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To set the field delimiter for an input file, use the .","pos":[24322,24377]},{"pos":[24384,24392],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example sets the field delimiter to ' ' (nothing) for an output file.","pos":[24394,24477]},{"pos":[24742,24767],"content":"Method outRecordDelimiter","linkify":"Method outRecordDelimiter","nodes":[{"content":"Method outRecordDelimiter","pos":[0,25]}]},{"content":"Gets or sets the character that is used for the record delimiter of an output file represented by a TextIO object.","pos":[24769,24883]},{"pos":[24938,24948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[24950,24955]},{"content":"The character to be used as the record delimiter; optional.","pos":[24958,25017]},{"pos":[25024,25036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character used as the record delimiter.","pos":[25038,25081]},{"pos":[25088,25095],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To set the record delimiter for an input file, use the .","pos":[25097,25153]},{"pos":[25160,25168],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example sets the record delimiter for an output file to '<ph id=\"ph1\">\\\\</ph>r<ph id=\"ph2\">\\\\</ph>n'.","pos":[25170,25249],"source":"The following example sets the record delimiter for an output file to '\\\\r\\\\n'."},{"pos":[25514,25525],"content":"Method read","linkify":"Method read","nodes":[{"content":"Method read","pos":[0,11]}]},{"content":"Reads the next full record from a TextIO object.","pos":[25527,25575]},{"pos":[25611,25623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that holds one record.","pos":[25625,25659]},{"pos":[25666,25673],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Each entry in the container equals one field in the record.","pos":[25675,25734]},{"content":"The definition of the next full record is controlled by the inFieldDelimiter, inRecordDelimiter, and inRecordLength properties.","pos":[25735,25862]},{"content":"These properties have default values that allow input and output of the most common formats.","pos":[25863,25955]},{"content":"It might be necessary to adjust the properties by using the inFieldDelimiter, inRecordDelimiter, and inRecordLength methods.","pos":[25956,26080]},{"pos":[26087,26095],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example reads a record from a file and uses the conpeek function to extract values from the record.","pos":[26097,26210]},{"pos":[26991,27004],"content":"Method status","linkify":"Method status","nodes":[{"content":"Method status","pos":[0,13]}]},{"content":"Retrieves the status of the last operation performed on a TextIo object.","pos":[27006,27078]},{"pos":[27116,27128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status of the last operation.","pos":[27130,27163]},{"pos":[27170,27178],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example throws an error if a file does not exist or if the last operation on the file did not have a status of the IO<ph id=\"ph1\">\\_</ph>Status::Ok enumeration value.","pos":[27180,27342],"source":"The following example throws an error if a file does not exist or if the last operation on the file did not have a status of the IO\\_Status::Ok enumeration value."},{"pos":[27549,27561],"content":"Method write","linkify":"Method write","nodes":[{"content":"Method write","pos":[0,12]}]},{"content":"Writes data to a file represented by a TextIO object.","pos":[27563,27616]},{"pos":[27664,27674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"values","pos":[27676,27682]},{"content":"The values to write to the file.","pos":[27685,27717]},{"content":"The values can be of different data types.","pos":[27718,27760]},{"pos":[27767,27779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the write operation succeeds; otherwise, false.","pos":[27781,27836]},{"pos":[27843,27850],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the write operation fails, can be used to ascertain the cause.","pos":[27852,27917]},{"content":"The write method accepts a variable number of arguments.","pos":[27918,27974]},{"content":"Each value is put into the output record as a field.","pos":[27975,28027]},{"content":"The fields are separated by the field delimiter specified by the .","pos":[28028,28094]},{"content":"Each record is separated by the delimiter specified by the .","pos":[28095,28155]},{"content":"To write complete containers, use the .","pos":[28156,28195]},{"pos":[28201,28217],"content":"Method writeChar","linkify":"Method writeChar","nodes":[{"content":"Method writeChar","pos":[0,16]}]},{"content":"Writes a Unicode character to a file.","pos":[28219,28256]},{"pos":[28302,28312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"int","pos":[28314,28317]},{"pos":[28326,28338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the write operation succeeds; otherwise, false.","pos":[28340,28395]},{"pos":[28402,28409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the write operation fails, the TextIO.status method can be used to check for the cause.","pos":[28411,28501]},{"content":"To write multiple values or to write data of different types to a file, use the TextIO.write method.","pos":[28502,28602]},{"pos":[28608,28623],"content":"Method writeExp","linkify":"Method writeExp","nodes":[{"content":"Method writeExp","pos":[0,15]}]},{"content":"Writes the contents of a container to a file represented by a TextIO object.","pos":[28625,28701]},{"pos":[28753,28763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[28765,28769]},{"content":"The container that has data to write to the file.","pos":[28772,28821]},{"pos":[28828,28840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the write operation succeeds; otherwise, false.","pos":[28842,28897]},{"pos":[28904,28911],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the write operation fails, the TextIo.status Method can be used to ascertain the cause.","pos":[28913,29003]},{"content":"Entries in the container are separated by the delimiter set by the outFieldDelimiter method.","pos":[29004,29096]},{"content":"Containers are separated by the delimiter set by the outRecordDelimiter method.","pos":[29097,29176]},{"pos":[29182,29197],"content":"Method writeRaw","linkify":"Method writeRaw","nodes":[{"content":"Method writeRaw","pos":[0,15]}]},{"content":"Reserved.","pos":[29199,29208]},{"pos":[29254,29264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[29266,29270]},{"pos":[29279,29291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29297,29307],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new instance of the TextIO class.","pos":[29309,29352]},{"pos":[29420,29430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[29432,29440]},{"content":"The code page number for the character set to be read from or written to the file.","pos":[29443,29525]},{"content":"The default value is 1200 (UTF-16LE).","pos":[29526,29563]},{"content":"This parameter is optional.","pos":[29564,29591]},{"content":"Following are the most common values: For more information about these options, see the list of http://go.microsoft.com/fwlink/?LinkID=78282&amp;clcid=0x409.","pos":[29592,29745],"source":" Following are the most common values: For more information about these options, see the list of http://go.microsoft.com/fwlink/?LinkID=78282&clcid=0x409."},{"content":"An error is reported if an invalid code page is requested.","pos":[29746,29804]},{"content":"Notice that a code page is reported as \"invalid\" if it is not installed on the computer (different code pages may be installed on the client and server).","pos":[29805,29958]},{"content":"For example, specifying code page 1253 for Greek fails unless the computer's ACP is Greek or Greek language support has been loaded by using Control Panel <ph id=\"ph1\">&amp;gt;</ph> Regional Options.","pos":[29959,30136],"source":" For example, specifying code page 1253 for Greek fails unless the computer's ACP is Greek or Greek language support has been loaded by using Control Panel &gt; Regional Options."},{"content":"mode","pos":[30148,30152]},{"content":"The code page number for the character set to be read from or written to the file.","pos":[30155,30237]},{"content":"The default value is 1200 (UTF-16LE).","pos":[30238,30275]},{"content":"This parameter is optional.","pos":[30276,30303]},{"content":"Following are the most common values: For more information about these options, see the list of http://go.microsoft.com/fwlink/?LinkID=78282&amp;clcid=0x409.","pos":[30304,30457],"source":" Following are the most common values: For more information about these options, see the list of http://go.microsoft.com/fwlink/?LinkID=78282&clcid=0x409."},{"content":"An error is reported if an invalid code page is requested.","pos":[30458,30516]},{"content":"Notice that a code page is reported as \"invalid\" if it is not installed on the computer (different code pages may be installed on the client and server).","pos":[30517,30670]},{"content":"For example, specifying code page 1253 for Greek fails unless the computer's ACP is Greek or Greek language support has been loaded by using Control Panel <ph id=\"ph1\">&amp;gt;</ph> Regional Options.","pos":[30671,30848],"source":" For example, specifying code page 1253 for Greek fails unless the computer's ACP is Greek or Greek language support has been loaded by using Control Panel &gt; Regional Options."},{"content":"codepage","pos":[30860,30868]},{"content":"The code page number for the character set to be read from or written to the file.","pos":[30871,30953]},{"content":"The default value is 1200 (UTF-16LE).","pos":[30954,30991]},{"content":"This parameter is optional.","pos":[30992,31019]},{"content":"Following are the most common values: For more information about these options, see the list of http://go.microsoft.com/fwlink/?LinkID=78282&amp;clcid=0x409.","pos":[31020,31173],"source":" Following are the most common values: For more information about these options, see the list of http://go.microsoft.com/fwlink/?LinkID=78282&clcid=0x409."},{"content":"An error is reported if an invalid code page is requested.","pos":[31174,31232]},{"content":"Notice that a code page is reported as \"invalid\" if it is not installed on the computer (different code pages may be installed on the client and server).","pos":[31233,31386]},{"content":"For example, specifying code page 1253 for Greek fails unless the computer's ACP is Greek or Greek language support has been loaded by using Control Panel <ph id=\"ph1\">&amp;gt;</ph> Regional Options.","pos":[31387,31564],"source":" For example, specifying code page 1253 for Greek fails unless the computer's ACP is Greek or Greek language support has been loaded by using Control Panel &gt; Regional Options."},{"pos":[31571,31578],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A run-time error occurs if the file is accessed with a method that does not correspond to the current opened mode (for example, you try to write to a read-mode file).","pos":[31580,31746]},{"content":"If an attacker can control input to the new method, a security risk exists.","pos":[31747,31822]},{"content":"This method runs under Code Access Security.","pos":[31823,31867]},{"content":"Calls to this method on the server require permission from the FileIoPermission class.","pos":[31868,31954]},{"content":"Ensure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[31955,32087]},{"content":"The following table describes some of the more common code pages that might be specified for the <ph id=\"ph1\">\\_</ph>codePage parameter.","pos":[32088,32206],"source":" The following table describes some of the more common code pages that might be specified for the \\_codePage parameter."},{"content":"0","pos":[32328,32329]},{"content":"ANSI code page (ACP)","pos":[32339,32359]},{"content":"The code page that supports only characters in the user's current language.","pos":[32369,32444]},{"content":"The code page is unsuitable for anything that might contain multilingual data or for monolingual data that might be transferred between two systems by using different code pages.","pos":[32445,32623]},{"content":"437","pos":[32657,32660]},{"content":"OEM code page 437","pos":[32670,32687]},{"content":"The IBM PC or MS-DOS code page 437.","pos":[32697,32732]},{"content":"It is often abbreviated as CP437 and also called DOS-US or OEM-US.","pos":[32733,32799]},{"content":"850","pos":[32832,32835]},{"content":"Code page 850","pos":[32845,32858]},{"content":"A code page that was used in Western Europe running on operating systems, such as MS-DOS.","pos":[32868,32957]},{"content":"1200","pos":[32991,32995]},{"content":"UTF-16LE","pos":[33005,33013]},{"content":"The native Unicode representation on Microsoft Windows x86 systems.","pos":[33023,33090]},{"content":"Almost all characters are stored as 16 bit.","pos":[33091,33134]},{"content":"Some Chinese characters require 32 bit.","pos":[33135,33174]},{"content":"An identifying byte-order mark is written, examined, and then discarded when the rest of the character is read.","pos":[33175,33286]},{"content":"1201","pos":[33319,33323]},{"content":"UTF-16BE","pos":[33333,33341]},{"content":"The same as UTF-16LE but byte-swapped.","pos":[33351,33389]},{"content":"Used for compatibility with some non-x86 systems, which store bytes from left-to-right instead of low-order to high-order.","pos":[33390,33512]},{"content":"An identifying byte-order mark is written first, examined, and then discarded when the rest of the character is read.","pos":[33513,33630]},{"content":"65001","pos":[33664,33669]},{"content":"UTF-8","pos":[33679,33684]},{"content":"Stores Unicode in a byte-stream–friendly way:","pos":[33694,33739],"source":"Stores Unicode in a byte-stream–friendly way:\n"},{"content":"ASCII characters are 1 byte","pos":[33749,33776]},{"content":"European alphabets (including basic diacritics) are 2 bytes per character","pos":[33786,33859]},{"content":"Chinese, Japanese, and Korean require 3 bytes per character","pos":[33869,33928]},{"content":"This code page is a good choice when a file contains a very high percentage of ASCII, relatively few other characters, and it is important to save space.","pos":[33940,34093],"source":"\nThis code page is a good choice when a file contains a very high percentage of ASCII, relatively few other characters, and it is important to save space."},{"content":"For example, .xpo files are stored in UTF-8.","pos":[34094,34138]},{"content":"UTF-8 files begin with a 3-byte byte-order mark sequence, which is the first item written.","pos":[34139,34229]},{"content":"It is examined, and then discarded when the rest of the character is read.","pos":[34230,34304]},{"content":"54936","pos":[34337,34342]},{"content":"GB-18030","pos":[34352,34360]},{"content":"Stores data in the GB-18030 character representation that is required by the Chinese government.","pos":[34370,34466]},{"content":"No byte-order mark is written.","pos":[34467,34497]},{"content":"These files cannot be distinguished from those written in code page 20936 (GB-2312, which is the ACP for Simplified Chinese systems) unless the file contains characters outside the repertoire of GB-2312.","pos":[34498,34701]},{"pos":[34737,34745],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a TextIO object to access a file that is named filename in read mode by using code page 850 encoding.","pos":[34747,34878]},{"pos":[35119,35134],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"content":"Closes the file and, if data was written, flushes the file buffers to disk.","pos":[35136,35211]},{"pos":[35246,35253],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The TextIO object is usually finalized by leaving the scope.","pos":[35255,35315]},{"content":"The finalize method is not usually directly called.","pos":[35316,35367]},{"content":"Output written to the file is not valid until the TextIO object is finalized.","pos":[35368,35445]},{"pos":[35450,35469],"content":"Class TileReference","linkify":"Class TileReference","nodes":[{"content":"Class TileReference","pos":[0,19]}]},{"pos":[35516,35523],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[35529,35537],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[35543,35550],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[35554,35560]},{"content":"Description","pos":[35608,35619]},{"content":"public str tile()","pos":[35694,35711]},{"content":"public int copyCallerQuery()","pos":[35764,35792]},{"content":"public int formViewOption()","pos":[35834,35861]},{"content":"public int openMode()","pos":[35904,35925]},{"content":"public str parameters()","pos":[35974,35997]},{"content":"public boolean isFound()","pos":[36044,36068]},{"content":"public ConfigurationKeyId configurationKeyId()","pos":[36114,36160]},{"content":"public ConfigurationKeyId countryConfigurationKey()","pos":[36184,36235]},{"content":"public str countryRegionCodes()","pos":[36254,36285]},{"content":"public str helpText()","pos":[36324,36345]},{"content":"public int imageLocation()","pos":[36394,36420]},{"content":"public str kpiName()","pos":[36464,36484]},{"content":"public MenuItemType menuItemType()","pos":[36534,36568]},{"content":"public str menuItemName()","pos":[36604,36629]},{"content":"public str normalImage()","pos":[36674,36698]},{"content":"public int size()","pos":[36744,36761]},{"content":"public int tileType()","pos":[36814,36835]},{"content":"public int tileDisplay()","pos":[36884,36908]},{"content":"public int buttonDisplay()","pos":[36954,36980]},{"content":"public str url()","pos":[37024,37040]},{"content":"public str label()","pos":[37094,37112]},{"content":"public int refreshFrequency()","pos":[37164,37193]},{"content":"public int applyFilter()","pos":[37234,37258]},{"content":"public int allowUserCacheRefresh()","pos":[37304,37338]},{"content":"public str query()","pos":[37374,37392]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[37444,37485],"source":"public boolean visible(\\[boolean value\\])"},{"pos":[37517,37528],"content":"Method tile","linkify":"Method tile","nodes":[{"content":"Method tile","pos":[0,11]}]},{"pos":[37558,37570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37576,37598],"content":"Method copyCallerQuery","linkify":"Method copyCallerQuery","nodes":[{"content":"Method copyCallerQuery","pos":[0,22]}]},{"pos":[37639,37651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37657,37678],"content":"Method formViewOption","linkify":"Method formViewOption","nodes":[{"content":"Method formViewOption","pos":[0,21]}]},{"pos":[37718,37730],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37736,37751],"content":"Method openMode","linkify":"Method openMode","nodes":[{"content":"Method openMode","pos":[0,15]}]},{"pos":[37785,37797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37803,37820],"content":"Method parameters","linkify":"Method parameters","nodes":[{"content":"Method parameters","pos":[0,17]}]},{"pos":[37856,37868],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37874,37888],"content":"Method isFound","linkify":"Method isFound","nodes":[{"content":"Method isFound","pos":[0,14]}]},{"pos":[37925,37937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37943,37968],"content":"Method configurationKeyId","linkify":"Method configurationKeyId","nodes":[{"content":"Method configurationKeyId","pos":[0,25]}]},{"pos":[38027,38039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38045,38075],"content":"Method countryConfigurationKey","linkify":"Method countryConfigurationKey","nodes":[{"content":"Method countryConfigurationKey","pos":[0,30]}]},{"pos":[38139,38151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38157,38182],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[38226,38238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38244,38259],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"pos":[38293,38305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38311,38331],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[38370,38382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38388,38402],"content":"Method kpiName","linkify":"Method kpiName","nodes":[{"content":"Method kpiName","pos":[0,14]}]},{"pos":[38435,38447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38453,38472],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[38519,38531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38537,38556],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[38594,38606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38612,38630],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[38667,38679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38685,38696],"content":"Method size","linkify":"Method size","nodes":[{"content":"Method size","pos":[0,11]}]},{"pos":[38726,38738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38744,38759],"content":"Method tileType","linkify":"Method tileType","nodes":[{"content":"Method tileType","pos":[0,15]}]},{"pos":[38793,38805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38811,38829],"content":"Method tileDisplay","linkify":"Method tileDisplay","nodes":[{"content":"Method tileDisplay","pos":[0,18]}]},{"pos":[38866,38878],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38884,38904],"content":"Method buttonDisplay","linkify":"Method buttonDisplay","nodes":[{"content":"Method buttonDisplay","pos":[0,20]}]},{"pos":[38943,38955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38961,38971],"content":"Method url","linkify":"Method url","nodes":[{"content":"Method url","pos":[0,10]}]},{"pos":[39000,39012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39018,39030],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"pos":[39061,39073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39079,39102],"content":"Method refreshFrequency","linkify":"Method refreshFrequency","nodes":[{"content":"Method refreshFrequency","pos":[0,23]}]},{"pos":[39144,39156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39162,39180],"content":"Method applyFilter","linkify":"Method applyFilter","nodes":[{"content":"Method applyFilter","pos":[0,18]}]},{"pos":[39217,39229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39235,39263],"content":"Method allowUserCacheRefresh","linkify":"Method allowUserCacheRefresh","nodes":[{"content":"Method allowUserCacheRefresh","pos":[0,28]}]},{"pos":[39310,39322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39328,39340],"content":"Method query","linkify":"Method query","nodes":[{"content":"Method query","pos":[0,12]}]},{"pos":[39371,39383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39389,39403],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[39455,39465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39467,39472]},{"pos":[39481,39493],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39498,39512],"content":"Class TreeNode","linkify":"Class TreeNode","nodes":[{"content":"Class TreeNode","pos":[0,14]}]},{"content":"The TreeNode class retrieves and represents any node in the Application Object Tree (AOT).","pos":[39548,39638]},{"pos":[39644,39651],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class, and the classes that extend it, enable you to create, read, update, and delete X++ code and metadata.","pos":[39653,39766]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before calling this API or APIs that are derived from this class.","pos":[39767,39916]},{"content":"The TreeNode class can be used to get a handle to any node in the AOT.","pos":[39917,39987]},{"content":"The TreeNode class is a generic class in that it can be a reference to any type of node in the AOT.","pos":[39988,40087]},{"content":"In addition to providing access to some of the functions on the shortcut menu of the AOT, this class also contains methods that are used to maneuver in the tree.","pos":[40088,40249]},{"content":"The TreeNodeTraverser class is also useful in navigating in the AOT.","pos":[40250,40318]},{"content":"The TreeNode::findNode and TreeNode::rootNode methods return a treeNode object from which you can maneuver to any other node.","pos":[40319,40444]},{"pos":[40450,40458],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[40464,40471],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[40475,40481]},{"content":"Description","pos":[40625,40636]},{"content":"public TreeNode SysObsoleteAttribute(UtilElementName name)","pos":[41113,41171]},{"content":"public TreeNode SysObsoleteAttribute(str name, Types type)","pos":[41432,41490]},{"content":"public TreeNode SysObsoleteAttribute()","pos":[41751,41789]},{"content":"public TreeNode SysObsoleteAttribute(int nodetype)","pos":[42070,42120]},{"content":"public boolean AOTAllowEdit()","pos":[42389,42418]},{"content":"public int AOTbitmapId()","pos":[42708,42732]},{"content":"Returns the resource ID of the bitmap of the tree node.","pos":[42858,42913]},{"content":"public int AOTchildNodeCount()","pos":[43027,43057]},{"content":"Counts the number of child nodes that a given tree node has.","pos":[43177,43237]},{"content":"public boolean SysObsoleteAttribute(<ph id=\"ph1\">\\[</ph>int flag<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean forceNoXRef<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean fastMode<ph id=\"ph6\">\\]</ph>)","pos":[43346,43442],"source":"public boolean SysObsoleteAttribute(\\[int flag\\], \\[boolean forceNoXRef\\], \\[boolean fastMode\\])"},{"content":"public boolean AOTDrop(TreeNode sourcenode, <ph id=\"ph1\">\\[</ph>TreeNode after<ph id=\"ph2\">\\]</ph>)","pos":[43665,43728],"source":"public boolean AOTDrop(TreeNode sourcenode, \\[TreeNode after\\])"},{"content":"Creates a copy of a specified tree node as a child to the TreeNode object.","pos":[43815,43889]},{"content":"public TreeNode AOTDuplicate()","pos":[43984,44014]},{"content":"public TreeNode AOTfindChild(str name, <ph id=\"ph1\">\\[</ph>int nodeType<ph id=\"ph2\">\\]</ph>)","pos":[44303,44359],"source":"public TreeNode AOTfindChild(str name, \\[int nodeType\\])"},{"content":"Finds the specified child node of this node.","pos":[44453,44497]},{"content":"public TreeNode AOTfirstChild()","pos":[44622,44653]},{"content":"Retrieves the first child of the tree node.","pos":[44772,44815]},{"content":"public TreeNode AOTfirstChildEx(<ph id=\"ph1\">\\[</ph>boolean loadFullNode<ph id=\"ph2\">\\]</ph>)","pos":[44941,44998],"source":"public TreeNode AOTfirstChildEx(\\[boolean loadFullNode\\])"},{"content":"public int AOTgetExecutableLineCount()","pos":[45260,45298]},{"content":"Returns the number of executable lines of code for this node.","pos":[45410,45471]},{"content":"public Set AOTgetExecutableLines()","pos":[45579,45613]},{"content":"Returns the executable lines of code for this node.","pos":[45729,45780]},{"content":"public int AOTGetModel()","pos":[45898,45922]},{"content":"public str AOTgetProperties(<ph id=\"ph1\">\\[</ph>boolean includeInvisible<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean includeReadOnly<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean includeNonExportable<ph id=\"ph6\">\\]</ph>)","pos":[46217,46337],"source":"public str AOTgetProperties(\\[boolean includeInvisible\\], \\[boolean includeReadOnly\\], \\[boolean includeNonExportable\\])"},{"content":"Returns a string containing the properties of the tree node.","pos":[46367,46427]},{"content":"public Struct AOTgetPropertiesExt(<ph id=\"ph1\">\\[</ph>str filter<ph id=\"ph2\">\\]</ph>)","pos":[46536,46585],"source":"public Struct AOTgetPropertiesExt(\\[str filter\\])"},{"content":"public AnyType AOTgetProperty(str name)","pos":[46855,46894]},{"content":"public str AOTgetSource()","pos":[47174,47199]},{"content":"Returns the source code of this node.","pos":[47324,47361]},{"content":"public boolean AOTIncludeInCompare()","pos":[47493,47529]},{"content":"public boolean AOTIsDirty()","pos":[47812,47839]},{"content":"public boolean AOTIsOld()","pos":[48131,48156]},{"content":"Indicates whether this node is from a file found in the old model store.","pos":[48281,48353]},{"content":"public boolean AOTIsPersisted()","pos":[48450,48481]},{"content":"Indicates whether this node has been persisted in the model store.","pos":[48600,48666]},{"content":"public boolean AOTIsProxyNode()","pos":[48769,48800]},{"content":"public TreeNodeIterator AOTiterator()","pos":[49088,49125]},{"content":"Returns an object which can be used to iterate the child nodes of the tree node.","pos":[49238,49318]},{"content":"public KernelHelpType AOTKernelHelpType()","pos":[49407,49448]},{"content":"public UtilEntryLevel AOTLayer()","pos":[49726,49758]},{"content":"Returns the layer of the tree node.","pos":[49876,49911]},{"content":"public Set AOTLayers(<ph id=\"ph1\">\\[</ph>boolean old<ph id=\"ph2\">\\]</ph>)","pos":[50045,50082],"source":"public Set AOTLayers(\\[boolean old\\])"},{"content":"Returns a collection of the layers the tree node is defined in.","pos":[50195,50258]},{"content":"public str AOTname()","pos":[50364,50384]},{"content":"Returns the value of the name property of the node.","pos":[50514,50565]},{"content":"public int AOTnewWindow()","pos":[50683,50708]},{"content":"Opens a new AOT tree window with the tree node as the root.","pos":[50833,50892]},{"content":"public TreeNode AOTnextSibling()","pos":[51002,51034]},{"content":"Returns the next node on the same level as the tree node.","pos":[51152,51209]},{"content":"public boolean AOTObjectNode()","pos":[51321,51351]},{"content":"Indicates whether the node is an application object.","pos":[51471,51523]},{"content":"public int AOToverlayBitmapId()","pos":[51640,51671]},{"content":"Returns the resource ID of the overlay in the AOT associated with this node.","pos":[51790,51866]},{"content":"public TreeNode AOTparent()","pos":[51959,51986]},{"content":"Returns the parent node of the tree node.","pos":[52109,52150]},{"content":"public TreeNode AOTprevious()","pos":[52278,52307]},{"content":"Returns the previous sibling of this tree node.","pos":[52428,52475]},{"content":"public boolean SysObsoleteAttribute(str name)","pos":[52597,52642]},{"content":"public str AOTtoolTip()","pos":[52916,52939]},{"content":"Returns the tool tip associated with the tree node.","pos":[53066,53117]},{"content":"public str AOTToString()","pos":[53235,53259]},{"content":"public str AOTtypeStr()","pos":[53554,53577]},{"content":"Returns the internal string code for the element type used in XPO files.","pos":[53704,53776]},{"content":"public UtilFileType AOTUtilFileType()","pos":[53873,53910]},{"content":"Retrieves the value of the UtilFileType enumeration type for the TreeNode object.","pos":[54023,54104]},{"content":"The UtilFileType indicates which kind of file the application object is stored in.","pos":[54105,54187]},{"content":"public int applObjectId()","pos":[54192,54217]},{"content":"Returns the application object ID, if applicable.","pos":[54342,54391]},{"content":"public int applObjectLayerMask()","pos":[54511,54543]},{"content":"Returns a bitmask that specifies which layers contain this element.","pos":[54661,54728]},{"content":"public int applObjectOldLayerMask()","pos":[54830,54865]},{"content":"Returns a bitmask that specifies which layers contain this element in the baseline model store.","pos":[54980,55075]},{"content":"public TreeNode getNodeInLayer(UtilEntryLevel layer, <ph id=\"ph1\">\\[</ph>boolean old<ph id=\"ph2\">\\]</ph>)","pos":[55149,55218],"source":"public TreeNode getNodeInLayer(UtilEntryLevel layer, \\[boolean old\\])"},{"content":"Retrieves a version of the tree node from a specified layer.","pos":[55299,55359]},{"content":"public Int64 hashKey()","pos":[55468,55490]},{"content":"public TreeNode makeCopy()","pos":[55787,55813]},{"content":"public str newObjectName(<ph id=\"ph1\">\\[</ph>str oldName<ph id=\"ph2\">\\]</ph>)","pos":[56106,56147],"source":"public str newObjectName(\\[str oldName\\])"},{"content":"Returns a string that contains the name of the new element.","pos":[56256,56315]},{"content":"public str toString()","pos":[56425,56446]},{"content":"Returns a string that represents the current object.","pos":[56575,56627]},{"content":"public str treeNodeName()","pos":[56744,56769]},{"content":"Returns the name of the tree node.","pos":[56894,56928]},{"content":"public str treeNodePath()","pos":[57063,57088]},{"content":"Returns the unique path to the tree node within the Application Object Tree (AOT).","pos":[57213,57295]},{"content":"public TreeNodeType treeNodeType()","pos":[57382,57416]},{"content":"Retrieves an instance of a TreeNodeType class that provides reflection information for the tree node.","pos":[57532,57633]},{"content":"public int updateNodePermissions(boolean throwExceptions)","pos":[57701,57758]},{"content":"public UtilElements utilElement()","pos":[58020,58053]},{"content":"Returns a UtilElements record that is related to the node.","pos":[58170,58228]},{"content":"public UtilIdElements utilIdElement()","pos":[58339,58376]},{"content":"Returns a UtilIdElements record that is related to the node.","pos":[58489,58549]},{"content":"public boolean validateNameCharacters(str name)","pos":[58658,58705]},{"content":"::public static TreeNode findNode(str path)","pos":[58977,59020]},{"content":"Returns a specified node in the Application Object Tree (AOT).","pos":[59127,59189]},{"content":"::public static str generateObjectName(str template)","pos":[59296,59348]},{"content":"::public static int getMaximumNodeNameLength(int modelElementTypeId)","pos":[59615,59683]},{"content":"::public static boolean isNodeReferenceValid(TreeNode treeNode)","pos":[59934,59997]},{"content":"::public static boolean isValidObjectName(str name)","pos":[60253,60304]},{"content":"Determines whether the string passed as an argument can be used as a name for a node in the Application Object Tree (AOT).","pos":[60403,60525]},{"content":"::public static TreeNode rootNode()","pos":[60572,60607]},{"content":"Returns the root node of the AOT.","pos":[60722,60755]},{"content":"public void SysObsoleteAttribute()","pos":[60891,60925]},{"content":"public void treeNodeRelease()","pos":[61210,61239]},{"content":"Releases the tree node explicitly.","pos":[61360,61394]},{"content":"public void SysObsoleteAttribute(str name, xRefKind xrefKind, int lineNumber, int columNumber, <ph id=\"ph1\">\\[</ph>XRefReference xrefRef<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ClassId parentTypeId<ph id=\"ph4\">\\]</ph>)","pos":[61529,61676],"source":"public void SysObsoleteAttribute(str name, xRefKind xrefKind, int lineNumber, int columNumber, \\[XRefReference xrefRef\\], \\[ClassId parentTypeId\\])"},{"content":"public void AOTrun()","pos":[61848,61868]},{"content":"Compiles this node and its subtree in the Application Object Tree (AOT).","pos":[61998,62070]},{"content":"public void SysObsoleteAttribute()","pos":[62167,62201]},{"content":"public void AOTrefresh()","pos":[62486,62510]},{"content":"Refreshes the node with the latest changes to the .aod file.","pos":[62636,62696]},{"content":"public void SysObsoleteAttribute(Struct struct1)","pos":[62805,62853]},{"content":"public void SysObsoleteAttribute(str properties)","pos":[63124,63172]},{"content":"public void AOTconfigure()","pos":[63443,63469]},{"content":"public void AOTload()","pos":[63762,63783]},{"content":"Ensures that the object is loaded.","pos":[63912,63946]},{"content":"public void treeNodeExport(str filename, <ph id=\"ph1\">\\[</ph>int flag<ph id=\"ph2\">\\]</ph>)","pos":[64081,64135],"source":"public void treeNodeExport(str filename, \\[int flag\\])"},{"content":"Exports this node and its subtree from the Application Object Tree (AOT).","pos":[64231,64304]},{"content":"public void SysObsoleteAttribute(str source, <ph id=\"ph1\">\\[</ph>boolean isStatic<ph id=\"ph2\">\\]</ph>)","pos":[64400,64466],"source":"public void SysObsoleteAttribute(str source, \\[boolean isStatic\\])"},{"content":"public void AOTendXref()","pos":[64719,64743]},{"content":"public void AOTmessageLine(str text, int linenumber)","pos":[65038,65090]},{"content":"Writes text to the Application Object Tree (AOT) Message window.","pos":[65188,65252]},{"content":"public void SysObsoleteAttribute(str name, AnyType value)","pos":[65357,65414]},{"content":"public void AOTrestore(<ph id=\"ph1\">\\[</ph>boolean forceReload<ph id=\"ph2\">\\]</ph>)","pos":[65676,65723],"source":"public void AOTrestore(\\[boolean forceReload\\])"},{"content":"Reloads this node from the disk, if applicable.","pos":[65826,65873]},{"content":"public void AOTregenerate()","pos":[65995,66022]},{"content":"public void AOTmakeXref(<ph id=\"ph1\">\\[</ph>int flag<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean xRefAll<ph id=\"ph4\">\\]</ph>)","pos":[66314,66372],"source":"public void AOTmakeXref(\\[int flag\\], \\[boolean xRefAll\\])"},{"content":"Compiles this node and its subtree in the AOT, updating the cross-reference system.","pos":[66464,66547]},{"content":"public void AOTedit(<ph id=\"ph1\">\\[</ph>int Line<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int Column<ph id=\"ph4\">\\]</ph>)","pos":[66633,66682],"source":"public void AOTedit(\\[int Line\\], \\[int Column\\])"},{"content":"Opens the appropriate editor for this node.","pos":[66783,66826]},{"content":"public void AOTshowProperties()","pos":[66952,66983]},{"content":"Opens the property sheet (if not already open) and shows the properties for this node.","pos":[67102,67188]},{"content":"public void AOTinsert(TreeNode parent, <ph id=\"ph1\">\\[</ph>TreeNode after<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean doNotDuplicate<ph id=\"ph4\">\\]</ph>)","pos":[67271,67357],"source":"public void AOTinsert(TreeNode parent, \\[TreeNode after\\], \\[boolean doNotDuplicate\\])"},{"content":"Inserts a node among the subnodes of this node.","pos":[67421,67468]},{"content":"public void new()","pos":[67590,67607]},{"content":"Initializes a new instance of the TreeNode class.","pos":[67740,67789]},{"content":"public void AOTMove(TreeNode parent, <ph id=\"ph1\">\\[</ph>TreeNode after<ph id=\"ph2\">\\]</ph>)","pos":[67909,67965],"source":"public void AOTMove(TreeNode parent, \\[TreeNode after\\])"},{"content":"public void SysObsoleteAttribute(int modelId)","pos":[68228,68273]},{"pos":[68550,68577],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[68648,68658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[68660,68664]},{"pos":[68673,68685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68691,68718],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[68789,68799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[68801,68805]},{"content":"type","pos":[68819,68823]},{"pos":[68832,68844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68850,68877],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[68928,68940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68946,68973],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[69036,69046],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nodetype","pos":[69048,69056]},{"pos":[69065,69077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69083,69102],"content":"Method AOTAllowEdit","linkify":"Method AOTAllowEdit","nodes":[{"content":"Method AOTAllowEdit","pos":[0,19]}]},{"pos":[69144,69156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69162,69180],"content":"Method AOTbitmapId","linkify":"Method AOTbitmapId","nodes":[{"content":"Method AOTbitmapId","pos":[0,18]}]},{"content":"Returns the resource ID of the bitmap of the tree node.","pos":[69182,69237]},{"pos":[69274,69286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the bitmap of the tree node.","pos":[69288,69335]},{"pos":[69342,69350],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints the resource ID of the Extended Data Types node in the Application Object Tree (AOT).","pos":[69352,69466]},{"content":"This job will print the integer 895.","pos":[69666,69702]},{"content":"If you run the Tutorial resources form, you can see the bitmap and verify that it is the same as the one that is used for Extended Data Types in the AOT.","pos":[69703,69856]},{"pos":[69862,69886],"content":"Method AOTchildNodeCount","linkify":"Method AOTchildNodeCount","nodes":[{"content":"Method AOTchildNodeCount","pos":[0,24]}]},{"content":"Counts the number of child nodes that a given tree node has.","pos":[69888,69948]},{"pos":[69991,70003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates the number of child nodes for the tree node.","pos":[70005,70075]},{"pos":[70082,70090],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints the number of child nodes that appear under the Menu Items node in the Application Object Tree (AOT).","pos":[70092,70222]},{"pos":[70468,70495],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[70598,70608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flag","pos":[70610,70614]},{"content":"forceNoXRef","pos":[70628,70639]},{"content":"fastMode","pos":[70653,70661]},{"pos":[70670,70682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70688,70702],"content":"Method AOTDrop","linkify":"Method AOTDrop","nodes":[{"content":"Method AOTDrop","pos":[0,14]}]},{"content":"Creates a copy of a specified tree node as a child to the TreeNode object.","pos":[70704,70778]},{"pos":[70852,70862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sourcenode","pos":[70864,70874]},{"content":"The child node of the tree node that the source should be inserted after; optional.","pos":[70877,70960]},{"content":"after","pos":[70972,70977]},{"content":"The child node of the tree node that the source should be inserted after; optional.","pos":[70980,71063]},{"pos":[71070,71082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the drop operation was successful; otherwise, false.","pos":[71084,71144]},{"pos":[71151,71159],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates the tabPage:CopyOfContainers tree node as the last node underTab:Tab in the tutorial<ph id=\"ph1\">\\_</ph>Form<ph id=\"ph2\">\\_</ph>Controls form.","pos":[71161,71297],"source":"The following example creates the tabPage:CopyOfContainers tree node as the last node underTab:Tab in the tutorial\\_Form\\_Controls form."},{"pos":[72123,72142],"content":"Method AOTDuplicate","linkify":"Method AOTDuplicate","nodes":[{"content":"Method AOTDuplicate","pos":[0,19]}]},{"pos":[72185,72197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72203,72222],"content":"Method AOTfindChild","linkify":"Method AOTfindChild","nodes":[{"content":"Method AOTfindChild","pos":[0,19]}]},{"content":"Finds the specified child node of this node.","pos":[72224,72268]},{"pos":[72335,72345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[72347,72351]},{"content":"nodeType","pos":[72365,72373]},{"pos":[72382,72394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The specified TreeNode.","pos":[72396,72419]},{"pos":[72425,72445],"content":"Method AOTfirstChild","linkify":"Method AOTfirstChild","nodes":[{"content":"Method AOTfirstChild","pos":[0,20]}]},{"content":"Retrieves the first child of the tree node.","pos":[72447,72490]},{"pos":[72534,72546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first child node of the tree node.","pos":[72548,72586]},{"pos":[72592,72614],"content":"Method AOTfirstChildEx","linkify":"Method AOTfirstChildEx","nodes":[{"content":"Method AOTfirstChildEx","pos":[0,22]}]},{"pos":[72682,72692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"loadFullNode","pos":[72694,72706]},{"pos":[72715,72727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72733,72765],"content":"Method AOTgetExecutableLineCount","linkify":"Method AOTgetExecutableLineCount","nodes":[{"content":"Method AOTgetExecutableLineCount","pos":[0,32]}]},{"content":"Returns the number of executable lines of code for this node.","pos":[72767,72828]},{"pos":[72879,72891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of executable lines of code for this node if any; otherwise, zero.","pos":[72893,72970]},{"pos":[72977,72984],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function calls a method which is overridden by nodes which have source code.","pos":[72986,73067]},{"pos":[73073,73101],"content":"Method AOTgetExecutableLines","linkify":"Method AOTgetExecutableLines","nodes":[{"content":"Method AOTgetExecutableLines","pos":[0,28]}]},{"content":"Returns the executable lines of code for this node.","pos":[73103,73154]},{"pos":[73201,73213],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Set object containing the executable lines of code for this node if any; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[73215,73366]},{"pos":[73373,73380],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function calls a method which is overridden by nodes which have source code.","pos":[73382,73463]},{"pos":[73469,73487],"content":"Method AOTGetModel","linkify":"Method AOTGetModel","nodes":[{"content":"Method AOTGetModel","pos":[0,18]}]},{"pos":[73524,73536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73542,73565],"content":"Method AOTgetProperties","linkify":"Method AOTgetProperties","nodes":[{"content":"Method AOTgetProperties","pos":[0,23]}]},{"content":"Returns a string containing the properties of the tree node.","pos":[73567,73627]},{"pos":[73754,73764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"includeInvisible","pos":[73766,73782]},{"content":"includeReadOnly","pos":[73796,73811]},{"content":"includeNonExportable","pos":[73825,73845]},{"pos":[73854,73866],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string containing the properties of the tree node.","pos":[73868,73920]},{"pos":[73927,73935],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example provides a list of temporary tables in Microsoft Dynamics AX.","pos":[73937,74020]},{"pos":[74683,74709],"content":"Method AOTgetPropertiesExt","linkify":"Method AOTgetPropertiesExt","nodes":[{"content":"Method AOTgetPropertiesExt","pos":[0,26]}]},{"pos":[74769,74779],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filter","pos":[74781,74787]},{"pos":[74796,74808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74814,74835],"content":"Method AOTgetProperty","linkify":"Method AOTgetProperty","nodes":[{"content":"Method AOTgetProperty","pos":[0,21]}]},{"pos":[74887,74897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[74899,74903]},{"pos":[74912,74924],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74930,74949],"content":"Method AOTgetSource","linkify":"Method AOTgetSource","nodes":[{"content":"Method AOTgetSource","pos":[0,19]}]},{"content":"Returns the source code of this node.","pos":[74951,74988]},{"pos":[75026,75038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that contains source code if any; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[75040,75161]},{"pos":[75168,75175],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is overridden by nodes which have source code.","pos":[75177,75237]},{"pos":[75243,75269],"content":"Method AOTIncludeInCompare","linkify":"Method AOTIncludeInCompare","nodes":[{"content":"Method AOTIncludeInCompare","pos":[0,26]}]},{"pos":[75318,75330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75336,75353],"content":"Method AOTIsDirty","linkify":"Method AOTIsDirty","nodes":[{"content":"Method AOTIsDirty","pos":[0,17]}]},{"pos":[75393,75405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75411,75426],"content":"Method AOTIsOld","linkify":"Method AOTIsOld","nodes":[{"content":"Method AOTIsOld","pos":[0,15]}]},{"content":"Indicates whether this node is from a file found in the old model store.","pos":[75428,75500]},{"pos":[75538,75550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if this node is from the old model store; otherwise false.","pos":[75552,75615]},{"pos":[75621,75642],"content":"Method AOTIsPersisted","linkify":"Method AOTIsPersisted","nodes":[{"content":"Method AOTIsPersisted","pos":[0,21]}]},{"content":"Indicates whether this node has been persisted in the model store.","pos":[75644,75710]},{"pos":[75754,75766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if this node has been persisted; otherwise false.","pos":[75768,75822]},{"pos":[75829,75836],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method throws an exception if the method is not supported for the tree node.","pos":[75838,75919]},{"content":"Use the TreeNode.TreeNodeType().isModelElement() method to determine if the method is supported.","pos":[75920,76016]},{"pos":[76022,76043],"content":"Method AOTIsProxyNode","linkify":"Method AOTIsProxyNode","nodes":[{"content":"Method AOTIsProxyNode","pos":[0,21]}]},{"pos":[76087,76099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76105,76123],"content":"Method AOTiterator","linkify":"Method AOTiterator","nodes":[{"content":"Method AOTiterator","pos":[0,18]}]},{"content":"Returns an object which can be used to iterate the child nodes of the tree node.","pos":[76125,76205]},{"pos":[76255,76267],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The TreeNodeIterator object used to iterate the children of the tree node.","pos":[76269,76343]},{"pos":[76349,76373],"content":"Method AOTKernelHelpType","linkify":"Method AOTKernelHelpType","nodes":[{"content":"Method AOTKernelHelpType","pos":[0,24]}]},{"pos":[76427,76439],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76445,76460],"content":"Method AOTLayer","linkify":"Method AOTLayer","nodes":[{"content":"Method AOTLayer","pos":[0,15]}]},{"content":"Returns the layer of the tree node.","pos":[76462,76497]},{"pos":[76542,76554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The layer that this node resides in.","pos":[76556,76592]},{"pos":[76599,76606],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method throws an exception if the method is not supported for the tree node.","pos":[76608,76689]},{"content":"Use the TreeNode.TreeNodeType().isLayerAware() method to determine if the method is supported.","pos":[76690,76784]},{"pos":[76790,76806],"content":"Method AOTLayers","linkify":"Method AOTLayers","nodes":[{"content":"Method AOTLayers","pos":[0,16]}]},{"content":"Returns a collection of the layers the tree node is defined in.","pos":[76808,76871]},{"pos":[76919,76929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"old","pos":[76931,76934]},{"content":"A Boolean value that indicates whether to return the layers of the tree node definitions from the old model store; optional.","pos":[76937,77061]},{"pos":[77068,77080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Set object with the layers.","pos":[77082,77111]},{"pos":[77118,77125],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method throws an exception if the method is not supported for the tree node.","pos":[77127,77208]},{"content":"Use the TreeNode.TreeNodeType().isLayerAware() method to determine if the method is supported.","pos":[77209,77303]},{"pos":[77309,77323],"content":"Method AOTname","linkify":"Method AOTname","nodes":[{"content":"Method AOTname","pos":[0,14]}]},{"content":"Returns the value of the name property of the node.","pos":[77325,77376]},{"pos":[77409,77421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that contains the value of the name property","pos":[77423,77478]},{"pos":[77485,77492],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In most cases, this yields the same result as the method TreeNodeName.","pos":[77494,77564]},{"pos":[77571,77579],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints out the name of the first child of the tree node.","pos":[77581,77659]},{"pos":[77965,77984],"content":"Method AOTnewWindow","linkify":"Method AOTnewWindow","nodes":[{"content":"Method AOTnewWindow","pos":[0,19]}]},{"content":"Opens a new AOT tree window with the tree node as the root.","pos":[77986,78045]},{"pos":[78083,78095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78101,78122],"content":"Method AOTnextSibling","linkify":"Method AOTnextSibling","nodes":[{"content":"Method AOTnextSibling","pos":[0,21]}]},{"content":"Returns the next node on the same level as the tree node.","pos":[78124,78181]},{"pos":[78226,78238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The next node on the same level as the current tree node.","pos":[78240,78297]},{"pos":[78303,78323],"content":"Method AOTObjectNode","linkify":"Method AOTObjectNode","nodes":[{"content":"Method AOTObjectNode","pos":[0,20]}]},{"content":"Indicates whether the node is an application object.","pos":[78325,78377]},{"pos":[78420,78432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the node is an application object; otherwise false.","pos":[78434,78493]},{"pos":[78500,78507],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A form or report is an application object.","pos":[78509,78551]},{"content":"A control on a form, or any other subpart, is not.","pos":[78552,78602]},{"pos":[78608,78633],"content":"Method AOToverlayBitmapId","linkify":"Method AOToverlayBitmapId","nodes":[{"content":"Method AOToverlayBitmapId","pos":[0,25]}]},{"content":"Returns the resource ID of the overlay in the AOT associated with this node.","pos":[78635,78711]},{"pos":[78755,78767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the overlay in the AOT associated with this node.","pos":[78769,78837]},{"pos":[78843,78859],"content":"Method AOTparent","linkify":"Method AOTparent","nodes":[{"content":"Method AOTparent","pos":[0,16]}]},{"content":"Returns the parent node of the tree node.","pos":[78861,78902]},{"pos":[78942,78954],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent node of the tree node.","pos":[78956,78989]},{"pos":[78995,79013],"content":"Method AOTprevious","linkify":"Method AOTprevious","nodes":[{"content":"Method AOTprevious","pos":[0,18]}]},{"content":"Returns the previous sibling of this tree node.","pos":[79015,79062]},{"pos":[79104,79116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The previous tree node relative to this one on the same level.","pos":[79118,79180]},{"pos":[79186,79213],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[79271,79281],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[79283,79287]},{"pos":[79296,79308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79314,79331],"content":"Method AOTtoolTip","linkify":"Method AOTtoolTip","nodes":[{"content":"Method AOTtoolTip","pos":[0,17]}]},{"content":"Returns the tool tip associated with the tree node.","pos":[79333,79384]},{"pos":[79420,79432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that contains the tool tip.","pos":[79434,79472]},{"pos":[79478,79496],"content":"Method AOTToString","linkify":"Method AOTToString","nodes":[{"content":"Method AOTToString","pos":[0,18]}]},{"pos":[79533,79545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79551,79568],"content":"Method AOTtypeStr","linkify":"Method AOTtypeStr","nodes":[{"content":"Method AOTtypeStr","pos":[0,17]}]},{"content":"Returns the internal string code for the element type used in XPO files.","pos":[79570,79642]},{"pos":[79678,79690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that contains the tree node type.","pos":[79692,79736]},{"pos":[79742,79764],"content":"Method AOTUtilFileType","linkify":"Method AOTUtilFileType","nodes":[{"content":"Method AOTUtilFileType","pos":[0,22]}]},{"content":"Retrieves the value of the UtilFileType enumeration type for the TreeNode object.","pos":[79766,79847]},{"content":"The UtilFileType indicates which kind of file the application object is stored in.","pos":[79848,79930]},{"pos":[79980,79992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the UtilFileType enumeration for the tree node.","pos":[79994,80054]},{"content":"The possible values are in the following list.","pos":[80055,80101]},{"content":"UtilFileType::Application means that the element is stored in the .aod file (form, report, query, table, and so on).","pos":[80102,80218]},{"content":"UtilFileType::ApplicationCodeDocumentationmeans that the element is stored in the .add file.","pos":[80219,80311]},{"content":"UtilFileType::ApplicationHelp means that the element is stored in the .ahd file.","pos":[80312,80392]},{"content":"UtilFileType::KernelHelp means that the element is stored in the .akh file.","pos":[80393,80468]},{"pos":[80475,80483],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example finds a TreeNode object of each UtilFileType, and then prints the path of the UtilFileType to the Infolog.","pos":[80485,80613]},{"pos":[81719,81738],"content":"Method applObjectId","linkify":"Method applObjectId","nodes":[{"content":"Method applObjectId","pos":[0,19]}]},{"content":"Returns the application object ID, if applicable.","pos":[81740,81789]},{"pos":[81827,81839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the application object.","pos":[81841,81874]},{"pos":[81880,81906],"content":"Method applObjectLayerMask","linkify":"Method applObjectLayerMask","nodes":[{"content":"Method applObjectLayerMask","pos":[0,26]}]},{"content":"Returns a bitmask that specifies which layers contain this element.","pos":[81908,81975]},{"pos":[82020,82032],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A bitmask that specifies which layers contain this element.","pos":[82034,82093]},{"pos":[82099,82128],"content":"Method applObjectOldLayerMask","linkify":"Method applObjectOldLayerMask","nodes":[{"content":"Method applObjectOldLayerMask","pos":[0,29]}]},{"content":"Returns a bitmask that specifies which layers contain this element in the baseline model store.","pos":[82130,82225]},{"pos":[82273,82285],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A bitmask that specifies which layers contain this element.","pos":[82287,82346]},{"pos":[82352,82373],"content":"Method getNodeInLayer","linkify":"Method getNodeInLayer","nodes":[{"content":"Method getNodeInLayer","pos":[0,21]}]},{"content":"Retrieves a version of the tree node from a specified layer.","pos":[82375,82435]},{"pos":[82515,82525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"layer","pos":[82527,82532]},{"content":"The value specifying whether or not the node should be retrieved from the layer file in the old model store; optional.","pos":[82535,82653]},{"content":"old","pos":[82665,82668]},{"content":"The value specifying whether or not the node should be retrieved from the layer file in the old model store; optional.","pos":[82671,82789]},{"pos":[82796,82808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new TreeNode.","pos":[82810,82827]},{"pos":[82834,82841],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method throws an exception if the method is not supported for the tree node.","pos":[82843,82924]},{"content":"Use the TreeNode.TreeNodeType().isGetNodeInLayerSupported method to determine if the method is supported.","pos":[82925,83030]},{"pos":[83036,83050],"content":"Method hashKey","linkify":"Method hashKey","nodes":[{"content":"Method hashKey","pos":[0,14]}]},{"pos":[83085,83097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83103,83118],"content":"Method makeCopy","linkify":"Method makeCopy","nodes":[{"content":"Method makeCopy","pos":[0,15]}]},{"pos":[83157,83169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83175,83195],"content":"Method newObjectName","linkify":"Method newObjectName","nodes":[{"content":"Method newObjectName","pos":[0,20]}]},{"content":"Returns a string that contains the name of the new element.","pos":[83197,83256]},{"pos":[83308,83318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"oldName","pos":[83320,83327]},{"content":"The new name of the node; optional.","pos":[83330,83365]},{"content":"If no argument is passed, the new node name is determined by the child node type.","pos":[83366,83447]},{"pos":[83454,83466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that contains the name of the new element.","pos":[83468,83521]},{"pos":[83528,83535],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If no argument is passed, the new node name is determined by the child node type.","pos":[83537,83618]},{"content":"For example, if the TreeNode has forms as children, calling this method without an argument will return \"Form1\".","pos":[83619,83731]},{"content":"If the tree node has several child node types, the method returns the string \"object\".","pos":[83732,83818]},{"pos":[83825,83833],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following call to Treenode.newObjectName returns \"object\" because the data dictionary node has children that represent several object types.","pos":[83835,83979]},{"pos":[84155,84170],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that represents the current object.","pos":[84172,84224]},{"pos":[84258,84270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that represents the current object.","pos":[84272,84316]},{"pos":[84323,84330],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation returns the class name of the object.","pos":[84332,84396]},{"content":"The method can be overridden in a derived class to return values that are meaningful for that type.For example, an instance of the class returns the method name and type of the method, such as instance or static.","pos":[84397,84609]},{"pos":[84615,84634],"content":"Method treeNodeName","linkify":"Method treeNodeName","nodes":[{"content":"Method treeNodeName","pos":[0,19]}]},{"content":"Returns the name of the tree node.","pos":[84636,84670]},{"pos":[84708,84720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that contains the name of the tree node.","pos":[84722,84773]},{"pos":[84779,84798],"content":"Method treeNodePath","linkify":"Method treeNodePath","nodes":[{"content":"Method treeNodePath","pos":[0,19]}]},{"content":"Returns the unique path to the tree node within the Application Object Tree (AOT).","pos":[84800,84882]},{"pos":[84920,84932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the unique path of the tree node in the AOT.","pos":[84934,84986]},{"pos":[84993,85001],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example finds a TreeNode object of each UtilFileType and prints the path of the UtilFileType to the Infolog.","pos":[85003,85125]},{"pos":[86231,86250],"content":"Method treeNodeType","linkify":"Method treeNodeType","nodes":[{"content":"Method treeNodeType","pos":[0,19]}]},{"content":"Retrieves an instance of a TreeNodeType class that provides reflection information for the tree node.","pos":[86252,86353]},{"pos":[86400,86412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An instance of a TreeNodeType class.","pos":[86414,86450]},{"pos":[86456,86484],"content":"Method updateNodePermissions","linkify":"Method updateNodePermissions","nodes":[{"content":"Method updateNodePermissions","pos":[0,28]}]},{"pos":[86554,86564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"throwExceptions","pos":[86566,86581]},{"pos":[86590,86602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86608,86626],"content":"Method utilElement","linkify":"Method utilElement","nodes":[{"content":"Method utilElement","pos":[0,18]}]},{"content":"Returns a UtilElements record that is related to the node.","pos":[86628,86686]},{"pos":[86732,86744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The UtilElements record that is related to the node.","pos":[86746,86798]},{"pos":[86805,86812],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method throws an exception if the method is not supported for the tree node.","pos":[86814,86895]},{"pos":[86901,86921],"content":"Method utilIdElement","linkify":"Method utilIdElement","nodes":[{"content":"Method utilIdElement","pos":[0,20]}]},{"content":"Returns a UtilIdElements record that is related to the node.","pos":[86923,86983]},{"pos":[87033,87045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The UtilIdElements record that is related to the node.","pos":[87047,87101]},{"pos":[87108,87115],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method throws an exception if the method is not supported for the tree node.","pos":[87117,87198]},{"pos":[87204,87233],"content":"Method validateNameCharacters","linkify":"Method validateNameCharacters","nodes":[{"content":"Method validateNameCharacters","pos":[0,29]}]},{"pos":[87293,87303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[87305,87309]},{"pos":[87318,87330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87336,87351],"content":"Method findNode","linkify":"Method findNode","nodes":[{"content":"Method findNode","pos":[0,15]}]},{"content":"Returns a specified node in the Application Object Tree (AOT).","pos":[87353,87415]},{"pos":[87469,87479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[87481,87485]},{"content":"A string that indicates the path that is used in the search.","pos":[87488,87548]},{"pos":[87555,87567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The requested TreeNode object or nullNothingnullptrunita null reference (Nothing in Visual Basic) if no node with the specified path exists.","pos":[87569,87709]},{"pos":[87716,87723],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Another way of getting a TreeNode object is by using the Info.getNode method.","pos":[87725,87802]},{"content":"An important difference between the two methods is that the Info.getNode method will give you a node that is detached from the AOT, whereas the findNode method will return the node in the AOT.","pos":[87803,87995]},{"content":"This means that the node that is returned by the Info.getNode method will not have a parent node, whereas the one returned by the findNode method will have a parent node.","pos":[87996,88166]},{"pos":[88173,88181],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example retrieves the name of the tree node that is found the TreeNode::findNode method is called.","pos":[88183,88295]},{"content":"This example checks whether the user has the required security key before it calls the TreeNode.findNode method.","pos":[88296,88408]},{"pos":[88642,88667],"content":"Method generateObjectName","linkify":"Method generateObjectName","nodes":[{"content":"Method generateObjectName","pos":[0,25]}]},{"pos":[88730,88740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"template","pos":[88742,88750]},{"pos":[88759,88771],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88777,88808],"content":"Method getMaximumNodeNameLength","linkify":"Method getMaximumNodeNameLength","nodes":[{"content":"Method getMaximumNodeNameLength","pos":[0,31]}]},{"pos":[88887,88897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"modelElementTypeId","pos":[88899,88917]},{"pos":[88926,88938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88944,88971],"content":"Method isNodeReferenceValid","linkify":"Method isNodeReferenceValid","nodes":[{"content":"Method isNodeReferenceValid","pos":[0,27]}]},{"pos":[89045,89055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"treeNode","pos":[89057,89065]},{"pos":[89074,89086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89092,89116],"content":"Method isValidObjectName","linkify":"Method isValidObjectName","nodes":[{"content":"Method isValidObjectName","pos":[0,24]}]},{"content":"Determines whether the string passed as an argument can be used as a name for a node in the Application Object Tree (AOT).","pos":[89118,89240]},{"pos":[89302,89312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[89314,89318]},{"content":"The string that contains the tree node name to validate.","pos":[89321,89377]},{"pos":[89384,89396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if each condition is met; otherwise false.","pos":[89398,89445]},{"pos":[89452,89459],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A candidate name must meet the following conditions:","pos":[89461,89513]},{"content":"The first character must be a letter.","pos":[89519,89556]},{"content":"It can only contain letters, numbers or an underscore.","pos":[89561,89615]},{"content":"It must not evaluate to a token.","pos":[89620,89652]},{"content":"This method does not check if an element of the same name already exists.","pos":[89654,89727]},{"content":"It only validates that the argument is a valid name for an AOT object.","pos":[89728,89798]},{"content":"Duplicate names may not exist within classes, tables, extended data types, or enums.","pos":[89799,89883]},{"pos":[89890,89898],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example gives examples of valid and invalid arguments.","pos":[89900,89968]},{"pos":[90361,90376],"content":"Method rootNode","linkify":"Method rootNode","nodes":[{"content":"Method rootNode","pos":[0,15]}]},{"content":"Returns the root node of the AOT.","pos":[90378,90411]},{"pos":[90457,90469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The root node of the AOT.","pos":[90471,90496]},{"pos":[90503,90510],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method provides similar functionality to the rootNode method.","pos":[90512,90577]},{"pos":[90583,90610],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[90656,90678],"content":"Method treeNodeRelease","linkify":"Method treeNodeRelease","nodes":[{"content":"Method treeNodeRelease","pos":[0,22]}]},{"content":"Releases the tree node explicitly.","pos":[90680,90714]},{"pos":[90756,90763],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Usually you do not have to explicitly unload objects, because the garbage collector will do it automatically.","pos":[90765,90874]},{"content":"However, because tree nodes are ordinarily linked to the AOT, they are not garbage-collected.","pos":[90875,90968]},{"content":"If you run this method on many tree nodes in the same execution, it can be demanding on resources.","pos":[90969,91067]},{"content":"You should unload the tree nodes as you go along to give the garbage collector a chance to remove them.","pos":[91068,91171]},{"content":"Make sure to remove all references to the tree node and its subnodes before you call this method.","pos":[91172,91269]},{"content":"Use the TreeNode.TreeNodeType().isConsumingMemory method to determine if you need to call this method.","pos":[91270,91372]},{"pos":[91378,91405],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[91561,91571],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[91573,91577]},{"content":"xrefKind","pos":[91591,91599]},{"content":"lineNumber","pos":[91613,91623]},{"content":"columNumber","pos":[91637,91648]},{"content":"xrefRef","pos":[91662,91669]},{"content":"parentTypeId","pos":[91683,91695]},{"pos":[91703,91716],"content":"Method AOTrun","linkify":"Method AOTrun","nodes":[{"content":"Method AOTrun","pos":[0,13]}]},{"content":"Compiles this node and its subtree in the Application Object Tree (AOT).","pos":[91718,91790]},{"pos":[91822,91849],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[91895,91912],"content":"Method AOTrefresh","linkify":"Method AOTrefresh","nodes":[{"content":"Method AOTrefresh","pos":[0,17]}]},{"content":"Refreshes the node with the latest changes to the .aod file.","pos":[91914,91974]},{"pos":[92010,92037],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[92098,92108],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"struct1","pos":[92110,92117]},{"pos":[92125,92152],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[92213,92223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"properties","pos":[92225,92235]},{"pos":[92243,92262],"content":"Method AOTconfigure","linkify":"Method AOTconfigure","nodes":[{"content":"Method AOTconfigure","pos":[0,19]}]},{"pos":[92300,92314],"content":"Method AOTload","linkify":"Method AOTload","nodes":[{"content":"Method AOTload","pos":[0,14]}]},{"content":"Ensures that the object is loaded.","pos":[92316,92350]},{"pos":[92383,92404],"content":"Method treeNodeExport","linkify":"Method treeNodeExport","nodes":[{"content":"Method treeNodeExport","pos":[0,21]}]},{"content":"Exports this node and its subtree from the Application Object Tree (AOT).","pos":[92406,92479]},{"pos":[92544,92554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[92556,92564]},{"content":"flag","pos":[92578,92582]},{"pos":[92591,92598],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an attacker can control input to this method, a security risk exists.","pos":[92600,92672]},{"content":"Therefore, this method runs under Code Access Security.","pos":[92673,92728]},{"content":"Calls to this method on the server require permission from the .","pos":[92729,92793]},{"content":"Ensure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[92794,92926]},{"pos":[92933,92941],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This example uses the treeNodeExport method to export the ExampleClass class to an .xpo file.","pos":[92943,93036]},{"pos":[93741,93768],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[93845,93855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"source","pos":[93857,93863]},{"content":"isStatic","pos":[93877,93885]},{"pos":[93893,93910],"content":"Method AOTendXref","linkify":"Method AOTendXref","nodes":[{"content":"Method AOTendXref","pos":[0,17]}]},{"pos":[93946,93967],"content":"Method AOTmessageLine","linkify":"Method AOTmessageLine","nodes":[{"content":"Method AOTmessageLine","pos":[0,21]}]},{"content":"Writes text to the Application Object Tree (AOT) Message window.","pos":[93969,94033]},{"pos":[94098,94108],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[94110,94114]},{"content":"An integer that is ignored.","pos":[94117,94144]},{"content":"It does not currently direct the written text to a specific line number in the output Message window.","pos":[94145,94246]},{"content":"linenumber","pos":[94258,94268]},{"content":"An integer that is ignored.","pos":[94271,94298]},{"content":"It does not currently direct the written text to a specific line number in the output Message window.","pos":[94299,94400]},{"pos":[94407,94414],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is intended to be used to output text so that when the user later double-clicks that line of text in the message window, some action will happen regarding this node.","pos":[94416,94593]},{"pos":[94600,94608],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example executes the AOTmessageLine method on a Form object, because Form inherits this method from TreeNode.","pos":[94610,94733]},{"pos":[95504,95531],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[95601,95611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[95613,95617]},{"content":"value","pos":[95631,95636]},{"pos":[95644,95661],"content":"Method AOTrestore","linkify":"Method AOTrestore","nodes":[{"content":"Method AOTrestore","pos":[0,17]}]},{"content":"Reloads this node from the disk, if applicable.","pos":[95663,95710]},{"pos":[95768,95778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"forceReload","pos":[95780,95791]},{"pos":[95799,95819],"content":"Method AOTregenerate","linkify":"Method AOTregenerate","nodes":[{"content":"Method AOTregenerate","pos":[0,20]}]},{"pos":[95858,95876],"content":"Method AOTmakeXref","linkify":"Method AOTmakeXref","nodes":[{"content":"Method AOTmakeXref","pos":[0,18]}]},{"content":"Compiles this node and its subtree in the AOT, updating the cross-reference system.","pos":[95878,95961]},{"pos":[96028,96038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flag","pos":[96040,96044]},{"content":"xRefAll","pos":[96058,96065]},{"pos":[96074,96081],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be called at any:","pos":[96083,96116]},{"content":"list node (such as AOT, Tables, Forms, Project roots, and groups)","pos":[96122,96187]},{"content":"Application Object (such as a Table or Form)","pos":[96192,96236]},{"content":"methods branch","pos":[96241,96255]},{"content":"method","pos":[96260,96266]},{"pos":[96272,96286],"content":"Method AOTedit","linkify":"Method AOTedit","nodes":[{"content":"Method AOTedit","pos":[0,14]}]},{"content":"Opens the appropriate editor for this node.","pos":[96288,96331]},{"pos":[96389,96399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Line","pos":[96401,96405]},{"content":"The column of the cursor position; optional.","pos":[96408,96452]},{"content":"Column","pos":[96464,96470]},{"content":"The column of the cursor position; optional.","pos":[96473,96517]},{"pos":[96524,96531],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the node is a method, the code editor will open.","pos":[96533,96584]},{"content":"If the node is a documentation object, the Help editor will open.","pos":[96585,96650]},{"pos":[96657,96665],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example opens the X++ editor, shows the class declaration of the class Tax, and positions the pointer at line 6, column 8.","pos":[96667,96808]},{"pos":[97186,97210],"content":"Method AOTshowProperties","linkify":"Method AOTshowProperties","nodes":[{"content":"Method AOTshowProperties","pos":[0,24]}]},{"content":"Opens the property sheet (if not already open) and shows the properties for this node.","pos":[97212,97298]},{"pos":[97341,97357],"content":"Method AOTinsert","linkify":"Method AOTinsert","nodes":[{"content":"Method AOTinsert","pos":[0,16]}]},{"content":"Inserts a node among the subnodes of this node.","pos":[97359,97406]},{"pos":[97501,97511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parent","pos":[97513,97519]},{"content":"after","pos":[97533,97538]},{"content":"doNotDuplicate","pos":[97552,97566]},{"pos":[97574,97584],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the TreeNode class.","pos":[97586,97635]},{"pos":[97664,97678],"content":"Method AOTMove","linkify":"Method AOTMove","nodes":[{"content":"Method AOTMove","pos":[0,14]}]},{"pos":[97745,97755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parent","pos":[97757,97763]},{"content":"after","pos":[97777,97782]},{"pos":[97790,97817],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[97875,97885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"modelId","pos":[97887,97894]},{"pos":[97901,97923],"content":"Class TreeNodeIterator","linkify":"Class TreeNodeIterator","nodes":[{"content":"Class TreeNodeIterator","pos":[0,22]}]},{"content":"The TreeNodeIterator class traverses the child nodes of a tree node.","pos":[97967,98035]},{"pos":[98041,98048],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[98054,98062],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints the names of all child nodes of the root node.","pos":[98064,98139]},{"pos":[98674,98681],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[98685,98691]},{"content":"Description","pos":[98710,98721]},{"content":"public TreeNode next()","pos":[98949,98971]},{"content":"Retrieves the next element in the list of child nodes.","pos":[98974,99028]},{"content":"public void reset()","pos":[99081,99100]},{"content":"Resets the iterator so that the next call to the next method returns the first child node in the list.","pos":[99106,99208]},{"pos":[99216,99227],"content":"Method next","linkify":"Method next","nodes":[{"content":"Method next","pos":[0,11]}]},{"content":"Retrieves the next element in the list of child nodes.","pos":[99229,99283]},{"pos":[99318,99330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The next child node in the tree.","pos":[99332,99364]},{"pos":[99370,99382],"content":"Method reset","linkify":"Method reset","nodes":[{"content":"Method reset","pos":[0,12]}]},{"content":"Resets the iterator so that the next call to the next method returns the first child node in the list.","pos":[99384,99486]},{"pos":[99516,99534],"content":"Class TreeNodeType","linkify":"Class TreeNodeType","nodes":[{"content":"Class TreeNodeType","pos":[0,18]}]},{"content":"The TreeNodeType class retrieves information about types of TreeNode classes.","pos":[99574,99651]},{"pos":[99657,99664],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class enable you to reflect on a TreeNode class instance.","pos":[99666,99728]},{"content":"The reflection information is not specific to an instance of a TreeNode class.","pos":[99729,99807]},{"content":"All TreeNode instances with the same NodeType share the same TreeNodeType.","pos":[99808,99882]},{"content":"The TreeNode.TreeNodeType method return a treeNodeType object with the reflection informantion.","pos":[99883,99978]},{"pos":[99984,99992],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[99998,100005],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[100009,100015]},{"content":"Description","pos":[100054,100065]},{"content":"public int id()","pos":[100313,100328]},{"content":"Returns the type's ID.","pos":[100358,100380]},{"content":"public boolean isConsumingMemory()","pos":[100465,100499]},{"content":"Indicates whether instances of this node type are consuming memory that needs to be manually released.","pos":[100510,100612]},{"content":"public boolean isGetNodeInLayerSupported()","pos":[100617,100659]},{"content":"Indicates whether instances of this node type support the TreeNode.GetNodeInLayer method.","pos":[100662,100751]},{"content":"public boolean isLayerAware()","pos":[100769,100798]},{"content":"Indicates whether instances of this node type are decorated with layers in the AOT.","pos":[100814,100897]},{"content":"public boolean isModelElement()","pos":[100921,100952]},{"content":"Indicates whether instances of this node type are model-elements.","pos":[100966,101031]},{"content":"public boolean isRootElement()","pos":[101073,101103]},{"content":"Indicates whether instances of this node type are root-elements.","pos":[101118,101182]},{"content":"public boolean isUtilElement()","pos":[101225,101255]},{"content":"Indicates whether instances of this node type are util-elements.","pos":[101270,101334]},{"content":"public boolean isVCSControllableElement()","pos":[101377,101418]},{"content":"private void new()","pos":[101529,101547]},{"content":"Initializes a new instance of the TreeNodeType class.","pos":[101574,101627]},{"pos":[101684,101693],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Returns the type's ID.","pos":[101695,101717]},{"pos":[101745,101757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the TreeNodeType.","pos":[101759,101786]},{"pos":[101792,101816],"content":"Method isConsumingMemory","linkify":"Method isConsumingMemory","nodes":[{"content":"Method isConsumingMemory","pos":[0,24]}]},{"content":"Indicates whether instances of this node type are consuming memory that needs to be manually released.","pos":[101818,101920]},{"pos":[101967,101979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if tree nodes of this type are consumes memory; otherwise, false.","pos":[101981,102051]},{"pos":[102058,102065],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"After working with TreeNode instances of this type it is important to call the TreeNode.TreeNodeRelease method to release any consumed memory.","pos":[102067,102209]},{"content":"Failure to do this will result in out-of-memory exceptions.","pos":[102210,102269]},{"content":"Do not call the TreeNode.TreeNodeRelease method before all instances of TreeNode classes in the composition hierarchy has been garbage collected.","pos":[102270,102415]},{"content":"For example, do not call the TreeNode.TreeNodeRelease() method on MyClass, if you still have a TreeNode instance of MyClass.myMethod.","pos":[102416,102549]},{"pos":[102555,102587],"content":"Method isGetNodeInLayerSupported","linkify":"Method isGetNodeInLayerSupported","nodes":[{"content":"Method isGetNodeInLayerSupported","pos":[0,32]}]},{"content":"Indicates whether instances of this node type support the TreeNode.GetNodeInLayer method.","pos":[102589,102678]},{"pos":[102733,102745],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if tree nodes of this type support the TreeNode.GetNodeInLayer method; otherwise, false.","pos":[102747,102840]},{"pos":[102846,102865],"content":"Method isLayerAware","linkify":"Method isLayerAware","nodes":[{"content":"Method isLayerAware","pos":[0,19]}]},{"content":"Indicates whether instances of this node type are decorated with layers in the AOT.","pos":[102867,102950]},{"pos":[102992,103004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if tree nodes of this type are decorated with layers; otherwise, false.","pos":[103006,103082]},{"pos":[103089,103096],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Tree nodes of this type support the AOTLayer and AOTLayers methods.","pos":[103098,103165]},{"pos":[103171,103192],"content":"Method isModelElement","linkify":"Method isModelElement","nodes":[{"content":"Method isModelElement","pos":[0,21]}]},{"content":"Indicates whether instances of this node type are model-elements.","pos":[103194,103259]},{"pos":[103303,103315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if tree nodes of this type are model-elements; otherwise, false.","pos":[103317,103386]},{"pos":[103393,103400],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A model-element is a tree node that is (or can be) persisted in the model store.","pos":[103402,103482]},{"content":"For each model-element tree node one record can be found in the ModelElements table in the model store.","pos":[103483,103586]},{"content":"Model-elements are visually decorated with the name of the Model they are contained by in the AOT.","pos":[103587,103685]},{"pos":[103691,103711],"content":"Method isRootElement","linkify":"Method isRootElement","nodes":[{"content":"Method isRootElement","pos":[0,20]}]},{"content":"Indicates whether instances of this node type are root-elements.","pos":[103713,103777]},{"pos":[103820,103832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if tree nodes of this type are root-elements; otherwise, false.","pos":[103834,103902]},{"pos":[103909,103916],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A root-element is the root in a composition hierarchy of tree nodes.","pos":[103918,103986]},{"content":"A root-element never has a model-element parent.","pos":[103987,104035]},{"content":"Examples include MyTable, MyClass, MyForm.","pos":[104036,104078]},{"pos":[104084,104104],"content":"Method isUtilElement","linkify":"Method isUtilElement","nodes":[{"content":"Method isUtilElement","pos":[0,20]}]},{"content":"Indicates whether instances of this node type are util-elements.","pos":[104106,104170]},{"pos":[104213,104225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if tree nodes of this type are util-elements; otherwise, false.","pos":[104227,104295]},{"pos":[104302,104309],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An util-element is a tree node that can be accessed via the UtilElements and UtilIdElements views.","pos":[104311,104409]},{"content":"Util-elements are a subset of model-elements.","pos":[104410,104455]},{"pos":[104461,104492],"content":"Method isVCSControllableElement","linkify":"Method isVCSControllableElement","nodes":[{"content":"Method isVCSControllableElement","pos":[0,31]}]},{"pos":[104546,104558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104564,104574],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the TreeNodeType class.","pos":[104576,104629]}],"content":"---\n# required metadata\n\ntitle: T Classes | Microsoft Docs\ndescription: System API classes that start with the letter T.\nauthor: annbe\nmanager: AnnBe\nms.date: 2016-02-24 01:03:12\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: \nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 51774\nms.assetid: 426ade5a-0d20-4c4e-92f0-ba454d920843\n# ms.region: \n# ms.industry: \nms.author: RobinARH\n\n---\n\n# T Classes\n\nClass TableExtension\n--------------------\n\n    class TableExtension extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                    | Description                                             |\n|-----------------------------------------------------------|---------------------------------------------------------|\n| public void new()                                         | Initializes a new instance of the TableExtension class. |\n| public void modifiedField(Common record, FieldId fieldId) |                                                         |\n| public void defaultRow(Common record)                     |                                                         |\n| public void defaultField(Common record, FieldId fieldId)  |                                                         |\n\n### Method new\n\nInitializes a new instance of the TableExtension class.\n\n    public void new()\n\n### Method modifiedField\n\n    public void modifiedField(Common record, FieldId fieldId)\n\n#### Parameters\n\nrecord  \n\n<!-- -->\n\nfieldId  \n\n### Method defaultRow\n\n    public void defaultRow(Common record)\n\n#### Parameters\n\nrecord  \n\n### Method defaultField\n\n    public void defaultField(Common record, FieldId fieldId)\n\n#### Parameters\n\nrecord  \n\n<!-- -->\n\nfieldId  \n\n## Class TextBuffer\n    class TextBuffer extends Object\n\nThe TextBuffer class manages arbitrary text file content, and generates and manipulates text.\n\n### Remarks\n\nThis class features various string operations, a simple clipboard, and a file interface.\n\n### Examples\n\n    static void example() \n    { \n        FileIoPermission _perm = new FileIoPermission(\"myfile.txt\",'r'); \n        TextBuffer txtb = new TextBuffer(); \n        _perm.assert(); \n        txtb.fromFile(\"myfile.txt\"); // Read text from file \n        txtb.toClipboard(); // Copy it to the clipboard \n    }\n\n### Methods\n\n| Method                                                                 | Description                                                                                           |\n|------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|\n| public boolean accept(str searchText)                                  |                                                                                                       |\n| public int decryptOld(int cryptKey)                                    |                                                                                                       |\n| public boolean find(str searchText, \\[int start\\])                     | Searches the TextBuffer object for any occurrence of a string expression.                             |\n| public boolean fromClipboard()                                         | Replaces the content of the TextBuffer object with the content of the clipboard.                      |\n| public boolean fromFile(str filename, \\[int encoding\\])                | Replaces the content of a TextBuffer object with the content of the specified file.                   |\n| public str getText()                                                   | Retrieves the current content of the TextBuffer object.                                               |\n| public int getValue()                                                  |                                                                                                       |\n| public boolean ignoreCase(\\[boolean ignoreCase\\])                      |                                                                                                       |\n| public boolean isNext(str searchText)                                  |                                                                                                       |\n| public int matchLen()                                                  | Returns the string length of the first match in the TextBuffer object.                                |\n| public int matchPos()                                                  | Returns the character position of the first occurrence of the search string in the TextBuffer object. |\n| public str nextToken(\\[boolean includeWholeLine\\], \\[str stopAtChar\\]) |                                                                                                       |\n| public int numLines()                                                  | Retrieves the number of lines in the TextBuffer object.                                               |\n| public boolean regularExpressions(\\[boolean useRegularExpressions\\])   |                                                                                                       |\n| public int size()                                                      |                                                                                                       |\n| public str subStr(int start, int length)                               | Retrieves part of the content of the TextBuffer object (a substring).                                 |\n| public boolean toFile(str filename, \\[int encoding\\])                  | Saves the content of the TextBuffer object to a file.                                                 |\n| public str token()                                                     |                                                                                                       |\n| public str toString()                                                  | Returns a string that represents the current object.                                                  |\n| ::public static int strHashKey(str sourceString)                       |                                                                                                       |\n| public void new()                                                      | Initializes a new instance of the TextBuffer class.                                                   |\n| public void removeChar(str charList)                                   |                                                                                                       |\n| public void toClipboard()                                              | Copies the content of a TextBuffer object to the clipboard.                                           |\n| public void insert(str insertString, int position)                     |                                                                                                       |\n| public void setText(str string)                                        | Sets the content of the TextBuffer object to the specified string, overwriting any existing content.  |\n| public void appendText(str string)                                     | Appends a string to the content of the TextBuffer object.                                             |\n| public void replace(str findString, str replaceString)                 |                                                                                                       |\n| public void delete(int start, int length)                              |                                                                                                       |\n\n### Method accept\n\n    public boolean accept(str searchText)\n\n#### Parameters\n\nsearchText  \n\n#### Return Value\n\n### Method decryptOld\n\n    public int decryptOld(int cryptKey)\n\n#### Parameters\n\ncryptKey  \n\n#### Return Value\n\n### Method find\n\nSearches the TextBuffer object for any occurrence of a string expression.\n\n    public boolean find(str searchText, [int start])\n\n#### Parameters\n\nsearchText  \nA numeric expression that sets the starting position for each search; optional. If this parameter is omitted, the search starts at the first character position.\n\n<!-- -->\n\nstart  \nA numeric expression that sets the starting position for each search; optional. If this parameter is omitted, the search starts at the first character position.\n\n#### Return Value\n\ntrue if searchText is found; otherwise, false.\n\n#### Remarks\n\nThis method performs a textual, case-insensitive comparison by using regular expressions. For more information, see the match function. Case-insensitivity can be turned off by using the ignoreCase method. Regular expressions can be turned off by using the regularExpressions method.\n\n#### Examples\n\nThe following example searches the TextBuffer object for all occurrences of a specified string and prints the position at which the match is found.\n\n    int pos; \n    TextBuffer textBuffer; \n    textBuffer = new TextBuffer(); \n    textBuffer.setText(\"ABC DEF GHI JKL MNO ABC ABC\"); \n    pos = 0; \n    while (textBuffer.find(\"ABC\",pos)) \n    { \n        print \"String found at position: \", textBuffer.matchPos(); \n        pause; \n        pos = textBuffer.matchPos()+1; \n    }\n\n### Method fromClipboard\n\nReplaces the content of the TextBuffer object with the content of the clipboard.\n\n    public boolean fromClipboard()\n\n#### Return Value\n\ntrue if the replacement was successful; otherwise, false.\n\n#### Examples\n\n    { \n        TextBuffer txtb = new textBuffer(); \n        FileIoPermission perm; \n        #define.ExampleFile(@\"c:\\test.txt\") \n        #define.ExampleOpenMode(\"w\") \n        // Set code access permission to help protect the use of \n        // TextBuffer.tofile \n        perm = new FileIoPermission(#ExampleFile, #ExampleOpenMode); \n        perm.assert(); \n        if ( txtb.fromClipboard() ) \n        { \n            // Got text from clipboard - save it to file \n            txtb.toFile(#ExampleFile); \n        } \n        // Close the code access permission scope. \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method fromFile\n\nReplaces the content of a TextBuffer object with the content of the specified file.\n\n    public boolean fromFile(str filename, [int encoding])\n\n#### Parameters\n\nfilename  \nThe encoding option to use; optional.\n\n<!-- -->\n\nencoding  \nThe encoding option to use; optional.\n\n#### Return Value\n\ntrue if the file operation was successful; otherwise, false.\n\n#### Remarks\n\nThe following are possible values for the encoding parameter that are supplied by the FileEncoding system enumeration:\n\n-   ACP\n-   UTF8\n-   UTF16BE\n-   UTF16LE\n-   GB18030\n-   AUTO\n\nIf the file operation is unsuccessful, the TextBuffer object remains unchanged. If an attacker can control input to the fromFile method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the ExecutePermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n### Method getText\n\nRetrieves the current content of the TextBuffer object.\n\n    public str getText()\n\n#### Return Value\n\nA string that contains the content of TextBuffer object.\n\n#### Remarks\n\nThe TextBuffer can contain new lines, which are then present in the returned string.\n\n### Method getValue\n\n    public int getValue()\n\n#### Return Value\n\n### Method ignoreCase\n\n    public boolean ignoreCase([boolean ignoreCase])\n\n#### Parameters\n\nignoreCase  \n\n#### Return Value\n\n### Method isNext\n\n    public boolean isNext(str searchText)\n\n#### Parameters\n\nsearchText  \n\n#### Return Value\n\n### Method matchLen\n\nReturns the string length of the first match in the TextBuffer object.\n\n    public int matchLen()\n\n#### Return Value\n\nThe length of the match that is found; 0 (zero) if no match is found.\n\n#### Remarks\n\nThis method is used as part of a text search (see the find method).\n\n### Method matchPos\n\nReturns the character position of the first occurrence of the search string in the TextBuffer object.\n\n    public int matchPos()\n\n#### Return Value\n\nThe position at which the match is found; 0 (zero) if no match is found.\n\n#### Remarks\n\nThis method is used as part of a text search (see the find method).\n\n### Method nextToken\n\n    public str nextToken([boolean includeWholeLine], [str stopAtChar])\n\n#### Parameters\n\nincludeWholeLine  \n\n<!-- -->\n\nstopAtChar  \n\n#### Return Value\n\n### Method numLines\n\nRetrieves the number of lines in the TextBuffer object.\n\n    public int numLines()\n\n#### Return Value\n\nThe number of lines in the content.\n\n#### Remarks\n\nLines are separated by newlines ('\\\\n').\n\n#### Examples\n\n    { \n        TextBuffer txtb = new TextBuffer(); \n        if (txtb.fromClipboard()) \n        { \n            print \"Clipboard contains \",txtb.numLines(),\" lines.\"; \n        } \n    }\n\n### Method regularExpressions\n\n    public boolean regularExpressions([boolean useRegularExpressions])\n\n#### Parameters\n\nuseRegularExpressions  \n\n#### Return Value\n\n### Method size\n\n    public int size()\n\n#### Return Value\n\n### Method subStr\n\nRetrieves part of the content of the TextBuffer object (a substring).\n\n    public str subStr(int start, int length)\n\n#### Parameters\n\nstart  \nThe length of the desired substring.\n\n<!-- -->\n\nlength  \nThe length of the desired substring.\n\n#### Return Value\n\nA string that contains the specified part of the TextBuffer object content.\n\n#### Remarks\n\nWhen you specify the start position for substring, use 1 for the first character in the content, 2 for the second character, and so on.\n\n#### Examples\n\n    { \n        TextBuffer txtb = new TextBuffer(); \n        str mystr; \n        if (txtb.fromClipboard()) \n        { \n            mystr = txtb.subStr(10,15);  \n            // 15 long substring starting at position 10. \n        } \n    }\n\n### Method toFile\n\nSaves the content of the TextBuffer object to a file.\n\n    public boolean toFile(str filename, [int encoding])\n\n#### Parameters\n\nfilename  \n\n<!-- -->\n\nencoding  \n\n#### Return Value\n\ntrue if the operation is successful; otherwise, false.\n\n#### Remarks\n\nIf the specified file already exists, it is overwritten without confirmation. If an attacker can control input to the toFile method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the ExecutePermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n### Method token\n\n    public str token()\n\n#### Return Value\n\n### Method toString\n\nReturns a string that represents the current object.\n\n    public str toString()\n\n#### Return Value\n\nA string that represents the current object.\n\n#### Remarks\n\nThe default implementation returns the class name of the object. The method can be overridden in a derived class so that it returns values that are meaningful for that type. For example, an instance of the SysMethodInfo class returns the method name and type of the method, such as instance or static.\n\n### Method strHashKey\n\n    public static int strHashKey(str sourceString)\n\n#### Parameters\n\nsourceString  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the TextBuffer class.\n\n    public void new()\n\n### Method removeChar\n\n    public void removeChar(str charList)\n\n#### Parameters\n\ncharList  \n\n### Method toClipboard\n\nCopies the content of a TextBuffer object to the clipboard.\n\n    public void toClipboard()\n\n### Method insert\n\n    public void insert(str insertString, int position)\n\n#### Parameters\n\ninsertString  \n\n<!-- -->\n\nposition  \n\n### Method setText\n\nSets the content of the TextBuffer object to the specified string, overwriting any existing content.\n\n    public void setText(str string)\n\n#### Parameters\n\nstring  \nA string that contains the new text for the TextBuffer object.\n\n#### Remarks\n\nIf the TextBuffer object contains any content, it is overwritten by the new content.\n\n#### Examples\n\n    { \n        TextBuffer txtb = new TextBuffer(); \n        txtb.setText(\"This is the first text.\"); \n        // Now txtb contains exactly that text. \n    }\n\n### Method appendText\n\nAppends a string to the content of the TextBuffer object.\n\n    public void appendText(str string)\n\n#### Parameters\n\nstring  \nThe string to append.\n\n#### Examples\n\n    { \n        TextBuffer txtb = new TextBuffer(); \n        txtb.setText(\"[One]\"); \n        txtb.appendText(\"[Another]\"); \n        print txtb.getText(); // Will print \"[One][Another]\" \n    }\n\n### Method replace\n\n    public void replace(str findString, str replaceString)\n\n#### Parameters\n\nfindString  \n\n<!-- -->\n\nreplaceString  \n\n### Method delete\n\n    public void delete(int start, int length)\n\n#### Parameters\n\nstart  \n\n<!-- -->\n\nlength  \n\n## Class TextIo\n    class TextIo extends CommaIo\n\nThe TextIo class provides functionality for reading and writing text files.\n\n### Remarks\n\nTextIO replaces AsciiIO to provide support for non-ANSI code page file I/O. The TextIO constructor has an additional optional parameter to set the code page of the file. The TextIO.new method has an optional argument that specifies the code page of the file. The default value is UTF-16LE (the Microsoft Windows native Unicode representation). It is best to use this in most instances, especially if end-users might edit the file in a text editor outside Microsoft Dynamics AX. For more information, see TextIo.new. When files are read, TextIO examines the first few bytes of the file for a byte-order mark (BOM) and automatically handles UTF-8, UTF-16LE, and UTF-16BE. If no BOM is found, the file is assumed to be in the ANSI Code Page (ACP) format.\n\n### Examples\n\n### Methods\n\n| Method                                                    | Description                                                                                                        |\n|-----------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|\n| public str inFieldDelimiter(\\[str value\\])                | Gets or sets the character that is used for the field delimiter of an input file represented by a TextIO object.   |\n| public str inRecordDelimiter(\\[str value\\])               | Gets or sets the character that is used for the record delimiter of an input file represented by a TextIO object.  |\n| public int inRecordLength(\\[int value\\])                  | Gets or sets the record length for an input file.                                                                  |\n| public str outFieldDelimiter(\\[str value\\])               | Gets or sets the character that is used for the field delimiter of an output file represented by a TextIO object.  |\n| public str outRecordDelimiter(\\[str value\\])              | Gets or sets the character that is used for the record delimiter of an output file represented by a TextIO object. |\n| public container read()                                   | Reads the next full record from a TextIO object.                                                                   |\n| public IO\\_Status status()                                | Retrieves the status of the last operation performed on a TextIo object.                                           |\n| public boolean write(VarArg values)                       | Writes data to a file represented by a TextIO object.                                                              |\n| public boolean writeChar(int int)                         | Writes a Unicode character to a file.                                                                              |\n| public boolean writeExp(container data)                   | Writes the contents of a container to a file represented by a TextIO object.                                       |\n| public boolean writeRaw(str data)                         | Reserved.                                                                                                          |\n| public void new(str filename, str mode, \\[int codepage\\]) | Creates a new instance of the TextIO class.                                                                        |\n| public void finalize()                                    | Closes the file and, if data was written, flushes the file buffers to disk.                                        |\n\n### Method inFieldDelimiter\n\nGets or sets the character that is used for the field delimiter of an input file represented by a TextIO object.\n\n    public str inFieldDelimiter([str value])\n\n#### Parameters\n\nvalue  \nThe character to be used as the field delimiter; optional.\n\n#### Return Value\n\nThe character used as the field delimiter.\n\n#### Remarks\n\nTo set the field delimiter for an output file, use\n\n#### Examples\n\nThe following example sets the field delimiter for an input file to '\\\\r\\\\n'.\n\n    protected void openFile() \n    { \n        #define.delimiter('\\r\\n') \n        super(); \n        importFile.inFieldDelimiter(#delimiter); \n    }\n\n### Method inRecordDelimiter\n\nGets or sets the character that is used for the record delimiter of an input file represented by a TextIO object.\n\n    public str inRecordDelimiter([str value])\n\n#### Parameters\n\nvalue  \nThe character to be used as the record delimiter; optional.\n\n#### Return Value\n\nThe character used as the record delimiter.\n\n#### Remarks\n\nTo set the record delimiter for an output file, use the .\n\n#### Examples\n\nThe following example sets the record delimiter to 128.\n\n    boolean openFile() \n    { \n        boolean ret = false; \n        int     recordLength = 128; \n        int     numOflastCharacter = 255; \n        textFile = new TextIo(filename, 'r'); \n        if (textFile) \n        { \n            if (textFile.status()) \n            { \n                throw error(\"@SYS52680\"); \n            } \n            textFile.inFieldDelimiter(num2char(numOflastCharacter)); \n            textFile.inRecordDelimiter(num2char(numOflastCharacter)); \n            textFile.inRecordLength(recordLength); \n            ret = true; \n        } \n        return ret; \n    }\n\n### Method inRecordLength\n\nGets or sets the record length for an input file.\n\n    public int inRecordLength([int value])\n\n#### Parameters\n\nvalue  \nThe record length for the input file; optional.\n\n#### Return Value\n\nThe record length for the input file.\n\n#### Remarks\n\nFor files that have a fixed-length format, use the inRecordLength property to ensure that no more than the specified number of characters are read for each record.If the record format is overruled by a specified inRecordDelimiter property value, that is the inRecordDelimiter value is met before the fixed length is read, the record is accepted, and no further data is read. To ensure that a fixed number of characters are read, set the inRecordDelimiter property value to an empty string. When no inRecordDelimiter property value is found, the inRecordDelimiter property value is the maximum limit of characters to read. Set the inRecordDelimiter property value to zero to disable the record length check.\n\n#### Examples\n\nThe following example sets the record length to 128.\n\n    boolean openFile() \n    { \n        boolean ret = false; \n        int     recordLength = 128; \n        int     numOflastCharacter = 255; \n        textFile = new TextIo(filename, 'r'); \n        if (textFile) \n        { \n            if (textFile.status()) \n            { \n                throw error(\"@SYS52680\"); \n            } \n            textFile.inFieldDelimiter(num2char(numOflastCharacter)); \n            textFile.inRecordDelimiter(num2char(numOflastCharacter)); \n            textFile.inRecordLength(recordLength); \n            ret = true; \n        } \n        return ret; \n    }\n\n### Method outFieldDelimiter\n\nGets or sets the character that is used for the field delimiter of an output file represented by a TextIO object.\n\n    public str outFieldDelimiter([str value])\n\n#### Parameters\n\nvalue  \nThe character to be used as the field delimiter; optional.\n\n#### Return Value\n\nThe character used as the field delimiter.\n\n#### Remarks\n\nTo set the field delimiter for an input file, use the .\n\n#### Examples\n\nThe following example sets the field delimiter to ' ' (nothing) for an output file.\n\n    void defineFile() \n    { \n        diskFile = new TextIo(diskFileName,'W'); \n        if (!diskFile) \n        { \n            throw error(\"@SYS26757\"); \n        } \n        diskFile.outRecordDelimiter('\\r\\n'); \n        diskFile.outFieldDelimiter(''); \n    }\n\n### Method outRecordDelimiter\n\nGets or sets the character that is used for the record delimiter of an output file represented by a TextIO object.\n\n    public str outRecordDelimiter([str value])\n\n#### Parameters\n\nvalue  \nThe character to be used as the record delimiter; optional.\n\n#### Return Value\n\nThe character used as the record delimiter.\n\n#### Remarks\n\nTo set the record delimiter for an input file, use the .\n\n#### Examples\n\nThe following example sets the record delimiter for an output file to '\\\\r\\\\n'.\n\n    void defineFile() \n    { \n        diskFile = new TextIo(diskFileName,'W'); \n        if (!diskFile) \n        { \n            throw error(\"@SYS26757\"); \n        } \n        diskFile.outRecordDelimiter('\\r\\n'); \n        diskFile.outFieldDelimiter(''); \n    }\n\n### Method read\n\nReads the next full record from a TextIO object.\n\n    public container read()\n\n#### Return Value\n\nA container that holds one record.\n\n#### Remarks\n\nEach entry in the container equals one field in the record. The definition of the next full record is controlled by the inFieldDelimiter, inRecordDelimiter, and inRecordLength properties. These properties have default values that allow input and output of the most common formats. It might be necessary to adjust the properties by using the inFieldDelimiter, inRecordDelimiter, and inRecordLength methods.\n\n#### Examples\n\nThe following example reads a record from a file and uses the conpeek function to extract values from the record.\n\n    public void run() \n    { \n        container         fileRecord; \n        IntrastatToProdCom intrastatToProdCom; \n        if (filename) \n        { \n            this.initializeFile(); \n            fileRecord = prodComFile.read(); \n            ttsbegin; \n            while (fileRecord) \n            { \n                intrastatToProdCom.IntrastatItemCodeID = conpeek(fileRecord, 1); \n                intrastatToProdCom.InventProdComCodeID = conpeek (fileRecord, 2); \n                intrastatToProdCom.ValidFromYear = conpeek (fileRecord, 3); \n                intrastatToProdCom.ValidTillYear = conpeek (fileRecord, 4); \n                intrastatToProdCom.insert(); \n                filerecord = prodComFile.read(); \n            } \n            ttscommit; \n        } \n    }\n\n### Method status\n\nRetrieves the status of the last operation performed on a TextIo object.\n\n    public IO_Status status()\n\n#### Return Value\n\nThe status of the last operation.\n\n#### Examples\n\nThe following example throws an error if a file does not exist or if the last operation on the file did not have a status of the IO\\_Status::Ok enumeration value.\n\n    protected void checkDiskFileStatus() \n    { \n        if (!diskFile || diskFile.status() != IO_Status::Ok) \n        { \n            throw error(strfmt(\"@SYS76826\", diskFileName)); \n        } \n    }\n\n### Method write\n\nWrites data to a file represented by a TextIO object.\n\n    public boolean write(VarArg values)\n\n#### Parameters\n\nvalues  \nThe values to write to the file. The values can be of different data types.\n\n#### Return Value\n\ntrue if the write operation succeeds; otherwise, false.\n\n#### Remarks\n\nIf the write operation fails, can be used to ascertain the cause. The write method accepts a variable number of arguments. Each value is put into the output record as a field. The fields are separated by the field delimiter specified by the . Each record is separated by the delimiter specified by the . To write complete containers, use the .\n\n### Method writeChar\n\nWrites a Unicode character to a file.\n\n    public boolean writeChar(int int)\n\n#### Parameters\n\nint  \n\n#### Return Value\n\ntrue if the write operation succeeds; otherwise, false.\n\n#### Remarks\n\nIf the write operation fails, the TextIO.status method can be used to check for the cause. To write multiple values or to write data of different types to a file, use the TextIO.write method.\n\n### Method writeExp\n\nWrites the contents of a container to a file represented by a TextIO object.\n\n    public boolean writeExp(container data)\n\n#### Parameters\n\ndata  \nThe container that has data to write to the file.\n\n#### Return Value\n\ntrue if the write operation succeeds; otherwise, false.\n\n#### Remarks\n\nIf the write operation fails, the TextIo.status Method can be used to ascertain the cause. Entries in the container are separated by the delimiter set by the outFieldDelimiter method. Containers are separated by the delimiter set by the outRecordDelimiter method.\n\n### Method writeRaw\n\nReserved.\n\n    public boolean writeRaw(str data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method new\n\nCreates a new instance of the TextIO class.\n\n    public void new(str filename, str mode, [int codepage])\n\n#### Parameters\n\nfilename  \nThe code page number for the character set to be read from or written to the file. The default value is 1200 (UTF-16LE). This parameter is optional. Following are the most common values: For more information about these options, see the list of http://go.microsoft.com/fwlink/?LinkID=78282&clcid=0x409. An error is reported if an invalid code page is requested. Notice that a code page is reported as \"invalid\" if it is not installed on the computer (different code pages may be installed on the client and server). For example, specifying code page 1253 for Greek fails unless the computer's ACP is Greek or Greek language support has been loaded by using Control Panel &gt; Regional Options.\n\n<!-- -->\n\nmode  \nThe code page number for the character set to be read from or written to the file. The default value is 1200 (UTF-16LE). This parameter is optional. Following are the most common values: For more information about these options, see the list of http://go.microsoft.com/fwlink/?LinkID=78282&clcid=0x409. An error is reported if an invalid code page is requested. Notice that a code page is reported as \"invalid\" if it is not installed on the computer (different code pages may be installed on the client and server). For example, specifying code page 1253 for Greek fails unless the computer's ACP is Greek or Greek language support has been loaded by using Control Panel &gt; Regional Options.\n\n<!-- -->\n\ncodepage  \nThe code page number for the character set to be read from or written to the file. The default value is 1200 (UTF-16LE). This parameter is optional. Following are the most common values: For more information about these options, see the list of http://go.microsoft.com/fwlink/?LinkID=78282&clcid=0x409. An error is reported if an invalid code page is requested. Notice that a code page is reported as \"invalid\" if it is not installed on the computer (different code pages may be installed on the client and server). For example, specifying code page 1253 for Greek fails unless the computer's ACP is Greek or Greek language support has been loaded by using Control Panel &gt; Regional Options.\n\n#### Remarks\n\nA run-time error occurs if the file is accessed with a method that does not correspond to the current opened mode (for example, you try to write to a read-mode file). If an attacker can control input to the new method, a security risk exists. This method runs under Code Access Security. Calls to this method on the server require permission from the FileIoPermission class. Ensure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method. The following table describes some of the more common code pages that might be specified for the \\_codePage parameter.\n\n<table>\n<colgroup>\n<col width=\"33%\" />\n<col width=\"33%\" />\n<col width=\"33%\" />\n</colgroup>\n<tbody>\n<tr class=\"odd\">\n<td>0</td>\n<td>ANSI code page (ACP)</td>\n<td>The code page that supports only characters in the user's current language. The code page is unsuitable for anything that might contain multilingual data or for monolingual data that might be transferred between two systems by using different code pages.</td>\n</tr>\n<tr class=\"even\">\n<td>437</td>\n<td>OEM code page 437</td>\n<td>The IBM PC or MS-DOS code page 437. It is often abbreviated as CP437 and also called DOS-US or OEM-US.</td>\n</tr>\n<tr class=\"odd\">\n<td>850</td>\n<td>Code page 850</td>\n<td>A code page that was used in Western Europe running on operating systems, such as MS-DOS.</td>\n</tr>\n<tr class=\"even\">\n<td>1200</td>\n<td>UTF-16LE</td>\n<td>The native Unicode representation on Microsoft Windows x86 systems. Almost all characters are stored as 16 bit. Some Chinese characters require 32 bit. An identifying byte-order mark is written, examined, and then discarded when the rest of the character is read.</td>\n</tr>\n<tr class=\"odd\">\n<td>1201</td>\n<td>UTF-16BE</td>\n<td>The same as UTF-16LE but byte-swapped. Used for compatibility with some non-x86 systems, which store bytes from left-to-right instead of low-order to high-order. An identifying byte-order mark is written first, examined, and then discarded when the rest of the character is read.</td>\n</tr>\n<tr class=\"even\">\n<td>65001</td>\n<td>UTF-8</td>\n<td>Stores Unicode in a byte-stream–friendly way:\n<ul>\n<li>ASCII characters are 1 byte</li>\n<li>European alphabets (including basic diacritics) are 2 bytes per character</li>\n<li>Chinese, Japanese, and Korean require 3 bytes per character</li>\n</ul>\nThis code page is a good choice when a file contains a very high percentage of ASCII, relatively few other characters, and it is important to save space. For example, .xpo files are stored in UTF-8. UTF-8 files begin with a 3-byte byte-order mark sequence, which is the first item written. It is examined, and then discarded when the rest of the character is read.</td>\n</tr>\n<tr class=\"odd\">\n<td>54936</td>\n<td>GB-18030</td>\n<td>Stores data in the GB-18030 character representation that is required by the Chinese government. No byte-order mark is written. These files cannot be distinguished from those written in code page 20936 (GB-2312, which is the ACP for Simplified Chinese systems) unless the file contains characters outside the repertoire of GB-2312.</td>\n</tr>\n</tbody>\n</table>\n\n#### Examples\n\nThe following example creates a TextIO object to access a file that is named filename in read mode by using code page 850 encoding.\n\n    protected void openFile(str _fileOpen = #io_read) \n    { \n        importFile = new TextIo(filename, _fileOpen, 850); \n        if (! importFile) \n        { \n            throw error(strfmt(\"@SYS18678\", filename)); \n        } \n    }\n\n### Method finalize\n\nCloses the file and, if data was written, flushes the file buffers to disk.\n\n    public void finalize()\n\n#### Remarks\n\nThe TextIO object is usually finalized by leaving the scope. The finalize method is not usually directly called. Output written to the file is not valid until the TextIO object is finalized.\n\n## Class TileReference\n    class TileReference extends TreeNode\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                              | Description |\n|-----------------------------------------------------|-------------|\n| public str tile()                                   |             |\n| public int copyCallerQuery()                        |             |\n| public int formViewOption()                         |             |\n| public int openMode()                               |             |\n| public str parameters()                             |             |\n| public boolean isFound()                            |             |\n| public ConfigurationKeyId configurationKeyId()      |             |\n| public ConfigurationKeyId countryConfigurationKey() |             |\n| public str countryRegionCodes()                     |             |\n| public str helpText()                               |             |\n| public int imageLocation()                          |             |\n| public str kpiName()                                |             |\n| public MenuItemType menuItemType()                  |             |\n| public str menuItemName()                           |             |\n| public str normalImage()                            |             |\n| public int size()                                   |             |\n| public int tileType()                               |             |\n| public int tileDisplay()                            |             |\n| public int buttonDisplay()                          |             |\n| public str url()                                    |             |\n| public str label()                                  |             |\n| public int refreshFrequency()                       |             |\n| public int applyFilter()                            |             |\n| public int allowUserCacheRefresh()                  |             |\n| public str query()                                  |             |\n| public boolean visible(\\[boolean value\\])           |             |\n\n### Method tile\n\n    public str tile()\n\n#### Return Value\n\n### Method copyCallerQuery\n\n    public int copyCallerQuery()\n\n#### Return Value\n\n### Method formViewOption\n\n    public int formViewOption()\n\n#### Return Value\n\n### Method openMode\n\n    public int openMode()\n\n#### Return Value\n\n### Method parameters\n\n    public str parameters()\n\n#### Return Value\n\n### Method isFound\n\n    public boolean isFound()\n\n#### Return Value\n\n### Method configurationKeyId\n\n    public ConfigurationKeyId configurationKeyId()\n\n#### Return Value\n\n### Method countryConfigurationKey\n\n    public ConfigurationKeyId countryConfigurationKey()\n\n#### Return Value\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes()\n\n#### Return Value\n\n### Method helpText\n\n    public str helpText()\n\n#### Return Value\n\n### Method imageLocation\n\n    public int imageLocation()\n\n#### Return Value\n\n### Method kpiName\n\n    public str kpiName()\n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType()\n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName()\n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage()\n\n#### Return Value\n\n### Method size\n\n    public int size()\n\n#### Return Value\n\n### Method tileType\n\n    public int tileType()\n\n#### Return Value\n\n### Method tileDisplay\n\n    public int tileDisplay()\n\n#### Return Value\n\n### Method buttonDisplay\n\n    public int buttonDisplay()\n\n#### Return Value\n\n### Method url\n\n    public str url()\n\n#### Return Value\n\n### Method label\n\n    public str label()\n\n#### Return Value\n\n### Method refreshFrequency\n\n    public int refreshFrequency()\n\n#### Return Value\n\n### Method applyFilter\n\n    public int applyFilter()\n\n#### Return Value\n\n### Method allowUserCacheRefresh\n\n    public int allowUserCacheRefresh()\n\n#### Return Value\n\n### Method query\n\n    public str query()\n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n## Class TreeNode\n    class TreeNode extends Object\n\nThe TreeNode class retrieves and represents any node in the Application Object Tree (AOT).\n\n### Remarks\n\nThis class, and the classes that extend it, enable you to create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before calling this API or APIs that are derived from this class. The TreeNode class can be used to get a handle to any node in the AOT. The TreeNode class is a generic class in that it can be a reference to any type of node in the AOT. In addition to providing access to some of the functions on the shortcut menu of the AOT, this class also contains methods that are used to maneuver in the tree. The TreeNodeTraverser class is also useful in navigating in the AOT. The TreeNode::findNode and TreeNode::rootNode methods return a treeNode object from which you can maneuver to any other node.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                              | Description                                                                                                                                                          |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public TreeNode SysObsoleteAttribute(UtilElementName name)                                                                                          |                                                                                                                                                                      |\n| public TreeNode SysObsoleteAttribute(str name, Types type)                                                                                          |                                                                                                                                                                      |\n| public TreeNode SysObsoleteAttribute()                                                                                                              |                                                                                                                                                                      |\n| public TreeNode SysObsoleteAttribute(int nodetype)                                                                                                  |                                                                                                                                                                      |\n| public boolean AOTAllowEdit()                                                                                                                       |                                                                                                                                                                      |\n| public int AOTbitmapId()                                                                                                                            | Returns the resource ID of the bitmap of the tree node.                                                                                                              |\n| public int AOTchildNodeCount()                                                                                                                      | Counts the number of child nodes that a given tree node has.                                                                                                         |\n| public boolean SysObsoleteAttribute(\\[int flag\\], \\[boolean forceNoXRef\\], \\[boolean fastMode\\])                                                    |                                                                                                                                                                      |\n| public boolean AOTDrop(TreeNode sourcenode, \\[TreeNode after\\])                                                                                     | Creates a copy of a specified tree node as a child to the TreeNode object.                                                                                           |\n| public TreeNode AOTDuplicate()                                                                                                                      |                                                                                                                                                                      |\n| public TreeNode AOTfindChild(str name, \\[int nodeType\\])                                                                                            | Finds the specified child node of this node.                                                                                                                         |\n| public TreeNode AOTfirstChild()                                                                                                                     | Retrieves the first child of the tree node.                                                                                                                          |\n| public TreeNode AOTfirstChildEx(\\[boolean loadFullNode\\])                                                                                           |                                                                                                                                                                      |\n| public int AOTgetExecutableLineCount()                                                                                                              | Returns the number of executable lines of code for this node.                                                                                                        |\n| public Set AOTgetExecutableLines()                                                                                                                  | Returns the executable lines of code for this node.                                                                                                                  |\n| public int AOTGetModel()                                                                                                                            |                                                                                                                                                                      |\n| public str AOTgetProperties(\\[boolean includeInvisible\\], \\[boolean includeReadOnly\\], \\[boolean includeNonExportable\\])                            | Returns a string containing the properties of the tree node.                                                                                                         |\n| public Struct AOTgetPropertiesExt(\\[str filter\\])                                                                                                   |                                                                                                                                                                      |\n| public AnyType AOTgetProperty(str name)                                                                                                             |                                                                                                                                                                      |\n| public str AOTgetSource()                                                                                                                           | Returns the source code of this node.                                                                                                                                |\n| public boolean AOTIncludeInCompare()                                                                                                                |                                                                                                                                                                      |\n| public boolean AOTIsDirty()                                                                                                                         |                                                                                                                                                                      |\n| public boolean AOTIsOld()                                                                                                                           | Indicates whether this node is from a file found in the old model store.                                                                                             |\n| public boolean AOTIsPersisted()                                                                                                                     | Indicates whether this node has been persisted in the model store.                                                                                                   |\n| public boolean AOTIsProxyNode()                                                                                                                     |                                                                                                                                                                      |\n| public TreeNodeIterator AOTiterator()                                                                                                               | Returns an object which can be used to iterate the child nodes of the tree node.                                                                                     |\n| public KernelHelpType AOTKernelHelpType()                                                                                                           |                                                                                                                                                                      |\n| public UtilEntryLevel AOTLayer()                                                                                                                    | Returns the layer of the tree node.                                                                                                                                  |\n| public Set AOTLayers(\\[boolean old\\])                                                                                                               | Returns a collection of the layers the tree node is defined in.                                                                                                      |\n| public str AOTname()                                                                                                                                | Returns the value of the name property of the node.                                                                                                                  |\n| public int AOTnewWindow()                                                                                                                           | Opens a new AOT tree window with the tree node as the root.                                                                                                          |\n| public TreeNode AOTnextSibling()                                                                                                                    | Returns the next node on the same level as the tree node.                                                                                                            |\n| public boolean AOTObjectNode()                                                                                                                      | Indicates whether the node is an application object.                                                                                                                 |\n| public int AOToverlayBitmapId()                                                                                                                     | Returns the resource ID of the overlay in the AOT associated with this node.                                                                                         |\n| public TreeNode AOTparent()                                                                                                                         | Returns the parent node of the tree node.                                                                                                                            |\n| public TreeNode AOTprevious()                                                                                                                       | Returns the previous sibling of this tree node.                                                                                                                      |\n| public boolean SysObsoleteAttribute(str name)                                                                                                       |                                                                                                                                                                      |\n| public str AOTtoolTip()                                                                                                                             | Returns the tool tip associated with the tree node.                                                                                                                  |\n| public str AOTToString()                                                                                                                            |                                                                                                                                                                      |\n| public str AOTtypeStr()                                                                                                                             | Returns the internal string code for the element type used in XPO files.                                                                                             |\n| public UtilFileType AOTUtilFileType()                                                                                                               | Retrieves the value of the UtilFileType enumeration type for the TreeNode object. The UtilFileType indicates which kind of file the application object is stored in. |\n| public int applObjectId()                                                                                                                           | Returns the application object ID, if applicable.                                                                                                                    |\n| public int applObjectLayerMask()                                                                                                                    | Returns a bitmask that specifies which layers contain this element.                                                                                                  |\n| public int applObjectOldLayerMask()                                                                                                                 | Returns a bitmask that specifies which layers contain this element in the baseline model store.                                                                      |\n| public TreeNode getNodeInLayer(UtilEntryLevel layer, \\[boolean old\\])                                                                               | Retrieves a version of the tree node from a specified layer.                                                                                                         |\n| public Int64 hashKey()                                                                                                                              |                                                                                                                                                                      |\n| public TreeNode makeCopy()                                                                                                                          |                                                                                                                                                                      |\n| public str newObjectName(\\[str oldName\\])                                                                                                           | Returns a string that contains the name of the new element.                                                                                                          |\n| public str toString()                                                                                                                               | Returns a string that represents the current object.                                                                                                                 |\n| public str treeNodeName()                                                                                                                           | Returns the name of the tree node.                                                                                                                                   |\n| public str treeNodePath()                                                                                                                           | Returns the unique path to the tree node within the Application Object Tree (AOT).                                                                                   |\n| public TreeNodeType treeNodeType()                                                                                                                  | Retrieves an instance of a TreeNodeType class that provides reflection information for the tree node.                                                                |\n| public int updateNodePermissions(boolean throwExceptions)                                                                                           |                                                                                                                                                                      |\n| public UtilElements utilElement()                                                                                                                   | Returns a UtilElements record that is related to the node.                                                                                                           |\n| public UtilIdElements utilIdElement()                                                                                                               | Returns a UtilIdElements record that is related to the node.                                                                                                         |\n| public boolean validateNameCharacters(str name)                                                                                                     |                                                                                                                                                                      |\n| ::public static TreeNode findNode(str path)                                                                                                         | Returns a specified node in the Application Object Tree (AOT).                                                                                                       |\n| ::public static str generateObjectName(str template)                                                                                                |                                                                                                                                                                      |\n| ::public static int getMaximumNodeNameLength(int modelElementTypeId)                                                                                |                                                                                                                                                                      |\n| ::public static boolean isNodeReferenceValid(TreeNode treeNode)                                                                                     |                                                                                                                                                                      |\n| ::public static boolean isValidObjectName(str name)                                                                                                 | Determines whether the string passed as an argument can be used as a name for a node in the Application Object Tree (AOT).                                           |\n| ::public static TreeNode rootNode()                                                                                                                 | Returns the root node of the AOT.                                                                                                                                    |\n| public void SysObsoleteAttribute()                                                                                                                  |                                                                                                                                                                      |\n| public void treeNodeRelease()                                                                                                                       | Releases the tree node explicitly.                                                                                                                                   |\n| public void SysObsoleteAttribute(str name, xRefKind xrefKind, int lineNumber, int columNumber, \\[XRefReference xrefRef\\], \\[ClassId parentTypeId\\]) |                                                                                                                                                                      |\n| public void AOTrun()                                                                                                                                | Compiles this node and its subtree in the Application Object Tree (AOT).                                                                                             |\n| public void SysObsoleteAttribute()                                                                                                                  |                                                                                                                                                                      |\n| public void AOTrefresh()                                                                                                                            | Refreshes the node with the latest changes to the .aod file.                                                                                                         |\n| public void SysObsoleteAttribute(Struct struct1)                                                                                                    |                                                                                                                                                                      |\n| public void SysObsoleteAttribute(str properties)                                                                                                    |                                                                                                                                                                      |\n| public void AOTconfigure()                                                                                                                          |                                                                                                                                                                      |\n| public void AOTload()                                                                                                                               | Ensures that the object is loaded.                                                                                                                                   |\n| public void treeNodeExport(str filename, \\[int flag\\])                                                                                              | Exports this node and its subtree from the Application Object Tree (AOT).                                                                                            |\n| public void SysObsoleteAttribute(str source, \\[boolean isStatic\\])                                                                                  |                                                                                                                                                                      |\n| public void AOTendXref()                                                                                                                            |                                                                                                                                                                      |\n| public void AOTmessageLine(str text, int linenumber)                                                                                                | Writes text to the Application Object Tree (AOT) Message window.                                                                                                     |\n| public void SysObsoleteAttribute(str name, AnyType value)                                                                                           |                                                                                                                                                                      |\n| public void AOTrestore(\\[boolean forceReload\\])                                                                                                     | Reloads this node from the disk, if applicable.                                                                                                                      |\n| public void AOTregenerate()                                                                                                                         |                                                                                                                                                                      |\n| public void AOTmakeXref(\\[int flag\\], \\[boolean xRefAll\\])                                                                                          | Compiles this node and its subtree in the AOT, updating the cross-reference system.                                                                                  |\n| public void AOTedit(\\[int Line\\], \\[int Column\\])                                                                                                   | Opens the appropriate editor for this node.                                                                                                                          |\n| public void AOTshowProperties()                                                                                                                     | Opens the property sheet (if not already open) and shows the properties for this node.                                                                               |\n| public void AOTinsert(TreeNode parent, \\[TreeNode after\\], \\[boolean doNotDuplicate\\])                                                              | Inserts a node among the subnodes of this node.                                                                                                                      |\n| public void new()                                                                                                                                   | Initializes a new instance of the TreeNode class.                                                                                                                    |\n| public void AOTMove(TreeNode parent, \\[TreeNode after\\])                                                                                            |                                                                                                                                                                      |\n| public void SysObsoleteAttribute(int modelId)                                                                                                       |                                                                                                                                                                      |\n\n### Method SysObsoleteAttribute\n\n    public TreeNode SysObsoleteAttribute(UtilElementName name)\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public TreeNode SysObsoleteAttribute(str name, Types type)\n\n#### Parameters\n\nname  \n\n<!-- -->\n\ntype  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public TreeNode SysObsoleteAttribute()\n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public TreeNode SysObsoleteAttribute(int nodetype)\n\n#### Parameters\n\nnodetype  \n\n#### Return Value\n\n### Method AOTAllowEdit\n\n    public boolean AOTAllowEdit()\n\n#### Return Value\n\n### Method AOTbitmapId\n\nReturns the resource ID of the bitmap of the tree node.\n\n    public int AOTbitmapId()\n\n#### Return Value\n\nThe resource ID of the bitmap of the tree node.\n\n#### Examples\n\nThe following example prints the resource ID of the Extended Data Types node in the Application Object Tree (AOT).\n\n    #AOT \n    static void myJobAOTbitmapId(Args _args) \n    { \n        treeNode treeNode = TreeNode::findNode(#ExtendedDataTypesPath); \n        print treeNode.AOTbitmapId(); \n        pause; \n    }\n\nThis job will print the integer 895. If you run the Tutorial resources form, you can see the bitmap and verify that it is the same as the one that is used for Extended Data Types in the AOT.\n\n### Method AOTchildNodeCount\n\nCounts the number of child nodes that a given tree node has.\n\n    public int AOTchildNodeCount()\n\n#### Return Value\n\nAn integer that indicates the number of child nodes for the tree node.\n\n#### Examples\n\nThe following example prints the number of child nodes that appear under the Menu Items node in the Application Object Tree (AOT).\n\n    #AOT \n    static void myJobAOTchildNodeCount(Args _args) \n    { \n        treeNode treeNode = TreeNode::findNode(#MenuItemsPath); \n        print \"Number of nodes below Menu Items: \", treeNode.AOTchildNodeCount(); \n        pause; \n    }\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute([int flag], [boolean forceNoXRef], [boolean fastMode])\n\n#### Parameters\n\nflag  \n\n<!-- -->\n\nforceNoXRef  \n\n<!-- -->\n\nfastMode  \n\n#### Return Value\n\n### Method AOTDrop\n\nCreates a copy of a specified tree node as a child to the TreeNode object.\n\n    public boolean AOTDrop(TreeNode sourcenode, [TreeNode after])\n\n#### Parameters\n\nsourcenode  \nThe child node of the tree node that the source should be inserted after; optional.\n\n<!-- -->\n\nafter  \nThe child node of the tree node that the source should be inserted after; optional.\n\n#### Return Value\n\ntrue if the drop operation was successful; otherwise, false.\n\n#### Examples\n\nThe following example creates the tabPage:CopyOfContainers tree node as the last node underTab:Tab in the tutorial\\_Form\\_Controls form.\n\n    #AOT \n    static void myJobAOTDrop(Args _args) \n    { \n        treeNode treeNodeTab; \n        treeNode treeNodeTabPageContainers; \n        treeNodeTab = TreeNode::findNode(#FormsPath + '\\\\' +  \n            formStr(tutorial_form_controls)+ '\\\\Designs\\\\Design\\\\[Tab:Tab]'); \n        treeNodeTabPageContainers = TreeNode::findNode(#FormsPath + '\\\\' +  \n            formStr(tutorial_form_controls)+  \n            '\\\\Designs\\\\Design\\\\[Tab:Tab]\\\\[TabPage:Containers]'); \n        if (treeNodeTab && treeNodeTabPageContainers) \n        { \n            // Drop the TabPage:Containers node on the Tab:Tab node. \n            print treeNodeTab.AOTDrop(treeNodeTabPageContainers); \n        } \n        else \n        { \n            print \"Could not find treeNodeTab or treeNodeTabPageContainers\"; \n        } \n        pause; \n    }\n\n### Method AOTDuplicate\n\n    public TreeNode AOTDuplicate()\n\n#### Return Value\n\n### Method AOTfindChild\n\nFinds the specified child node of this node.\n\n    public TreeNode AOTfindChild(str name, [int nodeType])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\nnodeType  \n\n#### Return Value\n\nThe specified TreeNode.\n\n### Method AOTfirstChild\n\nRetrieves the first child of the tree node.\n\n    public TreeNode AOTfirstChild()\n\n#### Return Value\n\nThe first child node of the tree node.\n\n### Method AOTfirstChildEx\n\n    public TreeNode AOTfirstChildEx([boolean loadFullNode])\n\n#### Parameters\n\nloadFullNode  \n\n#### Return Value\n\n### Method AOTgetExecutableLineCount\n\nReturns the number of executable lines of code for this node.\n\n    public int AOTgetExecutableLineCount()\n\n#### Return Value\n\nThe number of executable lines of code for this node if any; otherwise, zero.\n\n#### Remarks\n\nThis function calls a method which is overridden by nodes which have source code.\n\n### Method AOTgetExecutableLines\n\nReturns the executable lines of code for this node.\n\n    public Set AOTgetExecutableLines()\n\n#### Return Value\n\nA Set object containing the executable lines of code for this node if any; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n#### Remarks\n\nThis function calls a method which is overridden by nodes which have source code.\n\n### Method AOTGetModel\n\n    public int AOTGetModel()\n\n#### Return Value\n\n### Method AOTgetProperties\n\nReturns a string containing the properties of the tree node.\n\n    public str AOTgetProperties([boolean includeInvisible], [boolean includeReadOnly], [boolean includeNonExportable])\n\n#### Parameters\n\nincludeInvisible  \n\n<!-- -->\n\nincludeReadOnly  \n\n<!-- -->\n\nincludeNonExportable  \n\n#### Return Value\n\nA string containing the properties of the tree node.\n\n#### Examples\n\nThe following example provides a list of temporary tables in Microsoft Dynamics AX.\n\n    { \n        #aot \n        #properties \n        TreeNode        tn = TreeNode::findNode(#TablesPath); \n        str             tableName; \n        str             temporaryProperty; \n        tn = tn.AOTfirstChild(); \n        while (tn) \n        { \n            tableName = findProperty(tn.AOTgetProperties(), #PropertyName); \n            temporaryProperty = findProperty( \n                tn.AOTgetProperties(), \n                #PropertyTemporary); \n            info (strfmt( \n                'Table %1 has the temporary property specified as %2', \n                tableName, temporaryProperty)); \n            tn = tn.AOTnextSibling(); \n        } \n    }\n\n### Method AOTgetPropertiesExt\n\n    public Struct AOTgetPropertiesExt([str filter])\n\n#### Parameters\n\nfilter  \n\n#### Return Value\n\n### Method AOTgetProperty\n\n    public AnyType AOTgetProperty(str name)\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method AOTgetSource\n\nReturns the source code of this node.\n\n    public str AOTgetSource()\n\n#### Return Value\n\nThe string that contains source code if any; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n#### Remarks\n\nThis function is overridden by nodes which have source code.\n\n### Method AOTIncludeInCompare\n\n    public boolean AOTIncludeInCompare()\n\n#### Return Value\n\n### Method AOTIsDirty\n\n    public boolean AOTIsDirty()\n\n#### Return Value\n\n### Method AOTIsOld\n\nIndicates whether this node is from a file found in the old model store.\n\n    public boolean AOTIsOld()\n\n#### Return Value\n\ntrue if this node is from the old model store; otherwise false.\n\n### Method AOTIsPersisted\n\nIndicates whether this node has been persisted in the model store.\n\n    public boolean AOTIsPersisted()\n\n#### Return Value\n\ntrue if this node has been persisted; otherwise false.\n\n#### Remarks\n\nThis method throws an exception if the method is not supported for the tree node. Use the TreeNode.TreeNodeType().isModelElement() method to determine if the method is supported.\n\n### Method AOTIsProxyNode\n\n    public boolean AOTIsProxyNode()\n\n#### Return Value\n\n### Method AOTiterator\n\nReturns an object which can be used to iterate the child nodes of the tree node.\n\n    public TreeNodeIterator AOTiterator()\n\n#### Return Value\n\nThe TreeNodeIterator object used to iterate the children of the tree node.\n\n### Method AOTKernelHelpType\n\n    public KernelHelpType AOTKernelHelpType()\n\n#### Return Value\n\n### Method AOTLayer\n\nReturns the layer of the tree node.\n\n    public UtilEntryLevel AOTLayer()\n\n#### Return Value\n\nThe layer that this node resides in.\n\n#### Remarks\n\nThis method throws an exception if the method is not supported for the tree node. Use the TreeNode.TreeNodeType().isLayerAware() method to determine if the method is supported.\n\n### Method AOTLayers\n\nReturns a collection of the layers the tree node is defined in.\n\n    public Set AOTLayers([boolean old])\n\n#### Parameters\n\nold  \nA Boolean value that indicates whether to return the layers of the tree node definitions from the old model store; optional.\n\n#### Return Value\n\nA Set object with the layers.\n\n#### Remarks\n\nThis method throws an exception if the method is not supported for the tree node. Use the TreeNode.TreeNodeType().isLayerAware() method to determine if the method is supported.\n\n### Method AOTname\n\nReturns the value of the name property of the node.\n\n    public str AOTname()\n\n#### Return Value\n\nThe string that contains the value of the name property\n\n#### Remarks\n\nIn most cases, this yields the same result as the method TreeNodeName.\n\n#### Examples\n\nThe following example prints out the name of the first child of the tree node.\n\n    static void Job(Args _args) \n    { \n        treeNode t = infolog.findNode('\\\\Reports\\\\AssetAcquisition\\\\Designs\\\\ReportDesign1\\\\AutoDesignSpecs'); \n        t = t.AOTfirstChild(); \n        print \"treeNodeName: \" + t.treeNodeName(); \n        print \"AOTName:\" + t.AOTName(); \n        pause; \n    }\n\n### Method AOTnewWindow\n\nOpens a new AOT tree window with the tree node as the root.\n\n    public int AOTnewWindow()\n\n#### Return Value\n\n### Method AOTnextSibling\n\nReturns the next node on the same level as the tree node.\n\n    public TreeNode AOTnextSibling()\n\n#### Return Value\n\nThe next node on the same level as the current tree node.\n\n### Method AOTObjectNode\n\nIndicates whether the node is an application object.\n\n    public boolean AOTObjectNode()\n\n#### Return Value\n\ntrue if the node is an application object; otherwise false.\n\n#### Remarks\n\nA form or report is an application object. A control on a form, or any other subpart, is not.\n\n### Method AOToverlayBitmapId\n\nReturns the resource ID of the overlay in the AOT associated with this node.\n\n    public int AOToverlayBitmapId()\n\n#### Return Value\n\nThe resource ID of the overlay in the AOT associated with this node.\n\n### Method AOTparent\n\nReturns the parent node of the tree node.\n\n    public TreeNode AOTparent()\n\n#### Return Value\n\nThe parent node of the tree node.\n\n### Method AOTprevious\n\nReturns the previous sibling of this tree node.\n\n    public TreeNode AOTprevious()\n\n#### Return Value\n\nThe previous tree node relative to this one on the same level.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(str name)\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method AOTtoolTip\n\nReturns the tool tip associated with the tree node.\n\n    public str AOTtoolTip()\n\n#### Return Value\n\nThe string that contains the tool tip.\n\n### Method AOTToString\n\n    public str AOTToString()\n\n#### Return Value\n\n### Method AOTtypeStr\n\nReturns the internal string code for the element type used in XPO files.\n\n    public str AOTtypeStr()\n\n#### Return Value\n\nThe string that contains the tree node type.\n\n### Method AOTUtilFileType\n\nRetrieves the value of the UtilFileType enumeration type for the TreeNode object. The UtilFileType indicates which kind of file the application object is stored in.\n\n    public UtilFileType AOTUtilFileType()\n\n#### Return Value\n\nThe value of the UtilFileType enumeration for the tree node. The possible values are in the following list. UtilFileType::Application means that the element is stored in the .aod file (form, report, query, table, and so on). UtilFileType::ApplicationCodeDocumentationmeans that the element is stored in the .add file. UtilFileType::ApplicationHelp means that the element is stored in the .ahd file. UtilFileType::KernelHelp means that the element is stored in the .akh file.\n\n#### Examples\n\nThe following example finds a TreeNode object of each UtilFileType, and then prints the path of the UtilFileType to the Infolog.\n\n    static void myJob(Args _args) \n    { \n        treeNode tn; \n        tn = treeNode::findNode(\"\\\\Forms\"); \n        tn = tn.AOTfirstChild(); \n        info(strfmt( \n             \"Path: %1 \\nUtilFileType: %2\", \n             tn.treeNodePath(), \n             tn.AOTUtilFileType())); \n        tn = treeNode::findNode(\"\\\\System Documentation\"); \n        tn = tn.AOTfirstChild(); \n        tn = tn.AOTfirstChild(); \n        info(strfmt( \n             \"Path: %1 \\nUtilFileType: %2\", \n             tn.treeNodePath(), \n             tn.AOTUtilFileType())); \n        tn = treeNode::findNode(\"\\\\Application Developer Documentation\"); \n        tn = tn.AOTfirstChild(); \n        tn = tn.AOTfirstChild(); \n        info(strfmt( \n            \"Path: %1 \\nUtilFileType: %2\", \n            tn.treeNodePath(), \n            tn.AOTUtilFileType())); \n        tn = treeNode::findNode(\"\\\\Application Documentation\"); \n        tn = tn.AOTfirstChild(); \n        tn = tn.AOTfirstChild(); \n        info(strfmt( \n            \"Path: %1 \\nUtilFileType: %2\", \n            tn.treeNodePath(), \n            tn.AOTUtilFileType())); \n    }\n\n### Method applObjectId\n\nReturns the application object ID, if applicable.\n\n    public int applObjectId()\n\n#### Return Value\n\nThe ID of the application object.\n\n### Method applObjectLayerMask\n\nReturns a bitmask that specifies which layers contain this element.\n\n    public int applObjectLayerMask()\n\n#### Return Value\n\nA bitmask that specifies which layers contain this element.\n\n### Method applObjectOldLayerMask\n\nReturns a bitmask that specifies which layers contain this element in the baseline model store.\n\n    public int applObjectOldLayerMask()\n\n#### Return Value\n\nA bitmask that specifies which layers contain this element.\n\n### Method getNodeInLayer\n\nRetrieves a version of the tree node from a specified layer.\n\n    public TreeNode getNodeInLayer(UtilEntryLevel layer, [boolean old])\n\n#### Parameters\n\nlayer  \nThe value specifying whether or not the node should be retrieved from the layer file in the old model store; optional.\n\n<!-- -->\n\nold  \nThe value specifying whether or not the node should be retrieved from the layer file in the old model store; optional.\n\n#### Return Value\n\nThe new TreeNode.\n\n#### Remarks\n\nThis method throws an exception if the method is not supported for the tree node. Use the TreeNode.TreeNodeType().isGetNodeInLayerSupported method to determine if the method is supported.\n\n### Method hashKey\n\n    public Int64 hashKey()\n\n#### Return Value\n\n### Method makeCopy\n\n    public TreeNode makeCopy()\n\n#### Return Value\n\n### Method newObjectName\n\nReturns a string that contains the name of the new element.\n\n    public str newObjectName([str oldName])\n\n#### Parameters\n\noldName  \nThe new name of the node; optional. If no argument is passed, the new node name is determined by the child node type.\n\n#### Return Value\n\nThe string that contains the name of the new element.\n\n#### Remarks\n\nIf no argument is passed, the new node name is determined by the child node type. For example, if the TreeNode has forms as children, calling this method without an argument will return \"Form1\". If the tree node has several child node types, the method returns the string \"object\".\n\n#### Examples\n\nThe following call to Treenode.newObjectName returns \"object\" because the data dictionary node has children that represent several object types.\n\n    { \n        TreeNode t; \n        str s; \n        t = TreeNode::findNode(\"\\Data dictionary\"); \n        s = t.newObjectName(); \n        print s; \n        pause; \n    }\n\n### Method toString\n\nReturns a string that represents the current object.\n\n    public str toString()\n\n#### Return Value\n\nA string that represents the current object.\n\n#### Remarks\n\nThe default implementation returns the class name of the object. The method can be overridden in a derived class to return values that are meaningful for that type.For example, an instance of the class returns the method name and type of the method, such as instance or static.\n\n### Method treeNodeName\n\nReturns the name of the tree node.\n\n    public str treeNodeName()\n\n#### Return Value\n\nThe string that contains the name of the tree node.\n\n### Method treeNodePath\n\nReturns the unique path to the tree node within the Application Object Tree (AOT).\n\n    public str treeNodePath()\n\n#### Return Value\n\nReturns the unique path of the tree node in the AOT.\n\n#### Examples\n\nThe following example finds a TreeNode object of each UtilFileType and prints the path of the UtilFileType to the Infolog.\n\n    static void myJob(Args _args) \n    { \n        treeNode tn; \n        tn = treeNode::findNode(\"\\\\Forms\"); \n        tn = tn.AOTfirstChild(); \n        info(strfmt( \n             \"Path: %1 \\nUtilFileType: %2\", \n             tn.treeNodePath(), \n             tn.AOTUtilFileType())); \n        tn = treeNode::findNode(\"\\\\System Documentation\"); \n        tn = tn.AOTfirstChild(); \n        tn = tn.AOTfirstChild(); \n        info(strfmt( \n             \"Path: %1 \\nUtilFileType: %2\", \n             tn.treeNodePath(), \n             tn.AOTUtilFileType())); \n        tn = treeNode::findNode(\"\\\\Application Developer Documentation\"); \n        tn = tn.AOTfirstChild(); \n        tn = tn.AOTfirstChild(); \n        info(strfmt( \n            \"Path: %1 \\nUtilFileType: %2\", \n            tn.treeNodePath(), \n            tn.AOTUtilFileType())); \n        tn = treeNode::findNode(\"\\\\Application Documentation\"); \n        tn = tn.AOTfirstChild(); \n        tn = tn.AOTfirstChild(); \n        info(strfmt( \n            \"Path: %1 \\nUtilFileType: %2\", \n            tn.treeNodePath(), \n            tn.AOTUtilFileType())); \n    }\n\n### Method treeNodeType\n\nRetrieves an instance of a TreeNodeType class that provides reflection information for the tree node.\n\n    public TreeNodeType treeNodeType()\n\n#### Return Value\n\nAn instance of a TreeNodeType class.\n\n### Method updateNodePermissions\n\n    public int updateNodePermissions(boolean throwExceptions)\n\n#### Parameters\n\nthrowExceptions  \n\n#### Return Value\n\n### Method utilElement\n\nReturns a UtilElements record that is related to the node.\n\n    public UtilElements utilElement()\n\n#### Return Value\n\nThe UtilElements record that is related to the node.\n\n#### Remarks\n\nThis method throws an exception if the method is not supported for the tree node.\n\n### Method utilIdElement\n\nReturns a UtilIdElements record that is related to the node.\n\n    public UtilIdElements utilIdElement()\n\n#### Return Value\n\nThe UtilIdElements record that is related to the node.\n\n#### Remarks\n\nThis method throws an exception if the method is not supported for the tree node.\n\n### Method validateNameCharacters\n\n    public boolean validateNameCharacters(str name)\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method findNode\n\nReturns a specified node in the Application Object Tree (AOT).\n\n    public static TreeNode findNode(str path)\n\n#### Parameters\n\npath  \nA string that indicates the path that is used in the search.\n\n#### Return Value\n\nThe requested TreeNode object or nullNothingnullptrunita null reference (Nothing in Visual Basic) if no node with the specified path exists.\n\n#### Remarks\n\nAnother way of getting a TreeNode object is by using the Info.getNode method. An important difference between the two methods is that the Info.getNode method will give you a node that is detached from the AOT, whereas the findNode method will return the node in the AOT. This means that the node that is returned by the Info.getNode method will not have a parent node, whereas the one returned by the findNode method will have a parent node.\n\n#### Examples\n\nThe following example retrieves the name of the tree node that is found the TreeNode::findNode method is called. This example checks whether the user has the required security key before it calls the TreeNode.findNode method.\n\n    server static public void Main(Args _args) \n    { \n        TreeNode tn; \n        str name; \n        tn = TreeNode::findNode(@\"\\Classes\"); \n        if (tn) \n        { \n            name = tn.treeNodeName(); \n        } \n    }\n\n### Method generateObjectName\n\n    public static str generateObjectName(str template)\n\n#### Parameters\n\ntemplate  \n\n#### Return Value\n\n### Method getMaximumNodeNameLength\n\n    public static int getMaximumNodeNameLength(int modelElementTypeId)\n\n#### Parameters\n\nmodelElementTypeId  \n\n#### Return Value\n\n### Method isNodeReferenceValid\n\n    public static boolean isNodeReferenceValid(TreeNode treeNode)\n\n#### Parameters\n\ntreeNode  \n\n#### Return Value\n\n### Method isValidObjectName\n\nDetermines whether the string passed as an argument can be used as a name for a node in the Application Object Tree (AOT).\n\n    public static boolean isValidObjectName(str name)\n\n#### Parameters\n\nname  \nThe string that contains the tree node name to validate.\n\n#### Return Value\n\ntrue if each condition is met; otherwise false.\n\n#### Remarks\n\nA candidate name must meet the following conditions:\n\n-   The first character must be a letter.\n-   It can only contain letters, numbers or an underscore.\n-   It must not evaluate to a token.\n\nThis method does not check if an element of the same name already exists. It only validates that the argument is a valid name for an AOT object. Duplicate names may not exist within classes, tables, extended data types, or enums.\n\n#### Examples\n\nThe following example gives examples of valid and invalid arguments.\n\n    boolean validName; \n    validName = TreeNode::isValidObjectName('ValidName'); //true \n    validName = TreeNode::isValidObjectName('Name with spaces'); //false \n    validName = TreeNode::isValidObjectName('4StartsWithDigit'); //false \n    validName = TreeNode::isValidObjectName('Illegal;Character'); //false \n    validName = TreeNode::isValidObjectName('if'); // false (token name)\n\n### Method rootNode\n\nReturns the root node of the AOT.\n\n    public static TreeNode rootNode()\n\n#### Return Value\n\nThe root node of the AOT.\n\n#### Remarks\n\nThe method provides similar functionality to the rootNode method.\n\n### Method SysObsoleteAttribute\n\n    public void SysObsoleteAttribute()\n\n### Method treeNodeRelease\n\nReleases the tree node explicitly.\n\n    public void treeNodeRelease()\n\n#### Remarks\n\nUsually you do not have to explicitly unload objects, because the garbage collector will do it automatically. However, because tree nodes are ordinarily linked to the AOT, they are not garbage-collected. If you run this method on many tree nodes in the same execution, it can be demanding on resources. You should unload the tree nodes as you go along to give the garbage collector a chance to remove them. Make sure to remove all references to the tree node and its subnodes before you call this method. Use the TreeNode.TreeNodeType().isConsumingMemory method to determine if you need to call this method.\n\n### Method SysObsoleteAttribute\n\n    public void SysObsoleteAttribute(str name, xRefKind xrefKind, int lineNumber, int columNumber, [XRefReference xrefRef], [ClassId parentTypeId])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\nxrefKind  \n\n<!-- -->\n\nlineNumber  \n\n<!-- -->\n\ncolumNumber  \n\n<!-- -->\n\nxrefRef  \n\n<!-- -->\n\nparentTypeId  \n\n### Method AOTrun\n\nCompiles this node and its subtree in the Application Object Tree (AOT).\n\n    public void AOTrun()\n\n### Method SysObsoleteAttribute\n\n    public void SysObsoleteAttribute()\n\n### Method AOTrefresh\n\nRefreshes the node with the latest changes to the .aod file.\n\n    public void AOTrefresh()\n\n### Method SysObsoleteAttribute\n\n    public void SysObsoleteAttribute(Struct struct1)\n\n#### Parameters\n\nstruct1  \n\n### Method SysObsoleteAttribute\n\n    public void SysObsoleteAttribute(str properties)\n\n#### Parameters\n\nproperties  \n\n### Method AOTconfigure\n\n    public void AOTconfigure()\n\n### Method AOTload\n\nEnsures that the object is loaded.\n\n    public void AOTload()\n\n### Method treeNodeExport\n\nExports this node and its subtree from the Application Object Tree (AOT).\n\n    public void treeNodeExport(str filename, [int flag])\n\n#### Parameters\n\nfilename  \n\n<!-- -->\n\nflag  \n\n#### Remarks\n\nIf an attacker can control input to this method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the . Ensure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n#### Examples\n\nThis example uses the treeNodeExport method to export the ExampleClass class to an .xpo file.\n\n    void TreeNodeExample() \n    { \n        TreeNode treeNode; \n        TreeNode childNode; \n        FileIoPermission perm; \n        #define.ExportFile(@\"c:\\TreeNodeExportExampleClass.xpo\") \n        #define.ExportMode(\"w\") \n        perm = new FileIoPermission(#ExportFile, #ExportMode); \n        if (perm == null) \n        { \n            return; \n        } \n        perm.assert(); \n        treeNode = TreeNode::findNode(@\"\\Classes\"); \n        if (treeNode != null) \n        { \n            childNode = treeNode.AOTfindChild(@\"ExampleClass\"); \n            // BP deviation documented. \n            childNode.treeNodeExport(#ExportFile); \n        } \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method SysObsoleteAttribute\n\n    public void SysObsoleteAttribute(str source, [boolean isStatic])\n\n#### Parameters\n\nsource  \n\n<!-- -->\n\nisStatic  \n\n### Method AOTendXref\n\n    public void AOTendXref()\n\n### Method AOTmessageLine\n\nWrites text to the Application Object Tree (AOT) Message window.\n\n    public void AOTmessageLine(str text, int linenumber)\n\n#### Parameters\n\ntext  \nAn integer that is ignored. It does not currently direct the written text to a specific line number in the output Message window.\n\n<!-- -->\n\nlinenumber  \nAn integer that is ignored. It does not currently direct the written text to a specific line number in the output Message window.\n\n#### Remarks\n\nThis method is intended to be used to output text so that when the user later double-clicks that line of text in the message window, some action will happen regarding this node.\n\n#### Examples\n\nThe following example executes the AOTmessageLine method on a Form object, because Form inherits this method from TreeNode.\n\n    static void JobAOTmessageLineDemo(Args _args) \n    { \n        Form f = new Form('testAOTMessageLine'); \n        // \n        f.AOTmessageLine('test message 1a',1); \n        f.AOTmessageLine('test message 2a',2); \n        f.AOTmessageLine('test message 3a',3); \n        f.AOTmessageLine('test message 1b',1); \n        f.AOTmessageLine('test message 2b',2); \n        f.AOTmessageLine('test message 3b',3); \n        f.AOTmessageLine('test message 2c',2); \n        // \n        /******* \n        Actual Output in the Message window \n        (the 7 identical lines): \n        test message 2c \n        test message 2c \n        test message 2c \n        test message 2c \n        test message 2c \n        test message 2c \n        test message 2c \n        *******/ \n    }\n\n### Method SysObsoleteAttribute\n\n    public void SysObsoleteAttribute(str name, AnyType value)\n\n#### Parameters\n\nname  \n\n<!-- -->\n\nvalue  \n\n### Method AOTrestore\n\nReloads this node from the disk, if applicable.\n\n    public void AOTrestore([boolean forceReload])\n\n#### Parameters\n\nforceReload  \n\n### Method AOTregenerate\n\n    public void AOTregenerate()\n\n### Method AOTmakeXref\n\nCompiles this node and its subtree in the AOT, updating the cross-reference system.\n\n    public void AOTmakeXref([int flag], [boolean xRefAll])\n\n#### Parameters\n\nflag  \n\n<!-- -->\n\nxRefAll  \n\n#### Remarks\n\nThis method can be called at any:\n\n-   list node (such as AOT, Tables, Forms, Project roots, and groups)\n-   Application Object (such as a Table or Form)\n-   methods branch\n-   method\n\n### Method AOTedit\n\nOpens the appropriate editor for this node.\n\n    public void AOTedit([int Line], [int Column])\n\n#### Parameters\n\nLine  \nThe column of the cursor position; optional.\n\n<!-- -->\n\nColumn  \nThe column of the cursor position; optional.\n\n#### Remarks\n\nIf the node is a method, the code editor will open. If the node is a documentation object, the Help editor will open.\n\n#### Examples\n\nThe following code example opens the X++ editor, shows the class declaration of the class Tax, and positions the pointer at line 6, column 8.\n\n    #AOT \n    static void myJobAOTEdit(Args _args) \n    { \n        treeNode treeNode; \n        treeNode = TreeNode::findNode(#ClassesPath + '\\\\' + classStr(Tax)+ '\\\\ClassDeclaration'); \n        if (treeNode) \n        { \n            treeNode.AOTedit(6,8); \n        } \n        else \n        { \n            print \"Could not find treeNode\"; \n        } \n        pause; \n    }\n\n### Method AOTshowProperties\n\nOpens the property sheet (if not already open) and shows the properties for this node.\n\n    public void AOTshowProperties()\n\n### Method AOTinsert\n\nInserts a node among the subnodes of this node.\n\n    public void AOTinsert(TreeNode parent, [TreeNode after], [boolean doNotDuplicate])\n\n#### Parameters\n\nparent  \n\n<!-- -->\n\nafter  \n\n<!-- -->\n\ndoNotDuplicate  \n\n### Method new\n\nInitializes a new instance of the TreeNode class.\n\n    public void new()\n\n### Method AOTMove\n\n    public void AOTMove(TreeNode parent, [TreeNode after])\n\n#### Parameters\n\nparent  \n\n<!-- -->\n\nafter  \n\n### Method SysObsoleteAttribute\n\n    public void SysObsoleteAttribute(int modelId)\n\n#### Parameters\n\nmodelId  \n\n## Class TreeNodeIterator\n    class TreeNodeIterator extends Object\n\nThe TreeNodeIterator class traverses the child nodes of a tree node.\n\n### Remarks\n\n### Examples\n\nThe following example prints the names of all child nodes of the root node.\n\n    static void example()  \n    { \n        treeNode myTreeNode; \n        xInfo xi = new xInfo(); \n        void printChildNames (treeNode t) \n        { \n            treeNode child; \n            treenodeIterator it; \n            it = t.AOTiterator(); \n            child = it.next(); \n            while (child) \n            { \n                print child.treeNodeName(); \n                child = it.next(); \n            } \n        } \n        myTreeNode = xi.rootNode(); \n        printChildNames(myTreeNode); \n        pause; \n    }\n\n### Methods\n\n| Method                 | Description                                                                                            |\n|------------------------|--------------------------------------------------------------------------------------------------------|\n| public TreeNode next() | Retrieves the next element in the list of child nodes.                                                 |\n| public void reset()    | Resets the iterator so that the next call to the next method returns the first child node in the list. |\n\n### Method next\n\nRetrieves the next element in the list of child nodes.\n\n    public TreeNode next()\n\n#### Return Value\n\nThe next child node in the tree.\n\n### Method reset\n\nResets the iterator so that the next call to the next method returns the first child node in the list.\n\n    public void reset()\n\n## Class TreeNodeType\n    class TreeNodeType extends Object\n\nThe TreeNodeType class retrieves information about types of TreeNode classes.\n\n### Remarks\n\nThis class enable you to reflect on a TreeNode class instance. The reflection information is not specific to an instance of a TreeNode class. All TreeNode instances with the same NodeType share the same TreeNodeType. The TreeNode.TreeNodeType method return a treeNodeType object with the reflection informantion.\n\n### Examples\n\n### Methods\n\n| Method                                     | Description                                                                                            |\n|--------------------------------------------|--------------------------------------------------------------------------------------------------------|\n| public int id()                            | Returns the type's ID.                                                                                 |\n| public boolean isConsumingMemory()         | Indicates whether instances of this node type are consuming memory that needs to be manually released. |\n| public boolean isGetNodeInLayerSupported() | Indicates whether instances of this node type support the TreeNode.GetNodeInLayer method.              |\n| public boolean isLayerAware()              | Indicates whether instances of this node type are decorated with layers in the AOT.                    |\n| public boolean isModelElement()            | Indicates whether instances of this node type are model-elements.                                      |\n| public boolean isRootElement()             | Indicates whether instances of this node type are root-elements.                                       |\n| public boolean isUtilElement()             | Indicates whether instances of this node type are util-elements.                                       |\n| public boolean isVCSControllableElement()  |                                                                                                        |\n| private void new()                         | Initializes a new instance of the TreeNodeType class.                                                  |\n\n### Method id\n\nReturns the type's ID.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the TreeNodeType.\n\n### Method isConsumingMemory\n\nIndicates whether instances of this node type are consuming memory that needs to be manually released.\n\n    public boolean isConsumingMemory()\n\n#### Return Value\n\ntrue if tree nodes of this type are consumes memory; otherwise, false.\n\n#### Remarks\n\nAfter working with TreeNode instances of this type it is important to call the TreeNode.TreeNodeRelease method to release any consumed memory. Failure to do this will result in out-of-memory exceptions. Do not call the TreeNode.TreeNodeRelease method before all instances of TreeNode classes in the composition hierarchy has been garbage collected. For example, do not call the TreeNode.TreeNodeRelease() method on MyClass, if you still have a TreeNode instance of MyClass.myMethod.\n\n### Method isGetNodeInLayerSupported\n\nIndicates whether instances of this node type support the TreeNode.GetNodeInLayer method.\n\n    public boolean isGetNodeInLayerSupported()\n\n#### Return Value\n\ntrue if tree nodes of this type support the TreeNode.GetNodeInLayer method; otherwise, false.\n\n### Method isLayerAware\n\nIndicates whether instances of this node type are decorated with layers in the AOT.\n\n    public boolean isLayerAware()\n\n#### Return Value\n\ntrue if tree nodes of this type are decorated with layers; otherwise, false.\n\n#### Remarks\n\nTree nodes of this type support the AOTLayer and AOTLayers methods.\n\n### Method isModelElement\n\nIndicates whether instances of this node type are model-elements.\n\n    public boolean isModelElement()\n\n#### Return Value\n\ntrue if tree nodes of this type are model-elements; otherwise, false.\n\n#### Remarks\n\nA model-element is a tree node that is (or can be) persisted in the model store. For each model-element tree node one record can be found in the ModelElements table in the model store. Model-elements are visually decorated with the name of the Model they are contained by in the AOT.\n\n### Method isRootElement\n\nIndicates whether instances of this node type are root-elements.\n\n    public boolean isRootElement()\n\n#### Return Value\n\ntrue if tree nodes of this type are root-elements; otherwise, false.\n\n#### Remarks\n\nA root-element is the root in a composition hierarchy of tree nodes. A root-element never has a model-element parent. Examples include MyTable, MyClass, MyForm.\n\n### Method isUtilElement\n\nIndicates whether instances of this node type are util-elements.\n\n    public boolean isUtilElement()\n\n#### Return Value\n\ntrue if tree nodes of this type are util-elements; otherwise, false.\n\n#### Remarks\n\nAn util-element is a tree node that can be accessed via the UtilElements and UtilIdElements views. Util-elements are a subset of model-elements.\n\n### Method isVCSControllableElement\n\n    public boolean isVCSControllableElement()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the TreeNodeType class.\n\n    private void new()\n\n"}