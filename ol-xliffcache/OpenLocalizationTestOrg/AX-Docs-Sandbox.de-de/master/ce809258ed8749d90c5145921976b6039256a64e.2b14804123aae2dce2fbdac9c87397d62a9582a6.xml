{"nodes":[{"pos":[32,96],"content":"Create and use localizable labels in the client | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"Create and use localizable labels in the client | Microsoft Docs","pos":[0,64]}]},{"pos":[110,216],"content":"This article explains how to create localizable labels for client components and HTML/JavaScript controls.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article explains how to create localizable labels for client components and HTML/JavaScript controls.","pos":[0,106]}]},{"pos":[630,677],"content":"Create and use localizable labels in the client","linkify":"Create and use localizable labels in the client","nodes":[{"content":"Create and use localizable labels in the client","pos":[0,47]}]},{"content":"This article details the process for creating <bpt id=\"p1\">**</bpt>localizable<ept id=\"p1\">**</ept> labels for client components and HTML/JavaScript controls.","pos":[679,799],"source":"This article details the process for creating **localizable** labels for client components and HTML/JavaScript controls."},{"content":"This process uses the existing localization tools and process for labels to bring localization support to client components and HMTL/JavaScript controls.","pos":[800,953]},{"content":"The following process relies on the label resource controller that can serialize label files into their JavaScript equivalents so that the labels can be used by the client components and HTML/JavaScript controls.","pos":[954,1166]},{"content":"The label resource controller is deployed automatically.","pos":[1167,1223]},{"content":"It is an MVC service that is located at the /Resources/Labels endpoint.","pos":[1224,1295]},{"pos":[1300,1322],"content":"1. Create a label file","linkify":"1. Create a label file","nodes":[{"content":"1. Create a label file","pos":[0,22]}]},{"content":"Use the developer tools to create a new label file for your control's area, or use an existing label file for your control's area.","pos":[1323,1453]},{"content":"A control's area is determined by the owning team.","pos":[1454,1504]},{"content":"For extensible controls, your goal should be to create one label file for each HTM resource file.","pos":[1510,1607]},{"content":"If multiple HTM resources share the same set of labels, only one label file should be required for the set of HTM resource files.","pos":[1608,1737]},{"content":"For client controls and components, in general, controls that share a lot of the same functionality (for example, the Input controls: StringEdit, ComboBox, CheckBox, and so on) should also share the same label file.","pos":[1742,1957]},{"content":"<bpt id=\"p1\">*</bpt>Don't use a label file that also contains labels that are only used in X++.<ept id=\"p1\">*</ept>","pos":[1959,2036],"source":"*Don't use a label file that also contains labels that are only used in X++.*"},{"content":"The whole label file is serialized when itâ€™s loaded by the client, so be sure to keep the labels that aren't required by the client components/controls in a separate label file.","pos":[2037,2214]},{"pos":[2219,2257],"content":"2. Add label strings to the label file","linkify":"2. Add label strings to the label file","nodes":[{"content":"2. Add label strings to the label file","pos":[0,38]}]},{"content":"Use the developer tools to add label strings to the label file.","pos":[2258,2321]},{"content":"<bpt id=\"p1\">**</bpt>Example for extensible controls:<ept id=\"p1\">**</ept>","pos":[2322,2358],"source":"**Example for extensible controls:**"},{"pos":[2364,2397],"content":"<bpt id=\"p1\">**</bpt>Label file name:<ept id=\"p1\">**</ept> ClockControl","source":"**Label file name:** ClockControl"},{"pos":[2402,2423],"content":"<bpt id=\"p1\">**</bpt>Label ID:<ept id=\"p1\">**</ept> Seconds","source":"**Label ID:** Seconds"},{"pos":[2428,2453],"content":"<bpt id=\"p1\">**</bpt>Label string:<ept id=\"p1\">**</ept> seconds","source":"**Label string:** seconds"},{"pos":[2458,2530],"content":"3. Request the label file as a JavaScript file by using Resource manager","linkify":"3. Request the label file as a JavaScript file by using Resource manager","nodes":[{"content":"3. Request the label file as a JavaScript file by using Resource manager","pos":[0,72]}]},{"content":"Use the script loading tag to load the JavaScript file.","pos":[2531,2586]},{"content":"The loading tag should reference the label file from /Resources/Labels, because the label resource controller is located there.","pos":[2587,2714]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> For extensible controls, the controller automatically appends the label file name to the beginning of the label identifier in JavaScript.","pos":[2715,2862],"source":"**Note:** For extensible controls, the controller automatically appends the label file name to the beginning of the label identifier in JavaScript."},{"content":"The JavaScript file that is returned will contain code that resembles the following example.","pos":[2927,3019]},{"content":"The culture information is injected automatically, based on the current user's culture.","pos":[3144,3231]},{"content":"No action is required on the part of the control to set, modify, or read the user's culture.","pos":[3232,3324]},{"content":"The preceding code adds each of your label strings to the jQuery Globalize label storage.","pos":[3325,3414]},{"content":"You can then reference your labels throughout your HTML and JavaScript.","pos":[3415,3486]},{"content":"The JavaScript code in the script file is run the moment that the file is loaded by the browser.","pos":[3487,3583]},{"content":"Therefore, your labels are immediately ready for use.","pos":[3584,3637]},{"content":"Be sure to add the label script loading tag <bpt id=\"p1\">**</bpt>after<ept id=\"p1\">**</ept> any other script loading tags in your HTML.","pos":[3638,3735],"source":" Be sure to add the label script loading tag **after** any other script loading tags in your HTML."},{"content":"The script loading tags are processed in order, from top to bottom.","pos":[3736,3803]},{"content":"By loading the label script last, you help guarantee that no other scripts cause conflicts or override the labels that are set in the script label file.","pos":[3804,3956]},{"pos":[3961,4009],"content":"4. Use localizable labels in HTML and JavaScript","linkify":"4. Use localizable labels in HTML and JavaScript","nodes":[{"content":"4. Use localizable labels in HTML and JavaScript","pos":[0,48]}]},{"content":"The following framework application programming interface (API) can be used in HTML (inside <bpt id=\"p1\">**</bpt>data-dyn-bind<ept id=\"p1\">**</ept>) or in JavaScript to access the labels.","pos":[4010,4159],"source":"The following framework application programming interface (API) can be used in HTML (inside **data-dyn-bind**) or in JavaScript to access the labels."},{"content":"<bpt id=\"p1\">**</bpt>HTML<ept id=\"p1\">**</ept>","pos":[4160,4168],"source":"**HTML**"},{"pos":[4606,4620],"content":"<bpt id=\"p1\">**</bpt>JavaScript<ept id=\"p1\">**</ept>","source":"**JavaScript**"},{"content":"You can also pass the label ID via a variable in HTML or JavaScript.","pos":[4746,4814]},{"content":"<bpt id=\"p1\">**</bpt>HTML<ept id=\"p1\">**</ept>","pos":[4815,4823],"source":"**HTML**"},{"pos":[4895,4909],"content":"<bpt id=\"p1\">**</bpt>JavaScript<ept id=\"p1\">**</ept>","source":"**JavaScript**"},{"content":"The <bpt id=\"p1\">**</bpt>$dyn.label<ept id=\"p1\">**</ept> API will find the appropriately named label and return the string that can be used to display text to the user.","pos":[4968,5098],"source":"The **$dyn.label** API will find the appropriately named label and return the string that can be used to display text to the user."},{"content":"This API will automatically select the label, based on the current user's culture.","pos":[5099,5181]},{"pos":[5186,5201],"content":"Troubleshooting","linkify":"Troubleshooting","nodes":[{"content":"Troubleshooting","pos":[0,15]}]},{"content":"If you have correctly created a label file, and the label has been deployed, you should be able to load the JavaScript version of the label file directly from the browser.","pos":[5202,5373]},{"content":"You can access the JavaScript label file by navigating to the home page in the client and appending the following path to the URL: <bpt id=\"p1\">**</bpt>/Resources/Labels/MyLabelFile.js<ept id=\"p1\">**</ept>, where <bpt id=\"p2\">**</bpt>MyLabelFile<ept id=\"p2\">**</ept> is the name of the label file without the language suffix.","pos":[5374,5623],"source":" You can access the JavaScript label file by navigating to the home page in the client and appending the following path to the URL: **/Resources/Labels/MyLabelFile.js**, where **MyLabelFile** is the name of the label file without the language suffix."},{"content":"For a deployed label file that is named MyLabelFile.en-us, follow these steps:","pos":[5624,5702]},{"content":"Navigate to the home page, and sign in.","pos":[5708,5747]},{"content":"(On one-box deployments, the URL of the home page is https://usncax1aos.cloud.onebox.dynamics.com/en/.)","pos":[5748,5851]},{"content":"Make sure that the desired language has been set by going to <bpt id=\"p1\">**</bpt>Options<ept id=\"p1\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">**</bpt>Language and Region<ept id=\"p2\">**</ept>.","pos":[5856,5958],"source":"Make sure that the desired language has been set by going to **Options** &gt; **Language and Region**."},{"content":"(You don't have to change the language if it's already set to the language that you want.) Now that the user's language has been set in the current session, the label resource controller will know what language to use when the label file is loaded.","pos":[5959,6207]},{"content":"To load the JavaScript version of the label file, navigate to the label file by adding <bpt id=\"p1\">**</bpt>Resources/Labels/MyLabelFile.js<ept id=\"p1\">**</ept> to the URL.","pos":[6212,6346],"source":"To load the JavaScript version of the label file, navigate to the label file by adding **Resources/Labels/MyLabelFile.js** to the URL."},{"content":"(On one-box deployments, the whole URL is https://usncax1aos.cloud.onebox.dynamics.com/en/Resources/Labels/MyLabelFile.js.)","pos":[6347,6470]},{"content":"The corresponding label file will be JSON-serialized, and the browser will either show the text on the current tab or prompt you to download the .js file.","pos":[6475,6629]},{"content":"If you download the file, you can then open it locally to inspect it.","pos":[6630,6699]},{"content":"If the browser doesn't find the file, you might have mistyped the name of the label, or you might not have deployed the label correctly.","pos":[6701,6837]},{"content":"There is never a physical .js file for the label in the web folder /Resources/Labels.","pos":[6838,6923]},{"content":"The .js file is dynamically generated by the label resource controller.","pos":[6924,6995]},{"pos":[7001,7039],"content":"Microsoft Visual Studio form previewer","linkify":"Microsoft Visual Studio form previewer","nodes":[{"content":"Microsoft Visual Studio form previewer","pos":[0,38]}]},{"content":"The form previewer isn't currently configured to load labels via the label resource controller.","pos":[7041,7136]},{"content":"The form previewer will load only labels that are defined directly in the .js file for the code behind (located at /Resources/Scripts).","pos":[7137,7272]},{"content":"Until the form previewer is updated so that it can load .js files from the label resource controller, make sure that you also define the labels in the .js file for the code behind of the control.","pos":[7273,7468]},{"content":"The dependency on these labels will be removed in a future update.","pos":[7469,7535]}],"content":"---\n# required metadata\n\ntitle: Create and use localizable labels in the client | Microsoft Docs\ndescription: This article explains how to create localizable labels for client components and HTML/JavaScript controls.\nauthor: annbe\nmanager: AnnBe\nms.date: 2015-12-05 01:13:42\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: 61\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 18531\nms.assetid: 0f2974c7-f54e-46b5-a4e2-6af4e92f45b6\n# ms.region: \n# ms.industry: \nms.author: RobinARH\n\n---\n\n# Create and use localizable labels in the client\n\nThis article details the process for creating **localizable** labels for client components and HTML/JavaScript controls. This process uses the existing localization tools and process for labels to bring localization support to client components and HMTL/JavaScript controls. The following process relies on the label resource controller that can serialize label files into their JavaScript equivalents so that the labels can be used by the client components and HTML/JavaScript controls. The label resource controller is deployed automatically. It is an MVC service that is located at the /Resources/Labels endpoint.\n\n## 1. Create a label file\nUse the developer tools to create a new label file for your control's area, or use an existing label file for your control's area. A control's area is determined by the owning team.\n\n-   For extensible controls, your goal should be to create one label file for each HTM resource file. If multiple HTM resources share the same set of labels, only one label file should be required for the set of HTM resource files.\n-   For client controls and components, in general, controls that share a lot of the same functionality (for example, the Input controls: StringEdit, ComboBox, CheckBox, and so on) should also share the same label file.\n\n*Don't use a label file that also contains labels that are only used in X++.* The whole label file is serialized when itâ€™s loaded by the client, so be sure to keep the labels that aren't required by the client components/controls in a separate label file.\n\n## 2. Add label strings to the label file\nUse the developer tools to add label strings to the label file. **Example for extensible controls:**\n\n-   **Label file name:** ClockControl\n-   **Label ID:** Seconds\n-   **Label string:** seconds\n\n## 3. Request the label file as a JavaScript file by using Resource manager\nUse the script loading tag to load the JavaScript file. The loading tag should reference the label file from /Resources/Labels, because the label resource controller is located there. **Note:** For extensible controls, the controller automatically appends the label file name to the beginning of the label identifier in JavaScript.\n\n    <script src=\"/Resources/Labels/ClockControl.js\"></script>\n\nThe JavaScript file that is returned will contain code that resembles the following example.\n\n    Globalize.addCultureInfo(\"en-us\", {\n        messages: {\n            ClockControl_Seconds: \"seconds\"\n        }\n    });\n\nThe culture information is injected automatically, based on the current user's culture. No action is required on the part of the control to set, modify, or read the user's culture. The preceding code adds each of your label strings to the jQuery Globalize label storage. You can then reference your labels throughout your HTML and JavaScript. The JavaScript code in the script file is run the moment that the file is loaded by the browser. Therefore, your labels are immediately ready for use. Be sure to add the label script loading tag **after** any other script loading tags in your HTML. The script loading tags are processed in order, from top to bottom. By loading the label script last, you help guarantee that no other scripts cause conflicts or override the labels that are set in the script label file.\n\n## 4. Use localizable labels in HTML and JavaScript\nThe following framework application programming interface (API) can be used in HTML (inside **data-dyn-bind**) or in JavaScript to access the labels. **HTML**\n\n    <!-- Example of using a localizable label with a Label Control. Supply the label to the \"Text\" property on the control -->\n    <div data-dyn-role=\"Label\" data-dyn-bind=\"Text: $dyn.label('ClockControl_Seconds')\"></div>\n    <!-- Example of using a localizable label with a basic HTML element. Supply the label to the \"text\" binding handler for the element -->\n    <div data-dyn-bind=\"text: $dyn.label('ClockControl_Seconds')\"></div>\n\n**JavaScript**\n\n    /* Example of using a localizable label in JavaScript. */\n    var string mylabel = $dyn.label('ClockControl_Seconds');\n\nYou can also pass the label ID via a variable in HTML or JavaScript. **HTML**\n\n    <div data-dyn-bind=\"text: $dyn.label($data.SecondsLabel)\"></div>\n\n**JavaScript**\n\n    var string mylabel = $dyn.label(self.SecondsLabel);\n\nThe **$dyn.label** API will find the appropriately named label and return the string that can be used to display text to the user. This API will automatically select the label, based on the current user's culture.\n\n## Troubleshooting\nIf you have correctly created a label file, and the label has been deployed, you should be able to load the JavaScript version of the label file directly from the browser. You can access the JavaScript label file by navigating to the home page in the client and appending the following path to the URL: **/Resources/Labels/MyLabelFile.js**, where **MyLabelFile** is the name of the label file without the language suffix. For a deployed label file that is named MyLabelFile.en-us, follow these steps:\n\n1.  Navigate to the home page, and sign in. (On one-box deployments, the URL of the home page is https://usncax1aos.cloud.onebox.dynamics.com/en/.)\n2.  Make sure that the desired language has been set by going to **Options** &gt; **Language and Region**. (You don't have to change the language if it's already set to the language that you want.) Now that the user's language has been set in the current session, the label resource controller will know what language to use when the label file is loaded.\n3.  To load the JavaScript version of the label file, navigate to the label file by adding **Resources/Labels/MyLabelFile.js** to the URL. (On one-box deployments, the whole URL is https://usncax1aos.cloud.onebox.dynamics.com/en/Resources/Labels/MyLabelFile.js.)\n4.  The corresponding label file will be JSON-serialized, and the browser will either show the text on the current tab or prompt you to download the .js file. If you download the file, you can then open it locally to inspect it.\n\nIf the browser doesn't find the file, you might have mistyped the name of the label, or you might not have deployed the label correctly. There is never a physical .js file for the label in the web folder /Resources/Labels. The .js file is dynamically generated by the label resource controller.\n\n### Microsoft Visual Studio form previewer\n\nThe form previewer isn't currently configured to load labels via the label resource controller. The form previewer will load only labels that are defined directly in the .js file for the code behind (located at /Resources/Scripts). Until the form previewer is updated so that it can load .js files from the label resource controller, make sure that you also define the labels in the .js file for the code behind of the control. The dependency on these labels will be removed in a future update.\n\n"}