{"nodes":[{"pos":[32,65],"content":"X++ reflection run-time functions","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ reflection run-time functions","pos":[0,33]}]},{"pos":[79,133],"content":"This wiki describes the reflection run-time functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"This wiki describes the reflection run-time functions.","pos":[0,54]}]},{"pos":[642,675],"content":"X++ reflection run-time functions","linkify":"X++ reflection run-time functions","nodes":[{"content":"X++ reflection run-time functions","pos":[0,33]}]},{"content":"This wiki describes the reflection run-time functions.","pos":[677,731]},{"pos":[733,743],"content":"classIdGet","linkify":"classIdGet","nodes":[{"content":"classIdGet","pos":[0,10]}]},{"content":"Retrieves the numeric identifier (the class ID) of the class that the object that is initialized belongs to.","pos":[756,864]},{"pos":[904,914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[918,927]},{"content":"Description","pos":[930,941]},{"content":"object","pos":[1022,1028]},{"content":"The object to get the class ID for.","pos":[1034,1069]},{"pos":[1077,1089],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The class ID of the specified object.","pos":[1091,1128]},{"pos":[1134,1141],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1343,1348],"content":"dimOf","linkify":"dimOf","nodes":[{"content":"dimOf","pos":[0,5]}]},{"content":"Retrieves the number of index elements that space has been allocated for in an X++ array.","pos":[1349,1438]},{"pos":[1475,1485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1489,1498]},{"content":"Description","pos":[1501,1512]},{"content":"object","pos":[1613,1619]},{"content":"The array to determine the dimension size of.","pos":[1625,1670]},{"pos":[1678,1690],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[1692,1805],"content":"If the value of the <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter is an array, the number of elements in the array; otherwise, <bpt id=\"p2\">**</bpt>0<ept id=\"p2\">**</ept> (zero).","source":"If the value of the *object* parameter is an array, the number of elements in the array; otherwise, **0** (zero)."},{"pos":[1811,1818],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1820,1925],"content":"The <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function is intended for X++ arrays that are declared as the following X++ primitive types:","source":"The **dimOf** function is intended for X++ arrays that are declared as the following X++ primitive types:"},{"content":"boolean","pos":[1931,1938]},{"content":"date","pos":[1943,1947]},{"content":"int","pos":[1952,1955]},{"content":"int64","pos":[1960,1965]},{"content":"real","pos":[1970,1974]},{"content":"utcDateTime","pos":[1979,1990]},{"content":"An example is <bpt id=\"p1\">**</bpt>int iAmounts<ph id=\"ph1\">\\[</ph>6<ph id=\"ph2\">\\]</ph>;<ept id=\"p1\">**</ept>.","pos":[1992,2029],"source":"An example is **int iAmounts\\[6\\];**."},{"content":"Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as <bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept>).","pos":[2030,2194],"source":" Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as **int**)."},{"content":"The <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function doesn't accept arrays of all X++ primitive types.","pos":[2195,2267],"source":" The **dimOf** function doesn't accept arrays of all X++ primitive types."},{"content":"Here are the array types that the <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function doesn't accept:","pos":[2268,2336],"source":" Here are the array types that the **dimOf** function doesn't accept:"},{"pos":[2342,2349],"content":"<bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>","source":"**str**"},{"pos":[2354,2367],"content":"<bpt id=\"p1\">**</bpt>container<ept id=\"p1\">**</ept>","source":"**container**"},{"pos":[2372,2383],"content":"<bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept>","source":"**anytype**"},{"content":"Arrays of class objects","pos":[2388,2411]},{"pos":[2416,2448],"content":"Instances of the <bpt id=\"p1\">**</bpt>Array<ept id=\"p1\">**</ept> class","source":"Instances of the **Array** class"},{"pos":[2454,2461],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5391,5403],"content":"fieldId2Name","linkify":"fieldId2Name","nodes":[{"content":"fieldId2Name","pos":[0,12]}]},{"content":"Retrieves a string that represents the name of the field that is specified by a table ID number and a field ID number.","pos":[5404,5522]},{"pos":[5576,5586],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5590,5599]},{"content":"Description","pos":[5602,5613]},{"content":"tableid","pos":[5826,5833]},{"content":"The ID number of the table.","pos":[5838,5865]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[5866,5939],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldid","pos":[5944,5951]},{"content":"The ID number of the field.","pos":[5956,5983]},{"pos":[6065,6077],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the field.","pos":[6079,6101]},{"pos":[6107,6114],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6116,6200],"content":"To return a printable version of the field name, use the <bpt id=\"p1\">**</bpt>fieldId2PName<ept id=\"p1\">**</ept> function.","source":"To return a printable version of the field name, use the **fieldId2PName** function."},{"pos":[6206,6213],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6215,6333],"content":"The following example sets <bpt id=\"p1\">**</bpt>fn<ept id=\"p1\">**</ept> to the name of the field in the Customer (CustGroup) table that has a field ID of 7.","source":"The following example sets **fn** to the name of the field in the Customer (CustGroup) table that has a field ID of 7."},{"pos":[6477,6490],"content":"fieldId2PName","linkify":"fieldId2PName","nodes":[{"content":"fieldId2PName","pos":[0,13]}]},{"content":"Retrieves the printable name of the field that is specified by a table ID number and a field ID number.","pos":[6491,6594]},{"pos":[6649,6659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6663,6672]},{"content":"Description","pos":[6675,6686]},{"content":"tableid","pos":[6899,6906]},{"content":"The ID number of the table.","pos":[6911,6938]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[6939,7012],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldid","pos":[7017,7024]},{"content":"The ID number of the field.","pos":[7029,7056]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>fieldName2Id<ept id=\"p2\">**</ept> function to specify the ID of a field.","pos":[7057,7130],"source":"**Note:** Use the **fieldName2Id** function to specify the ID of a field."},{"pos":[7138,7150],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the field.","pos":[7152,7174]},{"pos":[7180,7187],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7517,7529],"content":"fieldName2Id","linkify":"fieldName2Id","nodes":[{"content":"fieldName2Id","pos":[0,12]}]},{"content":"Retrieves the field ID of the table field that is specified by a table ID number and a field ID number.","pos":[7530,7633]},{"pos":[7689,7699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[7703,7712]},{"content":"Description","pos":[7715,7726]},{"content":"tableid","pos":[7939,7946]},{"content":"The ID number of the table.","pos":[7951,7978]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[7979,8052],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldname","pos":[8057,8066]},{"content":"The name of the field.","pos":[8069,8091]},{"pos":[8178,8190],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[8192,8274],"content":"The ID of the field that is specified by the <bpt id=\"p1\">*</bpt>tableid<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>fieldname<ept id=\"p2\">*</ept> parameters.","source":"The ID of the field that is specified by the *tableid* and *fieldname* parameters."},{"pos":[8280,8287],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8529,8541],"content":"indexId2Name","linkify":"indexId2Name","nodes":[{"content":"indexId2Name","pos":[0,12]}]},{"content":"Retrieves the name of an index.","pos":[8542,8573]},{"pos":[8627,8637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8641,8650]},{"content":"Description","pos":[8653,8664]},{"content":"tableid","pos":[8767,8774]},{"content":"The ID of the table that the index belongs to.","pos":[8779,8825]},{"content":"indexid","pos":[8830,8837]},{"content":"The ID of the index.","pos":[8842,8862]},{"pos":[8896,8908],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the index.","pos":[8910,8932]},{"pos":[8938,8945],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9272,9284],"content":"indexName2Id","linkify":"indexName2Id","nodes":[{"content":"indexName2Id","pos":[0,12]}]},{"content":"Retrieves the ID of an index.","pos":[9285,9314]},{"pos":[9370,9380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9384,9393]},{"content":"Description","pos":[9396,9407]},{"content":"tableid","pos":[9510,9517]},{"content":"The ID of the table that the index belongs to.","pos":[9522,9568]},{"content":"indexname","pos":[9573,9582]},{"content":"The name of the index.","pos":[9585,9607]},{"pos":[9639,9651],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The ID of the index.","pos":[9653,9673]},{"pos":[9679,9686],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9980,10004],"content":"refPrintAll (no content)","linkify":"refPrintAll (no content)","nodes":[{"content":"refPrintAll (no content)","pos":[0,24]}]},{"content":"Summary","pos":[10005,10012]},{"pos":[10079,10089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10093,10102]},{"content":"Description","pos":[10105,10116]},{"content":"object","pos":[10149,10155]},{"content":"Description","pos":[10161,10172]},{"content":"filename","pos":[10177,10185]},{"content":"Description","pos":[10189,10200]},{"content":"title","pos":[10205,10210]},{"content":"Description","pos":[10217,10228]},{"pos":[10235,10247],"content":"tableId2Name","linkify":"tableId2Name","nodes":[{"content":"tableId2Name","pos":[0,12]}]},{"content":"Retrieves a string that contains the name of a table.","pos":[10248,10301]},{"pos":[10343,10353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10357,10366]},{"content":"Description","pos":[10369,10380]},{"content":"<ph id=\"ph1\">\\_</ph>tableid","pos":[10431,10440],"source":"\\_tableid"},{"content":"The ID of the table.","pos":[10443,10463]},{"pos":[10471,10483],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the table.","pos":[10485,10507]},{"pos":[10513,10520],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11105,11118],"content":"tableId2PName","linkify":"tableId2PName","nodes":[{"content":"tableId2PName","pos":[0,13]}]},{"content":"Retrieves a string that contains the printable name (the label) of a table.","pos":[11119,11194]},{"pos":[11237,11247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11251,11260]},{"content":"Description","pos":[11263,11274]},{"content":"<ph id=\"ph1\">\\_</ph>fieldid","pos":[11325,11334],"source":"\\_fieldid"},{"content":"The ID of the table.","pos":[11337,11357]},{"pos":[11365,11377],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The label of the table.","pos":[11379,11402]},{"pos":[11408,11415],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12000,12012],"content":"tableName2Id","linkify":"tableName2Id","nodes":[{"content":"tableName2Id","pos":[0,12]}]},{"content":"Retrieves the ID of a table.","pos":[12013,12041]},{"pos":[12080,12090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12094,12103]},{"content":"Description","pos":[12106,12117]},{"content":"<ph id=\"ph1\">\\_</ph>name","pos":[12172,12178],"source":"\\_name"},{"content":"The name of the table.","pos":[12184,12206]},{"pos":[12214,12226],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The ID of the table.","pos":[12228,12248]},{"pos":[12254,12261],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12854,12860],"content":"typeOf","linkify":"typeOf","nodes":[{"content":"typeOf","pos":[0,6]}]},{"content":"Retrieves the type of an element.","pos":[12861,12894]},{"pos":[12934,12944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12948,12957]},{"content":"Description","pos":[12960,12971]},{"content":"<ph id=\"ph1\">\\_</ph>object","pos":[13052,13060],"source":"\\_object"},{"content":"The element to return the type for.","pos":[13064,13099]},{"pos":[13107,13119],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[13121,13158],"content":"A <bpt id=\"p1\">**</bpt>Types<ept id=\"p1\">**</ept> system enumeration value.","source":"A **Types** system enumeration value."},{"pos":[13164,13171],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13173,13302],"content":"The following example tests whether the first element in a container, <bpt id=\"p1\">**</bpt>c<ept id=\"p1\">**</ept>, is another container that contains a single integer.","source":"The following example tests whether the first element in a container, **c**, is another container that contains a single integer."}],"content":"---\n# required metadata\n\ntitle: X++ reflection run-time functions\ndescription: This wiki describes the reflection run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2016-02-04 22 - 13 - 50\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: 61\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 31381\nms.assetid: d0d4043e-5abb-42ae-bcc2-c6b678f4ef5b\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X++ reflection run-time functions\n\nThis wiki describes the reflection run-time functions.\n\nclassIdGet\n----------\n\nRetrieves the numeric identifier (the class ID) of the class that the object that is initialized belongs to.\n\n    int classIdGet(class object)\n\n### Parameters\n\n| Parameter | Description                         |\n|-----------|-------------------------------------|\n| object    | The object to get the class ID for. |\n\n### Return value\n\nThe class ID of the specified object.\n\n### Example\n\n    static void classIdGetExample(Args _args)\n    {\n            int i;\n            WorkTimeCheck w;\n\n            i = classIdGet(w);\n            print \"Class ID for object is \" + int2Str(i);\n    }\n\n## dimOf\nRetrieves the number of index elements that space has been allocated for in an X++ array.\n\n    int dimOf(anytype object)\n\n### Parameters\n\n| Parameter | Description                                   |\n|-----------|-----------------------------------------------|\n| object    | The array to determine the dimension size of. |\n\n### Return value\n\nIf the value of the *object* parameter is an array, the number of elements in the array; otherwise, **0** (zero).\n\n### Remarks\n\nThe **dimOf** function is intended for X++ arrays that are declared as the following X++ primitive types:\n\n-   boolean\n-   date\n-   int\n-   int64\n-   real\n-   utcDateTime\n\nAn example is **int iAmounts\\[6\\];**. Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as **int**). The **dimOf** function doesn't accept arrays of all X++ primitive types. Here are the array types that the **dimOf** function doesn't accept:\n\n-   **str**\n-   **container**\n-   **anytype**\n-   Arrays of class objects\n-   Instances of the **Array** class\n\n### Example\n\n    static void JobDimOfArrays(Args _args)\n    {\n            int iAmounts[20], iCounts[];\n            ABCModel enumAbcModel[22]; // Enum\n            ABCModelType exdtAbcModelType[24]; // Extended data type\n            anytype anyThings[26];\n            str sNames[28];\n            Array myArrayObj; // Class\n\n            info(\"Start of job.\");\n            info(\"--(Next, normal int array, dimOf() accepts it.)\");\n            info(int2Str(dimOf(iAmounts)));\n            info(\"--(Next, normal enum array, dimOf() accepts it.)\");\n            info(int2Str(dimOf(enumAbcModel)));\n            info(\"--(Next, normal extended data type array (based on enum), dimOf() accepts it.)\");\n            info(int2Str(dimOf(exdtAbcModelType)));\n            info(\"--(Next, dynamic int array, dimension not yet set.)\");\n            info(int2Str(dimOf(iCounts)));\n            info(\"--(Next, dynamic int array, after dimension established.)\");\n            \n            iCounts[13] = 13;\n            info(int2Str(dimOf(iCounts)));\n            info(\" == == == == == (Next, array types that dimOf() does not support.)\");\n            info(\"--(Next, normal anytype array, dimOf() always returns 0.)\");\n            info(int2Str(dimOf(anyThings)));\n            info(\"--(Next, an instance of class X++ Array, dimOf() always returns 0.)\");\n\n            myArrayObj = new Array(Types::Integer);\n            myArrayObj.value(1,501);\n            info(int2Str(dimOf(myArrayObj)));\n            info(\"--(Next, the lastIndex method provides size information about Array instances.)\");\n            info(int2Str(myArrayObj.lastIndex()));\n            info(\"--(Next, normal str array, dimOf() does not accept it, job is halted.)\");\n            info(int2Str(dimOf(sNames)));\n            info(\"End of job.\");\n\n    }\n    /************  Actual Infolog output\n    Message (11:10:06 am)\n    Start of job.\n    --(Next, normal int array, dimOf() accepts it.)\n    20\n    --(Next, normal enum array, dimOf() accepts it.)\n    22\n    --(Next, normal extended data type array (based on enum), dimOf() accepts it.)\n    24\n    --(Next, dynamic int array, dimension not yet set.)\n    0\n    --(Next, dynamic int array, after dimension established.)\n    16\n    == == == == == (Next, array types that dimOf() does not support.)\n    --(Next, normal anytype array, dimOf() always returns 0.)\n    0\n    --(Next, an instance of class X++ Array, dimOf() always returns 0.)\n    0\n    --(Next, the lastIndex method provides size information about Array instances.)\n    1\n    --(Next, normal str array, dimOf() does not accept it, job is halted.)\n    Error executing code: Illegal operation on this type of array. (C)JobsJobDimOfArrays - line 41\n    ************/\n    /***********  Pop-up error dialog box\n    \"Internal error number 25 in script.\"\n    This error is caused by the code line...\n    info(int2Str(dimOf(iCounts)));\n    ...before iCounts was assigned at any index.\n    ***********/\n\n## fieldId2Name\nRetrieves a string that represents the name of the field that is specified by a table ID number and a field ID number.\n\n    str fieldId2Name(int tableid, int fieldid)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldid   | The ID number of the field.                                                                           |\n\n### Return value\n\nThe name of the field.\n\n### Remarks\n\nTo return a printable version of the field name, use the **fieldId2PName** function.\n\n### Example\n\nThe following example sets **fn** to the name of the field in the Customer (CustGroup) table that has a field ID of 7.\n\n    static void fieldId2NameExample(Args _arg)\n    {\n            str fn;\n            fn = fieldId2Name(tableName2Id(\"Customer\"),7);\n    }\n\n## fieldId2PName\nRetrieves the printable name of the field that is specified by a table ID number and a field ID number.\n\n    str fieldId2PName(int tableid, int fieldid)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldid   | The ID number of the field. **Note:** Use the **fieldName2Id** function to specify the ID of a field. |\n\n### Return value\n\nThe name of the field.\n\n### Example\n\n    static void fieldId2PNameExample(Args _arg)\n    {\n            str name;\n            tableid _tableId;\n            fieldid _fieldid;\n\n            _tableId = tableName2Id(\"Address\");\n            _fieldId = fieldName2Id(_tableId, \"Name\");\n            name = fieldId2PName(_tableId, _fieldid);\n            print name;\n    }\n\n## fieldName2Id\nRetrieves the field ID of the table field that is specified by a table ID number and a field ID number.\n\n    int fieldName2Id(int tableid, str fieldname)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldname | The name of the field.                                                                                |\n\n### Return value\n\nThe ID of the field that is specified by the *tableid* and *fieldname* parameters.\n\n### Example\n\n    static void fieldName2IdExample(Args _arg)\n    {\n            int id;\n\n            id = fieldName2Id(tableName2Id(\"Address\"), \"Name\");\n            // Returns 6. Name is the 6th field in the Address table.\n            print id;\n    }\n\n## indexId2Name\nRetrieves the name of an index.\n\n    str indexId2Name(int tableid, int indexid)\n\n### Parameters\n\n| Parameter | Description                                    |\n|-----------|------------------------------------------------|\n| tableid   | The ID of the table that the index belongs to. |\n| indexid   | The ID of the index.                           |\n\n### Return value\n\nThe name of the index.\n\n### Example\n\n    static void indexId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n            indexid idx;\n\n            id  = tableName2Id(\"Address\");\n            idx = indexName2Id(id, \"AddrIdx\");\n            s = indexId2Name(id, idx);\n            print \"The result of calling indexId2Name is \" + s;\n    }\n\n## indexName2Id\nRetrieves the ID of an index.\n\n    int indexName2Id(int tableid, str indexname)\n\n### Parameters\n\n| Parameter | Description                                    |\n|-----------|------------------------------------------------|\n| tableid   | The ID of the table that the index belongs to. |\n| indexname | The name of the index.                         |\n\n### Return value\n\nThe ID of the index.\n\n### Example\n\n    static void indexName2IdExample(Args _arg)\n    {\n            indexid idx;\n            tableid id;\n\n            id  = tableName2Id(\"Address\");\n            idx = indexName2Id(id, \"AddrIdx\");\n            print \"Index ID for index name AddrIdx of table Address is \" + int2Str(idx);\n    }\n\n## refPrintAll (no content)\nSummary\n\n    void refPrintAll(class object, str filename, str title)\n\n### Parameters\n\n| Parameter | Description |\n|-----------|-------------|\n| object    | Description |\n| filename  | Description |\n| title     | Description |\n\n## tableId2Name\nRetrieves a string that contains the name of a table.\n\n    str tableId2Name(int _tableid)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_tableid | The ID of the table. |\n\n### Return value\n\nThe name of the table.\n\n### Example\n\n    static void tableId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for table name Address.\n            id = tableName2Id(\"Address\");\n            print \"ID for table name Address is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## tableId2PName\nRetrieves a string that contains the printable name (the label) of a table.\n\n    str tableId2PName(int _fieldid)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_fieldid | The ID of the table. |\n\n### Return value\n\nThe label of the table.\n\n### Example\n\n    static void tableId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for table name Address.\n            id = tableName2Id(\"Address\");\n            print \"ID for table name Address is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## tableName2Id\nRetrieves the ID of a table.\n\n    int tableName2Id(str _name)\n\n### Parameters\n\n| Parameter | Description            |\n|-----------|------------------------|\n| \\_name    | The name of the table. |\n\n### Return value\n\nThe ID of the table.\n\n### Example\n\n    static void tableName2IdExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for the Address table name.\n            id = tableName2Id(\"Address\");\n            print \"ID for the Address table name is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## typeOf\nRetrieves the type of an element.\n\n    enum typeOf(anytype _object)\n\n### Parameters\n\n| Parameter | Description                         |\n|-----------|-------------------------------------|\n| \\_object  | The element to return the type for. |\n\n### Return value\n\nA **Types** system enumeration value.\n\n### Example\n\nThe following example tests whether the first element in a container, **c**, is another container that contains a single integer.\n\n    if(typeof(conpeek(c, 1)) != Types::Container ||\n    conlen(conpeek(c, 1)) != 1 ||\n    typeof(conpeek(conpeek(c, 1), 1)) != Types::Integer)\n    {\n            // More code.\n    }\n\n"}