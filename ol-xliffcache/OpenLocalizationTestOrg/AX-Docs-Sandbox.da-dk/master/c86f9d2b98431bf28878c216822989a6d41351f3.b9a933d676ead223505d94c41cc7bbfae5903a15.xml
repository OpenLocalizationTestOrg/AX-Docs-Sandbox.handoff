{"nodes":[{"pos":[32,63],"content":"X++ business run-time functions","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ business run-time functions","pos":[0,31]}]},{"pos":[77,129],"content":"This wiki describes the business run-time functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"This wiki describes the business run-time functions.","pos":[0,52]}]},{"pos":[642,673],"content":"X++ business run-time functions","linkify":"X++ business run-time functions","nodes":[{"content":"X++ business run-time functions","pos":[0,31]}]},{"content":"This wiki describes the business run-time functions.","pos":[675,727]},{"content":"These functions enter financial data and calculate formulas.","pos":[729,789]},{"pos":[794,799],"content":"cTerm","linkify":"cTerm","nodes":[{"content":"cTerm","pos":[0,5]}]},{"content":"Calculates the number of periods that are required for the current investment value to yield a target value.","pos":[800,908]},{"pos":[914,920],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[996,1006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1010,1019]},{"content":"Description","pos":[1027,1038]},{"content":"interest","pos":[1112,1120]},{"content":"The interest rate.","pos":[1129,1147]},{"content":"future<ph id=\"ph1\">\\_</ph>value","pos":[1163,1176],"source":"future\\_value"},{"content":"The target value.","pos":[1180,1197]},{"content":"current<ph id=\"ph1\">\\_</ph>value","pos":[1214,1228],"source":"current\\_value"},{"content":"The current investment value.","pos":[1231,1260]},{"pos":[1268,1280],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[1282,1356],"content":"The number of periods that are required in order to reach <bpt id=\"p1\">*</bpt>future<ph id=\"ph1\">\\_</ph>value<ept id=\"p1\">*</ept>.","source":"The number of periods that are required in order to reach *future\\_value*."},{"pos":[1362,1369],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1371,1472],"content":"The <bpt id=\"p1\">*</bpt>current<ph id=\"ph1\">\\_</ph>value<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>future<ph id=\"ph2\">\\_</ph>value<ept id=\"p2\">*</ept> parameters must have the same prefixed sign (plus or minus).","source":"The *current\\_value* and *future\\_value* parameters must have the same prefixed sign (plus or minus)."},{"pos":[1478,1485],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1678,1681],"content":"ddb","linkify":"ddb","nodes":[{"content":"ddb","pos":[0,3]}]},{"content":"Calculates the accelerated depreciation of an asset.","pos":[1687,1739]},{"pos":[1745,1751],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1818,1828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1832,1841]},{"content":"Description","pos":[1844,1855]},{"content":"price","pos":[1982,1987]},{"content":"The purchase price of the asset.","pos":[1994,2026]},{"content":"scrap","pos":[2057,2062]},{"content":"The residual value of the asset that has been written off.","pos":[2069,2127]},{"content":"life","pos":[2132,2136]},{"content":"The expected lifetime of the asset.","pos":[2144,2179]},{"content":"period","pos":[2207,2213]},{"content":"The period to calculate depreciation over.","pos":[2219,2261]},{"pos":[2285,2297],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The depreciation of the asset.","pos":[2299,2329]},{"pos":[2335,2342],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The book value for a specific period is equal to the purchase price minus the accumulated depreciation for previous periods:","pos":[2344,2468]},{"content":"Book value for Period 1 = Price","pos":[2474,2505]},{"content":"Book value for Period 2 = Book value for Period 1 – Depreciation for Period 1","pos":[2510,2587]},{"content":"Book value for Period n = Book value for Period (n–1) – Depreciation for Period (n–1)","pos":[2592,2677]},{"content":"There are three variations for the calculation of depreciation: If Period <ph id=\"ph1\">&amp;gt;</ph> Life:","pos":[2679,2763],"source":"There are three variations for the calculation of depreciation: If Period &gt; Life:"},{"content":"Depreciation = 0","pos":[2769,2785]},{"content":"If (Book value for Period n) – ((Book value for Period n) × 2 ÷ Life) <ph id=\"ph1\">&amp;lt;</ph> Residual value:","pos":[2787,2877],"source":"If (Book value for Period n) – ((Book value for Period n) × 2 ÷ Life) &lt; Residual value:"},{"content":"Depreciation = (Book value for Period n) – Residual value","pos":[2883,2940]},{"content":"In all other cases: Depreciation = (Book value for Period n) × 2 ÷ Life The <bpt id=\"p1\">**</bpt>syd<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>sln<ept id=\"p2\">**</ept> functions also calculate the depreciation of an asset.","pos":[2942,3092],"source":"In all other cases: Depreciation = (Book value for Period n) × 2 ÷ Life The **syd** and **sln** functions also calculate the depreciation of an asset."},{"content":"The <bpt id=\"p1\">**</bpt>syd<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>ddb<ept id=\"p2\">**</ept> functions enables higher depreciation for the earlier years, whereas <bpt id=\"p3\">**</bpt>sln<ept id=\"p3\">**</ept> calculates a linear depreciation.","pos":[3093,3227],"source":" The **syd** and **ddb** functions enables higher depreciation for the earlier years, whereas **sln** calculates a linear depreciation."},{"pos":[3334,3336],"content":"dg","linkify":"dg","nodes":[{"content":"dg","pos":[0,2]}]},{"content":"Calculates the contribution ratio, which is based on the sales price and the purchase price.","pos":[3341,3433]},{"content":"If the value of the <bpt id=\"p1\">*</bpt>sale<ept id=\"p1\">*</ept> parameter is <bpt id=\"p2\">**</bpt>0.0<ept id=\"p2\">**</ept>, the calculation can't be done.","pos":[3434,3513],"source":" If the value of the *sale* parameter is **0.0**, the calculation can't be done."},{"pos":[3519,3525],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3570,3580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[3584,3593]},{"content":"Description","pos":[3596,3607]},{"content":"sale","pos":[3656,3660]},{"content":"The sale price.","pos":[3668,3683]},{"content":"purchase","pos":[3692,3700]},{"content":"The purchase price.","pos":[3704,3723]},{"pos":[3731,3743],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The contribution ratio.","pos":[3745,3768]},{"pos":[3774,3781],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3916,3918],"content":"fV","linkify":"fV","nodes":[{"content":"fV","pos":[0,2]}]},{"content":"Calculates the future value of an investment.","pos":[3923,3968]},{"pos":[3974,3980],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[4038,4048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[4052,4061]},{"content":"Description","pos":[4064,4075]},{"content":"amount","pos":[4180,4186]},{"content":"The amount that was paid in during each period.","pos":[4192,4239]},{"content":"interest","pos":[4244,4252]},{"content":"The interest rate.","pos":[4256,4274]},{"content":"life","pos":[4308,4312]},{"content":"The number of investment periods.","pos":[4320,4353]},{"pos":[4375,4387],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The future value of the investment.","pos":[4389,4424]},{"pos":[4430,4437],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4539,4542],"content":"idg","linkify":"idg","nodes":[{"content":"idg","pos":[0,3]}]},{"content":"Calculates the sale price, based on the purchase price and the contribution ratio.","pos":[4548,4630]},{"pos":[4690,4700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[4704,4713]},{"content":"Description","pos":[4726,4737]},{"content":"purchase","pos":[4804,4812]},{"content":"The purchase price.","pos":[4826,4845]},{"content":"contribution<ph id=\"ph1\">\\_</ph>ratio","pos":[4854,4873],"source":"contribution\\_ratio"},{"content":"The contribution ratio.","pos":[4876,4899]},{"pos":[4907,4919],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The sale price.","pos":[4921,4936]},{"pos":[4942,4949],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the contribution ratio is equal to <bpt id=\"p1\">**</bpt>1.0<ept id=\"p1\">**</ept>, the calculation can't be done.","pos":[4951,5028],"source":"If the contribution ratio is equal to **1.0**, the calculation can't be done."},{"content":"The <bpt id=\"p1\">**</bpt>idg<ept id=\"p1\">**</ept> function is the inverse of the <bpt id=\"p2\">**</bpt>dg<ept id=\"p2\">**</ept> function.","pos":[5029,5088],"source":" The **idg** function is the inverse of the **dg** function."},{"pos":[5186,5193],"content":"intvMax","linkify":"intvMax","nodes":[{"content":"intvMax","pos":[0,7]}]},{"pos":[5194,5328],"content":"Retrieves the number of intervals for the specified period when the period is divided into parts as specified by the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter.","source":"Retrieves the number of intervals for the specified period when the period is divided into parts as specified by the *func* parameter."},{"pos":[5393,5403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5407,5416]},{"content":"Description","pos":[5421,5432]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[5593,5604],"source":"input\\_date"},{"pos":[5607,5681],"content":"The end of the period, which must be later than the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter.","source":"The end of the period, which must be later than the *ref\\_date* parameter."},{"content":"ref<ph id=\"ph1\">\\_</ph>date","pos":[5686,5695],"source":"ref\\_date"},{"content":"The start of the period.","pos":[5700,5724]},{"content":"func","pos":[5779,5783]},{"pos":[5793,5867],"content":"A <bpt id=\"p1\">**</bpt>IntvScale<ept id=\"p1\">**</ept> system enumeration value that indicates the division unit.","source":"A **IntvScale** system enumeration value that indicates the division unit."},{"pos":[5875,5882],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5884,5938],"content":"Here are the possible values for the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter:","source":"Here are the possible values for the *func* parameter:"},{"content":"None","pos":[5944,5948]},{"content":"YearMonthDay","pos":[5953,5965]},{"content":"YearMonth","pos":[5970,5979]},{"content":"Year","pos":[5984,5988]},{"content":"MonthDay","pos":[5993,6001]},{"content":"Month","pos":[6006,6011]},{"content":"Day","pos":[6016,6019]},{"content":"YearQuarter","pos":[6024,6035]},{"content":"Quarter","pos":[6040,6047]},{"content":"YearWeek","pos":[6052,6060]},{"content":"Week","pos":[6065,6069]},{"content":"WeekDay","pos":[6074,6081]},{"pos":[6087,6094],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6416,6424],"content":"intvName","linkify":"intvName","nodes":[{"content":"intvName","pos":[0,8]}]},{"content":"Returns the name of the interval that is the specified number of intervals ahead of the specified date.","pos":[6425,6528]},{"pos":[6589,6599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6603,6612]},{"content":"Description","pos":[6617,6628]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[6823,6834],"source":"input\\_date"},{"content":"A date in the first interval.","pos":[6837,6866]},{"content":"col","pos":[6933,6936]},{"pos":[6947,7038],"content":"The number of intervals ahead of the date that is specified by the <bpt id=\"p1\">*</bpt>input<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter.","source":"The number of intervals ahead of the date that is specified by the *input\\_date* parameter."},{"content":"func","pos":[7043,7047]},{"pos":[7057,7092],"content":"An <bpt id=\"p1\">**</bpt>intvScale<ept id=\"p1\">**</ept> enumeration value.","source":"An **intvScale** enumeration value."},{"pos":[7156,7168],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the interval.","pos":[7170,7195]},{"pos":[7201,7208],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For example, if the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter is the <bpt id=\"p2\">**</bpt>IntvScale::WeekDay<ept id=\"p2\">**</ept> enumeration value, this method returns the name of the weekday.","pos":[7210,7340],"source":"For example, if the *func* parameter is the **IntvScale::WeekDay** enumeration value, this method returns the name of the weekday."},{"content":"If the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter is the <bpt id=\"p2\">**</bpt>IntvScale::Week<ept id=\"p2\">**</ept> enumeration value, this method returns a string that contains the number of the week.","pos":[7341,7477],"source":" If the *func* parameter is the **IntvScale::Week** enumeration value, this method returns a string that contains the number of the week."},{"pos":[7483,7490],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7931,7937],"content":"intvNo","linkify":"intvNo","nodes":[{"content":"intvNo","pos":[0,6]}]},{"content":"Calculates the number of intervals between two dates when you divide the time into the specified intervals.","pos":[7938,8045]},{"pos":[8051,8057],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[8121,8131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8135,8144]},{"content":"Description","pos":[8149,8160]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[8265,8276],"source":"input\\_date"},{"content":"A date that indicates the end of the period","pos":[8279,8322]},{"content":"ref<ph id=\"ph1\">\\_</ph>date","pos":[8330,8339],"source":"ref\\_date"},{"content":"A date that indicates the start of the period.","pos":[8344,8390]},{"content":"func","pos":[8395,8399]},{"pos":[8409,8444],"content":"An <bpt id=\"p1\">**</bpt>intvScale<ept id=\"p1\">**</ept> enumeration value.","source":"An **intvScale** enumeration value."},{"pos":[8463,8475],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[8477,8586],"content":"The number of intervals between the dates that are specified by the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>input<ph id=\"ph2\">\\_</ph>date<ept id=\"p2\">*</ept> parameters.","source":"The number of intervals between the dates that are specified by the *ref\\_date* and *input\\_date* parameters."},{"pos":[8592,8599],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9002,9010],"content":"intvNorm","linkify":"intvNorm","nodes":[{"content":"intvNorm","pos":[0,8]}]},{"content":"Returns the normalized date for the period.","pos":[9011,9054]},{"pos":[9060,9066],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[9133,9143],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9147,9156]},{"content":"Description","pos":[9161,9172]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[9393,9404],"source":"input\\_date"},{"pos":[9407,9511],"content":"The end of the period, which must be later than the date that is specified by the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter.","source":"The end of the period, which must be later than the date that is specified by the *ref\\_date* parameter."},{"content":"ref<ph id=\"ph1\">\\_</ph>date","pos":[9516,9525],"source":"ref\\_date"},{"content":"The start of the period.","pos":[9530,9554]},{"content":"func","pos":[9639,9643]},{"pos":[9653,9730],"content":"An <bpt id=\"p1\">**</bpt>intvScale<ept id=\"p1\">**</ept> enumeration value that indicates the interval division unit.","source":"An **intvScale** enumeration value that indicates the interval division unit."},{"pos":[9765,9777],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The normalized date for the period.","pos":[9779,9814]},{"pos":[9820,9827],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9829,9972],"content":"The returned date will equal the date of the first day in the interval in which the date that is specified by the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter exists.","source":"The returned date will equal the date of the first day in the interval in which the date that is specified by the *ref\\_date* parameter exists."},{"pos":[9978,9985],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10105,10108],"content":"pmt","linkify":"pmt","nodes":[{"content":"pmt","pos":[0,3]}]},{"content":"Calculates the amount that must be paid every period to repay a loan.","pos":[10114,10183]},{"pos":[10189,10195],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[10257,10267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10271,10280]},{"content":"Description","pos":[10283,10294]},{"content":"principal","pos":[10451,10460]},{"content":"The amount that was originally borrowed.","pos":[10463,10503]},{"content":"interest","pos":[10541,10549]},{"content":"The interest that is applied each period to the amount that was borrowed.","pos":[10553,10626]},{"content":"life","pos":[10631,10635]},{"content":"The number of periods that the loan is repaid over.","pos":[10643,10694]},{"pos":[10724,10736],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The amount that must be paid every period.","pos":[10738,10780]},{"pos":[10786,10793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">*</bpt>life<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>interest<ept id=\"p2\">*</ept> parameters must be expressed in the same time units.","pos":[10795,10873],"source":"The *life* and *interest* parameters must be expressed in the same time units."},{"content":"The value of the <bpt id=\"p1\">*</bpt>life<ept id=\"p1\">*</ept> parameter must be more than <bpt id=\"p2\">**</bpt>0.0<ept id=\"p2\">**</ept>.","pos":[10874,10934],"source":" The value of the *life* parameter must be more than **0.0**."},{"pos":[10940,10947],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11054,11056],"content":"pt","linkify":"pt","nodes":[{"content":"pt","pos":[0,2]}]},{"content":"Retrieves the sum of a number plus a specified percentage of that number.","pos":[11061,11134]},{"pos":[11140,11146],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[11195,11205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11209,11218]},{"content":"Description","pos":[11222,11233]},{"content":"amount","pos":[11297,11303]},{"content":"The original number.","pos":[11310,11330]},{"content":"percentage","pos":[11341,11351]},{"content":"The percentage supplement.","pos":[11354,11380]},{"pos":[11388,11400],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[11402,11469],"content":"The number that is equal to ((<bpt id=\"p1\">*</bpt>amount <ept id=\"p1\">*</ept>× <bpt id=\"p2\">*</bpt>percentage<ept id=\"p2\">*</ept>) + <bpt id=\"p3\">*</bpt>amount<ept id=\"p3\">*</ept>).","source":"The number that is equal to ((*amount *× *percentage*) + *amount*)."},{"pos":[11475,11482],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11579,11581],"content":"pv","linkify":"pv","nodes":[{"content":"pv","pos":[0,2]}]},{"content":"Calculates the present value of an annuity, where an amount is received over multiple periods and the interest rate is deducted for each period.","pos":[11586,11730]},{"pos":[11736,11742],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[11800,11810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11814,11823]},{"content":"Description","pos":[11826,11837]},{"content":"amount","pos":[12022,12028]},{"content":"The amount that is paid during each period.","pos":[12034,12077]},{"content":"interest","pos":[12126,12134]},{"content":"The interest rate.","pos":[12138,12156]},{"content":"life","pos":[12230,12234]},{"pos":[12242,12329],"content":"The number of times that the value that is specified by the <bpt id=\"p1\">*</bpt>amount<ept id=\"p1\">*</ept> parameter is paid.","source":"The number of times that the value that is specified by the *amount* parameter is paid."},{"pos":[12337,12349],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The current value of an annuity.","pos":[12351,12383]},{"pos":[12389,12396],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12450,12454],"content":"rate","linkify":"rate","nodes":[{"content":"rate","pos":[0,4]}]},{"content":"Calculates the interest that is required for the current investment value to attain the future value over the specified number of periods.","pos":[12455,12593]},{"pos":[12599,12605],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[12680,12690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12694,12703]},{"content":"Description","pos":[12713,12724]},{"content":"<ph id=\"ph1\">\\_</ph>future<ph id=\"ph2\">\\_</ph>value","pos":[12838,12853],"source":"\\_future\\_value"},{"content":"The future value of the investment.","pos":[12857,12892]},{"content":"<ph id=\"ph1\">\\_</ph>current<ph id=\"ph2\">\\_</ph>value","pos":[12910,12926],"source":"\\_current\\_value"},{"content":"The current value of the investment.","pos":[12929,12965]},{"content":"<ph id=\"ph1\">\\_</ph>terms","pos":[12982,12989],"source":"\\_terms"},{"content":"The number of periods that the investment spans.","pos":[13001,13049]},{"pos":[13057,13069],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The calculated interest rate.","pos":[13071,13100]},{"pos":[13106,13113],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13167,13170],"content":"sln","linkify":"sln","nodes":[{"content":"sln","pos":[0,3]}]},{"content":"Retrieves the constant depreciation amount for the specified asset for each depreciation period.","pos":[13176,13272]},{"pos":[13278,13284],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[13339,13349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[13353,13362]},{"content":"Description","pos":[13365,13376]},{"content":"price","pos":[13499,13504]},{"content":"The purchase price of the asset.","pos":[13511,13543]},{"content":"scrap","pos":[13572,13577]},{"content":"The scrap value of the asset.","pos":[13584,13613]},{"content":"life","pos":[13645,13649]},{"content":"The number of periods in the expected life of the asset.","pos":[13657,13713]},{"pos":[13721,13733],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The depreciation amount.","pos":[13735,13759]},{"pos":[13765,13772],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13922,13925],"content":"syd","linkify":"syd","nodes":[{"content":"syd","pos":[0,3]}]},{"content":"Calculates the depreciation of an asset over a specified period.","pos":[13931,13995]},{"pos":[14001,14007],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[14078,14088],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[14092,14101]},{"content":"Description","pos":[14104,14115]},{"content":"<ph id=\"ph1\">\\_</ph>price","pos":[14236,14243],"source":"\\_price"},{"content":"The purchase price of the asset.","pos":[14248,14280]},{"content":"<ph id=\"ph1\">\\_</ph>scrap","pos":[14308,14315],"source":"\\_scrap"},{"content":"The scrap value of the asset.","pos":[14320,14349]},{"content":"<ph id=\"ph1\">\\_</ph>life","pos":[14380,14386],"source":"\\_life"},{"content":"The expected life of the asset (the number of periods).","pos":[14392,14447]},{"content":"<ph id=\"ph1\">\\_</ph>period","pos":[14452,14460],"source":"\\_period"},{"content":"The period to calculate depreciation for.","pos":[14464,14505]},{"pos":[14527,14539],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The amount of depreciation over the specified period.","pos":[14541,14594]},{"pos":[14600,14607],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In contrast to the <bpt id=\"p1\">**</bpt>sln<ept id=\"p1\">**</ept> function, the <bpt id=\"p2\">**</bpt>syd<ept id=\"p2\">**</ept> function can allow for an accelerated depreciation of the asset.","pos":[14609,14722],"source":"In contrast to the **sln** function, the **syd** function can allow for an accelerated depreciation of the asset."},{"content":"As with the <bpt id=\"p1\">**</bpt>ddb<ept id=\"p1\">**</ept> function, this enables higher depreciation during the early periods of the life of an asset.","pos":[14723,14835],"source":" As with the **ddb** function, this enables higher depreciation during the early periods of the life of an asset."},{"pos":[14841,14848],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following examples, the periodic depreciation is calculated for an asset that has a purchase price of 10,000, a scrap value of 2,000, and a life of 5.","pos":[14850,15007]},{"content":"In comparison, <bpt id=\"p1\">**</bpt>sln(10000,2000,5)<ept id=\"p1\">**</ept> would calculate 1600.00 for each period.","pos":[15008,15085],"source":" In comparison, **sln(10000,2000,5)** would calculate 1600.00 for each period."},{"pos":[15499,15503],"content":"term","linkify":"term","nodes":[{"content":"term","pos":[0,4]}]},{"content":"Calculates the number of periods that an investment must run for.","pos":[15504,15569]},{"pos":[15575,15581],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[15649,15659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[15663,15672]},{"content":"Description","pos":[15679,15690]},{"content":"amount","pos":[15815,15821]},{"content":"The amount of the periodic investment.","pos":[15831,15869]},{"content":"interest","pos":[15891,15899]},{"content":"The interest rate for each period.","pos":[15907,15941]},{"content":"future<ph id=\"ph1\">\\_</ph>value","pos":[15967,15980],"source":"future\\_value"},{"content":"The future value that is anticipated for the investment","pos":[15983,16038]},{"pos":[16046,16058],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The number of periods that the investment must run for.","pos":[16060,16115]},{"pos":[16121,16128],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]}],"content":"---\n# required metadata\n\ntitle: X++ business run-time functions\ndescription: This wiki describes the business run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2016-02-04 22 - 11 - 18\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 31281\nms.assetid: 7107cd00-ecb0-46d2-91d6-c342e4314345\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.dyn365.ops.intro: 01-02-2016\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X++ business run-time functions\n\nThis wiki describes the business run-time functions.\n\nThese functions enter financial data and calculate formulas.\n\n## cTerm\nCalculates the number of periods that are required for the current investment value to yield a target value.\n\n### Syntax\n\n    real cTerm(real interest, real future_value, real current_value)\n\n### Parameters\n\n| Parameter      | Description                   |\n|----------------|-------------------------------|\n| interest       | The interest rate.            |\n| future\\_value  | The target value.             |\n| current\\_value | The current investment value. |\n\n### Return value\n\nThe number of periods that are required in order to reach *future\\_value*.\n\n### Remarks\n\nThe *current\\_value* and *future\\_value* parameters must have the same prefixed sign (plus or minus).\n\n### Example\n\n    static void cTermExample(Args _arg)\n    {\n        real r;\n        ;\n        r = cTerm(10.0, 500.00, 100.00);\n        print \"The cTerm is \" + num2Str(r, 2, 2, 1, 1);\n        pause;\n    }\n\nddb\n---\n\nCalculates the accelerated depreciation of an asset.\n\n### Syntax\n\n    real ddb(real price, real scrap, real life, int period)\n\n### Parameters\n\n| Parameter | Description                                                |\n|-----------|------------------------------------------------------------|\n| price     | The purchase price of the asset.                           |\n| scrap     | The residual value of the asset that has been written off. |\n| life      | The expected lifetime of the asset.                        |\n| period    | The period to calculate depreciation over.                 |\n\n### Return value\n\nThe depreciation of the asset.\n\n### Remarks\n\nThe book value for a specific period is equal to the purchase price minus the accumulated depreciation for previous periods:\n\n-   Book value for Period 1 = Price\n-   Book value for Period 2 = Book value for Period 1 – Depreciation for Period 1\n-   Book value for Period n = Book value for Period (n–1) – Depreciation for Period (n–1)\n\nThere are three variations for the calculation of depreciation: If Period &gt; Life:\n\n-   Depreciation = 0\n\nIf (Book value for Period n) – ((Book value for Period n) × 2 ÷ Life) &lt; Residual value:\n\n-   Depreciation = (Book value for Period n) – Residual value\n\nIn all other cases: Depreciation = (Book value for Period n) × 2 ÷ Life The **syd** and **sln** functions also calculate the depreciation of an asset. The **syd** and **ddb** functions enables higher depreciation for the earlier years, whereas **sln** calculates a linear depreciation.\n\n    ddb(12000,2000,10,1); //Returns the value 2400.\n    ddb(12000,2000,10,3); //Returns the value 1536.\n\ndg\n--\n\nCalculates the contribution ratio, which is based on the sales price and the purchase price. If the value of the *sale* parameter is **0.0**, the calculation can't be done.\n\n### Syntax\n\n    real dg(real sale, real purchase)\n\n### Parameters\n\n| Parameter | Description         |\n|-----------|---------------------|\n| sale      | The sale price.     |\n| purchase  | The purchase price. |\n\n### Return value\n\nThe contribution ratio.\n\n### Remarks\n\n    dg(1000,300); //Returns the value 0.7.\n    dg(100,30); //Returns the value 0.7.\n    dg(20000, 11000); //Returns the value 0.45.\n\nfV\n--\n\nCalculates the future value of an investment.\n\n### Syntax\n\n    real fV(real amount, real interest, real life)\n\n### Parameters\n\n| Parameter | Description                                     |\n|-----------|-------------------------------------------------|\n| amount    | The amount that was paid in during each period. |\n| interest  | The interest rate.                              |\n| life      | The number of investment periods.               |\n\n### Return value\n\nThe future value of the investment.\n\n### Remarks\n\n    fV(100,0.14,10); //Returns the value 1933.73.\n    fV(400,0.10,5); //Returns the value 2442.04.\n\nidg\n---\n\nCalculates the sale price, based on the purchase price and the contribution ratio.\n\n    real idg(real purchase, real contribution_ratio)\n\n### Parameters\n\n| Parameter           | Description             |\n|---------------------|-------------------------|\n| purchase            | The purchase price.     |\n| contribution\\_ratio | The contribution ratio. |\n\n### Return value\n\nThe sale price.\n\n### Remarks\n\nIf the contribution ratio is equal to **1.0**, the calculation can't be done. The **idg** function is the inverse of the **dg** function.\n\n    idg(300,0.7); //Returns the value 1000.\n    idg(11000,0.45); //Returns the value 20000.\n\n## intvMax\nRetrieves the number of intervals for the specified period when the period is divided into parts as specified by the *func* parameter.\n\n    int intvMax(date input_date, date ref_date, int func)\n\n### Parameters\n\n| Parameter   | Description                                                                |\n|-------------|----------------------------------------------------------------------------|\n| input\\_date | The end of the period, which must be later than the *ref\\_date* parameter. |\n| ref\\_date   | The start of the period.                                                   |\n| func        | A **IntvScale** system enumeration value that indicates the division unit. |\n\n### Remarks\n\nHere are the possible values for the *func* parameter:\n\n-   None\n-   YearMonthDay\n-   YearMonth\n-   Year\n-   MonthDay\n-   Month\n-   Day\n-   YearQuarter\n-   Quarter\n-   YearWeek\n-   Week\n-   WeekDay\n\n### Example\n\n    static void intvMaxExample()\n    {\n        date refDate = str2Date(\"4/9/2007\", 213);\n        date inputDate = str2Date(\"10/5/2007\", 213);\n        int numberOfIntervals;\n        ;\n        numberOfIntervals = intvMax(inputDate, refDate, intvScale::YearMonth);\n        print numberOfIntervals;\n        pause;\n    }\n\n## intvName\nReturns the name of the interval that is the specified number of intervals ahead of the specified date.\n\n    str intvName(date input_date, int col, enum func)\n\n### Parameters\n\n| Parameter   | Description                                                                                 |\n|-------------|---------------------------------------------------------------------------------------------|\n| input\\_date | A date in the first interval.                                                               |\n| col         | The number of intervals ahead of the date that is specified by the *input\\_date* parameter. |\n| func        | An **intvScale** enumeration value.                                                         |\n\n### Return value\n\nThe name of the interval.\n\n### Remarks\n\nFor example, if the *func* parameter is the **IntvScale::WeekDay** enumeration value, this method returns the name of the weekday. If the *func* parameter is the **IntvScale::Week** enumeration value, this method returns a string that contains the number of the week.\n\n### Example\n\n    static void intvNameExample(Args _args)\n    {\n        date refDate = 2672010;\n        str name;\n        ;\n        name = intvName(refDate, 3,  intvScale::WeekDay);\n        Global::info(strfmt(\"%1 is the output, which indicates the day of the week 3 days after 26\\7\\2010.\", name));\n    }\n    /**** Infolog display.\n    Message (09:56:55 am)\n    Thu is the output, which indicates the day of the week 3 days after 2672010.\n    ****/\n\n## intvNo\nCalculates the number of intervals between two dates when you divide the time into the specified intervals.\n\n### Syntax\n\n    int intvNo(date input_date, date ref_date, int func)\n\n### Parameters\n\n| Parameter   | Description                                    |\n|-------------|------------------------------------------------|\n| input\\_date | A date that indicates the end of the period    |\n| ref\\_date   | A date that indicates the start of the period. |\n| func        | An **intvScale** enumeration value.            |\n\n### Return value\n\nThe number of intervals between the dates that are specified by the *ref\\_date* and *input\\_date* parameters.\n\n### Example\n\n    static void intvNoExample(Args _args)\n    {\n        date inputDate = str2Date(\"1/1/2007\", 213);\n        date refDate = str2Date(\"3/1/2007\", 213);\n        int noOfIntervals;\n        ;\n        noOfIntervals = intvNo(refDate, inputDate, intvScale::Month);\n        print noOfIntervals;\n        pause;\n        //noOfIntervals now holds the difference in months between March and January (2).\n    }\n\n## intvNorm\nReturns the normalized date for the period.\n\n### Syntax\n\n    date intvNorm(date input_date, date ref_date, int func)\n\n### Parameters\n\n| Parameter   | Description                                                                                              |\n|-------------|----------------------------------------------------------------------------------------------------------|\n| input\\_date | The end of the period, which must be later than the date that is specified by the *ref\\_date* parameter. |\n| ref\\_date   | The start of the period.                                                                                 |\n| func        | An **intvScale** enumeration value that indicates the interval division unit.                            |\n\n### Return value\n\nThe normalized date for the period.\n\n### Remarks\n\nThe returned date will equal the date of the first day in the interval in which the date that is specified by the *ref\\_date* parameter exists.\n\n### Example\n\n    static void example()\n    {\n        print intvNorm(today(), today()-1, IntVScale::WeekDay);\n        pause;\n    }\n\npmt\n---\n\nCalculates the amount that must be paid every period to repay a loan.\n\n### Syntax\n\n    real pmt(real principal, real interest, real life)\n\n### Parameters\n\n| Parameter | Description                                                               |\n|-----------|---------------------------------------------------------------------------|\n| principal | The amount that was originally borrowed.                                  |\n| interest  | The interest that is applied each period to the amount that was borrowed. |\n| life      | The number of periods that the loan is repaid over.                       |\n\n### Return value\n\nThe amount that must be paid every period.\n\n### Remarks\n\nThe *life* and *interest* parameters must be expressed in the same time units. The value of the *life* parameter must be more than **0.0**.\n\n### Example\n\n    pmt(4000,0.14,4); //Returns the value 1372.82.\n    pmt(10000,0.10,20); //Returns the value 1174.60.\n\npt\n--\n\nRetrieves the sum of a number plus a specified percentage of that number.\n\n### Syntax\n\n    real pt(real amount, real percentage)\n\n### Parameters\n\n| Parameter  | Description                |\n|------------|----------------------------|\n| amount     | The original number.       |\n| percentage | The percentage supplement. |\n\n### Return value\n\nThe number that is equal to ((*amount *× *percentage*) + *amount*).\n\n### Remarks\n\n    pt(2000.0,0.10); //Returns the value 2200.0.\n    pt(20.0,0.10); //Returns the value 22.0.\n\npv\n--\n\nCalculates the present value of an annuity, where an amount is received over multiple periods and the interest rate is deducted for each period.\n\n### Syntax\n\n    real pv(real amount, real interest, real life)\n\n### Parameters\n\n| Parameter | Description                                                                             |\n|-----------|-----------------------------------------------------------------------------------------|\n| amount    | The amount that is paid during each period.                                             |\n| interest  | The interest rate.                                                                      |\n| life      | The number of times that the value that is specified by the *amount* parameter is paid. |\n\n### Return value\n\nThe current value of an annuity.\n\n### Remarks\n\n    pv(300,0.14,4); //Returns the value 874.11.\n\n## rate\nCalculates the interest that is required for the current investment value to attain the future value over the specified number of periods.\n\n### Syntax\n\n    real rate(real _future_value, real _current_value, real _terms)\n\n### Parameters\n\n| Parameter        | Description                                      |\n|------------------|--------------------------------------------------|\n| \\_future\\_value  | The future value of the investment.              |\n| \\_current\\_value | The current value of the investment.             |\n| \\_terms          | The number of periods that the investment spans. |\n\n### Return value\n\nThe calculated interest rate.\n\n### Remarks\n\n    rate(10000,1000,20); //Returns the value 0.12.\n\nsln\n---\n\nRetrieves the constant depreciation amount for the specified asset for each depreciation period.\n\n### Syntax\n\n    real sln(real price, real scrap, real life)\n\n### Parameters\n\n| Parameter | Description                                              |\n|-----------|----------------------------------------------------------|\n| price     | The purchase price of the asset.                         |\n| scrap     | The scrap value of the asset.                            |\n| life      | The number of periods in the expected life of the asset. |\n\n### Return value\n\nThe depreciation amount.\n\n### Example\n\n    static void slnExample(Args _arg)\n    {\n        real r;\n        ;\n        r = sln(100.00, 50.00, 50.00);\n        print r;\n        pause;\n    }\n\nsyd\n---\n\nCalculates the depreciation of an asset over a specified period.\n\n### Syntax\n\n    real syd(real _price, real _scrap, real _life, int _period)\n\n### Parameters\n\n| Parameter | Description                                             |\n|-----------|---------------------------------------------------------|\n| \\_price   | The purchase price of the asset.                        |\n| \\_scrap   | The scrap value of the asset.                           |\n| \\_life    | The expected life of the asset (the number of periods). |\n| \\_period  | The period to calculate depreciation for.               |\n\n### Return value\n\nThe amount of depreciation over the specified period.\n\n### Remarks\n\nIn contrast to the **sln** function, the **syd** function can allow for an accelerated depreciation of the asset. As with the **ddb** function, this enables higher depreciation during the early periods of the life of an asset.\n\n### Example\n\nIn the following examples, the periodic depreciation is calculated for an asset that has a purchase price of 10,000, a scrap value of 2,000, and a life of 5. In comparison, **sln(10000,2000,5)** would calculate 1600.00 for each period.\n\n    // Returns the value 2666.67 (for the 1st period).\n    syd(10000,2000,5,1);\n    // Returns the value 2133.33 (for the 2nd period).\n    syd(10000,2000,5,2);\n    // Returns the value 1600.00 (for the 3rd period).\n    syd(10000,2000,5,3);\n    // Returns the value 1066.67 (for the 4th period).\n    syd(10000,2000,5,4);\n    // Returns the value 533.33 (for 5th - and final- period).\n    syd(10000,2000,5,5);\n\n## term\nCalculates the number of periods that an investment must run for.\n\n### Syntax\n\n    real term(real amount, real interest, real future_value)\n\n### Parameters\n\n| Parameter     | Description                                             |\n|---------------|---------------------------------------------------------|\n| amount        | The amount of the periodic investment.                  |\n| interest      | The interest rate for each period.                      |\n| future\\_value | The future value that is anticipated for the investment |\n\n### Return value\n\nThe number of periods that the investment must run for.\n\n### Example\n\n    static void termExample(Args _args)\n    {\n        print term(400,0.08,5000);  //returns the value '9.01'.\n        print term(100,0.14,3000);  //returns the value '12.58'.\n        pause;\n    }\n\n"}