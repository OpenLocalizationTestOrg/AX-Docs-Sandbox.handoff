<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="lv-lv">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-188fee3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b78f89c48505556bb32d306aa2f2587b8591dc0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\migration-upgrade\upg101-preparing-for-migration.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">do-not-translate</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25b3897f2a4cdd1246b3bc37af499161945e081b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4dfed24e4383bfaba1908ed83a40f200f38f6126</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Prepare to migrate to Microsoft Dynamics 365 for Operations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this tutorial, we will use the LCS migration service and Visual Studio to migrate you code and metadata from Dynamics AX 2012 R3 to Microsoft Dynamics 365 for Operations.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Prepare to migrate to Microsoft Dynamics 365 for Operations</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You will need access to the environment using Remote Desktop, and be provisioned as an administrator on the instance.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Tutorial goals</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Describe the steps needed to move a Dynamics AX 2012 R3 solution to Dynamics 365 for Operations.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Migrate Microsoft Application Suite examples manually.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Define the requirements to complete migration.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Model split</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The application is split into three packages, or assemblies:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Application Platform</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Application Foundation</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Application Suite</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>ISV AX 2012 R3 solutions will be re-baselined into the correct model.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Auto-migration using LCS Upgrade Service</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A migration service that takes a model store as input, can complete the following tasks:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Convert metadata into the format.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Re-baselines metadata, by moving and merging, into the right model.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Provides an estimation to understand the effort required to upgrade the solution.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Runs migration rules that auto-migrate parts of a solution.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Runs migration rules that inform developers what to manually fix by using TODOs.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Provides a one-box migration-ready VHD with your solution that is deployed into the Microsoft Dynamics 365 for Operations format.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Optional: Automatically checks-in the upgraded solution into TFS online.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Optional: Automatically sets up nightly builds for the TFS online solution.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Manual migration</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>After developers have a one-box migration deployment ready, the application can be compiled by fixing the compilation errors in this order:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Application platform</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Manually fix merge conflicts.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Manually fix model split conflicts.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Manually fix compilation errors.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Application foundation</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Manually fix merge conflicts.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Manually fix model split conflicts.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Manually fix compilation errors.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Application suite</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Manually fix merge conflicts.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Manually fix model split conflicts.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Manually fix compilation errors.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>ISV model</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Manually fix merge conflicts.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Manually fix model split conflicts.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Manually fix compilation errors.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>After you have resolved all of the compilation errors, all assemblies will compile.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Next, ISVs must complete the following tasks:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Address guided code upgrade TODOs and code upgrade-specific best practice warnings.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Replace deprecated controls, for example, ActiveX or find an alternative.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Apply form patterns and sub patterns to all forms.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Create data entities.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Validate that all scenarios work in multiple browsers with different sizes for custom patterns.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Write/run migration tests.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Upload the solution to LCS for certification.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Deploy to customers.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Key concepts</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Lifecycle Service Migration Service</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Lifecycle Services (LCS) is the application lifecycle service to manage deployments.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more info about Lifecycle Services, see <bpt id="p1">[</bpt>http://lcs.dynamics.com<ept id="p1">](http://lcs.dynamics.com/en/)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Application Platform, Application Foundation, and Application Suite</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Microsoft Dynamics 365 for Operations is split into 3 main models: the Application Platform, the Application Foundation, and the Application Suite.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each of these models compile into its own assembly.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This graphic shows a visual breakdown of the application.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>ll</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The models concepts are as follows.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Field</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CustomerDriverLicense This is the foreign key field on the FMRentalEntity.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Related Field</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>DriverLicense This is the unique key on the FMCustomerEntity.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Package, models, namespaces, overlayering, referencing, extensions, and workloads</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A model can contain the following:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>New elements and extensions from an underlying model.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Overlayered elements from an underlying model.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>One or more models are compiled into an assembly.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An assembly, its non-code metadata, and its compiled artifacts form a package.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A package is an independent deployable unit.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, the Application suite module and the Application foundation module are separate assemblies.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A model that contains only new elements, or extensions, or both, should be compiled into its own package.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, the ISV.dll contains new tables, forms, and classes that the ISV added.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A model that contains overlayered elements must be compiled into the same package as the base model.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A model can’t contain overlayered elements from 2 different packages, meaning a model can be compiled into one and only one package <bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: If you are not overlayering, you are developing in your own module.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For example, GLS layer overlaying sys must be compiled every time the sys layer or the code is changed.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Models have implicit layering.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Overlayered artifacts are stored as diffs with individual field level granularity, except for code, at higher layers.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For code, string diffs are stored at higher layers.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Code within a module can “reference” only “publicized” contracts in other modules.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Publicized contracts should be kept backward compatible.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Example:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>JJISV code in a separate module can refer to only publicized contracts in Microsoft namespaces.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Microsoft patches don’t break publicized contracts.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>JJISV does need not to be compiled when Microsoft module is patched.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A collection of packages forms a workload</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Diagram</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>mm</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Machine setup</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This tutorial will walk you through configuring your one-box developer deployment and provide information about important migration settings.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the Best Practice framework, there is a subset of Best Practice warnings that need to be resolved to complete migration.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In Visual Studio, click <bpt id="p1">**</bpt>Dynamics 365 <ph id="ph1">&amp;gt;</ph> Options <ph id="ph2">&amp;gt;</ph> Best Practices<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Model<ept id="p1">**</ept> drop-down menu, select <bpt id="p2">**</bpt>Application Suite<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>During the migration phase, these rules should be set to “ON” when migrating your ISV solution.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The setting is driven by an XML file in the AxRuleSet folder.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example, see the Application Suite xml file, BPRules.xml, located under C:<ph id="ph1">\\</ph>Packages<ph id="ph2">\\</ph>ApplicationSuite<ph id="ph3">\\</ph>Foundation<ph id="ph4">\\</ph>AxRuleSet.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>![oo] The LCS upgrade service will automatically add this XML file to your model.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To complete the migration, you need to fix all migration-specific Best Practice rules.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The errors will show up in the error list as warnings.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In the error list, you will see compiler warnings and best practice errors.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Best Practice errors are prefixed with the text <bpt id="p1">**</bpt>BP<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>BPErrorFormControlPatternUnspecified<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important:<ept id="p1">**</ept> After migration, remove this file as all Best Practice rules should be run during regular development.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Running BP rules per model<ept id="p1">**</ept> Running BP rules per model is an important migration scenario, which means you should understand all required migration BPs for your model.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To only run the Best Practice tool, run it from the command line.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Both xppc.exe and xppbp.exe are in the C:<ph id="ph1">\\</ph>Packages<ph id="ph2">\\</ph>bin directory.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The command to run BP rules on a model, for example the Application Suite, is: C:<ph id="ph1">\\</ph>Packages<ph id="ph2">\\</ph>bin<ph id="ph3">\\</ph>xppbp.exe –m=C:<ph id="ph4">\\</ph>Packages –me=Foundation –mu=ApplicationSuite -all.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Project setup</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Start Visual Studio, and on the toolbar, click <bpt id="p1">**</bpt>Microsoft Dynamics<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Options<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Expand the <bpt id="p1">**</bpt>Microsoft Dynamics<ept id="p1">**</ept> node, and then click <bpt id="p2">**</bpt>Projects<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Verify that the <bpt id="p1">**</bpt>Organize projects by element type<ept id="p1">**</ept> check box is selected, and click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To view the line numbers in your code editor, select <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Options<ept id="p2">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p3">**</bpt>Text<ept id="p3">**</ept> <bpt id="p4">**</bpt>Editor<ept id="p4">**</ept> <ph id="ph3">&amp;gt;</ph> <bpt id="p5">**</bpt>All Languages<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Line numbers<ept id="p1">**</ept> check box.![qq]</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Create a <bpt id="p1">**</bpt>Microsoft Dynamics Project<ept id="p1">**</ept> template project, and name it <bpt id="p2">**</bpt>Migration<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Verify that the project is in the <bpt id="p1">**</bpt>Application Suite<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Right-click the project, and select <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Model<ept id="p1">**</ept> property, select <bpt id="p2">**</bpt>Application Suite<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>Company<ept id="p1">**</ept> property to <bpt id="p2">**</bpt>USMF<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Your settings should resemble the following screenshot.![rr]</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Debugging</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>By default, Dynamics 365 for Operations optimizes the debugging experience for the files that you are working on.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>As a result, when you step into a file (F11) that is not in your project, the PDBs are not loaded and you can’t debug the code.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>To work around this, change the project debugging setting by clicking <bpt id="p1">**</bpt>Dynamics 365 <ept id="p1">**</ept><ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Options<ept id="p2">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p3">**</bpt>Debugging<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Verify that the <bpt id="p1">**</bpt>Load symbols only for items in the solution<ept id="p1">**</ept> check box is not selected.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Another debugging setting that you may want to turn off is Intellitrace.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Intellitrace collects the complete execution history of an application.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>It creates a lot of noise in the IDE when debugging.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To turn off Intellitrace, click <bpt id="p1">**</bpt>Options<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>IntelliTrace<ept id="p2">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p3">**</bpt>Enable IntelliTrace<ept id="p3">**</ept>, clear the check box, and then click <bpt id="p4">**</bpt>OK<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Note that Intellitrace is only available in the Ultimate version of Visual Studio.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>![tt]</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Address code migration tasks</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>When metadata is migrated to Dynamics 365 for Operations, multiple auto-upgrade scripts are run.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In the case where developers need to complete manual migration tasks, TO DOs and Best Practices (BP) have been added.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>TO DOs are prefixed with <bpt id="p1">*</bpt><ph id="ph1">/</ph><ph id="ph2">\*</ph> TODO: (Code Upgrade)<ept id="p1">*</ept>, and need to be be fixed as a part of code migration.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>BP migration specific rules also need to be fixed as part of code migration.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This tutorial uses the <bpt id="p1">**</bpt>PurchCommitment<ph id="ph1">\_</ph>PSN<ept id="p1">**</ept> form to walk you through the migration task of fixing navigation.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Specifically, you will see examples of duplicate buttons and Action Pane TODOs.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Setup</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>In Visual Studio, open <bpt id="p1">**</bpt>Application Explorer<ept id="p1">**</ept>, and search for the form, PurchCommitment<ph id="ph1">\_</ph>PSN.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Right-click the project and select <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>In the Model property, select <bpt id="p1">**</bpt>Application Suite<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In the Company property, select FRSI.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Note: The form is located in the French demo data company FRSI.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>Ctrl+F5 to<ept id="p1">**</ept> see the form.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>While the form looks complete, there are still code migration tasks necessary to be migration-complete.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>![i]</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Navigation migration tasks</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In Visual Studio, build the project, and then on the toolbar, click <bpt id="p1">**</bpt>View<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Task List<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Comments<ept id="p1">**</ept> drop-down list to view the TO DO: (Code Upgrade) tasks.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In the list, find the ActionPane TODOs.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>![j]</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Code upgrade rule - Action Pane</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In Dynamics 365 for Operations, the following core actions are provided as system-defined buttons:</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>New</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Delete</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Edit</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Export</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>As part of the auto-migration, the Action Pane rule is run to identify redundant buttons.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>To complete this part of migration, you need to manually:</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Remove or move the code.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Delete redundant controls in the application code.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: In this tutorial, we will provide examples of how to migrate and modify the code on modeled buttons that replicate system-defined buttons.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>However, in practice, before making changes similar to those made in this tutorial, the code must first be evaluated with respect to the scenario to determine if it is still needed.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>First, fix the TODO for the DeleteCmdButton, which duplicates the system-defined Delete button.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>In Visual Studio, find the TODO shown below, and then double-click the TODO.![k]</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Replace the TODO and the line of code as shown below.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The state of the system-defined <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> button is controlled by the AllowDelete property on the firstmaster datasource.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>By setting AllowDelete to false, the delete task is kept from executing when the keyboard shortcut is used.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>In the editor, find and remove DeleteCmdButton from the form design.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>![l]</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>Ctrl+S to<ept id="p1">**</ept> save the form.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Next, we will focus on the EditCmdButton that duplicates the system Edit button, handing the two TODOs associated with this button as well as removing this button.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>In Visual Studio, find the TODO shown below, and then double-clickthe TODO.![m]</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Because the visibility of the <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> button is controlled by the View/Edit mode of the form, you will need to modify this code so it sets that property.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Replace the TODO and the line of code as shown in the following graphic.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Double-click the other TODO for this button.![n]</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Inspect the code on the modeled <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>This logic will need to be moved to the form’s task() method.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>On the left side of the Visual Studio designer, right-click <bpt id="p1">**</bpt>Methods<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Override<ept id="p2">**</ept>, and select <bpt id="p3">**</bpt>Task<ept id="p3">**</ept>, to add an override for the form’s Task method.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Update the task method as shown below so that the code from above is triggered when the system-defined <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> button is clicked.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>In the Editor, find and remove the <bpt id="p1">**</bpt>EditCmdButton<ept id="p1">**</ept> from the form design.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>![o]</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>Ctrl+S<ept id="p1">**</ept> to save the form.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>Ctrl+F5<ept id="p1">**</ept> to view the form.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Notice the <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Edit<ept id="p2">**</ept> buttons in the <bpt id="p3">**</bpt>Commitment<ept id="p3">**</ept> tab have been removed.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Best Practice migration warnings</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Application Explorer<ept id="p1">**</ept>, search for <bpt id="p2">**</bpt>CosLineTree<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Add the <bpt id="p1">**</bpt>CosLineTree<ept id="p1">**</ept> form and <bpt id="p2">**</bpt>CosLineTree<ept id="p2">**</ept> display menu item to the project.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Right-click the display menu item, and select <bpt id="p1">**</bpt>Set as Startup Object<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Rebuild the project.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Go to the Error List to view the warnings.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>In the BP filter, enter the word, <bpt id="p1">*</bpt>mouse<ept id="p1">*</ept>, to view the mouse related BP warnings.![p]</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Double-click the warning to open the code editor.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>Ctrl+F5<ept id="p1">**</ept> to start the form.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Set a <bpt id="p1">**</bpt>breakpoint<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>mouseDblClick<ept id="p2">**</ept> method.![q]</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>In Visual Studio, attach to the client process by clicking <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Attach to Process<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Locate <bpt id="p1">**</bpt>w3wp.exe<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Verify that you have selected the <bpt id="p1">**</bpt>Show process from all users<ept id="p1">**</ept> check box, or you might not see the w3wp.exe process.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Verify that you only have <bpt id="p1">**</bpt>Managed (v4.5, v4.0)<ept id="p1">**</ept> selected in the <bpt id="p2">**</bpt>Attach to<ept id="p2">**</ept> field.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Attach<ept id="p1">**</ept>, and then double-click the form grid.![s]</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Notice the breakpoint is <bpt id="p1">**</bpt>not<ept id="p1">**</ept> hit (as mouseDblClick is no longer supported).</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Close the client.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>In this case, we need to add a button to the form and add the code to the click() method on the button.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Go to the form designer and find the tab page, <bpt id="p1">**</bpt>TabPage<ph id="ph1">\_</ph>Ledger.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>Tabpage<ept id="p1">**</ept> to add a new Action Pane.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Verify that this is above the grid.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Right-click the Action Pane to add a new ButtonGroup.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Right-click othe <bpt id="p1">**</bpt>ButtonGroup<ept id="p1">**</ept> and add a new button.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The metadata should look like the following example.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>![t]</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>FormButtonControl1 (Button)<ept id="p1">**</ept>, and then press <bpt id="p2">**</bpt>F4<ept id="p2">**</ept> to open the button properties.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Change the property text to <bpt id="p1">**</bpt>Ledger Move<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>FormButtonControl1 (Button)<ept id="p1">**</ept>, right-click the <bpt id="p2">**</bpt>Methods<ept id="p2">**</ept> node, and add a Clicked() method.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>FormButtonControl1 (Button)<ept id="p1">**</ept>, right-click the <bpt id="p2">**</bpt>Methods<ept id="p2">**</ept> node, and select <bpt id="p3">**</bpt>View Code<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Verify that the double-click code is migrated to the method.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>When you run the form, the code is now migrated.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> As part of migration, you should delete the mouseDblClick code because it has been migrated.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>In this example the form is not migrated, so there are still runtime issues.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Resolve casting exceptions</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>In Dynamics 365 for Operations, X++ is completely IL based and therefore has a stricter runtime type behavior than the interpreted Dynamics AX2 012.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>This stricter runtime type behavior can generate exceptions in migrated Dynamics AX 2012 R3 metadata.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>It is likely you will encounter these exceptions during your migration.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The casting exceptions can be raised in different runtime scenarios, such as down-casting, casting runtime to design time objects, and side-casting.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>In this tutorial, we will walk through an example where a form, CosJournalName, is generating controls at runtime, and has a type mismatch which causes a .NET exception because it is strongly typed.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Example: Side-casting exception</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>In Visual Studio, select and right-click <bpt id="p1">**</bpt>Project Properties<ept id="p1">**</ept>, and verify that USMF is the default company.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Add the display menu item CosJournalName to your project, and set the menu item as your StartUp object.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Add the CosJournalName form to your project.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Add the cosDimCheckBoxController class to your project.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Rebuild your project.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>Ctrl+F5<ept id="p1">**</ept> to run the form.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Note that you will get an exception, similar to the following, when running the form.![u]</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Right-click the class, cosDimCheckBoxController, and then select <bpt id="p1">**</bpt>View Code<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Set a breakpoint on the cosDimCheckBoxController::getBuildControl().</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>F5<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The breakpoint will be hit.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>This is where the casting error occurs.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The reason for the casting error is because we are trying to return a control of type: FormBuildCheckboxControl and the object is expecting FormBuildStringControl.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Hover over the buildcontrol to see the type and notice the differences.![v]</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Press <bpt id="p1">**</bpt>F10<ept id="p1">**</ept> to hit the exception.![w]</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Stop debugging.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>To fix the exception, change the method declaration from FormBuildStringControl to FormBuildCheckBoxControl.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Rebuild the project, and press <bpt id="p1">**</bpt>Ctrl+F5<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The form should open successfully because the casting error is resolved.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>a</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Context menu (advanced tutorial)</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>In Dynamics AX 2012, right-click context menus were modified by using the PopupMenu class.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>This class relied on Windows APIs that were not available on the web.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>In Dynamics 365 for Operations, the ContextMenu APIs have been created as replacements to provide similar functionality.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The context() and showContextMenu() method overrides were the previous entry points to modifying context menus for specific controls, and these overrides traditionally contained code for adding options to a context menu as well as processing the user’s selection using a wait model.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>In Dynamics 365 for Operations, these overrides are being removed and the wait model eliminated.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The result is that your will need to create two overrides: getContextMenuOptions() to add options to the context menu, and selectedMenuOption() to process the user’s selection.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Migrating context menus in Dynamics 365 for Operations is a manual effort.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Steps for context menu migration:</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Add macros for each menu option added to the context menu.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Build the new context menu using the new <bpt id="p1">*</bpt>getContextMenuOptions()<ept id="p1">*</ept> override and the ContextMenu APIs.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Process the user’s selection using the new <bpt id="p1">*</bpt>selectedMenuOption()<ept id="p1">*</ept> override.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Form: SysDateLookup</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>In this example we will walk through the steps to migrate the context menu on a date control in the SysDateLookup form.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The old context menu code currently has no effect in Dynamics 365 for Operations.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>To see the current context menu:</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Add the SysDateLookup form to a project and set it as the startup object.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Start without debugging (<bpt id="p1">**</bpt>Ctrl+F5<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Right-click the date field.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>b</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>This context menu is meant to contain options for switching to the previous month and the next month.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>To start the migration process, first inspect the existing code for adding options to the context menu and for processing the user’s selection.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>SysDateLookup<ept id="p1">**</ept> form.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Search for the <bpt id="p1">**</bpt>MontViewer<ept id="p1">**</ept> control on the design node and expand the <bpt id="p2">**</bpt>Methods<ept id="p2">**</ept> node.![c]</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Right-click the context override and click <bpt id="p1">**</bpt>View code<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>We will be migrating this code as well as the code in <bpt id="p1">**</bpt>monthViewerContextCommon<ept id="p1">**</ept> (which you can view by right-clicking the method name and clicking <bpt id="p2">**</bpt>Go To Definition<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Go back to the designer for <bpt id="p1">**</bpt>SysDateLookup<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Right-click <bpt id="p1">**</bpt>Methods<ept id="p1">**</ept> under the <bpt id="p2">**</bpt>MontViewer<ept id="p2">**</ept> control and add an override for <bpt id="p3">*</bpt>getContextMenuOptions()<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>This is where the context menu will be constructed.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>We will modify the code in this override later.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Move to the <bpt id="p1">*</bpt>monthViewerContextCommon()<ept id="p1">*</ept> method.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>This function adds two options to the context menu and then processes the user’s selection.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Find the menu options that are added to the context menu (choicePrev and choiceNext in this case), and add macros for each of these options at the top of the form.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Add a method just under <bpt id="p1">*</bpt>monthViewerContextCommon()<ept id="p1">*</ept> called <bpt id="p2">*</bpt>monthViewerGetContextMenuOptions().<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>This will contain the migrated code from <bpt id="p1">*</bpt>monthViewerContextCommon()<ept id="p1">*</ept> for adding the two context menu options.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Add these two options to the context menu using the new APIs in the <bpt id="p1">*</bpt>monthViewerGetContextMenuOptions()<ept id="p1">*</ept> method.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The portion of <bpt id="p1">*</bpt>monthViewerContextCommon()<ept id="p1">*</ept> that needs to be migrated into <bpt id="p2">*</bpt>monthViewerGetContextMenuOptions()<ept id="p2">*</ept> is shown below.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The migration of adding these two context menu options is shown below.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Modify <bpt id="p1">*</bpt>getContextMenuOptions()<ept id="p1">*</ept> as shown.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Because system context menus in Dynamics 365 for Operationsonly include commands specific to a control, there is no need (or ability) to suppress the system context menu.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Go back to the designer for <bpt id="p1">**</bpt>SysDateLookup<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Right-click <bpt id="p1">**</bpt>Methods<ept id="p1">**</ept> under the <bpt id="p2">**</bpt>MontViewer<ept id="p2">**</ept> control and add an override for <bpt id="p3">*</bpt>selectedMenuOption()<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>This is where the user’s selection will be processed.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>We will add code to this override later in the tutorial.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Add a method just under <bpt id="p1">*</bpt>monthViewerGetContextMenuOptions()<ept id="p1">*</ept> called <bpt id="p2">*</bpt>monthViewerSelectedOption().<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>This will contain the migrated code from <bpt id="p1">*</bpt>monthViewerContextCommon()<ept id="p1">*</ept> for processing the user’s selection.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Move code to the <bpt id="p1">*</bpt>monthViewerSelectedOption()<ept id="p1">*</ept> override (generally the switch statement after the old call to draw()).</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Be sure to modify the variables to match your macro definitions.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Modify <bpt id="p1">*</bpt>selectedMenuOption()<ept id="p1">*</ept> as shown below.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Delete the context() override from the MontViewer control.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Typically you would be able to delete the <bpt id="p1">*</bpt>monthViewerContextCommon()<ept id="p1">*</ept> method.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>However, on this form there is another control <bpt id="p1">**</bpt>arabicMontViewer<ept id="p1">**</ept> with a context menu override (that we did not migrate in this tutorial) that calls this method.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>You can either leave the method, or migrate the context menu code on that button and then delete the method.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Ctrl+F5<ept id="p1">**</ept> to start the form without debugging.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Notice the new options added to the bottom of the context menu.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![</ph>d<ph id="ph2">](media/d2-1024x417.png)</ph></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>