{"content":"---\n# required metadata\n\ntitle: F Classes - FormBuildButtonControl to FormBuildFastTabSummarySeparator\ndescription: System API classes that start with the letter F.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 58741\nms.assetid: 9af62525-aa36-4d6f-b138-c9002a4b21e2\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# F Classes - FormBuildButtonControl to FormBuildFastTabSummarySeparator\n\n[!include[banner](../includes/banner.md)]\n\n\nSystem API classes that start with the letter F.\n\nClass FormBuildButtonControl\n----------------------------\n\n    class FormBuildButtonControl extends FormBuildControl\n\nThe FormBuildButtonControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public int acquireFocus(\\[int value\\])                                                                      |                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public boolean autoRefreshData(\\[boolean value\\])                                                           |                                                                                                                                         |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                           |\n| public boolean big(\\[boolean value\\])                                                                       |                                                                                                                                         |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                     |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                |\n| public int buttonDisplay(\\[int value\\])                                                                     | Gets or sets the appearance of the button control.                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public boolean defaultButton(\\[boolean value\\])                                                             | Determines whether the button should be the default button on the form.                                                                 |\n| public str disabledImage(\\[str value\\])                                                                     | Gets or sets the disabled image of the button.                                                                                          |\n| public int disabledImageLocation(\\[int value\\])                                                             |                                                                                                                                         |\n| public int disabledResource(\\[int value\\])                                                                  | Gets or sets the resource ID of the image to use as the disabled button image.                                                          |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                               |\n| public boolean forcedToOverflow(\\[boolean value\\])                                                          |                                                                                                                                         |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                     |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public int imageLocation(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                         |\n| public str keyTip(\\[str value\\])                                                                            |                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int multiSelect(\\[int value\\])                                                                       |                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int needsRecord(\\[int value\\])                                                                       |                                                                                                                                         |\n| public str normalImage(\\[str value\\])                                                                       |                                                                                                                                         |\n| public int normalResource(\\[int value\\])                                                                    |                                                                                                                                         |\n| public boolean primary(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public boolean saveRecord(\\[boolean value\\])                                                                |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public int shortkey(\\[int value\\])                                                                          |                                                                                                                                         |\n| public boolean showShortCut(\\[boolean value\\])                                                              |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                         |\n| public int toggleButton(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int toggleValue(\\[int value\\])                                                                       |                                                                                                                                         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                     |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean value(\\[boolean value\\])                                                                     |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method acquireFocus\n\n    public int acquireFocus([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoRefreshData\n\n    public boolean autoRefreshData([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method big\n\n    public boolean big([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method buttonDisplay\n\nGets or sets the appearance of the button control.\n\n    public int buttonDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and five, inclusive.\n\n#### Remarks\n\nThe value of the property defines whether the text, the image, or both should be displayed on the button. This property also controls relative positions of text and image if both are displayed. The integer value that is returned contains the appearance of the button control as follows:\n\n| Value. | Description.                                                     |\n|--------|------------------------------------------------------------------|\n| 0      | Text only.                                                       |\n| 1      | Image Only.                                                      |\n| 2      | Text and image; the image is displayed below the text.           |\n| 3      | Text and image; the image is displayed above the text.           |\n| 4      | Text and image; the image is displayed to the left of the text.  |\n| 5      | Text and image; the image is displayed to the right of the text. |\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of Microsoft Windows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Microsoft Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Microsoft Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method defaultButton\n\nDetermines whether the button should be the default button on the form.\n\n    public boolean defaultButton([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the button should be the default button; otherwise, false.\n\n### Method disabledImage\n\nGets or sets the disabled image of the button.\n\n    public str disabledImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe full name of an image file. The system supports all of the GDI-supported image formats.\n\n#### Remarks\n\nThis property has precedence over the disabledResource property . It is used if both of these properties are set.\n\n### Method disabledImageLocation\n\n    public int disabledImageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledResource\n\nGets or sets the resource ID of the image to use as the disabled button image.\n\n    public int disabledResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe resource ID of the image to use as the disabled button image. Both icon and bitmap images are supported.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method forcedToOverflow\n\n    public boolean forcedToOverflow([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method multiSelect\n\n    public int multiSelect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method needsRecord\n\n    public int needsRecord([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method primary\n\n    public boolean primary([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method saveRecord\n\n    public boolean saveRecord([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method shortkey\n\n    public int shortkey([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showShortCut\n\n    public boolean showShortCut([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toggleButton\n\n    public int toggleButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toggleValue\n\n    public int toggleValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method value\n\n    public boolean value([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildButtonGroupControl\n    class FormBuildButtonGroupControl extends FormBuildControl\n\nThe FormBuildButtonGroupControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignChild(\\[boolean value\\])                                                                |                                                                                                                                         |\n| public boolean alignChildren(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public int allowUserSetup(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int arrangeGuide(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int arrangeMethod(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int arrangeWhen(\\[int value\\])                                                                       |                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                          |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                     |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                   |                                                                                                                                         |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                         |                                                                                                                                         |\n| public int bottomMarginValue(\\[int value\\])                                                                 |                                                                                                                                         |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                 |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                     |                                                                                                                                         |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                        |                                                                                                                                         |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                         |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                          |                                                                                                                                         |\n| public int columnspaceValue(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int columnsValue(\\[int value\\])                                                                      |                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                       |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                               |\n| public int framePosition(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int frameType(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                               |                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                         |\n| public str keyTip(\\[str value\\])                                                                            |                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                     |                                                                                                                                         |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                           |                                                                                                                                         |\n| public int leftMarginValue(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                         | Moves a specified control to the control.                                                                                               |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                         |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                          |                                                                                                                                         |\n| public int rightMarginValue(\\[int value\\])                                                                  |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean sizeHeight(\\[boolean value\\])                                                                |                                                                                                                                         |\n| public boolean sizeWidth(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                            |                                                                                                                                         |\n| public int topMarginValue(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                     |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean useUserLayout(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of Microsoft Windows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Microsoft Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Microsoft Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method framePosition\n\n    public int framePosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method frameType\n\n    public int frameType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\nMoves a specified control to the control.\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n1 if the control was moved successfully; otherwise, 0.\n\n#### Remarks\n\nIn general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed. However, in some cases, such as for the reference group control instance, controls cannot be moved.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sizeHeight\n\n    public boolean sizeHeight([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sizeWidth\n\n    public boolean sizeWidth([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildButtonSeparatorControl\n    class FormBuildButtonSeparatorControl extends FormBuildControl\n\nThe FormBuildButtonSeparatorControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                   |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                      |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                            |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                           |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                     |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                               |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                               |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                             |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                           |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                       |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                       |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                      |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                               |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                              |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                                  |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                               |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                               |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                               |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                               |\n| public boolean skip(\\[boolean value\\])                                                                      |                                                                                                                                               |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                               |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                               |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                               |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                               |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                               |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                               |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                               |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                               |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                               |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                        |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                        |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                               |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildCheckBoxControl\n    class FormBuildCheckBoxControl extends FormBuildControl\n\nThe FormBuildCheckBoxControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                           |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that is used by the control or the form.                                                                     |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean drawFocusRect(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                     |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public boolean optionalRecordControl(\\[boolean value\\])                                                     |                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int value(\\[int value\\])                                                                             |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that is used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to use.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method drawFocusRect\n\n    public boolean drawFocusRect([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method optionalRecordControl\n\n    public boolean optionalRecordControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method value\n\n    public int value([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildComboBoxControl\n    class FormBuildComboBoxControl extends FormBuildControl\n\nThe FormBuildComboBoxControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                   |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                      |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                           |\n| public boolean appendNew(\\[boolean value\\])                                                                 |                                                                                                                                               |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                               |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                            |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                             |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                                   |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                      |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                               |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                   |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                 |\n| public int comboType(\\[int value\\])                                                                         |                                                                                                                                               |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                           |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                     |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                               |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                               |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                               |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                               |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                               |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                      |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                               |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                               |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                               |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                             |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                           |\n| public EnumId enumType(\\[EnumId value\\])                                                                    |                                                                                                                                               |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                               |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                               |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                     |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                     |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                           |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                       |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                       |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                      |\n| public boolean hideFirstEntry(\\[boolean value\\])                                                            |                                                                                                                                               |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                               |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                              |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                                  |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                               |\n| public int item(\\[int value\\])                                                                              |                                                                                                                                               |\n| public int items(\\[int value\\])                                                                             |                                                                                                                                               |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                         |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                               |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                               |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                               |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                               |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                               |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                               |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                               |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                               |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                               |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                               |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                               |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                               |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                               |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                               |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                               |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                               |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                               |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                               |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                               |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                               |\n| public int selection(\\[int value\\])                                                                         |                                                                                                                                               |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                               |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.               |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                               |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                               |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                               |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                               |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                           |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                               |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                               |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                               |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                               |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                               |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                               |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                        |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                        |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                               |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method appendNew\n\n    public boolean appendNew([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method comboType\n\n    public int comboType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method enumType\n\n    public EnumId enumType([EnumId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialogue box. The help text must not exceed 250 characters.\n\n### Method hideFirstEntry\n\n    public boolean hideFirstEntry([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method item\n\n    public int item([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method items\n\n    public int items([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method selection\n\n    public int selection([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildCommandButtonControl\n    class FormBuildCommandButtonControl extends FormBuildControl\n\nThe FormBuildCommandButtonControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public boolean autoRefreshData(\\[boolean value\\])                                                           |                                                                                                                                         |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                          |\n| public boolean big(\\[boolean value\\])                                                                       |                                                                                                                                         |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                     |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                |\n| public int buttonDisplay(\\[int value\\])                                                                     | Gets or sets the appearance of the button control.                                                                                      |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                 |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public int command(\\[int value\\])                                                                           |                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public boolean defaultButton(\\[boolean value\\])                                                             | Determines whether the button should be the default button on the form.                                                                 |\n| public str disabledImage(\\[str value\\])                                                                     | Gets or sets the disabled image of the button.                                                                                          |\n| public int disabledImageLocation(\\[int value\\])                                                             |                                                                                                                                         |\n| public int disabledResource(\\[int value\\])                                                                  | Gets or sets the resource ID of the image to use as the disabled button image.                                                          |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                               |\n| public boolean forcedToOverflow(\\[boolean value\\])                                                          |                                                                                                                                         |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                     |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public int imageLocation(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                         |\n| public str keyTip(\\[str value\\])                                                                            |                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int multiSelect(\\[int value\\])                                                                       |                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int needsRecord(\\[int value\\])                                                                       |                                                                                                                                         |\n| public str normalImage(\\[str value\\])                                                                       |                                                                                                                                         |\n| public int normalResource(\\[int value\\])                                                                    |                                                                                                                                         |\n| public str parameters(\\[str value\\])                                                                        |                                                                                                                                         |\n| public boolean primary(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public boolean saveRecord(\\[boolean value\\])                                                                |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public int shortkey(\\[int value\\])                                                                          |                                                                                                                                         |\n| public boolean showShortCut(\\[boolean value\\])                                                              |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                         |\n| public int toggleButton(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int toggleValue(\\[int value\\])                                                                       |                                                                                                                                         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                     |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean value(\\[boolean value\\])                                                                     |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoRefreshData\n\n    public boolean autoRefreshData([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method big\n\n    public boolean big([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method buttonDisplay\n\nGets or sets the appearance of the button control.\n\n    public int buttonDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and five, inclusive.\n\n#### Remarks\n\nThe value of the property defines whether the text, the image, or both should be displayed on the button. This property also controls relative positions of text and image if both are displayed.The integer value that is returned contains the appearace of the button control as follows:\n\n| Value. | Description.                                                     |\n|--------|------------------------------------------------------------------|\n| 0      | Text only.                                                       |\n| 1      | Image Only.                                                      |\n| 2      | Text and image; the image is displayed below the text.           |\n| 3      | Text and image; the image is displayed above the text.           |\n| 4      | Text and image; the image is displayed to the left of the text.  |\n| 5      | Text and image; the image is displayed to the right of the text. |\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of Microsoft Windows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Microsoft Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Microsoft Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method command\n\n    public int command([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method defaultButton\n\nDetermines whether the button should be the default button on the form.\n\n    public boolean defaultButton([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the button should be the default button; otherwise, false.\n\n### Method disabledImage\n\nGets or sets the disabled image of the button.\n\n    public str disabledImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe full name of an image file. The system supports all of the GDI-supported image formats.\n\n#### Remarks\n\nThis property has precedence over the disabledResource property. It is used if both of these properties are set.\n\n### Method disabledImageLocation\n\n    public int disabledImageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledResource\n\nGets or sets the resource ID of the image to use as the disabled button image.\n\n    public int disabledResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe resource ID of the image to use as the disabled button image. Both icon and bitmap images are supported.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method forcedToOverflow\n\n    public boolean forcedToOverflow([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method multiSelect\n\n    public int multiSelect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method needsRecord\n\n    public int needsRecord([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method parameters\n\n    public str parameters([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method primary\n\n    public boolean primary([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method saveRecord\n\n    public boolean saveRecord([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method shortkey\n\n    public int shortkey([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showShortCut\n\n    public boolean showShortCut([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toggleButton\n\n    public int toggleButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toggleValue\n\n    public int toggleValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method value\n\n    public boolean value([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildContainerControl\n    class FormBuildContainerControl extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description |\n|-------------------------------------------------------------------------------------------------------------|-------------|\n| public boolean alignControl(\\[boolean value\\])                                                              |             |\n| public boolean allowEdit(\\[boolean value\\])                                                                 |             |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           |             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    |             |\n| public int containerId()                                                                                    |             |\n| public str countryRegionCodes(\\[str value\\])                                                                |             |\n| public str dataRelationPath(\\[str value\\])                                                                  |             |\n| public int displayTarget(\\[int value\\])                                                                     |             |\n| public int dragDrop(\\[int value\\])                                                                          |             |\n| public boolean enabled(\\[boolean value\\])                                                                   |             |\n| public int height(int value, \\[int mode\\])                                                                  |             |\n| public int heightMode(\\[int value\\])                                                                        |             |\n| public int heightValue(\\[int value\\])                                                                       |             |\n| public str helpText(\\[str value\\])                                                                          |             |\n| public str hierarchyParent(\\[str value\\])                                                                   |             |\n| public int id()                                                                                             |             |\n| public boolean isContainer()                                                                                |             |\n| public int left(int value, \\[int mode\\])                                                                    |             |\n| public int leftMode(\\[int value\\])                                                                          |             |\n| public int leftValue(\\[int value\\])                                                                         |             |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                         |             |\n| public str name(\\[str value\\])                                                                              |             |\n| public int neededPermission(\\[int value\\])                                                                  |             |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |             |\n| public boolean skip(\\[boolean value\\])                                                                      |             |\n| public int top(int value, \\[int mode\\])                                                                     |             |\n| public int topMode(\\[int value\\])                                                                           |             |\n| public int topValue(\\[int value\\])                                                                          |             |\n| public int type(\\[int value\\])                                                                              |             |\n| public int userData(\\[int value\\])                                                                          |             |\n| public int userDataItem(\\[int value\\])                                                                      |             |\n| public int userDataItems(\\[int value\\])                                                                     |             |\n| public boolean useUserLayout(\\[boolean value\\])                                                             |             |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |             |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |             |\n| public int verticalSpacingValue(\\[int value\\])                                                              |             |\n| public boolean visible(\\[boolean value\\])                                                                   |             |\n| public int width(int value, \\[int mode\\])                                                                   |             |\n| public int widthMode(\\[int value\\])                                                                         |             |\n| public int widthValue(\\[int value\\])                                                                        |             |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |             |\n\n### Method alignControl\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method containerId\n\n    public int containerId()\n\n#### Return Value\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enabled\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method heightMode\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method helpText\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\n    public int id()\n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n### Method name\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method widthMode\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildControl\n    class FormBuildControl extends Object\n\nThe FormBuildControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                    | Description                                                                                                                                        |\n|-------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| public FormBuildControl addControl(FormControlType controlType, str controlName, \\[FormBuildControl insertAfter\\], \\[boolean pushFront\\]) | Adds a control to the control, based on the specified control type.                                                                                |\n| public FormBuildControl addControlEx(str controlClass, str controlName, \\[FormBuildControl insertAfter\\], \\[boolean pushFront\\])          |                                                                                                                                                    |\n| public FormBuildControl addDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                                               | Adds a control to the control, based on the specified data field information.                                                                      |\n| public boolean allowEdit(\\[boolean value\\])                                                                                               |                                                                                                                                                    |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                                         |                                                                                                                                                    |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                                                     | Retrieves a value that indicates whether the specified data field can be added as a child control to the control.                                  |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                                                  |                                                                                                                                                    |\n| public int containerId()                                                                                                                  | Retrieves the ID of the parent container for the control.                                                                                          |\n| public int controlCount()                                                                                                                 | Retrieves the number of controls that are contained in the control.                                                                                |\n| public FormBuildControl controlNum(int controlNo)                                                                                         | Retrieves a contained control by using the specified index.                                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                                              |                                                                                                                                                    |\n| public boolean editAutoPostback(\\[boolean value\\])                                                                                        |                                                                                                                                                    |\n| public boolean enabled(\\[boolean value\\])                                                                                                 |                                                                                                                                                    |\n| public str helpText(\\[str value\\])                                                                                                        |                                                                                                                                                    |\n| public str extendedStyle(\\[str value\\])                                                                                                   |                                                                                                                                                    |\n| public int height(int value, \\[int mode\\])                                                                                                |                                                                                                                                                    |\n| public int heightMode(\\[int value\\])                                                                                                      |                                                                                                                                                    |\n| public int heightValue(\\[int value\\])                                                                                                     |                                                                                                                                                    |\n| public str GetXppILImplementation()                                                                                                       |                                                                                                                                                    |\n| public boolean hasUserSetting()                                                                                                           | Indicates whether the control has custom user settings.                                                                                            |\n| public int id()                                                                                                                           | Retrieves the ID of the control.                                                                                                                   |\n| public boolean isContainer()                                                                                                              | Retrieves a value that indicates whether the control is a container control.                                                                       |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                                           | Marks or unmarks the control as a user-added control.                                                                                              |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                                              | Moves a specified control to the control.                                                                                                          |\n| public str name(\\[str value\\])                                                                                                            |                                                                                                                                                    |\n| public int neededPermission(\\[int value\\])                                                                                                |                                                                                                                                                    |\n| public container SysObsoleteAttribute()                                                                                                   |                                                                                                                                                    |\n| public str previewPartRef(\\[str value\\])                                                                                                  |                                                                                                                                                    |\n| public boolean skip(\\[boolean value\\])                                                                                                    |                                                                                                                                                    |\n| public boolean SysObsoleteAttribute(container data)                                                                                       |                                                                                                                                                    |\n| public int userDisable(\\[int value\\])                                                                                                     | Gets or sets the value that indicates whether the control is disabled for the user.                                                                |\n| public int userHeight(\\[int value\\])                                                                                                      | Gets or sets the custom user height for the control.                                                                                               |\n| public int userHide(\\[int value\\])                                                                                                        | Gets or sets the value that indicates whether the control is hidden from the user.                                                                 |\n| public int userOrgContainer(\\[int value\\])                                                                                                | Gets or sets the organization container for the control.                                                                                           |\n| public int userOrgSibling(\\[int value\\])                                                                                                  | Gets or sets the organization sibling for the control.                                                                                             |\n| public str userPromptText(\\[str value\\])                                                                                                  | Gets or sets the user label text for the control.                                                                                                  |\n| public int userSecurityLevel(\\[int value\\])                                                                                               | Gets or sets the user security level for the control.                                                                                              |\n| public int userSkip(\\[int value\\])                                                                                                        | Sets or returns the value that indicates whether the form control is skipped when the user press the TAB key to navigate the controls on the form. |\n| public int userWidth(\\[int value\\])                                                                                                       | Sets or returns the width of the control in pixels.                                                                                                |\n| public boolean visible(\\[boolean value\\])                                                                                                 |                                                                                                                                                    |\n| public int width(int value, \\[int mode\\])                                                                                                 |                                                                                                                                                    |\n| public int widthMode(\\[int value\\])                                                                                                       |                                                                                                                                                    |\n| public int widthValue(\\[int value\\])                                                                                                      |                                                                                                                                                    |\n| public void RegisterXppILImplementation(str className)                                                                                    |                                                                                                                                                    |\n| public void new(FormContainer container)                                                                                                  |                                                                                                                                                    |\n| public void resetUserSetting()                                                                                                            | Resets the user settings for the control.                                                                                                          |\n\n### Method addControl\n\nAdds a control to the control, based on the specified control type.\n\n    public FormBuildControl addControl(FormControlType controlType, str controlName, [FormBuildControl insertAfter], [boolean pushFront])\n\n#### Parameters\n\ncontrolType  \nThe string value to set the name of the new control to.\n\n<!-- -->\n\ncontrolName  \nThe string value to set the name of the new control to.\n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\npushFront  \n\n#### Return Value\n\nA FormBuildControl object that represents the newly added control.\n\n### Method addControlEx\n\n    public FormBuildControl addControlEx(str controlClass, str controlName, [FormBuildControl insertAfter], [boolean pushFront])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\npushFront  \n\n#### Return Value\n\n### Method addDataField\n\nAdds a control to the control, based on the specified data field information.\n\n    public FormBuildControl addDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \nAn integer value that indicates the index of the data field type; optional.\n\n<!-- -->\n\nfieldId  \nAn integer value that indicates the index of the data field type; optional.\n\n<!-- -->\n\narrayIndex  \nAn integer value that indicates the index of the data field type; optional.\n\n#### Return Value\n\nA FormBuildControl object that represents the newly added control.\n\n#### Remarks\n\nThe type of control that should be added is determined automatically, based on the specified data field information. The arrayIndex parameter has a default value of 1 when a value is not specified, so that the first index is assumed.\n\n### Method allowEdit\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method canAddDataField\n\nRetrieves a value that indicates whether the specified data field can be added as a child control to the control.\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \nAn integer value that indicates the index of the data field type; optional.\n\n<!-- -->\n\nfieldId  \nAn integer value that indicates the index of the data field type; optional.\n\n<!-- -->\n\narrayIndex  \nAn integer value that indicates the index of the data field type; optional.\n\n#### Return Value\n\nA Boolean value that indicates whether the specified data field can be added as a child control to the control.\n\n### Method configurationKey\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method controlCount\n\nRetrieves the number of controls that are contained in the control.\n\n    public int controlCount()\n\n#### Return Value\n\nAn integer value that indicates the number of controls that are contained in the control if it is a container control; otherwise, 0.\n\n### Method controlNum\n\nRetrieves a contained control by using the specified index.\n\n    public FormBuildControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \nAn integer value that indicates the index of the child control to retrieve.\n\n#### Return Value\n\nA FormBuildControl object that represents the child control that has the specified index if this is a container control; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n#### Remarks\n\nIf the specified controlNo parameter is out of range, an exception is raised.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method editAutoPostback\n\n    public boolean editAutoPostback([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enabled\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method helpText\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extendedStyle\n\n    public str extendedStyle([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method heightMode\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method GetXppILImplementation\n\n    public str GetXppILImplementation()\n\n#### Return Value\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\nA Boolean value that indicates whether the control has custom user settings.\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether to mark the control as a user-added control.\n\n#### Return Value\n\nA Boolean value that indicates whether the control was marked as a user-added control.\n\n### Method moveControl\n\nMoves a specified control to the control.\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \nAn integer value that indicates the ID of the control to insert the control after; optional.\n\n<!-- -->\n\ninsertAfterId  \nAn integer value that indicates the ID of the control to insert the control after; optional.\n\n#### Return Value\n\n1 if the control was moved successfully; otherwise, 0.\n\n#### Remarks\n\nIn general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed. However, in some cases, such as for the reference group control instance, controls cannot be moved.\n\n### Method name\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or right-clicking another control when the original control is hidden. The right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user press the TAB key to navigate the controls on the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, it is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method widthMode\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method RegisterXppILImplementation\n\n    public void RegisterXppILImplementation(str className)\n\n#### Parameters\n\nclassName  \n\n### Method new\n\n    public void new(FormContainer container)\n\n#### Parameters\n\ncontainer  \n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n## Class FormBuildDataSource\n    class FormBuildDataSource extends FormBuildObjectSet\n\nThe FormBuildDataSource class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                            | Description                                                                                                               |\n|-----------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| public FormBuildDataSource addReferenceDataSource(str name, \\[str joinRelation\\]) |                                                                                                                           |\n| public boolean allowCheck(\\[boolean value\\])                                      |                                                                                                                           |\n| public boolean allowCreate(\\[boolean value\\])                                     |                                                                                                                           |\n| public boolean allowDeferredLoad(\\[boolean value\\])                               |                                                                                                                           |\n| public boolean allowDelete(\\[boolean value\\])                                     |                                                                                                                           |\n| public boolean allowEdit(\\[boolean value\\])                                       | Determines whether the user can change the contents of the control.                                                       |\n| public boolean autoNotify(\\[boolean value\\])                                      |                                                                                                                           |\n| public boolean autoQuery(\\[boolean value\\])                                       |                                                                                                                           |\n| public boolean autoSearch(\\[boolean value\\])                                      |                                                                                                                           |\n| public FormBuildDataSource baseDataSource()                                       |                                                                                                                           |\n| public str company(\\[str value\\])                                                 |                                                                                                                           |\n| public FieldId counterField(\\[FieldId value\\])                                    |                                                                                                                           |\n| public boolean crossCompanyAutoQuery(\\[boolean value\\])                           |                                                                                                                           |\n| public boolean delayActive(\\[boolean value\\])                                     |                                                                                                                           |\n| public int extends(\\[AnyType value\\])                                             |                                                                                                                           |\n| public str GetXppILImplementation()                                               |                                                                                                                           |\n| public IndexId index(\\[IndexId value\\])                                           |                                                                                                                           |\n| public boolean insertAtEnd(\\[boolean value\\])                                     |                                                                                                                           |\n| public boolean insertIfEmpty(\\[boolean value\\])                                   |                                                                                                                           |\n| public boolean isBaseDataSource()                                                 |                                                                                                                           |\n| public boolean isInheritanceDataSource()                                          |                                                                                                                           |\n| public boolean isMasterDataSource()                                               |                                                                                                                           |\n| public str joinRelation(\\[str value\\])                                            |                                                                                                                           |\n| public int joinSource(\\[AnyType value\\])                                          |                                                                                                                           |\n| public int linkType(\\[int value\\])                                                |                                                                                                                           |\n| public FormBuildDataSource masterDataSource()                                     |                                                                                                                           |\n| public int maxAccessRight(\\[int value\\])                                          |                                                                                                                           |\n| public int maxRecordsToLoad(\\[int value\\])                                        |                                                                                                                           |\n| public str name(\\[str value\\])                                                    | Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object. |\n| public boolean onlyFetchActive(\\[boolean value\\])                                 |                                                                                                                           |\n| public int optionalRecordMode(\\[int value\\])                                      |                                                                                                                           |\n| public int startPosition(\\[int value\\])                                           |                                                                                                                           |\n| public TableId table(\\[TableId value\\])                                           | Gets or sets the table ID associated with the object.                                                                     |\n| public int validTimeStateAutoQuery(\\[int value\\])                                 |                                                                                                                           |\n| public int validTimeStateUpdate(\\[int value\\])                                    |                                                                                                                           |\n| public void RegisterXppDataFieldILImplementation(str fieldName, str className)    |                                                                                                                           |\n| public void RegisterXppILImplementation(str className)                            |                                                                                                                           |\n| public void SetDataLinkType(QueryDataLinkType linkType, str parentDataSource)     |                                                                                                                           |\n\n### Method addReferenceDataSource\n\n    public FormBuildDataSource addReferenceDataSource(str name, [str joinRelation])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\njoinRelation  \n\n#### Return Value\n\n### Method allowCheck\n\n    public boolean allowCheck([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowCreate\n\n    public boolean allowCreate([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowDeferredLoad\n\n    public boolean allowDeferredLoad([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowDelete\n\n    public boolean allowDelete([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoNotify\n\n    public boolean autoNotify([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoQuery\n\n    public boolean autoQuery([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoSearch\n\n    public boolean autoSearch([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method baseDataSource\n\n    public FormBuildDataSource baseDataSource()\n\n#### Return Value\n\n### Method company\n\n    public str company([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method counterField\n\n    public FieldId counterField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method crossCompanyAutoQuery\n\n    public boolean crossCompanyAutoQuery([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delayActive\n\n    public boolean delayActive([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extends\n\n    public int extends([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method GetXppILImplementation\n\n    public str GetXppILImplementation()\n\n#### Return Value\n\n### Method index\n\n    public IndexId index([IndexId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method insertAtEnd\n\n    public boolean insertAtEnd([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method insertIfEmpty\n\n    public boolean insertIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isBaseDataSource\n\n    public boolean isBaseDataSource()\n\n#### Return Value\n\n### Method isInheritanceDataSource\n\n    public boolean isInheritanceDataSource()\n\n#### Return Value\n\n### Method isMasterDataSource\n\n    public boolean isMasterDataSource()\n\n#### Return Value\n\n### Method joinRelation\n\n    public str joinRelation([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method joinSource\n\n    public int joinSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method linkType\n\n    public int linkType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method masterDataSource\n\n    public FormBuildDataSource masterDataSource()\n\n#### Return Value\n\n### Method maxAccessRight\n\n    public int maxAccessRight([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method maxRecordsToLoad\n\n    public int maxRecordsToLoad([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method onlyFetchActive\n\n    public boolean onlyFetchActive([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method optionalRecordMode\n\n    public int optionalRecordMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method startPosition\n\n    public int startPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method validTimeStateAutoQuery\n\n    public int validTimeStateAutoQuery([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method validTimeStateUpdate\n\n    public int validTimeStateUpdate([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method RegisterXppDataFieldILImplementation\n\n    public void RegisterXppDataFieldILImplementation(str fieldName, str className)\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\nclassName  \n\n### Method RegisterXppILImplementation\n\n    public void RegisterXppILImplementation(str className)\n\n#### Parameters\n\nclassName  \n\n### Method SetDataLinkType\n\n    public void SetDataLinkType(QueryDataLinkType linkType, str parentDataSource)\n\n#### Parameters\n\nlinkType  \n\n<!-- -->\n\nparentDataSource  \n\n## Class FormBuildDateControl\n    class FormBuildDateControl extends FormBuildControl\n\nThe FormBuildDateControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                   |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                      |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                               |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                           |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                               |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                            |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                             |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                                 |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that was used to output text in the control.                                                                  |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                      |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                               |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                   |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                 |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                           |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                     |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                               |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                               |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                               |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                               |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                               |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                      |\n| public int dateDay(\\[int value\\])                                                                           |                                                                                                                                               |\n| public int dateFormat(\\[int value\\])                                                                        |                                                                                                                                               |\n| public int dateMonth(\\[int value\\])                                                                         |                                                                                                                                               |\n| public int dateSeparator(\\[int value\\])                                                                     |                                                                                                                                               |\n| public Date dateValue(\\[Date value\\])                                                                       |                                                                                                                                               |\n| public int dateYear(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                               |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                               |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                               |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                               |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                               |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                               |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                               |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                             |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                           |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                               |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                               |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                     |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                     |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                           |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                       |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                       |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                      |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                               |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                              |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                               |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                                  |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                               |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                         |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                               |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                               |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                               |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                               |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                               |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                               |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                               |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                               |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                               |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                               |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                               |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                               |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                               |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                               |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                               |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                               |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                               |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                               |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                               |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                               |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                               |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                               |\n| public str maxDateLabel(\\[str value\\])                                                                      |                                                                                                                                               |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                               |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                               |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                               |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                               |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                               |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                               |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                               |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.               |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                               |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                               |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                               |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                               |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                           |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                               |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                               |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                               |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                               |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                               |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                               |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                               |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                               |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                        |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                        |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                               |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that was used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of Microsoft Windows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Microsoft Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Microsoft Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method dateDay\n\n    public int dateDay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateFormat\n\n    public int dateFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateMonth\n\n    public int dateMonth([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateSeparator\n\n    public int dateSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateValue\n\n    public Date dateValue([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateYear\n\n    public int dateYear([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method maxDateLabel\n\n    public str maxDateLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildDateTimeControl\n    class FormBuildDateTimeControl extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                               |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                  |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                           |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                       |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                             |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                  |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                 |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                           |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                           |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                           |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                           |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                  |\n| public int dateDay(\\[int value\\])                                                                           |                                                                                                                                           |\n| public int dateFormat(\\[int value\\])                                                                        |                                                                                                                                           |\n| public int dateMonth(\\[int value\\])                                                                         |                                                                                                                                           |\n| public int dateSeparator(\\[int value\\])                                                                     |                                                                                                                                           |\n| public DateTime dateTimeValue(\\[DateTime value\\])                                                           |                                                                                                                                           |\n| public int dateYear(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int displayOption(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                       |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                           |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                           |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                 |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                       |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                   |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                   |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                  |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                           |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                          |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                              |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                           |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                     |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                           |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                           |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                           |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                           |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                           |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                           |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                           |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                           |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public str maxDateLabel(\\[str value\\])                                                                      |                                                                                                                                           |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                           |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public boolean skip(\\[boolean value\\])                                                                      |                                                                                                                                           |\n| public int timeFormat(\\[int value\\])                                                                        |                                                                                                                                           |\n| public int timeHours(\\[int value\\])                                                                         |                                                                                                                                           |\n| public int timeMinute(\\[int value\\])                                                                        |                                                                                                                                           |\n| public int timeSeconds(\\[int value\\])                                                                       |                                                                                                                                           |\n| public int timeSeparator(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int timeZoneIndicator(\\[int value\\])                                                                 |                                                                                                                                           |\n| public int timezonePreference(\\[int value\\])                                                                |                                                                                                                                           |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                           |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                           |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                           |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                           |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                    |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                    |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                           |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method dateDay\n\n    public int dateDay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateFormat\n\n    public int dateFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateMonth\n\n    public int dateMonth([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateSeparator\n\n    public int dateSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateTimeValue\n\n    public DateTime dateTimeValue([DateTime value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateYear\n\n    public int dateYear([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayOption\n\n    public int displayOption([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method maxDateLabel\n\n    public str maxDateLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumerations, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeFormat\n\n    public int timeFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeHours\n\n    public int timeHours([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeMinute\n\n    public int timeMinute([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeSeconds\n\n    public int timeSeconds([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeSeparator\n\n    public int timeSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeZoneIndicator\n\n    public int timeZoneIndicator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timezonePreference\n\n    public int timezonePreference([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildDesign\n    class FormBuildDesign extends Object\n\nThe FormBuildDesign class modifies a form design.\n\n### Remarks\n\nThis class lets you create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                          | Description                                                                 |\n|---------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|\n| public Object addControl(FormControlType controlType, str controlName, \\[FormBuildControl insertAfter\\], \\[boolean pushFront\\]) |                                                                             |\n| public Object addControlEx(str controlClass, str controlName, \\[FormBuildControl insertAfter\\], \\[boolean pushFront\\])          |                                                                             |\n| public boolean alignChild(\\[boolean value\\])                                                                                    |                                                                             |\n| public boolean alignChildren(\\[boolean value\\])                                                                                 |                                                                             |\n| public boolean allowDocking(\\[boolean value\\])                                                                                  |                                                                             |\n| public boolean allowFormCompanyChange(\\[boolean value\\])                                                                        |                                                                             |\n| public boolean allowImplicitParent(\\[boolean value\\])                                                                           |                                                                             |\n| public int allowUserSetup(\\[int value\\])                                                                                        |                                                                             |\n| public boolean alwaysOnTop(\\[boolean value\\])                                                                                   |                                                                             |\n| public int arrangeGuide(\\[int value\\])                                                                                          |                                                                             |\n| public int arrangeMethod(\\[int value\\])                                                                                         |                                                                             |\n| public int arrangeWhen(\\[int value\\])                                                                                           |                                                                             |\n| public int backgroundColor(\\[int value\\])                                                                                       | Gets or sets the background color of the control.                           |\n| public int bold(\\[int value\\])                                                                                                  | Gets or sets the weight of font that is used to output text in the control. |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                                       |                                                                             |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                                             |                                                                             |\n| public int bottomMarginValue(\\[int value\\])                                                                                     |                                                                             |\n| public str caption(\\[str value\\])                                                                                               | Gets or set the caption of the control.                                     |\n| public int characterSet(\\[int value\\])                                                                                          | Gets or sets the character set of the font.                                 |\n| public int colorScheme(\\[int value\\])                                                                                           | Gets or sets the color scheme of the control.                               |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                                         |                                                                             |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                                            |                                                                             |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                                        |                                                                             |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                                              |                                                                             |\n| public int columnspaceValue(\\[int value\\])                                                                                      |                                                                             |\n| public int columnsValue(\\[int value\\])                                                                                          |                                                                             |\n| public Object control(AnyType control)                                                                                          |                                                                             |\n| public int controlCount()                                                                                                       |                                                                             |\n| public FormBuildControl controlNum(int controlNo)                                                                               |                                                                             |\n| public str cssClass(\\[str value\\])                                                                                              |                                                                             |\n| public int dataSource(\\[AnyType value\\])                                                                                        | Gets or sets a data source that should be used by the control or the form.  |\n| public str defaultAction(\\[str value\\])                                                                                         |                                                                             |\n| public str font(\\[str value\\])                                                                                                  | Gets or sets the name of the font for the control to use.                   |\n| public int fontSize(\\[int value\\])                                                                                              | Gets or sets the size of the font for the control to use.                   |\n| public int frame(\\[int value\\])                                                                                                 |                                                                             |\n| public int height(int value, \\[int mode\\])                                                                                      | Gets or sets the height of the control.                                     |\n| public int heightMode(\\[int value\\])                                                                                            | Gets or sets a calculation mode for the height of the control.              |\n| public int heightValue(\\[int value\\])                                                                                           | Gets or sets the height of the control.                                     |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                                   |                                                                             |\n| public boolean hideToolbar(\\[boolean value\\])                                                                                   |                                                                             |\n| public int imagemode(\\[int value\\])                                                                                             |                                                                             |\n| public str imageName(\\[str value\\])                                                                                             |                                                                             |\n| public int imageResource(\\[int value\\])                                                                                         |                                                                             |\n| public boolean italic(\\[boolean value\\])                                                                                        |                                                                             |\n| public int labelBold(\\[int value\\])                                                                                             |                                                                             |\n| public int labelCharacterSet(\\[int value\\])                                                                                     |                                                                             |\n| public str labelFont(\\[str value\\])                                                                                             |                                                                             |\n| public int labelFontSize(\\[int value\\])                                                                                         |                                                                             |\n| public boolean labelItalic(\\[boolean value\\])                                                                                   |                                                                             |\n| public boolean labelUnderline(\\[boolean value\\])                                                                                |                                                                             |\n| public int left(int value, \\[int mode\\])                                                                                        |                                                                             |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                                         |                                                                             |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                                               |                                                                             |\n| public int leftMarginValue(\\[int value\\])                                                                                       |                                                                             |\n| public int leftMode(\\[int value\\])                                                                                              |                                                                             |\n| public int leftValue(\\[int value\\])                                                                                             |                                                                             |\n| public str localWebMenu(\\[str value\\])                                                                                          |                                                                             |\n| public boolean maximizeBox(\\[boolean value\\])                                                                                   |                                                                             |\n| public boolean minimizeBox(\\[boolean value\\])                                                                                   |                                                                             |\n| public int mode(\\[int value\\])                                                                                                  |                                                                             |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                                             |                                                                             |\n| public str newRecordAction(\\[str value\\])                                                                                       |                                                                             |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                                        |                                                                             |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                                              |                                                                             |\n| public int rightMarginValue(\\[int value\\])                                                                                      |                                                                             |\n| public boolean saveSize(\\[boolean value\\])                                                                                      |                                                                             |\n| public int scrollbars(\\[int value\\])                                                                                            |                                                                             |\n| public boolean setCompany(\\[boolean value\\])                                                                                    |                                                                             |\n| public int showDeleteButton(\\[int value\\])                                                                                      |                                                                             |\n| public int showNewButton(\\[int value\\])                                                                                         |                                                                             |\n| public int showWebHelp(\\[int value\\])                                                                                           |                                                                             |\n| public int statusBarStyle(\\[int value\\])                                                                                        |                                                                             |\n| public int style(\\[int value\\])                                                                                                 |                                                                             |\n| public int submitMethod(\\[int value\\])                                                                                          |                                                                             |\n| public boolean supportReload(\\[boolean value\\])                                                                                 |                                                                             |\n| public int titleDatasource(\\[AnyType value\\])                                                                                   |                                                                             |\n| public int top(int value, \\[int mode\\])                                                                                         |                                                                             |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                                          |                                                                             |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                                                |                                                                             |\n| public int topMarginValue(\\[int value\\])                                                                                        |                                                                             |\n| public int topMode(\\[int value\\])                                                                                               |                                                                             |\n| public int topValue(\\[int value\\])                                                                                              |                                                                             |\n| public boolean underline(\\[boolean value\\])                                                                                     |                                                                             |\n| public int useCaptionFromMenuItem(\\[int value\\])                                                                                |                                                                             |\n| public int viewEditMode(\\[int value\\])                                                                                          |                                                                             |\n| public boolean visible(\\[boolean value\\])                                                                                       |                                                                             |\n| public int width(int value, \\[int mode\\])                                                                                       | Gets or sets the width of the control.                                      |\n| public int widthMode(\\[int value\\])                                                                                             | Gets or sets the calculation mode of the width of the control.              |\n| public int widthValue(\\[int value\\])                                                                                            | Gets or sets the width of the control.                                      |\n| public int windowResize(\\[int value\\])                                                                                          |                                                                             |\n| public int windowType(\\[int value\\])                                                                                            |                                                                             |\n| public int workflowDatasource(\\[AnyType value\\])                                                                                |                                                                             |\n| public boolean workflowEnabled(\\[boolean value\\])                                                                               |                                                                             |\n| public str workflowType(\\[str value\\])                                                                                          |                                                                             |\n| public int dialogSize(\\[int value\\])                                                                                            |                                                                             |\n\n### Method addControl\n\n    public Object addControl(FormControlType controlType, str controlName, [FormBuildControl insertAfter], [boolean pushFront])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\npushFront  \n\n#### Return Value\n\n### Method addControlEx\n\n    public Object addControlEx(str controlClass, str controlName, [FormBuildControl insertAfter], [boolean pushFront])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\npushFront  \n\n#### Return Value\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowDocking\n\n    public boolean allowDocking([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowFormCompanyChange\n\n    public boolean allowFormCompanyChange([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowImplicitParent\n\n    public boolean allowImplicitParent([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alwaysOnTop\n\n    public boolean alwaysOnTop([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method control\n\n    public Object control(AnyType control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormBuildControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that should be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method defaultAction\n\n    public str defaultAction([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method frame\n\n    public int frame([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hideToolbar\n\n    public boolean hideToolbar([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imagemode\n\n    public int imagemode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageName\n\n    public str imageName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageResource\n\n    public int imageResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method localWebMenu\n\n    public str localWebMenu([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method maximizeBox\n\n    public boolean maximizeBox([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method minimizeBox\n\n    public boolean minimizeBox([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mode\n\n    public int mode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n### Method newRecordAction\n\n    public str newRecordAction([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method saveSize\n\n    public boolean saveSize([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method scrollbars\n\n    public int scrollbars([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setCompany\n\n    public boolean setCompany([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showDeleteButton\n\n    public int showDeleteButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showNewButton\n\n    public int showNewButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showWebHelp\n\n    public int showWebHelp([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method statusBarStyle\n\n    public int statusBarStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method submitMethod\n\n    public int submitMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method supportReload\n\n    public boolean supportReload([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method titleDatasource\n\n    public int titleDatasource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useCaptionFromMenuItem\n\n    public int useCaptionFromMenuItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method windowResize\n\n    public int windowResize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method windowType\n\n    public int windowType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method workflowDatasource\n\n    public int workflowDatasource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method workflowEnabled\n\n    public boolean workflowEnabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method workflowType\n\n    public str workflowType([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dialogSize\n\n    public int dialogSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n## Class FormBuildDropDialogButtonControl\n    class FormBuildDropDialogButtonControl extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                               |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                  |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                           |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                       |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public boolean autoRefreshData(\\[boolean value\\])                                                           |                                                                                                                                           |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                             |\n| public boolean big(\\[boolean value\\])                                                                       |                                                                                                                                           |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                  |\n| public int buttonDisplay(\\[int value\\])                                                                     | Gets or sets the appearance of the button control.                                                                                        |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                   |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                 |\n| public int copyCallerQuery(\\[int value\\])                                                                   |                                                                                                                                           |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                           |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                           |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                  |\n| public boolean defaultButton(\\[boolean value\\])                                                             | Determines whether the button should be the default button on the form.                                                                   |\n| public str disabledImage(\\[str value\\])                                                                     | Gets or sets the disabled image of the button.                                                                                            |\n| public int disabledImageLocation(\\[int value\\])                                                             |                                                                                                                                           |\n| public int disabledResource(\\[int value\\])                                                                  | Gets or sets the resource ID of the image to use as the disabled button image.                                                            |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                       |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                 |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                 |\n| public boolean forcedToOverflow(\\[boolean value\\])                                                          |                                                                                                                                           |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                       |\n| public int formViewOption(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                   |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                   |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                  |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                           |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                          |\n| public int imageLocation(\\[int value\\])                                                                     |                                                                                                                                           |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                              |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                           |\n| public str keyTip(\\[str value\\])                                                                            |                                                                                                                                           |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                           |\n| public str menuItemName(\\[str value\\])                                                                      |                                                                                                                                           |\n| public int multiSelect(\\[int value\\])                                                                       |                                                                                                                                           |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                           |\n| public int needsRecord(\\[int value\\])                                                                       |                                                                                                                                           |\n| public str normalImage(\\[str value\\])                                                                       |                                                                                                                                           |\n| public int normalResource(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int openMode(\\[int value\\])                                                                          |                                                                                                                                           |\n| public str parameters(\\[str value\\])                                                                        | Gets or sets the list of parameters that are passed to objects that are run by the MenuFunction class.                                    |\n| public boolean primary(\\[boolean value\\])                                                                   |                                                                                                                                           |\n| public boolean saveRecord(\\[boolean value\\])                                                                |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                           |\n| public boolean sendExternalContext(\\[boolean value\\])                                                       |                                                                                                                                           |\n| public int shortkey(\\[int value\\])                                                                          |                                                                                                                                           |\n| public boolean showShortCut(\\[boolean value\\])                                                              |                                                                                                                                           |\n| public boolean skip(\\[boolean value\\])                                                                      |                                                                                                                                           |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                           |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                           |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                           |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                           |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                           |\n| public boolean value(\\[boolean value\\])                                                                     |                                                                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                           |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                           |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                    |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                    |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                           |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoRefreshData\n\n    public boolean autoRefreshData([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method big\n\n    public boolean big([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method buttonDisplay\n\nGets or sets the appearance of the button control.\n\n    public int buttonDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and five, inclusive.\n\n#### Remarks\n\nThe value of the property defines whether the text, the image, or both should be displayed on the button. This property also controls relative positions of text and image if both are displayed. The integer value that is returned contains the appearance of the button control as follows:\n\n| Value. | Description.                                                     |\n|--------|------------------------------------------------------------------|\n| 0      | Text only.                                                       |\n| 1      | Image Only.                                                      |\n| 2      | Text and image; the image is displayed below the text.           |\n| 3      | Text and image; the image is displayed above the text.           |\n| 4      | Text and image; the image is displayed to the left of the text.  |\n| 5      | Text and image; the image is displayed to the right of the text. |\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of Microsoft Windows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Microsoft Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Microsoft Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method copyCallerQuery\n\n    public int copyCallerQuery([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method defaultButton\n\nDetermines whether the button should be the default button on the form.\n\n    public boolean defaultButton([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the button should be the default button; otherwise, false.\n\n### Method disabledImage\n\nGets or sets the disabled image of the button.\n\n    public str disabledImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe full name of an image file. The system supports all of the GDI-supported image formats.\n\n#### Remarks\n\nThis property has precedence over the disabledResourceproperty . It is used if both of these properties are set.\n\n### Method disabledImageLocation\n\n    public int disabledImageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledResource\n\nGets or sets the resource ID of the image to use as the disabled button image.\n\n    public int disabledResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe resource ID of the image to use as the disabled button image. Both icon and bitmap images are supported.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property enables controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method forcedToOverflow\n\n    public boolean forcedToOverflow([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method formViewOption\n\n    public int formViewOption([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method multiSelect\n\n    public int multiSelect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumerations, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method needsRecord\n\n    public int needsRecord([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method openMode\n\n    public int openMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method parameters\n\nGets or sets the list of parameters that are passed to objects that are run by the MenuFunction class.\n\n    public str parameters([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe list of parameters that are passed to the object.\n\n#### Remarks\n\nThe parameters string format is Parameter1=Value1, Parameter2=Value2, and so on. If ignore is passed, unrecognized parameters.\n\n### Method primary\n\n    public boolean primary([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method saveRecord\n\n    public boolean saveRecord([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sendExternalContext\n\n    public boolean sendExternalContext([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method shortkey\n\n    public int shortkey([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showShortCut\n\n    public boolean showShortCut([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method value\n\n    public boolean value([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildFastTabHeaderControl\n    class FormBuildFastTabHeaderControl extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                               |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignChild(\\[boolean value\\])                                                                |                                                                                                                                           |\n| public boolean alignChildren(\\[boolean value\\])                                                             |                                                                                                                                           |\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                  |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                       |\n| public int allowUserSetup(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int arrangeGuide(\\[int value\\])                                                                      |                                                                                                                                           |\n| public int arrangeMethod(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int arrangeWhen(\\[int value\\])                                                                       |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                            |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                       |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                   |                                                                                                                                           |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                         |                                                                                                                                           |\n| public int bottomMarginValue(\\[int value\\])                                                                 |                                                                                                                                           |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                   |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                             |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                     |                                                                                                                                           |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                        |                                                                                                                                           |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                           |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                          |                                                                                                                                           |\n| public int columnspaceValue(\\[int value\\])                                                                  |                                                                                                                                           |\n| public int columnsValue(\\[int value\\])                                                                      |                                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                 |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                           |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                           |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                       |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                 |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                   |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                   |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                  |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                               |                                                                                                                                           |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                           |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                          |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                              |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                           |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                           |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                     |                                                                                                                                           |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                           |                                                                                                                                           |\n| public int leftMarginValue(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                           |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                         | Moves a specified control to the control.                                                                                                 |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                           |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                           |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                          |                                                                                                                                           |\n| public int rightMarginValue(\\[int value\\])                                                                  |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                           |\n| public boolean skip(\\[boolean value\\])                                                                      |                                                                                                                                           |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                           |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                           |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                            |                                                                                                                                           |\n| public int topMarginValue(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                           |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                           |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                           |\n| public boolean useUserLayout(\\[boolean value\\])                                                             |                                                                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                           |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                           |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                    |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                    |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                           |\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of Microsoft Windows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Microsoft Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Microsoft Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\nMoves a specified control to the control.\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n1 if the control was moved successfully; otherwise, 0.\n\n#### Remarks\n\nIn general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed. However, in some cases, such as for the reference group control instance, controls cannot be moved.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumerations, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildFastTabSummarySeparator\n    class FormBuildFastTabSummarySeparator extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                               |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                  |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                       |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                            |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                 |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                           |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                       |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                 |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                   |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                   |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                  |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                           |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                          |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                              |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                           |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                           |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                           |\n| public boolean skip(\\[boolean value\\])                                                                      |                                                                                                                                           |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                           |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                           |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                           |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                           |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                    |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                    |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                           |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumerations, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n\n\n\n\n","nodes":[{"pos":[32,102],"content":"F Classes - FormBuildButtonControl to FormBuildFastTabSummarySeparator","needQuote":true,"needEscape":true,"nodes":[{"content":"F Classes - FormBuildButtonControl to FormBuildFastTabSummarySeparator","pos":[0,70]}]},{"pos":[116,164],"content":"System API classes that start with the letter F.","needQuote":true,"needEscape":true,"nodes":[{"content":"System API classes that start with the letter F.","pos":[0,48]}]},{"pos":[664,734],"content":"F Classes - FormBuildButtonControl to FormBuildFastTabSummarySeparator","linkify":"F Classes - FormBuildButtonControl to FormBuildFastTabSummarySeparator","nodes":[{"content":"F Classes - FormBuildButtonControl to FormBuildFastTabSummarySeparator","pos":[0,70]}]},{"content":"System API classes that start with the letter F.","pos":[780,828]},{"pos":[830,858],"content":"Class FormBuildButtonControl","linkify":"Class FormBuildButtonControl","nodes":[{"content":"Class FormBuildButtonControl","pos":[0,28]}]},{"content":"The FormBuildButtonControl class lets you create, read, update, and delete X++ code and metadata.","pos":[948,1045]},{"pos":[1051,1058],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[1060,1170]},{"pos":[1176,1184],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[1190,1197],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[1201,1207]},{"content":"Description","pos":[1311,1322]},{"content":"public int acquireFocus(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[1701,1739],"source":"public int acquireFocus(\\[int value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[1951,1997],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[2061,2101]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[2201,2236],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2451,2494],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[2561,2628]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2701,2750],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[2811,2909]},{"content":"public boolean autoRefreshData(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2951,3000],"source":"public boolean autoRefreshData(\\[boolean value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3201,3242],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[3311,3360]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3451,3486],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[3561,3622]},{"content":"public boolean big(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[3701,3738],"source":"public boolean big(\\[boolean value\\])"},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3951,3981],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[4061,4128]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4201,4233],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[4311,4367]},{"content":"public int buttonDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4451,4490],"source":"public int buttonDisplay(\\[int value\\])"},{"content":"Gets or sets the appearance of the button control.","pos":[4561,4611]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4701,4739],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[4811,4854]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4951,4988],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[5061,5106]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[5201,5273],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[5311,5378]},{"content":"public int containerId()","pos":[5451,5475]},{"content":"Retrieves the ID of the parent container for the control.","pos":[5561,5618]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[5701,5745],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[5951,5993],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public boolean defaultButton(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[6201,6248],"source":"public boolean defaultButton(\\[boolean value\\])"},{"content":"Determines whether the button should be the default button on the form.","pos":[6311,6382]},{"content":"public str disabledImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[6451,6490],"source":"public str disabledImage(\\[str value\\])"},{"content":"Gets or sets the disabled image of the button.","pos":[6561,6607]},{"content":"public int disabledImageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[6701,6748],"source":"public int disabledImageLocation(\\[int value\\])"},{"content":"public int disabledResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[6951,6993],"source":"public int disabledResource(\\[int value\\])"},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[7061,7139]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[7201,7240],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[7451,7485],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[7561,7642]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[7701,7742],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[7811,7862]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[7951,7981],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[8061,8118]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[8201,8235],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[8311,8368]},{"content":"public boolean forcedToOverflow(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[8451,8501],"source":"public boolean forcedToOverflow(\\[boolean value\\])"},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[8701,8742],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[8811,8862]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[8951,8993],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[9061,9100]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[9201,9237],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[9311,9373]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[9451,9488],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[9561,9600]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[9701,9735],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[9811,9915]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[9951,9992],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[10201,10216]},{"content":"Retrieves the ID of the control.","pos":[10311,10343]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10451,10490],"source":"public int imageLocation(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[10701,10729]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[10811,10887]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[10951,10991],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[11201,11233],"source":"public str keyTip(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[11451,11491],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[11701,11735],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[11951,11986],"source":"public int leftValue(\\[int value\\])"},{"content":"public int multiSelect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[12201,12238],"source":"public int multiSelect(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[12451,12481],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[12561,12712]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[12717,12759],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int needsRecord(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[12967,13004],"source":"public int needsRecord(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[13217,13254],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13467,13507],"source":"public int normalResource(\\[int value\\])"},{"content":"public boolean primary(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[13717,13758],"source":"public boolean primary(\\[boolean value\\])"},{"content":"public boolean saveRecord(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[13967,14011],"source":"public boolean saveRecord(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[14217,14274],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public int shortkey(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[14467,14501],"source":"public int shortkey(\\[int value\\])"},{"content":"public boolean showShortCut(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[14717,14763],"source":"public boolean showShortCut(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[14967,15005],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[15077,15204]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[15217,15248],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[15467,15497],"source":"public str text(\\[str value\\])"},{"content":"public int toggleButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[15717,15755],"source":"public int toggleButton(\\[int value\\])"},{"content":"public int toggleValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[15967,16004],"source":"public int toggleValue(\\[int value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[16217,16256],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[16467,16500],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[16717,16751],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[16967,16997],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[17217,17260],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[17327,17394]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[17467,17501],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[17717,17755],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[17967,18006],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean value(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[18217,18256],"source":"public boolean value(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[18467,18527],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[18717,18771],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18967,19013],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[19217,19258],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[19467,19508],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[19577,19615]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[19717,19752],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[19827,19889]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[19967,20003],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[20077,20115]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[20217,20324],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[20470,20489],"content":"Method acquireFocus","linkify":"Method acquireFocus","nodes":[{"content":"Method acquireFocus","pos":[0,19]}]},{"pos":[20538,20548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[20550,20555]},{"pos":[20564,20576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20582,20601],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[20603,20643]},{"pos":[20700,20710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[20712,20717]},{"pos":[20726,20738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[20740,20796]},{"pos":[20803,20810],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[20812,20891]},{"pos":[20897,20913],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[20959,20969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[20971,20976]},{"pos":[20985,20997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21003,21019],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[21021,21088]},{"pos":[21142,21152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[21154,21159]},{"pos":[21168,21180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[21182,21234]},{"pos":[21241,21248],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[21250,21376]},{"pos":[21382,21404],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[21406,21504]},{"pos":[21564,21574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[21576,21581]},{"pos":[21590,21602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[21604,21683]},{"pos":[21690,21697],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[21699,21736]},{"pos":[21742,21764],"content":"Method autoRefreshData","linkify":"Method autoRefreshData","nodes":[{"content":"Method autoRefreshData","pos":[0,22]}]},{"pos":[21824,21834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[21836,21841]},{"pos":[21850,21862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[21868,21890],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[21892,21941]},{"pos":[21993,22003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22005,22010]},{"pos":[22019,22031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[22033,22077]},{"pos":[22084,22091],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[22093,22161]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[22167,22237]},{"content":"The second byte contains a value for green.","pos":[22242,22285]},{"content":"The third byte contains a value for blue.","pos":[22290,22331]},{"content":"The high-order byte must be zero.","pos":[22336,22369]},{"content":"The maximum value for a single byte is 255.","pos":[22374,22417]},{"pos":[22423,22439],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[22441,22502]},{"pos":[22548,22558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22560,22565]},{"pos":[22574,22586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[22588,22649]},{"pos":[22655,22665],"content":"Method big","linkify":"Method big","nodes":[{"content":"Method big","pos":[0,10]}]},{"pos":[22713,22723],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22725,22730]},{"pos":[22739,22751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22757,22768],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[22770,22837]},{"pos":[22878,22888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22890,22895]},{"pos":[22904,22916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[22918,22968]},{"pos":[22975,22982],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[22984,23056]},{"content":"0 Use the default font weight.","pos":[23062,23092]},{"content":"1 Thin.","pos":[23097,23104]},{"content":"2 Extra-light.","pos":[23109,23123]},{"content":"3 Light.","pos":[23128,23136]},{"content":"4 Normal.","pos":[23141,23150]},{"content":"5 Medium.","pos":[23155,23164]},{"content":"6 Semibold.","pos":[23169,23180]},{"content":"7 Bold.","pos":[23185,23192]},{"content":"8 Extra-bold.","pos":[23197,23210]},{"content":"9 Heavy.","pos":[23215,23223]},{"pos":[23229,23242],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[23244,23300]},{"pos":[23343,23353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[23355,23360]},{"pos":[23369,23381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[23383,23427]},{"pos":[23434,23441],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[23443,23535]},{"content":"Value.","pos":[23539,23545]},{"content":"Description.","pos":[23548,23560]},{"content":"0","pos":[23591,23592]},{"content":"Auto.","pos":[23600,23605]},{"content":"1","pos":[23617,23618]},{"content":"3D.","pos":[23626,23629]},{"content":"2","pos":[23643,23644]},{"content":"Single line.","pos":[23652,23664]},{"content":"3","pos":[23669,23670]},{"content":"Flat.","pos":[23678,23683]},{"content":"4","pos":[23695,23696]},{"content":"None.","pos":[23704,23709]},{"pos":[23724,23744],"content":"Method buttonDisplay","linkify":"Method buttonDisplay","nodes":[{"content":"Method buttonDisplay","pos":[0,20]}]},{"content":"Gets or sets the appearance of the button control.","pos":[23746,23796]},{"pos":[23846,23856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[23858,23863]},{"pos":[23872,23884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and five, inclusive.","pos":[23886,23930]},{"pos":[23937,23944],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value of the property defines whether the text, the image, or both should be displayed on the button.","pos":[23946,24051]},{"content":"This property also controls relative positions of text and image if both are displayed.","pos":[24052,24139]},{"content":"The integer value that is returned contains the appearance of the button control as follows:","pos":[24140,24232]},{"content":"Value.","pos":[24236,24242]},{"content":"Description.","pos":[24245,24257]},{"content":"0","pos":[24392,24393]},{"content":"Text only.","pos":[24401,24411]},{"content":"1","pos":[24470,24471]},{"content":"Image Only.","pos":[24479,24490]},{"content":"2","pos":[24548,24549]},{"content":"Text and image; the image is displayed below the text.","pos":[24557,24611]},{"content":"3","pos":[24626,24627]},{"content":"Text and image; the image is displayed above the text.","pos":[24635,24689]},{"content":"4","pos":[24704,24705]},{"content":"Text and image; the image is displayed to the left of the text.","pos":[24713,24776]},{"content":"5","pos":[24782,24783]},{"content":"Text and image; the image is displayed to the right of the text.","pos":[24791,24855]},{"pos":[24863,24882],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[24884,24927]},{"pos":[24976,24986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[24988,24993]},{"pos":[25002,25014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[25016,25078]},{"pos":[25085,25092],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[25094,25198]},{"content":"Value.","pos":[25202,25208]},{"content":"Description.","pos":[25211,25223]},{"content":"0","pos":[25270,25271]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25279,25292],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[25304,25305]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25313,25329],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[25338,25339]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25347,25362],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[25372,25374]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25381,25393],"source":"MAC\\_CHARSET"},{"content":"128","pos":[25406,25409]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25415,25432],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[25440,25443]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25449,25464],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[25474,25477]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25483,25498],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[25508,25511]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25517,25537],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[25542,25545]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25551,25565],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[25576,25579]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25585,25601],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[25610,25613]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25619,25638],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[25644,25647]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25653,25668],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[25678,25681]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25687,25703],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[25712,25715]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25721,25740],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[25746,25749]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25755,25767],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of Microsoft Windows.","pos":[25779,25868]},{"content":"Value.","pos":[25872,25878]},{"content":"Description.","pos":[25881,25893]},{"content":"130","pos":[25928,25931]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25937,25951],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Microsoft Windows.","pos":[25955,26051]},{"content":"Value.","pos":[26055,26061]},{"content":"Description.","pos":[26064,26076]},{"content":"177","pos":[26113,26116]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[26122,26137],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[26142,26145]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[26151,26166],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Microsoft Windows.","pos":[26170,26257]},{"content":"Value.","pos":[26261,26267]},{"content":"Description.","pos":[26270,26282]},{"content":"222","pos":[26315,26318]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[26324,26337],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[26341,26420]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[26421,26512],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[26513,26628]},{"pos":[26634,26652],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[26654,26699]},{"pos":[26747,26757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[26759,26764]},{"pos":[26773,26785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[26787,26830]},{"pos":[26837,26844],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[26846,26907]},{"content":"Value.","pos":[26911,26917]},{"content":"Style.","pos":[26920,26926]},{"content":"0","pos":[26999,27000]},{"content":"Default.","pos":[27008,27016]},{"content":"1","pos":[27043,27044]},{"content":"The Microsoft Windows palette.","pos":[27052,27082]},{"content":"2","pos":[27087,27088]},{"content":"The true-color scheme.","pos":[27096,27118]},{"pos":[27134,27157],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[27159,27226]},{"pos":[27309,27319],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[27321,27326]},{"pos":[27335,27347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[27349,27421]},{"pos":[27428,27435],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[27437,27518]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[27519,27612]},{"pos":[27618,27636],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[27638,27695]},{"pos":[27732,27744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[27746,27777]},{"pos":[27783,27808],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[27863,27873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[27875,27880]},{"pos":[27889,27901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27907,27930],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[27983,27993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[27995,28000]},{"pos":[28009,28021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28027,28047],"content":"Method defaultButton","linkify":"Method defaultButton","nodes":[{"content":"Method defaultButton","pos":[0,20]}]},{"content":"Determines whether the button should be the default button on the form.","pos":[28049,28120]},{"pos":[28178,28188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28190,28195]},{"pos":[28204,28216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the button should be the default button; otherwise, false.","pos":[28218,28284]},{"pos":[28290,28310],"content":"Method disabledImage","linkify":"Method disabledImage","nodes":[{"content":"Method disabledImage","pos":[0,20]}]},{"content":"Gets or sets the disabled image of the button.","pos":[28312,28358]},{"pos":[28408,28418],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28420,28425]},{"pos":[28434,28446],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The full name of an image file.","pos":[28448,28479]},{"content":"The system supports all of the GDI-supported image formats.","pos":[28480,28539]},{"pos":[28546,28553],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property has precedence over the disabledResource property .","pos":[28555,28620]},{"content":"It is used if both of these properties are set.","pos":[28621,28668]},{"pos":[28674,28702],"content":"Method disabledImageLocation","linkify":"Method disabledImageLocation","nodes":[{"content":"Method disabledImageLocation","pos":[0,28]}]},{"pos":[28760,28770],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28772,28777]},{"pos":[28786,28798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28804,28827],"content":"Method disabledResource","linkify":"Method disabledResource","nodes":[{"content":"Method disabledResource","pos":[0,23]}]},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[28829,28907]},{"pos":[28960,28970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28972,28977]},{"pos":[28986,28998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the image to use as the disabled button image.","pos":[29000,29065]},{"content":"Both icon and bitmap images are supported.","pos":[29066,29108]},{"pos":[29114,29134],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[29184,29194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[29196,29201]},{"pos":[29210,29222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29228,29243],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[29245,29326]},{"pos":[29371,29381],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[29383,29388]},{"pos":[29397,29409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[29411,29471]},{"pos":[29477,29491],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[29493,29544]},{"pos":[29596,29606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[29608,29613]},{"pos":[29622,29634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[29636,29684]},{"pos":[29691,29698],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[29700,29775]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[29776,29871]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[29872,30006]},{"pos":[30012,30023],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[30025,30082]},{"pos":[30123,30133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[30135,30140]},{"pos":[30149,30161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[30163,30218]},{"pos":[30224,30239],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[30241,30298]},{"pos":[30343,30353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[30355,30360]},{"pos":[30369,30381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[30383,30416]},{"pos":[30422,30445],"content":"Method forcedToOverflow","linkify":"Method forcedToOverflow","nodes":[{"content":"Method forcedToOverflow","pos":[0,23]}]},{"pos":[30506,30516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[30518,30523]},{"pos":[30532,30544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30550,30572],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[30574,30625]},{"pos":[30677,30687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[30689,30694]},{"pos":[30703,30715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[30717,30761]},{"pos":[30768,30775],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[30777,30845]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[30851,30921]},{"content":"The second byte contains a value for green.","pos":[30926,30969]},{"content":"The third byte contains a value for blue.","pos":[30974,31015]},{"content":"The high-order byte must be zero.","pos":[31020,31053]},{"content":"The maximum value for a single byte is 255.","pos":[31058,31101]},{"pos":[31107,31120],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[31122,31161]},{"pos":[31214,31224],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[31226,31231]},{"content":"mode","pos":[31245,31249]},{"pos":[31258,31270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[31272,31308]},{"pos":[31315,31322],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[31324,31377]},{"content":"Calculate the height according to the following table:","pos":[31378,31432]},{"content":"Mode.","pos":[31436,31441]},{"content":"Height calculation.","pos":[31455,31474]},{"content":"-1 Exact.","pos":[31662,31671]},{"content":"The exact height in pixels of the controls is used.","pos":[31681,31732]},{"content":"0 Auto.","pos":[31775,31782]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[31794,31883]},{"content":"1 Column height.","pos":[31888,31904]},{"content":"The layout of the form determines the height of the control.","pos":[31907,31967]},{"content":"The height and height calculation mode can be set separately.","pos":[32000,32061]},{"pos":[32067,32084],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[32086,32148]},{"pos":[32195,32205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[32207,32212]},{"pos":[32221,32233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[32235,32256]},{"pos":[32263,32270],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[32272,32326]},{"content":"Mode.","pos":[32330,32335]},{"content":"Height Calculation.","pos":[32347,32366]},{"content":"Exact.","pos":[32552,32558]},{"content":"The exact height in pixels of the controls is used.","pos":[32569,32620]},{"content":"Auto.","pos":[32663,32668]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[32680,32769]},{"content":"Column height.","pos":[32774,32788]},{"content":"The layout of the form determines the height of the control.","pos":[32791,32851]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[32884,32969]},{"pos":[32975,32993],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[32995,33034]},{"pos":[33082,33092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[33094,33099]},{"pos":[33108,33120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[33122,33143]},{"pos":[33150,33157],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[33159,33249]},{"pos":[33255,33270],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[33272,33376]},{"pos":[33421,33431],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[33433,33438]},{"pos":[33447,33459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[33461,33516]},{"pos":[33523,33530],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[33532,33600]},{"content":"The help text must not exceed 250 characters.","pos":[33601,33646]},{"pos":[33652,33674],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[33726,33736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[33738,33743]},{"pos":[33752,33764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33770,33779],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[33781,33813]},{"pos":[33841,33853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[33855,33877]},{"pos":[33883,33903],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[33953,33963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[33965,33970]},{"pos":[33979,33991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33997,34015],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[34017,34093]},{"pos":[34134,34146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[34148,34222]},{"pos":[34228,34241],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[34292,34302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34304,34309]},{"pos":[34318,34330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34336,34349],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[34392,34402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34404,34409]},{"pos":[34418,34430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34436,34447],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[34498,34508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34510,34515]},{"content":"mode","pos":[34529,34533]},{"pos":[34542,34554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34560,34575],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[34620,34630],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34632,34637]},{"pos":[34646,34658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34664,34680],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[34726,34736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34738,34743]},{"pos":[34752,34764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34770,34788],"content":"Method multiSelect","linkify":"Method multiSelect","nodes":[{"content":"Method multiSelect","pos":[0,18]}]},{"pos":[34836,34846],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34848,34853]},{"pos":[34862,34874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34880,34891],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[34893,35044]},{"pos":[35085,35095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35097,35102]},{"content":"The name to assign to the control.","pos":[35105,35139]},{"pos":[35146,35158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[35160,35224]},{"pos":[35231,35238],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[35240,35334]},{"content":"It must start with a letter.","pos":[35340,35368]},{"content":"It cannot exceed 250 characters.","pos":[35373,35405]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[35410,35464],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[35469,35509]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[35514,35624]},{"pos":[35630,35653],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[35706,35716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35718,35723]},{"pos":[35732,35744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35750,35768],"content":"Method needsRecord","linkify":"Method needsRecord","nodes":[{"content":"Method needsRecord","pos":[0,18]}]},{"pos":[35816,35826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35828,35833]},{"pos":[35842,35854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35860,35878],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[35926,35936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35938,35943]},{"pos":[35952,35964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35970,35991],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[36042,36052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36054,36059]},{"pos":[36068,36080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36086,36100],"content":"Method primary","linkify":"Method primary","nodes":[{"content":"Method primary","pos":[0,14]}]},{"pos":[36152,36162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36164,36169]},{"pos":[36178,36190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36196,36213],"content":"Method saveRecord","linkify":"Method saveRecord","nodes":[{"content":"Method saveRecord","pos":[0,17]}]},{"pos":[36268,36278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36280,36285]},{"pos":[36294,36306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36312,36330],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[36398,36408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36410,36415]},{"pos":[36424,36436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36442,36457],"content":"Method shortkey","linkify":"Method shortkey","nodes":[{"content":"Method shortkey","pos":[0,15]}]},{"pos":[36502,36512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36514,36519]},{"pos":[36528,36540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36546,36565],"content":"Method showShortCut","linkify":"Method showShortCut","nodes":[{"content":"Method showShortCut","pos":[0,19]}]},{"pos":[36622,36632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36634,36639]},{"pos":[36648,36660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36666,36677],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[36679,36806]},{"pos":[36855,36865],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36867,36872]},{"content":"The value to assign to the skip property of the control.","pos":[36875,36931]},{"pos":[36938,36950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[36952,37058]},{"pos":[37064,37076],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[37118,37128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37130,37135]},{"pos":[37144,37156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37162,37173],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[37214,37224],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37226,37231]},{"pos":[37240,37252],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37258,37277],"content":"Method toggleButton","linkify":"Method toggleButton","nodes":[{"content":"Method toggleButton","pos":[0,19]}]},{"pos":[37326,37336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37338,37343]},{"pos":[37352,37364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37370,37388],"content":"Method toggleValue","linkify":"Method toggleValue","nodes":[{"content":"Method toggleValue","pos":[0,18]}]},{"pos":[37436,37446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37448,37453]},{"pos":[37462,37474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37480,37490],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[37540,37550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37552,37557]},{"content":"mode","pos":[37571,37575]},{"pos":[37584,37596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37602,37616],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[37660,37670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37672,37677]},{"pos":[37686,37698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37704,37719],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[37764,37774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37776,37781]},{"pos":[37790,37802],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37808,37819],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[37860,37870],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37872,37877]},{"pos":[37886,37898],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37904,37920],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[37922,37989]},{"pos":[38043,38053],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38055,38060]},{"content":"The value to assign to the underline property of the control.","pos":[38063,38124]},{"pos":[38131,38143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[38145,38209]},{"pos":[38215,38230],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[38275,38285],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38287,38292]},{"pos":[38301,38313],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38319,38338],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[38387,38397],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38399,38404]},{"pos":[38413,38425],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38431,38451],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[38501,38511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38513,38518]},{"pos":[38527,38539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38545,38557],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[38607,38617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38619,38624]},{"pos":[38633,38645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38651,38673],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[38742,38752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38754,38759]},{"content":"mode","pos":[38773,38777]},{"pos":[38786,38798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38804,38830],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[38895,38905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[38907,38911]},{"pos":[38920,38932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38938,38965],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[39022,39032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39034,39039]},{"pos":[39048,39060],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39066,39080],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[39132,39142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39144,39149]},{"pos":[39158,39170],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39176,39188],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[39190,39228]},{"pos":[39280,39290],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39292,39297]},{"content":"mode","pos":[39311,39315]},{"pos":[39324,39336],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[39338,39373]},{"pos":[39380,39387],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[39389,39442]},{"content":"Calculate the width according to the following table:","pos":[39443,39496]},{"content":"Mode.","pos":[39500,39505]},{"content":"Width calculation.","pos":[39518,39536]},{"content":"-1 Exact.","pos":[39722,39731]},{"content":"The exact width in pixels of the controls is used.","pos":[39740,39790]},{"content":"0 Auto.","pos":[39833,39840]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[39851,39939]},{"content":"1 Column width.","pos":[39944,39959]},{"content":"The layout of the form determines the width of the control.","pos":[39962,40021]},{"content":"The width and width calculation mode can be set separately.","pos":[40054,40113]},{"pos":[40119,40135],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[40137,40199]},{"pos":[40245,40255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[40257,40262]},{"pos":[40271,40283],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[40285,40346]},{"pos":[40353,40360],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[40362,40415]},{"content":"Mode.","pos":[40419,40424]},{"content":"Width Calculation.","pos":[40435,40453]},{"content":"Exact.","pos":[40637,40643]},{"content":"The exact width in pixels of the controls is used.","pos":[40653,40703]},{"content":"Auto.","pos":[40746,40751]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[40762,40850]},{"content":"Column width.","pos":[40855,40868]},{"content":"The layout of the form determines the width of the control.","pos":[40871,40930]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[40963,41046]},{"pos":[41052,41069],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[41071,41109]},{"pos":[41156,41166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[41168,41173]},{"pos":[41182,41194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[41196,41231]},{"pos":[41238,41245],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[41247,41320]},{"pos":[41326,41355],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[41473,41483],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[41485,41501]},{"content":"objectMethodToCall","pos":[41515,41533]},{"content":"overrideObject","pos":[41547,41561]},{"pos":[41568,41601],"content":"Class FormBuildButtonGroupControl","linkify":"Class FormBuildButtonGroupControl","nodes":[{"content":"Class FormBuildButtonGroupControl","pos":[0,33]}]},{"content":"The FormBuildButtonGroupControl class lets you create, read, update, and delete X++ code and metadata.","pos":[41666,41768]},{"pos":[41774,41781],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[41783,41893]},{"pos":[41899,41907],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[41913,41920],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[41924,41930]},{"content":"Description","pos":[42034,42045]},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[42424,42468],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[42674,42721],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[42924,42970],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[43034,43074]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[43174,43217],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[43284,43351]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[43424,43464],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[43674,43712],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[43924,43963],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44174,44211],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[44424,44473],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[44534,44632]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44674,44715],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[44784,44833]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44924,44959],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[45034,45096]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[45174,45204],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[45284,45351]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[45424,45481],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[45674,45725],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[45924,45967],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[46174,46207],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[46284,46323]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[46424,46462],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[46534,46577]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[46674,46711],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[46784,46829]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[46924,46979],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[47174,47226],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[47424,47480],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[47674,47724],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[47924,47966],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[48174,48212],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[48424,48496],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[48534,48601]},{"content":"public int containerId()","pos":[48674,48698]},{"content":"Retrieves the ID of the parent container for the control.","pos":[48784,48841]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[48924,48968],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[49174,49233],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[49424,49466],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[49674,49714],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[49784,49849]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[49924,49963],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50174,50208],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[50284,50365]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[50424,50465],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[50534,50585]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[50674,50704],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[50784,50841]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50924,50958],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[51034,51091]},{"content":"public int framePosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[51174,51213],"source":"public int framePosition(\\[int value\\])"},{"content":"public int frameType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[51424,51459],"source":"public int frameType(\\[int value\\])"},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[51674,51716],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[51784,51823]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[51924,51960],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[52034,52096]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[52174,52211],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[52284,52323]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[52424,52458],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[52534,52638]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[52674,52719],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[52924,52965],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[53174,53189]},{"content":"Retrieves the ID of the control.","pos":[53284,53316]},{"content":"public boolean isContainer()","pos":[53424,53452]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[53534,53610]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[53674,53714],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[53924,53956],"source":"public str keyTip(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[54174,54214],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[54424,54479],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[54674,54723],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[54924,54965],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[55174,55208],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[55424,55459],"source":"public int leftValue(\\[int value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[55674,55741],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"Moves a specified control to the control.","pos":[55784,55825]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[55924,55954],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[56034,56185]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[56190,56232],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[56440,56496],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[56690,56740],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[56940,56982],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[57190,57247],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean sizeHeight(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[57440,57484],"source":"public boolean sizeHeight(\\[boolean value\\])"},{"content":"public boolean sizeWidth(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[57690,57733],"source":"public boolean sizeWidth(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[57940,57978],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[58050,58177]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[58190,58221],"source":"public int style(\\[int value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[58440,58479],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[58690,58744],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[58940,58988],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[59190,59230],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[59440,59473],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[59690,59724],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[59940,59970],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[60190,60233],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[60300,60367]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60440,60474],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60690,60728],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60940,60979],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[61190,61237],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[61440,61500],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[61690,61744],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[61940,61986],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[62190,62231],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[62440,62481],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[62550,62588]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[62690,62725],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[62800,62862]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[62940,62976],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[63050,63088]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[63190,63297],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[63443,63460],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[63515,63525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63527,63532]},{"pos":[63541,63553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63559,63579],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[63637,63647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63649,63654]},{"pos":[63663,63675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63681,63700],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[63702,63742]},{"pos":[63799,63809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63811,63816]},{"pos":[63825,63837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[63839,63895]},{"pos":[63902,63909],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[63911,63990]},{"pos":[63996,64012],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[64014,64081]},{"pos":[64135,64145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64147,64152]},{"pos":[64161,64173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[64175,64227]},{"pos":[64234,64241],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[64243,64369]},{"pos":[64375,64396],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[64447,64457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64459,64464]},{"pos":[64473,64485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64491,64510],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[64559,64569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64571,64576]},{"pos":[64585,64597],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64603,64623],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[64673,64683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64685,64690]},{"pos":[64699,64711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64717,64735],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[64783,64793],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64795,64800]},{"pos":[64809,64821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64827,64849],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[64851,64949]},{"pos":[65009,65019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65021,65026]},{"pos":[65035,65047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[65049,65128]},{"pos":[65135,65142],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[65144,65181]},{"pos":[65187,65209],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[65211,65260]},{"pos":[65312,65322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65324,65329]},{"pos":[65338,65350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[65352,65396]},{"pos":[65403,65410],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[65412,65480]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[65486,65556]},{"content":"The second byte contains a value for green.","pos":[65561,65604]},{"content":"The third byte contains a value for blue.","pos":[65609,65650]},{"content":"The high-order byte must be zero.","pos":[65655,65688]},{"content":"The maximum value for a single byte is 255.","pos":[65693,65736]},{"pos":[65742,65758],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[65760,65822]},{"pos":[65868,65878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65880,65885]},{"pos":[65894,65906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[65908,65969]},{"pos":[65975,65986],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[65988,66055]},{"pos":[66096,66106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66108,66113]},{"pos":[66122,66134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[66136,66186]},{"pos":[66193,66200],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[66202,66274]},{"content":"0 Use the default font weight.","pos":[66280,66310]},{"content":"1 Thin.","pos":[66315,66322]},{"content":"2 Extra-light.","pos":[66327,66341]},{"content":"3 Light.","pos":[66346,66354]},{"content":"4 Normal.","pos":[66359,66368]},{"content":"5 Medium.","pos":[66373,66382]},{"content":"6 Semibold.","pos":[66387,66398]},{"content":"7 Bold.","pos":[66403,66410]},{"content":"8 Extra-bold.","pos":[66415,66428]},{"content":"9 Heavy.","pos":[66433,66441]},{"pos":[66447,66466],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[66532,66542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66544,66549]},{"content":"mode","pos":[66563,66567]},{"pos":[66576,66588],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66594,66617],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[66679,66689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[66691,66695]},{"pos":[66704,66716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66722,66746],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[66800,66810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66812,66817]},{"pos":[66826,66838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66844,66858],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[66860,66899]},{"pos":[66943,66953],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66955,66960]},{"pos":[66969,66981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[66983,67037]},{"pos":[67043,67062],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[67064,67107]},{"pos":[67156,67166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67168,67173]},{"pos":[67182,67194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[67196,67258]},{"pos":[67265,67272],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[67274,67378]},{"content":"Value.","pos":[67382,67388]},{"content":"Description.","pos":[67391,67403]},{"content":"0","pos":[67450,67451]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67459,67472],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[67484,67485]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67493,67509],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[67518,67519]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67527,67542],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[67552,67554]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67561,67573],"source":"MAC\\_CHARSET"},{"content":"128","pos":[67586,67589]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67595,67612],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[67620,67623]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67629,67644],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[67654,67657]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67663,67678],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[67688,67691]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67697,67717],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[67722,67725]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67731,67745],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[67756,67759]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67765,67781],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[67790,67793]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67799,67818],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[67824,67827]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67833,67848],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[67858,67861]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67867,67883],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[67892,67895]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67901,67920],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[67926,67929]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[67935,67947],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of Microsoft Windows.","pos":[67959,68048]},{"content":"Value.","pos":[68052,68058]},{"content":"Description.","pos":[68061,68073]},{"content":"130","pos":[68108,68111]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[68117,68131],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Microsoft Windows.","pos":[68135,68231]},{"content":"Value.","pos":[68235,68241]},{"content":"Description.","pos":[68244,68256]},{"content":"177","pos":[68293,68296]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[68302,68317],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[68322,68325]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[68331,68346],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Microsoft Windows.","pos":[68350,68437]},{"content":"Value.","pos":[68441,68447]},{"content":"Description.","pos":[68450,68462]},{"content":"222","pos":[68495,68498]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[68504,68517],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[68521,68600]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[68601,68807],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[68813,68831],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[68833,68878]},{"pos":[68926,68936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68938,68943]},{"pos":[68952,68964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[68966,69009]},{"pos":[69016,69023],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[69025,69086]},{"content":"Value.","pos":[69090,69096]},{"content":"Style.","pos":[69099,69105]},{"content":"0","pos":[69178,69179]},{"content":"Default.","pos":[69187,69195]},{"content":"1","pos":[69222,69223]},{"content":"The Microsoft Windows palette.","pos":[69231,69261]},{"content":"2","pos":[69266,69267]},{"content":"The true-color scheme.","pos":[69275,69297]},{"pos":[69313,69327],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[69391,69401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69403,69408]},{"content":"mode","pos":[69422,69426]},{"pos":[69435,69447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69453,69471],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[69534,69544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[69546,69550]},{"pos":[69559,69571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69577,69595],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[69660,69670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69672,69677]},{"content":"mode","pos":[69691,69695]},{"pos":[69704,69716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69722,69744],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[69805,69815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[69817,69821]},{"pos":[69830,69842],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69848,69871],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[69924,69934],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69936,69941]},{"pos":[69950,69962],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69968,69987],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[70036,70046],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70048,70053]},{"pos":[70062,70074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70080,70103],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[70105,70172]},{"pos":[70255,70265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70267,70272]},{"pos":[70281,70293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[70295,70367]},{"pos":[70374,70381],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[70383,70464]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[70465,70558]},{"pos":[70564,70582],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[70584,70641]},{"pos":[70678,70690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[70692,70723]},{"pos":[70729,70754],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[70809,70819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70821,70826]},{"pos":[70835,70847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70853,70885],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[70955,70965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70967,70972]},{"pos":[70981,70993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70999,71022],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[71075,71085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71087,71092]},{"pos":[71101,71113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71119,71136],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[71138,71203]},{"pos":[71254,71264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71266,71271]},{"pos":[71280,71292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[71294,71339]},{"pos":[71345,71365],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[71415,71425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71427,71432]},{"pos":[71441,71453],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71459,71474],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[71476,71557]},{"pos":[71602,71612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71614,71619]},{"pos":[71628,71640],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[71642,71702]},{"pos":[71708,71722],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[71724,71775]},{"pos":[71827,71837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71839,71844]},{"pos":[71853,71865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[71867,71915]},{"pos":[71922,71929],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[71931,72006]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[72007,72102]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[72103,72237]},{"pos":[72243,72254],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[72256,72313]},{"pos":[72354,72364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72366,72371]},{"pos":[72380,72392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[72394,72449]},{"pos":[72455,72470],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[72472,72529]},{"pos":[72574,72584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72586,72591]},{"pos":[72600,72612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[72614,72647]},{"pos":[72653,72673],"content":"Method framePosition","linkify":"Method framePosition","nodes":[{"content":"Method framePosition","pos":[0,20]}]},{"pos":[72723,72733],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72735,72740]},{"pos":[72749,72761],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72767,72783],"content":"Method frameType","linkify":"Method frameType","nodes":[{"content":"Method frameType","pos":[0,16]}]},{"pos":[72829,72839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72841,72846]},{"pos":[72855,72867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72873,72886],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[72888,72927]},{"pos":[72980,72990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72992,72997]},{"content":"mode","pos":[73011,73015]},{"pos":[73024,73036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[73038,73074]},{"pos":[73081,73088],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[73090,73143]},{"content":"Calculate the height according to the following table:","pos":[73144,73198]},{"content":"Mode.","pos":[73202,73207]},{"content":"Height calculation.","pos":[73221,73240]},{"content":"-1 Exact.","pos":[73428,73437]},{"content":"The exact height in pixels of the controls is used.","pos":[73447,73498]},{"content":"0 Auto.","pos":[73541,73548]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[73560,73649]},{"content":"1 Column height.","pos":[73654,73670]},{"content":"The layout of the form determines the height of the control.","pos":[73673,73733]},{"content":"The height and height calculation mode can be set separately.","pos":[73766,73827]},{"pos":[73833,73850],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[73852,73914]},{"pos":[73961,73971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73973,73978]},{"pos":[73987,73999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[74001,74022]},{"pos":[74029,74036],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[74038,74092]},{"content":"Mode.","pos":[74096,74101]},{"content":"Height Calculation.","pos":[74113,74132]},{"content":"Exact.","pos":[74318,74324]},{"content":"The exact height in pixels of the controls is used.","pos":[74335,74386]},{"content":"Auto.","pos":[74429,74434]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[74446,74535]},{"content":"Column height.","pos":[74540,74554]},{"content":"The layout of the form determines the height of the control.","pos":[74557,74617]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[74650,74735]},{"pos":[74741,74759],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[74761,74800]},{"pos":[74848,74858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74860,74865]},{"pos":[74874,74886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[74888,74909]},{"pos":[74916,74923],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[74925,75015]},{"pos":[75021,75036],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[75038,75142]},{"pos":[75187,75197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75199,75204]},{"pos":[75213,75225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[75227,75282]},{"pos":[75289,75296],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[75298,75366]},{"content":"The help text must not exceed 250 characters.","pos":[75367,75412]},{"pos":[75418,75436],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[75492,75502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75504,75509]},{"pos":[75518,75530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75536,75558],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[75610,75620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75622,75627]},{"pos":[75636,75648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75654,75663],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[75665,75697]},{"pos":[75725,75737],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[75739,75761]},{"pos":[75767,75785],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[75787,75863]},{"pos":[75904,75916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[75918,75992]},{"pos":[75998,76011],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[76062,76072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76074,76079]},{"pos":[76088,76100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76106,76119],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[76162,76172],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76174,76179]},{"pos":[76188,76200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76206,76217],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[76268,76278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76280,76285]},{"content":"mode","pos":[76299,76303]},{"pos":[76312,76324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76330,76347],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[76411,76421],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76423,76428]},{"content":"mode","pos":[76442,76446]},{"pos":[76455,76467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76473,76494],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[76554,76564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[76566,76570]},{"pos":[76579,76591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76597,76619],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[76671,76681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76683,76688]},{"pos":[76697,76709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76715,76730],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[76775,76785],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76787,76792]},{"pos":[76801,76813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76819,76835],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[76881,76891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76893,76898]},{"pos":[76907,76919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76925,76943],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"content":"Moves a specified control to the control.","pos":[76945,76986]},{"pos":[77064,77074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[77076,77085]},{"content":"insertAfterControlId","pos":[77099,77119]},{"pos":[77128,77140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control was moved successfully; otherwise, 0.","pos":[77142,77196]},{"pos":[77203,77210],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed.","pos":[77212,77369]},{"content":"However, in some cases, such as for the reference group control instance, controls cannot be moved.","pos":[77370,77469]},{"pos":[77475,77486],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[77488,77639]},{"pos":[77680,77690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77692,77697]},{"content":"The name to assign to the control.","pos":[77700,77734]},{"pos":[77741,77753],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[77755,77819]},{"pos":[77826,77833],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[77835,77929]},{"content":"It must start with a letter.","pos":[77935,77963]},{"content":"It cannot exceed 250 characters.","pos":[77968,78000]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[78005,78059],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[78064,78104]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[78109,78219]},{"pos":[78225,78248],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[78301,78311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78313,78318]},{"pos":[78327,78339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78345,78363],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[78428,78438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78440,78445]},{"content":"mode","pos":[78459,78463]},{"pos":[78472,78484],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78490,78512],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[78573,78583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[78585,78589]},{"pos":[78598,78610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78616,78639],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[78692,78702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78704,78709]},{"pos":[78718,78730],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78736,78754],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[78822,78832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78834,78839]},{"pos":[78848,78860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78866,78883],"content":"Method sizeHeight","linkify":"Method sizeHeight","nodes":[{"content":"Method sizeHeight","pos":[0,17]}]},{"pos":[78938,78948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78950,78955]},{"pos":[78964,78976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78982,78998],"content":"Method sizeWidth","linkify":"Method sizeWidth","nodes":[{"content":"Method sizeWidth","pos":[0,16]}]},{"pos":[79052,79062],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79064,79069]},{"pos":[79078,79090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79096,79107],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[79109,79236]},{"pos":[79285,79295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79297,79302]},{"content":"The value to assign to the skip property of the control.","pos":[79305,79361]},{"pos":[79368,79380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[79382,79488]},{"pos":[79494,79506],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[79548,79558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79560,79565]},{"pos":[79574,79586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79592,79602],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[79652,79662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79664,79669]},{"content":"mode","pos":[79683,79687]},{"pos":[79696,79708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79714,79730],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[79793,79803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79805,79810]},{"content":"mode","pos":[79824,79828]},{"pos":[79837,79849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79855,79875],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[79934,79944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[79946,79950]},{"pos":[79959,79971],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79977,79998],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[80049,80059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80061,80066]},{"pos":[80075,80087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80093,80107],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[80151,80161],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80163,80168]},{"pos":[80177,80189],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80195,80210],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[80255,80265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80267,80272]},{"pos":[80281,80293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80299,80310],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[80351,80361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80363,80368]},{"pos":[80377,80389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80395,80411],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[80413,80480]},{"pos":[80534,80544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80546,80551]},{"content":"The value to assign to the underline property of the control.","pos":[80554,80615]},{"pos":[80622,80634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[80636,80700]},{"pos":[80706,80721],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[80766,80776],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80778,80783]},{"pos":[80792,80804],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80810,80829],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[80878,80888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80890,80895]},{"pos":[80904,80916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80922,80942],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[80992,81002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81004,81009]},{"pos":[81018,81030],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81036,81056],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[81114,81124],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81126,81131]},{"pos":[81140,81152],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81158,81180],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[81249,81259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81261,81266]},{"content":"mode","pos":[81280,81284]},{"pos":[81293,81305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81311,81337],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[81402,81412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[81414,81418]},{"pos":[81427,81439],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81445,81472],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[81529,81539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81541,81546]},{"pos":[81555,81567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81573,81587],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[81639,81649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81651,81656]},{"pos":[81665,81677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81683,81695],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[81697,81735]},{"pos":[81787,81797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81799,81804]},{"content":"mode","pos":[81818,81822]},{"pos":[81831,81843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[81845,81880]},{"pos":[81887,81894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[81896,82002]},{"content":"Mode.","pos":[82006,82011]},{"content":"Width calculation.","pos":[82024,82042]},{"content":"-1 Exact.","pos":[82228,82237]},{"content":"The exact width in pixels of the controls is used.","pos":[82246,82296]},{"content":"0 Auto.","pos":[82339,82346]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[82357,82445]},{"content":"1 Column width.","pos":[82450,82465]},{"content":"The layout of the form determines the width of the control.","pos":[82468,82527]},{"content":"The width and width calculation mode can be set separately.","pos":[82560,82619]},{"pos":[82625,82641],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[82643,82705]},{"pos":[82751,82761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82763,82768]},{"pos":[82777,82789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[82791,82852]},{"pos":[82859,82866],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[82868,82921]},{"content":"Mode.","pos":[82925,82930]},{"content":"Width Calculation.","pos":[82941,82959]},{"content":"Exact.","pos":[83143,83149]},{"content":"The exact width in pixels of the controls is used.","pos":[83159,83209]},{"content":"Auto.","pos":[83252,83257]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[83268,83356]},{"content":"Column width.","pos":[83361,83374]},{"content":"The layout of the form determines the width of the control.","pos":[83377,83436]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[83469,83552]},{"pos":[83558,83575],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[83577,83615]},{"pos":[83662,83672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83674,83679]},{"pos":[83688,83700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[83702,83737]},{"pos":[83744,83751],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[83753,83826]},{"pos":[83832,83861],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[83979,83989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[83991,84007]},{"content":"objectMethodToCall","pos":[84021,84039]},{"content":"overrideObject","pos":[84053,84067]},{"pos":[84074,84111],"content":"Class FormBuildButtonSeparatorControl","linkify":"Class FormBuildButtonSeparatorControl","nodes":[{"content":"Class FormBuildButtonSeparatorControl","pos":[0,37]}]},{"content":"The FormBuildButtonSeparatorControl class lets you create, read, update, and delete X++ code and metadata.","pos":[84180,84286]},{"pos":[84292,84299],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[84301,84411]},{"pos":[84417,84425],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[84431,84438],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[84442,84448]},{"content":"Description","pos":[84552,84563]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[84954,85000],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[85064,85104]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[85210,85253],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[85320,85387]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[85466,85515],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[85576,85674]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[85722,85794],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[85832,85899]},{"content":"public int containerId()","pos":[85978,86002]},{"content":"Retrieves the ID of the parent container for the control.","pos":[86088,86145]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[86234,86278],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[86490,86532],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[86746,86785],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[87002,87036],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[87112,87193]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[87258,87299],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[87368,87419]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[87514,87556],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[87624,87663]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[87770,87806],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[87880,87942]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[88026,88063],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[88136,88175]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[88282,88316],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[88392,88496]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[88538,88579],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[88794,88809]},{"content":"Retrieves the ID of the control.","pos":[88904,88936]},{"content":"public boolean isContainer()","pos":[89050,89078]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[89160,89236]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[89306,89346],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[89562,89596],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[89818,89853],"source":"public int leftValue(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[90074,90104],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[90184,90341]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[90346,90388],"source":"public int neededPermission(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[90602,90659],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[90858,90896],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[91114,91144],"source":"public str text(\\[str value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[91370,91409],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[91626,91659],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[91882,91916],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[92138,92168],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[92394,92428],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[92650,92688],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[92906,92945],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[93162,93222],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[93418,93472],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[93674,93720],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[93930,93971],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[94186,94227],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[94296,94334]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[94442,94477],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[94552,94614]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[94698,94734],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[94808,94846]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[94954,95061],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[95213,95232],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[95234,95274]},{"pos":[95331,95341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95343,95348]},{"pos":[95357,95369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[95371,95427]},{"pos":[95434,95441],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[95443,95522]},{"pos":[95528,95544],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[95546,95613]},{"pos":[95667,95677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95679,95684]},{"pos":[95693,95705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[95707,95759]},{"pos":[95766,95773],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[95775,95897]},{"pos":[95903,95925],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[95927,96025]},{"pos":[96085,96095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96097,96102]},{"pos":[96111,96123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[96125,96204]},{"pos":[96211,96218],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[96220,96257]},{"pos":[96263,96286],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[96288,96355]},{"pos":[96438,96448],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96450,96455]},{"pos":[96464,96476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[96478,96550]},{"pos":[96557,96564],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[96566,96647]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[96648,96741]},{"pos":[96747,96765],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[96767,96824]},{"pos":[96861,96873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[96875,96906]},{"pos":[96912,96937],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[96992,97002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97004,97009]},{"pos":[97018,97030],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[97036,97059],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[97112,97122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97124,97129]},{"pos":[97138,97150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[97156,97176],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[97226,97236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97238,97243]},{"pos":[97252,97264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[97270,97285],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[97287,97368]},{"pos":[97413,97423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97425,97430]},{"pos":[97439,97451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[97453,97513]},{"pos":[97519,97533],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[97535,97586]},{"pos":[97638,97648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97650,97655]},{"pos":[97664,97676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[97678,97726]},{"pos":[97733,97740],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[97742,97821]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[97822,97917]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[97918,98052]},{"pos":[98058,98071],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[98073,98112]},{"pos":[98165,98175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[98177,98182]},{"content":"mode","pos":[98196,98200]},{"pos":[98209,98221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[98223,98259]},{"pos":[98266,98273],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[98275,98328]},{"content":"Calculate the height according to the following table:","pos":[98329,98383]},{"content":"Mode.","pos":[98387,98392]},{"content":"Height calculation.","pos":[98406,98425]},{"content":"-1 Exact.","pos":[98613,98622]},{"content":"The exact height in pixels of the controls is used.","pos":[98632,98683]},{"content":"0 Auto.","pos":[98726,98733]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[98745,98834]},{"content":"1 Column height.","pos":[98839,98855]},{"content":"The layout of the form determines the height of the control.","pos":[98858,98918]},{"content":"The height and height calculation mode can be set separately.","pos":[98951,99012]},{"pos":[99018,99035],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[99037,99099]},{"pos":[99146,99156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[99158,99163]},{"pos":[99172,99184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[99186,99207]},{"pos":[99214,99221],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[99223,99277]},{"content":"Mode.","pos":[99281,99286]},{"content":"Height Calculation.","pos":[99298,99317]},{"content":"Exact.","pos":[99503,99509]},{"content":"The exact height in pixels of the controls is used.","pos":[99520,99571]},{"content":"Auto.","pos":[99614,99619]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[99631,99720]},{"content":"Column height.","pos":[99725,99739]},{"content":"The layout of the form determines the height of the control.","pos":[99742,99802]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[99835,99920]},{"pos":[99926,99944],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[99946,99985]},{"pos":[100033,100043],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100045,100050]},{"pos":[100059,100071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[100073,100094]},{"pos":[100101,100108],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[100110,100200]},{"pos":[100206,100221],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[100223,100327]},{"pos":[100372,100382],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100384,100389]},{"pos":[100398,100410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[100412,100467]},{"pos":[100474,100481],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.The help text must not exceed 250 characters.","pos":[100483,100601]},{"pos":[100607,100629],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[100681,100691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100693,100698]},{"pos":[100707,100719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100725,100734],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[100736,100768]},{"pos":[100796,100808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[100810,100832]},{"pos":[100838,100856],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[100858,100934]},{"pos":[100975,100987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[100989,101063]},{"pos":[101069,101080],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[101131,101141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101143,101148]},{"content":"mode","pos":[101162,101166]},{"pos":[101175,101187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101193,101208],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[101253,101263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101265,101270]},{"pos":[101279,101291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101297,101313],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[101359,101369],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101371,101376]},{"pos":[101385,101397],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101403,101414],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[101416,101573]},{"pos":[101614,101624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101626,101631]},{"pos":[101640,101652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[101654,101722]},{"pos":[101729,101736],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[101738,101832]},{"content":"Begins with a letter.","pos":[101838,101859]},{"content":"Doesn't exceed 250 characters.","pos":[101864,101894]},{"content":"Can include numbers and underscore characters.","pos":[101899,101945]},{"content":"Cannot include punctuation or spaces.","pos":[101950,101987]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[101992,102110]},{"pos":[102116,102139],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[102192,102202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102204,102209]},{"pos":[102218,102230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102236,102254],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[102322,102332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102334,102339]},{"pos":[102348,102360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102366,102377],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[102426,102436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102438,102443]},{"pos":[102452,102464],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102470,102481],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[102522,102532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102534,102539]},{"pos":[102548,102560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102566,102576],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[102626,102636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102638,102643]},{"content":"mode","pos":[102657,102661]},{"pos":[102670,102682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102688,102702],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[102746,102756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102758,102763]},{"pos":[102772,102784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102790,102805],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[102850,102860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102862,102867]},{"pos":[102876,102888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102894,102905],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[102946,102956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102958,102963]},{"pos":[102972,102984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102990,103005],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[103050,103060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103062,103067]},{"pos":[103076,103088],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103094,103113],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[103162,103172],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103174,103179]},{"pos":[103188,103200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103206,103226],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[103276,103286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103288,103293]},{"pos":[103302,103314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103320,103342],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[103411,103421],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103423,103428]},{"content":"mode","pos":[103442,103446]},{"pos":[103455,103467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103473,103499],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[103564,103574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[103576,103580]},{"pos":[103589,103601],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103607,103634],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[103691,103701],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103703,103708]},{"pos":[103717,103729],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103735,103749],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[103801,103811],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103813,103818]},{"pos":[103827,103839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103845,103857],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[103859,103897]},{"pos":[103949,103959],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103961,103966]},{"content":"mode","pos":[103980,103984]},{"pos":[103993,104005],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[104007,104042]},{"pos":[104049,104056],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[104058,104164]},{"content":"Mode.","pos":[104168,104173]},{"content":"Width calculation.","pos":[104186,104204]},{"content":"-1 Exact.","pos":[104390,104399]},{"content":"The exact width in pixels of the controls is used.","pos":[104408,104458]},{"content":"0 Auto.","pos":[104501,104508]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[104519,104607]},{"content":"1 Column width.","pos":[104612,104627]},{"content":"The layout of the form determines the width of the control.","pos":[104630,104689]},{"content":"The width and width calculation mode can be set separately.","pos":[104722,104781]},{"pos":[104787,104803],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[104805,104867]},{"pos":[104913,104923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104925,104930]},{"pos":[104939,104951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[104953,105014]},{"pos":[105021,105028],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[105030,105083]},{"content":"Mode.","pos":[105087,105092]},{"content":"Width Calculation.","pos":[105103,105121]},{"content":"Exact.","pos":[105305,105311]},{"content":"The exact width in pixels of the controls is used.","pos":[105321,105371]},{"content":"Auto.","pos":[105414,105419]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[105430,105518]},{"content":"Column width.","pos":[105523,105536]},{"content":"The layout of the form determines the width of the control.","pos":[105539,105598]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[105631,105714]},{"pos":[105720,105737],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[105739,105777]},{"pos":[105824,105834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[105836,105841]},{"pos":[105850,105862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[105864,105899]},{"pos":[105906,105913],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[105915,105988]},{"pos":[105994,106023],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[106141,106151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[106153,106169]},{"content":"objectMethodToCall","pos":[106183,106201]},{"content":"overrideObject","pos":[106215,106229]},{"pos":[106236,106266],"content":"Class FormBuildCheckBoxControl","linkify":"Class FormBuildCheckBoxControl","nodes":[{"content":"Class FormBuildCheckBoxControl","pos":[0,30]}]},{"content":"The FormBuildCheckBoxControl class lets you create, read, update, and delete X++ code and metadata.","pos":[106328,106427]},{"pos":[106433,106440],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[106442,106552]},{"pos":[106558,106566],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[106572,106579],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[106583,106589]},{"content":"Description","pos":[106693,106704]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[107083,107129],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[107193,107233]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[107333,107376],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[107443,107510]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[107583,107632],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[107693,107791]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[107833,107874],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[107943,107992]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[108083,108118],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[108193,108254]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[108333,108374],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[108583,108620],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[108693,108738]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[108833,108905],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[108943,109010]},{"content":"public int containerId()","pos":[109083,109107]},{"content":"Retrieves the ID of the parent container for the control.","pos":[109193,109250]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[109333,109377],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[109583,109642],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[109833,109876],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[110083,110119],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[110333,110375],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[110583,110623],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that is used by the control or the form.","pos":[110693,110760]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[110833,110872],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[111083,111117],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[111193,111274]},{"content":"public boolean drawFocusRect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[111333,111380],"source":"public boolean drawFocusRect(\\[boolean value\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[111583,111624],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[111693,111744]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[111833,111874],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[111943,111994]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[112083,112125],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[112193,112232]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[112333,112369],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[112443,112505]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[112583,112620],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[112693,112732]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[112833,112867],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[112943,113047]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[113083,113124],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[113333,113348]},{"content":"Retrieves the ID of the control.","pos":[113443,113475]},{"content":"public boolean isContainer()","pos":[113583,113611]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[113693,113769]},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[113833,113864],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[113943,113980]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114083,114123],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114333,114368],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114583,114626],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[114833,114868],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115083,115122],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115333,115379],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115583,115619],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[115833,115880],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[116083,116124],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[116333,116375],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[116583,116628],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[116833,116872],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[117083,117131],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[117333,117379],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[117583,117623],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[117833,117874],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[118083,118123],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[118333,118367],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[118583,118618],"source":"public int leftValue(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[118833,118863],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[118943,119094]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119099,119141],"source":"public int neededPermission(\\[int value\\])"},{"content":"public boolean optionalRecordControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[119349,119404],"source":"public boolean optionalRecordControl(\\[boolean value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119599,119635],"source":"public int promptrect(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[119849,119906],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[120099,120142],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[120349,120387],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[120459,120586]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[120599,120630],"source":"public int style(\\[int value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[120849,120888],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[121099,121132],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[121349,121383],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[121599,121629],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[121849,121883],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122099,122137],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122349,122388],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int value(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122599,122630],"source":"public int value(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[122849,122909],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[123099,123153],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[123349,123395],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[123599,123637],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[123849,123890],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[124099,124140],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[124209,124247]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[124349,124384],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[124459,124521]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[124599,124635],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[124709,124747]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[124849,124956],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[125102,125121],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[125123,125163]},{"pos":[125220,125230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[125232,125237]},{"pos":[125246,125258],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[125260,125316]},{"pos":[125323,125330],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[125332,125411]},{"pos":[125417,125433],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[125435,125502]},{"pos":[125556,125566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[125568,125573]},{"pos":[125582,125594],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[125596,125648]},{"pos":[125655,125662],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[125664,125786]},{"pos":[125792,125814],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[125816,125914]},{"pos":[125974,125984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[125986,125991]},{"pos":[126000,126012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[126014,126093]},{"pos":[126100,126107],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[126109,126146]},{"pos":[126152,126174],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[126176,126225]},{"pos":[126277,126287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[126289,126294]},{"pos":[126303,126315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[126317,126361]},{"pos":[126368,126375],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[126377,126445]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[126451,126521]},{"content":"The second byte contains a value for green.","pos":[126526,126569]},{"content":"The third byte contains a value for blue.","pos":[126574,126615]},{"content":"The high-order byte must be zero.","pos":[126620,126653]},{"content":"The maximum value for a single byte is 255.","pos":[126658,126701]},{"pos":[126707,126723],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[126725,126786]},{"pos":[126832,126842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[126844,126849]},{"pos":[126858,126870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[126872,126933]},{"pos":[126939,126961],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[127013,127023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[127025,127030]},{"pos":[127039,127051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[127057,127075],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[127077,127122]},{"pos":[127170,127180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[127182,127187]},{"pos":[127196,127208],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[127210,127253]},{"pos":[127260,127267],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[127269,127330]},{"content":"Value.","pos":[127334,127340]},{"content":"Style.","pos":[127343,127349]},{"content":"0","pos":[127420,127421]},{"content":"Default.","pos":[127429,127437]},{"content":"1","pos":[127463,127464]},{"content":"The MicrosoftWindows palette.","pos":[127472,127501]},{"content":"2","pos":[127506,127507]},{"content":"The true-color scheme.","pos":[127515,127537]},{"pos":[127552,127575],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[127577,127644]},{"pos":[127727,127737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[127739,127744]},{"pos":[127753,127765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[127767,127839]},{"pos":[127846,127853],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[127855,127936]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[127937,128030]},{"pos":[128036,128054],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[128056,128113]},{"pos":[128150,128162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[128164,128195]},{"pos":[128201,128226],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[128281,128291],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[128293,128298]},{"pos":[128307,128319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[128325,128357],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[128427,128437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[128439,128444]},{"pos":[128453,128465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[128471,128487],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[128541,128551],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[128553,128558]},{"pos":[128567,128579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[128585,128602],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[128649,128659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[128661,128666]},{"pos":[128675,128687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[128693,128716],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[128769,128779],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[128781,128786]},{"pos":[128795,128807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[128813,128830],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that is used by the control or the form.","pos":[128832,128899]},{"pos":[128950,128960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[128962,128967]},{"pos":[128976,128988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to use.","pos":[128990,129031]},{"pos":[129037,129057],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[129107,129117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[129119,129124]},{"pos":[129133,129145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[129151,129166],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[129168,129249]},{"pos":[129294,129304],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[129306,129311]},{"pos":[129320,129332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[129334,129394]},{"pos":[129400,129420],"content":"Method drawFocusRect","linkify":"Method drawFocusRect","nodes":[{"content":"Method drawFocusRect","pos":[0,20]}]},{"pos":[129478,129488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[129490,129495]},{"pos":[129504,129516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[129522,129536],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[129538,129589]},{"pos":[129641,129651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[129653,129658]},{"pos":[129667,129679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[129681,129729]},{"pos":[129736,129743],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[129745,129824]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[129825,129920]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[129921,130055]},{"pos":[130061,130083],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[130085,130136]},{"pos":[130188,130198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[130200,130205]},{"pos":[130214,130226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[130228,130272]},{"pos":[130279,130286],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[130288,130356]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[130362,130432]},{"content":"The second byte contains a value for green.","pos":[130437,130480]},{"content":"The third byte contains a value for blue.","pos":[130485,130526]},{"content":"The high-order byte must be zero.","pos":[130531,130564]},{"content":"The maximum value for a single byte is 255.","pos":[130569,130612]},{"pos":[130618,130631],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[130633,130672]},{"pos":[130725,130735],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[130737,130742]},{"content":"mode","pos":[130756,130760]},{"pos":[130769,130781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[130783,130819]},{"pos":[130826,130833],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[130835,130942]},{"content":"Mode.","pos":[130946,130951]},{"content":"Height calculation.","pos":[130965,130984]},{"content":"-1 Exact.","pos":[131172,131181]},{"content":"The exact height in pixels of the controls is used.","pos":[131191,131242]},{"content":"0 Auto.","pos":[131285,131292]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[131304,131393]},{"content":"1 Column height.","pos":[131398,131414]},{"content":"The layout of the form determines the height of the control.","pos":[131417,131477]},{"content":"The height and height calculation mode can be set separately.","pos":[131510,131571]},{"pos":[131577,131594],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[131596,131658]},{"pos":[131705,131715],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[131717,131722]},{"pos":[131731,131743],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[131745,131766]},{"pos":[131773,131780],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[131782,131836]},{"content":"Mode.","pos":[131840,131845]},{"content":"Height Calculation.","pos":[131857,131876]},{"content":"Exact.","pos":[132062,132068]},{"content":"The exact height in pixels of the controls is used.","pos":[132079,132130]},{"content":"Auto.","pos":[132173,132178]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[132190,132279]},{"content":"Column height.","pos":[132284,132298]},{"content":"The layout of the form determines the height of the control.","pos":[132301,132361]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[132394,132479]},{"pos":[132485,132503],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[132505,132544]},{"pos":[132592,132602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[132604,132609]},{"pos":[132618,132630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[132632,132653]},{"pos":[132660,132667],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[132669,132759]},{"pos":[132765,132780],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[132782,132886]},{"pos":[132931,132941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[132943,132948]},{"pos":[132957,132969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[132971,133026]},{"pos":[133033,133040],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[133042,133110]},{"content":"The help text must not exceed 250 characters.","pos":[133111,133156]},{"pos":[133162,133184],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[133236,133246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[133248,133253]},{"pos":[133262,133274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[133280,133289],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[133291,133323]},{"pos":[133351,133363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[133365,133387]},{"pos":[133393,133411],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[133413,133489]},{"pos":[133530,133542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[133544,133618]},{"pos":[133624,133636],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[133638,133675]},{"pos":[133717,133727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[133729,133734]},{"pos":[133743,133755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[133757,133795]},{"pos":[133802,133809],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[133811,133889]},{"content":"The label property value cannot exceed 250 characters.","pos":[133890,133944]},{"pos":[133950,133971],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[134022,134032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[134034,134039]},{"pos":[134048,134060],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134066,134082],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[134128,134138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[134140,134145]},{"pos":[134154,134166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134172,134196],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[134250,134260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[134262,134267]},{"pos":[134276,134288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134294,134310],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[134356,134366],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[134368,134373]},{"pos":[134382,134394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134400,134420],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[134470,134480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[134482,134487]},{"pos":[134496,134508],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134514,134541],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[134598,134608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[134610,134615]},{"pos":[134624,134636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134642,134659],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[134706,134716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[134718,134723]},{"pos":[134732,134744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134750,134768],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[134826,134836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[134838,134843]},{"content":"mode","pos":[134857,134861]},{"pos":[134870,134882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[134888,134910],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[134962,134972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[134974,134979]},{"pos":[134988,135000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135006,135029],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[135082,135092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135094,135099]},{"pos":[135108,135120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135126,135144],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[135200,135210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135212,135217]},{"pos":[135226,135238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135244,135264],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[135314,135324],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135326,135331]},{"pos":[135340,135352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135358,135379],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[135438,135448],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135450,135455]},{"pos":[135464,135476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135482,135499],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[135556,135566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135568,135573]},{"content":"mode","pos":[135587,135591]},{"pos":[135600,135612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135618,135639],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[135690,135700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135702,135707]},{"pos":[135716,135728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135734,135756],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[135808,135818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135820,135825]},{"pos":[135834,135846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135852,135863],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[135914,135924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135926,135931]},{"content":"mode","pos":[135945,135949]},{"pos":[135958,135970],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[135976,135991],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[136036,136046],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[136048,136053]},{"pos":[136062,136074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[136080,136096],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[136142,136152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[136154,136159]},{"pos":[136168,136180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[136186,136197],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[136199,136350]},{"pos":[136391,136401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[136403,136408]},{"content":"The name to assign to the control.","pos":[136411,136445]},{"pos":[136452,136464],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[136466,136530]},{"pos":[136537,136544],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[136546,136640]},{"content":"It must start with a letter.","pos":[136646,136674]},{"content":"It cannot exceed 250 characters.","pos":[136679,136711]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[136716,136770],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[136775,136815]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[136820,136930]},{"pos":[136936,136959],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[137012,137022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137024,137029]},{"pos":[137038,137050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137056,137084],"content":"Method optionalRecordControl","linkify":"Method optionalRecordControl","nodes":[{"content":"Method optionalRecordControl","pos":[0,28]}]},{"pos":[137150,137160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137162,137167]},{"pos":[137176,137188],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137194,137211],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[137258,137268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137270,137275]},{"pos":[137284,137296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137302,137320],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[137388,137398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137400,137405]},{"pos":[137414,137426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137432,137448],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[137502,137512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137514,137519]},{"pos":[137528,137540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137546,137557],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[137559,137686]},{"pos":[137735,137745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137747,137752]},{"content":"The value to assign to the skip property of the control.","pos":[137755,137811]},{"pos":[137818,137830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[137832,137938]},{"pos":[137944,137956],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[137998,138008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138010,138015]},{"pos":[138024,138036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138042,138052],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[138102,138112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138114,138119]},{"content":"mode","pos":[138133,138137]},{"pos":[138146,138158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138164,138178],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[138222,138232],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138234,138239]},{"pos":[138248,138260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138266,138281],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[138326,138336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138338,138343]},{"pos":[138352,138364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138370,138381],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[138422,138432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138434,138439]},{"pos":[138448,138460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138466,138481],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[138526,138536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138538,138543]},{"pos":[138552,138564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138570,138589],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[138638,138648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138650,138655]},{"pos":[138664,138676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138682,138702],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[138752,138762],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138764,138769]},{"pos":[138778,138790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138796,138808],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[138850,138860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138862,138867]},{"pos":[138876,138888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[138894,138916],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[138985,138995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138997,139002]},{"content":"mode","pos":[139016,139020]},{"pos":[139029,139041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[139047,139073],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[139138,139148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[139150,139154]},{"pos":[139163,139175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[139181,139208],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[139265,139275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[139277,139282]},{"pos":[139291,139303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[139309,139328],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[139377,139387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[139389,139394]},{"pos":[139403,139415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[139421,139435],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[139487,139497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[139499,139504]},{"pos":[139513,139525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[139531,139543],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[139545,139583]},{"pos":[139635,139645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[139647,139652]},{"content":"mode","pos":[139666,139670]},{"pos":[139679,139691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[139693,139728]},{"pos":[139735,139742],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[139744,139797]},{"content":"Calculate the width according to the following table:","pos":[139798,139851]},{"content":"Mode.","pos":[139855,139860]},{"content":"Width calculation.","pos":[139873,139891]},{"content":"-1 Exact.","pos":[140077,140086]},{"content":"The exact width in pixels of the controls is used.","pos":[140095,140145]},{"content":"0 Auto.","pos":[140188,140195]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[140206,140294]},{"content":"1 Column width.","pos":[140299,140314]},{"content":"The layout of the form determines the width of the control.","pos":[140317,140376]},{"content":"The width and width calculation mode can be set separately.","pos":[140409,140468]},{"pos":[140474,140490],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[140492,140554]},{"pos":[140600,140610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[140612,140617]},{"pos":[140626,140638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[140640,140701]},{"pos":[140708,140715],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[140717,140770]},{"content":"Mode.","pos":[140774,140779]},{"content":"Width Calculation.","pos":[140790,140808]},{"content":"Exact.","pos":[140992,140998]},{"content":"The exact width in pixels of the controls is used.","pos":[141008,141058]},{"content":"Auto.","pos":[141101,141106]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[141117,141205]},{"content":"Column width.","pos":[141210,141223]},{"content":"The layout of the form determines the width of the control.","pos":[141226,141285]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[141318,141401]},{"pos":[141407,141424],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[141426,141464]},{"pos":[141511,141521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141523,141528]},{"pos":[141537,141549],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[141551,141586]},{"pos":[141593,141600],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[141602,141675]},{"pos":[141681,141710],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[141828,141838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[141840,141856]},{"content":"objectMethodToCall","pos":[141870,141888]},{"content":"overrideObject","pos":[141902,141916]},{"pos":[141923,141953],"content":"Class FormBuildComboBoxControl","linkify":"Class FormBuildComboBoxControl","nodes":[{"content":"Class FormBuildComboBoxControl","pos":[0,30]}]},{"content":"The FormBuildComboBoxControl class lets you create, read, update, and delete X++ code and metadata.","pos":[142015,142114]},{"pos":[142120,142127],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[142129,142239]},{"pos":[142245,142253],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[142259,142266],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[142270,142276]},{"content":"Description","pos":[142380,142391]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[142782,142828],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[142892,142932]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[143038,143081],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[143148,143215]},{"content":"public boolean appendNew(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[143294,143337],"source":"public boolean appendNew(\\[boolean value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[143550,143586],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[143806,143855],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[143916,144014]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[144062,144103],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[144172,144221]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[144318,144353],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[144428,144490]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[144574,144604],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[144684,144759]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[144830,144862],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[144940,144996]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[145086,145127],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[145342,145380],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[145452,145495]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[145598,145635],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[145708,145753]},{"content":"public int comboType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[145854,145889],"source":"public int comboType(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[146110,146182],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[146220,146287]},{"content":"public int containerId()","pos":[146366,146390]},{"content":"Retrieves the ID of the parent container for the control.","pos":[146476,146533]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[146622,146666],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[146878,146937],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[147134,147177],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[147390,147426],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[147646,147688],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[147902,147942],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[148012,148084]},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[148158,148216],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[148414,148466],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[148670,148714],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[148926,148965],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[149182,149216],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[149292,149373]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[149438,149479],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[149548,149599]},{"content":"public EnumId enumType(<ph id=\"ph1\">\\[</ph>EnumId value<ph id=\"ph2\">\\]</ph>)","pos":[149694,149734],"source":"public EnumId enumType(\\[EnumId value\\])"},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[149950,150014],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[150206,150246],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[150462,150492],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[150572,150629]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[150718,150752],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[150828,150885]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[150974,151015],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[151084,151135]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[151230,151272],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[151340,151379]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[151486,151522],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[151596,151658]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[151742,151779],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[151852,151891]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[151998,152032],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[152108,152212]},{"content":"public boolean hideFirstEntry(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[152254,152302],"source":"public boolean hideFirstEntry(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[152510,152551],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[152766,152781]},{"content":"Retrieves the ID of the control.","pos":[152876,152908]},{"content":"public boolean isContainer()","pos":[153022,153050]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[153132,153208]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[153278,153318],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public int item(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[153534,153564],"source":"public int item(\\[int value\\])"},{"content":"public int items(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[153790,153821],"source":"public int items(\\[int value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[154046,154077],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[154156,154193]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[154302,154342],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[154558,154593],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[154814,154857],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[155070,155105],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[155326,155365],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[155582,155628],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[155838,155874],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[156094,156141],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[156350,156391],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[156606,156648],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[156862,156907],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[157118,157157],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[157374,157422],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[157630,157676],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[157886,157926],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[158142,158183],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[158398,158438],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[158654,158688],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[158910,158945],"source":"public int leftValue(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[159166,159196],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[159276,159433]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[159438,159480],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[159694,159730],"source":"public int promptrect(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[159950,160007],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public int selection(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[160206,160241],"source":"public int selection(\\[int value\\])"},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[160462,160505],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[160718,160756],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[160828,160955]},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[160974,161004],"source":"public str text(\\[str value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[161230,161269],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[161486,161519],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[161742,161776],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[161998,162028],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[162254,162297],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[162364,162431]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[162510,162544],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[162766,162804],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[163022,163061],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[163278,163338],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[163534,163588],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[163790,163836],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[164046,164084],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[164302,164343],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[164558,164599],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[164668,164706]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[164814,164849],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[164924,164986]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[165070,165106],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[165180,165218]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[165326,165433],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[165585,165604],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[165606,165646]},{"pos":[165703,165713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165715,165720]},{"pos":[165729,165741],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[165743,165799]},{"pos":[165806,165813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[165815,165894]},{"pos":[165900,165916],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[165918,165985]},{"pos":[166039,166049],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166051,166056]},{"pos":[166065,166077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[166079,166131]},{"pos":[166138,166145],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[166147,166269]},{"pos":[166275,166291],"content":"Method appendNew","linkify":"Method appendNew","nodes":[{"content":"Method appendNew","pos":[0,16]}]},{"pos":[166345,166355],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166357,166362]},{"pos":[166371,166383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166389,166406],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[166453,166463],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166465,166470]},{"pos":[166479,166491],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166497,166519],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[166521,166619]},{"pos":[166679,166689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166691,166696]},{"pos":[166705,166717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[166719,166798]},{"pos":[166805,166812],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[166814,166851]},{"pos":[166857,166879],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[166881,166930]},{"pos":[166982,166992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166994,166999]},{"pos":[167008,167020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[167022,167066]},{"pos":[167073,167080],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[167082,167150]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[167156,167226]},{"content":"The second byte contains a value for green.","pos":[167231,167274]},{"content":"The third byte contains a value for blue.","pos":[167279,167320]},{"content":"The high-order byte must be zero.","pos":[167325,167358]},{"content":"The maximum value for a single byte is 255.","pos":[167363,167406]},{"pos":[167412,167428],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[167430,167492]},{"pos":[167538,167548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[167550,167555]},{"pos":[167564,167576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[167578,167639]},{"pos":[167645,167656],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[167658,167733]},{"pos":[167774,167784],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[167786,167791]},{"pos":[167800,167812],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[167814,167864]},{"pos":[167871,167878],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[167880,167952]},{"content":"0 Use the default font weight.","pos":[167958,167988]},{"content":"1 Thin.","pos":[167993,168000]},{"content":"2 Extra-light.","pos":[168005,168019]},{"content":"3 Light.","pos":[168024,168032]},{"content":"4 Normal.","pos":[168037,168046]},{"content":"5 Medium.","pos":[168051,168060]},{"content":"6 Semibold.","pos":[168065,168076]},{"content":"7 Bold.","pos":[168081,168088]},{"content":"8 Extra-bold.","pos":[168093,168106]},{"content":"9 Heavy.","pos":[168111,168119]},{"pos":[168125,168138],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[168140,168196]},{"pos":[168239,168249],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168251,168256]},{"pos":[168265,168277],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[168279,168323]},{"pos":[168330,168337],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[168339,168431]},{"content":"Value.","pos":[168435,168441]},{"content":"Description.","pos":[168444,168456]},{"content":"0","pos":[168487,168488]},{"content":"Auto.","pos":[168496,168501]},{"content":"1","pos":[168513,168514]},{"content":"3D.","pos":[168522,168525]},{"content":"2","pos":[168539,168540]},{"content":"Single line.","pos":[168548,168560]},{"content":"3","pos":[168565,168566]},{"content":"Flat.","pos":[168574,168579]},{"content":"4","pos":[168591,168592]},{"content":"None.","pos":[168600,168605]},{"pos":[168620,168642],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[168694,168704],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168706,168711]},{"pos":[168720,168732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168738,168757],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[168759,168802]},{"pos":[168851,168861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168863,168868]},{"pos":[168877,168889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[168891,168953]},{"pos":[168960,168967],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[168969,169073]},{"content":"Value.","pos":[169077,169083]},{"content":"Description.","pos":[169086,169098]},{"content":"0","pos":[169145,169146]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169154,169167],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[169179,169180]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169188,169204],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[169213,169214]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169222,169237],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[169247,169249]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169256,169268],"source":"MAC\\_CHARSET"},{"content":"128","pos":[169281,169284]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169290,169307],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[169315,169318]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169324,169339],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[169349,169352]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169358,169373],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[169383,169386]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169392,169412],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[169417,169420]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169426,169440],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[169451,169454]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169460,169476],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[169485,169488]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169494,169513],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[169519,169522]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169528,169543],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[169553,169556]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169562,169578],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[169587,169590]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169596,169615],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[169621,169624]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169630,169642],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[169654,169742]},{"content":"Value.","pos":[169746,169752]},{"content":"Description.","pos":[169755,169767]},{"content":"130","pos":[169802,169805]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169811,169825],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[169829,169924]},{"content":"Value.","pos":[169928,169934]},{"content":"Description.","pos":[169937,169949]},{"content":"177","pos":[169986,169989]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[169995,170010],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[170015,170018]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[170024,170039],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[170043,170129]},{"content":"Value.","pos":[170133,170139]},{"content":"Description.","pos":[170142,170154]},{"content":"222","pos":[170187,170190]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[170196,170209],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[170213,170297]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[170298,170504],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[170510,170528],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[170530,170575]},{"pos":[170623,170633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170635,170640]},{"pos":[170649,170661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[170663,170706]},{"pos":[170713,170720],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[170722,170783]},{"content":"Value.","pos":[170787,170793]},{"content":"Style.","pos":[170796,170802]},{"content":"0","pos":[170873,170874]},{"content":"Default.","pos":[170882,170890]},{"content":"1","pos":[170916,170917]},{"content":"The MicrosoftWindows palette.","pos":[170925,170954]},{"content":"2","pos":[170959,170960]},{"content":"The true-color scheme.","pos":[170968,170990]},{"pos":[171005,171021],"content":"Method comboType","linkify":"Method comboType","nodes":[{"content":"Method comboType","pos":[0,16]}]},{"pos":[171067,171077],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171079,171084]},{"pos":[171093,171105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171111,171134],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[171136,171203]},{"pos":[171286,171296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171298,171303]},{"pos":[171312,171324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[171326,171398]},{"pos":[171405,171412],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[171414,171495]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[171496,171589]},{"pos":[171595,171613],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[171615,171672]},{"pos":[171709,171721],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[171723,171754]},{"pos":[171760,171785],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[171840,171850],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171852,171857]},{"pos":[171866,171878],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171884,171916],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[171986,171996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171998,172003]},{"pos":[172012,172024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[172030,172046],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[172100,172110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172112,172117]},{"pos":[172126,172138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[172144,172161],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[172208,172218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172220,172225]},{"pos":[172234,172246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[172252,172275],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[172328,172338],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172340,172345]},{"pos":[172354,172366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[172372,172389],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[172391,172463]},{"pos":[172514,172524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172526,172531]},{"pos":[172540,172552],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[172554,172606]},{"pos":[172612,172632],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[172699,172709],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172711,172716]},{"content":"mode","pos":[172730,172734]},{"pos":[172743,172755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[172761,172785],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[172848,172858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[172860,172864]},{"pos":[172873,172885],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[172891,172916],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[172971,172981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172983,172988]},{"pos":[172997,173009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173015,173035],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[173085,173095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[173097,173102]},{"pos":[173111,173123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173129,173144],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[173146,173227]},{"pos":[173272,173282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[173284,173289]},{"pos":[173298,173310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[173312,173372]},{"pos":[173378,173392],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[173394,173445]},{"pos":[173497,173507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[173509,173514]},{"pos":[173523,173535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[173537,173585]},{"pos":[173592,173599],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[173601,173680]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[173681,173776]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[173777,173911]},{"pos":[173917,173932],"content":"Method enumType","linkify":"Method enumType","nodes":[{"content":"Method enumType","pos":[0,15]}]},{"pos":[173983,173993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[173995,174000]},{"pos":[174009,174021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174027,174050],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[174125,174135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[174137,174142]},{"pos":[174151,174163],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174169,174190],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[174241,174251],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[174253,174258]},{"pos":[174267,174279],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174285,174296],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[174298,174355]},{"pos":[174396,174406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[174408,174413]},{"pos":[174422,174434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[174436,174491]},{"pos":[174497,174512],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[174514,174571]},{"pos":[174616,174626],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[174628,174633]},{"pos":[174642,174654],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[174656,174689]},{"pos":[174695,174717],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[174719,174770]},{"pos":[174822,174832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[174834,174839]},{"pos":[174848,174860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[174862,174906]},{"pos":[174913,174920],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[174922,174990]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[174996,175066]},{"content":"The second byte contains a value for green.","pos":[175071,175114]},{"content":"The third byte contains a value for blue.","pos":[175119,175160]},{"content":"The high-order byte must be zero.","pos":[175165,175198]},{"content":"The maximum value for a single byte is 255.","pos":[175203,175246]},{"pos":[175252,175265],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[175267,175306]},{"pos":[175359,175369],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175371,175376]},{"content":"mode","pos":[175390,175394]},{"pos":[175403,175415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[175417,175453]},{"pos":[175460,175467],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[175469,175522]},{"content":"Calculate the height according to the following table:","pos":[175523,175577]},{"content":"Mode.","pos":[175581,175586]},{"content":"Height calculation.","pos":[175600,175619]},{"content":"-1 Exact.","pos":[175807,175816]},{"content":"The exact height in pixels of the controls is used.","pos":[175826,175877]},{"content":"0 Auto.","pos":[175920,175927]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[175939,176028]},{"content":"1 Column height.","pos":[176033,176049]},{"content":"The layout of the form determines the height of the control.","pos":[176052,176112]},{"content":"The height and height calculation mode can be set separately.","pos":[176145,176206]},{"pos":[176212,176229],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[176231,176293]},{"pos":[176340,176350],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[176352,176357]},{"pos":[176366,176378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[176380,176401]},{"pos":[176408,176415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[176417,176471]},{"content":"Mode.","pos":[176475,176480]},{"content":"Height Calculation.","pos":[176492,176511]},{"content":"Exact.","pos":[176697,176703]},{"content":"The exact height in pixels of the controls is used.","pos":[176714,176765]},{"content":"Auto.","pos":[176808,176813]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[176825,176914]},{"content":"Column height.","pos":[176919,176933]},{"content":"The layout of the form determines the height of the control.","pos":[176936,176996]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[177029,177114]},{"pos":[177120,177138],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[177140,177179]},{"pos":[177227,177237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177239,177244]},{"pos":[177253,177265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[177267,177288]},{"pos":[177295,177302],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[177304,177394]},{"pos":[177400,177415],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[177417,177521]},{"pos":[177566,177576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177578,177583]},{"pos":[177592,177604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[177606,177661]},{"pos":[177668,177675],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialogue box.","pos":[177677,177752]},{"content":"The help text must not exceed 250 characters.","pos":[177753,177798]},{"pos":[177804,177825],"content":"Method hideFirstEntry","linkify":"Method hideFirstEntry","nodes":[{"content":"Method hideFirstEntry","pos":[0,21]}]},{"pos":[177884,177894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177896,177901]},{"pos":[177910,177922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177928,177950],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[178002,178012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178014,178019]},{"pos":[178028,178040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178046,178055],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[178057,178089]},{"pos":[178117,178129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[178131,178153]},{"pos":[178159,178177],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[178179,178255]},{"pos":[178296,178308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[178310,178384]},{"pos":[178390,178403],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[178454,178464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178466,178471]},{"pos":[178480,178492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178498,178509],"content":"Method item","linkify":"Method item","nodes":[{"content":"Method item","pos":[0,11]}]},{"pos":[178550,178560],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178562,178567]},{"pos":[178576,178588],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178594,178606],"content":"Method items","linkify":"Method items","nodes":[{"content":"Method items","pos":[0,12]}]},{"pos":[178648,178658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178660,178665]},{"pos":[178674,178686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178692,178704],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[178706,178743]},{"pos":[178785,178795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178797,178802]},{"pos":[178811,178823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[178825,178863]},{"pos":[178870,178877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[178879,179011]},{"pos":[179017,179038],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[179089,179099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179101,179106]},{"pos":[179115,179127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179133,179149],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[179195,179205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179207,179212]},{"pos":[179221,179233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179239,179263],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[179317,179327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179329,179334]},{"pos":[179343,179355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179361,179377],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[179423,179433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179435,179440]},{"pos":[179449,179461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179467,179487],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[179537,179547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179549,179554]},{"pos":[179563,179575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179581,179608],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[179665,179675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179677,179682]},{"pos":[179691,179703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179709,179726],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[179773,179783],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179785,179790]},{"pos":[179799,179811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179817,179835],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[179893,179903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179905,179910]},{"content":"mode","pos":[179924,179928]},{"pos":[179937,179949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179955,179977],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[180029,180039],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180041,180046]},{"pos":[180055,180067],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[180073,180096],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[180149,180159],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180161,180166]},{"pos":[180175,180187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[180193,180211],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[180267,180277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180279,180284]},{"pos":[180293,180305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[180311,180331],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[180381,180391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180393,180398]},{"pos":[180407,180419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[180425,180446],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[180505,180515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180517,180522]},{"pos":[180531,180543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[180549,180566],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[180623,180633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180635,180640]},{"content":"mode","pos":[180654,180658]},{"pos":[180667,180679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[180685,180706],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[180757,180767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180769,180774]},{"pos":[180783,180795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[180801,180823],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[180875,180885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180887,180892]},{"pos":[180901,180913],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[180919,180930],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[180981,180991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180993,180998]},{"content":"mode","pos":[181012,181016]},{"pos":[181025,181037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[181043,181058],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[181103,181113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[181115,181120]},{"pos":[181129,181141],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[181147,181163],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[181209,181219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[181221,181226]},{"pos":[181235,181247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[181253,181264],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[181266,181423]},{"pos":[181464,181474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[181476,181481]},{"pos":[181490,181502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[181504,181572]},{"pos":[181579,181586],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[181588,181682]},{"content":"Begins with a letter.","pos":[181688,181709]},{"content":"Doesn't exceed 250 characters.","pos":[181714,181744]},{"content":"Can include numbers and underscore characters.","pos":[181749,181795]},{"content":"Cannot include punctuation or spaces.","pos":[181800,181837]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.","pos":[181842,181972]},{"pos":[181978,182001],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[182054,182064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182066,182071]},{"pos":[182080,182092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[182098,182115],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[182162,182172],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182174,182179]},{"pos":[182188,182200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[182206,182224],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[182292,182302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182304,182309]},{"pos":[182318,182330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[182336,182352],"content":"Method selection","linkify":"Method selection","nodes":[{"content":"Method selection","pos":[0,16]}]},{"pos":[182398,182408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182410,182415]},{"pos":[182424,182436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[182442,182458],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[182512,182522],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182524,182529]},{"pos":[182538,182550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[182556,182567],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[182569,182696]},{"pos":[182745,182755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182757,182762]},{"content":"The value to assign to the skip property of the control.","pos":[182765,182821]},{"pos":[182828,182840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[182842,182948]},{"pos":[182954,182965],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[183006,183016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183018,183023]},{"pos":[183032,183044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183050,183060],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[183110,183120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183122,183127]},{"content":"mode","pos":[183141,183145]},{"pos":[183154,183166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183172,183186],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[183230,183240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183242,183247]},{"pos":[183256,183268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183274,183289],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[183334,183344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183346,183351]},{"pos":[183360,183372],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183378,183389],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[183430,183440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183442,183447]},{"pos":[183456,183468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183474,183490],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[183492,183559]},{"pos":[183613,183623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183625,183630]},{"content":"The value to assign to the underline property of the control.","pos":[183633,183694]},{"pos":[183701,183713],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[183715,183779]},{"pos":[183785,183800],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[183845,183855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183857,183862]},{"pos":[183871,183883],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183889,183908],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[183957,183967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183969,183974]},{"pos":[183983,183995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184001,184021],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[184071,184081],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184083,184088]},{"pos":[184097,184109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184115,184137],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[184206,184216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184218,184223]},{"content":"mode","pos":[184237,184241]},{"pos":[184250,184262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184268,184294],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[184359,184369],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[184371,184375]},{"pos":[184384,184396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184402,184429],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[184486,184496],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184498,184503]},{"pos":[184512,184524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184530,184549],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[184598,184608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184610,184615]},{"pos":[184624,184636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184642,184656],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[184708,184718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184720,184725]},{"pos":[184734,184746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184752,184764],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[184766,184804]},{"pos":[184856,184866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184868,184873]},{"content":"mode","pos":[184887,184891]},{"pos":[184900,184912],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[184914,184949]},{"pos":[184956,184963],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[184965,185018]},{"content":"Calculate the width according to the following table:","pos":[185019,185072]},{"content":"Mode.","pos":[185076,185081]},{"content":"Width calculation.","pos":[185094,185112]},{"content":"-1 Exact.","pos":[185298,185307]},{"content":"The exact width in pixels of the controls is used.","pos":[185316,185366]},{"content":"0 Auto.","pos":[185409,185416]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[185427,185515]},{"content":"1 Column width.","pos":[185520,185535]},{"content":"The layout of the form determines the width of the control.","pos":[185538,185597]},{"content":"The width and width calculation mode can be set separately.","pos":[185630,185689]},{"pos":[185695,185711],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[185713,185775]},{"pos":[185821,185831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185833,185838]},{"pos":[185847,185859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[185861,185922]},{"pos":[185929,185936],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[185938,185991]},{"content":"Mode.","pos":[185995,186000]},{"content":"Width Calculation.","pos":[186011,186029]},{"content":"Exact.","pos":[186213,186219]},{"content":"The exact width in pixels of the controls is used.","pos":[186229,186279]},{"content":"Auto.","pos":[186322,186327]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[186338,186426]},{"content":"Column width.","pos":[186431,186444]},{"content":"The layout of the form determines the width of the control.","pos":[186447,186506]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[186539,186622]},{"pos":[186628,186645],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[186647,186685]},{"pos":[186732,186742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[186744,186749]},{"pos":[186758,186770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[186772,186807]},{"pos":[186814,186821],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[186823,186896]},{"pos":[186902,186931],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[187049,187059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[187061,187077]},{"content":"objectMethodToCall","pos":[187091,187109]},{"content":"overrideObject","pos":[187123,187137]},{"pos":[187144,187179],"content":"Class FormBuildCommandButtonControl","linkify":"Class FormBuildCommandButtonControl","nodes":[{"content":"Class FormBuildCommandButtonControl","pos":[0,35]}]},{"content":"The FormBuildCommandButtonControl class lets you create, read, update, and delete X++ code and metadata.","pos":[187246,187350]},{"pos":[187356,187363],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[187365,187475]},{"pos":[187481,187489],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[187495,187502],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[187506,187512]},{"content":"Description","pos":[187616,187627]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[188006,188052],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[188116,188156]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[188256,188291],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[188506,188549],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[188616,188683]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[188756,188805],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[188866,188964]},{"content":"public boolean autoRefreshData(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[189006,189055],"source":"public boolean autoRefreshData(\\[boolean value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[189256,189297],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[189366,189415]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[189506,189541],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[189616,189678]},{"content":"public boolean big(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[189756,189793],"source":"public boolean big(\\[boolean value\\])"},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[190006,190036],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[190116,190183]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[190256,190288],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[190366,190422]},{"content":"public int buttonDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[190506,190545],"source":"public int buttonDisplay(\\[int value\\])"},{"content":"Gets or sets the appearance of the button control.","pos":[190616,190666]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[190756,190789],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[190866,190905]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[191006,191044],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[191116,191159]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[191256,191293],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[191366,191411]},{"content":"public int command(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[191506,191539],"source":"public int command(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[191756,191828],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[191866,191933]},{"content":"public int containerId()","pos":[192006,192030]},{"content":"Retrieves the ID of the parent container for the control.","pos":[192116,192173]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[192256,192300],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[192506,192548],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public boolean defaultButton(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[192756,192803],"source":"public boolean defaultButton(\\[boolean value\\])"},{"content":"Determines whether the button should be the default button on the form.","pos":[192866,192937]},{"content":"public str disabledImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[193006,193045],"source":"public str disabledImage(\\[str value\\])"},{"content":"Gets or sets the disabled image of the button.","pos":[193116,193162]},{"content":"public int disabledImageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[193256,193303],"source":"public int disabledImageLocation(\\[int value\\])"},{"content":"public int disabledResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[193506,193548],"source":"public int disabledResource(\\[int value\\])"},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[193616,193694]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[193756,193795],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[194006,194040],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[194116,194197]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[194256,194297],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[194366,194417]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[194506,194536],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[194616,194673]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[194756,194790],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[194866,194923]},{"content":"public boolean forcedToOverflow(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[195006,195056],"source":"public boolean forcedToOverflow(\\[boolean value\\])"},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[195256,195297],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[195366,195417]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[195506,195548],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[195616,195655]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[195756,195792],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[195866,195928]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[196006,196043],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[196116,196155]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[196256,196290],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[196366,196470]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[196506,196547],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[196756,196771]},{"content":"Retrieves the ID of the control.","pos":[196866,196898]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[197006,197045],"source":"public int imageLocation(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[197256,197284]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[197366,197442]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[197506,197546],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[197756,197788],"source":"public str keyTip(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[198006,198046],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[198256,198290],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[198506,198541],"source":"public int leftValue(\\[int value\\])"},{"content":"public int multiSelect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[198756,198793],"source":"public int multiSelect(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[199006,199036],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[199116,199267]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[199272,199314],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int needsRecord(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[199522,199559],"source":"public int needsRecord(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[199772,199809],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[200022,200062],"source":"public int normalResource(\\[int value\\])"},{"content":"public str parameters(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[200272,200308],"source":"public str parameters(\\[str value\\])"},{"content":"public boolean primary(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[200522,200563],"source":"public boolean primary(\\[boolean value\\])"},{"content":"public boolean saveRecord(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[200772,200816],"source":"public boolean saveRecord(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[201022,201079],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public int shortkey(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[201272,201306],"source":"public int shortkey(\\[int value\\])"},{"content":"public boolean showShortCut(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[201522,201568],"source":"public boolean showShortCut(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[201772,201810],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[201882,202009]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[202022,202053],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[202272,202302],"source":"public str text(\\[str value\\])"},{"content":"public int toggleButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[202522,202560],"source":"public int toggleButton(\\[int value\\])"},{"content":"public int toggleValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[202772,202809],"source":"public int toggleValue(\\[int value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[203022,203061],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[203272,203305],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[203522,203556],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[203772,203802],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[204022,204065],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[204132,204199]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[204272,204306],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[204522,204560],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[204772,204811],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean value(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[205022,205061],"source":"public boolean value(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[205272,205332],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[205522,205576],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[205772,205818],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[206022,206063],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[206272,206313],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[206382,206420]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[206522,206557],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[206632,206694]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[206772,206808],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[206882,206920]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[207022,207129],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[207275,207294],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[207296,207336]},{"pos":[207393,207403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207405,207410]},{"pos":[207419,207431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[207433,207489]},{"pos":[207496,207503],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[207505,207584]},{"pos":[207590,207606],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[207652,207662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207664,207669]},{"pos":[207678,207690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207696,207712],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[207714,207781]},{"pos":[207835,207845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207847,207852]},{"pos":[207861,207873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[207875,207927]},{"pos":[207934,207941],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[207943,208069]},{"pos":[208075,208097],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[208099,208197]},{"pos":[208257,208267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208269,208274]},{"pos":[208283,208295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[208297,208376]},{"pos":[208383,208390],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[208392,208429]},{"pos":[208435,208457],"content":"Method autoRefreshData","linkify":"Method autoRefreshData","nodes":[{"content":"Method autoRefreshData","pos":[0,22]}]},{"pos":[208517,208527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208529,208534]},{"pos":[208543,208555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208561,208583],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[208585,208634]},{"pos":[208686,208696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208698,208703]},{"pos":[208712,208724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[208726,208770]},{"pos":[208777,208784],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[208786,208854]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[208860,208930]},{"content":"The second byte contains a value for green.","pos":[208935,208978]},{"content":"The third byte contains a value for blue.","pos":[208983,209024]},{"content":"The high-order byte must be zero.","pos":[209029,209062]},{"content":"The maximum value for a single byte is 255.","pos":[209067,209110]},{"pos":[209116,209132],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[209134,209196]},{"pos":[209242,209252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209254,209259]},{"pos":[209268,209280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[209282,209343]},{"pos":[209349,209359],"content":"Method big","linkify":"Method big","nodes":[{"content":"Method big","pos":[0,10]}]},{"pos":[209407,209417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209419,209424]},{"pos":[209433,209445],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[209451,209462],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[209464,209531]},{"pos":[209572,209582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209584,209589]},{"pos":[209598,209610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[209612,209662]},{"pos":[209669,209676],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[209678,209750]},{"content":"0 Use the default font weight.","pos":[209756,209786]},{"content":"1 Thin.","pos":[209791,209798]},{"content":"2 Extra-light.","pos":[209803,209817]},{"content":"3 Light.","pos":[209822,209830]},{"content":"4 Normal.","pos":[209835,209844]},{"content":"5 Medium.","pos":[209849,209858]},{"content":"6 Semibold.","pos":[209863,209874]},{"content":"7 Bold.","pos":[209879,209886]},{"content":"8 Extra-bold.","pos":[209891,209904]},{"content":"9 Heavy.","pos":[209909,209917]},{"pos":[209923,209936],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[209938,209994]},{"pos":[210037,210047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210049,210054]},{"pos":[210063,210075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[210077,210121]},{"pos":[210128,210135],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[210137,210229]},{"content":"Value.","pos":[210233,210239]},{"content":"Description.","pos":[210242,210254]},{"content":"0","pos":[210285,210286]},{"content":"Auto.","pos":[210294,210299]},{"content":"1","pos":[210311,210312]},{"content":"3D.","pos":[210320,210323]},{"content":"2","pos":[210337,210338]},{"content":"Single line.","pos":[210346,210358]},{"content":"3","pos":[210363,210364]},{"content":"Flat.","pos":[210372,210377]},{"content":"4","pos":[210389,210390]},{"content":"None.","pos":[210398,210403]},{"pos":[210418,210438],"content":"Method buttonDisplay","linkify":"Method buttonDisplay","nodes":[{"content":"Method buttonDisplay","pos":[0,20]}]},{"content":"Gets or sets the appearance of the button control.","pos":[210440,210490]},{"pos":[210540,210550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210552,210557]},{"pos":[210566,210578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and five, inclusive.","pos":[210580,210624]},{"pos":[210631,210638],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value of the property defines whether the text, the image, or both should be displayed on the button.","pos":[210640,210745]},{"content":"This property also controls relative positions of text and image if both are displayed.The integer value that is returned contains the appearace of the button control as follows:","pos":[210746,210924]},{"content":"Value.","pos":[210928,210934]},{"content":"Description.","pos":[210937,210949]},{"content":"0","pos":[211084,211085]},{"content":"Text only.","pos":[211093,211103]},{"content":"1","pos":[211162,211163]},{"content":"Image Only.","pos":[211171,211182]},{"content":"2","pos":[211240,211241]},{"content":"Text and image; the image is displayed below the text.","pos":[211249,211303]},{"content":"3","pos":[211318,211319]},{"content":"Text and image; the image is displayed above the text.","pos":[211327,211381]},{"content":"4","pos":[211396,211397]},{"content":"Text and image; the image is displayed to the left of the text.","pos":[211405,211468]},{"content":"5","pos":[211474,211475]},{"content":"Text and image; the image is displayed to the right of the text.","pos":[211483,211547]},{"pos":[211555,211569],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[211571,211610]},{"pos":[211654,211664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211666,211671]},{"pos":[211680,211692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[211694,211748]},{"pos":[211754,211773],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[211775,211818]},{"pos":[211867,211877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211879,211884]},{"pos":[211893,211905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[211907,211969]},{"pos":[211976,211983],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[211985,212089]},{"content":"Value.","pos":[212093,212099]},{"content":"Description.","pos":[212102,212114]},{"content":"0","pos":[212161,212162]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212170,212183],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[212195,212196]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212204,212220],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[212229,212230]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212238,212253],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[212263,212265]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212272,212284],"source":"MAC\\_CHARSET"},{"content":"128","pos":[212297,212300]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212306,212323],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[212331,212334]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212340,212355],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[212365,212368]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212374,212389],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[212399,212402]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212408,212428],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[212433,212436]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212442,212456],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[212467,212470]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212476,212492],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[212501,212504]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212510,212529],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[212535,212538]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212544,212559],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[212569,212572]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212578,212594],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[212603,212606]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212612,212631],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[212637,212640]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212646,212658],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of Microsoft Windows.","pos":[212670,212759]},{"content":"Value.","pos":[212763,212769]},{"content":"Description.","pos":[212772,212784]},{"content":"130","pos":[212819,212822]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[212828,212842],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Microsoft Windows.","pos":[212846,212942]},{"content":"Value.","pos":[212946,212952]},{"content":"Description.","pos":[212955,212967]},{"content":"177","pos":[213004,213007]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[213013,213028],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[213033,213036]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[213042,213057],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Microsoft Windows.","pos":[213061,213148]},{"content":"Value.","pos":[213152,213158]},{"content":"Description.","pos":[213161,213173]},{"content":"222","pos":[213206,213209]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[213215,213228],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[213232,213311]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[213312,213518],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[213524,213542],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[213544,213589]},{"pos":[213637,213647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[213649,213654]},{"pos":[213663,213675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[213677,213720]},{"pos":[213727,213734],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[213736,213797]},{"content":"Value.","pos":[213801,213807]},{"content":"Style.","pos":[213810,213816]},{"content":"0","pos":[213889,213890]},{"content":"Default.","pos":[213898,213906]},{"content":"1","pos":[213933,213934]},{"content":"The Microsoft Windows palette.","pos":[213942,213972]},{"content":"2","pos":[213977,213978]},{"content":"The true-color scheme.","pos":[213986,214008]},{"pos":[214024,214038],"content":"Method command","linkify":"Method command","nodes":[{"content":"Method command","pos":[0,14]}]},{"pos":[214082,214092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214094,214099]},{"pos":[214108,214120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[214126,214149],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[214151,214218]},{"pos":[214301,214311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214313,214318]},{"pos":[214327,214339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[214341,214413]},{"pos":[214420,214427],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[214429,214510]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[214511,214604]},{"pos":[214610,214628],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[214630,214687]},{"pos":[214724,214736],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[214738,214769]},{"pos":[214775,214800],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[214855,214865],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214867,214872]},{"pos":[214881,214893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[214899,214922],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[214975,214985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[214987,214992]},{"pos":[215001,215013],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[215019,215039],"content":"Method defaultButton","linkify":"Method defaultButton","nodes":[{"content":"Method defaultButton","pos":[0,20]}]},{"content":"Determines whether the button should be the default button on the form.","pos":[215041,215112]},{"pos":[215170,215180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[215182,215187]},{"pos":[215196,215208],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the button should be the default button; otherwise, false.","pos":[215210,215276]},{"pos":[215282,215302],"content":"Method disabledImage","linkify":"Method disabledImage","nodes":[{"content":"Method disabledImage","pos":[0,20]}]},{"content":"Gets or sets the disabled image of the button.","pos":[215304,215350]},{"pos":[215400,215410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[215412,215417]},{"pos":[215426,215438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The full name of an image file.","pos":[215440,215471]},{"content":"The system supports all of the GDI-supported image formats.","pos":[215472,215531]},{"pos":[215538,215545],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property has precedence over the disabledResource property.","pos":[215547,215611]},{"content":"It is used if both of these properties are set.","pos":[215612,215659]},{"pos":[215665,215693],"content":"Method disabledImageLocation","linkify":"Method disabledImageLocation","nodes":[{"content":"Method disabledImageLocation","pos":[0,28]}]},{"pos":[215751,215761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[215763,215768]},{"pos":[215777,215789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[215795,215818],"content":"Method disabledResource","linkify":"Method disabledResource","nodes":[{"content":"Method disabledResource","pos":[0,23]}]},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[215820,215898]},{"pos":[215951,215961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[215963,215968]},{"pos":[215977,215989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the image to use as the disabled button image.","pos":[215991,216056]},{"content":"Both icon and bitmap images are supported.","pos":[216057,216099]},{"pos":[216105,216125],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[216175,216185],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[216187,216192]},{"pos":[216201,216213],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[216219,216234],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[216236,216317]},{"pos":[216362,216372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[216374,216379]},{"pos":[216388,216400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[216402,216462]},{"pos":[216468,216482],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[216484,216535]},{"pos":[216587,216597],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[216599,216604]},{"pos":[216613,216625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[216627,216675]},{"pos":[216682,216689],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[216691,216766]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[216767,216862]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[216863,216997]},{"pos":[217003,217014],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[217016,217073]},{"pos":[217114,217124],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[217126,217131]},{"pos":[217140,217152],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[217154,217209]},{"pos":[217215,217230],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[217232,217289]},{"pos":[217334,217344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[217346,217351]},{"pos":[217360,217372],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[217374,217407]},{"pos":[217413,217436],"content":"Method forcedToOverflow","linkify":"Method forcedToOverflow","nodes":[{"content":"Method forcedToOverflow","pos":[0,23]}]},{"pos":[217497,217507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[217509,217514]},{"pos":[217523,217535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[217541,217563],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[217565,217616]},{"pos":[217668,217678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[217680,217685]},{"pos":[217694,217706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[217708,217752]},{"pos":[217759,217766],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[217768,217836]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[217842,217912]},{"content":"The second byte contains a value for green.","pos":[217917,217960]},{"content":"The third byte contains a value for blue.","pos":[217965,218006]},{"content":"The high-order byte must be zero.","pos":[218011,218044]},{"content":"The maximum value for a single byte is 255.","pos":[218049,218092]},{"pos":[218098,218111],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[218113,218152]},{"pos":[218205,218215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[218217,218222]},{"content":"mode","pos":[218236,218240]},{"pos":[218249,218261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[218263,218299]},{"pos":[218306,218313],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[218315,218368]},{"content":"Calculate the height according to the following table:","pos":[218369,218423]},{"content":"Mode.","pos":[218427,218432]},{"content":"Height calculation.","pos":[218446,218465]},{"content":"-1 Exact.","pos":[218653,218662]},{"content":"The exact height in pixels of the controls is used.","pos":[218672,218723]},{"content":"0 Auto.","pos":[218766,218773]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[218785,218874]},{"content":"1 Column height.","pos":[218879,218895]},{"content":"The layout of the form determines the height of the control.","pos":[218898,218958]},{"content":"The height and height calculation mode can be set separately.","pos":[218991,219052]},{"pos":[219058,219075],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[219077,219139]},{"pos":[219186,219196],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[219198,219203]},{"pos":[219212,219224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[219226,219247]},{"pos":[219254,219261],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[219263,219317]},{"content":"Mode.","pos":[219321,219326]},{"content":"Height Calculation.","pos":[219338,219357]},{"content":"Exact.","pos":[219543,219549]},{"content":"The exact height in pixels of the controls is used.","pos":[219560,219611]},{"content":"Auto.","pos":[219654,219659]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[219671,219760]},{"content":"Column height.","pos":[219765,219779]},{"content":"The layout of the form determines the height of the control.","pos":[219782,219842]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[219875,219960]},{"pos":[219966,219984],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[219986,220025]},{"pos":[220073,220083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220085,220090]},{"pos":[220099,220111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[220113,220134]},{"pos":[220141,220148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[220150,220240]},{"pos":[220246,220261],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[220263,220367]},{"pos":[220412,220422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220424,220429]},{"pos":[220438,220450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[220452,220507]},{"pos":[220514,220521],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[220523,220591]},{"content":"The help text must not exceed 250 characters.","pos":[220592,220637]},{"pos":[220643,220665],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[220717,220727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220729,220734]},{"pos":[220743,220755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[220761,220770],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[220772,220804]},{"pos":[220832,220844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[220846,220868]},{"pos":[220874,220894],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[220944,220954],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220956,220961]},{"pos":[220970,220982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[220988,221006],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[221008,221084]},{"pos":[221125,221137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[221139,221213]},{"pos":[221219,221232],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[221283,221293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221295,221300]},{"pos":[221309,221321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221327,221340],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[221383,221393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221395,221400]},{"pos":[221409,221421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221427,221438],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[221489,221499],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221501,221506]},{"content":"mode","pos":[221520,221524]},{"pos":[221533,221545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221551,221566],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[221611,221621],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221623,221628]},{"pos":[221637,221649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221655,221671],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[221717,221727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221729,221734]},{"pos":[221743,221755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221761,221779],"content":"Method multiSelect","linkify":"Method multiSelect","nodes":[{"content":"Method multiSelect","pos":[0,18]}]},{"pos":[221827,221837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221839,221844]},{"pos":[221853,221865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221871,221882],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[221884,222035]},{"pos":[222076,222086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222088,222093]},{"content":"The name to assign to the control.","pos":[222096,222130]},{"pos":[222137,222149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[222151,222215]},{"pos":[222222,222229],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[222231,222325]},{"content":"It must start with a letter.","pos":[222331,222359]},{"content":"It cannot exceed 250 characters.","pos":[222364,222396]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[222401,222455],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[222460,222500]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[222505,222615]},{"pos":[222621,222644],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[222697,222707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222709,222714]},{"pos":[222723,222735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[222741,222759],"content":"Method needsRecord","linkify":"Method needsRecord","nodes":[{"content":"Method needsRecord","pos":[0,18]}]},{"pos":[222807,222817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222819,222824]},{"pos":[222833,222845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[222851,222869],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[222917,222927],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[222929,222934]},{"pos":[222943,222955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[222961,222982],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[223033,223043],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223045,223050]},{"pos":[223059,223071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223077,223094],"content":"Method parameters","linkify":"Method parameters","nodes":[{"content":"Method parameters","pos":[0,17]}]},{"pos":[223141,223151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223153,223158]},{"pos":[223167,223179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223185,223199],"content":"Method primary","linkify":"Method primary","nodes":[{"content":"Method primary","pos":[0,14]}]},{"pos":[223251,223261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223263,223268]},{"pos":[223277,223289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223295,223312],"content":"Method saveRecord","linkify":"Method saveRecord","nodes":[{"content":"Method saveRecord","pos":[0,17]}]},{"pos":[223367,223377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223379,223384]},{"pos":[223393,223405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223411,223429],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[223497,223507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223509,223514]},{"pos":[223523,223535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223541,223556],"content":"Method shortkey","linkify":"Method shortkey","nodes":[{"content":"Method shortkey","pos":[0,15]}]},{"pos":[223601,223611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223613,223618]},{"pos":[223627,223639],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223645,223664],"content":"Method showShortCut","linkify":"Method showShortCut","nodes":[{"content":"Method showShortCut","pos":[0,19]}]},{"pos":[223721,223731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223733,223738]},{"pos":[223747,223759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[223765,223776],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[223778,223905]},{"pos":[223954,223964],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223966,223971]},{"content":"The value to assign to the skip property of the control.","pos":[223974,224030]},{"pos":[224037,224049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[224051,224157]},{"pos":[224163,224175],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[224217,224227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224229,224234]},{"pos":[224243,224255],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224261,224272],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[224313,224323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224325,224330]},{"pos":[224339,224351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224357,224376],"content":"Method toggleButton","linkify":"Method toggleButton","nodes":[{"content":"Method toggleButton","pos":[0,19]}]},{"pos":[224425,224435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224437,224442]},{"pos":[224451,224463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224469,224487],"content":"Method toggleValue","linkify":"Method toggleValue","nodes":[{"content":"Method toggleValue","pos":[0,18]}]},{"pos":[224535,224545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224547,224552]},{"pos":[224561,224573],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224579,224589],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[224639,224649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224651,224656]},{"content":"mode","pos":[224670,224674]},{"pos":[224683,224695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224701,224715],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[224759,224769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224771,224776]},{"pos":[224785,224797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224803,224818],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[224863,224873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224875,224880]},{"pos":[224889,224901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[224907,224918],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[224959,224969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[224971,224976]},{"pos":[224985,224997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225003,225019],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[225021,225088]},{"pos":[225142,225152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225154,225159]},{"content":"The value to assign to the underline property of the control.","pos":[225162,225223]},{"pos":[225230,225242],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[225244,225308]},{"pos":[225314,225329],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[225374,225384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225386,225391]},{"pos":[225400,225412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225418,225437],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[225486,225496],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225498,225503]},{"pos":[225512,225524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225530,225550],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[225600,225610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225612,225617]},{"pos":[225626,225638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225644,225656],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[225706,225716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225718,225723]},{"pos":[225732,225744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225750,225772],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[225841,225851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[225853,225858]},{"content":"mode","pos":[225872,225876]},{"pos":[225885,225897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[225903,225929],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[225994,226004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[226006,226010]},{"pos":[226019,226031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[226037,226064],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[226121,226131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226133,226138]},{"pos":[226147,226159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[226165,226179],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[226231,226241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226243,226248]},{"pos":[226257,226269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[226275,226287],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[226289,226327]},{"pos":[226379,226389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226391,226396]},{"content":"mode","pos":[226410,226414]},{"pos":[226423,226435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[226437,226472]},{"pos":[226479,226486],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[226488,226541]},{"content":"Calculate the width according to the following table:","pos":[226542,226595]},{"content":"Mode.","pos":[226599,226604]},{"content":"Width calculation.","pos":[226617,226635]},{"content":"-1 Exact.","pos":[226821,226830]},{"content":"The exact width in pixels of the controls is used.","pos":[226839,226889]},{"content":"0 Auto.","pos":[226932,226939]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[226950,227038]},{"content":"1 Column width.","pos":[227043,227058]},{"content":"The layout of the form determines the width of the control.","pos":[227061,227120]},{"content":"The width and width calculation mode can be set separately.","pos":[227153,227212]},{"pos":[227218,227234],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[227236,227298]},{"pos":[227344,227354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[227356,227361]},{"pos":[227370,227382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[227384,227445]},{"pos":[227452,227459],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[227461,227514]},{"content":"Mode.","pos":[227518,227523]},{"content":"Width Calculation.","pos":[227534,227552]},{"content":"Exact.","pos":[227736,227742]},{"content":"The exact width in pixels of the controls is used.","pos":[227752,227802]},{"content":"Auto.","pos":[227845,227850]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[227861,227949]},{"content":"Column width.","pos":[227954,227967]},{"content":"The layout of the form determines the width of the control.","pos":[227970,228029]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[228062,228145]},{"pos":[228151,228168],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[228170,228208]},{"pos":[228255,228265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[228267,228272]},{"pos":[228281,228293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[228295,228330]},{"pos":[228337,228344],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[228346,228419]},{"pos":[228425,228454],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[228572,228582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[228584,228600]},{"content":"objectMethodToCall","pos":[228614,228632]},{"content":"overrideObject","pos":[228646,228660]},{"pos":[228667,228698],"content":"Class FormBuildContainerControl","linkify":"Class FormBuildContainerControl","nodes":[{"content":"Class FormBuildContainerControl","pos":[0,31]}]},{"pos":[228765,228772],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[228778,228786],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[228792,228799],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[228803,228809]},{"content":"Description","pos":[228913,228924]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[229055,229101],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[229181,229224],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[229307,229356],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[229433,229505],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"public int containerId()","pos":[229559,229583]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[229685,229729],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[229811,229853],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[229937,229976],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230063,230097],"source":"public int dragDrop(\\[int value\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[230189,230230],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[230315,230357],"source":"public int height(int value, \\[int mode\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230441,230477],"source":"public int heightMode(\\[int value\\])"},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230567,230604],"source":"public int heightValue(\\[int value\\])"},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[230693,230727],"source":"public str helpText(\\[str value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[230819,230860],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[230945,230960]},{"content":"public boolean isContainer()","pos":[231071,231099]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[231197,231237],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[231323,231357],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[231449,231484],"source":"public int leftValue(\\[int value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[231575,231642],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[231701,231731],"source":"public str name(\\[str value\\])"},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[231827,231869],"source":"public int neededPermission(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[231953,232010],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[232079,232117],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[232205,232244],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[232331,232364],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[232457,232491],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[232583,232613],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[232709,232743],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[232835,232873],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[232961,233000],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[233087,233134],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[233213,233273],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[233339,233393],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[233465,233511],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[233591,233632],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[233717,233758],"source":"public int width(int value, \\[int mode\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[233843,233878],"source":"public int widthMode(\\[int value\\])"},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[233969,234005],"source":"public int widthValue(\\[int value\\])"},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[234095,234202],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[234224,234243],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"pos":[234300,234310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234312,234317]},{"pos":[234326,234338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234344,234360],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"pos":[234414,234424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234426,234431]},{"pos":[234440,234452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234458,234480],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"pos":[234540,234550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234552,234557]},{"pos":[234566,234578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234584,234607],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"pos":[234690,234700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234702,234707]},{"pos":[234716,234728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234734,234752],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"pos":[234789,234801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234807,234832],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[234887,234897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234899,234904]},{"pos":[234913,234925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234931,234954],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[235007,235017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235019,235024]},{"pos":[235033,235045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235051,235071],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[235121,235131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235133,235138]},{"pos":[235147,235159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235165,235180],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"pos":[235225,235235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235237,235242]},{"pos":[235251,235263],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235269,235283],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"pos":[235335,235345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235347,235352]},{"pos":[235361,235373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235379,235392],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"pos":[235445,235455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235457,235462]},{"content":"mode","pos":[235476,235480]},{"pos":[235489,235501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235507,235524],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"pos":[235571,235581],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235583,235588]},{"pos":[235597,235609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235615,235633],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"pos":[235681,235691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235693,235698]},{"pos":[235707,235719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235725,235740],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"pos":[235785,235795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235797,235802]},{"pos":[235811,235823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235829,235851],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[235903,235913],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235915,235920]},{"pos":[235929,235941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[235947,235956],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"pos":[235984,235996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236002,236020],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[236061,236073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236079,236090],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[236141,236151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236153,236158]},{"content":"mode","pos":[236172,236176]},{"pos":[236185,236197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236203,236218],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[236263,236273],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236275,236280]},{"pos":[236289,236301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236307,236323],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[236369,236379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236381,236386]},{"pos":[236395,236407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236413,236431],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[236509,236519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[236521,236530]},{"content":"insertAfterControlId","pos":[236544,236564]},{"pos":[236573,236585],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236591,236602],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"pos":[236643,236653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236655,236660]},{"pos":[236669,236681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236687,236710],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[236763,236773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236775,236780]},{"pos":[236789,236801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236807,236825],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[236893,236903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236905,236910]},{"pos":[236919,236931],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236937,236948],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[236997,237007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237009,237014]},{"pos":[237023,237035],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237041,237051],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[237101,237111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237113,237118]},{"content":"mode","pos":[237132,237136]},{"pos":[237145,237157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237163,237177],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[237221,237231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237233,237238]},{"pos":[237247,237259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237265,237280],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[237325,237335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237337,237342]},{"pos":[237351,237363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237369,237380],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[237421,237431],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237433,237438]},{"pos":[237447,237459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237465,237480],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[237525,237535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237537,237542]},{"pos":[237551,237563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237569,237588],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[237637,237647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237649,237654]},{"pos":[237663,237675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237681,237701],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[237751,237761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237763,237768]},{"pos":[237777,237789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237795,237815],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[237873,237883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237885,237890]},{"pos":[237899,237911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237917,237939],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[238008,238018],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238020,238025]},{"content":"mode","pos":[238039,238043]},{"pos":[238052,238064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238070,238096],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[238161,238171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[238173,238177]},{"pos":[238186,238198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238204,238231],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[238288,238298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238300,238305]},{"pos":[238314,238326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238332,238346],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[238398,238408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238410,238415]},{"pos":[238424,238436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238442,238454],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"pos":[238506,238516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238518,238523]},{"content":"mode","pos":[238537,238541]},{"pos":[238550,238562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238568,238584],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"pos":[238630,238640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238642,238647]},{"pos":[238656,238668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238674,238691],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"pos":[238738,238748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238750,238755]},{"pos":[238764,238776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238782,238811],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[238929,238939],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[238941,238957]},{"content":"objectMethodToCall","pos":[238971,238989]},{"content":"overrideObject","pos":[239003,239017]},{"pos":[239024,239046],"content":"Class FormBuildControl","linkify":"Class FormBuildControl","nodes":[{"content":"Class FormBuildControl","pos":[0,22]}]},{"content":"The FormBuildControl class lets you create, read, update, and delete X++ code and metadata.","pos":[239090,239181]},{"pos":[239187,239194],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[239196,239306]},{"pos":[239312,239320],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[239326,239333],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[239337,239343]},{"content":"Description","pos":[239477,239488]},{"content":"public FormBuildControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormBuildControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean pushFront<ph id=\"ph4\">\\]</ph>)","pos":[239919,240056],"source":"public FormBuildControl addControl(FormControlType controlType, str controlName, \\[FormBuildControl insertAfter\\], \\[boolean pushFront\\])"},{"content":"Adds a control to the control, based on the specified control type.","pos":[240059,240126]},{"content":"public FormBuildControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormBuildControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean pushFront<ph id=\"ph4\">\\]</ph>)","pos":[240210,240338],"source":"public FormBuildControl addControlEx(str controlClass, str controlName, \\[FormBuildControl insertAfter\\], \\[boolean pushFront\\])"},{"content":"public FormBuildControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[240501,240592],"source":"public FormBuildControl addDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"Adds a control to the control, based on the specified data field information.","pos":[240641,240718]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[240792,240835],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[241083,241132],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[241374,241459],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"Retrieves a value that indicates whether the specified data field can be added as a child control to the control.","pos":[241514,241627]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[241665,241737],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"public int containerId()","pos":[241956,241980]},{"content":"Retrieves the ID of the parent container for the control.","pos":[242096,242153]},{"content":"public int controlCount()","pos":[242247,242272]},{"content":"Retrieves the number of controls that are contained in the control.","pos":[242387,242454]},{"content":"public FormBuildControl controlNum(int controlNo)","pos":[242538,242587]},{"content":"Retrieves a contained control by using the specified index.","pos":[242678,242737]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[242829,242873],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public boolean editAutoPostback(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[243120,243170],"source":"public boolean editAutoPostback(\\[boolean value\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[243411,243452],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[243702,243736],"source":"public str helpText(\\[str value\\])"},{"content":"public str extendedStyle(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[243993,244032],"source":"public str extendedStyle(\\[str value\\])"},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[244284,244326],"source":"public int height(int value, \\[int mode\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[244575,244611],"source":"public int heightMode(\\[int value\\])"},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[244866,244903],"source":"public int heightValue(\\[int value\\])"},{"content":"public str GetXppILImplementation()","pos":[245157,245192]},{"content":"public boolean hasUserSetting()","pos":[245448,245479]},{"content":"Indicates whether the control has custom user settings.","pos":[245588,245643]},{"content":"public int id()","pos":[245739,245754]},{"content":"Retrieves the ID of the control.","pos":[245879,245911]},{"content":"public boolean isContainer()","pos":[246030,246058]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[246170,246246]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[246321,246368],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[246461,246514]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[246612,246672],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"Moves a specified control to the control.","pos":[246752,246793]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[246903,246933],"source":"public str name(\\[str value\\])"},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[247194,247236],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[247485,247524]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[247776,247816],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[248067,248105],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[248358,248409]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[248649,248686],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[248789,248872]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[248940,248976],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[249080,249132]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[249231,249265],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[249371,249453]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[249522,249564],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[249662,249718]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[249813,249853],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[249953,250007]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[250104,250144],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[250244,250293]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[250395,250438],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[250535,250588]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[250686,250720],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user press the TAB key to navigate the controls on the form.","pos":[250826,250972]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[250977,251012],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[251117,251168]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[251268,251309],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[251559,251600],"source":"public int width(int value, \\[int mode\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[251850,251885],"source":"public int widthMode(\\[int value\\])"},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[252141,252177],"source":"public int widthValue(\\[int value\\])"},{"content":"public void RegisterXppILImplementation(str className)","pos":[252432,252486]},{"content":"public void new(FormContainer container)","pos":[252723,252763]},{"content":"public void resetUserSetting()","pos":[253014,253044]},{"content":"Resets the user settings for the control.","pos":[253154,253195]},{"pos":[253308,253325],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"content":"Adds a control to the control, based on the specified control type.","pos":[253327,253394]},{"pos":[253540,253550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[253552,253563]},{"content":"The string value to set the name of the new control to.","pos":[253566,253621]},{"content":"controlName","pos":[253633,253644]},{"content":"The string value to set the name of the new control to.","pos":[253647,253702]},{"content":"insertAfter","pos":[253714,253725]},{"content":"pushFront","pos":[253739,253748]},{"pos":[253757,253769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormBuildControl object that represents the newly added control.","pos":[253771,253837]},{"pos":[253843,253862],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[253999,254009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[254011,254023]},{"content":"controlName","pos":[254037,254048]},{"content":"insertAfter","pos":[254062,254073]},{"content":"pushFront","pos":[254087,254096]},{"pos":[254105,254117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254123,254142],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"content":"Adds a control to the control, based on the specified data field information.","pos":[254144,254221]},{"pos":[254323,254333],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[254335,254347]},{"content":"An integer value that indicates the index of the data field type; optional.","pos":[254350,254425]},{"content":"fieldId","pos":[254437,254444]},{"content":"An integer value that indicates the index of the data field type; optional.","pos":[254447,254522]},{"content":"arrayIndex","pos":[254534,254544]},{"content":"An integer value that indicates the index of the data field type; optional.","pos":[254547,254622]},{"pos":[254629,254641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormBuildControl object that represents the newly added control.","pos":[254643,254709]},{"pos":[254716,254723],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type of control that should be added is determined automatically, based on the specified data field information.","pos":[254725,254841]},{"content":"The arrayIndex parameter has a default value of 1 when a value is not specified, so that the first index is assumed.","pos":[254842,254958]},{"pos":[254964,254980],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"pos":[255034,255044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255046,255051]},{"pos":[255060,255072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[255078,255100],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"pos":[255160,255170],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255172,255177]},{"pos":[255186,255198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[255204,255226],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"content":"Retrieves a value that indicates whether the specified data field can be added as a child control to the control.","pos":[255228,255341]},{"pos":[255437,255447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[255449,255461]},{"content":"An integer value that indicates the index of the data field type; optional.","pos":[255464,255539]},{"content":"fieldId","pos":[255551,255558]},{"content":"An integer value that indicates the index of the data field type; optional.","pos":[255561,255636]},{"content":"arrayIndex","pos":[255648,255658]},{"content":"An integer value that indicates the index of the data field type; optional.","pos":[255661,255736]},{"pos":[255743,255755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the specified data field can be added as a child control to the control.","pos":[255757,255868]},{"pos":[255874,255897],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"pos":[255980,255990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255992,255997]},{"pos":[256006,256018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[256024,256042],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[256044,256101]},{"pos":[256138,256150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[256152,256183]},{"pos":[256189,256208],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"content":"Retrieves the number of controls that are contained in the control.","pos":[256210,256277]},{"pos":[256315,256327],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the number of controls that are contained in the control if it is a container control; otherwise, 0.","pos":[256329,256461]},{"pos":[256467,256484],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"content":"Retrieves a contained control by using the specified index.","pos":[256486,256545]},{"pos":[256607,256617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[256619,256628]},{"content":"An integer value that indicates the index of the child control to retrieve.","pos":[256631,256706]},{"pos":[256713,256725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormBuildControl object that represents the child control that has the specified index if this is a container control; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[256727,256924]},{"pos":[256931,256938],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the specified controlNo parameter is out of range, an exception is raised.","pos":[256940,257017]},{"pos":[257023,257048],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[257103,257113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257115,257120]},{"pos":[257129,257141],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257147,257170],"content":"Method editAutoPostback","linkify":"Method editAutoPostback","nodes":[{"content":"Method editAutoPostback","pos":[0,23]}]},{"pos":[257231,257241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257243,257248]},{"pos":[257257,257269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257275,257289],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"pos":[257341,257351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257353,257358]},{"pos":[257367,257379],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257385,257400],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"pos":[257445,257455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257457,257462]},{"pos":[257471,257483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257489,257509],"content":"Method extendedStyle","linkify":"Method extendedStyle","nodes":[{"content":"Method extendedStyle","pos":[0,20]}]},{"pos":[257559,257569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257571,257576]},{"pos":[257585,257597],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257603,257616],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"pos":[257669,257679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257681,257686]},{"content":"mode","pos":[257700,257704]},{"pos":[257713,257725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257731,257748],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"pos":[257795,257805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257807,257812]},{"pos":[257821,257833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257839,257857],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"pos":[257905,257915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257917,257922]},{"pos":[257931,257943],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257949,257978],"content":"Method GetXppILImplementation","linkify":"Method GetXppILImplementation","nodes":[{"content":"Method GetXppILImplementation","pos":[0,29]}]},{"pos":[258026,258038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[258044,258065],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[258067,258122]},{"pos":[258166,258178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control has custom user settings.","pos":[258180,258256]},{"pos":[258262,258271],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[258273,258305]},{"pos":[258333,258345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[258347,258369]},{"pos":[258375,258393],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[258395,258471]},{"pos":[258512,258524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[258526,258600]},{"pos":[258606,258626],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[258628,258681]},{"pos":[258739,258749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[258751,258756]},{"content":"A Boolean value that indicates whether to mark the control as a user-added control.","pos":[258759,258842]},{"pos":[258849,258861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control was marked as a user-added control.","pos":[258863,258949]},{"pos":[258955,258973],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"content":"Moves a specified control to the control.","pos":[258975,259016]},{"pos":[259087,259097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[259099,259108]},{"content":"An integer value that indicates the ID of the control to insert the control after; optional.","pos":[259111,259203]},{"content":"insertAfterId","pos":[259215,259228]},{"content":"An integer value that indicates the ID of the control to insert the control after; optional.","pos":[259231,259323]},{"pos":[259330,259342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control was moved successfully; otherwise, 0.","pos":[259344,259398]},{"pos":[259405,259412],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed.","pos":[259414,259571]},{"content":"However, in some cases, such as for the reference group control instance, controls cannot be moved.","pos":[259572,259671]},{"pos":[259677,259688],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"pos":[259729,259739],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[259741,259746]},{"pos":[259755,259767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[259773,259796],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[259849,259859],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[259861,259866]},{"pos":[259875,259887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[259893,259920],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[259972,259984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[259990,260011],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[260062,260072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[260074,260079]},{"pos":[260088,260100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260106,260117],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[260166,260176],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[260178,260183]},{"pos":[260192,260204],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260210,260237],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[260301,260311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[260313,260317]},{"pos":[260326,260338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260344,260362],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[260364,260447]},{"pos":[260495,260505],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[260507,260512]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[260515,260595]},{"pos":[260602,260614],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[260616,260672]},{"pos":[260678,260695],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[260697,260749]},{"pos":[260796,260806],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[260808,260813]},{"content":"The user height for the control; optional.","pos":[260816,260858]},{"pos":[260865,260877],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[260879,260918]},{"pos":[260924,260939],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[260941,261023]},{"pos":[261068,261078],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[261080,261085]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[261088,261167]},{"pos":[261174,261186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[261188,261243]},{"pos":[261250,261257],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or right-clicking another control when the original control is hidden.","pos":[261259,261426]},{"content":"The right-click opens a menu that can be used to hide or display the control.","pos":[261427,261504]},{"content":"This method lets you programmatically determine and set the value.","pos":[261505,261571]},{"pos":[261577,261600],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[261602,261658]},{"pos":[261711,261721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[261723,261728]},{"content":"The organization container to set for the control; optional.","pos":[261731,261791]},{"pos":[261798,261810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[261812,261855]},{"pos":[261861,261882],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[261884,261938]},{"pos":[261989,261999],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[262001,262006]},{"content":"The organization sibling to set for the control; optional.","pos":[262009,262067]},{"pos":[262074,262086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[262088,262129]},{"pos":[262135,262156],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[262158,262207]},{"pos":[262258,262268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[262270,262275]},{"content":"The user label text to set for the control; optional.","pos":[262278,262331]},{"pos":[262338,262350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[262352,262388]},{"pos":[262394,262418],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[262420,262473]},{"pos":[262527,262537],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[262539,262544]},{"content":"The user security level to set for the control; optional.","pos":[262547,262604]},{"pos":[262611,262623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[262625,262665]},{"pos":[262671,262686],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user press the TAB key to navigate the controls on the form.","pos":[262688,262834]},{"pos":[262879,262889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[262891,262896]},{"content":"The value to assign to the userSkip property; optional.","pos":[262899,262954]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, it is 0.","pos":[262955,263043]},{"pos":[263050,263062],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[263064,263133]},{"pos":[263139,263155],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[263157,263208]},{"pos":[263254,263264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263266,263271]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[263274,263340]},{"pos":[263347,263359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[263361,263490]},{"pos":[263497,263504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[263506,263600]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[263601,263717],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[263718,263868]},{"pos":[263874,263888],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[263940,263950],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263952,263957]},{"pos":[263966,263978],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263984,263996],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"pos":[264048,264058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264060,264065]},{"content":"mode","pos":[264079,264083]},{"pos":[264092,264104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264110,264126],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"pos":[264172,264182],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264184,264189]},{"pos":[264198,264210],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264216,264233],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"pos":[264280,264290],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264292,264297]},{"pos":[264306,264318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264324,264358],"content":"Method RegisterXppILImplementation","linkify":"Method RegisterXppILImplementation","nodes":[{"content":"Method RegisterXppILImplementation","pos":[0,34]}]},{"pos":[264425,264435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"className","pos":[264437,264446]},{"pos":[264454,264464],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[264517,264527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[264529,264538]},{"pos":[264546,264569],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[264571,264612]},{"pos":[264653,264678],"content":"Class FormBuildDataSource","linkify":"Class FormBuildDataSource","nodes":[{"content":"Class FormBuildDataSource","pos":[0,25]}]},{"content":"The FormBuildDataSource class lets you create, read, update, and delete X++ code and metadata.","pos":[264737,264831]},{"pos":[264837,264844],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[264846,264956]},{"pos":[264962,264970],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[264976,264983],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[264987,264993]},{"content":"Description","pos":[265071,265082]},{"content":"public FormBuildDataSource addReferenceDataSource(str name, <ph id=\"ph1\">\\[</ph>str joinRelation<ph id=\"ph2\">\\]</ph>)","pos":[265407,265488],"source":"public FormBuildDataSource addReferenceDataSource(str name, \\[str joinRelation\\])"},{"content":"public boolean allowCheck(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[265617,265661],"source":"public boolean allowCheck(\\[boolean value\\])"},{"content":"public boolean allowCreate(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[265827,265872],"source":"public boolean allowCreate(\\[boolean value\\])"},{"content":"public boolean allowDeferredLoad(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[266037,266088],"source":"public boolean allowDeferredLoad(\\[boolean value\\])"},{"content":"public boolean allowDelete(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[266247,266292],"source":"public boolean allowDelete(\\[boolean value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[266457,266500],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[266541,266608]},{"content":"public boolean autoNotify(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[266667,266711],"source":"public boolean autoNotify(\\[boolean value\\])"},{"content":"public boolean autoQuery(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[266877,266920],"source":"public boolean autoQuery(\\[boolean value\\])"},{"content":"public boolean autoSearch(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[267087,267131],"source":"public boolean autoSearch(\\[boolean value\\])"},{"content":"public FormBuildDataSource baseDataSource()","pos":[267297,267340]},{"content":"public str company(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[267507,267540],"source":"public str company(\\[str value\\])"},{"content":"public FieldId counterField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[267717,267763],"source":"public FieldId counterField(\\[FieldId value\\])"},{"content":"public boolean crossCompanyAutoQuery(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[267927,267982],"source":"public boolean crossCompanyAutoQuery(\\[boolean value\\])"},{"content":"public boolean delayActive(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[268137,268182],"source":"public boolean delayActive(\\[boolean value\\])"},{"content":"public int extends(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[268347,268384],"source":"public int extends(\\[AnyType value\\])"},{"content":"public str GetXppILImplementation()","pos":[268557,268592]},{"content":"public IndexId index(<ph id=\"ph1\">\\[</ph>IndexId value<ph id=\"ph2\">\\]</ph>)","pos":[268767,268806],"source":"public IndexId index(\\[IndexId value\\])"},{"content":"public boolean insertAtEnd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[268977,269022],"source":"public boolean insertAtEnd(\\[boolean value\\])"},{"content":"public boolean insertIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[269187,269234],"source":"public boolean insertIfEmpty(\\[boolean value\\])"},{"content":"public boolean isBaseDataSource()","pos":[269397,269430]},{"content":"public boolean isInheritanceDataSource()","pos":[269607,269647]},{"content":"public boolean isMasterDataSource()","pos":[269817,269852]},{"content":"public str joinRelation(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[270027,270065],"source":"public str joinRelation(\\[str value\\])"},{"content":"public int joinSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[270237,270277],"source":"public int joinSource(\\[AnyType value\\])"},{"content":"public int linkType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270447,270481],"source":"public int linkType(\\[int value\\])"},{"content":"public FormBuildDataSource masterDataSource()","pos":[270657,270702]},{"content":"public int maxAccessRight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[270867,270907],"source":"public int maxAccessRight(\\[int value\\])"},{"content":"public int maxRecordsToLoad(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271077,271119],"source":"public int maxRecordsToLoad(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[271287,271317],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.","pos":[271371,271492]},{"content":"public boolean onlyFetchActive(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[271497,271546],"source":"public boolean onlyFetchActive(\\[boolean value\\])"},{"content":"public int optionalRecordMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271707,271751],"source":"public int optionalRecordMode(\\[int value\\])"},{"content":"public int startPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[271917,271956],"source":"public int startPosition(\\[int value\\])"},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[272127,272166],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[272211,272264]},{"content":"public int validTimeStateAutoQuery(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272337,272386],"source":"public int validTimeStateAutoQuery(\\[int value\\])"},{"content":"public int validTimeStateUpdate(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[272547,272593],"source":"public int validTimeStateUpdate(\\[int value\\])"},{"content":"public void RegisterXppDataFieldILImplementation(str fieldName, str className)","pos":[272757,272835]},{"content":"public void RegisterXppILImplementation(str className)","pos":[272967,273021]},{"content":"public void SetDataLinkType(QueryDataLinkType linkType, str parentDataSource)","pos":[273177,273254]},{"pos":[273390,273419],"content":"Method addReferenceDataSource","linkify":"Method addReferenceDataSource","nodes":[{"content":"Method addReferenceDataSource","pos":[0,29]}]},{"pos":[273511,273521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[273523,273527]},{"content":"joinRelation","pos":[273541,273553]},{"pos":[273562,273574],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273580,273597],"content":"Method allowCheck","linkify":"Method allowCheck","nodes":[{"content":"Method allowCheck","pos":[0,17]}]},{"pos":[273652,273662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273664,273669]},{"pos":[273678,273690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273696,273714],"content":"Method allowCreate","linkify":"Method allowCreate","nodes":[{"content":"Method allowCreate","pos":[0,18]}]},{"pos":[273770,273780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273782,273787]},{"pos":[273796,273808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273814,273838],"content":"Method allowDeferredLoad","linkify":"Method allowDeferredLoad","nodes":[{"content":"Method allowDeferredLoad","pos":[0,24]}]},{"pos":[273900,273910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273912,273917]},{"pos":[273926,273938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273944,273962],"content":"Method allowDelete","linkify":"Method allowDelete","nodes":[{"content":"Method allowDelete","pos":[0,18]}]},{"pos":[274018,274028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274030,274035]},{"pos":[274044,274056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[274062,274078],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[274080,274147]},{"pos":[274201,274211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274213,274218]},{"pos":[274227,274239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[274241,274293]},{"pos":[274300,274307],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[274309,274431]},{"pos":[274437,274454],"content":"Method autoNotify","linkify":"Method autoNotify","nodes":[{"content":"Method autoNotify","pos":[0,17]}]},{"pos":[274509,274519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274521,274526]},{"pos":[274535,274547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[274553,274569],"content":"Method autoQuery","linkify":"Method autoQuery","nodes":[{"content":"Method autoQuery","pos":[0,16]}]},{"pos":[274623,274633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274635,274640]},{"pos":[274649,274661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[274667,274684],"content":"Method autoSearch","linkify":"Method autoSearch","nodes":[{"content":"Method autoSearch","pos":[0,17]}]},{"pos":[274739,274749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274751,274756]},{"pos":[274765,274777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[274783,274804],"content":"Method baseDataSource","linkify":"Method baseDataSource","nodes":[{"content":"Method baseDataSource","pos":[0,21]}]},{"pos":[274860,274872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[274878,274892],"content":"Method company","linkify":"Method company","nodes":[{"content":"Method company","pos":[0,14]}]},{"pos":[274936,274946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274948,274953]},{"pos":[274962,274974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[274980,274999],"content":"Method counterField","linkify":"Method counterField","nodes":[{"content":"Method counterField","pos":[0,19]}]},{"pos":[275056,275066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275068,275073]},{"pos":[275082,275094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275100,275128],"content":"Method crossCompanyAutoQuery","linkify":"Method crossCompanyAutoQuery","nodes":[{"content":"Method crossCompanyAutoQuery","pos":[0,28]}]},{"pos":[275194,275204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275206,275211]},{"pos":[275220,275232],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275238,275256],"content":"Method delayActive","linkify":"Method delayActive","nodes":[{"content":"Method delayActive","pos":[0,18]}]},{"pos":[275312,275322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275324,275329]},{"pos":[275338,275350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275356,275370],"content":"Method extends","linkify":"Method extends","nodes":[{"content":"Method extends","pos":[0,14]}]},{"pos":[275418,275428],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275430,275435]},{"pos":[275444,275456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275462,275491],"content":"Method GetXppILImplementation","linkify":"Method GetXppILImplementation","nodes":[{"content":"Method GetXppILImplementation","pos":[0,29]}]},{"pos":[275539,275551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275557,275569],"content":"Method index","linkify":"Method index","nodes":[{"content":"Method index","pos":[0,12]}]},{"pos":[275619,275629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275631,275636]},{"pos":[275645,275657],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275663,275681],"content":"Method insertAtEnd","linkify":"Method insertAtEnd","nodes":[{"content":"Method insertAtEnd","pos":[0,18]}]},{"pos":[275737,275747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275749,275754]},{"pos":[275763,275775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275781,275801],"content":"Method insertIfEmpty","linkify":"Method insertIfEmpty","nodes":[{"content":"Method insertIfEmpty","pos":[0,20]}]},{"pos":[275859,275869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275871,275876]},{"pos":[275885,275897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275903,275926],"content":"Method isBaseDataSource","linkify":"Method isBaseDataSource","nodes":[{"content":"Method isBaseDataSource","pos":[0,23]}]},{"pos":[275972,275984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275990,276020],"content":"Method isInheritanceDataSource","linkify":"Method isInheritanceDataSource","nodes":[{"content":"Method isInheritanceDataSource","pos":[0,30]}]},{"pos":[276073,276085],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276091,276116],"content":"Method isMasterDataSource","linkify":"Method isMasterDataSource","nodes":[{"content":"Method isMasterDataSource","pos":[0,25]}]},{"pos":[276164,276176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276182,276201],"content":"Method joinRelation","linkify":"Method joinRelation","nodes":[{"content":"Method joinRelation","pos":[0,19]}]},{"pos":[276250,276260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276262,276267]},{"pos":[276276,276288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276294,276311],"content":"Method joinSource","linkify":"Method joinSource","nodes":[{"content":"Method joinSource","pos":[0,17]}]},{"pos":[276362,276372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276374,276379]},{"pos":[276388,276400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276406,276421],"content":"Method linkType","linkify":"Method linkType","nodes":[{"content":"Method linkType","pos":[0,15]}]},{"pos":[276466,276476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276478,276483]},{"pos":[276492,276504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276510,276533],"content":"Method masterDataSource","linkify":"Method masterDataSource","nodes":[{"content":"Method masterDataSource","pos":[0,23]}]},{"pos":[276591,276603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276609,276630],"content":"Method maxAccessRight","linkify":"Method maxAccessRight","nodes":[{"content":"Method maxAccessRight","pos":[0,21]}]},{"pos":[276681,276691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276693,276698]},{"pos":[276707,276719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276725,276748],"content":"Method maxRecordsToLoad","linkify":"Method maxRecordsToLoad","nodes":[{"content":"Method maxRecordsToLoad","pos":[0,23]}]},{"pos":[276801,276811],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276813,276818]},{"pos":[276827,276839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276845,276856],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.","pos":[276858,276979]},{"pos":[277020,277030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277032,277037]},{"pos":[277046,277058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[277060,277124]},{"pos":[277131,277138],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[277140,277234]},{"content":"Begins with a letter.","pos":[277240,277261]},{"content":"Doesn't exceed 250 characters.","pos":[277266,277296]},{"content":"Can include numbers and underscore characters.","pos":[277301,277347]},{"content":"Cannot include punctuation or spaces.","pos":[277352,277389]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[277394,277512]},{"pos":[277518,277540],"content":"Method onlyFetchActive","linkify":"Method onlyFetchActive","nodes":[{"content":"Method onlyFetchActive","pos":[0,22]}]},{"pos":[277600,277610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277612,277617]},{"pos":[277626,277638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277644,277669],"content":"Method optionalRecordMode","linkify":"Method optionalRecordMode","nodes":[{"content":"Method optionalRecordMode","pos":[0,25]}]},{"pos":[277724,277734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277736,277741]},{"pos":[277750,277762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277768,277788],"content":"Method startPosition","linkify":"Method startPosition","nodes":[{"content":"Method startPosition","pos":[0,20]}]},{"pos":[277838,277848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277850,277855]},{"pos":[277864,277876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277882,277894],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[277896,277949]},{"pos":[277999,278009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278011,278016]},{"pos":[278025,278037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[278039,278100]},{"pos":[278106,278136],"content":"Method validTimeStateAutoQuery","linkify":"Method validTimeStateAutoQuery","nodes":[{"content":"Method validTimeStateAutoQuery","pos":[0,30]}]},{"pos":[278196,278206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278208,278213]},{"pos":[278222,278234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278240,278267],"content":"Method validTimeStateUpdate","linkify":"Method validTimeStateUpdate","nodes":[{"content":"Method validTimeStateUpdate","pos":[0,27]}]},{"pos":[278324,278334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278336,278341]},{"pos":[278350,278362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278368,278411],"content":"Method RegisterXppDataFieldILImplementation","linkify":"Method RegisterXppDataFieldILImplementation","nodes":[{"content":"Method RegisterXppDataFieldILImplementation","pos":[0,43]}]},{"pos":[278502,278512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[278514,278523]},{"content":"className","pos":[278537,278546]},{"pos":[278554,278588],"content":"Method RegisterXppILImplementation","linkify":"Method RegisterXppILImplementation","nodes":[{"content":"Method RegisterXppILImplementation","pos":[0,34]}]},{"pos":[278655,278665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"className","pos":[278667,278676]},{"pos":[278684,278706],"content":"Method SetDataLinkType","linkify":"Method SetDataLinkType","nodes":[{"content":"Method SetDataLinkType","pos":[0,22]}]},{"pos":[278796,278806],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"linkType","pos":[278808,278816]},{"content":"parentDataSource","pos":[278830,278846]},{"pos":[278853,278879],"content":"Class FormBuildDateControl","linkify":"Class FormBuildDateControl","nodes":[{"content":"Class FormBuildDateControl","pos":[0,26]}]},{"content":"The FormBuildDateControl class lets you create, read, update, and delete X++ code and metadata.","pos":[278937,279032]},{"pos":[279038,279045],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[279047,279157]},{"pos":[279163,279171],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[279177,279184],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[279188,279194]},{"content":"Description","pos":[279298,279309]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[279700,279746],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[279810,279850]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[279956,279991],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[280212,280255],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[280322,280389]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[280468,280504],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[280724,280773],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[280834,280932]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[280980,281021],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[281090,281139]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[281236,281271],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[281346,281407]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[281492,281522],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that was used to output text in the control.","pos":[281602,281678]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[281748,281780],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[281858,281914]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[282004,282045],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[282260,282298],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[282370,282413]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[282516,282553],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[282626,282671]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[282772,282844],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[282882,282949]},{"content":"public int containerId()","pos":[283028,283052]},{"content":"Retrieves the ID of the parent container for the control.","pos":[283138,283195]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[283284,283328],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[283540,283599],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[283796,283839],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[284052,284088],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[284308,284350],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[284564,284604],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[284674,284746]},{"content":"public int dateDay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[284820,284853],"source":"public int dateDay(\\[int value\\])"},{"content":"public int dateFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[285076,285112],"source":"public int dateFormat(\\[int value\\])"},{"content":"public int dateMonth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[285332,285367],"source":"public int dateMonth(\\[int value\\])"},{"content":"public int dateSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[285588,285627],"source":"public int dateSeparator(\\[int value\\])"},{"content":"public Date dateValue(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[285844,285881],"source":"public Date dateValue(\\[Date value\\])"},{"content":"public int dateYear(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[286100,286134],"source":"public int dateYear(\\[int value\\])"},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[286356,286391],"source":"public int direction(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[286612,286670],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[286868,286920],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[287124,287168],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[287380,287438],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[287636,287688],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[287892,287936],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[288148,288187],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[288404,288438],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[288514,288595]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[288660,288701],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[288770,288821]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[288916,288980],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[289172,289212],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[289428,289458],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[289538,289595]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[289684,289718],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[289794,289851]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[289940,289981],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[290050,290101]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[290196,290238],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[290306,290345]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[290452,290488],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[290562,290624]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[290708,290745],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[290818,290857]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[290964,290998],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[291074,291178]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[291220,291261],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[291476,291491]},{"content":"Retrieves the ID of the control.","pos":[291586,291618]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[291732,291765],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[291988,292016]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[292098,292174]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[292244,292284],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[292500,292531],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[292610,292647]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[292756,292796],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[293012,293047],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[293268,293311],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[293524,293559],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[293780,293819],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[294036,294082],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[294292,294328],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[294548,294595],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[294804,294845],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[295060,295102],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[295316,295361],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[295572,295611],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[295828,295876],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[296084,296130],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[296340,296380],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[296596,296637],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[296852,296892],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297108,297142],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297364,297399],"source":"public int leftValue(\\[int value\\])"},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[297620,297674],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[297876,297924],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298132,298172],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298388,298426],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[298644,298687],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public str maxDateLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[298900,298938],"source":"public str maxDateLabel(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[299156,299186],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[299266,299423]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[299428,299470],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[299684,299720],"source":"public int promptrect(\\[int value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[299940,299989],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[300196,300238],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[300452,300488],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[300708,300765],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[300964,301007],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[301220,301258],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[301330,301457]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[301476,301507],"source":"public int style(\\[int value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[301732,301771],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[301988,302021],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[302244,302278],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[302500,302530],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[302756,302799],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[302866,302933]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[303012,303046],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[303268,303306],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[303524,303563],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[303780,303840],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[304036,304090],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[304292,304338],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[304548,304586],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[304804,304845],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[305060,305101],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[305170,305208]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[305316,305351],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[305426,305488]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[305572,305608],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[305682,305720]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[305828,305935],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[306087,306106],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[306108,306148]},{"pos":[306205,306215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306217,306222]},{"pos":[306231,306243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[306245,306301]},{"pos":[306308,306315],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[306317,306396]},{"pos":[306402,306418],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[306464,306474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306476,306481]},{"pos":[306490,306502],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[306508,306524],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[306526,306593]},{"pos":[306647,306657],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306659,306664]},{"pos":[306673,306685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[306687,306739]},{"pos":[306746,306753],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[306755,306877]},{"pos":[306883,306900],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[306947,306957],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306959,306964]},{"pos":[306973,306985],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[306991,307013],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[307015,307113]},{"pos":[307173,307183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307185,307190]},{"pos":[307199,307211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[307213,307292]},{"pos":[307299,307306],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[307308,307345]},{"pos":[307351,307373],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[307375,307424]},{"pos":[307476,307486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307488,307493]},{"pos":[307502,307514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[307516,307560]},{"pos":[307567,307574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[307576,307644]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[307650,307720]},{"content":"The second byte contains a value for green.","pos":[307725,307768]},{"content":"The third byte contains a value for blue.","pos":[307773,307814]},{"content":"The high-order byte must be zero.","pos":[307819,307852]},{"content":"The maximum value for a single byte is 255.","pos":[307857,307900]},{"pos":[307906,307922],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[307924,307985]},{"pos":[308031,308041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308043,308048]},{"pos":[308057,308069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[308071,308132]},{"pos":[308138,308149],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that was used to output text in the control.","pos":[308151,308227]},{"pos":[308268,308278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308280,308285]},{"pos":[308294,308306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[308308,308358]},{"pos":[308365,308372],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[308374,308446]},{"content":"0 Use the default font weight.","pos":[308452,308482]},{"content":"1 Thin.","pos":[308487,308494]},{"content":"2 Extra-light.","pos":[308499,308513]},{"content":"3 Light.","pos":[308518,308526]},{"content":"4 Normal.","pos":[308531,308540]},{"content":"5 Medium.","pos":[308545,308554]},{"content":"6 Semibold.","pos":[308559,308570]},{"content":"7 Bold.","pos":[308575,308582]},{"content":"8 Extra-bold.","pos":[308587,308600]},{"content":"9 Heavy.","pos":[308605,308613]},{"pos":[308619,308632],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[308634,308690]},{"pos":[308733,308743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308745,308750]},{"pos":[308759,308771],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[308773,308817]},{"pos":[308824,308831],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[308833,308925]},{"content":"Value.","pos":[308929,308935]},{"content":"Description.","pos":[308938,308950]},{"content":"0","pos":[308981,308982]},{"content":"Auto.","pos":[308990,308995]},{"content":"1","pos":[309007,309008]},{"content":"3D.","pos":[309016,309019]},{"content":"2","pos":[309033,309034]},{"content":"Single line.","pos":[309042,309054]},{"content":"3","pos":[309059,309060]},{"content":"Flat.","pos":[309068,309073]},{"content":"4","pos":[309085,309086]},{"content":"None.","pos":[309094,309099]},{"pos":[309114,309136],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[309188,309198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309200,309205]},{"pos":[309214,309226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309232,309251],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[309253,309296]},{"pos":[309345,309355],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309357,309362]},{"pos":[309371,309383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[309385,309447]},{"pos":[309454,309461],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[309463,309567]},{"content":"Value.","pos":[309571,309577]},{"content":"Description.","pos":[309580,309592]},{"content":"0","pos":[309639,309640]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309648,309661],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[309673,309674]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309682,309698],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[309707,309708]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309716,309731],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[309741,309743]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309750,309762],"source":"MAC\\_CHARSET"},{"content":"128","pos":[309775,309778]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309784,309801],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[309809,309812]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309818,309833],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[309843,309846]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309852,309867],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[309877,309880]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309886,309906],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[309911,309914]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309920,309934],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[309945,309948]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309954,309970],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[309979,309982]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[309988,310007],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[310013,310016]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[310022,310037],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[310047,310050]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[310056,310072],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[310081,310084]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[310090,310109],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[310115,310118]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[310124,310136],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of Microsoft Windows.","pos":[310148,310237]},{"content":"Value.","pos":[310241,310247]},{"content":"Description.","pos":[310250,310262]},{"content":"130","pos":[310297,310300]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[310306,310320],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Microsoft Windows.","pos":[310324,310420]},{"content":"Value.","pos":[310424,310430]},{"content":"Description.","pos":[310433,310445]},{"content":"177","pos":[310482,310485]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[310491,310506],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[310511,310514]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[310520,310535],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Microsoft Windows.","pos":[310539,310626]},{"content":"Value.","pos":[310630,310636]},{"content":"Description.","pos":[310639,310651]},{"content":"222","pos":[310684,310687]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[310693,310706],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[310710,310797]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[310798,310889],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[310890,311005]},{"pos":[311011,311029],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[311031,311076]},{"pos":[311124,311134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311136,311141]},{"pos":[311150,311162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[311164,311207]},{"pos":[311214,311221],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[311223,311284]},{"content":"Value.","pos":[311288,311294]},{"content":"Style.","pos":[311297,311303]},{"content":"0","pos":[311376,311377]},{"content":"Default.","pos":[311385,311393]},{"content":"1","pos":[311420,311421]},{"content":"The Microsoft Windows palette.","pos":[311429,311459]},{"content":"2","pos":[311464,311465]},{"content":"The true-color scheme.","pos":[311473,311495]},{"pos":[311511,311534],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[311536,311603]},{"pos":[311686,311696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311698,311703]},{"pos":[311712,311724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[311726,311798]},{"pos":[311805,311812],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[311814,311895]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[311896,311989]},{"pos":[311995,312013],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[312015,312072]},{"pos":[312109,312121],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[312123,312154]},{"pos":[312160,312185],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[312240,312250],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312252,312257]},{"pos":[312266,312278],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312284,312316],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[312386,312396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312398,312403]},{"pos":[312412,312424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312430,312446],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[312500,312510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312512,312517]},{"pos":[312526,312538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312544,312561],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[312608,312618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312620,312625]},{"pos":[312634,312646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312652,312675],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[312728,312738],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312740,312745]},{"pos":[312754,312766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312772,312789],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[312791,312863]},{"pos":[312914,312924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312926,312931]},{"pos":[312940,312952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[312954,313006]},{"pos":[313012,313026],"content":"Method dateDay","linkify":"Method dateDay","nodes":[{"content":"Method dateDay","pos":[0,14]}]},{"pos":[313070,313080],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313082,313087]},{"pos":[313096,313108],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313114,313131],"content":"Method dateFormat","linkify":"Method dateFormat","nodes":[{"content":"Method dateFormat","pos":[0,17]}]},{"pos":[313178,313188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313190,313195]},{"pos":[313204,313216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313222,313238],"content":"Method dateMonth","linkify":"Method dateMonth","nodes":[{"content":"Method dateMonth","pos":[0,16]}]},{"pos":[313284,313294],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313296,313301]},{"pos":[313310,313322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313328,313348],"content":"Method dateSeparator","linkify":"Method dateSeparator","nodes":[{"content":"Method dateSeparator","pos":[0,20]}]},{"pos":[313398,313408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313410,313415]},{"pos":[313424,313436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313442,313458],"content":"Method dateValue","linkify":"Method dateValue","nodes":[{"content":"Method dateValue","pos":[0,16]}]},{"pos":[313506,313516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313518,313523]},{"pos":[313532,313544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313550,313565],"content":"Method dateYear","linkify":"Method dateYear","nodes":[{"content":"Method dateYear","pos":[0,15]}]},{"pos":[313610,313620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313622,313627]},{"pos":[313636,313648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313654,313670],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[313716,313726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313728,313733]},{"pos":[313742,313754],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313760,313780],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[313847,313857],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313859,313864]},{"content":"mode","pos":[313878,313882]},{"pos":[313891,313903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313909,313933],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[313996,314006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[314008,314012]},{"pos":[314021,314033],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314039,314064],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[314119,314129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314131,314136]},{"pos":[314145,314157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314163,314183],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[314250,314260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314262,314267]},{"content":"mode","pos":[314281,314285]},{"pos":[314294,314306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314312,314336],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[314399,314409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[314411,314415]},{"pos":[314424,314436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314442,314467],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[314522,314532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314534,314539]},{"pos":[314548,314560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314566,314586],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[314636,314646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314648,314653]},{"pos":[314662,314674],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314680,314695],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[314697,314778]},{"pos":[314823,314833],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314835,314840]},{"pos":[314849,314861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[314863,314923]},{"pos":[314929,314943],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[314945,314996]},{"pos":[315048,315058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315060,315065]},{"pos":[315074,315086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[315088,315136]},{"pos":[315143,315150],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[315152,315231]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[315232,315327]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[315328,315462]},{"pos":[315468,315491],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[315566,315576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315578,315583]},{"pos":[315592,315604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315610,315631],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[315682,315692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315694,315699]},{"pos":[315708,315720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315726,315737],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[315739,315796]},{"pos":[315837,315847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315849,315854]},{"pos":[315863,315875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[315877,315932]},{"pos":[315938,315953],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[315955,316012]},{"pos":[316057,316067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316069,316074]},{"pos":[316083,316095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[316097,316130]},{"pos":[316136,316158],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[316160,316211]},{"pos":[316263,316273],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316275,316280]},{"pos":[316289,316301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[316303,316347]},{"pos":[316354,316361],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[316363,316431]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[316437,316507]},{"content":"The second byte contains a value for green.","pos":[316512,316555]},{"content":"The third byte contains a value for blue.","pos":[316560,316601]},{"content":"The high-order byte must be zero.","pos":[316606,316639]},{"content":"The maximum value for a single byte is 255.","pos":[316644,316687]},{"pos":[316693,316706],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[316708,316747]},{"pos":[316800,316810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316812,316817]},{"content":"mode","pos":[316831,316835]},{"pos":[316844,316856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[316858,316894]},{"pos":[316901,316908],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[316910,316963]},{"content":"Calculate the height according to the following table:","pos":[316964,317018]},{"content":"Mode.","pos":[317022,317027]},{"content":"Height calculation.","pos":[317041,317060]},{"content":"-1 Exact.","pos":[317248,317257]},{"content":"The exact height in pixels of the controls is used.","pos":[317267,317318]},{"content":"0 Auto.","pos":[317361,317368]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[317380,317469]},{"content":"1 Column height.","pos":[317474,317490]},{"content":"The layout of the form determines the height of the control.","pos":[317493,317553]},{"content":"The height and height calculation mode can be set separately.","pos":[317586,317647]},{"pos":[317653,317670],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[317672,317734]},{"pos":[317781,317791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317793,317798]},{"pos":[317807,317819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[317821,317842]},{"pos":[317849,317856],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[317858,317912]},{"content":"Mode.","pos":[317916,317921]},{"content":"Height Calculation.","pos":[317933,317952]},{"content":"Exact.","pos":[318138,318144]},{"content":"The exact height in pixels of the controls is used.","pos":[318155,318206]},{"content":"Auto.","pos":[318249,318254]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[318266,318355]},{"content":"Column height.","pos":[318360,318374]},{"content":"The layout of the form determines the height of the control.","pos":[318377,318437]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[318470,318555]},{"pos":[318561,318579],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[318581,318620]},{"pos":[318668,318678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318680,318685]},{"pos":[318694,318706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[318708,318729]},{"pos":[318736,318743],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[318745,318835]},{"pos":[318841,318856],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[318858,318962]},{"pos":[319007,319017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319019,319024]},{"pos":[319033,319045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[319047,319102]},{"pos":[319109,319116],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[319118,319186]},{"content":"The help text must not exceed 250 characters.","pos":[319187,319232]},{"pos":[319238,319260],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[319312,319322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319324,319329]},{"pos":[319338,319350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319356,319365],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[319367,319399]},{"pos":[319427,319439],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[319441,319463]},{"pos":[319469,319483],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[319527,319537],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319539,319544]},{"pos":[319553,319565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319571,319589],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[319591,319667]},{"pos":[319708,319720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[319722,319796]},{"pos":[319802,319815],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[319866,319876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319878,319883]},{"pos":[319892,319904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319910,319922],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[319924,319961]},{"pos":[320003,320013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320015,320020]},{"pos":[320029,320041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[320043,320081]},{"pos":[320088,320095],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[320097,320175]},{"content":"The label property value cannot exceed 250 characters.","pos":[320176,320230]},{"pos":[320236,320257],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[320308,320318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320320,320325]},{"pos":[320334,320346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320352,320368],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[320414,320424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320426,320431]},{"pos":[320440,320452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320458,320482],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[320536,320546],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320548,320553]},{"pos":[320562,320574],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320580,320596],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[320642,320652],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320654,320659]},{"pos":[320668,320680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320686,320706],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[320756,320766],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320768,320773]},{"pos":[320782,320794],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320800,320827],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[320884,320894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320896,320901]},{"pos":[320910,320922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320928,320945],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[320992,321002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321004,321009]},{"pos":[321018,321030],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321036,321054],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[321112,321122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321124,321129]},{"content":"mode","pos":[321143,321147]},{"pos":[321156,321168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321174,321196],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[321248,321258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321260,321265]},{"pos":[321274,321286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321292,321315],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[321368,321378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321380,321385]},{"pos":[321394,321406],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321412,321430],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[321486,321496],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321498,321503]},{"pos":[321512,321524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321530,321550],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[321600,321610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321612,321617]},{"pos":[321626,321638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321644,321665],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[321724,321734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321736,321741]},{"pos":[321750,321762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321768,321785],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[321842,321852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321854,321859]},{"content":"mode","pos":[321873,321877]},{"pos":[321886,321898],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321904,321925],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[321976,321986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321988,321993]},{"pos":[322002,322014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322020,322042],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[322094,322104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322106,322111]},{"pos":[322120,322132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322138,322149],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[322200,322210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322212,322217]},{"content":"mode","pos":[322231,322235]},{"pos":[322244,322256],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322262,322277],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[322322,322332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322334,322339]},{"pos":[322348,322360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322366,322382],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[322428,322438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322440,322445]},{"pos":[322454,322466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322472,322488],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[322551,322561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322563,322568]},{"content":"mode","pos":[322582,322586]},{"pos":[322595,322607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322613,322633],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[322692,322702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[322704,322708]},{"pos":[322717,322729],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322735,322756],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[322807,322817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322819,322824]},{"pos":[322833,322845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322851,322870],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[322919,322929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322931,322936]},{"pos":[322945,322957],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322963,322979],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[323033,323043],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323045,323050]},{"pos":[323059,323071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323077,323096],"content":"Method maxDateLabel","linkify":"Method maxDateLabel","nodes":[{"content":"Method maxDateLabel","pos":[0,19]}]},{"pos":[323145,323155],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323157,323162]},{"pos":[323171,323183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323189,323200],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[323202,323359]},{"pos":[323400,323410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323412,323417]},{"pos":[323426,323438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[323440,323508]},{"pos":[323515,323522],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[323524,323618]},{"content":"Begins with a letter.","pos":[323624,323645]},{"content":"Doesn't exceed 250 characters.","pos":[323650,323680]},{"content":"Can include numbers and underscore characters.","pos":[323685,323731]},{"content":"Cannot include punctuation or spaces.","pos":[323736,323773]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, classes, and so on.","pos":[323778,323908]},{"pos":[323914,323937],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[323990,324000],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324002,324007]},{"pos":[324016,324028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324034,324051],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[324098,324108],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324110,324115]},{"pos":[324124,324136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324142,324164],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[324224,324234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324236,324241]},{"pos":[324250,324262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324268,324291],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[324344,324354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324356,324361]},{"pos":[324370,324382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324388,324405],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[324452,324462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324464,324469]},{"pos":[324478,324490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324496,324514],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[324582,324592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324594,324599]},{"pos":[324608,324620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324626,324642],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[324696,324706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324708,324713]},{"pos":[324722,324734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324740,324751],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[324753,324880]},{"pos":[324929,324939],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324941,324946]},{"content":"The value to assign to the skip property of the control.","pos":[324949,325005]},{"pos":[325012,325024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[325026,325132]},{"pos":[325138,325150],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[325192,325202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325204,325209]},{"pos":[325218,325230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325236,325246],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[325296,325306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325308,325313]},{"content":"mode","pos":[325327,325331]},{"pos":[325340,325352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325358,325372],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[325416,325426],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325428,325433]},{"pos":[325442,325454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325460,325475],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[325520,325530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325532,325537]},{"pos":[325546,325558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325564,325575],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[325616,325626],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325628,325633]},{"pos":[325642,325654],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325660,325676],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[325678,325745]},{"pos":[325799,325809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325811,325816]},{"content":"The value to assign to the underline property of the control.","pos":[325819,325880]},{"pos":[325887,325899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[325901,325965]},{"pos":[325971,325986],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[326031,326041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[326043,326048]},{"pos":[326057,326069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[326075,326094],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[326143,326153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[326155,326160]},{"pos":[326169,326181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[326187,326207],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[326257,326267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[326269,326274]},{"pos":[326283,326295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[326301,326323],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[326392,326402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[326404,326409]},{"content":"mode","pos":[326423,326427]},{"pos":[326436,326448],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[326454,326480],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[326545,326555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[326557,326561]},{"pos":[326570,326582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[326588,326615],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[326672,326682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[326684,326689]},{"pos":[326698,326710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[326716,326735],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[326784,326794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[326796,326801]},{"pos":[326810,326822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[326828,326842],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[326894,326904],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[326906,326911]},{"pos":[326920,326932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[326938,326950],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[326952,326990]},{"pos":[327042,327052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[327054,327059]},{"content":"mode","pos":[327073,327077]},{"pos":[327086,327098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[327100,327135]},{"pos":[327142,327149],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[327151,327204]},{"content":"Calculate the width according to the following table:","pos":[327205,327258]},{"content":"Mode.","pos":[327262,327267]},{"content":"Width calculation.","pos":[327280,327298]},{"content":"-1 Exact.","pos":[327484,327493]},{"content":"The exact width in pixels of the controls is used.","pos":[327502,327552]},{"content":"0 Auto.","pos":[327595,327602]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[327613,327701]},{"content":"1 Column width.","pos":[327706,327721]},{"content":"The layout of the form determines the width of the control.","pos":[327724,327783]},{"content":"The width and width calculation mode can be set separately.","pos":[327816,327875]},{"pos":[327881,327897],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[327899,327961]},{"pos":[328007,328017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[328019,328024]},{"pos":[328033,328045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[328047,328108]},{"pos":[328115,328122],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[328124,328177]},{"content":"Mode.","pos":[328181,328186]},{"content":"Width Calculation.","pos":[328197,328215]},{"content":"Exact.","pos":[328399,328405]},{"content":"The exact width in pixels of the controls is used.","pos":[328415,328465]},{"content":"Auto.","pos":[328508,328513]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[328524,328612]},{"content":"Column width.","pos":[328617,328630]},{"content":"The layout of the form determines the width of the control.","pos":[328633,328692]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[328725,328808]},{"pos":[328814,328831],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[328833,328871]},{"pos":[328918,328928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[328930,328935]},{"pos":[328944,328956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[328958,328993]},{"pos":[329000,329007],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[329009,329082]},{"pos":[329088,329117],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[329235,329245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[329247,329263]},{"content":"objectMethodToCall","pos":[329277,329295]},{"content":"overrideObject","pos":[329309,329323]},{"pos":[329330,329360],"content":"Class FormBuildDateTimeControl","linkify":"Class FormBuildDateTimeControl","nodes":[{"content":"Class FormBuildDateTimeControl","pos":[0,30]}]},{"pos":[329426,329433],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[329439,329447],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[329453,329460],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[329464,329470]},{"content":"Description","pos":[329574,329585]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[329968,330014],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[330078,330118]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330220,330255],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[330472,330515],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[330582,330649]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330724,330760],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[330976,331025],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[331086,331184]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331228,331269],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[331338,331387]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331480,331515],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[331590,331651]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331732,331762],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[331842,331917]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331984,332016],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[332094,332150]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332236,332277],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332488,332526],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[332598,332641]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332740,332777],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[332850,332895]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[332992,333064],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[333102,333169]},{"content":"public int containerId()","pos":[333244,333268]},{"content":"Retrieves the ID of the parent container for the control.","pos":[333354,333411]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[333496,333540],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[333748,333807],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[334000,334043],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[334252,334288],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[334504,334546],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[334756,334796],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[334866,334938]},{"content":"public int dateDay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[335008,335041],"source":"public int dateDay(\\[int value\\])"},{"content":"public int dateFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[335260,335296],"source":"public int dateFormat(\\[int value\\])"},{"content":"public int dateMonth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[335512,335547],"source":"public int dateMonth(\\[int value\\])"},{"content":"public int dateSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[335764,335803],"source":"public int dateSeparator(\\[int value\\])"},{"content":"public DateTime dateTimeValue(<ph id=\"ph1\">\\[</ph>DateTime value<ph id=\"ph2\">\\]</ph>)","pos":[336016,336065],"source":"public DateTime dateTimeValue(\\[DateTime value\\])"},{"content":"public int dateYear(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336268,336302],"source":"public int dateYear(\\[int value\\])"},{"content":"public int displayOption(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336520,336559],"source":"public int displayOption(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336772,336811],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[337024,337058],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[337134,337215]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[337276,337317],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[337386,337437]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[337528,337592],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[337780,337820],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[338032,338062],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[338142,338199]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338284,338318],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[338394,338451]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338536,338577],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[338646,338697]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[338788,338830],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[338898,338937]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[339040,339076],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[339150,339212]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[339292,339329],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[339402,339441]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[339544,339578],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[339654,339758]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[339796,339837],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[340048,340063]},{"content":"Retrieves the ID of the control.","pos":[340158,340190]},{"content":"public boolean isContainer()","pos":[340300,340328]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[340410,340486]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[340552,340592],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[340804,340835],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[340914,340951]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[341056,341096],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[341308,341343],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[341560,341603],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[341812,341847],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[342064,342103],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[342316,342362],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[342568,342604],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[342820,342867],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[343072,343113],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[343324,343366],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[343576,343621],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[343828,343867],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[344080,344128],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[344332,344378],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[344584,344624],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[344836,344877],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[345088,345128],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[345340,345374],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[345592,345627],"source":"public int leftValue(\\[int value\\])"},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[345844,345898],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[346096,346144],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[346348,346388],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[346600,346638],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[346852,346895],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public str maxDateLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[347104,347142],"source":"public str maxDateLabel(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[347356,347386],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[347466,347619]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[347624,347666],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[347876,347912],"source":"public int promptrect(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[348128,348185],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[348380,348423],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[348632,348670],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public int timeFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[348884,348920],"source":"public int timeFormat(\\[int value\\])"},{"content":"public int timeHours(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[349136,349171],"source":"public int timeHours(\\[int value\\])"},{"content":"public int timeMinute(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[349388,349424],"source":"public int timeMinute(\\[int value\\])"},{"content":"public int timeSeconds(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[349640,349677],"source":"public int timeSeconds(\\[int value\\])"},{"content":"public int timeSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[349892,349931],"source":"public int timeSeparator(\\[int value\\])"},{"content":"public int timeZoneIndicator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350144,350187],"source":"public int timeZoneIndicator(\\[int value\\])"},{"content":"public int timezonePreference(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350396,350440],"source":"public int timezonePreference(\\[int value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[350648,350687],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350900,350933],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[351152,351186],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[351404,351434],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[351656,351699],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[351908,351942],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352160,352198],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352412,352451],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[352664,352724],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[352916,352970],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[353168,353214],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[353420,353458],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[353672,353713],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[353924,353965],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[354034,354072]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[354176,354211],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[354286,354348]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[354428,354464],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[354538,354576]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[354680,354787],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[354935,354954],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[354956,354996]},{"pos":[355053,355063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355065,355070]},{"pos":[355079,355091],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[355093,355149]},{"pos":[355156,355163],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[355165,355244]},{"pos":[355250,355266],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[355312,355322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355324,355329]},{"pos":[355338,355350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355356,355372],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[355374,355441]},{"pos":[355495,355505],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355507,355512]},{"pos":[355521,355533],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[355535,355587]},{"pos":[355594,355601],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[355603,355725]},{"pos":[355731,355748],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[355795,355805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355807,355812]},{"pos":[355821,355833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355839,355861],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[355863,355961]},{"pos":[356021,356031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356033,356038]},{"pos":[356047,356059],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[356061,356140]},{"pos":[356147,356154],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[356156,356193]},{"pos":[356199,356221],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[356223,356272]},{"pos":[356324,356334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356336,356341]},{"pos":[356350,356362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[356364,356408]},{"pos":[356415,356422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[356424,356492]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[356498,356568]},{"content":"The second byte contains a value for green.","pos":[356573,356616]},{"content":"The third byte contains a value for blue.","pos":[356621,356662]},{"content":"The high-order byte must be zero.","pos":[356667,356700]},{"content":"The maximum value for a single byte is 255.","pos":[356705,356748]},{"pos":[356754,356770],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[356772,356833]},{"pos":[356879,356889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356891,356896]},{"pos":[356905,356917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[356919,356980]},{"pos":[356986,356997],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[356999,357074]},{"pos":[357115,357125],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357127,357132]},{"pos":[357141,357153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[357155,357205]},{"pos":[357212,357219],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[357221,357293]},{"content":"0 Use the default font weight.","pos":[357299,357329]},{"content":"1 Thin.","pos":[357334,357341]},{"content":"2 Extra-light.","pos":[357346,357360]},{"content":"3 Light.","pos":[357365,357373]},{"content":"4 Normal.","pos":[357378,357387]},{"content":"5 Medium.","pos":[357392,357401]},{"content":"6 Semibold.","pos":[357406,357417]},{"content":"7 Bold.","pos":[357422,357429]},{"content":"8 Extra-bold.","pos":[357434,357447]},{"content":"9 Heavy.","pos":[357452,357460]},{"pos":[357466,357479],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[357481,357537]},{"pos":[357580,357590],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357592,357597]},{"pos":[357606,357618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[357620,357664]},{"pos":[357671,357678],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[357680,357772]},{"content":"Value.","pos":[357776,357782]},{"content":"Description.","pos":[357785,357797]},{"content":"0","pos":[357828,357829]},{"content":"Auto.","pos":[357837,357842]},{"content":"1","pos":[357854,357855]},{"content":"3D.","pos":[357863,357866]},{"content":"2","pos":[357880,357881]},{"content":"Single line.","pos":[357889,357901]},{"content":"3","pos":[357906,357907]},{"content":"Flat.","pos":[357915,357920]},{"content":"4","pos":[357932,357933]},{"content":"None.","pos":[357941,357946]},{"pos":[357961,357983],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[358035,358045],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358047,358052]},{"pos":[358061,358073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[358079,358098],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[358100,358143]},{"pos":[358192,358202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358204,358209]},{"pos":[358218,358230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[358232,358294]},{"pos":[358301,358308],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[358310,358414]},{"content":"Value.","pos":[358418,358424]},{"content":"Description.","pos":[358427,358439]},{"content":"0","pos":[358486,358487]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358495,358508],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[358520,358521]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358529,358545],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[358554,358555]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358563,358578],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[358588,358590]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358597,358609],"source":"MAC\\_CHARSET"},{"content":"128","pos":[358622,358625]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358631,358648],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[358656,358659]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358665,358680],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[358690,358693]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358699,358714],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[358724,358727]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358733,358753],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[358758,358761]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358767,358781],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[358792,358795]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358801,358817],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[358826,358829]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358835,358854],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[358860,358863]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358869,358884],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[358894,358897]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358903,358919],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[358928,358931]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358937,358956],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[358962,358965]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[358971,358983],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[358995,359083]},{"content":"Value.","pos":[359087,359093]},{"content":"Description.","pos":[359096,359108]},{"content":"130","pos":[359143,359146]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[359152,359166],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[359170,359265]},{"content":"Value.","pos":[359269,359275]},{"content":"Description.","pos":[359278,359290]},{"content":"177","pos":[359327,359330]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[359336,359351],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[359356,359359]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[359365,359380],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[359384,359470]},{"content":"Value.","pos":[359474,359480]},{"content":"Description.","pos":[359483,359495]},{"content":"222","pos":[359528,359531]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[359537,359550],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[359554,359638]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[359639,359730],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[359731,359846]},{"pos":[359852,359870],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[359872,359917]},{"pos":[359965,359975],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359977,359982]},{"pos":[359991,360003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[360005,360048]},{"pos":[360055,360062],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[360064,360125]},{"content":"Value.","pos":[360129,360135]},{"content":"Style.","pos":[360138,360144]},{"content":"0","pos":[360215,360216]},{"content":"Default.","pos":[360224,360232]},{"content":"1","pos":[360258,360259]},{"content":"The MicrosoftWindows palette.","pos":[360267,360296]},{"content":"2","pos":[360301,360302]},{"content":"The true-color scheme.","pos":[360310,360332]},{"pos":[360347,360370],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[360372,360439]},{"pos":[360522,360532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[360534,360539]},{"pos":[360548,360560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[360562,360634]},{"pos":[360641,360648],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[360650,360731]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[360732,360825]},{"pos":[360831,360849],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[360851,360908]},{"pos":[360945,360957],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[360959,360990]},{"pos":[360996,361021],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[361076,361086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361088,361093]},{"pos":[361102,361114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361120,361152],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[361222,361232],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361234,361239]},{"pos":[361248,361260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361266,361282],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[361336,361346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361348,361353]},{"pos":[361362,361374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361380,361397],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[361444,361454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361456,361461]},{"pos":[361470,361482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361488,361511],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[361564,361574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361576,361581]},{"pos":[361590,361602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361608,361625],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[361627,361699]},{"pos":[361750,361760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361762,361767]},{"pos":[361776,361788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[361790,361842]},{"pos":[361848,361862],"content":"Method dateDay","linkify":"Method dateDay","nodes":[{"content":"Method dateDay","pos":[0,14]}]},{"pos":[361906,361916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361918,361923]},{"pos":[361932,361944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361950,361967],"content":"Method dateFormat","linkify":"Method dateFormat","nodes":[{"content":"Method dateFormat","pos":[0,17]}]},{"pos":[362014,362024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362026,362031]},{"pos":[362040,362052],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362058,362074],"content":"Method dateMonth","linkify":"Method dateMonth","nodes":[{"content":"Method dateMonth","pos":[0,16]}]},{"pos":[362120,362130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362132,362137]},{"pos":[362146,362158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362164,362184],"content":"Method dateSeparator","linkify":"Method dateSeparator","nodes":[{"content":"Method dateSeparator","pos":[0,20]}]},{"pos":[362234,362244],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362246,362251]},{"pos":[362260,362272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362278,362298],"content":"Method dateTimeValue","linkify":"Method dateTimeValue","nodes":[{"content":"Method dateTimeValue","pos":[0,20]}]},{"pos":[362358,362368],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362370,362375]},{"pos":[362384,362396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362402,362417],"content":"Method dateYear","linkify":"Method dateYear","nodes":[{"content":"Method dateYear","pos":[0,15]}]},{"pos":[362462,362472],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362474,362479]},{"pos":[362488,362500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362506,362526],"content":"Method displayOption","linkify":"Method displayOption","nodes":[{"content":"Method displayOption","pos":[0,20]}]},{"pos":[362576,362586],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362588,362593]},{"pos":[362602,362614],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362620,362640],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[362690,362700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362702,362707]},{"pos":[362716,362728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362734,362749],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[362751,362832]},{"pos":[362877,362887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362889,362894]},{"pos":[362903,362915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[362917,362977]},{"pos":[362983,362997],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[362999,363050]},{"pos":[363102,363112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363114,363119]},{"pos":[363128,363140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[363142,363190]},{"pos":[363197,363204],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[363206,363285]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[363286,363381]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[363382,363516]},{"pos":[363522,363545],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[363620,363630],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363632,363637]},{"pos":[363646,363658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363664,363685],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[363736,363746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363748,363753]},{"pos":[363762,363774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363780,363791],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[363793,363850]},{"pos":[363891,363901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363903,363908]},{"pos":[363917,363929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[363931,363986]},{"pos":[363992,364007],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[364009,364066]},{"pos":[364111,364121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364123,364128]},{"pos":[364137,364149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[364151,364184]},{"pos":[364190,364212],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[364214,364265]},{"pos":[364317,364327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364329,364334]},{"pos":[364343,364355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[364357,364401]},{"pos":[364408,364415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[364417,364485]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[364491,364561]},{"content":"The second byte contains a value for green.","pos":[364566,364609]},{"content":"The third byte contains a value for blue.","pos":[364614,364655]},{"content":"The high-order byte must be zero.","pos":[364660,364693]},{"content":"The maximum value for a single byte is 255.","pos":[364698,364741]},{"pos":[364747,364760],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[364762,364801]},{"pos":[364854,364864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364866,364871]},{"content":"mode","pos":[364885,364889]},{"pos":[364898,364910],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[364912,364948]},{"pos":[364955,364962],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[364964,365017]},{"content":"Calculate the height according to the following table:","pos":[365018,365072]},{"content":"Mode.","pos":[365076,365081]},{"content":"Height calculation.","pos":[365095,365114]},{"content":"-1 Exact.","pos":[365302,365311]},{"content":"The exact height in pixels of the controls is used.","pos":[365321,365372]},{"content":"0 Auto.","pos":[365415,365422]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[365434,365523]},{"content":"1 Column height.","pos":[365528,365544]},{"content":"The layout of the form determines the height of the control.","pos":[365547,365607]},{"content":"The height and height calculation mode can be set separately.","pos":[365640,365701]},{"pos":[365707,365724],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[365726,365788]},{"pos":[365835,365845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365847,365852]},{"pos":[365861,365873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[365875,365896]},{"pos":[365903,365910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[365912,365966]},{"content":"Mode.","pos":[365970,365975]},{"content":"Height Calculation.","pos":[365987,366006]},{"content":"Exact.","pos":[366192,366198]},{"content":"The exact height in pixels of the controls is used.","pos":[366209,366260]},{"content":"Auto.","pos":[366303,366308]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[366320,366409]},{"content":"Column height.","pos":[366414,366428]},{"content":"The layout of the form determines the height of the control.","pos":[366431,366491]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[366524,366609]},{"pos":[366615,366633],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[366635,366674]},{"pos":[366722,366732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366734,366739]},{"pos":[366748,366760],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[366762,366783]},{"pos":[366790,366797],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[366799,366889]},{"pos":[366895,366910],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[366912,367016]},{"pos":[367061,367071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367073,367078]},{"pos":[367087,367099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[367101,367156]},{"pos":[367163,367170],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.","pos":[367172,367245]},{"content":"The help text must not exceed 250 characters.","pos":[367246,367291]},{"pos":[367297,367319],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[367371,367381],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367383,367388]},{"pos":[367397,367409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367415,367424],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[367426,367458]},{"pos":[367486,367498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[367500,367522]},{"pos":[367528,367546],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[367548,367624]},{"pos":[367665,367677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[367679,367753]},{"pos":[367759,367772],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[367823,367833],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367835,367840]},{"pos":[367849,367861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367867,367879],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[367881,367918]},{"pos":[367960,367970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367972,367977]},{"pos":[367986,367998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[368000,368038]},{"pos":[368045,368052],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[368054,368132]},{"content":"The label property value cannot exceed 250 characters.","pos":[368133,368187]},{"pos":[368193,368214],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[368265,368275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368277,368282]},{"pos":[368291,368303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368309,368325],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[368371,368381],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368383,368388]},{"pos":[368397,368409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368415,368439],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[368493,368503],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368505,368510]},{"pos":[368519,368531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368537,368553],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[368599,368609],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368611,368616]},{"pos":[368625,368637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368643,368663],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[368713,368723],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368725,368730]},{"pos":[368739,368751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368757,368784],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[368841,368851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368853,368858]},{"pos":[368867,368879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368885,368902],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[368949,368959],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368961,368966]},{"pos":[368975,368987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368993,369011],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[369069,369079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369081,369086]},{"content":"mode","pos":[369100,369104]},{"pos":[369113,369125],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369131,369153],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[369205,369215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369217,369222]},{"pos":[369231,369243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369249,369272],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[369325,369335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369337,369342]},{"pos":[369351,369363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369369,369387],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[369443,369453],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369455,369460]},{"pos":[369469,369481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369487,369507],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[369557,369567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369569,369574]},{"pos":[369583,369595],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369601,369622],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[369681,369691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369693,369698]},{"pos":[369707,369719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369725,369742],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[369799,369809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369811,369816]},{"content":"mode","pos":[369830,369834]},{"pos":[369843,369855],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369861,369882],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[369933,369943],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369945,369950]},{"pos":[369959,369971],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[369977,369999],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[370051,370061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370063,370068]},{"pos":[370077,370089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370095,370106],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[370157,370167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370169,370174]},{"content":"mode","pos":[370188,370192]},{"pos":[370201,370213],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370219,370234],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[370279,370289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370291,370296]},{"pos":[370305,370317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370323,370339],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[370385,370395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370397,370402]},{"pos":[370411,370423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370429,370445],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[370508,370518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370520,370525]},{"content":"mode","pos":[370539,370543]},{"pos":[370552,370564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370570,370590],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[370649,370659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[370661,370665]},{"pos":[370674,370686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370692,370713],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[370764,370774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370776,370781]},{"pos":[370790,370802],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370808,370827],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[370876,370886],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370888,370893]},{"pos":[370902,370914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370920,370936],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[370990,371000],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371002,371007]},{"pos":[371016,371028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371034,371053],"content":"Method maxDateLabel","linkify":"Method maxDateLabel","nodes":[{"content":"Method maxDateLabel","pos":[0,19]}]},{"pos":[371102,371112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371114,371119]},{"pos":[371128,371140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371146,371157],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[371159,371312]},{"pos":[371353,371363],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371365,371370]},{"pos":[371379,371391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[371393,371457]},{"pos":[371464,371471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[371473,371567]},{"content":"Begins with a letter.","pos":[371573,371594]},{"content":"Doesn't exceed 250 characters.","pos":[371599,371629]},{"content":"Can include numbers and underscore characters.","pos":[371634,371680]},{"content":"Cannot include punctuation or spaces.","pos":[371685,371722]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumerations, classes, and so on.","pos":[371727,371852]},{"pos":[371858,371881],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[371934,371944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[371946,371951]},{"pos":[371960,371972],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[371978,371995],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[372042,372052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372054,372059]},{"pos":[372068,372080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372086,372104],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[372172,372182],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372184,372189]},{"pos":[372198,372210],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372216,372232],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[372286,372296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372298,372303]},{"pos":[372312,372324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372330,372341],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[372390,372400],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372402,372407]},{"pos":[372416,372428],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372434,372451],"content":"Method timeFormat","linkify":"Method timeFormat","nodes":[{"content":"Method timeFormat","pos":[0,17]}]},{"pos":[372498,372508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372510,372515]},{"pos":[372524,372536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372542,372558],"content":"Method timeHours","linkify":"Method timeHours","nodes":[{"content":"Method timeHours","pos":[0,16]}]},{"pos":[372604,372614],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372616,372621]},{"pos":[372630,372642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372648,372665],"content":"Method timeMinute","linkify":"Method timeMinute","nodes":[{"content":"Method timeMinute","pos":[0,17]}]},{"pos":[372712,372722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372724,372729]},{"pos":[372738,372750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372756,372774],"content":"Method timeSeconds","linkify":"Method timeSeconds","nodes":[{"content":"Method timeSeconds","pos":[0,18]}]},{"pos":[372822,372832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372834,372839]},{"pos":[372848,372860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372866,372886],"content":"Method timeSeparator","linkify":"Method timeSeparator","nodes":[{"content":"Method timeSeparator","pos":[0,20]}]},{"pos":[372936,372946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[372948,372953]},{"pos":[372962,372974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[372980,373004],"content":"Method timeZoneIndicator","linkify":"Method timeZoneIndicator","nodes":[{"content":"Method timeZoneIndicator","pos":[0,24]}]},{"pos":[373058,373068],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373070,373075]},{"pos":[373084,373096],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373102,373127],"content":"Method timezonePreference","linkify":"Method timezonePreference","nodes":[{"content":"Method timezonePreference","pos":[0,25]}]},{"pos":[373182,373192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373194,373199]},{"pos":[373208,373220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373226,373236],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[373286,373296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373298,373303]},{"content":"mode","pos":[373317,373321]},{"pos":[373330,373342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373348,373362],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[373406,373416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373418,373423]},{"pos":[373432,373444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373450,373465],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[373510,373520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373522,373527]},{"pos":[373536,373548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373554,373565],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[373606,373616],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373618,373623]},{"pos":[373632,373644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373650,373666],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[373720,373730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373732,373737]},{"pos":[373746,373758],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373764,373779],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[373824,373834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373836,373841]},{"pos":[373850,373862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373868,373887],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[373936,373946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373948,373953]},{"pos":[373962,373974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373980,374000],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[374050,374060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374062,374067]},{"pos":[374076,374088],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[374094,374116],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[374185,374195],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374197,374202]},{"content":"mode","pos":[374216,374220]},{"pos":[374229,374241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[374247,374273],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[374338,374348],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[374350,374354]},{"pos":[374363,374375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[374381,374408],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[374465,374475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374477,374482]},{"pos":[374491,374503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[374509,374528],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[374577,374587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374589,374594]},{"pos":[374603,374615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[374621,374635],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[374687,374697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374699,374704]},{"pos":[374713,374725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[374731,374743],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[374745,374783]},{"pos":[374835,374845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374847,374852]},{"content":"mode","pos":[374866,374870]},{"pos":[374879,374891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[374893,374928]},{"pos":[374935,374942],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[374944,374997]},{"content":"Calculate the width according to the following table:","pos":[374998,375051]},{"content":"Mode.","pos":[375055,375060]},{"content":"Width calculation.","pos":[375073,375091]},{"content":"-1 Exact.","pos":[375277,375286]},{"content":"The exact width in pixels of the controls is used.","pos":[375295,375345]},{"content":"0 Auto.","pos":[375388,375395]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[375406,375494]},{"content":"1 Column width.","pos":[375499,375514]},{"content":"The layout of the form determines the width of the control.","pos":[375517,375576]},{"content":"The width and width calculation mode can be set separately.","pos":[375609,375668]},{"pos":[375674,375690],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[375692,375754]},{"pos":[375800,375810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375812,375817]},{"pos":[375826,375838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[375840,375901]},{"pos":[375908,375915],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[375917,375970]},{"content":"Mode.","pos":[375974,375979]},{"content":"Width Calculation.","pos":[375990,376008]},{"content":"Exact.","pos":[376192,376198]},{"content":"The exact width in pixels of the controls is used.","pos":[376208,376258]},{"content":"Auto.","pos":[376301,376306]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[376317,376405]},{"content":"Column width.","pos":[376410,376423]},{"content":"The layout of the form determines the width of the control.","pos":[376426,376485]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[376518,376601]},{"pos":[376607,376624],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[376626,376664]},{"pos":[376711,376721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[376723,376728]},{"pos":[376737,376749],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[376751,376786]},{"pos":[376793,376800],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[376802,376875]},{"pos":[376881,376910],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[377028,377038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[377040,377056]},{"content":"objectMethodToCall","pos":[377070,377088]},{"content":"overrideObject","pos":[377102,377116]},{"pos":[377123,377144],"content":"Class FormBuildDesign","linkify":"Class FormBuildDesign","nodes":[{"content":"Class FormBuildDesign","pos":[0,21]}]},{"content":"The FormBuildDesign class modifies a form design.","pos":[377187,377236]},{"pos":[377242,377249],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class lets you create, read, update, and delete X++ code and metadata.","pos":[377251,377326]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[377327,377437]},{"pos":[377443,377451],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[377457,377464],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[377468,377474]},{"content":"Description","pos":[377598,377609]},{"content":"public Object addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormBuildControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean pushFront<ph id=\"ph4\">\\]</ph>)","pos":[377888,378015],"source":"public Object addControl(FormControlType controlType, str controlName, \\[FormBuildControl insertAfter\\], \\[boolean pushFront\\])"},{"content":"public Object addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormBuildControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean pushFront<ph id=\"ph4\">\\]</ph>)","pos":[378098,378216],"source":"public Object addControlEx(str controlClass, str controlName, \\[FormBuildControl insertAfter\\], \\[boolean pushFront\\])"},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[378308,378352],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[378518,378565],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean allowDocking(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[378728,378774],"source":"public boolean allowDocking(\\[boolean value\\])"},{"content":"public boolean allowFormCompanyChange(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[378938,378994],"source":"public boolean allowFormCompanyChange(\\[boolean value\\])"},{"content":"public boolean allowImplicitParent(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[379148,379201],"source":"public boolean allowImplicitParent(\\[boolean value\\])"},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[379358,379398],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public boolean alwaysOnTop(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[379568,379613],"source":"public boolean alwaysOnTop(\\[boolean value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[379778,379816],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[379988,380027],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[380198,380235],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[380408,380449],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[380538,380587]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[380618,380648],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[380748,380823]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[380828,380885],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[381038,381089],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[381248,381291],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[381458,381491],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[381588,381627]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[381668,381706],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[381798,381841]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[381878,381915],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[382008,382053]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[382088,382143],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[382298,382350],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[382508,382564],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[382718,382768],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[382928,382970],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[383138,383176],"source":"public int columnsValue(\\[int value\\])"},{"content":"public Object control(AnyType control)","pos":[383348,383386]},{"content":"public int controlCount()","pos":[383558,383583]},{"content":"public FormBuildControl controlNum(int controlNo)","pos":[383768,383817]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[383978,384012],"source":"public str cssClass(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[384188,384228],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that should be used by the control or the form.","pos":[384318,384392]},{"content":"public str defaultAction(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[384398,384437],"source":"public str defaultAction(\\[str value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[384608,384638],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[384738,384795]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[384818,384852],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[384948,385005]},{"content":"public int frame(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[385028,385059],"source":"public int frame(\\[int value\\])"},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[385238,385280],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[385368,385407]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[385448,385484],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[385578,385640]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[385658,385695],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[385788,385827]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[385868,385913],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public boolean hideToolbar(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[386078,386123],"source":"public boolean hideToolbar(\\[boolean value\\])"},{"content":"public int imagemode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[386288,386323],"source":"public int imagemode(\\[int value\\])"},{"content":"public str imageName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[386498,386533],"source":"public str imageName(\\[str value\\])"},{"content":"public int imageResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[386708,386747],"source":"public int imageResource(\\[int value\\])"},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[386918,386958],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[387128,387163],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[387338,387381],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[387548,387583],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[387758,387797],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[387968,388013],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[388178,388226],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[388388,388428],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[388598,388653],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[388808,388857],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[389018,389059],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[389228,389262],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[389438,389473],"source":"public int leftValue(\\[int value\\])"},{"content":"public str localWebMenu(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[389648,389686],"source":"public str localWebMenu(\\[str value\\])"},{"content":"public boolean maximizeBox(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[389858,389903],"source":"public boolean maximizeBox(\\[boolean value\\])"},{"content":"public boolean minimizeBox(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[390068,390113],"source":"public boolean minimizeBox(\\[boolean value\\])"},{"content":"public int mode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[390278,390308],"source":"public int mode(\\[int value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[390488,390555],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"public str newRecordAction(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[390698,390739],"source":"public str newRecordAction(\\[str value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[390908,390964],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[391118,391168],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[391328,391370],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public boolean saveSize(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[391538,391580],"source":"public boolean saveSize(\\[boolean value\\])"},{"content":"public int scrollbars(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[391748,391784],"source":"public int scrollbars(\\[int value\\])"},{"content":"public boolean setCompany(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[391958,392002],"source":"public boolean setCompany(\\[boolean value\\])"},{"content":"public int showDeleteButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392168,392210],"source":"public int showDeleteButton(\\[int value\\])"},{"content":"public int showNewButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392378,392417],"source":"public int showNewButton(\\[int value\\])"},{"content":"public int showWebHelp(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392588,392625],"source":"public int showWebHelp(\\[int value\\])"},{"content":"public int statusBarStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392798,392838],"source":"public int statusBarStyle(\\[int value\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393008,393039],"source":"public int style(\\[int value\\])"},{"content":"public int submitMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393218,393256],"source":"public int submitMethod(\\[int value\\])"},{"content":"public boolean supportReload(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[393428,393475],"source":"public boolean supportReload(\\[boolean value\\])"},{"content":"public int titleDatasource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[393638,393683],"source":"public int titleDatasource(\\[AnyType value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[393848,393887],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[394058,394112],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[394268,394316],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[394478,394518],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[394688,394721],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[394898,394932],"source":"public int topValue(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[395108,395151],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public int useCaptionFromMenuItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[395318,395366],"source":"public int useCaptionFromMenuItem(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[395528,395566],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[395738,395779],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[395948,395989],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[396078,396116]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396158,396193],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[396288,396350]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396368,396404],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[396498,396536]},{"content":"public int windowResize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396578,396616],"source":"public int windowResize(\\[int value\\])"},{"content":"public int windowType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396788,396824],"source":"public int windowType(\\[int value\\])"},{"content":"public int workflowDatasource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[396998,397046],"source":"public int workflowDatasource(\\[AnyType value\\])"},{"content":"public boolean workflowEnabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[397208,397257],"source":"public boolean workflowEnabled(\\[boolean value\\])"},{"content":"public str workflowType(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[397418,397456],"source":"public str workflowType(\\[str value\\])"},{"content":"public int dialogSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[397628,397664],"source":"public int dialogSize(\\[int value\\])"},{"pos":[397841,397858],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[397994,398004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[398006,398017]},{"content":"controlName","pos":[398031,398042]},{"content":"insertAfter","pos":[398056,398067]},{"content":"pushFront","pos":[398081,398090]},{"pos":[398099,398111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[398117,398136],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[398263,398273],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[398275,398287]},{"content":"controlName","pos":[398301,398312]},{"content":"insertAfter","pos":[398326,398337]},{"content":"pushFront","pos":[398351,398360]},{"pos":[398369,398381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[398387,398404],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[398459,398469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398471,398476]},{"pos":[398485,398497],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[398503,398523],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[398581,398591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398593,398598]},{"pos":[398607,398619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[398625,398644],"content":"Method allowDocking","linkify":"Method allowDocking","nodes":[{"content":"Method allowDocking","pos":[0,19]}]},{"pos":[398701,398711],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398713,398718]},{"pos":[398727,398739],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[398745,398774],"content":"Method allowFormCompanyChange","linkify":"Method allowFormCompanyChange","nodes":[{"content":"Method allowFormCompanyChange","pos":[0,29]}]},{"pos":[398841,398851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398853,398858]},{"pos":[398867,398879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[398885,398911],"content":"Method allowImplicitParent","linkify":"Method allowImplicitParent","nodes":[{"content":"Method allowImplicitParent","pos":[0,26]}]},{"pos":[398975,398985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398987,398992]},{"pos":[399001,399013],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[399019,399040],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[399091,399101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399103,399108]},{"pos":[399117,399129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[399135,399153],"content":"Method alwaysOnTop","linkify":"Method alwaysOnTop","nodes":[{"content":"Method alwaysOnTop","pos":[0,18]}]},{"pos":[399209,399219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399221,399226]},{"pos":[399235,399247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[399253,399272],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[399321,399331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399333,399338]},{"pos":[399347,399359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[399365,399385],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[399435,399445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399447,399452]},{"pos":[399461,399473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[399479,399497],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[399545,399555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399557,399562]},{"pos":[399571,399583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[399589,399611],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[399613,399662]},{"pos":[399714,399724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399726,399731]},{"pos":[399740,399752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[399754,399798]},{"pos":[399805,399812],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[399814,399882]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[399888,399958]},{"content":"The second byte contains a value for green.","pos":[399963,400006]},{"content":"The third byte contains a value for blue.","pos":[400011,400052]},{"content":"The high-order byte must be zero.","pos":[400057,400090]},{"content":"The maximum value for a single byte is 255.","pos":[400095,400138]},{"pos":[400144,400155],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[400157,400232]},{"pos":[400273,400283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400285,400290]},{"pos":[400299,400311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[400313,400363]},{"pos":[400370,400377],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[400379,400451]},{"content":"0 Use the default font weight.","pos":[400457,400487]},{"content":"1 Thin.","pos":[400492,400499]},{"content":"2 Extra-light.","pos":[400504,400518]},{"content":"3 Light.","pos":[400523,400531]},{"content":"4 Normal.","pos":[400536,400545]},{"content":"5 Medium.","pos":[400550,400559]},{"content":"6 Semibold.","pos":[400564,400575]},{"content":"7 Bold.","pos":[400580,400587]},{"content":"8 Extra-bold.","pos":[400592,400605]},{"content":"9 Heavy.","pos":[400610,400618]},{"pos":[400624,400643],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[400709,400719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400721,400726]},{"content":"mode","pos":[400740,400744]},{"pos":[400753,400765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[400771,400794],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[400856,400866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[400868,400872]},{"pos":[400881,400893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[400899,400923],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[400977,400987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400989,400994]},{"pos":[401003,401015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401021,401035],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[401037,401076]},{"pos":[401120,401130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401132,401137]},{"pos":[401146,401158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[401160,401214]},{"pos":[401220,401239],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[401241,401284]},{"pos":[401333,401343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401345,401350]},{"pos":[401359,401371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[401373,401435]},{"pos":[401442,401449],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[401451,401555]},{"content":"Value.","pos":[401559,401565]},{"content":"Description.","pos":[401568,401580]},{"content":"0","pos":[401627,401628]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401636,401649],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[401661,401662]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401670,401686],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[401695,401696]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401704,401719],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[401729,401731]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401738,401750],"source":"MAC\\_CHARSET"},{"content":"128","pos":[401763,401766]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401772,401789],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[401797,401800]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401806,401821],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[401831,401834]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401840,401855],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[401865,401868]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401874,401894],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[401899,401902]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401908,401922],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[401933,401936]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401942,401958],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[401967,401970]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[401976,401995],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[402001,402004]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[402010,402025],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[402035,402038]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[402044,402060],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[402069,402072]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[402078,402097],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[402103,402106]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[402112,402124],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[402136,402224]},{"content":"Value.","pos":[402228,402234]},{"content":"Description.","pos":[402237,402249]},{"content":"130","pos":[402284,402287]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[402293,402307],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[402311,402406]},{"content":"Value.","pos":[402410,402416]},{"content":"Description.","pos":[402419,402431]},{"content":"177","pos":[402468,402471]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[402477,402492],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[402497,402500]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[402506,402521],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[402525,402611]},{"content":"Value.","pos":[402615,402621]},{"content":"Description.","pos":[402624,402636]},{"content":"222","pos":[402669,402672]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[402678,402691],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[402695,402782]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[402783,402989],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[402995,403013],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[403015,403060]},{"pos":[403108,403118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403120,403125]},{"pos":[403134,403146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[403148,403191]},{"pos":[403198,403205],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[403207,403268]},{"content":"Value.","pos":[403272,403278]},{"content":"Style.","pos":[403281,403287]},{"content":"0","pos":[403358,403359]},{"content":"Default.","pos":[403367,403375]},{"content":"1","pos":[403401,403402]},{"content":"The MicrosoftWindows palette.","pos":[403410,403439]},{"content":"2","pos":[403444,403445]},{"content":"The true-color scheme.","pos":[403453,403475]},{"pos":[403490,403504],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[403568,403578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403580,403585]},{"content":"mode","pos":[403599,403603]},{"pos":[403612,403624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403630,403648],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[403711,403721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[403723,403727]},{"pos":[403736,403748],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403754,403772],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[403837,403847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403849,403854]},{"content":"mode","pos":[403868,403872]},{"pos":[403881,403893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[403899,403921],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[403982,403992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[403994,403998]},{"pos":[404007,404019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404025,404048],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[404101,404111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404113,404118]},{"pos":[404127,404139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404145,404164],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[404213,404223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404225,404230]},{"pos":[404239,404251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404257,404271],"content":"Method control","linkify":"Method control","nodes":[{"content":"Method control","pos":[0,14]}]},{"pos":[404322,404332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[404334,404341]},{"pos":[404350,404362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404368,404387],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[404425,404437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404443,404460],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[404522,404532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[404534,404543]},{"pos":[404552,404564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404570,404585],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[404630,404640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404642,404647]},{"pos":[404656,404668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[404674,404691],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that should be used by the control or the form.","pos":[404693,404767]},{"pos":[404818,404828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404830,404835]},{"pos":[404844,404856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[404858,404910]},{"pos":[404916,404936],"content":"Method defaultAction","linkify":"Method defaultAction","nodes":[{"content":"Method defaultAction","pos":[0,20]}]},{"pos":[404986,404996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404998,405003]},{"pos":[405012,405024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[405030,405041],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[405043,405100]},{"pos":[405141,405151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405153,405158]},{"pos":[405167,405179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[405181,405236]},{"pos":[405242,405257],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[405259,405316]},{"pos":[405361,405371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405373,405378]},{"pos":[405387,405399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[405401,405434]},{"pos":[405440,405452],"content":"Method frame","linkify":"Method frame","nodes":[{"content":"Method frame","pos":[0,12]}]},{"pos":[405494,405504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405506,405511]},{"pos":[405520,405532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[405538,405551],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[405553,405592]},{"pos":[405645,405655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405657,405662]},{"content":"mode","pos":[405676,405680]},{"pos":[405689,405701],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[405703,405739]},{"pos":[405746,405753],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[405755,405808]},{"content":"Calculate the height according to the following table:","pos":[405809,405863]},{"content":"Mode.","pos":[405867,405872]},{"content":"Height calculation.","pos":[405886,405905]},{"content":"-1 Exact.","pos":[406093,406102]},{"content":"The exact height in pixels of the controls is used.","pos":[406112,406163]},{"content":"0 Auto.","pos":[406206,406213]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[406225,406314]},{"content":"1 Column height.","pos":[406319,406335]},{"content":"The layout of the form determines the height of the control.","pos":[406338,406398]},{"content":"The height and height calculation mode can be set separately.","pos":[406431,406492]},{"pos":[406498,406515],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[406517,406579]},{"pos":[406626,406636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[406638,406643]},{"pos":[406652,406664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[406666,406687]},{"pos":[406694,406701],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[406703,406757]},{"content":"Mode.","pos":[406761,406766]},{"content":"Height Calculation.","pos":[406778,406797]},{"content":"Exact.","pos":[406983,406989]},{"content":"The exact height in pixels of the controls is used.","pos":[407000,407051]},{"content":"Auto.","pos":[407094,407099]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[407111,407200]},{"content":"Column height.","pos":[407205,407219]},{"content":"The layout of the form determines the height of the control.","pos":[407222,407282]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[407315,407400]},{"pos":[407406,407424],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[407426,407465]},{"pos":[407513,407523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[407525,407530]},{"pos":[407539,407551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[407553,407574]},{"pos":[407581,407588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[407590,407680]},{"pos":[407686,407704],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[407760,407770],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[407772,407777]},{"pos":[407786,407798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[407804,407822],"content":"Method hideToolbar","linkify":"Method hideToolbar","nodes":[{"content":"Method hideToolbar","pos":[0,18]}]},{"pos":[407878,407888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[407890,407895]},{"pos":[407904,407916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[407922,407938],"content":"Method imagemode","linkify":"Method imagemode","nodes":[{"content":"Method imagemode","pos":[0,16]}]},{"pos":[407984,407994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[407996,408001]},{"pos":[408010,408022],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408028,408044],"content":"Method imageName","linkify":"Method imageName","nodes":[{"content":"Method imageName","pos":[0,16]}]},{"pos":[408090,408100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408102,408107]},{"pos":[408116,408128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408134,408154],"content":"Method imageResource","linkify":"Method imageResource","nodes":[{"content":"Method imageResource","pos":[0,20]}]},{"pos":[408204,408214],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408216,408221]},{"pos":[408230,408242],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408248,408261],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[408312,408322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408324,408329]},{"pos":[408338,408350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408356,408372],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[408418,408428],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408430,408435]},{"pos":[408444,408456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408462,408486],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[408540,408550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408552,408557]},{"pos":[408566,408578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408584,408600],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[408646,408656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408658,408663]},{"pos":[408672,408684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408690,408710],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[408760,408770],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408772,408777]},{"pos":[408786,408798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408804,408822],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[408878,408888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408890,408895]},{"pos":[408904,408916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408922,408943],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[409002,409012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409014,409019]},{"pos":[409028,409040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409046,409057],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[409108,409118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409120,409125]},{"content":"mode","pos":[409139,409143]},{"pos":[409152,409164],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409170,409187],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[409251,409261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409263,409268]},{"content":"mode","pos":[409282,409286]},{"pos":[409295,409307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409313,409334],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[409394,409404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[409406,409410]},{"pos":[409419,409431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409437,409459],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[409511,409521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409523,409528]},{"pos":[409537,409549],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409555,409570],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[409615,409625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409627,409632]},{"pos":[409641,409653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409659,409675],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[409721,409731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409733,409738]},{"pos":[409747,409759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409765,409784],"content":"Method localWebMenu","linkify":"Method localWebMenu","nodes":[{"content":"Method localWebMenu","pos":[0,19]}]},{"pos":[409833,409843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409845,409850]},{"pos":[409859,409871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409877,409895],"content":"Method maximizeBox","linkify":"Method maximizeBox","nodes":[{"content":"Method maximizeBox","pos":[0,18]}]},{"pos":[409951,409961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409963,409968]},{"pos":[409977,409989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409995,410013],"content":"Method minimizeBox","linkify":"Method minimizeBox","nodes":[{"content":"Method minimizeBox","pos":[0,18]}]},{"pos":[410069,410079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410081,410086]},{"pos":[410095,410107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[410113,410124],"content":"Method mode","linkify":"Method mode","nodes":[{"content":"Method mode","pos":[0,11]}]},{"pos":[410165,410175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410177,410182]},{"pos":[410191,410203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[410209,410227],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[410305,410315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[410317,410326]},{"content":"insertAfterControlId","pos":[410340,410360]},{"pos":[410369,410381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[410387,410409],"content":"Method newRecordAction","linkify":"Method newRecordAction","nodes":[{"content":"Method newRecordAction","pos":[0,22]}]},{"pos":[410461,410471],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410473,410478]},{"pos":[410487,410499],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[410505,410523],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[410588,410598],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410600,410605]},{"content":"mode","pos":[410619,410623]},{"pos":[410632,410644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[410650,410672],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[410733,410743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[410745,410749]},{"pos":[410758,410770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[410776,410799],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[410852,410862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410864,410869]},{"pos":[410878,410890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[410896,410911],"content":"Method saveSize","linkify":"Method saveSize","nodes":[{"content":"Method saveSize","pos":[0,15]}]},{"pos":[410964,410974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410976,410981]},{"pos":[410990,411002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411008,411025],"content":"Method scrollbars","linkify":"Method scrollbars","nodes":[{"content":"Method scrollbars","pos":[0,17]}]},{"pos":[411072,411082],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411084,411089]},{"pos":[411098,411110],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411116,411133],"content":"Method setCompany","linkify":"Method setCompany","nodes":[{"content":"Method setCompany","pos":[0,17]}]},{"pos":[411188,411198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411200,411205]},{"pos":[411214,411226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411232,411255],"content":"Method showDeleteButton","linkify":"Method showDeleteButton","nodes":[{"content":"Method showDeleteButton","pos":[0,23]}]},{"pos":[411308,411318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411320,411325]},{"pos":[411334,411346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411352,411372],"content":"Method showNewButton","linkify":"Method showNewButton","nodes":[{"content":"Method showNewButton","pos":[0,20]}]},{"pos":[411422,411432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411434,411439]},{"pos":[411448,411460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411466,411484],"content":"Method showWebHelp","linkify":"Method showWebHelp","nodes":[{"content":"Method showWebHelp","pos":[0,18]}]},{"pos":[411532,411542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411544,411549]},{"pos":[411558,411570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411576,411597],"content":"Method statusBarStyle","linkify":"Method statusBarStyle","nodes":[{"content":"Method statusBarStyle","pos":[0,21]}]},{"pos":[411648,411658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411660,411665]},{"pos":[411674,411686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411692,411704],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[411746,411756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411758,411763]},{"pos":[411772,411784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411790,411809],"content":"Method submitMethod","linkify":"Method submitMethod","nodes":[{"content":"Method submitMethod","pos":[0,19]}]},{"pos":[411858,411868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411870,411875]},{"pos":[411884,411896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411902,411922],"content":"Method supportReload","linkify":"Method supportReload","nodes":[{"content":"Method supportReload","pos":[0,20]}]},{"pos":[411980,411990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411992,411997]},{"pos":[412006,412018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412024,412046],"content":"Method titleDatasource","linkify":"Method titleDatasource","nodes":[{"content":"Method titleDatasource","pos":[0,22]}]},{"pos":[412102,412112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412114,412119]},{"pos":[412128,412140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412146,412156],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[412206,412216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412218,412223]},{"content":"mode","pos":[412237,412241]},{"pos":[412250,412262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412268,412284],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[412347,412357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412359,412364]},{"content":"mode","pos":[412378,412382]},{"pos":[412391,412403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412409,412429],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[412488,412498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[412500,412504]},{"pos":[412513,412525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412531,412552],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[412603,412613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412615,412620]},{"pos":[412629,412641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412647,412661],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[412705,412715],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412717,412722]},{"pos":[412731,412743],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412749,412764],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[412809,412819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412821,412826]},{"pos":[412835,412847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412853,412869],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[412923,412933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412935,412940]},{"pos":[412949,412961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412967,412996],"content":"Method useCaptionFromMenuItem","linkify":"Method useCaptionFromMenuItem","nodes":[{"content":"Method useCaptionFromMenuItem","pos":[0,29]}]},{"pos":[413055,413065],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413067,413072]},{"pos":[413081,413093],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[413099,413118],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[413167,413177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413179,413184]},{"pos":[413193,413205],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[413211,413225],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[413277,413287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413289,413294]},{"pos":[413303,413315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[413321,413333],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[413335,413373]},{"pos":[413425,413435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413437,413442]},{"content":"mode","pos":[413456,413460]},{"pos":[413469,413481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[413483,413518]},{"pos":[413525,413532],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[413534,413640]},{"content":"Mode.","pos":[413644,413649]},{"content":"Width calculation.","pos":[413662,413680]},{"content":"-1 Exact.","pos":[413866,413875]},{"content":"The exact width in pixels of the controls is used.","pos":[413884,413934]},{"content":"0 Auto.","pos":[413977,413984]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[413995,414083]},{"content":"1 Column width.","pos":[414088,414103]},{"content":"The layout of the form determines the width of the control.","pos":[414106,414165]},{"content":"The width and width calculation mode can be set separately.","pos":[414198,414257]},{"pos":[414263,414279],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[414281,414343]},{"pos":[414389,414399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414401,414406]},{"pos":[414415,414427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[414429,414490]},{"pos":[414497,414504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[414506,414559]},{"content":"Mode.","pos":[414563,414568]},{"content":"Width Calculation.","pos":[414579,414597]},{"content":"Exact.","pos":[414781,414787]},{"content":"The exact width in pixels of the controls is used.","pos":[414797,414847]},{"content":"Auto.","pos":[414890,414895]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[414906,414994]},{"content":"Column width.","pos":[414999,415012]},{"content":"The layout of the form determines the width of the control.","pos":[415015,415074]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[415107,415190]},{"pos":[415196,415213],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[415215,415253]},{"pos":[415300,415310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415312,415317]},{"pos":[415326,415338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[415340,415375]},{"pos":[415382,415389],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[415391,415464]},{"pos":[415470,415489],"content":"Method windowResize","linkify":"Method windowResize","nodes":[{"content":"Method windowResize","pos":[0,19]}]},{"pos":[415538,415548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415550,415555]},{"pos":[415564,415576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415582,415599],"content":"Method windowType","linkify":"Method windowType","nodes":[{"content":"Method windowType","pos":[0,17]}]},{"pos":[415646,415656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415658,415663]},{"pos":[415672,415684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415690,415715],"content":"Method workflowDatasource","linkify":"Method workflowDatasource","nodes":[{"content":"Method workflowDatasource","pos":[0,25]}]},{"pos":[415774,415784],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415786,415791]},{"pos":[415800,415812],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415818,415840],"content":"Method workflowEnabled","linkify":"Method workflowEnabled","nodes":[{"content":"Method workflowEnabled","pos":[0,22]}]},{"pos":[415900,415910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[415912,415917]},{"pos":[415926,415938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[415944,415963],"content":"Method workflowType","linkify":"Method workflowType","nodes":[{"content":"Method workflowType","pos":[0,19]}]},{"pos":[416012,416022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[416024,416029]},{"pos":[416038,416050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416056,416073],"content":"Method dialogSize","linkify":"Method dialogSize","nodes":[{"content":"Method dialogSize","pos":[0,17]}]},{"pos":[416120,416130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[416132,416137]},{"pos":[416146,416158],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[416163,416201],"content":"Class FormBuildDropDialogButtonControl","linkify":"Class FormBuildDropDialogButtonControl","nodes":[{"content":"Class FormBuildDropDialogButtonControl","pos":[0,38]}]},{"pos":[416275,416282],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[416288,416296],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[416302,416309],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[416313,416319]},{"content":"Description","pos":[416423,416434]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[416817,416863],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[416927,416967]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[417069,417104],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[417321,417364],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[417431,417498]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[417573,417622],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[417683,417781]},{"content":"public boolean autoRefreshData(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[417825,417874],"source":"public boolean autoRefreshData(\\[boolean value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[418077,418118],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[418187,418236]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[418329,418364],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[418439,418500]},{"content":"public boolean big(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[418581,418618],"source":"public boolean big(\\[boolean value\\])"},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[418833,418863],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[418943,419018]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[419085,419117],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[419195,419251]},{"content":"public int buttonDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[419337,419376],"source":"public int buttonDisplay(\\[int value\\])"},{"content":"Gets or sets the appearance of the button control.","pos":[419447,419497]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[419589,419622],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[419699,419738]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[419841,419879],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[419951,419994]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[420093,420130],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[420203,420248]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[420345,420417],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[420455,420522]},{"content":"public int containerId()","pos":[420597,420621]},{"content":"Retrieves the ID of the parent container for the control.","pos":[420707,420764]},{"content":"public int copyCallerQuery(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[420849,420890],"source":"public int copyCallerQuery(\\[int value\\])"},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[421101,421145],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[421353,421412],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[421605,421647],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[421857,421897],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[421967,422039]},{"content":"public boolean defaultButton(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[422109,422156],"source":"public boolean defaultButton(\\[boolean value\\])"},{"content":"Determines whether the button should be the default button on the form.","pos":[422219,422290]},{"content":"public str disabledImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[422361,422400],"source":"public str disabledImage(\\[str value\\])"},{"content":"Gets or sets the disabled image of the button.","pos":[422471,422517]},{"content":"public int disabledImageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[422613,422660],"source":"public int disabledImageLocation(\\[int value\\])"},{"content":"public int disabledResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[422865,422907],"source":"public int disabledResource(\\[int value\\])"},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[422975,423053]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[423117,423156],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[423369,423403],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[423479,423560]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[423621,423662],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[423731,423782]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[423873,423903],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[423983,424040]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[424125,424159],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[424235,424292]},{"content":"public boolean forcedToOverflow(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[424377,424427],"source":"public boolean forcedToOverflow(\\[boolean value\\])"},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[424629,424670],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[424739,424790]},{"content":"public int formViewOption(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[424881,424921],"source":"public int formViewOption(\\[int value\\])"},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[425133,425175],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[425243,425282]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[425385,425421],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[425495,425557]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[425637,425674],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[425747,425786]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[425889,425923],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[425999,426103]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[426141,426182],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[426393,426408]},{"content":"Retrieves the ID of the control.","pos":[426503,426535]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[426645,426684],"source":"public int imageLocation(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[426897,426925]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[427007,427083]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[427149,427189],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[427401,427433],"source":"public str keyTip(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[427653,427693],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[427905,427939],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[428157,428192],"source":"public int leftValue(\\[int value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[428409,428447],"source":"public str menuItemName(\\[str value\\])"},{"content":"public int multiSelect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[428661,428698],"source":"public int multiSelect(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[428913,428943],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[429023,429176]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[429181,429223],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int needsRecord(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[429433,429470],"source":"public int needsRecord(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[429685,429722],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[429937,429977],"source":"public int normalResource(\\[int value\\])"},{"content":"public int openMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[430189,430223],"source":"public int openMode(\\[int value\\])"},{"content":"public str parameters(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[430441,430477],"source":"public str parameters(\\[str value\\])"},{"content":"Gets or sets the list of parameters that are passed to objects that are run by the MenuFunction class.","pos":[430551,430653]},{"content":"public boolean primary(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[430693,430734],"source":"public boolean primary(\\[boolean value\\])"},{"content":"public boolean saveRecord(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[430945,430989],"source":"public boolean saveRecord(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[431197,431254],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean sendExternalContext(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[431449,431502],"source":"public boolean sendExternalContext(\\[boolean value\\])"},{"content":"public int shortkey(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[431701,431735],"source":"public int shortkey(\\[int value\\])"},{"content":"public boolean showShortCut(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[431953,431999],"source":"public boolean showShortCut(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[432205,432243],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[432457,432488],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[432709,432739],"source":"public str text(\\[str value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[432961,433000],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[433213,433246],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[433465,433499],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[433717,433747],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[433969,434012],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[434221,434255],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[434473,434511],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[434725,434764],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean value(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[434977,435016],"source":"public boolean value(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[435229,435289],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[435481,435535],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[435733,435779],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[435985,436026],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[436237,436278],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[436347,436385]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[436489,436524],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[436599,436661]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[436741,436777],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[436851,436889]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[436993,437100],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[437248,437267],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[437269,437309]},{"pos":[437366,437376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437378,437383]},{"pos":[437392,437404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[437406,437462]},{"pos":[437469,437476],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[437478,437557]},{"pos":[437563,437579],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[437625,437635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437637,437642]},{"pos":[437651,437663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437669,437685],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[437687,437754]},{"pos":[437808,437818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437820,437825]},{"pos":[437834,437846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[437848,437900]},{"pos":[437907,437914],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[437916,438038]},{"pos":[438044,438066],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[438068,438166]},{"pos":[438226,438236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438238,438243]},{"pos":[438252,438264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[438266,438345]},{"pos":[438352,438359],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[438361,438398]},{"pos":[438404,438426],"content":"Method autoRefreshData","linkify":"Method autoRefreshData","nodes":[{"content":"Method autoRefreshData","pos":[0,22]}]},{"pos":[438486,438496],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438498,438503]},{"pos":[438512,438524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438530,438552],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[438554,438603]},{"pos":[438655,438665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438667,438672]},{"pos":[438681,438693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[438695,438739]},{"pos":[438746,438753],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[438755,438823]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[438829,438899]},{"content":"The second byte contains a value for green.","pos":[438904,438947]},{"content":"The third byte contains a value for blue.","pos":[438952,438993]},{"content":"The high-order byte must be zero.","pos":[438998,439031]},{"content":"The maximum value for a single byte is 255.","pos":[439036,439079]},{"pos":[439085,439101],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[439103,439164]},{"pos":[439210,439220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[439222,439227]},{"pos":[439236,439248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[439250,439311]},{"pos":[439317,439327],"content":"Method big","linkify":"Method big","nodes":[{"content":"Method big","pos":[0,10]}]},{"pos":[439375,439385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[439387,439392]},{"pos":[439401,439413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439419,439430],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[439432,439507]},{"pos":[439548,439558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[439560,439565]},{"pos":[439574,439586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[439588,439638]},{"pos":[439645,439652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[439654,439726]},{"content":"0 Use the default font weight.","pos":[439732,439762]},{"content":"1 Thin.","pos":[439767,439774]},{"content":"2 Extra-light.","pos":[439779,439793]},{"content":"3 Light.","pos":[439798,439806]},{"content":"4 Normal.","pos":[439811,439820]},{"content":"5 Medium.","pos":[439825,439834]},{"content":"6 Semibold.","pos":[439839,439850]},{"content":"7 Bold.","pos":[439855,439862]},{"content":"8 Extra-bold.","pos":[439867,439880]},{"content":"9 Heavy.","pos":[439885,439893]},{"pos":[439899,439912],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[439914,439970]},{"pos":[440013,440023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440025,440030]},{"pos":[440039,440051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[440053,440097]},{"pos":[440104,440111],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[440113,440205]},{"content":"Value.","pos":[440209,440215]},{"content":"Description.","pos":[440218,440230]},{"content":"0","pos":[440261,440262]},{"content":"Auto.","pos":[440270,440275]},{"content":"1","pos":[440287,440288]},{"content":"3D.","pos":[440296,440299]},{"content":"2","pos":[440313,440314]},{"content":"Single line.","pos":[440322,440334]},{"content":"3","pos":[440339,440340]},{"content":"Flat.","pos":[440348,440353]},{"content":"4","pos":[440365,440366]},{"content":"None.","pos":[440374,440379]},{"pos":[440394,440414],"content":"Method buttonDisplay","linkify":"Method buttonDisplay","nodes":[{"content":"Method buttonDisplay","pos":[0,20]}]},{"content":"Gets or sets the appearance of the button control.","pos":[440416,440466]},{"pos":[440516,440526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440528,440533]},{"pos":[440542,440554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and five, inclusive.","pos":[440556,440600]},{"pos":[440607,440614],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value of the property defines whether the text, the image, or both should be displayed on the button.","pos":[440616,440721]},{"content":"This property also controls relative positions of text and image if both are displayed.","pos":[440722,440809]},{"content":"The integer value that is returned contains the appearance of the button control as follows:","pos":[440810,440902]},{"content":"Value.","pos":[440906,440912]},{"content":"Description.","pos":[440915,440927]},{"content":"0","pos":[441062,441063]},{"content":"Text only.","pos":[441071,441081]},{"content":"1","pos":[441140,441141]},{"content":"Image Only.","pos":[441149,441160]},{"content":"2","pos":[441218,441219]},{"content":"Text and image; the image is displayed below the text.","pos":[441227,441281]},{"content":"3","pos":[441296,441297]},{"content":"Text and image; the image is displayed above the text.","pos":[441305,441359]},{"content":"4","pos":[441374,441375]},{"content":"Text and image; the image is displayed to the left of the text.","pos":[441383,441446]},{"content":"5","pos":[441452,441453]},{"content":"Text and image; the image is displayed to the right of the text.","pos":[441461,441525]},{"pos":[441533,441547],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[441549,441588]},{"pos":[441632,441642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[441644,441649]},{"pos":[441658,441670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[441672,441726]},{"pos":[441732,441751],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[441753,441796]},{"pos":[441845,441855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[441857,441862]},{"pos":[441871,441883],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[441885,441947]},{"pos":[441954,441961],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[441963,442067]},{"content":"Value.","pos":[442071,442077]},{"content":"Description.","pos":[442080,442092]},{"content":"0","pos":[442139,442140]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442148,442161],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[442173,442174]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442182,442198],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[442207,442208]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442216,442231],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[442241,442243]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442250,442262],"source":"MAC\\_CHARSET"},{"content":"128","pos":[442275,442278]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442284,442301],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[442309,442312]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442318,442333],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[442343,442346]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442352,442367],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[442377,442380]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442386,442406],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[442411,442414]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442420,442434],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[442445,442448]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442454,442470],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[442479,442482]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442488,442507],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[442513,442516]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442522,442537],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[442547,442550]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442556,442572],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[442581,442584]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442590,442609],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[442615,442618]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442624,442636],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of Microsoft Windows.","pos":[442648,442737]},{"content":"Value.","pos":[442741,442747]},{"content":"Description.","pos":[442750,442762]},{"content":"130","pos":[442797,442800]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442806,442820],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Microsoft Windows.","pos":[442824,442920]},{"content":"Value.","pos":[442924,442930]},{"content":"Description.","pos":[442933,442945]},{"content":"177","pos":[442982,442985]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[442991,443006],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[443011,443014]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[443020,443035],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Microsoft Windows.","pos":[443039,443126]},{"content":"Value.","pos":[443130,443136]},{"content":"Description.","pos":[443139,443151]},{"content":"222","pos":[443184,443187]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[443193,443206],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[443210,443297]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[443298,443389],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[443390,443505]},{"pos":[443511,443529],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[443531,443576]},{"pos":[443624,443634],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[443636,443641]},{"pos":[443650,443662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[443664,443707]},{"pos":[443714,443721],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[443723,443784]},{"content":"Value.","pos":[443788,443794]},{"content":"Style.","pos":[443797,443803]},{"content":"0","pos":[443876,443877]},{"content":"Default.","pos":[443885,443893]},{"content":"1","pos":[443920,443921]},{"content":"The Microsoft Windows palette.","pos":[443929,443959]},{"content":"2","pos":[443964,443965]},{"content":"The true-color scheme.","pos":[443973,443995]},{"pos":[444011,444034],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[444036,444103]},{"pos":[444186,444196],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444198,444203]},{"pos":[444212,444224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[444226,444298]},{"pos":[444305,444312],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[444314,444395]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[444396,444489]},{"pos":[444495,444513],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[444515,444572]},{"pos":[444609,444621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[444623,444654]},{"pos":[444660,444682],"content":"Method copyCallerQuery","linkify":"Method copyCallerQuery","nodes":[{"content":"Method copyCallerQuery","pos":[0,22]}]},{"pos":[444734,444744],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444746,444751]},{"pos":[444760,444772],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[444778,444803],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[444858,444868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444870,444875]},{"pos":[444884,444896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[444902,444934],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[445004,445014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[445016,445021]},{"pos":[445030,445042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[445048,445071],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[445124,445134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[445136,445141]},{"pos":[445150,445162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[445168,445185],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[445187,445259]},{"pos":[445310,445320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[445322,445327]},{"pos":[445336,445348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[445350,445402]},{"pos":[445408,445428],"content":"Method defaultButton","linkify":"Method defaultButton","nodes":[{"content":"Method defaultButton","pos":[0,20]}]},{"content":"Determines whether the button should be the default button on the form.","pos":[445430,445501]},{"pos":[445559,445569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[445571,445576]},{"pos":[445585,445597],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the button should be the default button; otherwise, false.","pos":[445599,445665]},{"pos":[445671,445691],"content":"Method disabledImage","linkify":"Method disabledImage","nodes":[{"content":"Method disabledImage","pos":[0,20]}]},{"content":"Gets or sets the disabled image of the button.","pos":[445693,445739]},{"pos":[445789,445799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[445801,445806]},{"pos":[445815,445827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The full name of an image file.","pos":[445829,445860]},{"content":"The system supports all of the GDI-supported image formats.","pos":[445861,445920]},{"pos":[445927,445934],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property has precedence over the disabledResourceproperty .","pos":[445936,446000]},{"content":"It is used if both of these properties are set.","pos":[446001,446048]},{"pos":[446054,446082],"content":"Method disabledImageLocation","linkify":"Method disabledImageLocation","nodes":[{"content":"Method disabledImageLocation","pos":[0,28]}]},{"pos":[446140,446150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446152,446157]},{"pos":[446166,446178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[446184,446207],"content":"Method disabledResource","linkify":"Method disabledResource","nodes":[{"content":"Method disabledResource","pos":[0,23]}]},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[446209,446287]},{"pos":[446340,446350],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446352,446357]},{"pos":[446366,446378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the image to use as the disabled button image.","pos":[446380,446445]},{"content":"Both icon and bitmap images are supported.","pos":[446446,446488]},{"pos":[446494,446514],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[446564,446574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446576,446581]},{"pos":[446590,446602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[446608,446623],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[446625,446706]},{"pos":[446751,446761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446763,446768]},{"pos":[446777,446789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[446791,446851]},{"pos":[446857,446871],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[446873,446924]},{"pos":[446976,446986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446988,446993]},{"pos":[447002,447014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[447016,447064]},{"pos":[447071,447078],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property enables controls to be enabled or disabled at run time.","pos":[447080,447156]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[447157,447252]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[447253,447387]},{"pos":[447393,447404],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[447406,447463]},{"pos":[447504,447514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[447516,447521]},{"pos":[447530,447542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[447544,447599]},{"pos":[447605,447620],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[447622,447679]},{"pos":[447724,447734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[447736,447741]},{"pos":[447750,447762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[447764,447797]},{"pos":[447803,447826],"content":"Method forcedToOverflow","linkify":"Method forcedToOverflow","nodes":[{"content":"Method forcedToOverflow","pos":[0,23]}]},{"pos":[447887,447897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[447899,447904]},{"pos":[447913,447925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[447931,447953],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[447955,448006]},{"pos":[448058,448068],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[448070,448075]},{"pos":[448084,448096],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[448098,448142]},{"pos":[448149,448156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[448158,448226]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[448232,448302]},{"content":"The second byte contains a value for green.","pos":[448307,448350]},{"content":"The third byte contains a value for blue.","pos":[448355,448396]},{"content":"The high-order byte must be zero.","pos":[448401,448434]},{"content":"The maximum value for a single byte is 255.","pos":[448439,448482]},{"pos":[448488,448509],"content":"Method formViewOption","linkify":"Method formViewOption","nodes":[{"content":"Method formViewOption","pos":[0,21]}]},{"pos":[448560,448570],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[448572,448577]},{"pos":[448586,448598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[448604,448617],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[448619,448658]},{"pos":[448711,448721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[448723,448728]},{"content":"mode","pos":[448742,448746]},{"pos":[448755,448767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[448769,448805]},{"pos":[448812,448819],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[448821,448874]},{"content":"Calculate the height according to the following table:","pos":[448875,448929]},{"content":"Mode.","pos":[448933,448938]},{"content":"Height calculation.","pos":[448952,448971]},{"content":"-1 Exact.","pos":[449159,449168]},{"content":"The exact height in pixels of the controls is used.","pos":[449178,449229]},{"content":"0 Auto.","pos":[449272,449279]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[449291,449380]},{"content":"1 Column height.","pos":[449385,449401]},{"content":"The layout of the form determines the height of the control.","pos":[449404,449464]},{"content":"The height and height calculation mode can be set separately.","pos":[449497,449558]},{"pos":[449564,449581],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[449583,449645]},{"pos":[449692,449702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[449704,449709]},{"pos":[449718,449730],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[449732,449753]},{"pos":[449760,449767],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[449769,449823]},{"content":"Mode.","pos":[449827,449832]},{"content":"Height Calculation.","pos":[449844,449863]},{"content":"Exact.","pos":[450049,450055]},{"content":"The exact height in pixels of the controls is used.","pos":[450066,450117]},{"content":"Auto.","pos":[450160,450165]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[450177,450266]},{"content":"Column height.","pos":[450271,450285]},{"content":"The layout of the form determines the height of the control.","pos":[450288,450348]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[450381,450466]},{"pos":[450472,450490],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[450492,450531]},{"pos":[450579,450589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[450591,450596]},{"pos":[450605,450617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[450619,450640]},{"pos":[450647,450654],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[450656,450746]},{"pos":[450752,450767],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[450769,450873]},{"pos":[450918,450928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[450930,450935]},{"pos":[450944,450956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[450958,451013]},{"pos":[451020,451027],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[451029,451097]},{"content":"The help text must not exceed 250 characters.","pos":[451098,451143]},{"pos":[451149,451171],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[451223,451233],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[451235,451240]},{"pos":[451249,451261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[451267,451276],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[451278,451310]},{"pos":[451338,451350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[451352,451374]},{"pos":[451380,451400],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[451450,451460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[451462,451467]},{"pos":[451476,451488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[451494,451512],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[451514,451590]},{"pos":[451631,451643],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[451645,451719]},{"pos":[451725,451738],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[451789,451799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[451801,451806]},{"pos":[451815,451827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[451833,451846],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[451889,451899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[451901,451906]},{"pos":[451915,451927],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[451933,451944],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[451995,452005],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[452007,452012]},{"content":"mode","pos":[452026,452030]},{"pos":[452039,452051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[452057,452072],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[452117,452127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[452129,452134]},{"pos":[452143,452155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[452161,452177],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[452223,452233],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[452235,452240]},{"pos":[452249,452261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[452267,452286],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[452335,452345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[452347,452352]},{"pos":[452361,452373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[452379,452397],"content":"Method multiSelect","linkify":"Method multiSelect","nodes":[{"content":"Method multiSelect","pos":[0,18]}]},{"pos":[452445,452455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[452457,452462]},{"pos":[452471,452483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[452489,452500],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[452502,452655]},{"pos":[452696,452706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[452708,452713]},{"pos":[452722,452734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[452736,452800]},{"pos":[452807,452814],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[452816,452910]},{"content":"It must start with a letter.","pos":[452916,452944]},{"content":"It cannot exceed 250 characters.","pos":[452949,452981]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[452986,453040],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[453045,453085]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumerations, or classes.","pos":[453090,453207]},{"pos":[453213,453236],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[453289,453299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[453301,453306]},{"pos":[453315,453327],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[453333,453351],"content":"Method needsRecord","linkify":"Method needsRecord","nodes":[{"content":"Method needsRecord","pos":[0,18]}]},{"pos":[453399,453409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[453411,453416]},{"pos":[453425,453437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[453443,453461],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[453509,453519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[453521,453526]},{"pos":[453535,453547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[453553,453574],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[453625,453635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[453637,453642]},{"pos":[453651,453663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[453669,453684],"content":"Method openMode","linkify":"Method openMode","nodes":[{"content":"Method openMode","pos":[0,15]}]},{"pos":[453729,453739],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[453741,453746]},{"pos":[453755,453767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[453773,453790],"content":"Method parameters","linkify":"Method parameters","nodes":[{"content":"Method parameters","pos":[0,17]}]},{"content":"Gets or sets the list of parameters that are passed to objects that are run by the MenuFunction class.","pos":[453792,453894]},{"pos":[453941,453951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[453953,453958]},{"pos":[453967,453979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The list of parameters that are passed to the object.","pos":[453981,454034]},{"pos":[454041,454048],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.","pos":[454050,454130]},{"content":"If ignore is passed, unrecognized parameters.","pos":[454131,454176]},{"pos":[454182,454196],"content":"Method primary","linkify":"Method primary","nodes":[{"content":"Method primary","pos":[0,14]}]},{"pos":[454248,454258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[454260,454265]},{"pos":[454274,454286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[454292,454309],"content":"Method saveRecord","linkify":"Method saveRecord","nodes":[{"content":"Method saveRecord","pos":[0,17]}]},{"pos":[454364,454374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[454376,454381]},{"pos":[454390,454402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[454408,454426],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[454494,454504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[454506,454511]},{"pos":[454520,454532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[454538,454564],"content":"Method sendExternalContext","linkify":"Method sendExternalContext","nodes":[{"content":"Method sendExternalContext","pos":[0,26]}]},{"pos":[454628,454638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[454640,454645]},{"pos":[454654,454666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[454672,454687],"content":"Method shortkey","linkify":"Method shortkey","nodes":[{"content":"Method shortkey","pos":[0,15]}]},{"pos":[454732,454742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[454744,454749]},{"pos":[454758,454770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[454776,454795],"content":"Method showShortCut","linkify":"Method showShortCut","nodes":[{"content":"Method showShortCut","pos":[0,19]}]},{"pos":[454852,454862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[454864,454869]},{"pos":[454878,454890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[454896,454907],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[454956,454966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[454968,454973]},{"pos":[454982,454994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455000,455012],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[455054,455064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[455066,455071]},{"pos":[455080,455092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455098,455109],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[455150,455160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[455162,455167]},{"pos":[455176,455188],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455194,455204],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[455254,455264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[455266,455271]},{"content":"mode","pos":[455285,455289]},{"pos":[455298,455310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455316,455330],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[455374,455384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[455386,455391]},{"pos":[455400,455412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455418,455433],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[455478,455488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[455490,455495]},{"pos":[455504,455516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455522,455533],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[455574,455584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[455586,455591]},{"pos":[455600,455612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455618,455634],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[455688,455698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[455700,455705]},{"pos":[455714,455726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455732,455747],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[455792,455802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[455804,455809]},{"pos":[455818,455830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455836,455855],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[455904,455914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[455916,455921]},{"pos":[455930,455942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455948,455968],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[456018,456028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[456030,456035]},{"pos":[456044,456056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[456062,456074],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[456124,456134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[456136,456141]},{"pos":[456150,456162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[456168,456190],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[456259,456269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[456271,456276]},{"content":"mode","pos":[456290,456294]},{"pos":[456303,456315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[456321,456347],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[456412,456422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[456424,456428]},{"pos":[456437,456449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[456455,456482],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[456539,456549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[456551,456556]},{"pos":[456565,456577],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[456583,456597],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[456649,456659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[456661,456666]},{"pos":[456675,456687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[456693,456705],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[456707,456745]},{"pos":[456797,456807],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[456809,456814]},{"content":"mode","pos":[456828,456832]},{"pos":[456841,456853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[456855,456890]},{"pos":[456897,456904],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[456906,456959]},{"content":"Calculate the width according to the following table:","pos":[456960,457013]},{"content":"Mode.","pos":[457017,457022]},{"content":"Width calculation.","pos":[457035,457053]},{"content":"-1 Exact.","pos":[457239,457248]},{"content":"The exact width in pixels of the controls is used.","pos":[457257,457307]},{"content":"0 Auto.","pos":[457350,457357]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[457368,457456]},{"content":"1 Column width.","pos":[457461,457476]},{"content":"The layout of the form determines the width of the control.","pos":[457479,457538]},{"content":"The width and width calculation mode can be set separately.","pos":[457571,457630]},{"pos":[457636,457652],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[457654,457716]},{"pos":[457762,457772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[457774,457779]},{"pos":[457788,457800],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[457802,457863]},{"pos":[457870,457877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[457879,457932]},{"content":"Mode.","pos":[457936,457941]},{"content":"Width Calculation.","pos":[457952,457970]},{"content":"Exact.","pos":[458154,458160]},{"content":"The exact width in pixels of the controls is used.","pos":[458170,458220]},{"content":"Auto.","pos":[458263,458268]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[458279,458367]},{"content":"Column width.","pos":[458372,458385]},{"content":"The layout of the form determines the width of the control.","pos":[458388,458447]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[458480,458563]},{"pos":[458569,458586],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[458588,458626]},{"pos":[458673,458683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[458685,458690]},{"pos":[458699,458711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[458713,458748]},{"pos":[458755,458762],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[458764,458837]},{"pos":[458843,458872],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[458990,459000],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[459002,459018]},{"content":"objectMethodToCall","pos":[459032,459050]},{"content":"overrideObject","pos":[459064,459078]},{"pos":[459085,459120],"content":"Class FormBuildFastTabHeaderControl","linkify":"Class FormBuildFastTabHeaderControl","nodes":[{"content":"Class FormBuildFastTabHeaderControl","pos":[0,35]}]},{"pos":[459191,459198],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[459204,459212],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[459218,459225],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[459229,459235]},{"content":"Description","pos":[459339,459350]},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[459733,459777],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[459985,460032],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[460237,460283],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[460347,460387]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[460489,460532],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[460599,460666]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[460741,460781],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[460993,461031],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[461245,461284],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[461497,461534],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[461749,461798],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[461859,461957]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[462001,462042],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[462111,462160]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[462253,462288],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[462363,462425]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[462505,462535],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[462615,462682]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[462757,462814],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[463009,463060],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[463261,463304],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[463513,463546],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[463623,463662]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[463765,463803],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[463875,463918]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[464017,464054],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[464127,464172]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[464269,464324],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[464521,464573],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[464773,464829],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[465025,465075],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[465277,465319],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[465529,465567],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[465781,465853],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[465891,465958]},{"content":"public int containerId()","pos":[466033,466057]},{"content":"Retrieves the ID of the parent container for the control.","pos":[466143,466200]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[466285,466329],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[466537,466596],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[466789,466831],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[467041,467081],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[467151,467216]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[467293,467332],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[467545,467579],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[467655,467736]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[467797,467838],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[467907,467958]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[468049,468079],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[468159,468216]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[468301,468335],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[468411,468468]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[468553,468595],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[468663,468702]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[468805,468841],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[468915,468977]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[469057,469094],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[469167,469206]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[469309,469343],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[469419,469523]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[469561,469606],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[469813,469854],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[470065,470080]},{"content":"Retrieves the ID of the control.","pos":[470175,470207]},{"content":"public boolean isContainer()","pos":[470317,470345]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[470427,470503]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[470569,470609],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[470821,470861],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[471073,471128],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[471325,471374],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[471577,471618],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[471829,471863],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[472081,472116],"source":"public int leftValue(\\[int value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[472333,472400],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"Moves a specified control to the control.","pos":[472443,472484]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[472585,472615],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[472695,472848]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[472853,472895],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[473105,473161],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[473357,473407],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[473609,473651],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[473861,473918],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[474113,474151],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[474365,474404],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[474617,474671],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[474869,474917],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[475121,475161],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[475373,475406],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[475625,475659],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[475877,475907],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[476129,476172],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[476381,476415],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[476633,476671],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[476885,476924],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[477137,477184],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[477389,477449],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[477641,477695],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[477893,477939],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[478145,478186],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[478397,478438],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[478507,478545]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[478649,478684],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[478759,478821]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[478901,478937],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[479011,479049]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[479153,479260],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[479408,479425],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[479480,479490],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[479492,479497]},{"pos":[479506,479518],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[479524,479544],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[479602,479612],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[479614,479619]},{"pos":[479628,479640],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[479646,479665],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[479667,479707]},{"pos":[479764,479774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[479776,479781]},{"pos":[479790,479802],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[479804,479860]},{"pos":[479867,479874],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[479876,479955]},{"pos":[479961,479977],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[479979,480046]},{"pos":[480100,480110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[480112,480117]},{"pos":[480126,480138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[480140,480192]},{"pos":[480199,480206],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[480208,480334]},{"pos":[480340,480361],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[480412,480422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[480424,480429]},{"pos":[480438,480450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[480456,480475],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[480524,480534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[480536,480541]},{"pos":[480550,480562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[480568,480588],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[480638,480648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[480650,480655]},{"pos":[480664,480676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[480682,480700],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[480748,480758],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[480760,480765]},{"pos":[480774,480786],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[480792,480814],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[480816,480914]},{"pos":[480974,480984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[480986,480991]},{"pos":[481000,481012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[481014,481093]},{"pos":[481100,481107],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[481109,481146]},{"pos":[481152,481174],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[481176,481225]},{"pos":[481277,481287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[481289,481294]},{"pos":[481303,481315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[481317,481361]},{"pos":[481368,481375],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[481377,481445]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[481451,481521]},{"content":"The second byte contains a value for green.","pos":[481526,481569]},{"content":"The third byte contains a value for blue.","pos":[481574,481615]},{"content":"The high-order byte must be zero.","pos":[481620,481653]},{"content":"The maximum value for a single byte is 255.","pos":[481658,481701]},{"pos":[481707,481723],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[481725,481787]},{"pos":[481833,481843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[481845,481850]},{"pos":[481859,481871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[481873,481934]},{"pos":[481940,481951],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[481953,482020]},{"pos":[482061,482071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[482073,482078]},{"pos":[482087,482099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[482101,482151]},{"pos":[482158,482165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[482167,482239]},{"content":"0 Use the default font weight.","pos":[482245,482275]},{"content":"1 Thin.","pos":[482280,482287]},{"content":"2 Extra-light.","pos":[482292,482306]},{"content":"3 Light.","pos":[482311,482319]},{"content":"4 Normal.","pos":[482324,482333]},{"content":"5 Medium.","pos":[482338,482347]},{"content":"6 Semibold.","pos":[482352,482363]},{"content":"7 Bold.","pos":[482368,482375]},{"content":"8 Extra-bold.","pos":[482380,482393]},{"content":"9 Heavy.","pos":[482398,482406]},{"pos":[482412,482431],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[482497,482507],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[482509,482514]},{"content":"mode","pos":[482528,482532]},{"pos":[482541,482553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[482559,482582],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[482644,482654],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[482656,482660]},{"pos":[482669,482681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[482687,482711],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[482765,482775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[482777,482782]},{"pos":[482791,482803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[482809,482823],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[482825,482864]},{"pos":[482908,482918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[482920,482925]},{"pos":[482934,482946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[482948,483002]},{"pos":[483008,483027],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[483029,483072]},{"pos":[483121,483131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[483133,483138]},{"pos":[483147,483159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[483161,483223]},{"pos":[483230,483237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[483239,483343]},{"content":"Value.","pos":[483347,483353]},{"content":"Description.","pos":[483356,483368]},{"content":"0","pos":[483415,483416]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483424,483437],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[483449,483450]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483458,483474],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[483483,483484]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483492,483507],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[483517,483519]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483526,483538],"source":"MAC\\_CHARSET"},{"content":"128","pos":[483551,483554]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483560,483577],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[483585,483588]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483594,483609],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[483619,483622]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483628,483643],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[483653,483656]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483662,483682],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[483687,483690]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483696,483710],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[483721,483724]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483730,483746],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[483755,483758]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483764,483783],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[483789,483792]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483798,483813],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[483823,483826]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483832,483848],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[483857,483860]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483866,483885],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[483891,483894]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483900,483912],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of Microsoft Windows.","pos":[483924,484013]},{"content":"Value.","pos":[484017,484023]},{"content":"Description.","pos":[484026,484038]},{"content":"130","pos":[484073,484076]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484082,484096],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Microsoft Windows.","pos":[484100,484196]},{"content":"Value.","pos":[484200,484206]},{"content":"Description.","pos":[484209,484221]},{"content":"177","pos":[484258,484261]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484267,484282],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[484287,484290]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484296,484311],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Microsoft Windows.","pos":[484315,484402]},{"content":"Value.","pos":[484406,484412]},{"content":"Description.","pos":[484415,484427]},{"content":"222","pos":[484460,484463]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484469,484482],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[484486,484565]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[484566,484657],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[484658,484773]},{"pos":[484779,484797],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[484799,484844]},{"pos":[484892,484902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[484904,484909]},{"pos":[484918,484930],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[484932,484975]},{"pos":[484982,484989],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[484991,485052]},{"content":"Value.","pos":[485056,485062]},{"content":"Style.","pos":[485065,485071]},{"content":"0","pos":[485144,485145]},{"content":"Default.","pos":[485153,485161]},{"content":"1","pos":[485188,485189]},{"content":"The Microsoft Windows palette.","pos":[485197,485227]},{"content":"2","pos":[485232,485233]},{"content":"The true-color scheme.","pos":[485241,485263]},{"pos":[485279,485293],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[485357,485367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[485369,485374]},{"content":"mode","pos":[485388,485392]},{"pos":[485401,485413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485419,485437],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[485500,485510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[485512,485516]},{"pos":[485525,485537],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485543,485561],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[485626,485636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[485638,485643]},{"content":"mode","pos":[485657,485661]},{"pos":[485670,485682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485688,485710],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[485771,485781],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[485783,485787]},{"pos":[485796,485808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485814,485837],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[485890,485900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[485902,485907]},{"pos":[485916,485928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[485934,485953],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[486002,486012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[486014,486019]},{"pos":[486028,486040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[486046,486069],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[486071,486138]},{"pos":[486221,486231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[486233,486238]},{"pos":[486247,486259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[486261,486333]},{"pos":[486340,486347],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[486349,486430]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[486431,486524]},{"pos":[486530,486548],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[486550,486607]},{"pos":[486644,486656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[486658,486689]},{"pos":[486695,486720],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[486775,486785],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[486787,486792]},{"pos":[486801,486813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[486819,486851],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[486921,486931],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[486933,486938]},{"pos":[486947,486959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[486965,486988],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[487041,487051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487053,487058]},{"pos":[487067,487079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487085,487102],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[487104,487169]},{"pos":[487220,487230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487232,487237]},{"pos":[487246,487258],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[487260,487305]},{"pos":[487311,487331],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[487381,487391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487393,487398]},{"pos":[487407,487419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[487425,487440],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[487442,487523]},{"pos":[487568,487578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487580,487585]},{"pos":[487594,487606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[487608,487668]},{"pos":[487674,487688],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[487690,487741]},{"pos":[487793,487803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487805,487810]},{"pos":[487819,487831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[487833,487881]},{"pos":[487888,487895],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[487897,487972]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[487973,488068]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[488069,488203]},{"pos":[488209,488220],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[488222,488279]},{"pos":[488320,488330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488332,488337]},{"pos":[488346,488358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[488360,488415]},{"pos":[488421,488436],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[488438,488495]},{"pos":[488540,488550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488552,488557]},{"pos":[488566,488578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[488580,488613]},{"pos":[488619,488632],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[488634,488673]},{"pos":[488726,488736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488738,488743]},{"content":"mode","pos":[488757,488761]},{"pos":[488770,488782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[488784,488820]},{"pos":[488827,488834],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[488836,488889]},{"content":"Calculate the height according to the following table:","pos":[488890,488944]},{"content":"Mode.","pos":[488948,488953]},{"content":"Height calculation.","pos":[488967,488986]},{"content":"-1 Exact.","pos":[489174,489183]},{"content":"The exact height in pixels of the controls is used.","pos":[489193,489244]},{"content":"0 Auto.","pos":[489287,489294]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[489306,489395]},{"content":"1 Column height.","pos":[489400,489416]},{"content":"The layout of the form determines the height of the control.","pos":[489419,489479]},{"content":"The height and height calculation mode can be set separately.","pos":[489512,489573]},{"pos":[489579,489596],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[489598,489660]},{"pos":[489707,489717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[489719,489724]},{"pos":[489733,489745],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[489747,489768]},{"pos":[489775,489782],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[489784,489838]},{"content":"Mode.","pos":[489842,489847]},{"content":"Height Calculation.","pos":[489859,489878]},{"content":"Exact.","pos":[490064,490070]},{"content":"The exact height in pixels of the controls is used.","pos":[490081,490132]},{"content":"Auto.","pos":[490175,490180]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[490192,490281]},{"content":"Column height.","pos":[490286,490300]},{"content":"The layout of the form determines the height of the control.","pos":[490303,490363]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[490396,490481]},{"pos":[490487,490505],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[490507,490546]},{"pos":[490594,490604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[490606,490611]},{"pos":[490620,490632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[490634,490655]},{"pos":[490662,490669],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[490671,490761]},{"pos":[490767,490782],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[490784,490888]},{"pos":[490933,490943],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[490945,490950]},{"pos":[490959,490971],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[490973,491028]},{"pos":[491035,491042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[491044,491157]},{"pos":[491163,491181],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[491237,491247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[491249,491254]},{"pos":[491263,491275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[491281,491303],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[491355,491365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[491367,491372]},{"pos":[491381,491393],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[491399,491408],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[491410,491442]},{"pos":[491470,491482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[491484,491506]},{"pos":[491512,491530],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[491532,491608]},{"pos":[491649,491661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[491663,491737]},{"pos":[491743,491756],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[491807,491817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[491819,491824]},{"pos":[491833,491845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[491851,491862],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[491913,491923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[491925,491930]},{"content":"mode","pos":[491944,491948]},{"pos":[491957,491969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[491975,491992],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[492056,492066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492068,492073]},{"content":"mode","pos":[492087,492091]},{"pos":[492100,492112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[492118,492139],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[492199,492209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[492211,492215]},{"pos":[492224,492236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[492242,492264],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[492316,492326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492328,492333]},{"pos":[492342,492354],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[492360,492375],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[492420,492430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492432,492437]},{"pos":[492446,492458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[492464,492480],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[492526,492536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492538,492543]},{"pos":[492552,492564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[492570,492588],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"content":"Moves a specified control to the control.","pos":[492590,492631]},{"pos":[492709,492719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[492721,492730]},{"content":"insertAfterControlId","pos":[492744,492764]},{"pos":[492773,492785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control was moved successfully; otherwise, 0.","pos":[492787,492841]},{"pos":[492848,492855],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed.","pos":[492857,493014]},{"content":"However, in some cases, such as for the reference group control instance, controls cannot be moved.","pos":[493015,493114]},{"pos":[493120,493131],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[493133,493286]},{"pos":[493327,493337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493339,493344]},{"pos":[493353,493365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[493367,493431]},{"pos":[493438,493445],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[493447,493541]},{"content":"It must start with a letter.","pos":[493547,493575]},{"content":"It cannot exceed 250 characters.","pos":[493580,493612]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[493617,493671],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[493676,493716]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumerations, or classes.","pos":[493721,493838]},{"pos":[493844,493867],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[493920,493930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493932,493937]},{"pos":[493946,493958],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[493964,493982],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[494047,494057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494059,494064]},{"content":"mode","pos":[494078,494082]},{"pos":[494091,494103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494109,494131],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[494192,494202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[494204,494208]},{"pos":[494217,494229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494235,494258],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[494311,494321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494323,494328]},{"pos":[494337,494349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494355,494373],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[494441,494451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494453,494458]},{"pos":[494467,494479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494485,494496],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[494545,494555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494557,494562]},{"pos":[494571,494583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494589,494599],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[494649,494659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494661,494666]},{"content":"mode","pos":[494680,494684]},{"pos":[494693,494705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494711,494727],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[494790,494800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494802,494807]},{"content":"mode","pos":[494821,494825]},{"pos":[494834,494846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494852,494872],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[494931,494941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[494943,494947]},{"pos":[494956,494968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[494974,494995],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[495046,495056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495058,495063]},{"pos":[495072,495084],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495090,495104],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[495148,495158],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495160,495165]},{"pos":[495174,495186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495192,495207],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[495252,495262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495264,495269]},{"pos":[495278,495290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495296,495307],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[495348,495358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495360,495365]},{"pos":[495374,495386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495392,495408],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[495462,495472],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495474,495479]},{"pos":[495488,495500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495506,495521],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[495566,495576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495578,495583]},{"pos":[495592,495604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495610,495629],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[495678,495688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495690,495695]},{"pos":[495704,495716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495722,495742],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[495792,495802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495804,495809]},{"pos":[495818,495830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495836,495856],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[495914,495924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495926,495931]},{"pos":[495940,495952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[495958,495980],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[496049,496059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496061,496066]},{"content":"mode","pos":[496080,496084]},{"pos":[496093,496105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[496111,496137],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[496202,496212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[496214,496218]},{"pos":[496227,496239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[496245,496272],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[496329,496339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496341,496346]},{"pos":[496355,496367],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[496373,496387],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[496439,496449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496451,496456]},{"pos":[496465,496477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[496483,496495],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[496497,496535]},{"pos":[496587,496597],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496599,496604]},{"content":"mode","pos":[496618,496622]},{"pos":[496631,496643],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[496645,496680]},{"pos":[496687,496694],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[496696,496749]},{"content":"Calculate the width according to the following table:","pos":[496750,496803]},{"content":"Mode.","pos":[496807,496812]},{"content":"Width calculation.","pos":[496825,496843]},{"content":"-1 Exact.","pos":[497029,497038]},{"content":"The exact width in pixels of the controls is used.","pos":[497047,497097]},{"content":"0 Auto.","pos":[497140,497147]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[497158,497246]},{"content":"1 Column width.","pos":[497251,497266]},{"content":"The layout of the form determines the width of the control.","pos":[497269,497328]},{"content":"The width and width calculation mode can be set separately.","pos":[497361,497420]},{"pos":[497426,497442],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[497444,497506]},{"pos":[497552,497562],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[497564,497569]},{"pos":[497578,497590],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[497592,497653]},{"pos":[497660,497667],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[497669,497722]},{"content":"Mode.","pos":[497726,497731]},{"content":"Width Calculation.","pos":[497742,497760]},{"content":"Exact.","pos":[497944,497950]},{"content":"The exact width in pixels of the controls is used.","pos":[497960,498010]},{"content":"Auto.","pos":[498053,498058]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[498069,498157]},{"content":"Column width.","pos":[498162,498175]},{"content":"The layout of the form determines the width of the control.","pos":[498178,498237]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[498270,498353]},{"pos":[498359,498376],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[498378,498416]},{"pos":[498463,498473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[498475,498480]},{"pos":[498489,498501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[498503,498538]},{"pos":[498545,498552],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[498554,498627]},{"pos":[498633,498662],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[498780,498790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[498792,498808]},{"content":"objectMethodToCall","pos":[498822,498840]},{"content":"overrideObject","pos":[498854,498868]},{"pos":[498875,498913],"content":"Class FormBuildFastTabSummarySeparator","linkify":"Class FormBuildFastTabSummarySeparator","nodes":[{"content":"Class FormBuildFastTabSummarySeparator","pos":[0,38]}]},{"pos":[498987,498994],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[499000,499008],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[499014,499021],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[499025,499031]},{"content":"Description","pos":[499135,499146]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[499529,499575],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[499639,499679]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[499781,499824],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[499891,499958]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[500033,500082],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[500143,500241]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[500285,500326],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[500395,500444]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[500537,500572],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[500647,500709]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[500789,500819],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[500899,500974]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[501041,501079],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[501151,501194]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[501293,501330],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[501403,501448]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[501545,501617],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[501655,501722]},{"content":"public int containerId()","pos":[501797,501821]},{"content":"Retrieves the ID of the parent container for the control.","pos":[501907,501964]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[502049,502093],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[502301,502343],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[502553,502592],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[502805,502839],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[502915,502996]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[503057,503098],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[503167,503218]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[503309,503339],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[503419,503476]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[503561,503595],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[503671,503728]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[503813,503855],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[503923,503962]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[504065,504101],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[504175,504237]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[504317,504354],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[504427,504466]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[504569,504603],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[504679,504783]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[504821,504862],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[505073,505088]},{"content":"Retrieves the ID of the control.","pos":[505183,505215]},{"content":"public boolean isContainer()","pos":[505325,505353]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[505435,505511]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[505577,505617],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[505829,505869],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[506081,506115],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[506333,506368],"source":"public int leftValue(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[506585,506615],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[506695,506848]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[506853,506895],"source":"public int neededPermission(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[507105,507162],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[507357,507395],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[507609,507648],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[507861,507894],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[508113,508147],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[508365,508395],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[508617,508660],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[508869,508903],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[509121,509159],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[509373,509412],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[509625,509685],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[509877,509931],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[510129,510175],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[510381,510422],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[510633,510674],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[510743,510781]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[510885,510920],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[510995,511057]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[511137,511173],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[511247,511285]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[511389,511496],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[511644,511663],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[511665,511705]},{"pos":[511762,511772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[511774,511779]},{"pos":[511788,511800],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[511802,511858]},{"pos":[511865,511872],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[511874,511953]},{"pos":[511959,511975],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[511977,512044]},{"pos":[512098,512108],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[512110,512115]},{"pos":[512124,512136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[512138,512190]},{"pos":[512197,512204],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[512206,512328]},{"pos":[512334,512356],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[512358,512456]},{"pos":[512516,512526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[512528,512533]},{"pos":[512542,512554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[512556,512635]},{"pos":[512642,512649],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[512651,512688]},{"pos":[512694,512716],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[512718,512767]},{"pos":[512819,512829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[512831,512836]},{"pos":[512845,512857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[512859,512903]},{"pos":[512910,512917],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[512919,512987]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[512993,513063]},{"content":"The second byte contains a value for green.","pos":[513068,513111]},{"content":"The third byte contains a value for blue.","pos":[513116,513157]},{"content":"The high-order byte must be zero.","pos":[513162,513195]},{"content":"The maximum value for a single byte is 255.","pos":[513200,513243]},{"pos":[513249,513265],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[513267,513329]},{"pos":[513375,513385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[513387,513392]},{"pos":[513401,513413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[513415,513476]},{"pos":[513482,513493],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[513495,513570]},{"pos":[513611,513621],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[513623,513628]},{"pos":[513637,513649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[513651,513701]},{"pos":[513708,513715],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[513717,513789]},{"content":"0 Use the default font weight.","pos":[513795,513825]},{"content":"1 Thin.","pos":[513830,513837]},{"content":"2 Extra-light.","pos":[513842,513856]},{"content":"3 Light.","pos":[513861,513869]},{"content":"4 Normal.","pos":[513874,513883]},{"content":"5 Medium.","pos":[513888,513897]},{"content":"6 Semibold.","pos":[513902,513913]},{"content":"7 Bold.","pos":[513918,513925]},{"content":"8 Extra-bold.","pos":[513930,513943]},{"content":"9 Heavy.","pos":[513948,513956]},{"pos":[513962,513981],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[513983,514026]},{"pos":[514075,514085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[514087,514092]},{"pos":[514101,514113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[514115,514177]},{"pos":[514184,514191],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[514193,514297]},{"content":"Value.","pos":[514301,514307]},{"content":"Description.","pos":[514310,514322]},{"content":"0","pos":[514369,514370]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514378,514391],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[514403,514404]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514412,514428],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[514437,514438]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514446,514461],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[514471,514473]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514480,514492],"source":"MAC\\_CHARSET"},{"content":"128","pos":[514505,514508]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514514,514531],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[514539,514542]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514548,514563],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[514573,514576]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514582,514597],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[514607,514610]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514616,514636],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[514641,514644]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514650,514664],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[514675,514678]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514684,514700],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[514709,514712]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514718,514737],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[514743,514746]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514752,514767],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[514777,514780]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514786,514802],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[514811,514814]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514820,514839],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[514845,514848]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[514854,514866],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[514878,514966]},{"content":"Value.","pos":[514970,514976]},{"content":"Description.","pos":[514979,514991]},{"content":"130","pos":[515026,515029]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[515035,515049],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[515053,515148]},{"content":"Value.","pos":[515152,515158]},{"content":"Description.","pos":[515161,515173]},{"content":"177","pos":[515210,515213]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[515219,515234],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[515239,515242]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[515248,515263],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[515267,515353]},{"content":"Value.","pos":[515357,515363]},{"content":"Description.","pos":[515366,515378]},{"content":"222","pos":[515411,515414]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[515420,515433],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[515437,515524]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[515525,515616],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[515617,515732]},{"pos":[515738,515756],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[515758,515803]},{"pos":[515851,515861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[515863,515868]},{"pos":[515877,515889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[515891,515934]},{"pos":[515941,515948],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[515950,516011]},{"content":"Value.","pos":[516015,516021]},{"content":"Style.","pos":[516024,516030]},{"content":"0","pos":[516103,516104]},{"content":"Default.","pos":[516112,516120]},{"content":"1","pos":[516147,516148]},{"content":"The Microsoft Windows palette.","pos":[516156,516186]},{"content":"2","pos":[516191,516192]},{"content":"The true-color scheme.","pos":[516200,516222]},{"pos":[516238,516261],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[516263,516330]},{"pos":[516413,516423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[516425,516430]},{"pos":[516439,516451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[516453,516525]},{"pos":[516532,516539],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[516541,516622]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[516623,516716]},{"pos":[516722,516740],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[516742,516799]},{"pos":[516836,516848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[516850,516881]},{"pos":[516887,516912],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[516967,516977],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[516979,516984]},{"pos":[516993,517005],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[517011,517034],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[517087,517097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[517099,517104]},{"pos":[517113,517125],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[517131,517151],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[517201,517211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[517213,517218]},{"pos":[517227,517239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[517245,517260],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[517262,517343]},{"pos":[517388,517398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[517400,517405]},{"pos":[517414,517426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[517428,517488]},{"pos":[517494,517508],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[517510,517561]},{"pos":[517613,517623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[517625,517630]},{"pos":[517639,517651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[517653,517701]},{"pos":[517708,517715],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[517717,517792]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[517793,517888]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[517889,518023]},{"pos":[518029,518040],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[518042,518099]},{"pos":[518140,518150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[518152,518157]},{"pos":[518166,518178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[518180,518235]},{"pos":[518241,518256],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[518258,518315]},{"pos":[518360,518370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[518372,518377]},{"pos":[518386,518398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[518400,518433]},{"pos":[518439,518452],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[518454,518493]},{"pos":[518546,518556],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[518558,518563]},{"content":"mode","pos":[518577,518581]},{"pos":[518590,518602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[518604,518640]},{"pos":[518647,518654],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[518656,518763]},{"content":"Mode.","pos":[518767,518772]},{"content":"Height calculation.","pos":[518786,518805]},{"content":"-1 Exact.","pos":[518993,519002]},{"content":"The exact height in pixels of the controls is used.","pos":[519012,519063]},{"content":"0 Auto.","pos":[519106,519113]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[519125,519214]},{"content":"1 Column height.","pos":[519219,519235]},{"content":"The layout of the form determines the height of the control.","pos":[519238,519298]},{"content":"The height and height calculation mode can be set separately.","pos":[519331,519392]},{"pos":[519398,519415],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[519417,519479]},{"pos":[519526,519536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[519538,519543]},{"pos":[519552,519564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[519566,519587]},{"pos":[519594,519601],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[519603,519657]},{"content":"Mode.","pos":[519661,519666]},{"content":"Height Calculation.","pos":[519678,519697]},{"content":"Exact.","pos":[519883,519889]},{"content":"The exact height in pixels of the controls is used.","pos":[519900,519951]},{"content":"Auto.","pos":[519994,519999]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[520011,520100]},{"content":"Column height.","pos":[520105,520119]},{"content":"The layout of the form determines the height of the control.","pos":[520122,520182]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[520215,520300]},{"pos":[520306,520324],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[520326,520365]},{"pos":[520413,520423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[520425,520430]},{"pos":[520439,520451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[520453,520474]},{"pos":[520481,520488],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[520490,520580]},{"pos":[520586,520601],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[520603,520707]},{"pos":[520752,520762],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[520764,520769]},{"pos":[520778,520790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[520792,520847]},{"pos":[520854,520861],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[520863,520976]},{"pos":[520982,521004],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[521056,521066],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[521068,521073]},{"pos":[521082,521094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[521100,521109],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[521111,521143]},{"pos":[521171,521183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[521185,521207]},{"pos":[521213,521231],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[521233,521309]},{"pos":[521350,521362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[521364,521438]},{"pos":[521444,521457],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[521508,521518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[521520,521525]},{"pos":[521534,521546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[521552,521563],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[521614,521624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[521626,521631]},{"content":"mode","pos":[521645,521649]},{"pos":[521658,521670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[521676,521691],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[521736,521746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[521748,521753]},{"pos":[521762,521774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[521780,521796],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[521842,521852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[521854,521859]},{"pos":[521868,521880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[521886,521897],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[521899,522052]},{"pos":[522093,522103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[522105,522110]},{"pos":[522119,522131],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[522133,522197]},{"pos":[522204,522211],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[522213,522307]},{"content":"It must start with a letter.","pos":[522313,522341]},{"content":"It cannot exceed 250 characters.","pos":[522346,522378]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[522383,522437],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[522442,522482]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumerations, or classes.","pos":[522487,522604]},{"pos":[522610,522633],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[522686,522696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[522698,522703]},{"pos":[522712,522724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[522730,522748],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[522816,522826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[522828,522833]},{"pos":[522842,522854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[522860,522871],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[522920,522930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[522932,522937]},{"pos":[522946,522958],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[522964,522974],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[523024,523034],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523036,523041]},{"content":"mode","pos":[523055,523059]},{"pos":[523068,523080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[523086,523100],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[523144,523154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523156,523161]},{"pos":[523170,523182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[523188,523203],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[523248,523258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523260,523265]},{"pos":[523274,523286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[523292,523303],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[523344,523354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523356,523361]},{"pos":[523370,523382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[523388,523404],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[523458,523468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523470,523475]},{"pos":[523484,523496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[523502,523517],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[523562,523572],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523574,523579]},{"pos":[523588,523600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[523606,523625],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[523674,523684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523686,523691]},{"pos":[523700,523712],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[523718,523738],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[523788,523798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523800,523805]},{"pos":[523814,523826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[523832,523854],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[523923,523933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523935,523940]},{"content":"mode","pos":[523954,523958]},{"pos":[523967,523979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[523985,524011],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[524076,524086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[524088,524092]},{"pos":[524101,524113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[524119,524146],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[524203,524213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[524215,524220]},{"pos":[524229,524241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[524247,524261],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[524313,524323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[524325,524330]},{"pos":[524339,524351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[524357,524369],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[524371,524409]},{"pos":[524461,524471],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[524473,524478]},{"content":"mode","pos":[524492,524496]},{"pos":[524505,524517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[524519,524554]},{"pos":[524561,524568],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[524570,524676]},{"content":"Mode.","pos":[524680,524685]},{"content":"Width calculation.","pos":[524698,524716]},{"content":"-1 Exact.","pos":[524902,524911]},{"content":"The exact width in pixels of the controls is used.","pos":[524920,524970]},{"content":"0 Auto.","pos":[525013,525020]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[525031,525119]},{"content":"1 Column width.","pos":[525124,525139]},{"content":"The layout of the form determines the width of the control.","pos":[525142,525201]},{"content":"The width and width calculation mode can be set separately.","pos":[525234,525293]},{"pos":[525299,525315],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[525317,525379]},{"pos":[525425,525435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[525437,525442]},{"pos":[525451,525463],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[525465,525526]},{"pos":[525533,525540],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[525542,525595]},{"content":"Mode.","pos":[525599,525604]},{"content":"Width Calculation.","pos":[525615,525633]},{"content":"Exact.","pos":[525817,525823]},{"content":"The exact width in pixels of the controls is used.","pos":[525833,525883]},{"content":"Auto.","pos":[525926,525931]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[525942,526030]},{"content":"Column width.","pos":[526035,526048]},{"content":"The layout of the form determines the width of the control.","pos":[526051,526110]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[526143,526226]},{"pos":[526232,526249],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[526251,526289]},{"pos":[526336,526346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[526348,526353]},{"pos":[526362,526374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[526376,526411]},{"pos":[526418,526425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[526427,526500]},{"pos":[526506,526535],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[526653,526663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[526665,526681]},{"content":"objectMethodToCall","pos":[526695,526713]},{"content":"overrideObject","pos":[526727,526741]}]}