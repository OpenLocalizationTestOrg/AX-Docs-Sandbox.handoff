{"content":"---\n# required metadata\n\ntitle: S Classes\ndescription: System API classes that start with the letter S.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 51751\nms.assetid: cb7c0fd3-34ec-407b-ad78-1007a67d70d5\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# S Classes\n\n[!include[banner](../includes/banner.md)]\n\n\nSystem API classes that start with the letter S.\n\nClass ScannerClass\n------------------\n\n    class ScannerClass extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                       | Description                                     |\n|----------------------------------------------------------------------------------------------|-------------------------------------------------|\n| public int col()                                                                             |                                                 |\n| public Date dateValue()                                                                      |                                                 |\n| public int firstSymbol()                                                                     |                                                 |\n| public Int64 int64Value()                                                                    |                                                 |\n| public int intValue()                                                                        |                                                 |\n| public int line()                                                                            |                                                 |\n| public int nextSymbol()                                                                      |                                                 |\n| public Real realValue()                                                                      |                                                 |\n| public int startColumn()                                                                     |                                                 |\n| public str string()                                                                          |                                                 |\n| public str strValue()                                                                        |                                                 |\n| public void localMacroDefine(str text, int startLine, int startPos, int endLine, int endPos) |                                                 |\n| public void lineComment(str text, int startLine, int startPos, int endLine, int endPos)      |                                                 |\n| public void macroDefine(str text, int startLine, int startPos, int endLine, int endPos)      |                                                 |\n| public void new(str source)                                                                  | Initializes a new instance of the Object class. |\n| public void comment(str text, int startLine, int startPos, int endLine, int endPos)          |                                                 |\n\n### Method col\n\n    public int col()\n\n#### Return Value\n\n### Method dateValue\n\n    public Date dateValue()\n\n#### Return Value\n\n### Method firstSymbol\n\n    public int firstSymbol()\n\n#### Return Value\n\n### Method int64Value\n\n    public Int64 int64Value()\n\n#### Return Value\n\n### Method intValue\n\n    public int intValue()\n\n#### Return Value\n\n### Method line\n\n    public int line()\n\n#### Return Value\n\n### Method nextSymbol\n\n    public int nextSymbol()\n\n#### Return Value\n\n### Method realValue\n\n    public Real realValue()\n\n#### Return Value\n\n### Method startColumn\n\n    public int startColumn()\n\n#### Return Value\n\n### Method string\n\n    public str string()\n\n#### Return Value\n\n### Method strValue\n\n    public str strValue()\n\n#### Return Value\n\n### Method localMacroDefine\n\n    public void localMacroDefine(str text, int startLine, int startPos, int endLine, int endPos)\n\n#### Parameters\n\ntext  \n\n<!-- -->\n\nstartLine  \n\n<!-- -->\n\nstartPos  \n\n<!-- -->\n\nendLine  \n\n<!-- -->\n\nendPos  \n\n### Method lineComment\n\n    public void lineComment(str text, int startLine, int startPos, int endLine, int endPos)\n\n#### Parameters\n\ntext  \n\n<!-- -->\n\nstartLine  \n\n<!-- -->\n\nstartPos  \n\n<!-- -->\n\nendLine  \n\n<!-- -->\n\nendPos  \n\n### Method macroDefine\n\n    public void macroDefine(str text, int startLine, int startPos, int endLine, int endPos)\n\n#### Parameters\n\ntext  \n\n<!-- -->\n\nstartLine  \n\n<!-- -->\n\nstartPos  \n\n<!-- -->\n\nendLine  \n\n<!-- -->\n\nendPos  \n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(str source)\n\n#### Parameters\n\nsource  \n\n### Method comment\n\n    public void comment(str text, int startLine, int startPos, int endLine, int endPos)\n\n#### Parameters\n\ntext  \n\n<!-- -->\n\nstartLine  \n\n<!-- -->\n\nstartPos  \n\n<!-- -->\n\nendLine  \n\n<!-- -->\n\nendPos  \n\n## Class SearchParm\n    class SearchParm extends Object\n\nThe SearchParm class serves as an interface between the kernel and the sysTreeSearch class, and enables searches in the  Application Object Tree (AOT).\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                          | Description |\n|-------------------------------------------------|-------------|\n| public str nodeName(\\[str name\\])               |             |\n| public int nodeType(\\[int type\\])               |             |\n| public str nodeTypeArray()                      |             |\n| public str propertyName(\\[str name\\])           |             |\n| public str propertyValue(\\[str value\\])         |             |\n| public str replaceString(\\[str replaceString\\]) |             |\n| public int searchFlag(\\[int flag\\])             |             |\n| public str searchString(\\[str searchString\\])   |             |\n| public int searchType(\\[int type\\])             |             |\n| public boolean startSearch()                    |             |\n| public TreeNode topNode(\\[TreeNode node\\])      |             |\n| public str topNodeName(\\[str name\\])            |             |\n| public int topNodeType(\\[int type\\])            |             |\n| public void preSearch()                         |             |\n| public void killSearch()                        |             |\n\n### Method nodeName\n\n    public str nodeName([str name])\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method nodeType\n\n    public int nodeType([int type])\n\n#### Parameters\n\ntype  \n\n#### Return Value\n\n### Method nodeTypeArray\n\n    public str nodeTypeArray()\n\n#### Return Value\n\n### Method propertyName\n\n    public str propertyName([str name])\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method propertyValue\n\n    public str propertyValue([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceString\n\n    public str replaceString([str replaceString])\n\n#### Parameters\n\nreplaceString  \n\n#### Return Value\n\n### Method searchFlag\n\n    public int searchFlag([int flag])\n\n#### Parameters\n\nflag  \n\n#### Return Value\n\n### Method searchString\n\n    public str searchString([str searchString])\n\n#### Parameters\n\nsearchString  \n\n#### Return Value\n\n### Method searchType\n\n    public int searchType([int type])\n\n#### Parameters\n\ntype  \n\n#### Return Value\n\n### Method startSearch\n\n    public boolean startSearch()\n\n#### Return Value\n\n### Method topNode\n\n    public TreeNode topNode([TreeNode node])\n\n#### Parameters\n\nnode  \n\n#### Return Value\n\n### Method topNodeName\n\n    public str topNodeName([str name])\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method topNodeType\n\n    public int topNodeType([int type])\n\n#### Parameters\n\ntype  \n\n#### Return Value\n\n### Method preSearch\n\n    public void preSearch()\n\n### Method killSearch\n\n    public void killSearch()\n\n## Class SecureNode\n    class SecureNode extends TreeNode\n\nThe SecureNode class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                          | Description                                                             |\n|---------------------------------------------------------------------------------|-------------------------------------------------------------------------|\n| public boolean checkAccessRights()                                              |                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])        | Gets or sets the configuration key that is assigned to the control.     |\n| public ConfigurationKeyId countryConfigurationkey(\\[ConfigurationKeyId value\\]) |                                                                         |\n| public boolean extendedDataSecurity(\\[boolean value\\])                          |                                                                         |\n| public boolean isWeb()                                                          |                                                                         |\n| public int neededAccessLevel(\\[int value\\])                                     | Gets or sets the neededAccessLevel property for the MenuFunction class. |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                       |                                                                         |\n| public ConfigurationKeyId webConfigurationkey(\\[ConfigurationKeyId value\\])     |                                                                         |\n\n### Method checkAccessRights\n\n    public boolean checkAccessRights()\n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method countryConfigurationkey\n\n    public ConfigurationKeyId countryConfigurationkey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extendedDataSecurity\n\n    public boolean extendedDataSecurity([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isWeb\n\n    public boolean isWeb()\n\n#### Return Value\n\n### Method neededAccessLevel\n\nGets or sets the neededAccessLevel property for the MenuFunction class.\n\n    public int neededAccessLevel([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the neededAccessLevel property.\n\n#### Remarks\n\nThe possible values for the AccessType system enumuration value are as follows:\n\n-   AccessType::NoAccess.\n-   AccessType::View.\n-   AccessType::Edit.\n-   AccessType::Add.\n-   AccessType::Delete.\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webConfigurationkey\n\n    public ConfigurationKeyId webConfigurationkey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n## Class SecurityContext\n    class SecurityContext extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                | Description |\n|-------------------------------------------------------------------------------------------------------|-------------|\n| public boolean isTableOperationAllowed(int tableId, StatementType operation, \\[DataAreaId dataArea\\]) |             |\n| ::public static SecurityContext current()                                                             |             |\n| ::public static SecurityContext constructFromEntryPoint(SecurableType type, str name, str childName)  |             |\n| public boolean equal(SecurityContext context)                                                         |             |\n| public SecurableType securableType()                                                                  |             |\n| public str securableName()                                                                            |             |\n| public str securableChildName()                                                                       |             |\n| public void push()                                                                                    |             |\n| ::public static void pop()                                                                            |             |\n| private void new()                                                                                    |             |\n\n### Method isTableOperationAllowed\n\n    public boolean isTableOperationAllowed(int tableId, StatementType operation, [DataAreaId dataArea])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\noperation  \n\n<!-- -->\n\ndataArea  \n\n#### Return Value\n\n### Method current\n\n    public static SecurityContext current()\n\n#### Return Value\n\n### Method constructFromEntryPoint\n\n    public static SecurityContext constructFromEntryPoint(SecurableType type, str name, str childName)\n\n#### Parameters\n\ntype  \n\n<!-- -->\n\nname  \n\n<!-- -->\n\nchildName  \n\n#### Return Value\n\n### Method equal\n\n    public boolean equal(SecurityContext context)\n\n#### Parameters\n\ncontext  \n\n#### Return Value\n\n### Method securableType\n\n    public SecurableType securableType()\n\n#### Return Value\n\n### Method securableName\n\n    public str securableName()\n\n#### Return Value\n\n### Method securableChildName\n\n    public str securableChildName()\n\n#### Return Value\n\n### Method push\n\n    public void push()\n\n### Method pop\n\n    public static void pop()\n\n### Method new\n\n    private void new()\n\n## Class SecurityPolicy\n    class SecurityPolicy extends Object\n\nThe SecurityPolicy class holds the information about the security policies.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                 | Description                                             |\n|------------------------------------------------------------------------|---------------------------------------------------------|\n| ::public static void synchronizeAllPolicies()                          |                                                         |\n| ::public static void synchronizePolicy(UtilElementName securityPolicy) |                                                         |\n| public void new()                                                      | Initializes a new instance of the SecurityPolicy class. |\n\n### Method synchronizeAllPolicies\n\n    public static void synchronizeAllPolicies()\n\n### Method synchronizePolicy\n\n    public static void synchronizePolicy(UtilElementName securityPolicy)\n\n#### Parameters\n\nsecurityPolicy  \n\n### Method new\n\nInitializes a new instance of the SecurityPolicy class.\n\n    public void new()\n\n## Class SecurityRights\n    class SecurityRights extends Object\n\nThe SecurityRights class holds the information about the security rights and permissions management.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                                 | Description                                                            |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------|\n| public boolean hasDataServiceAccess(SecurableName name, StatementType operation, \\[SecurableChildName fieldName\\])                                                                     |                                                                        |\n| public boolean hasDataServiceMethodAccess(SecurableName name, StatementType operation, SecurableChildName methodName)                                                                  |                                                                        |\n| public AccessRight dataManagementAccessRight(SecurableName dataEntityName, \\[SecurableChildName fieldName\\])                                                                           |                                                                        |\n| public str listDataServiceAccess(SecurableName name, \\[SecurableChildName context\\])                                                                                                   |                                                                        |\n| public AccessRight fieldAccessRight(TableName tableName, FieldName fieldName, \\[Common record\\], \\[DataAreaId dataArea\\], \\[boolean includeDerived\\], \\[AutoAuthzMode autoAuthzMode\\]) | Retrieves the access rights for the field of the table.                |\n| public AccessRight formControlAccessRight(FormName form, UtilElementName control, \\[Common record\\], \\[DataAreaId dataArea\\])                                                          | Retrieves the access rights for the form control.                      |\n| public container getSelectableCompanies()                                                                                                                                              |                                                                        |\n| public boolean hasMenuAccess(MenuName menu, \\[boolean isWebMenu\\])                                                                                                                     | Checks whether the user has access to the specified menu.              |\n| public boolean hasMenuItemAccess(SecurableType type, MenuItemName menuItem, \\[Common record\\], \\[DataAreaId dataArea\\])                                                                | Checks whether the user has access to the specified menu item.         |\n| public boolean SysObsoleteAttribute(ClassName class, MethodName method)                                                                                                                |                                                                        |\n| public boolean hasServiceOperationAccess(UtilElementName service, UtilElementName operation)                                                                                           | Checks whether the user has access to the specified service operation. |\n| public boolean isDeveloper()                                                                                                                                                           |                                                                        |\n| public boolean isSystemAdministrator()                                                                                                                                                 | Checks whether the current user is a system administrator.             |\n| public AccessRight menuItemAccessRight(SecurableType type, MenuItemName menuItem, \\[DataAreaId dataArea\\])                                                                             | Retrieves the access rights for the menu item.                         |\n| public AccessRight tableAccessRight(TableName tableName, \\[Common record\\], \\[DataAreaId dataArea\\], \\[boolean includeDerived\\], \\[AutoAuthzMode autoAuthzMode\\])                      | Retrieves the access rights for the table.                             |\n| public SecurityTableRights tableFieldAccessRights(TableName tableName, \\[Common record\\], \\[DataAreaId dataArea\\], \\[boolean includeDerived\\], \\[AutoAuthzMode autoAuthzMode\\])        | Retrieves the field access rights for the table.                       |\n| public Set variableAccessFields(TableName tableName, \\[AccessRight targetAccess\\], \\[DataAreaId dataArea\\])                                                                            | Retrieves a set of the table field IDs.                                |\n| public AccessRight webContentAccessRight(SecurableType type, WebContentItemName name)                                                                                                  | Retrieves the access rights for the web content item.                  |\n| ::public static SecurityRights construct()                                                                                                                                             | Creates a new security rights instance for the current user.           |\n| ::public static SecurityRights newUser(UserId user)                                                                                                                                    | Creates a new security rights instance for the specified user.         |\n| private void new()                                                                                                                                                                     | Initializes a new instance of the SecurityRights class.                |\n| public void populateSelectableCompanies()                                                                                                                                              | Populates the selectable companies.                                    |\n\n### Method hasDataServiceAccess\n\n    public boolean hasDataServiceAccess(SecurableName name, StatementType operation, [SecurableChildName fieldName])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\noperation  \n\n<!-- -->\n\nfieldName  \n\n#### Return Value\n\n### Method hasDataServiceMethodAccess\n\n    public boolean hasDataServiceMethodAccess(SecurableName name, StatementType operation, SecurableChildName methodName)\n\n#### Parameters\n\nname  \n\n<!-- -->\n\noperation  \n\n<!-- -->\n\nmethodName  \n\n#### Return Value\n\n### Method dataManagementAccessRight\n\n    public AccessRight dataManagementAccessRight(SecurableName dataEntityName, [SecurableChildName fieldName])\n\n#### Parameters\n\ndataEntityName  \n\n<!-- -->\n\nfieldName  \n\n#### Return Value\n\n### Method listDataServiceAccess\n\n    public str listDataServiceAccess(SecurableName name, [SecurableChildName context])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\ncontext  \n\n#### Return Value\n\n### Method fieldAccessRight\n\nRetrieves the access rights for the field of the table.\n\n    public AccessRight fieldAccessRight(TableName tableName, FieldName fieldName, [Common record], [DataAreaId dataArea], [boolean includeDerived], [AutoAuthzMode autoAuthzMode])\n\n#### Parameters\n\ntableName  \n\n<!-- -->\n\nfieldName  \n\n<!-- -->\n\nrecord  \n\n<!-- -->\n\ndataArea  \n\n<!-- -->\n\nincludeDerived  \n\n<!-- -->\n\nautoAuthzMode  \n\n#### Return Value\n\nThe AccesRight instance for the field of the table.\n\n### Method formControlAccessRight\n\nRetrieves the access rights for the form control.\n\n    public AccessRight formControlAccessRight(FormName form, UtilElementName control, [Common record], [DataAreaId dataArea])\n\n#### Parameters\n\nform  \n\n<!-- -->\n\ncontrol  \n\n<!-- -->\n\nrecord  \n\n<!-- -->\n\ndataArea  \n\n#### Return Value\n\nThe AccesRight instance for the form control.\n\n### Method getSelectableCompanies\n\n    public container getSelectableCompanies()\n\n#### Return Value\n\n### Method hasMenuAccess\n\nChecks whether the user has access to the specified menu.\n\n    public boolean hasMenuAccess(MenuName menu, [boolean isWebMenu])\n\n#### Parameters\n\nmenu  \n\n<!-- -->\n\nisWebMenu  \n\n#### Return Value\n\ntrue if the user has access to the menu; otherwise, false.\n\n### Method hasMenuItemAccess\n\nChecks whether the user has access to the specified menu item.\n\n    public boolean hasMenuItemAccess(SecurableType type, MenuItemName menuItem, [Common record], [DataAreaId dataArea])\n\n#### Parameters\n\ntype  \n\n<!-- -->\n\nmenuItem  \n\n<!-- -->\n\nrecord  \n\n<!-- -->\n\ndataArea  \n\n#### Return Value\n\ntrue if the user has access to the menu item; otherwise, false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(ClassName class, MethodName method)\n\n#### Parameters\n\nclass  \n\n<!-- -->\n\nmethod  \n\n#### Return Value\n\n### Method hasServiceOperationAccess\n\nChecks whether the user has access to the specified service operation.\n\n    public boolean hasServiceOperationAccess(UtilElementName service, UtilElementName operation)\n\n#### Parameters\n\nservice  \n\n<!-- -->\n\noperation  \n\n#### Return Value\n\ntrue if user has access to the service operation; otherwise, false.\n\n### Method isDeveloper\n\n    public boolean isDeveloper()\n\n#### Return Value\n\n### Method isSystemAdministrator\n\nChecks whether the current user is a system administrator.\n\n    public boolean isSystemAdministrator()\n\n#### Return Value\n\ntrue if the current user is a system administrator; otherwise, false.\n\n### Method menuItemAccessRight\n\nRetrieves the access rights for the menu item.\n\n    public AccessRight menuItemAccessRight(SecurableType type, MenuItemName menuItem, [DataAreaId dataArea])\n\n#### Parameters\n\ntype  \n\n<!-- -->\n\nmenuItem  \n\n<!-- -->\n\ndataArea  \n\n#### Return Value\n\nThe AccesRight instance for the item.\n\n### Method tableAccessRight\n\nRetrieves the access rights for the table.\n\n    public AccessRight tableAccessRight(TableName tableName, [Common record], [DataAreaId dataArea], [boolean includeDerived], [AutoAuthzMode autoAuthzMode])\n\n#### Parameters\n\ntableName  \n\n<!-- -->\n\nrecord  \n\n<!-- -->\n\ndataArea  \n\n<!-- -->\n\nincludeDerived  \n\n<!-- -->\n\nautoAuthzMode  \n\n#### Return Value\n\nThe AccesRight instance for the table.\n\n### Method tableFieldAccessRights\n\nRetrieves the field access rights for the table.\n\n    public SecurityTableRights tableFieldAccessRights(TableName tableName, [Common record], [DataAreaId dataArea], [boolean includeDerived], [AutoAuthzMode autoAuthzMode])\n\n#### Parameters\n\ntableName  \n\n<!-- -->\n\nrecord  \n\n<!-- -->\n\ndataArea  \n\n<!-- -->\n\nincludeDerived  \n\n<!-- -->\n\nautoAuthzMode  \n\n#### Return Value\n\nThe SecurityTableRights instance for the table.\n\n### Method variableAccessFields\n\nRetrieves a set of the table field IDs.\n\n    public Set variableAccessFields(TableName tableName, [AccessRight targetAccess], [DataAreaId dataArea])\n\n#### Parameters\n\ntableName  \n\n<!-- -->\n\ntargetAccess  \n\n<!-- -->\n\ndataArea  \n\n#### Return Value\n\nA set of the table field IDs.\n\n### Method webContentAccessRight\n\nRetrieves the access rights for the web content item.\n\n    public AccessRight webContentAccessRight(SecurableType type, WebContentItemName name)\n\n#### Parameters\n\ntype  \n\n<!-- -->\n\nname  \n\n#### Return Value\n\nThe AccesRight instance for the item.\n\n### Method construct\n\nCreates a new security rights instance for the current user.\n\n    public static SecurityRights construct()\n\n#### Return Value\n\nThe SecurityRights instance that was created.\n\n### Method newUser\n\nCreates a new security rights instance for the specified user.\n\n    public static SecurityRights newUser(UserId user)\n\n#### Parameters\n\nuser  \n\n#### Return Value\n\nThe SecurityRights instance that was created.\n\n### Method new\n\nInitializes a new instance of the SecurityRights class.\n\n    private void new()\n\n### Method populateSelectableCompanies\n\nPopulates the selectable companies.\n\n    public void populateSelectableCompanies()\n\n## Class SecuritySkipFlush\n    class SecuritySkipFlush extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method              | Description                                                |\n|---------------------|------------------------------------------------------------|\n| public void clear() |                                                            |\n| public void new()   | Initializes a new instance of the SecuritySkipFlush class. |\n| public void set()   |                                                            |\n\n### Method clear\n\n    public void clear()\n\n### Method new\n\nInitializes a new instance of the SecuritySkipFlush class.\n\n    public void new()\n\n### Method set\n\n    public void set()\n\n## Class SecurityTableRights\n    class SecurityTableRights extends Object\n\nThe SecurityTableRights class holds the information about the table security rights.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                   | Description                                               |\n|----------------------------------------------------------|-----------------------------------------------------------|\n| public AccessRight fieldAccessRight(FieldName fieldName) | Gets the access rights for the field of the table.        |\n| public AccessRight tableAccessRight()                    | Gets the access rights for the table.                     |\n| private void new()                                       | Initializes an instance of the SecurityTableRights class. |\n\n### Method fieldAccessRight\n\nGets the access rights for the field of the table.\n\n    public AccessRight fieldAccessRight(FieldName fieldName)\n\n#### Parameters\n\nfieldName  \n\n#### Return Value\n\nThe AccesRight instance for the field.\n\n### Method tableAccessRight\n\nGets the access rights for the table.\n\n    public AccessRight tableAccessRight()\n\n#### Return Value\n\nThe AccesRight instance for the table.\n\n### Method new\n\nInitializes an instance of the SecurityTableRights class.\n\n    private void new()\n\n## Class SecurityUtil\n    class SecurityUtil extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                 | Description                                                                |\n|------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------|\n| ::public static boolean isImplicitFlushMode()                                                                          | Indicates whether implicit security flushing mode is on.                   |\n| ::public static int getRoleEffectiveAccess(Int64 roleID, str secObjectName, int secObjectType, str secObjectChildName) | Retrieves an effective access for role value of securable object.          |\n| ::public static container getRolePermissions(Int64 roleID)                                                             | Gets a container of securable objects and their effective access.          |\n| ::public static boolean sysAdminMode(\\[boolean active\\])                                                               | Gets and sets the security administrator mode.                             |\n| ::public static void refreshRolePermissions(Int64 roleID)                                                              | Retrieves the effective access of a specified role for a securable object. |\n| ::public static void runSecondPassAutoInference()                                                                      | Runs the second pass auto inference.                                       |\n| ::public static void flushPermissions()                                                                                | Flushes the permissions.                                                   |\n| public void new()                                                                                                      | Initializes a new instance of the SecurityUtil class.                      |\n| ::public static void flushAll()                                                                                        |                                                                            |\n\n### Method isImplicitFlushMode\n\nIndicates whether implicit security flushing mode is on.\n\n    public static boolean isImplicitFlushMode()\n\n#### Return Value\n\nA Boolean value.\n\n### Method getRoleEffectiveAccess\n\nRetrieves an effective access for role value of securable object.\n\n    public static int getRoleEffectiveAccess(Int64 roleID, str secObjectName, int secObjectType, str secObjectChildName)\n\n#### Parameters\n\nroleID  \n\n<!-- -->\n\nsecObjectName  \n\n<!-- -->\n\nsecObjectType  \n\n<!-- -->\n\nsecObjectChildName  \n\n#### Return Value\n\nThe effective access value.\n\n### Method getRolePermissions\n\nGets a container of securable objects and their effective access.\n\n    public static container getRolePermissions(Int64 roleID)\n\n#### Parameters\n\nroleID  \nThe role ID.\n\n#### Return Value\n\nA container of securable objects and their effective access.\n\n### Method sysAdminMode\n\nGets and sets the security administrator mode.\n\n    public static boolean sysAdminMode([boolean active])\n\n#### Parameters\n\nactive  \nA Boolean value.\n\n#### Return Value\n\nThe old state of the security administrator mode.\n\n### Method refreshRolePermissions\n\nRetrieves the effective access of a specified role for a securable object.\n\n    public static void refreshRolePermissions(Int64 roleID)\n\n#### Parameters\n\nroleID  \n\n### Method runSecondPassAutoInference\n\nRuns the second pass auto inference.\n\n    public static void runSecondPassAutoInference()\n\n### Method flushPermissions\n\nFlushes the permissions.\n\n    public static void flushPermissions()\n\n### Method new\n\nInitializes a new instance of the SecurityUtil class.\n\n    public void new()\n\n### Method flushAll\n\n    public static void flushAll()\n\n## Class SegmentEnteredEventArgs\n    class SegmentEnteredEventArgs extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                   | Description |\n|----------------------------------------------------------|-------------|\n| public boolean isAllValuesEnabled(\\[boolean enabled\\])   |             |\n| public boolean isMRUEnabled(\\[boolean enabled\\])         |             |\n| public boolean isValidValuesEnabled(\\[boolean enabled\\]) |             |\n\n### Method isAllValuesEnabled\n\n    public boolean isAllValuesEnabled([boolean enabled])\n\n#### Parameters\n\nenabled  \n\n#### Return Value\n\n### Method isMRUEnabled\n\n    public boolean isMRUEnabled([boolean enabled])\n\n#### Parameters\n\nenabled  \n\n#### Return Value\n\n### Method isValidValuesEnabled\n\n    public boolean isValidValuesEnabled([boolean enabled])\n\n#### Parameters\n\nenabled  \n\n#### Return Value\n\n## Class SegmentValueChangedEventArgs\n    class SegmentValueChangedEventArgs extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                       | Description |\n|------------------------------|-------------|\n| public FormSegment segment() |             |\n| public AnyType selectedTag() |             |\n\n### Method segment\n\n    public FormSegment segment()\n\n#### Return Value\n\n### Method selectedTag\n\n    public AnyType selectedTag()\n\n#### Return Value\n\n## Class Sequence\n    class Sequence extends Object\n\nThe Sequence class lets you perform transactions outside the main transaction scope, typically for some kind of sequence, or voucher number generation.\n\n### Remarks\n\nThere are three kinds of connections: The main user connection, an auxiliary system connection, and user connections. The first is used for the application logic. The second is used for internal sequence number generation (specifically the built-in field RecId). The third is used for the application maintained separate connections. This class provides an interface to the auxiliary system connection for number generation. However, it may be a better solution to use the UserConnection class, as this is the method the application uses or flexibility, and to avoid concurrency problems with the kernel's sequence number generation.\n\n### Examples\n\n    static void example() \n    { \n        Sequence S = new Sequence(\"mySequence\",1,100,10000); \n        print S.nextval(10);           // 100 in current company (the subkey) \n        print S.nextval(10);           // 110 in current company (the subkey) \n        print S.nextval(1,\"MMM\");      // 100 in subkey \"MMM\" \n        print S.nextval(1,\"MMM\");      // 101 in subkey \"MMM\" \n    }\n\n### Methods\n\n| Method                                                                                                        | Description                                                                                 |\n|---------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|\n| public Int64 currval(\\[str Subkey1\\], \\[int Subkey2\\])                                                        | Gets the current sequence number from the sequence, without incrementing the counter value. |\n| public Int64 nextval(Int64 Increment, \\[str Subkey1\\], \\[int Subkey2\\])                                       | Returns the next sequence number from the sequence and then increments the counter value.   |\n| public void new(str Name, int Id, Int64 InitialValue, Int64 MaxValue, \\[boolean Cycle\\], \\[Int64 CacheSize\\]) | Initializes a new instance of the Object class.                                             |\n\n### Method currval\n\nGets the current sequence number from the sequence, without incrementing the counter value.\n\n    public Int64 currval([str Subkey1], [int Subkey2])\n\n#### Parameters\n\nSubkey1  \n\n<!-- -->\n\nSubkey2  \n\n#### Return Value\n\nThe current sequence number from the sequence.\n\n### Method nextval\n\nReturns the next sequence number from the sequence and then increments the counter value.\n\n    public Int64 nextval(Int64 Increment, [str Subkey1], [int Subkey2])\n\n#### Parameters\n\nIncrement  \n\n<!-- -->\n\nSubkey1  \n\n<!-- -->\n\nSubkey2  \n\n#### Return Value\n\nThe next sequence number available.\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(str Name, int Id, Int64 InitialValue, Int64 MaxValue, [boolean Cycle], [Int64 CacheSize])\n\n#### Parameters\n\nName  \n\n<!-- -->\n\nId  \n\n<!-- -->\n\nInitialValue  \n\n<!-- -->\n\nMaxValue  \n\n<!-- -->\n\nCycle  \n\n<!-- -->\n\nCacheSize  \n\n## Class Set\n    class Set extends Object\n\nThe Set class is used for the storage and retrieval of data from a collection in which the values of the elements contained are unique and serve as the key values according to which the data is automatically ordered.\n\n### Remarks\n\nThe values may be of any X++ type. All values in the set must have the same type. When a value that is already stored in the set is added, it is ignored and does not increase the number of elements in the set. The values stored in the set can be traversed by using objects of type SetEnumerator. The contents of a set are stored in a way that facilitates efficient look up of the elements.\n\n### Examples\n\nThe following example checks whether any of the values in one set, the noConfigs set, are found in a second set, the yesConfigs set. If they are, they are removed from the yesConfigs set.\n\n    Set             noConfigs; \n    Set             yesConfigs; \n    ConfigId        configId; \n    SetEnumerator   se; \n    ; \n    se = noConfigs.getEnumerator(); \n    while (se.moveNext()) \n    { \n        configId    = se.current(); \n        if (yesConfigs.in(configId)) \n        { \n            yesConfigs.remove(configId); \n        } \n    }\n\n### Methods\n\n| Method                                               | Description                                                                                                                       |\n|------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| public boolean add(AnyType arg)                      | Adds an element to the set.                                                                                                       |\n| public str definitionString()                        | Returns a description of the type of the elements in the set.                                                                     |\n| public int elements()                                | Returns the number of elements in the set.                                                                                        |\n| public boolean empty()                               | Determines whether the set is empty.                                                                                              |\n| public boolean equal(Set set)                        | Determines whether a set is identical to the current set.                                                                         |\n| public SetEnumerator getEnumerator()                 | Creates an enumerator for a set, which allows you to traverse the set.                                                            |\n| public boolean in(AnyType arg)                       | Determines whether a specified element is a member of the set.                                                                    |\n| public container pack()                              | Serializes the current instance of the Set class.                                                                                 |\n| public boolean remove(AnyType arg)                   | Removes an element from the set.                                                                                                  |\n| public str toString()                                | Returns a string describing the contents of the set.                                                                              |\n| public Types typeId()                                | Returns the type of the values in the set.                                                                                        |\n| public str xml(\\[int indent\\])                       | Returns an XML string that represents the current object.                                                                         |\n| ::public static Set create(container container)      | Creates a set from the container obtained from a prior call to the Set.pack method.                                               |\n| ::public static Set createFromXML(Object xmlnode)    |                                                                                                                                   |\n| ::public static Set difference(Set set1, Set set2)   | Calculates and retrieves the set containing the elements from set1 that are not found in set2.                                    |\n| ::public static Set intersection(Set set1, Set set2) | Calculates and returns the identical values found in two sets.                                                                    |\n| ::public static Set union(Set set1, Set set2)        | Calculates and retrieves the union of two given sets. This is the set that contains the values found in at least one of the sets. |\n| public void new(Types Type)                          | Creates a set that can contain elements of the specified type.                                                                    |\n\n### Method add\n\nAdds an element to the set.\n\n    public boolean add(AnyType arg)\n\n#### Parameters\n\narg  \nThe element to add to the set.\n\n#### Return Value\n\ntrue if the element is added to the set; otherwise, false.\n\n#### Remarks\n\nThe element added to a set must be of the same type as the type assigned to the set when it was created. An element will not be added if it already exists in the set.\n\n#### Examples\n\nThe following example creates a set, adds some integers to it, and then prints out the contents of the set.\n\n    { \n        // Create a set of integers \n        Set is = new Set (Types::Integer); \n        int i; \n        ;  \n        // Add values 0 to 9 to the set \n        for (i = 0; i < 10; i++) \n        { \n            is.add(i); \n        } \n        print is.toString(); \n        pause; \n    }\n\n### Method definitionString\n\nReturns a description of the type of the elements in the set.\n\n    public str definitionString()\n\n#### Return Value\n\nA string that contains a definition of the set.\n\n#### Remarks\n\nTo print a list of the values within the set, use Set.toString.\n\n#### Examples\n\nThe following example creates a set of integers. The definitionString method is used to print a description of the set.\n\n    { \n        // Declare a set of integers \n        Set is = new Set (Types::Integer);  \n        ; \n        // Add some integers to the set \n        print is.add(1); \n        print is.add(2); \n        print is.add(1); \n        // Print a description of the set \n        print is.definitionString(); \n        // Print a description of the set elements \n        print is.toString(); \n        pause; \n    }\n\n### Method elements\n\nReturns the number of elements in the set.\n\n    public int elements()\n\n#### Return Value\n\nThe number of elements in the set.\n\n#### Examples\n\nThe following example packs the contents of a set into a container. The elements method is used to test whether the set has any contents. If there are no contents, a nullNothingnullptrunita null reference (Nothing in Visual Basic) container is returned.\n\n    public static container intSet2Con(Set _intSet) \n    { \n        SetEnumerator se; \n        container     intCon; \n        ; \n        if (!_intSet || !_intSet.elements()) \n        { \n            return conNull(); \n        } \n        se = _intSet.getEnumerator(); \n        while (se.moveNext()) \n        { \n            intCon += se.current(); \n        } \n        return intCon; \n    }\n\n### Method empty\n\nDetermines whether the set is empty.\n\n    public boolean empty()\n\n#### Return Value\n\ntrue if the set is empty; otherwise, false.\n\n#### Remarks\n\nThis is equivalent to (elements() == 0).\n\n#### Examples\n\nThe following example tests whether there are any elements in a set.\n\n    { \n        Set mySet = new Set(Types::Integer); \n        ; \n        // ... \n        if (mySet.empty()) \n        { \n            print \"There are no values in the set\"; \n        } \n    }\n\n### Method equal\n\nDetermines whether a set is identical to the current set.\n\n    public boolean equal(Set set)\n\n#### Parameters\n\nset  \nThe set to be compared with the current set.\n\n#### Return Value\n\ntrue if the set is the same as the current set; otherwise, false.\n\n#### Remarks\n\nFor two sets to be equal, they must have the same type and the same number of elements, and all elements must be the same.\n\n#### Examples\n\nThe following example creates two sets of integers, adds some values to them, and then compares them to see whether the sets are the same.\n\n    { \n        Set is1 = new Set (Types::Integer); \n        Set is2 = new Set (Types::Integer); \n        ; \n        is1.add(1); \n        is1.add(2); \n        is1.add(3); \n        is2.add(2); \n        is2.add(4); \n        if (is1.equal(is2)) \n        { \n            print \"The sets are equal\"; \n            pause; \n        } \n        else \n        { \n             print \"The sets are not equal\"; \n             pause; \n         } \n    }\n\n### Method getEnumerator\n\nCreates an enumerator for a set, which allows you to traverse the set.\n\n    public SetEnumerator getEnumerator()\n\n#### Return Value\n\nA SetEnumerator object for the current set.\n\n#### Examples\n\nThe following example packs the contents of a set into a container. The getEnumerator method is used to create an enumerator for the set. Therefore, that the elements in the set can be traversed and added to the container.\n\n    public static container intSet2Con(Set _intSet) \n    { \n        SetEnumerator se; \n        container     intCon; \n        ; \n        if (!_intSet || !_intSet.elements()) \n        { \n            return conNull(); \n        } \n        se = _intSet.getEnumerator(); \n        while (se.moveNext()) \n        { \n            intCon += se.current(); \n        } \n        return intCon; \n    }\n\n### Method in\n\nDetermines whether a specified element is a member of the set.\n\n    public boolean in(AnyType arg)\n\n#### Parameters\n\narg  \nThe element to check. The type of the element must be the same as the type that was specified for the set.\n\n#### Return Value\n\ntrue if the specified element is found in the set; otherwise, false.\n\n#### Examples\n\nThe following example loads the contents a particular change list in the version control system, if the in method returns false. The changeSet set contains a list of the change list numbers that already have the content loaded.\n\n    public void pageActivated() \n    { \n        SysVersionControlTmpItem contentsAddition; \n        if (!changeSet.in(changes.ChangeNumber)) \n        { \n            startLengthyOperation(); \n            contentsAddition = versioncontrol.getChangeNumberContents( \n                changes.ChangeNumber); \n            while select contentsAddition \n            { \n                contentsItem.data(contentsAddition); \n                contentsItem.insert(); \n            } \n            contents_ds.executeQuery(); \n            changeSet.add(changes.ChangeNumber); \n        } \n        super(); \n    }\n\n### Method pack\n\nSerializes the current instance of the Set class.\n\n    public container pack()\n\n#### Return Value\n\nA container that contains the current instance of the Set class.\n\n#### Remarks\n\nThe container created by this method contains 3 elements before the first element from the set:\n\n-   A version number for the container\n-   An integer that identifies the data type of the set elements\n-   The number of elements in the set\n\nIf the keys or the values are objects, the pack method is called on each object to create a subcontainer. You can create a new set from the resulting container by using the Set::create method.\n\n#### Examples\n\nThe following example creates a set of 10 integers, packs it into a container, and then creates a new set with contents identical to the original one.\n\n    { \n        Set is1, is = new Set (Types::Integer); \n        int i; \n        container packedSet; \n        ; \n        // Create a set containing the first 10 integers. \n        for (i = 1; i <= 10; i++) \n        { \n            is.add(i); \n        } \n        // Pack it down in a container... \n        packedSet = is.pack(); \n        // ... and restore it \n        is1 = Set::create(packedSet); \n        print is1.toString(); \n        pause; \n    }\n\n### Method remove\n\nRemoves an element from the set.\n\n    public boolean remove(AnyType arg)\n\n#### Parameters\n\narg  \nThe element to remove.\n\n#### Return Value\n\ntrue if the element was found and removed; otherwise, false.\n\n#### Examples\n\nThe following example checks whether any of the values in one set, the noConfigs set, are found in a second set, the yesConfigs set. If they are found, they are removed from the yesConfigs set.\n\n    Set             noConfigs; \n    Set             yesConfigs; \n    ConfigId        configId; \n    SetEnumerator   se; \n    ; \n    se = noConfigs.getEnumerator(); \n    while (se.moveNext()) \n    { \n        configId    = se.current(); \n        if (yesConfigs.in(configId)) \n        { \n            yesConfigs.remove(configId); \n        } \n    }\n\n### Method toString\n\nReturns a string describing the contents of the set.\n\n    public str toString()\n\n#### Return Value\n\nA string that describes the contents of the set.\n\n#### Remarks\n\nUse the to get the description of a single element within a set.\n\n#### Examples\n\nThe following example creates a set of strings, and then prints out a description of the set and a description of the set contents.\n\n    { \n        // Declare a set of strings \n        Set names = new Set (Types::String); \n        ; \n        // Add some values to the set. \n        names.add(\"Peter\"); \n        names.add(\"Paul\"); \n        names.add(\"Mary\"); \n        print names.definitionString(); \n        print names.toString(); \n        pause; \n    }\n\n### Method typeId\n\nReturns the type of the values in the set.\n\n    public Types typeId()\n\n#### Return Value\n\nThe type of the values in the set.\n\n#### Remarks\n\nThe type of the constituent elements is determined when the set is created.\n\n#### Examples\n\nThe following example instantiates a new set with the same type as an existing set.\n\n    { \n        Set set1 = new Set(Types::Integer); \n        Set set2; \n       ; \n        set2 = new Set(set1.typeId()); \n        print set2.typeId(); \n        pause; \n    }\n\n### Method xml\n\nReturns an XML string that represents the current object.\n\n    public str xml([int indent])\n\n#### Parameters\n\nindent  \nThe amount of indentation of the returned XML string; optional.\n\n#### Return Value\n\nAn XML string that represents the current object.\n\n#### Remarks\n\nThis method can be overridden to return values that are meaningful for that type.\n\n### Method create\n\nCreates a set from the container obtained from a prior call to the Set.pack method.\n\n    public static Set create(container container)\n\n#### Parameters\n\ncontainer  \nThe container that holds the packed set.\n\n#### Return Value\n\nA set equal to the one that was packed into the container.\n\n#### Remarks\n\nIf the values are objects, the objects must have an unpack method that is called to reestablish their internal state from the container.\n\n#### Examples\n\nThe following example creates a set and packs it into a container. The create method is then used to unpack the container and create a set identical to the original one.\n\n    { \n        Set is1, is = new Set (Types::Integer); \n        int i; \n        container packedSet; \n        ; \n        // Add 10 integers (0 - 9) to the set \n        for (i = 1; i <= 10; i++) \n        { \n            is.add(i); \n        } \n        // Pack the set into a container... \n        packedSet = is.pack(); \n        // ... and restore it \n        is1 = Set::create(packedSet); \n        print is1.toString(); \n        pause; \n    }\n\n### Method createFromXML\n\n    public static Set createFromXML(Object xmlnode)\n\n#### Parameters\n\nxmlnode  \n\n#### Return Value\n\n### Method difference\n\nCalculates and retrieves the set containing the elements from set1 that are not found in set2.\n\n    public static Set difference(Set set1, Set set2)\n\n#### Parameters\n\nset1  \nThe set to check.\n\n<!-- -->\n\nset2  \nThe set to check.\n\n#### Return Value\n\nA set containing the elements from set1 that are not found in set2.\n\n#### Remarks\n\nThe two sets to be compared must be of the same type.\n\n#### Examples\n\nThe following example creates one set that contains the integers 1, 2, and 3, and one set that contains the integers 2 and 4. The difference method is used to create a set that contains the elements in the first set that are not in the second set (1 and 3).\n\n    { \n        Set is = new Set (Types::Integer); \n        Set is2, is1 = new Set (Types::Integer); \n        ; \n        is.add(1); \n        is.add(2); \n        is.add(3); \n        is1.add(2); \n        is1.add(4); \n        is2 = Set::difference(is, is1); \n        // prints \"{1, 3}\" \n        print is2.toString(); \n        pause; \n    }\n\n### Method intersection\n\nCalculates and returns the identical values found in two sets.\n\n    public static Set intersection(Set set1, Set set2)\n\n#### Parameters\n\nset1  \nThe second set to be compared.\n\n<!-- -->\n\nset2  \nThe second set to be compared.\n\n#### Return Value\n\nA set containing the elements found in both sets.\n\n#### Examples\n\nThe following example creates two sets of integers and adds some values to them. It then prints a list of the values that are that is contained in both sets.\n\n    { \n        Set is = new Set (Types::Integer); \n        Set is2, is1 = new Set (Types::Integer); \n        ; \n        is.add(1); \n        is.add(2); \n        is.add(3); \n        is1.add(2); \n        is1.add(4); \n        is2 = Set::intersection(is, is1); \n        // Prints \"{2}\" because 2 is contained in both is and is2. \n        print is2.toString(); \n    }\n\n### Method union\n\nCalculates and retrieves the union of two given sets. This is the set that contains the values found in at least one of the sets.\n\n    public static Set union(Set set1, Set set2)\n\n#### Parameters\n\nset1  \nThe second of the two sets that are compared.\n\n<!-- -->\n\nset2  \nThe second of the two sets that are compared.\n\n#### Return Value\n\nThe set containing elements found in set1 or set2.\n\n#### Remarks\n\nThe two sets that are compared must be of the same type.\n\n#### Examples\n\nThe following example creates two sets of integers and adds some values to them. It then creates a new set that contains all the values that are contained in either of the sets.\n\n    { \n        Set is = new Set (Types::Integer); \n        Set is2, is1 = new Set (Types::Integer); \n        ; \n        is.add(1); \n        is.add(2); \n        is.add(3); \n        is1.add(2); \n        is1.add(4); \n        is2 = Set::union(is, is1); \n        // Prints \"{1, 2, 3, 4}\". \n        print is2.toString(); \n        pause; \n    }\n\n### Method new\n\nCreates a set that can contain elements of the specified type.\n\n    public void new(Types Type)\n\n#### Parameters\n\nType  \nThe type of the elements within the set.\n\n#### Remarks\n\nThe type of the set cannot be changed after the set has been created.\n\n#### Examples\n\nThe following example creates a set of integers and a set of objects.\n\n    { \n        // Create a set of integers. \n        Set is = new Set (Types::Integer); \n        // Create a set of objects. \n        Set os = new Set (Types::Class); \n    }\n\n## Class SetEnumerator\n    class SetEnumerator extends Object\n\nThe SetEnumerator class lets you traverse the elements in a set.\n\n### Remarks\n\nSet enumerators start before the first element in the set. You must call the SetEnumerator.moveNext method to make it point to the first element in the set. As a best practice, use the SetEnumerator class instead of the SetIterator class, because enumerators are automatically created on the same tier as the set when the set.getEnumerator method is called. This helps you avoid a potential problem in code that is marked as Called from, where the iterator and set can be on separate tiers. In addition, set enumerators require less code than set iterators and therefore perform slightly better.\n\n### Examples\n\n### Methods\n\n| Method                        | Description                                                                                                |\n|-------------------------------|------------------------------------------------------------------------------------------------------------|\n| public AnyType current()      | Retrieves the value that is pointed to by the enumerator.                                                  |\n| public str definitionString() | Returns a description of the enumerator.                                                                   |\n| public boolean moveNext()     | Determines whether the enumerator denotes a valid set element.                                             |\n| public str toString()         | Retrieves a description of the contents of the element in the set that the enumerator currently points to. |\n| public void reset()           | Moves the enumerator to the start of the set.                                                              |\n\n### Method current\n\nRetrieves the value that is pointed to by the enumerator.\n\n    public AnyType current()\n\n#### Return Value\n\nThe value that is currently pointed to in the set.\n\n#### Remarks\n\nThe type of the return value is determined by the type of items in the set. You must call the SetEnumerator.moveNext method before you call the current method.\n\n### Method definitionString\n\nReturns a description of the enumerator.\n\n    public str definitionString()\n\n#### Return Value\n\nA string that contains a description of the enumerator.\n\n#### Remarks\n\nFor example, an enumerator for a set of integers would return \"int set enumerator\".\n\n#### Examples\n\nThe following example creates a set and an enumerator for the set. The definitionString method is used to print a description of the enumerator.\n\n    { \n        Set mySet = new Set(Types::Integer); \n        SetEnumerator enumerator; \n        int i; \n        // Add some elements to the set. \n       for (i = 0; i < 10; i++) \n        { \n            mySet.add(i); \n        } \n        // Set the enumerator. \n        enumerator = mySet.getEnumerator(); \n        print enumerator.definitionString(); \n        pause; \n    }\n\n### Method moveNext\n\nDetermines whether the enumerator denotes a valid set element.\n\n    public boolean moveNext()\n\n#### Return Value\n\ntrue if the current position in the set holds a valid element; otherwise, false.\n\n#### Remarks\n\nSet enumerators start before the first element in the set. You must call the moveNext method to make it point to the first element in the set.\n\n### Method toString\n\nRetrieves a description of the contents of the element in the set that the enumerator currently points to.\n\n    public str toString()\n\n#### Return Value\n\nA string that contains a description of the current element in the set.\n\n#### Examples\n\nThe following example creates a set of integers, and then prints the content of the first and second elements in the set.\n\n    { \n        Set mySet = new Set(Types::Integer); \n        SetEnumerator  enumerator; \n        int i; \n         // Add some elements to the set. \n        for (i = 0; i < 10; i++) \n        { \n            mySet.add(i); \n        } \n        // Set the enumerator. \n        enumerator = mySet.getEnumerator(); \n        // Go to the beginning of the enumerator. \n        enumerator.reset(); \n        // Go to the first element in the set. \n        enumerator.moveNext(); \n        // Print the first item in the set. \n        print enumerator.toString(); \n        pause; \n        enumerator.moveNext(); \n        // Print the second element in the set. \n        print enumerator.toString(); \n        pause; \n    }\n\n### Method reset\n\nMoves the enumerator to the start of the set.\n\n    public void reset()\n\n#### Remarks\n\nThe reset method moves the enumerator to the start of the set, in front of the first element in the set. You must call the SetEnumerator.moveNext method to make it point to the first element in the set.\n\n#### Examples\n\nThe following example creates a set and then creates an enumerator for the set. It uses the reset method to move to the start of the set and then uses the moveNext method to move to the first element in the set.\n\n    { \n        Set mySet = new Set(Types::Integer); \n        SetEnumerator  enumerator; \n        int i; \n         // Add some elements to the set. \n        for (i = 0; i < 10; i++) \n        { \n            mySet.add(i); \n        } \n        // Set the enumerator. \n        enumerator = mySet.getEnumerator(); \n        // Go to beginning of enumerator. \n        enumerator.reset(); \n        // Go to the first element in the set. \n        enumerator.moveNext(); \n        // Print the first item in the set. \n        print enumerator.toString(); \n        pause; \n    }\n\n## Class SetIterator\n    class SetIterator extends Object\n\nThe SetIterator class allows you to iterate over the elements in a set.\n\n### Remarks\n\nSet iterators may be viewed as pointers into the sets over which they iterate. Functionality is available to start the iteration, to determine whether more elements are available, and to fetch the element pointed to by the iterator. Newly created set iterators are positioned at the first element in the set. The order in which the elements occur during iteration is defined not by the sequence in which the elements are inserted, but by the ordering of the elements. Elements with lower values appear before elements with higher values. The usual ordering for the types is used. If the constituent elements are objects; however, the addresses of the objects are used to supply the ordering. No specific ordering may consequently be inferred. The addresses of the objects are transient by nature. It is best practice to use the class instead of the SetIterator class. This avoids problems if you are accessing the set on one tier with an iterator on another tier. Set iterators and the sets over which they iterate must be on the same client/server side. If you use SetIterator and code is marked as Called from, it is possible that the set and the iterator will end up on different tiers, and the code will fail. If you use SetEnumerator, the enumerator is automatically created on the same tier as the set. Also, to move to the next item in a set, you must explicitly call the more and next methods if you are using a set iterator. If you use SetEnumerator, you only have to call moveNext method.\n\n### Examples\n\nThe following example creates a set of integers and then adds four values to it. It then iterates through the set that is printing out information about each set element.\n\n        Set s1 = new Set (Types::Integer); \n        int theElement; \n        SetIterator it; \n        ; \n        // Add some elements. \n        s1.add(3); \n        s1.add(4); \n        s1.add(13); \n        s1.add(1); \n        // Start a traversal of the elements in the set. \n        it = new SetIterator(s1); \n        // Prints \"(begin)[1]\". \n        print it.toString(); \n        // The elements are fetched in the order: 1, 3, 4, 13. \n        while (it.more()) \n        { \n            theElement = it.value(); \n            print theElement; \n             // Fetch the next element. \n            it.next(); \n        } \n        pause; \n    }\n\n### Methods\n\n| Method                        | Description                                                                                            |\n|-------------------------------|--------------------------------------------------------------------------------------------------------|\n| public str definitionString() | Returns a textual representation of the type of the iterator.                                          |\n| public boolean more()         | Determines whether the iterator denotes a valid set element.                                           |\n| public str toString()         | Returns a textual representation of the current element in the set that is pointed to by the iterator. |\n| public AnyType value()        | Retrieves the value that the iterator is pointing to.                                                  |\n| public void next()            | Moves the iterator to the next element.                                                                |\n| public void new(Set set)      | Creates a new iterator for a set.                                                                      |\n| public void begin()           | Moves the iterator to the start of the set.                                                            |\n| public void delete()          | Removes the element that is pointed to by the iterator of the set.                                     |\n| public void end()             | Moves the iterator past the last element in the set.                                                   |\n\n### Method definitionString\n\nReturns a textual representation of the type of the iterator.\n\n    public str definitionString()\n\n#### Return Value\n\nA string that indicates the type of the iterator.\n\n### Method more\n\nDetermines whether the iterator denotes a valid set element.\n\n    public boolean more()\n\n#### Return Value\n\ntrue if the iterator denotes a valid element; otherwise, false.\n\n#### Remarks\n\nAttempting to access an element that is pointed to by an iterator when this method returns false will result in an error. This method will check only whether the iterator points to a valid element. It will not check whether there are more elements in the set.\n\n#### Examples\n\nThe following example uses the SetIterator.more method to check whether there are more elements in the set before it runs through the while loop, which deletes all the odd elements from the set.\n\n    { \n        Set iset = new Set (Types::Integer); \n        SetIterator it; \n        int i; \n        ; \n        for (i = 1; i <= 10; i++) \n        { \n            iset.add(i); \n        } \n        // Delete all odd elements \n        it = new SetIterator(iset); \n        while (it.more()) \n        { \n            if (it.value() mod 2 != 0) \n            { \n                // The value is odd. Delete and skip to next element. \n                it.delete(); \n            } \n            else \n            { \n                it.next(); \n            } \n        } \n        print iset.toString(); \n        pause; \n    }\n\n### Method toString\n\nReturns a textual representation of the current element in the set that is pointed to by the iterator.\n\n    public str toString()\n\n#### Return Value\n\nA string that is the textual representation of the current element in the set.\n\n#### Remarks\n\nIf the iterator points to the first element in the set, the string will contain an indication of this, in the following format: \"(begin)\\[value\\]\" If the iterator does not point to an element (that is, if more() returns false), the string returned is: \"(end)\" If the iterator points to a value the string is: \"\\[value\\]\" where value is a string representation of the element value.\n\n#### Examples\n\nThe following example uses the SetIterator.toString method to print a description of the value in the set that the iterator points to before it starts traversing the set.\n\n    { \n        Set s1 = new Set (Types::Integer); \n        int theElement; \n        SetIterator it; \n        // Add some elements \n        s1.add(3); \n        s1.add(4); \n        s1.add(13); \n        s1.add(1);  \n        // Start a traversal of the elements in the set \n        it = new SetIterator(s1); \n        // The elements are fetched in the order: 1, 3, 4, 13 \n        print it.toString(); // Prints \"(begin)[1]\" \n        while (it.more()) \n        { \n            theElement = it.value(); \n            print theElement; \n            // Fetch the next element \n            it.next(); \n        } \n        pause; \n    }\n\n### Method value\n\nRetrieves the value that the iterator is pointing to.\n\n    public AnyType value()\n\n#### Return Value\n\nThe value denoted by the iterator.\n\n#### Remarks\n\nUse SetIterator.more to check whether an element exists before trying to retrieve the key value of the set element.\n\n#### Examples\n\nThe following example uses the SetIterator.value method to print the value of the current item in the set.\n\n    { \n        Set s1 = new Set (Types::Integer); \n        SetIterator it; \n        // Add some elements \n        s1.add(3); \n        s1.add(4); \n        s1.add(13); \n        s1.add(1);  \n        // Start a traversal of the elements in the set \n        it = new SetIterator(s1); \n        // Prints \"(begin)[1]\" \n        print it.toString();  \n        // The elements are fetched in the order: 1, 3, 4, 13 \n        while (it.more()) \n        { \n            print it.value(); \n            // Fetch the next element \n            it.next(); \n        } \n        pause; \n    }\n\n### Method next\n\nMoves the iterator to the next element.\n\n    public void next()\n\n#### Remarks\n\nUse SetIterator.more to determine whether the iterator points to a valid element.\n\n#### Examples\n\nThe following example uses the SetIterator.next method to move the iterator to the next element in the set, before testing whether there is another element, and if there is another element, adding the value to a container.\n\n    static public void saveSequence(classId _classId, Set _sequence) \n    { \n        SysCheckListItemTable sysCheckListItemTable; \n        SetIterator           si; \n        container             con = connull(); \n        if (_sequence) \n        { \n            si = new SetIterator(_sequence); \n            si.begin(); \n            while (si.more()) \n            { \n                 con += si.value(); \n                 si.next(); \n            } \n        } \n        //... \n    }\n\n### Method new\n\nCreates a new iterator for a set.\n\n    public void new(Set set)\n\n#### Parameters\n\nset  \nThe set to iterate over.\n\n#### Remarks\n\nThe iterator is positioned at the first value in the set, if the set is not empty.\n\n#### Examples\n\nThe following example creates a set of integers and then creates an iterator for that set\n\n    Set s1 = new Set (Types::Integer); \n    SetIterator it; \n    it = new SetIterator(s1);\n\n### Method begin\n\nMoves the iterator to the start of the set.\n\n    public void begin()\n\n#### Remarks\n\nNewly created set iterators are positioned at the first element in the set. Typically, you do not need to call the begin method before you start to iterate through the set; you need to do that only if you want to reset the pointer later on.\n\n#### Examples\n\nThe following example returns set of class IDs of the classes that implement the specified interface, that is, the \\_id class. An iterator is used to remove classes from the set if they are superclasses, and the \\_onlyLeafClasses parameter is set to true. The begin method is used to reset the iterator after the superclasses have been removed from the set.\n\n    public static Set getImplements( \n        classId _id,  \n        boolean _onlyLeafClasses = true) \n    { \n        Dictionary dictionary = new Dictionary(); \n        SysDictClass sysDictClass; \n        boolean removed; \n        Set set = new Set(Types::Integer); \n        SetIterator setIterator = new SetIterator(set); \n        int i; \n        for (i=1;i<=dictionary.classCnt();i++) \n        { \n            sysDictClass = new SysDictClass(dictionary.classCnt2Id(i)); \n            if (sysDictClass.isImplementing(_id)) \n            { \n                set.add(sysDictClass.id()); \n            } \n        } \n        //No superclasses included in return set \n        if (_onlyLeafClasses) \n        { \n            // begin method not needed here; only for clarity \n            setIterator.begin();  \n            while (setIterator.more()) \n            { \n                removed = false; \n                sysDictClass = new SysDictClass(setIterator.value()); \n                while (sysDictClass.extend()) \n                { \n                    removed = removed | set.remove(sysDictClass.extend()); \n                    sysDictClass = new SysDictClass(sysDictClass.extend()); \n                } \n                if (removed) \n                { \n                    // Restart search \n                    setIterator.begin();  \n                } \n                else \n                { \n                    setIterator.next(); \n                } \n            } \n        } \n        return set; \n    }\n\n### Method delete\n\nRemoves the element that is pointed to by the iterator of the set.\n\n    public void delete()\n\n#### Remarks\n\nThe iterator will point to the next element after calling this method.\n\n#### Examples\n\nThe following example deletes all the odd elements from the set.\n\n    { \n        Set iset = new Set (Types::Integer); \n        SetIterator it; \n        int i; \n        for (i = 1; i <= 10; i++) \n        { \n            iset.add(i); \n        } \n        // Delete all odd elements \n        it = new SetIterator(iset); \n        while (it.more()) \n        { \n            if (it.value() mod 2 != 0) \n            { \n                // The value is odd. Delete and skip to next element. \n                it.delete(); \n            } \n            else \n            { \n                it.next(); \n            } \n        } \n        print iset.toString(); \n        pause; \n    }\n\n### Method end\n\nMoves the iterator past the last element in the set.\n\n    public void end()\n\n#### Remarks\n\nAfter executing this method, the more method will return false.\n\n## Class SkipAOSValidationPermission\n    class SkipAOSValidationPermission extends CodeAccessPermission\n\nThe SkipAOSValidationPermission class controls the ability to skip AOS validation and check permissions for specific APIs.\n\n### Remarks\n\nFor a list of all protected APIs, see Secured APIs. You must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission.demand method is called on before the protected API is executed. Call a method on the server tier from one of the following: A server static method –or– A class instance method that is set to run on the server by using the RunOn class property.\n\n### Examples\n\n### Methods\n\n| Method                                                 | Description                                                                                                         |\n|--------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------|\n| public CodeAccessPermission copy()                     | Creates and returns a copy of a permission class object.                                                            |\n| public boolean isSubsetOf(CodeAccessPermission target) | Determines whether a current permission is a subset of the specified permission when overridden by a derived class. |\n| public void new()                                      | Initializes a new instance of the SkipAOSValidationPermission class.                                                |\n\n### Method copy\n\nCreates and returns a copy of a permission class object.\n\n    public CodeAccessPermission copy()\n\n#### Return Value\n\nA copy of the derived class object.\n\n#### Remarks\n\nYou can override this method as part of the process of making an API more secure. For more information, see .\n\n### Method isSubsetOf\n\nDetermines whether a current permission is a subset of the specified permission when overridden by a derived class.\n\n    public boolean isSubsetOf(CodeAccessPermission target)\n\n#### Parameters\n\ntarget  \nA CodeAccessPermission class object.\n\n#### Return Value\n\ntrue if a current permission is a subset of a specified permission; otherwise, false.\n\n#### Remarks\n\nYou can override the method as part of the process of making an API more secure. For more information, see .\n\n### Method new\n\nInitializes a new instance of the SkipAOSValidationPermission class.\n\n    public void new()\n\n#### Examples\n\nThe following code example demonstrates how to create an instance of the SkipAOSValidationPermission class.\n\n    server static void main(Args args) \n    { \n        SkipAOSValidationPermission perm; \n        ; \n        perm = new SkipAOSValidationPermission(); \n    }\n\n## Class SqlDataDictionary\n    class SqlDataDictionary extends Object\n\nThe SqlDataDictionary class provides a collection of methods for data dictionary maintenance.\n\n### Remarks\n\nThis API has a built-in authorization check that is invoked at run time. Calls to members of the SQLDataDictionary class by users without access to the development security key (SysDevelopment) results in an exception.\n\n### Examples\n\nThe following example checks whether the UserInfo table exists in the database.\n\n    server static public void Main(Args _args) \n    { \n        SqlDataDictionary sqlDict; \n        boolean b; \n        sqlDict = new SqlDataDictionary(); \n        if (sqlDict) \n        { \n            b = sqlDict.tableExist(\"USERINFO\"); \n            print b; \n            pause; \n        } \n    }\n\n### Methods\n\n| Method                                                                                                               | Description                                                                                                                   |\n|----------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|\n| public int indexCreate(\\[TableId tableId\\], \\[IndexId indexId\\])                                                     | Creates the indexes of a table in the SQL database. You can also use this method to re-create indexes. |\n| public str indexCreateDDL(TableId tableId)                                                                           | Generates and returns the SQL statements needed to create the indexes of a table.                      |\n| public int indexDrop(\\[TableId tableId\\], \\[IndexId indexId\\], \\[boolean onlyNonUnique\\])                            | Drops the indexes of a table in the SQL database.                                                      |\n| public str name(str bmsname, \\[FieldId fieldId\\], \\[int arrayindex\\])                                                | Translates any object name into a valid SQL database object-name; that is, valid for the database currently connected.        |\n| public int tableCreate(\\[boolean indexes\\], \\[TableId tableId\\])                                                     | Creates one or more  tables in the SQL database. Also, provides an option to create for index.           |\n| public str tableCreateDDL(TableId tableId)                                                                           | Generates and returns the SQL statement to create a table.                                             |\n| public int tableDrop(TableId tableId, \\[boolean prompt\\_before\\_drop\\])                                              | Drops the  table in the SQL database.                                                                    |\n| public str tableDropDDL(TableId tableId)                                                                             | Generates and returns the SQL statement to drop a table.                                               |\n| public boolean tableEmpty(TableId tableId, \\[str company\\], \\[boolean not\\_this\\_company\\])                          | Returns true if table is not empty; otherwise false.                                                                          |\n| public boolean tableExist(str sqltablename, \\[boolean use\\_within\\_transaction\\])                                    | Returns true if table exists; otherwise false.                                                                                |\n| public int tableMetaData(TableId tableId)                                                                            | Fills the SqlDescribe table with data dictionary meta data.                                                                   |\n| public int tableReindex(\\[TableId tableId\\], \\[IndexId indexId\\])                                                    | Updates index for the table.                                                                                                  |\n| public int tableSynchronize(TableId tableId, \\[boolean update\\_dict\\_info\\_only\\], \\[boolean check\\_indexes\\])       | Synchronizes the  table and the table of the SQL database.                                               |\n| public int tableTruncate(TableId tableId, \\[boolean prompt\\_before\\_truncate\\], \\[boolean truncate\\_system\\_table\\]) | Truncates the  table.                                                                                    |\n| public str tableTruncateDDL(TableId tableId)                                                                         | Generates and returns a SQL statement to truncate a table.                                             |\n| ::public static int synchronize(\\[boolean synchronize\\_all\\])                                                        | Synchronizes the  data dictionary and the data dictionary of the SQL database.                           |\n| public void new()                                                                                                    | Initializes a new instance of the SqlDataDictionary class.                                                                    |\n| public void tableDelete(TableId tableId)                                                                             | Deletes the  table in the SQL database.                                                                  |\n\n### Method indexCreate\n\nCreates the indexes of a table in the SQL database. You can also use this method to re-create indexes.\n\n    public int indexCreate([TableId tableId], [IndexId indexId])\n\n#### Parameters\n\ntableId  \nThe index handle (0 for all); optional.\n\n<!-- -->\n\nindexId  \nThe index handle (0 for all); optional.\n\n#### Return Value\n\n0 if the method succeeds.\n\n#### Remarks\n\nThis method can be used to re-create indexes. Use 0 for the parameters to indicate all tables or indexes.\n\n#### Examples\n\n    { \n        SqlDataDictionary DD = new SqlDataDictionary(); \n        DD.indexCreate(TableName2Id(\"Address\")); \n    }\n\n### Method indexCreateDDL\n\nGenerates and returns the SQL statements needed to create the indexes of a table.\n\n    public str indexCreateDDL(TableId tableId)\n\n#### Parameters\n\ntableId  \nThe table handle that the index should be created for.\n\n#### Return Value\n\nReturns SQL statements to create the indexes of the  table.\n\n### Method indexDrop\n\nDrops the indexes of a table in the SQL database.\n\n    public int indexDrop([TableId tableId], [IndexId indexId], [boolean onlyNonUnique])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nindexId  \n\n<!-- -->\n\nonlyNonUnique  \n\n#### Return Value\n\nZero if the method succeeds.\n\n#### Remarks\n\nUse 0 for the parameters to indicate all tables or indexes.\n\n#### Examples\n\n    { \n        SqlDataDictionary DD = new SqlDataDictionary(); \n        DD.indexDrop(TableName2Id(\"Address\")); \n    }\n\n### Method name\n\nTranslates any object name into a valid SQL database object-name; that is, valid for the database currently connected.\n\n    public str name(str bmsname, [FieldId fieldId], [int arrayindex])\n\n#### Parameters\n\nbmsname  \nA field index (0 for not applicable), that is, an array field's arrayindex'th entry, such as Dimension\\[2\\]; optional.\n\n<!-- -->\n\nfieldId  \nA field index (0 for not applicable), that is, an array field's arrayindex'th entry, such as Dimension\\[2\\]; optional.\n\n<!-- -->\n\narrayindex  \nA field index (0 for not applicable), that is, an array field's arrayindex'th entry, such as Dimension\\[2\\]; optional.\n\n#### Return Value\n\nThe valid object name.\n\n#### Remarks\n\nBecause names may be truncated, a unique object identifier may be supplied. Also, a third parameter enables the method to return discrete SQL field names for  array fields.\n\n### Method tableCreate\n\nCreates one or more  tables in the SQL database. Also, provides an option to create for index.\n\n    public int tableCreate([boolean indexes], [TableId tableId])\n\n#### Parameters\n\nindexes  \nThe table handle (0 for all); optional.\n\n<!-- -->\n\ntableId  \nThe table handle (0 for all); optional.\n\n#### Return Value\n\nZero if the method succeeds.\n\n#### Remarks\n\nUsed for low-level maintenance only.\n\n#### Examples\n\n    { \n        SqlDataDictionary DD = new SqlDataDictionary(); \n        DD.tableCreate(TableName2Id(\"Address\")); \n    }\n\n### Method tableCreateDDL\n\nGenerates and returns the SQL statement to create a table.\n\n    public str tableCreateDDL(TableId tableId)\n\n#### Parameters\n\ntableId  \nThe table handle of the table to be created.\n\n#### Return Value\n\nThe SQL statement to create a table.\n\n### Method tableDrop\n\nDrops the  table in the SQL database.\n\n    public int tableDrop(TableId tableId, [boolean prompt_before_drop])\n\n#### Parameters\n\ntableId  \nA boolean flag that determines whether to ask user before dropping the table; optional. By default, true.\n\n<!-- -->\n\nprompt\\_before\\_drop  \nA boolean flag that determines whether to ask user before dropping the table; optional. By default, true.\n\n#### Return Value\n\nZero if the method succeeds.\n\n### Method tableDropDDL\n\nGenerates and returns the SQL statement to drop a table.\n\n    public str tableDropDDL(TableId tableId)\n\n#### Parameters\n\ntableId  \nThe table to be dropped.\n\n#### Return Value\n\nThe SQL statement that drops the specified  table.\n\n### Method tableEmpty\n\nReturns true if table is not empty; otherwise false.\n\n    public boolean tableEmpty(TableId tableId, [str company], [boolean not_this_company])\n\n#### Parameters\n\ntableId  \nIf true exludes records that belongs to the company from the query; optional. By default, false.\n\n<!-- -->\n\ncompany  \nIf true exludes records that belongs to the company from the query; optional. By default, false.\n\n<!-- -->\n\nnot\\_this\\_company  \nIf true exludes records that belongs to the company from the query; optional. By default, false.\n\n#### Return Value\n\ntrue if the table empty; otherwise, false.\n\n### Method tableExist\n\nReturns true if table exists; otherwise false.\n\n    public boolean tableExist(str sqltablename, [boolean use_within_transaction])\n\n#### Parameters\n\nsqltablename  \nA boolean flag that determines whether transactions are to used; optional. By default, false.\n\n<!-- -->\n\nuse\\_within\\_transaction  \nA boolean flag that determines whether transactions are to used; optional. By default, false.\n\n#### Return Value\n\ntrue if the table exists; otherwise, false.\n\n### Method tableMetaData\n\nFills the SqlDescribe table with data dictionary meta data.\n\n    public int tableMetaData(TableId tableId)\n\n#### Parameters\n\ntableId  \nThe table handle.\n\n#### Return Value\n\ntrue if the method succeeds.\n\n### Method tableReindex\n\nUpdates index for the table.\n\n    public int tableReindex([TableId tableId], [IndexId indexId])\n\n#### Parameters\n\ntableId  \nThe index handle (0 for all); optional. By default, 0.\n\n<!-- -->\n\nindexId  \nThe index handle (0 for all); optional. By default, 0.\n\n#### Return Value\n\nZero if the method succeeds.\n\n### Method tableSynchronize\n\nSynchronizes the  table and the table of the SQL database.\n\n    public int tableSynchronize(TableId tableId, [boolean update_dict_info_only], [boolean check_indexes])\n\n#### Parameters\n\ntableId  \nWhen set forces reindex of the table indexes; optional. By default, true.\n\n<!-- -->\n\nupdate\\_dict\\_info\\_only  \nWhen set forces reindex of the table indexes; optional. By default, true.\n\n<!-- -->\n\ncheck\\_indexes  \nWhen set forces reindex of the table indexes; optional. By default, true.\n\n#### Return Value\n\ntrue if the method succeeds.\n\n### Method tableTruncate\n\nTruncates the  table.\n\n    public int tableTruncate(TableId tableId, [boolean prompt_before_truncate], [boolean truncate_system_table])\n\n#### Parameters\n\ntableId  \nA boolean flag that determines whether to truncate table in case if selected table is system; optional. By default, false.\n\n<!-- -->\n\nprompt\\_before\\_truncate  \nA boolean flag that determines whether to truncate table in case if selected table is system; optional. By default, false.\n\n<!-- -->\n\ntruncate\\_system\\_table  \nA boolean flag that determines whether to truncate table in case if selected table is system; optional. By default, false.\n\n#### Return Value\n\nZero if the method succeeds.\n\n### Method tableTruncateDDL\n\nGenerates and returns a SQL statement to truncate a table.\n\n    public str tableTruncateDDL(TableId tableId)\n\n#### Parameters\n\ntableId  \nThe table handle of the table to be truncated.\n\n#### Return Value\n\nThe SQL statement to truncate the table.\n\n### Method synchronize\n\nSynchronizes the  data dictionary and the data dictionary of the SQL database.\n\n    public static int synchronize([boolean synchronize_all])\n\n#### Parameters\n\nsynchronize\\_all  \nA boolean flag that determines whether to synchronize all tables; optional. If true, this method synchronizes all tables (instead of only those marked dirty by the  kernel). By default, false.\n\n#### Return Value\n\ntrue if synchronization was successful; otherwise false.\n\n### Method new\n\nInitializes a new instance of the SqlDataDictionary class.\n\n    public void new()\n\n### Method tableDelete\n\nDeletes the  table in the SQL database.\n\n    public void tableDelete(TableId tableId)\n\n#### Parameters\n\ntableId  \n\n## Class SqlDataDictionaryPermission\n    class SqlDataDictionaryPermission extends CodeAccessPermission\n\nThe SqlDataDictionaryPermission class controls the ability to access the methods on the and is designed to check permissions for specific APIs. For a list of all protected APIs, see Secured APIs.\n\n### Remarks\n\nYou must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission::demand method is called on before the protected API is executed. Call a method on the server tier from one of the following:\n\n-   A server static method\n-   A class instance method that is set to run on the server by using the RunOn class property.\n\n### Examples\n\nThe following example deletes data from the xRefNames table. The assert method is called to declare that the code can then instantiate the AsciiIo class that is used to read and write data to a file.\n\n    { \n        DictTable dictTable = new DictTable(tablenum(xRefNames)); \n        str sqlTableName; \n        SqlDataDictionary sqlTable; \n        if (dictTable && dictTable.enabled()) \n        { \n            sqlTableName = dictTable.name(DbBackend::Sql); \n            sqlTable = new SqlDataDictionary(); \n            // Try to truncate only if the table does exist \n            // in the SQL database. \n            if (sqlTable.tableExist(sqlTableName)) \n            { \n                new SqlDataDictionaryPermission( \n                    methodstr(SqlDataDictionary, tableTruncate)).assert(); \n                sqlTable.tableTruncate(tablenum(xRefNames)); \n                CodeAccessPermission::revertAssert(); \n            } \n        } \n    }\n\n### Methods\n\n| Method                                                 | Description                                                                      |\n|--------------------------------------------------------|----------------------------------------------------------------------------------|\n| public CodeAccessPermission copy()                     | Creates and returns a copy of the current permission class object.               |\n| public boolean isSubsetOf(CodeAccessPermission target) | Determines whether a current permission is a subset of the specified permission. |\n| public void new(IdentifierName methodName)             | Creates a new instance of the SQLDataDictionaryPermission class.                 |\n\n### Method copy\n\nCreates and returns a copy of the current permission class object.\n\n    public CodeAccessPermission copy()\n\n#### Return Value\n\nA copy of the current permission object.\n\n#### Remarks\n\nYou override this method when you derive a class from the CodeAccessPermission class. For more information, see .\n\n### Method isSubsetOf\n\nDetermines whether a current permission is a subset of the specified permission.\n\n    public boolean isSubsetOf(CodeAccessPermission target)\n\n#### Parameters\n\ntarget  \nA CodeAccessPermission class object.\n\n#### Return Value\n\ntrue if a current permission is a subset of a specified permission; otherwise, false.\n\n#### Remarks\n\nYou override this method when you derive a class from the CodeAccessPermission class. For more information, see .\n\n### Method new\n\nCreates a new instance of the SQLDataDictionaryPermission class.\n\n    public void new(IdentifierName methodName)\n\n#### Parameters\n\nmethodName  \nThe string that represents the name of the method to be called.\n\n#### Examples\n\nThe following code example deletes the data in the xRefNames table.\n\n    server static void main(Args _args) \n    { \n        DictTable dictTable = new DictTable(tablenum(xRefNames)); \n        str sqlTableName; \n        SqlDataDictionary sqlTable; \n        if (dictTable && dictTable.enabled()) \n        { \n            sqlTableName = dictTable.name(DbBackend::Sql); \n            sqlTable = new SqlDataDictionary(); \n            // Only try to truncate if the table does exist \n            // in the SQL database \n            if (sqlTable.tableExist(sqlTableName)) \n            { \n                new SqlDataDictionaryPermission( \n                    methodstr(SqlDataDictionary, tableTruncate)).assert(); \n                sqlTable.tableTruncate(tablenum(xRefNames)); \n                CodeAccessPermission::revertAssert(); \n            } \n        } \n    }\n\n## Class SqlStatementExecutePermission\n    class SqlStatementExecutePermission extends CodeAccessPermission\n\nControls the ability to use SQL.\n\n### Remarks\n\nThis class is designed to check permissions for specific APIs. For a list of all protected APIs, see Secured APIs. You must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission::demand method is called on before the protected API is executed. Call a method on the server tier from one of the following:\n\n-   A server static method –or–\n-   A class instance method that is set to run on the server by using the RunOn class property\n\n### Examples\n\nThis example performs an SQL query on the CustTable table, which runs on the server. The result of the query is stored in the \\_resultSet object. The assert method is called to declare that the code can then instantiate the AsciiIo class that is used to read and write data to a file.\n\n    server static void main(Args _args) \n    { \n        DictTable  _dictTable; \n        Connection _connection; \n        Statement  _statement; \n        str        _sql; \n        ResultSet  _resultSet; \n        SqlStatementExecutePermission _perm; \n        _dictTable = new DictTable(tableNum(CustTable)); \n        if (_dictTable != null) \n            { \n               _connection = new Connection(); \n               _sql = strfmt( \"SELECT * FROM %1\", _dictTable.name(DbBackend::Sql) ); \n               _perm = new SqlStatementExecutePermission(_sql); \n               // Check for permission to use the _statement. \n               _perm.assert(); \n               _statement = _connection.createStatement(); \n               _resultSet = _statement.executeQuery(_sql); \n               // End the scope of the assert call. \n               CodeAccessPermission::revertAssert(); \n            } \n    }\n\n### Methods\n\n| Method                                                 | Description                                                                      |\n|--------------------------------------------------------|----------------------------------------------------------------------------------|\n| public CodeAccessPermission copy()                     | Creates and returns a copy of the current permission class object.               |\n| public boolean isSubsetOf(CodeAccessPermission target) | Determines whether a current permission is a subset of the specified permission. |\n| public void new(str sqlStatement)                      | Creates a new instance of the SQLStatementExecutePermission class.               |\n\n### Method copy\n\nCreates and returns a copy of the current permission class object.\n\n    public CodeAccessPermission copy()\n\n#### Return Value\n\nA copy of the current permission object.\n\n#### Remarks\n\nYou override this method when you derive a class from the CodeAccessPermission class. For more information, see .\n\n### Method isSubsetOf\n\nDetermines whether a current permission is a subset of the specified permission.\n\n    public boolean isSubsetOf(CodeAccessPermission target)\n\n#### Parameters\n\ntarget  \nA CodeAccessPermission class object.\n\n#### Return Value\n\ntrue if a current permission is a subset of a specified permission; otherwise false.\n\n#### Remarks\n\nYou override this method when you derive a class from the CodeAccessPermission class. For more information, see .\n\n### Method new\n\nCreates a new instance of the SQLStatementExecutePermission class.\n\n    public void new(str sqlStatement)\n\n#### Parameters\n\nsqlStatement  \nThe SQL string to be executed.\n\n#### Examples\n\nThe following example performs an SQL query on the CustTable table, which runs on the server. The result of the query is stored in the resultSet object.\n\n    server static void main(Args _args) \n    { \n        DictTable  dictTable; \n        Connection connection; \n        Statement  statement; \n        str        sql; \n        ResultSet  resultSet; \n        SqlStatementExecutePermission perm; \n        dictTable = new DictTable(tableNum(CustTable)); \n        if (dictTable != null) \n            { \n               connection = new Connection(); \n               sql = strfmt( \"SELECT * FROM %1\", dictTable.name(DbBackend::Sql) ); \n               //Instantiate the permission class \n               perm = new SqlStatementExecutePermission(sql); \n               //check for permission to use statement \n               perm.assert(); \n               statement = connection.createStatement(); \n               resultSet = statement.executeQuery(sql); \n               //end the scope of the assert call \n               CodeAccessPermission::revertAssert(); \n            } \n    }\n\n## Class SqlSyncPending\n    class SqlSyncPending extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                               | Description                                             |\n|------------------------------------------------------|---------------------------------------------------------|\n| public ConfigurationKeyId configurationKeyTouched()  |                                                         |\n| public boolean databaseTouched(\\[boolean newValue\\]) |                                                         |\n| public ExtendedTypeId extendedDataTypeTouched()      |                                                         |\n| public TableId indexesTouched()                      |                                                         |\n| public TableId relationTouched()                     |                                                         |\n| public TableId tableDeleted()                        |                                                         |\n| public TableId tableTouched()                        |                                                         |\n| public void new()                                    | Initializes a new instance of the SqlSyncPending class. |\n\n### Method configurationKeyTouched\n\n    public ConfigurationKeyId configurationKeyTouched()\n\n#### Return Value\n\n### Method databaseTouched\n\n    public boolean databaseTouched([boolean newValue])\n\n#### Parameters\n\nnewValue  \n\n#### Return Value\n\n### Method extendedDataTypeTouched\n\n    public ExtendedTypeId extendedDataTypeTouched()\n\n#### Return Value\n\n### Method indexesTouched\n\n    public TableId indexesTouched()\n\n#### Return Value\n\n### Method relationTouched\n\n    public TableId relationTouched()\n\n#### Return Value\n\n### Method tableDeleted\n\n    public TableId tableDeleted()\n\n#### Return Value\n\n### Method tableTouched\n\n    public TableId tableTouched()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the SqlSyncPending class.\n\n    public void new()\n\n## Class SqlSystem\n    class SqlSystem extends Object\n\nThe SqlSystem class holds information about the active SQL system, typically login information.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                   | Description                                                                                             |\n|------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------|\n| public LoginProperty createLoginProperty()                                                                                               | Creates the login property to the  database.                                       |\n| public DatabaseId databaseId()                                                                                                           | Returns the  ID for the database vendor used as the SQL database backend.          |\n| public str databaseName()                                                                                                                | Returns the name of the database vendor used as the SQL database backend.                               |\n| public boolean dbRequestedUnicodeEnabled()                                                                                               | Retrieves the value that indicates if Unicode is supported in the database.                             |\n| public str filenameDeadlocks(str Userid)                                                                                                 | Retrieves the name of the user specific deadlocks trace logfile.                                        |\n| public str filenameQuerytimelimit(str Userid)                                                                                            | Retrieves the name of the user specific querytime limit logfile.                                        |\n| public str filenameSqlTrace(str Userid)                                                                                                  | Retrieves the filename of the SQL trace log file for specific user.                                     |\n| public str filenameWarnings(str Userid)                                                                                                  | Retrieves the name of the user specific warnings log file.                                              |\n| public str logfileName(\\[boolean fromCommandline\\])                                                                                      | Retrieves the name of the standard  SQL error log file.                            |\n| public str loginConnectString()                                                                                                          | Retrieves the full ODBC connection string.                                                              |\n| public str loginDatabase()                                                                                                               | Retrieves the name of the database currently connected to.                                              |\n| public str loginDSN()                                                                                                                    | Retrieves the open database connectivity (ODBC) data source name (DSN) used to connect to the database. |\n| public str loginName()                                                                                                                   | Retrieves the user name that is used to log-in to the database.                                         |\n| public str loginServer()                                                                                                                 | Retrieves the name of the database server currently connected to.                                       |\n| public str monocaseFmt(\\[TableId tableId\\], \\[FieldId fieldId\\], \\[boolean includingFieldName\\], \\[boolean considerSystemVariables\\])    | Retrieves the format string that is used for casting the string to one case (e.g. \"NLS\\_LOWER(%1)\").    |\n| public str sqlLiteral(AnyType data, \\[boolean forWhereClause\\], \\[boolean likeOperand\\], \\[boolean rightJustify\\], \\[int stringLength\\]) | Formats the input AX datatype to correct SQL type.                                                      |\n| ::public static boolean clusteredIndexes()                                                                                               |                                                                                                         |\n| ::public static str databaseBackendDesc()                                                                                                |                                                                                                         |\n| ::public static DatabaseId databaseBackendId()                                                                                           |                                                                                                         |\n| ::public static str databaseBackendName()                                                                                                |                                                                                                         |\n| ::public static DatabaseCLI databaseCallLevelInterface()                                                                                 |                                                                                                         |\n| ::public static int databaseHints(\\[int new\\_hint\\_value\\])                                                                              |                                                                                                         |\n| ::public static boolean functionalIndexes()                                                                                              |                                                                                                         |\n| ::public static str modelDatabaseBackendName()                                                                                           | Retrieves the name of the model database AOS currently connected to.                                    |\n| ::public static str managedConnectionString()                                                                                            |                                                                                                         |\n| public void new()                                                                                                                        | Initializes a new instance of the SqlSystem class.                                                      |\n| public void logfileWrite(str Text)                                                                                                       | Writes a text string into the standard  SQL error logfile.                         |\n\n### Method createLoginProperty\n\nCreates the login property to the  database.\n\n    public LoginProperty createLoginProperty()\n\n#### Return Value\n\nThe login property that was created.\n\n### Method databaseId\n\nReturns the  ID for the database vendor used as the SQL database backend.\n\n    public DatabaseId databaseId()\n\n#### Return Value\n\nThe  ID for the database vendor used as the SQL database backend.\n\n#### Remarks\n\nIf the database vendor cannot be determined for any reason, the enumeration DbBackend::UNKNOWN is returned.\n\n### Method databaseName\n\nReturns the name of the database vendor used as the SQL database backend.\n\n    public str databaseName()\n\n#### Return Value\n\nThe name of the database vendor used as the SQL database backend.\n\n### Method dbRequestedUnicodeEnabled\n\nRetrieves the value that indicates if Unicode is supported in the database.\n\n    public boolean dbRequestedUnicodeEnabled()\n\n#### Return Value\n\nThe value that indicates if Unicode is suported in the database.\n\n### Method filenameDeadlocks\n\nRetrieves the name of the user specific deadlocks trace logfile.\n\n    public str filenameDeadlocks(str Userid)\n\n#### Parameters\n\nUserid  \n\n#### Return Value\n\nThe name of the user specific to deadlocks trace log file.\n\n### Method filenameQuerytimelimit\n\nRetrieves the name of the user specific querytime limit logfile.\n\n    public str filenameQuerytimelimit(str Userid)\n\n#### Parameters\n\nUserid  \n\n#### Return Value\n\nThe name of the user specific querytime limit logfile.\n\n### Method filenameSqlTrace\n\nRetrieves the filename of the SQL trace log file for specific user.\n\n    public str filenameSqlTrace(str Userid)\n\n#### Parameters\n\nUserid  \nThe User Id.\n\n#### Return Value\n\nThe filename of SQL trace log.\n\n### Method filenameWarnings\n\nRetrieves the name of the user specific warnings log file.\n\n    public str filenameWarnings(str Userid)\n\n#### Parameters\n\nUserid  \nThe identifier of interested user.\n\n#### Return Value\n\nThe name of the user specific warnings log file.\n\n### Method logfileName\n\nRetrieves the name of the standard  SQL error log file.\n\n    public str logfileName([boolean fromCommandline])\n\n#### Parameters\n\nfromCommandline  \nA boolean value. Passing a non-zero value as parameter makes the call return the logfile name passed on the command line; optional.\n\n#### Return Value\n\nThe file name of the standard  SQL error log file.\n\n#### Remarks\n\nIn version 2.11 or higher, an empty string is returned (for backward compatibility). Use the filenameSqlError method to retrieve the log file name.\n\n### Method loginConnectString\n\nRetrieves the full ODBC connection string.\n\n    public str loginConnectString()\n\n#### Return Value\n\nThe full ODBC connection string.\n\n### Method loginDatabase\n\nRetrieves the name of the database currently connected to.\n\n    public str loginDatabase()\n\n#### Return Value\n\nThe name of the database currently connected to.\n\n#### Examples\n\n    { \n        SqlSystem SqlSystem = new SqlSystem(); \n        print SqlSystem.loginDatabase(); \n    }\n\n### Method loginDSN\n\nRetrieves the open database connectivity (ODBC) data source name (DSN) used to connect to the database.\n\n    public str loginDSN()\n\n#### Return Value\n\nThe name of the ODBC data source name that is used for connecting to the database.\n\n#### Remarks\n\nThe default DSN is \"BMSDSN\".\n\n#### Examples\n\n    { \n        SqlSystem SqlSystem = new SqlSystem(); \n        print SqlSystem.loginDSN(); \n    }\n\n### Method loginName\n\nRetrieves the user name that is used to log-in to the database.\n\n    public str loginName()\n\n#### Return Value\n\nThe user name that is used to log-in to the database.\n\n#### Examples\n\n    { \n        SqlSystem SqlSystem = new SqlSystem(); \n        print SqlSystem.loginName(); \n    }\n\n### Method loginServer\n\nRetrieves the name of the database server currently connected to.\n\n    public str loginServer()\n\n#### Return Value\n\nThe name of the database currently connected to.\n\n#### Remarks\n\nAn empty string is returned if the database does not support a server concept.\n\n#### Examples\n\n    { \n        SqlSystem SqlSystem = new SqlSystem(); \n        print SqlSystem.loginServer(); \n    }\n\n### Method monocaseFmt\n\nRetrieves the format string that is used for casting the string to one case (e.g. \"NLS\\_LOWER(%1)\").\n\n    public str monocaseFmt([TableId tableId], [FieldId fieldId], [boolean includingFieldName], [boolean considerSystemVariables])\n\n#### Parameters\n\ntableId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\nincludingFieldName  \n\n<!-- -->\n\nconsiderSystemVariables  \n\n#### Return Value\n\nThe format string that is used for casting the string to one case.\n\n#### Remarks\n\nFinance and Operations style for placeholder(s) is used (i.e. \"%1\").\n\n### Method sqlLiteral\n\nFormats the input AX datatype to correct SQL type.\n\n    public str sqlLiteral(AnyType data, [boolean forWhereClause], [boolean likeOperand], [boolean rightJustify], [int stringLength])\n\n#### Parameters\n\ndata  \nThe length of the string.By default equals zero.\n\n<!-- -->\n\nforWhereClause  \nThe length of the string.By default equals zero.\n\n<!-- -->\n\nlikeOperand  \nThe length of the string.By default equals zero.\n\n<!-- -->\n\nrightJustify  \nThe length of the string.By default equals zero.\n\n<!-- -->\n\nstringLength  \nThe length of the string.By default equals zero.\n\n#### Return Value\n\nThe formatted SQL type string.\n\n### Method clusteredIndexes\n\n    public static boolean clusteredIndexes()\n\n#### Return Value\n\n### Method databaseBackendDesc\n\n    public static str databaseBackendDesc()\n\n#### Return Value\n\n### Method databaseBackendId\n\n    public static DatabaseId databaseBackendId()\n\n#### Return Value\n\n### Method databaseBackendName\n\n    public static str databaseBackendName()\n\n#### Return Value\n\n### Method databaseCallLevelInterface\n\n    public static DatabaseCLI databaseCallLevelInterface()\n\n#### Return Value\n\n### Method databaseHints\n\n    public static int databaseHints([int new_hint_value])\n\n#### Parameters\n\nnew\\_hint\\_value  \n\n#### Return Value\n\n### Method functionalIndexes\n\n    public static boolean functionalIndexes()\n\n#### Return Value\n\n### Method modelDatabaseBackendName\n\nRetrieves the name of the model database AOS currently connected to.\n\n    public static str modelDatabaseBackendName()\n\n#### Return Value\n\nThe name of the model database currently connected to.\n\n### Method managedConnectionString\n\n    public static str managedConnectionString()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the SqlSystem class.\n\n    public void new()\n\n### Method logfileWrite\n\nWrites a text string into the standard  SQL error logfile.\n\n    public void logfileWrite(str Text)\n\n#### Parameters\n\nText  \nThe text (for example, a bookmark) to write to the logfile.\n\n#### Remarks\n\nFollowing an error situation of any kind (which is logged in the logfile), you may want to insert a personal bookmark that explains the current scenario.\n\n#### Examples\n\n    static void myExample(Args _args) \n    { \n        SqlSystem SqlSystem; \n        SqlSystem = new SqlSystem(); \n        SqlSystem.logfileWrite(\"Recheck the returned data.\"); \n    }\n\n## Class SSRSReportAutoDesignNode\n    class SSRSReportAutoDesignNode extends SSRSReportDesignNode\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                              | Description                                                                        |\n|-----------------------------------------------------|------------------------------------------------------------------------------------|\n| public str getCrossReferences()                     | Retrieves the cross-references by using the specified SSRSReportDesignNode object. |\n| public void setCrossReferences(str crossReferences) | Sets the cross-references by using the specified SSRSReportDesignNode object.      |\n\n### Method getCrossReferences\n\nRetrieves the cross-references by using the specified SSRSReportDesignNode object.\n\n    public str getCrossReferences()\n\n#### Return Value\n\nThe cross-references in XML format.\n\n### Method setCrossReferences\n\nSets the cross-references by using the specified SSRSReportDesignNode object.\n\n    public void setCrossReferences(str crossReferences)\n\n#### Parameters\n\ncrossReferences  \nThe cross-references in XML format.\n\n#### Remarks\n\nThis method only updates the cross-reference XML stored on the specified SSRSReportDesignNode object. It does not update the cross-reference system.\n\n## Class SSRSReportConceptNode\n    class SSRSReportConceptNode extends xResourceNode\n\nThe SSRSReportConceptNode class lets you create, read, update, and delete SSRS reports, data sources, style templates, and images in the  Application Object Tree (AOT).\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before calling this API.\n\n### Examples\n\n### Methods\n\n| Method                                                     | Description                                                                   |\n|------------------------------------------------------------|-------------------------------------------------------------------------------|\n| public str AOTgetSource()                                  | Returns the source code of this node.                                         |\n| public str getCrossReferences()                            | Retrieves the cross-references by the specified SSRSReportConceptNode object. |\n| public void allowCaching(\\[boolean allow\\])                |                                                                               |\n| public void setCrossReferences(str crossReferences)        | Sets the cross-references by the specified SSRSReportConceptNode object.      |\n| public void AOTsetSource(str source, \\[boolean isStatic\\]) | Sets the source code of this node.                                            |\n\n### Method AOTgetSource\n\nReturns the source code of this node.\n\n    public str AOTgetSource()\n\n#### Return Value\n\nThe string that contains the source code, if any; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n#### Remarks\n\nThis function is overridden by nodes that have source code.\n\n### Method getCrossReferences\n\nRetrieves the cross-references by the specified SSRSReportConceptNode object.\n\n    public str getCrossReferences()\n\n#### Return Value\n\nThe cross-references by the specified SSRSReportConceptNode object in XML format.\n\n### Method allowCaching\n\n    public void allowCaching([boolean allow])\n\n#### Parameters\n\nallow  \n\n### Method setCrossReferences\n\nSets the cross-references by the specified SSRSReportConceptNode object.\n\n    public void setCrossReferences(str crossReferences)\n\n#### Parameters\n\ncrossReferences  \nThe cross-references by the specified SSRSReportConceptNode object in XML format.\n\n#### Remarks\n\nThis method only updates the cross-reference XML stored on the specified SSRSReportConceptNode object. It does not update the cross-reference system.\n\n### Method AOTsetSource\n\nSets the source code of this node.\n\n    public void AOTsetSource(str source, [boolean isStatic])\n\n#### Parameters\n\nsource  \nThe value that specifies whether the method is static; optional.\n\n<!-- -->\n\nisStatic  \nThe value that specifies whether the method is static; optional.\n\n#### Remarks\n\nThis method is overridden by nodes that have source code.\n\n## Class SSRSReportDesignNode\n    class SSRSReportDesignNode extends xResourceNode\n\nThe SSRSReportDesignNode class lets you create, read, update, and delete Microsoft SQL Server Reporting Services reports, data sources, style templates, and images in the  Application Object Tree (AOT).\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before calling this API.\n\n### Examples\n\n### Methods\n\n| Method                                              | Description                                                                  |\n|-----------------------------------------------------|------------------------------------------------------------------------------|\n| public str getCrossReferences()                     | Retrieves the cross-references by the specified SSRSReportDesignNode object. |\n| public void setCrossReferences(str crossReferences) | Sets the cross-references by the specified SSRSReportDesignNode object.      |\n\n### Method getCrossReferences\n\nRetrieves the cross-references by the specified SSRSReportDesignNode object.\n\n    public str getCrossReferences()\n\n#### Return Value\n\nThe cross-references by the specified SSRSReportDesignNode object in XML format.\n\n### Method setCrossReferences\n\nSets the cross-references by the specified SSRSReportDesignNode object.\n\n    public void setCrossReferences(str crossReferences)\n\n#### Parameters\n\ncrossReferences  \nThe cross-references by the specified SSRSReportDesignNode object in XML format.\n\n#### Remarks\n\nThis method only updates the cross-reference XML stored on the specified SSRSReportDesignNode object. It does not update the cross-reference system.\n\n## Class SSRSReportPrecisionDesignNode\n    class SSRSReportPrecisionDesignNode extends SSRSReportDesignNode\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                              | Description                                                                  |\n|-----------------------------------------------------|------------------------------------------------------------------------------|\n| public str getCrossReferences()                     | Retrieves the cross-references to the specified SSRSReportDesignNode object. |\n| public void setCrossReferences(str crossReferences) | Sets the cross-references to the specified SSRSReportDesignNode object.      |\n\n### Method getCrossReferences\n\nRetrieves the cross-references to the specified SSRSReportDesignNode object.\n\n    public str getCrossReferences()\n\n#### Return Value\n\nThe cross-references to the specified SSRSReportDesignNode object in XML format.\n\n### Method setCrossReferences\n\nSets the cross-references to the specified SSRSReportDesignNode object.\n\n    public void setCrossReferences(str crossReferences)\n\n#### Parameters\n\ncrossReferences  \nThe cross-references to the specified SSRSReportDesignNode object in XML format.\n\n#### Remarks\n\nThis method only updates the cross-reference XML that is stored on the specified SSRSReportDesignNode object. It does not update the cross-reference system.\n\n## Class Statement\n    class Statement extends Object\n\nThe Statement class executes a static SQL statement and obtains the results it produces.\n\n### Remarks\n\nOnly one per Statement can be open at any point in time. Therefore, if the reading of one ResultSet is interleaved with the reading of another, each must have been generated by different Statements. Record and field level securities are not enforced on the Statement class. Therefore, make sure you are not exposing data returned to the user without doing explicit security validation. All statement executed methods implicitly close a statement's current ResultSet if an open one exists.\n\n### Examples\n\n    static void example() \n    { \n        Connection Con; \n        Statement Stmt; \n        ResultSet R; \n        SqlStatementExecutePermission perm; \n        str sql = 'SELECT VALUE FROM SQLSYSTEMVARIABLES'; \n        Con = new Connection(); \n        Stmt = Con.createStatement(); \n        perm = new SqlStatementExecutePermission(sql); \n        perm.assert(); \n        R = Stmt.executeQuery(sql); \n        while ( R.next() ) \n        { \n            print R.getString(1); \n        } \n    }\n\n### Methods\n\n| Method                                       | Description                                                                                       |\n|----------------------------------------------|---------------------------------------------------------------------------------------------------|\n| public ResultSet executeQuery(str statement) | Executes an SQL statement that returns an instance of the .                                       |\n| public int executeUpdate(str statement)      | Executes a SQL INSERT, UPDATE, or DELETE statement.                                               |\n| public int getLastError()                    | Retrieves the error code returned by the SQL database backend for the last SQL operation.         |\n| public str getLastErrorText()                | Retrieves the error text that is returned by the SQL database backend for the last SQL operation. |\n| public int getMaxFieldSize()                 | Returns the current maximum column size limit, if any.                                            |\n| public void close()                          | Releases the database resources of a statement object.                                            |\n| public void setMaxFieldSize(int max)         | Sets the maximum column size limit.                                                               |\n\n### Method executeQuery\n\nExecutes an SQL statement that returns an instance of the .\n\n    public ResultSet executeQuery(str statement)\n\n#### Parameters\n\nstatement  \nThe string that contains the SQL statement that is used to retrieve the result set.\n\n#### Return Value\n\nThe object that contains the data returned from the query.\n\n#### Remarks\n\nIf users control input to the executeQuery method, an SQL injection threat can occur. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the . The following are safer alternatives for executing SQL statements:\n\n-   Queries\n-   Views\n-   X++ select statements\n\nRecord level security is not enforced on the Statement class. If data is exposed to the user, perform explicit security validation.\n\n#### Examples\n\nThe following example performs an SQL query on CustTable, which runs on the server. The result of the query is stored in the resultSet object.\n\n    server static void main(Args _args) \n    { \n        DictTable  dictTable; \n        Connection connection; \n        Statement  statement; \n        str        sql; \n        ResultSet  resultSet; \n        SqlStatementExecutePermission perm; \n        dictTable = new DictTable(tableNum(CustTable)); \n        if (dictTable != null) \n            { \n               connection = new Connection(); \n               sql = strfmt( \"SELECT * FROM %1\", dictTable.name(DbBackend::Sql) ); \n               perm = new SqlStatementExecutePermission(sql); \n               // Check for permission to use the statement. \n               perm.assert(); \n               statement = connection.createStatement(); \n               resultSet = statement.executeQuery(sql); \n               // End the scope of the assert call. \n               CodeAccessPermission::revertAssert(); \n            } \n    }\n\n### Method executeUpdate\n\nExecutes a SQL INSERT, UPDATE, or DELETE statement.\n\n    public int executeUpdate(str statement)\n\n#### Parameters\n\nstatement  \nThe string that contains the SQL statement being passed to the database.\n\n#### Return Value\n\nAn updated row count; otherwise, 0 (zero) for SQL statements that return nothing.\n\n#### Remarks\n\nSQL statements that return nothing, such as SQLDDL statements, can also be executed. If users control input to the executeUpdate method, an SQL injection thread can occur. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the . The following are safer alternatives for interacting with the database:\n\n-   Queries\n-   Views\n-   X++ select statements\n\nRecord level security is not enforced on the Statement class. If data is exposed to the user, perform explicit security validation.\n\n### Method getLastError\n\nRetrieves the error code returned by the SQL database backend for the last SQL operation.\n\n    public int getLastError()\n\n#### Return Value\n\nThe error code returned by the SQL database backend for the last SQL operation; or 0 for success.\n\n#### Examples\n\n    static void StatementGetLastError()  \n    { \n        str sql, sql2; \n        UserConnection Connection = new UserConnection(); \n        Statement Statement = Connection.createStatement(); \n        boolean clear_infolog = false; \n        print \"-Delete-a-non-existing-record-(valid statement)-----------\"; \n        sql = \"delete from zipcode where Recid = 2\"; \n        new SqlStatementExecutePermission(sql).assert(); \n        Statement.executeUpdate(sql); \n        print \" Error code was: \", Statement.getLastError(); \n        print \" Error message was '\", Statement.getLastErrorText(), \"'\"; \n        try \n        { \n            print \"\\n\"; \n            print \"-Delete-from-a-non-existing-table-(invalid statement)---    --\"; \n            sql2 = \"delete from StrangeTable07\"; \n            new SqlStatementExecutePermission(sql2).assert(); \n            Statement.executeUpdate(sql2); \n        } \n        catch (exception::Error) \n        { \n            print \"Exception was caught:\"; \n            print \" Error code was: \", Statement.getLastError(); \n            print \" Error message was '\", Statement.getLastErrorText(), \"'\"; \n        } \n        CodeAccessPermission::revertAssert(); \n        pause; \n    }\n\n### Method getLastErrorText\n\nRetrieves the error text that is returned by the SQL database backend for the last SQL operation.\n\n    public str getLastErrorText()\n\n#### Return Value\n\nThe error text that is provided by the SQL database for the last SQL operation.\n\n### Method getMaxFieldSize\n\nReturns the current maximum column size limit, if any.\n\n    public int getMaxFieldSize()\n\n#### Return Value\n\nThe current maximum column size limit; 0 means unlimited.\n\n#### Remarks\n\nThe maxFieldSize limit (in bytes) is the maximum amount of data returned for any column value; it only applies to binary, varbinary, longvarbinary, char, varchar, and longvarchar columns. If the limit is exceeded, the excess data is silently discarded.\n\n### Method close\n\nReleases the database resources of a statement object.\n\n    public void close()\n\n### Method setMaxFieldSize\n\nSets the maximum column size limit.\n\n    public void setMaxFieldSize(int max)\n\n#### Parameters\n\nmax  \nThe new max column size limit; 0 means unlimited.\n\n#### Remarks\n\nThe maxFieldSize limit (in bytes) is set to limit the size of data that can be returned for any column value; it only applies to binary, varbinary, longvarbinary, char, varchar, and longvarchar fields. If the limit is exceeded, the excess data is silently discarded. For maximum portability, use values greater than 256.\n\n## Class Struct\n    class Struct extends Object\n\nA struct holds several values of any X++ type, to group the information about a specific entity.\n\n### Remarks\n\nA struct (short for structure) is an entity that can hold several values of any X++ type. Structs are used to group information about a specific entity. For example, you might want to store information about a customer's name, age and address and then treat this compound information as one item. The items in a struct are specified by a data type and a name. Items are added when the struct is created by using the new method, or they are created after the struct has been created by using the add method. If you add an item by using the add method, you specify the value for the item at the same time, and the data type is inferred from this value. If you add an item during the instantiation of the struct, you need to use the value or the valueIndex method to assign a value to it. The items in a struct can be of any of the data types found in the Types system enum, including: string, integer, real, date, container, record, and class. The items in a struct are arranged in alphabetical order of the item names. The fields in a struct can be traversed by using the fields, fieldName, and fieldType methods. Structs can be packed into containers and later restored by using the Struct::create method. Structs have some similarities to X++ containers. However, a container is a value type and is built into the X++ language. You can create nested containers, but you cannot create nested structs. X++ classes can store information in much the same way as structs. But although classes can supply methods to manipulate the data, no such facility is provided for structs, and there is no concept of overriding or extension. Classes can only be created in the AOT, but structs exist solely in the context of the code in which they are created. Class member variables are private to the class, so accessor functions must be coded for them for the values to be used from outside the class. The items within a struct are publicly accessible.\n\n### Examples\n\nThe following example creates a struct with two items and then assigns values to those items. A new item is then added by using the Struct.add method; the data type of the item is inferred from the value assigned to it. The struct is then packed into a container and used to create a new struct, a copy of the original struct.\n\n    { \n        Struct s = new struct (\"int age; str name\"); \n        Struct copy; \n        container c; \n        int i; \n        // Add values to the items \n        s.value(\"age\", 25); \n        s.value(\"name\", \"Jane Dow\"); \n      // Add a new item; data type is inferred from value \n        s.add(\"Shoesize\", 45); \n        // Print the definition of the struct \n        print s.definitionString(); \n        // Prints the type and name of all items in the struct \n        for (i =  1;   i <= s.fields();i++) \n        { \n             print s.fieldType(i), \" \", s.fieldName(i); \n        }  \n        // Pack the struct into a container and restore it into copy \n        c = s.pack(); \n        copy = Struct::create(c); \n        print copy.definitionString(); \n        pause; \n    }\n\n### Methods\n\n| Method                                                        | Description                                                                                   |\n|---------------------------------------------------------------|-----------------------------------------------------------------------------------------------|\n| public boolean add(str fieldName, AnyType value)              | Adds a new item to the struct and assigns the specified value to it.                          |\n| public str definitionString()                                 | Returns a description of the names and types of the elements in the struct.                   |\n| public boolean exists(str fieldName)                          | Determines whether a particular item exists in a struct.                                      |\n| public str fieldName(int index)                               | Returns the name of the item in the struct at the specified position.                         |\n| public int fields()                                           | Returns the number of items in the struct.                                                    |\n| public Types fieldType(int index)                             | Returns the data type of the item in the struct at the specified position.                    |\n| public int index(str fieldName)                               | Calculates the position of an item in the struct based on its name.                           |\n| public container pack()                                       | Serializes the current instance of the Struct class.                                          |\n| public boolean remove(str fieldName)                          | Removes an item from a struct.                                                                |\n| public str toString()                                         | Returns a string that describes the contents of the struct.                                   |\n| public AnyType value(str fieldName, \\[AnyType value\\])        | Gets or sets the value for a specified item in a struct.                                      |\n| public str valueImage(int index)                              | Returns a string that describes the value of the item at a particular position in the struct. |\n| public AnyType valueIndex(int index, \\[AnyType value\\])       | Gets or sets the value of the item at a specified position in a struct.                       |\n| public str xml(\\[int indent\\])                                | Returns an XML string that represents the current object.                                     |\n| ::public static Struct create(container container)            | Creates a struct from a container that is obtained from a prior call to Struct.pack.          |\n| ::public static Struct createFromXML(Object xmlnode)          |                                                                                               |\n| ::public static boolean equal(Struct struct1, Struct struct2) | Determines whether two structs are equal.                                                     |\n| ::public static Struct merge(Struct struct1, Struct struct2)  | Combines two structs to create a new struct.                                                  |\n| public void new(VarArg specifier)                             | Creates a struct.                                                                             |\n\n### Method add\n\nAdds a new item to the struct and assigns the specified value to it.\n\n    public boolean add(str fieldName, AnyType value)\n\n#### Parameters\n\nfieldName  \nThe value to assign to the new item. This value defines the type of the item.\n\n<!-- -->\n\nvalue  \nThe value to assign to the new item. This value defines the type of the item.\n\n#### Return Value\n\ntrue if the value has been added to the struct; false if the value could not be added (if it already existed in the struct).\n\n#### Remarks\n\nThe type of the value is inferred from content of the value. The items in a struct are arranged in alphabetical order according to the item names. The value of an item in a struct can be changed by using the Struct.value or the Struct.valueIndex method.\n\n#### Examples\n\nThe following example creates a struct with two items name and age fields and assigns values to those items. The add method is then used to create an additional item the shoeSize variable, with a value of 43. The type of the value determines the type of the new item, int.\n\n    { \n        Struct s = new Struct (\"str name; int age\"); \n        // Prints number of items (2) \n        print s.fields(); \n        // Values are assigned to the two items \n        s.value(\"name\", \"John\"); \n        s.value(\"age\", 34); \n        //Another item is added to the struct \n        s.add(\"shoeSize\", 43); \n        // Prints number of item (3) \n        print s.fields(); \n        // Prints a description of the items in the struct \n        print s.definitionString(); \n        pause; \n    }\n\n### Method definitionString\n\nReturns a description of the names and types of the elements in the struct.\n\n    public str definitionString()\n\n#### Return Value\n\nA string that contains a definition of the struct.\n\n#### Remarks\n\nYou can use the definitionString method to create a copy of a struct by using the syntax: newStruct = new struct(oldStruct.definitionString());\n\n### Method exists\n\nDetermines whether a particular item exists in a struct.\n\n    public boolean exists(str fieldName)\n\n#### Parameters\n\nfieldName  \nThe name of the item to check for.\n\n#### Return Value\n\ntrue if the item exists in the struct; otherwise, false.\n\n#### Examples\n\nThe following example tests whether a particular item exists in a struct, and if not, it adds the item and assigns a value to it using the Struct.add method.\n\n    client server static void setProp( \n        Struct     properties, \n        str        name, \n        anytype   value \n        ) \n    { \n        if (! properties.exists(name)) \n        { \n            properties.add(name,nullValue(value)); \n        } \n        properties.value(name,value); \n    }\n\n### Method fieldName\n\nReturns the name of the item in the struct at the specified position.\n\n    public str fieldName(int index)\n\n#### Parameters\n\nindex  \nThe position in the struct at which you want to retrieve the item name.\n\n#### Return Value\n\nThe name of the item at the position specified by index.\n\n#### Remarks\n\nIf index is not found, an empty string is returned.\n\n#### Examples\n\nThe following example creates a struct from a container and then uses the Struct.fields method to iterate through the contents of the container. The fieldName method is used to test the name of each item in the struct, and a specific action is run depending on the value of this name.\n\n    boolean unpack(container packed) \n    { \n        Struct      unpackedProperties; \n        container   structCon; \n        Counter     i; \n        [#currentList,structCon] = packed; \n        unpackedProperties = Struct::create(structCon); \n        for (i=1;i<=unpackedProperties.fields();i++) \n        { \n            switch (unpackedProperties.fieldName(i)) \n            { \n                case #closedOk: \n                    break; \n                case #PropertyCaption: \n                    if (! dialogForm  \n                        || dialogForm  \n                        && ! dialogForm.form().design().caption()) \n                        this.caption(unpackedProperties.valueIndex(i)); \n                    break; \n                case #dialogFormname: \n                    // Do nothing \n                    break; \n                case #PropertyAlwaysOnTop: \n                    this.alwaysOnTop(unpackedProperties.valueIndex(i)); \n                    break; \n                case #PropertyWindowType: \n                    this.windowType(unpackedProperties.valueIndex(i)); \n                    break; \n                case #defaultButton: \n                    this.defaultButton(unpackedProperties.valueIndex(i)); \n                    break; \n                default: \n                    throw error(strfmt( \n                        \"@SYS67326\",unpackedProperties.fieldName(i), \n                         classId2Name(classidget(this)))); \n            } \n        } \n        return true; \n    }\n\n### Method fields\n\nReturns the number of items in the struct.\n\n    public int fields()\n\n#### Return Value\n\nThe number of items in the struct.\n\n#### Remarks\n\nTo find the position of an item in a struct, use the Struct.index method.\n\n#### Examples\n\nThe following example creates a struct from a container and then uses the fields method to iterate through the contents of the container.\n\n    boolean unpack(container packed) \n    { \n        Struct      unpackedProperties; \n        container   structCon; \n        Counter     i; \n        [#currentList,structCon] = packed; \n        unpackedProperties = Struct::create(structCon); \n        for (i=1;i<=unpackedProperties.fields();i++) \n        { \n            switch (unpackedProperties.fieldName(i)) \n            { \n                case #closedOk: \n                    break; \n                case #PropertyCaption: \n                    if (! dialogForm  \n                        || dialogForm  \n                        && ! dialogForm.form().design().caption()) \n                        this.caption(unpackedProperties.valueIndex(i)); \n                    break; \n                case #dialogFormname: \n                    // Do nothing \n                    break; \n                case #PropertyAlwaysOnTop: \n                    this.alwaysOnTop(unpackedProperties.valueIndex(i)); \n                    break; \n                case #PropertyWindowType: \n                    this.windowType(unpackedProperties.valueIndex(i)); \n                    break; \n                case #defaultButton: \n                    this.defaultButton(unpackedProperties.valueIndex(i)); \n                    break; \n                default: \n                    throw error(strfmt( \n                        \"@SYS67326\",unpackedProperties.fieldName(i), \n                         classId2Name(classidget(this)))); \n            } \n        } \n        return true; \n    }\n\n### Method fieldType\n\nReturns the data type of the item in the struct at the specified position.\n\n    public Types fieldType(int index)\n\n#### Parameters\n\nindex  \nThe position in the struct that you want to retrieve the data type for.\n\n#### Return Value\n\nThe data type of the item at the position specified by index.\n\n#### Remarks\n\nThe possible values are supplied by the system enum. If index is not found, the return value is Types::void. You can determine the position of a particular item in a struct by using the Struct.index method\n\n### Method index\n\nCalculates the position of an item in the struct based on its name.\n\n    public int index(str fieldName)\n\n#### Parameters\n\nfieldName  \nThe name of the item for which to return the position.\n\n#### Return Value\n\nThe position of the item.\n\n#### Remarks\n\nThe items in a struct are arranged in alphabetical order according to the item names. If there is no item with the name fieldName, 0 is returned.\n\n### Method pack\n\nSerializes the current instance of the Struct class.\n\n    public container pack()\n\n#### Return Value\n\nA container that contains the current instance of the Struct class.\n\n#### Remarks\n\nThe pack method is called on each field that holds an object, to yield a (sub) container. The struct may be recreated from the container by using the Struct.create method.\n\n#### Examples\n\nThe following example creates a struct with two items in it (name and age), and then adds values to the items. The struct is packed into a container, and this container is then used to create a new struct.\n\n    {  \n        container packedStruct;  \n        Struct s1, s = new Struct (\"str name; int age\"); \n        s.value (\"name\", \"Jane Dow\");  \n        s.value (\"age\", 34); \n        // Struct is packed into a container \n        packedStruct = s.pack();  \n        // A new struct is created from the container \n        s1 = Struct::create(packedStruct); \n        // Both structs have the same contents \n        print s.toString();  \n        print s1.toString();  \n        pause;  \n    }\n\n### Method remove\n\nRemoves an item from a struct.\n\n    public boolean remove(str fieldName)\n\n#### Parameters\n\nfieldName  \nThe name of the item you want to remove.\n\n#### Return Value\n\ntrue if the item was found (and removed); otherwise, false.\n\n#### Remarks\n\nThe name you specify for the fieldName parameter must be the name of the item as it was specified in the instantiation of the struct or the name of the item as it was added using the Struct.add method. The name must be enclosed in quotes (\" \").\n\n#### Examples\n\nThe following example creates a struct with two items in it and prints a description of these items. One of the items is then removed by using the remove method.\n\n    { \n        Struct s = new Struct (\"str name; int age\"); \n        // Values are assigned to the two items \n        s.value(\"name\", \"John\"); \n        s.value(\"age\", 34); \n        // Prints a description of the items in the struct \n        print s.definitionString(); \n        pause; \n        // Removes the name field \n        s.remove(\"name\"); \n        // Describes remaining items in the struct \n        print s.definitionString(); \n        pause; \n    }\n\n### Method toString\n\nReturns a string that describes the contents of the struct.\n\n    public str toString()\n\n#### Return Value\n\nA string that describes the contents of the struct.\n\n### Method value\n\nGets or sets the value for a specified item in a struct.\n\n    public AnyType value(str fieldName, [AnyType value])\n\n#### Parameters\n\nfieldName  \nThe value to assign to the item; optional.\n\n<!-- -->\n\nvalue  \nThe value to assign to the item; optional.\n\n#### Return Value\n\nThe value of the specified item.\n\n#### Remarks\n\nAn exception is raised if there is no item with the specified name in the struct. The name of an item in a struct may be retrieved by using the Struct.fieldName method. You can add a new item to a struct and assign a value to it at the same time by using the Struct.add method. To assign a new value to an item based on its position in the struct, use the Struct.valueIndex method.\n\n#### Examples\n\nThe following example creates a struct with two items in it and then uses the value method to assign values to those two items.\n\n    { \n        Struct s = new Struct (\"str name; int age\"); \n        // Set the values \n        s.value(\"name\", \"Jane Dow\"); \n        s.value(\"age\", 34); \n        // Print the values \n        print s.value(\"name\"); \n        print s.value(\"age\"); \n        pause; \n    }\n\n### Method valueImage\n\nReturns a string that describes the value of the item at a particular position in the struct.\n\n    public str valueImage(int index)\n\n#### Parameters\n\nindex  \nThe position of the item that you want to return a description for.\n\n#### Return Value\n\nA string that describes the value of the item.\n\n#### Remarks\n\nThe items in a struct are in alphabetical order according to the names of the items. If there is no item at the position specified by index, an exception is raised.\n\n### Method valueIndex\n\nGets or sets the value of the item at a specified position in a struct.\n\n    public AnyType valueIndex(int index, [AnyType value])\n\n#### Parameters\n\nindex  \nThe value to assign to the item at the position specified by index; optional.\n\n<!-- -->\n\nvalue  \nThe value to assign to the item at the position specified by index; optional.\n\n#### Return Value\n\nThe value of the item at the position specified by index.\n\n#### Remarks\n\nAn exception is raised if there is no item at the position specified by index. The position of an item in a struct can be retrieved by using the Struct.index method.\n\n### Method xml\n\nReturns an XML string that represents the current object.\n\n    public str xml([int indent])\n\n#### Parameters\n\nindent  \nThe amount of indentation of the returned XML string; optional.\n\n#### Return Value\n\nAn XML string that represents the current object.\n\n#### Remarks\n\nThis method can be overridden to return values that are meaningful for that type.\n\n### Method create\n\nCreates a struct from a container that is obtained from a prior call to Struct.pack.\n\n    public static Struct create(container container)\n\n#### Parameters\n\ncontainer  \nA container that contains the packed struct.\n\n#### Return Value\n\nA struct equal to the one that was packed into the specified container.\n\n#### Remarks\n\nIf the struct contains objects, these objects must have an unpack method that is called to re-establish their internal state from the container.\n\n#### Examples\n\nThe following example creates a struct with two items in it (name and age), and then adds values to the items. The struct is packed into a container, and this container is then unpacked to create a new struct.\n\n    {  \n        container packedStruct;  \n        Struct s1, s = new Struct (\"str name; int age\"); \n        s.value (\"name\", \"Jane Dow\");  \n        s.value (\"age\", 34); \n        // Struct is packed into a container \n        packedStruct = s.pack();  \n        // A new struct is created from the container \n        s1 = Struct::create(packedStruct); \n        // Both structs have the same contents \n        print s.toString();  \n        print s1.toString();  \n        pause;  \n    }\n\n### Method createFromXML\n\n    public static Struct createFromXML(Object xmlnode)\n\n#### Parameters\n\nxmlnode  \n\n#### Return Value\n\n### Method equal\n\nDetermines whether two structs are equal.\n\n    public static boolean equal(Struct struct1, Struct struct2)\n\n#### Parameters\n\nstruct1  \nThe second of the two structs to be compared.\n\n<!-- -->\n\nstruct2  \nThe second of the two structs to be compared.\n\n#### Return Value\n\ntrue if the structs are equal; otherwise, false.\n\n#### Remarks\n\nTwo structs are equal if they have the same number of fields, the field names are the same, and each field is the same type and has the same value.\n\n### Method merge\n\nCombines two structs to create a new struct.\n\n    public static Struct merge(Struct struct1, Struct struct2)\n\n#### Parameters\n\nstruct1  \nThe struct that will be added to the end of the first struct to create a new struct.\n\n<!-- -->\n\nstruct2  \nThe struct that will be added to the end of the first struct to create a new struct.\n\n#### Return Value\n\nThe new struct.\n\n#### Remarks\n\nstruct2 is added to the end of struct1. This means that the order of the items in the new struct will be: all the items in struct1, arranged in alphabetical order of the item names, followed by all the items in struct2, arranged in alphabetical order of the item names. If both structs contain an item with the same name, only the item from the first struct will be included.\n\n#### Examples\n\nThe following example creates two structs called person and address, and then merges them into a new struct called allInfo.\n\n    { \n        container packedStruct; \n        Struct person = new Struct (\"str name; int age\"); \n        Struct address = new Struct (\"str street; str city; str country\"); \n        Struct allInfo; \n        person.value (\"name\", \"Jane Dow\"); \n        person.value (\"age\", 34); \n        address.value (\"street\", \"Downing street 10\"); \n        address.value (\"country\", \"Great Britain\"); \n        address.value (\"city\", \" London\"); \n        allInfo = Struct::merge(person, address); \n        print allInfo.toString(); \n        pause; \n    }\n\n### Method new\n\nCreates a struct.\n\n    public void new(VarArg specifier)\n\n#### Parameters\n\nspecifier  \nOne or more pairs that specify the data type of an item followed by the name of the item as a string.\n\n#### Remarks\n\nThe data type of the item can be specified using the name of a primitive data type or by using the system enum. The items in a struct can be of any of the data types found in the Types system enum, including: string, integer, real, date, container, record, and class. You can create a copy of a struct by using the Struct.definitionString method to create a new struct, as illustrated in the example below. After you have created a struct, you can add new items using the Struct.add method and set the value of items in the struct by using the Struct.value or Struct.valueIndex method.\n\n#### Examples\n\nThe following example creates two structs with the same definition and then adds 2 values and an additional item and value to one of them (s1). This struct is then copied to create a new struct by using the Struct.definitionString method.\n\n    { \n        Struct s1, s2, s3; \n        // The two constructors below create the same struct \n        s1 = new Struct(Types::Integer, \"age\", Types::String, \"name\"); \n        s2 = new Struct (\"int age; str name\"); \n        // Print the definitions \n        print s1.definitionString(); \n        print s2.definitionString(); \n        s1.value(\"age\", 25); \n        s1.value(\"name\", \"Jane Dow\"); \n        // Add a field at runtime \n        s1.add(\"Shoesize\", 45); \n        print s1.definitionString(); \n        print s1.toString(); \n        // Create a container with age, name and shoesize, \n        // using definitionString \n        s3 = new struct(s1.definitionString()); \n        print s3.definitionString(); \n        pause; \n    }\n\n## Class SurrogateFKReplacementHelper\n    class SurrogateFKReplacementHelper extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                                                             | Description                                     |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------|\n| public Map addDefaultRequiredJoins(QueryBuildDataSource foreignKeyQueryBuildDataSource, str replacementFieldGroupName)                                                                                             |                                                 |\n| public Map addRequiredJoins(List requiredJoinsAsRelationPathList, QueryBuildDataSource foreignKeyQueryBuildDataSource, str replacementFieldGroupName)                                                              |                                                 |\n| public List displayBindings(str replacementFieldGroupName, \\[boolean distinctBindingsOnly\\])                                                                                                                       |                                                 |\n| public List displayValuesFromQueryRun(QueryRun queryRun, str replacementFieldGroupName, \\[boolean isRootPrimaryKeyDataSource\\], \\[boolean trimSecuredValues\\], \\[boolean distinctBindingsOnly\\])                   |                                                 |\n| public List displayValuesFromRecID(Int64 recIDValue, str replacementFieldGroupName, \\[boolean trimSecuredValues\\], \\[boolean distinctBindingsOnly\\])                                                               |                                                 |\n| public List displayValuesFromRootDS(QueryBuildDataSource rootQueryBuildDataSource, boolean isPrimaryKeyDataSource, str replacementFieldGroupName, \\[boolean trimSecuredValues\\], \\[boolean distinctBindingsOnly\\]) |                                                 |\n| public FilterValue displayValue(Common resolvedCursor, FieldBinding displayBinding, \\[boolean isRootPrimaryKeyDataSource\\])                                                                                        |                                                 |\n| public str extendedDataType()                                                                                                                                                                                      |                                                 |\n| public Query generateResolveReferenceQuery(List requiredJoinsAsRelationPathList, List filterValuesAsFilterValueList)                                                                                               |                                                 |\n| public boolean isResolvedReferenceAmbiguous(Query query)                                                                                                                                                           |                                                 |\n| public str primaryKeyTableName()                                                                                                                                                                                   |                                                 |\n| public Map queryBuildDataSourceBindingsForQuery(Query query, str replacementFieldGroupName, \\[boolean isRootPrimaryKeyDataSource\\])                                                                                |                                                 |\n| public Map queryBuildDataSourceBindingsForRootDS(QueryBuildDataSource rootQueryBuildDataSource, boolean isPrimaryKeyDataSource, str replacementFieldGroupName)                                                     |                                                 |\n| public Common resolveReference(Query query, \\[boolean ignoreAmbiguousReference\\])                                                                                                                                  |                                                 |\n| public FieldBinding surrogateForeignKeyFieldBinding()                                                                                                                                                              |                                                 |\n| ::public static SurrogateFKReplacementHelper construct(FieldBinding surrogateForeignKeyBinding)                                                                                                                    |                                                 |\n| ::public static SurrogateFKReplacementHelper constructForEDT(str edtName)                                                                                                                                          |                                                 |\n| ::public static SurrogateFKReplacementHelper constructForPKTable(str pkTableName)                                                                                                                                  |                                                 |\n| ::public static str defaultPrimaryKeyQueryDataSourceName()                                                                                                                                                         |                                                 |\n| ::public static str DEPRECATED\\_WorkflowCaption(str tableName, str fieldName, Int64 recIDValue)                                                                                                                    |                                                 |\n| ::public static str implicitReplacementFieldGroupName()                                                                                                                                                            |                                                 |\n| private void new(FieldBinding surrogateForeignKeyBinding)                                                                                                                                                          | Initializes a new instance of the Object class. |\n\n### Method addDefaultRequiredJoins\n\n    public Map addDefaultRequiredJoins(QueryBuildDataSource foreignKeyQueryBuildDataSource, str replacementFieldGroupName)\n\n#### Parameters\n\nforeignKeyQueryBuildDataSource  \n\n<!-- -->\n\nreplacementFieldGroupName  \n\n#### Return Value\n\n### Method addRequiredJoins\n\n    public Map addRequiredJoins(List requiredJoinsAsRelationPathList, QueryBuildDataSource foreignKeyQueryBuildDataSource, str replacementFieldGroupName)\n\n#### Parameters\n\nrequiredJoinsAsRelationPathList  \n\n<!-- -->\n\nforeignKeyQueryBuildDataSource  \n\n<!-- -->\n\nreplacementFieldGroupName  \n\n#### Return Value\n\n### Method displayBindings\n\n    public List displayBindings(str replacementFieldGroupName, [boolean distinctBindingsOnly])\n\n#### Parameters\n\nreplacementFieldGroupName  \n\n<!-- -->\n\ndistinctBindingsOnly  \n\n#### Return Value\n\n### Method displayValuesFromQueryRun\n\n    public List displayValuesFromQueryRun(QueryRun queryRun, str replacementFieldGroupName, [boolean isRootPrimaryKeyDataSource], [boolean trimSecuredValues], [boolean distinctBindingsOnly])\n\n#### Parameters\n\nqueryRun  \n\n<!-- -->\n\nreplacementFieldGroupName  \n\n<!-- -->\n\nisRootPrimaryKeyDataSource  \n\n<!-- -->\n\ntrimSecuredValues  \n\n<!-- -->\n\ndistinctBindingsOnly  \n\n#### Return Value\n\n### Method displayValuesFromRecID\n\n    public List displayValuesFromRecID(Int64 recIDValue, str replacementFieldGroupName, [boolean trimSecuredValues], [boolean distinctBindingsOnly])\n\n#### Parameters\n\nrecIDValue  \n\n<!-- -->\n\nreplacementFieldGroupName  \n\n<!-- -->\n\ntrimSecuredValues  \n\n<!-- -->\n\ndistinctBindingsOnly  \n\n#### Return Value\n\n### Method displayValuesFromRootDS\n\n    public List displayValuesFromRootDS(QueryBuildDataSource rootQueryBuildDataSource, boolean isPrimaryKeyDataSource, str replacementFieldGroupName, [boolean trimSecuredValues], [boolean distinctBindingsOnly])\n\n#### Parameters\n\nrootQueryBuildDataSource  \n\n<!-- -->\n\nisPrimaryKeyDataSource  \n\n<!-- -->\n\nreplacementFieldGroupName  \n\n<!-- -->\n\ntrimSecuredValues  \n\n<!-- -->\n\ndistinctBindingsOnly  \n\n#### Return Value\n\n### Method displayValue\n\n    public FilterValue displayValue(Common resolvedCursor, FieldBinding displayBinding, [boolean isRootPrimaryKeyDataSource])\n\n#### Parameters\n\nresolvedCursor  \n\n<!-- -->\n\ndisplayBinding  \n\n<!-- -->\n\nisRootPrimaryKeyDataSource  \n\n#### Return Value\n\n### Method extendedDataType\n\n    public str extendedDataType()\n\n#### Return Value\n\n### Method generateResolveReferenceQuery\n\n    public Query generateResolveReferenceQuery(List requiredJoinsAsRelationPathList, List filterValuesAsFilterValueList)\n\n#### Parameters\n\nrequiredJoinsAsRelationPathList  \n\n<!-- -->\n\nfilterValuesAsFilterValueList  \n\n#### Return Value\n\n### Method isResolvedReferenceAmbiguous\n\n    public boolean isResolvedReferenceAmbiguous(Query query)\n\n#### Parameters\n\nquery  \n\n#### Return Value\n\n### Method primaryKeyTableName\n\n    public str primaryKeyTableName()\n\n#### Return Value\n\n### Method queryBuildDataSourceBindingsForQuery\n\n    public Map queryBuildDataSourceBindingsForQuery(Query query, str replacementFieldGroupName, [boolean isRootPrimaryKeyDataSource])\n\n#### Parameters\n\nquery  \n\n<!-- -->\n\nreplacementFieldGroupName  \n\n<!-- -->\n\nisRootPrimaryKeyDataSource  \n\n#### Return Value\n\n### Method queryBuildDataSourceBindingsForRootDS\n\n    public Map queryBuildDataSourceBindingsForRootDS(QueryBuildDataSource rootQueryBuildDataSource, boolean isPrimaryKeyDataSource, str replacementFieldGroupName)\n\n#### Parameters\n\nrootQueryBuildDataSource  \n\n<!-- -->\n\nisPrimaryKeyDataSource  \n\n<!-- -->\n\nreplacementFieldGroupName  \n\n#### Return Value\n\n### Method resolveReference\n\n    public Common resolveReference(Query query, [boolean ignoreAmbiguousReference])\n\n#### Parameters\n\nquery  \n\n<!-- -->\n\nignoreAmbiguousReference  \n\n#### Return Value\n\n### Method surrogateForeignKeyFieldBinding\n\n    public FieldBinding surrogateForeignKeyFieldBinding()\n\n#### Return Value\n\n### Method construct\n\n    public static SurrogateFKReplacementHelper construct(FieldBinding surrogateForeignKeyBinding)\n\n#### Parameters\n\nsurrogateForeignKeyBinding  \n\n#### Return Value\n\n### Method constructForEDT\n\n    public static SurrogateFKReplacementHelper constructForEDT(str edtName)\n\n#### Parameters\n\nedtName  \n\n#### Return Value\n\n### Method constructForPKTable\n\n    public static SurrogateFKReplacementHelper constructForPKTable(str pkTableName)\n\n#### Parameters\n\npkTableName  \n\n#### Return Value\n\n### Method defaultPrimaryKeyQueryDataSourceName\n\n    public static str defaultPrimaryKeyQueryDataSourceName()\n\n#### Return Value\n\n### Method DEPRECATED\\_WorkflowCaption\n\n    public static str DEPRECATED_WorkflowCaption(str tableName, str fieldName, Int64 recIDValue)\n\n#### Parameters\n\ntableName  \n\n<!-- -->\n\nfieldName  \n\n<!-- -->\n\nrecIDValue  \n\n#### Return Value\n\n### Method implicitReplacementFieldGroupName\n\n    public static str implicitReplacementFieldGroupName()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    private void new(FieldBinding surrogateForeignKeyBinding)\n\n#### Parameters\n\nsurrogateForeignKeyBinding  \n\n## Class SysGlobalObjectCache\n    class SysGlobalObjectCache extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                           | Description                                                   |\n|----------------------------------------------------------------------------------|---------------------------------------------------------------|\n| public container find(GlobalObjectCacheScope scope, container key)               |                                                               |\n| public void finalize()                                                           |                                                               |\n| public void remove(GlobalObjectCacheScope scope, container key)                  |                                                               |\n| public void print(GlobalObjectCacheScope scope)                                  |                                                               |\n| public void clear(GlobalObjectCacheScope scope)                                  |                                                               |\n| ::public static void clearAllCaches()                                            |                                                               |\n| public void new()                                                                | Initializes a new instance of the SysGlobalObjectCache class. |\n| public void insert(GlobalObjectCacheScope scope, container key, container value) |                                                               |\n\n### Method find\n\n    public container find(GlobalObjectCacheScope scope, container key)\n\n#### Parameters\n\nscope  \n\n<!-- -->\n\nkey  \n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method remove\n\n    public void remove(GlobalObjectCacheScope scope, container key)\n\n#### Parameters\n\nscope  \n\n<!-- -->\n\nkey  \n\n### Method print\n\n    public void print(GlobalObjectCacheScope scope)\n\n#### Parameters\n\nscope  \n\n### Method clear\n\n    public void clear(GlobalObjectCacheScope scope)\n\n#### Parameters\n\nscope  \n\n### Method clearAllCaches\n\n    public static void clearAllCaches()\n\n### Method new\n\nInitializes a new instance of the SysGlobalObjectCache class.\n\n    public void new()\n\n### Method insert\n\n    public void insert(GlobalObjectCacheScope scope, container key, container value)\n\n#### Parameters\n\nscope  \n\n<!-- -->\n\nkey  \n\n<!-- -->\n\nvalue  \n\n## Class SystemMonitor\n    class SystemMonitor extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                | Description                                            |\n|-----------------------------------------------------------------------|--------------------------------------------------------|\n| ::public static container allClientCounters()                         |                                                        |\n| ::public static container allServerCounters()                         |                                                        |\n| ::public static int getClientCounter(SystemMonitorCounter counter)    |                                                        |\n| ::public static container getClientInternals()                        |                                                        |\n| ::public static int getCounter(SystemMonitorCounter counter)          |                                                        |\n| ::public static int getServerCounter(SystemMonitorCounter counter)    |                                                        |\n| ::public static container getServerInternals()                        |                                                        |\n| ::public static boolean isRunning()                                   |                                                        |\n| ::public static boolean isServerCounter(SystemMonitorCounter counter) |                                                        |\n| ::public static container sqlDump()                                   |                                                        |\n| ::public static void systemDump(boolean includeSQL)                   |                                                        |\n| ::public static void start()                                          |                                                        |\n| ::public static void resetServer()                                    |                                                        |\n| ::public static void stop()                                           |                                                        |\n| public void new()                                                     | Initializes a new instance of the SystemMonitor class. |\n| public void finalize()                                                |                                                        |\n| ::public static void reset()                                          |                                                        |\n| ::public static void resetClient()                                    |                                                        |\n\n### Method allClientCounters\n\n    public static container allClientCounters()\n\n#### Return Value\n\n### Method allServerCounters\n\n    public static container allServerCounters()\n\n#### Return Value\n\n### Method getClientCounter\n\n    public static int getClientCounter(SystemMonitorCounter counter)\n\n#### Parameters\n\ncounter  \n\n#### Return Value\n\n### Method getClientInternals\n\n    public static container getClientInternals()\n\n#### Return Value\n\n### Method getCounter\n\n    public static int getCounter(SystemMonitorCounter counter)\n\n#### Parameters\n\ncounter  \n\n#### Return Value\n\n### Method getServerCounter\n\n    public static int getServerCounter(SystemMonitorCounter counter)\n\n#### Parameters\n\ncounter  \n\n#### Return Value\n\n### Method getServerInternals\n\n    public static container getServerInternals()\n\n#### Return Value\n\n### Method isRunning\n\n    public static boolean isRunning()\n\n#### Return Value\n\n### Method isServerCounter\n\n    public static boolean isServerCounter(SystemMonitorCounter counter)\n\n#### Parameters\n\ncounter  \n\n#### Return Value\n\n### Method sqlDump\n\n    public static container sqlDump()\n\n#### Return Value\n\n### Method systemDump\n\n    public static void systemDump(boolean includeSQL)\n\n#### Parameters\n\nincludeSQL  \n\n### Method start\n\n    public static void start()\n\n### Method resetServer\n\n    public static void resetServer()\n\n### Method stop\n\n    public static void stop()\n\n### Method new\n\nInitializes a new instance of the SystemMonitor class.\n\n    public void new()\n\n### Method finalize\n\n    public void finalize()\n\n### Method reset\n\n    public static void reset()\n\n### Method resetClient\n\n    public static void resetClient()\n\n## Class systemSequence\n    class systemSequence extends Object\n\nThe systemSequence class takes manual control of the system sequence generator and delivers unique RecIds for all SQL tables.\n\n### Remarks\n\nWhen records are inserted into SQL tables, a unique RecId is assigned to each record—regardless of the company each record is associated with. Use extreme caution when you use this class—data integrity could be destroyed. This class is typically used for data import or export routines, or for very large jobs. The record ID is an int64 data type value. The range in which record IDs are allocated is from 5637144576 to 2^63 (9223372036854775808). RecIds can be used up prematurely if large, unused ranges of RecIds are created. Reclaiming unused ranges of RecIds that lie between used ranges of RecIds is a very complicated process.\n\n### Examples\n\nThe following example reserves the int64max value for the CustTable table.\n\n    static public void Main(Args _args) \n    { \n        systemSequence seq; \n        seq = new SystemSequence(); \n        if (seq) \n        { \n            // Allocate 20 recordIds for CustTable table. \n            seq.reserveValues(20, tablenum(CustTable)); \n            // Suspend automatic recId allocation. \n            Seq.suspendRecIds(tablenum(CustTable)); \n            // Manually generate recIds in the range allocated. \n            // Remove the recId suspension. \n            Seq.removeRecIdSuspension(); \n          } \n    }\n\n### Methods\n\n| Method                                                             | Description                                                                                                                     |\n|--------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| public Int64 flushValues(TableId tableId)                          | Flushes the reserved recIds from the System Sequence cache for a given table                                                    |\n| public Int64 reserveTransids(Int64 nReserved, \\[TableId tableId\\]) |                                                                                                                                 |\n| public Int64 reserveValues(Int64 nReserved, TableId tableId)       | Preallocates a range of recIds that can be allocated to new records when the automatic assignment of recIds has been suspended. |\n| public void suspendTransIds(TableId tableId)                       |                                                                                                                                 |\n| public void suspendRecIds(TableId tableId)                         |                                                                                                                                 |\n| public void removeRecIdSuspension(\\[TableId tableId\\])             |                                                                                                                                 |\n| public void new()                                                  | Initializes a new instance of the systemSequence class.                                                                         |\n| public void removeTransIdSuspension(\\[TableId tableId\\])           |                                                                                                                                 |\n\n### Method flushValues\n\nFlushes the reserved recIds from the System Sequence cache for a given table\n\n    public Int64 flushValues(TableId tableId)\n\n#### Parameters\n\ntableId  \n\n#### Return Value\n\nThe number of recIds flushed from the cache.\n\n#### Remarks\n\nSubsequent inserts on the table reserve the recIds for the table and System Sequence cache is populated with the reserved range of recIds for the table.\n\n### Method reserveTransids\n\n    public Int64 reserveTransids(Int64 nReserved, [TableId tableId])\n\n#### Parameters\n\nnReserved  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\n### Method reserveValues\n\nPreallocates a range of recIds that can be allocated to new records when the automatic assignment of recIds has been suspended.\n\n    public Int64 reserveValues(Int64 nReserved, TableId tableId)\n\n#### Parameters\n\nnReserved  \n\n<!-- -->\n\ntableId  \n\n#### Return Value\n\nThe first usable reserved recId.\n\n#### Remarks\n\nThe range of recIds that you reserved are reserved immediately.\n\n### Method suspendTransIds\n\n    public void suspendTransIds(TableId tableId)\n\n#### Parameters\n\ntableId  \n\n### Method suspendRecIds\n\n    public void suspendRecIds(TableId tableId)\n\n#### Parameters\n\ntableId  \n\n### Method removeRecIdSuspension\n\n    public void removeRecIdSuspension([TableId tableId])\n\n#### Parameters\n\ntableId  \n\n### Method new\n\nInitializes a new instance of the systemSequence class.\n\n    public void new()\n\n### Method removeTransIdSuspension\n\n    public void removeTransIdSuspension([TableId tableId])\n\n#### Parameters\n\ntableId  \n\n\n\n\n\n","nodes":[{"pos":[4,613],"embed":true,"content":"# required metadata\n\ntitle: S Classes\ndescription: System API classes that start with the letter S.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 51751\nms.assetid: cb7c0fd3-34ec-407b-ad78-1007a67d70d5\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n","nodes":[{"content":"S Classes","nodes":[{"pos":[0,9],"content":"S Classes","nodes":[{"content":"S Classes","pos":[0,9]}]}],"path":["title"]},{"content":"System API classes that start with the letter S.","nodes":[{"pos":[0,48],"content":"System API classes that start with the letter S.","nodes":[{"content":"System API classes that start with the letter S.","pos":[0,48]}]}],"path":["description"]}],"header":"# required metadata\n","yml":true},{"pos":[621,630],"content":"S Classes","linkify":"S Classes","nodes":[{"content":"S Classes","pos":[0,9]}]},{"content":"System API classes that start with the letter S.","pos":[676,724]},{"pos":[726,744],"content":"Class ScannerClass","linkify":"Class ScannerClass","nodes":[{"content":"Class ScannerClass","pos":[0,18]}]},{"pos":[808,815],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[821,829],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[835,842],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[846,852]},{"content":"Description","pos":[941,952]},{"content":"public int col()","pos":[1140,1156]},{"content":"public Date dateValue()","pos":[1287,1310]},{"content":"public int firstSymbol()","pos":[1434,1458]},{"content":"public Int64 int64Value()","pos":[1581,1606]},{"content":"public int intValue()","pos":[1728,1749]},{"content":"public int line()","pos":[1875,1892]},{"content":"public int nextSymbol()","pos":[2022,2045]},{"content":"public Real realValue()","pos":[2169,2192]},{"content":"public int startColumn()","pos":[2316,2340]},{"content":"public str string()","pos":[2463,2482]},{"content":"public str strValue()","pos":[2610,2631]},{"content":"public void localMacroDefine(str text, int startLine, int startPos, int endLine, int endPos)","pos":[2757,2849]},{"content":"public void lineComment(str text, int startLine, int startPos, int endLine, int endPos)","pos":[2904,2991]},{"content":"public void macroDefine(str text, int startLine, int startPos, int endLine, int endPos)","pos":[3051,3138]},{"content":"public void new(str source)","pos":[3198,3225]},{"content":"Initializes a new instance of the Object class.","pos":[3293,3340]},{"content":"public void comment(str text, int startLine, int startPos, int endLine, int endPos)","pos":[3345,3428]},{"pos":[3495,3505],"content":"Method col","linkify":"Method col","nodes":[{"content":"Method col","pos":[0,10]}]},{"pos":[3534,3546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3552,3568],"content":"Method dateValue","linkify":"Method dateValue","nodes":[{"content":"Method dateValue","pos":[0,16]}]},{"pos":[3604,3616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3622,3640],"content":"Method firstSymbol","linkify":"Method firstSymbol","nodes":[{"content":"Method firstSymbol","pos":[0,18]}]},{"pos":[3677,3689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3695,3712],"content":"Method int64Value","linkify":"Method int64Value","nodes":[{"content":"Method int64Value","pos":[0,17]}]},{"pos":[3750,3762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3768,3783],"content":"Method intValue","linkify":"Method intValue","nodes":[{"content":"Method intValue","pos":[0,15]}]},{"pos":[3817,3829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3835,3846],"content":"Method line","linkify":"Method line","nodes":[{"content":"Method line","pos":[0,11]}]},{"pos":[3876,3888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3894,3911],"content":"Method nextSymbol","linkify":"Method nextSymbol","nodes":[{"content":"Method nextSymbol","pos":[0,17]}]},{"pos":[3947,3959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3965,3981],"content":"Method realValue","linkify":"Method realValue","nodes":[{"content":"Method realValue","pos":[0,16]}]},{"pos":[4017,4029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4035,4053],"content":"Method startColumn","linkify":"Method startColumn","nodes":[{"content":"Method startColumn","pos":[0,18]}]},{"pos":[4090,4102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4108,4121],"content":"Method string","linkify":"Method string","nodes":[{"content":"Method string","pos":[0,13]}]},{"pos":[4153,4165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4171,4186],"content":"Method strValue","linkify":"Method strValue","nodes":[{"content":"Method strValue","pos":[0,15]}]},{"pos":[4220,4232],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4238,4261],"content":"Method localMacroDefine","linkify":"Method localMacroDefine","nodes":[{"content":"Method localMacroDefine","pos":[0,23]}]},{"pos":[4366,4376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[4378,4382]},{"content":"startLine","pos":[4396,4405]},{"content":"startPos","pos":[4419,4427]},{"content":"endLine","pos":[4441,4448]},{"content":"endPos","pos":[4462,4468]},{"pos":[4476,4494],"content":"Method lineComment","linkify":"Method lineComment","nodes":[{"content":"Method lineComment","pos":[0,18]}]},{"pos":[4594,4604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[4606,4610]},{"content":"startLine","pos":[4624,4633]},{"content":"startPos","pos":[4647,4655]},{"content":"endLine","pos":[4669,4676]},{"content":"endPos","pos":[4690,4696]},{"pos":[4704,4722],"content":"Method macroDefine","linkify":"Method macroDefine","nodes":[{"content":"Method macroDefine","pos":[0,18]}]},{"pos":[4822,4832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[4834,4838]},{"content":"startLine","pos":[4852,4861]},{"content":"startPos","pos":[4875,4883]},{"content":"endLine","pos":[4897,4904]},{"content":"endPos","pos":[4918,4924]},{"pos":[4932,4942],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[4944,4991]},{"pos":[5031,5041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"source","pos":[5043,5049]},{"pos":[5057,5071],"content":"Method comment","linkify":"Method comment","nodes":[{"content":"Method comment","pos":[0,14]}]},{"pos":[5167,5177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[5179,5183]},{"content":"startLine","pos":[5197,5206]},{"content":"startPos","pos":[5220,5228]},{"content":"endLine","pos":[5242,5249]},{"content":"endPos","pos":[5263,5269]},{"pos":[5276,5292],"content":"Class SearchParm","linkify":"Class SearchParm","nodes":[{"content":"Class SearchParm","pos":[0,16]}]},{"content":"The SearchParm class serves as an interface between the kernel and the sysTreeSearch class, and enables searches in the  Application Object Tree (AOT).","pos":[5330,5481]},{"pos":[5487,5494],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5500,5508],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[5514,5521],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[5525,5531]},{"content":"Description","pos":[5575,5586]},{"content":"public str nodeName(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>)","pos":[5657,5690],"source":"public str nodeName(\\[str name\\])"},{"content":"public int nodeType(<ph id=\"ph1\">\\[</ph>int type<ph id=\"ph2\">\\]</ph>)","pos":[5723,5756],"source":"public int nodeType(\\[int type\\])"},{"content":"public str nodeTypeArray()","pos":[5789,5815]},{"content":"public str propertyName(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>)","pos":[5855,5892],"source":"public str propertyName(\\[str name\\])"},{"content":"public str propertyValue(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[5921,5960],"source":"public str propertyValue(\\[str value\\])"},{"content":"public str replaceString(<ph id=\"ph1\">\\[</ph>str replaceString<ph id=\"ph2\">\\]</ph>)","pos":[5987,6034],"source":"public str replaceString(\\[str replaceString\\])"},{"content":"public int searchFlag(<ph id=\"ph1\">\\[</ph>int flag<ph id=\"ph2\">\\]</ph>)","pos":[6053,6088],"source":"public int searchFlag(\\[int flag\\])"},{"content":"public str searchString(<ph id=\"ph1\">\\[</ph>str searchString<ph id=\"ph2\">\\]</ph>)","pos":[6119,6164],"source":"public str searchString(\\[str searchString\\])"},{"content":"public int searchType(<ph id=\"ph1\">\\[</ph>int type<ph id=\"ph2\">\\]</ph>)","pos":[6185,6220],"source":"public int searchType(\\[int type\\])"},{"content":"public boolean startSearch()","pos":[6251,6279]},{"content":"public TreeNode topNode(<ph id=\"ph1\">\\[</ph>TreeNode node<ph id=\"ph2\">\\]</ph>)","pos":[6317,6359],"source":"public TreeNode topNode(\\[TreeNode node\\])"},{"content":"public str topNodeName(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>)","pos":[6383,6419],"source":"public str topNodeName(\\[str name\\])"},{"content":"public int topNodeType(<ph id=\"ph1\">\\[</ph>int type<ph id=\"ph2\">\\]</ph>)","pos":[6449,6485],"source":"public int topNodeType(\\[int type\\])"},{"content":"public void preSearch()","pos":[6515,6538]},{"content":"public void killSearch()","pos":[6581,6605]},{"pos":[6650,6665],"content":"Method nodeName","linkify":"Method nodeName","nodes":[{"content":"Method nodeName","pos":[0,15]}]},{"pos":[6709,6719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[6721,6725]},{"pos":[6734,6746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6752,6767],"content":"Method nodeType","linkify":"Method nodeType","nodes":[{"content":"Method nodeType","pos":[0,15]}]},{"pos":[6811,6821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[6823,6827]},{"pos":[6836,6848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6854,6874],"content":"Method nodeTypeArray","linkify":"Method nodeTypeArray","nodes":[{"content":"Method nodeTypeArray","pos":[0,20]}]},{"pos":[6913,6925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6931,6950],"content":"Method propertyName","linkify":"Method propertyName","nodes":[{"content":"Method propertyName","pos":[0,19]}]},{"pos":[6998,7008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[7010,7014]},{"pos":[7023,7035],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7041,7061],"content":"Method propertyValue","linkify":"Method propertyValue","nodes":[{"content":"Method propertyValue","pos":[0,20]}]},{"pos":[7111,7121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[7123,7128]},{"pos":[7137,7149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7155,7175],"content":"Method replaceString","linkify":"Method replaceString","nodes":[{"content":"Method replaceString","pos":[0,20]}]},{"pos":[7233,7243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"replaceString","pos":[7245,7258]},{"pos":[7267,7279],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7285,7302],"content":"Method searchFlag","linkify":"Method searchFlag","nodes":[{"content":"Method searchFlag","pos":[0,17]}]},{"pos":[7348,7358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flag","pos":[7360,7364]},{"pos":[7373,7385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7391,7410],"content":"Method searchString","linkify":"Method searchString","nodes":[{"content":"Method searchString","pos":[0,19]}]},{"pos":[7466,7476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchString","pos":[7478,7490]},{"pos":[7499,7511],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7517,7534],"content":"Method searchType","linkify":"Method searchType","nodes":[{"content":"Method searchType","pos":[0,17]}]},{"pos":[7580,7590],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[7592,7596]},{"pos":[7605,7617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7623,7641],"content":"Method startSearch","linkify":"Method startSearch","nodes":[{"content":"Method startSearch","pos":[0,18]}]},{"pos":[7682,7694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7700,7714],"content":"Method topNode","linkify":"Method topNode","nodes":[{"content":"Method topNode","pos":[0,14]}]},{"pos":[7767,7777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[7779,7783]},{"pos":[7792,7804],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7810,7828],"content":"Method topNodeName","linkify":"Method topNodeName","nodes":[{"content":"Method topNodeName","pos":[0,18]}]},{"pos":[7875,7885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[7887,7891]},{"pos":[7900,7912],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7918,7936],"content":"Method topNodeType","linkify":"Method topNodeType","nodes":[{"content":"Method topNodeType","pos":[0,18]}]},{"pos":[7983,7993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[7995,7999]},{"pos":[8008,8020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[8026,8042],"content":"Method preSearch","linkify":"Method preSearch","nodes":[{"content":"Method preSearch","pos":[0,16]}]},{"pos":[8077,8094],"content":"Method killSearch","linkify":"Method killSearch","nodes":[{"content":"Method killSearch","pos":[0,17]}]},{"pos":[8129,8145],"content":"Class SecureNode","linkify":"Class SecureNode","nodes":[{"content":"Class SecureNode","pos":[0,16]}]},{"content":"The SecureNode class lets you create, read, update, and delete X++ code and metadata.","pos":[8185,8270]},{"pos":[8276,8283],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[8285,8395]},{"pos":[8401,8409],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[8415,8422],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[8426,8432]},{"content":"Description","pos":[8508,8519]},{"content":"public boolean checkAccessRights()","pos":[8742,8776]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[8900,8972],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[8982,9049]},{"content":"public ConfigurationKeyId countryConfigurationkey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[9058,9137],"source":"public ConfigurationKeyId countryConfigurationkey(\\[ConfigurationKeyId value\\])"},{"content":"public boolean extendedDataSecurity(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[9216,9270],"source":"public boolean extendedDataSecurity(\\[boolean value\\])"},{"content":"public boolean isWeb()","pos":[9374,9396]},{"content":"public int neededAccessLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[9532,9575],"source":"public int neededAccessLevel(\\[int value\\])"},{"content":"Gets or sets the neededAccessLevel property for the MenuFunction class.","pos":[9614,9685]},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[9690,9747],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public ConfigurationKeyId webConfigurationkey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[9848,9923],"source":"public ConfigurationKeyId webConfigurationkey(\\[ConfigurationKeyId value\\])"},{"pos":[10009,10033],"content":"Method checkAccessRights","linkify":"Method checkAccessRights","nodes":[{"content":"Method checkAccessRights","pos":[0,24]}]},{"pos":[10080,10092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10098,10121],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[10123,10190]},{"pos":[10273,10283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[10285,10290]},{"pos":[10299,10311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[10313,10385]},{"pos":[10392,10399],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[10401,10482]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[10483,10576]},{"pos":[10582,10612],"content":"Method countryConfigurationkey","linkify":"Method countryConfigurationkey","nodes":[{"content":"Method countryConfigurationkey","pos":[0,30]}]},{"pos":[10702,10712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[10714,10719]},{"pos":[10728,10740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10746,10773],"content":"Method extendedDataSecurity","linkify":"Method extendedDataSecurity","nodes":[{"content":"Method extendedDataSecurity","pos":[0,27]}]},{"pos":[10838,10848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[10850,10855]},{"pos":[10864,10876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10882,10894],"content":"Method isWeb","linkify":"Method isWeb","nodes":[{"content":"Method isWeb","pos":[0,12]}]},{"pos":[10929,10941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10947,10971],"content":"Method neededAccessLevel","linkify":"Method neededAccessLevel","nodes":[{"content":"Method neededAccessLevel","pos":[0,24]}]},{"content":"Gets or sets the neededAccessLevel property for the MenuFunction class.","pos":[10973,11044]},{"pos":[11098,11108],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[11110,11115]},{"pos":[11124,11136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the neededAccessLevel property.","pos":[11138,11190]},{"pos":[11197,11204],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible values for the AccessType system enumuration value are as follows:","pos":[11206,11285]},{"content":"AccessType::NoAccess.","pos":[11291,11312]},{"content":"AccessType::View.","pos":[11317,11334]},{"content":"AccessType::Edit.","pos":[11339,11356]},{"content":"AccessType::Add.","pos":[11361,11377]},{"content":"AccessType::Delete.","pos":[11382,11401]},{"pos":[11407,11425],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[11493,11503],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[11505,11510]},{"pos":[11519,11531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11537,11563],"content":"Method webConfigurationkey","linkify":"Method webConfigurationkey","nodes":[{"content":"Method webConfigurationkey","pos":[0,26]}]},{"pos":[11649,11659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[11661,11666]},{"pos":[11675,11687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11692,11713],"content":"Class SecurityContext","linkify":"Class SecurityContext","nodes":[{"content":"Class SecurityContext","pos":[0,21]}]},{"pos":[11760,11767],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11773,11781],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[11787,11794],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[11798,11804]},{"content":"Description","pos":[11902,11913]},{"content":"public boolean isTableOperationAllowed(int tableId, StatementType operation, <ph id=\"ph1\">\\[</ph>DataAreaId dataArea<ph id=\"ph2\">\\]</ph>)","pos":[12038,12139],"source":"public boolean isTableOperationAllowed(int tableId, StatementType operation, \\[DataAreaId dataArea\\])"},{"content":"::public static SecurityContext current()","pos":[12158,12199]},{"content":"::public static SecurityContext constructFromEntryPoint(SecurableType type, str name, str childName)","pos":[12278,12378]},{"content":"public boolean equal(SecurityContext context)","pos":[12398,12443]},{"content":"public SecurableType securableType()","pos":[12518,12554]},{"content":"public str securableName()","pos":[12638,12664]},{"content":"public str securableChildName()","pos":[12758,12789]},{"content":"public void push()","pos":[12878,12896]},{"content":"::public static void pop()","pos":[12998,13024]},{"content":"private void new()","pos":[13118,13136]},{"pos":[13241,13271],"content":"Method isTableOperationAllowed","linkify":"Method isTableOperationAllowed","nodes":[{"content":"Method isTableOperationAllowed","pos":[0,30]}]},{"pos":[13383,13393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[13395,13402]},{"content":"operation","pos":[13416,13425]},{"content":"dataArea","pos":[13439,13447]},{"pos":[13456,13468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13474,13488],"content":"Method current","linkify":"Method current","nodes":[{"content":"Method current","pos":[0,14]}]},{"pos":[13540,13552],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13558,13588],"content":"Method constructFromEntryPoint","linkify":"Method constructFromEntryPoint","nodes":[{"content":"Method constructFromEntryPoint","pos":[0,30]}]},{"pos":[13699,13709],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[13711,13715]},{"content":"name","pos":[13729,13733]},{"content":"childName","pos":[13747,13756]},{"pos":[13765,13777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13783,13795],"content":"Method equal","linkify":"Method equal","nodes":[{"content":"Method equal","pos":[0,12]}]},{"pos":[13853,13863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"context","pos":[13865,13872]},{"pos":[13881,13893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13899,13919],"content":"Method securableType","linkify":"Method securableType","nodes":[{"content":"Method securableType","pos":[0,20]}]},{"pos":[13968,13980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13986,14006],"content":"Method securableName","linkify":"Method securableName","nodes":[{"content":"Method securableName","pos":[0,20]}]},{"pos":[14045,14057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14063,14088],"content":"Method securableChildName","linkify":"Method securableChildName","nodes":[{"content":"Method securableChildName","pos":[0,25]}]},{"pos":[14132,14144],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14150,14161],"content":"Method push","linkify":"Method push","nodes":[{"content":"Method push","pos":[0,11]}]},{"pos":[14191,14201],"content":"Method pop","linkify":"Method pop","nodes":[{"content":"Method pop","pos":[0,10]}]},{"pos":[14237,14247],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[14276,14296],"content":"Class SecurityPolicy","linkify":"Class SecurityPolicy","nodes":[{"content":"Class SecurityPolicy","pos":[0,20]}]},{"content":"The SecurityPolicy class holds the information about the security policies.","pos":[14338,14413]},{"pos":[14419,14426],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14432,14440],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[14446,14453],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[14457,14463]},{"content":"Description","pos":[14530,14541]},{"content":"::public static void synchronizeAllPolicies()","pos":[14723,14768]},{"content":"::public static void synchronizePolicy(UtilElementName securityPolicy)","pos":[14856,14926]},{"content":"public void new()","pos":[14989,15006]},{"content":"Initializes a new instance of the SecurityPolicy class.","pos":[15062,15117]},{"pos":[15125,15154],"content":"Method synchronizeAllPolicies","linkify":"Method synchronizeAllPolicies","nodes":[{"content":"Method synchronizeAllPolicies","pos":[0,29]}]},{"pos":[15209,15233],"content":"Method synchronizePolicy","linkify":"Method synchronizePolicy","nodes":[{"content":"Method synchronizePolicy","pos":[0,24]}]},{"pos":[15314,15324],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"securityPolicy","pos":[15326,15340]},{"pos":[15348,15358],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the SecurityPolicy class.","pos":[15360,15415]},{"pos":[15443,15463],"content":"Class SecurityRights","linkify":"Class SecurityRights","nodes":[{"content":"Class SecurityRights","pos":[0,20]}]},{"content":"The SecurityRights class holds the information about the security rights and permissions management.","pos":[15505,15605]},{"pos":[15611,15618],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[15624,15632],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[15638,15645],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[15649,15655]},{"content":"Description","pos":[15834,15845]},{"content":"public boolean hasDataServiceAccess(SecurableName name, StatementType operation, <ph id=\"ph1\">\\[</ph>SecurableChildName fieldName<ph id=\"ph2\">\\]</ph>)","pos":[16169,16283],"source":"public boolean hasDataServiceAccess(SecurableName name, StatementType operation, \\[SecurableChildName fieldName\\])"},{"content":"public boolean hasDataServiceMethodAccess(SecurableName name, StatementType operation, SecurableChildName methodName)","pos":[16429,16546]},{"content":"public AccessRight dataManagementAccessRight(SecurableName dataEntityName, <ph id=\"ph1\">\\[</ph>SecurableChildName fieldName<ph id=\"ph2\">\\]</ph>)","pos":[16689,16797],"source":"public AccessRight dataManagementAccessRight(SecurableName dataEntityName, \\[SecurableChildName fieldName\\])"},{"content":"public str listDataServiceAccess(SecurableName name, <ph id=\"ph1\">\\[</ph>SecurableChildName context<ph id=\"ph2\">\\]</ph>)","pos":[16949,17033],"source":"public str listDataServiceAccess(SecurableName name, \\[SecurableChildName context\\])"},{"content":"public AccessRight fieldAccessRight(TableName tableName, FieldName fieldName, <ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>DataAreaId dataArea<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean includeDerived<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>AutoAuthzMode autoAuthzMode<ph id=\"ph8\">\\]</ph>)","pos":[17209,17391],"source":"public AccessRight fieldAccessRight(TableName tableName, FieldName fieldName, \\[Common record\\], \\[DataAreaId dataArea\\], \\[boolean includeDerived\\], \\[AutoAuthzMode autoAuthzMode\\])"},{"content":"Retrieves the access rights for the field of the table.","pos":[17394,17449]},{"content":"public AccessRight formControlAccessRight(FormName form, UtilElementName control, <ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>DataAreaId dataArea<ph id=\"ph4\">\\]</ph>)","pos":[17469,17594],"source":"public AccessRight formControlAccessRight(FormName form, UtilElementName control, \\[Common record\\], \\[DataAreaId dataArea\\])"},{"content":"Retrieves the access rights for the form control.","pos":[17654,17703]},{"content":"public container getSelectableCompanies()","pos":[17729,17770]},{"content":"public boolean hasMenuAccess(MenuName menu, <ph id=\"ph1\">\\[</ph>boolean isWebMenu<ph id=\"ph2\">\\]</ph>)","pos":[17989,18055],"source":"public boolean hasMenuAccess(MenuName menu, \\[boolean isWebMenu\\])"},{"content":"Checks whether the user has access to the specified menu.","pos":[18174,18231]},{"content":"public boolean hasMenuItemAccess(SecurableType type, MenuItemName menuItem, <ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>DataAreaId dataArea<ph id=\"ph4\">\\]</ph>)","pos":[18249,18368],"source":"public boolean hasMenuItemAccess(SecurableType type, MenuItemName menuItem, \\[Common record\\], \\[DataAreaId dataArea\\])"},{"content":"Checks whether the user has access to the specified menu item.","pos":[18434,18496]},{"content":"public boolean SysObsoleteAttribute(ClassName class, MethodName method)","pos":[18509,18580]},{"content":"public boolean hasServiceOperationAccess(UtilElementName service, UtilElementName operation)","pos":[18769,18861]},{"content":"Checks whether the user has access to the specified service operation.","pos":[18954,19024]},{"content":"public boolean isDeveloper()","pos":[19029,19057]},{"content":"public boolean isSystemAdministrator()","pos":[19289,19327]},{"content":"Checks whether the current user is a system administrator.","pos":[19474,19532]},{"content":"public AccessRight menuItemAccessRight(SecurableType type, MenuItemName menuItem, <ph id=\"ph1\">\\[</ph>DataAreaId dataArea<ph id=\"ph2\">\\]</ph>)","pos":[19549,19655],"source":"public AccessRight menuItemAccessRight(SecurableType type, MenuItemName menuItem, \\[DataAreaId dataArea\\])"},{"content":"Retrieves the access rights for the menu item.","pos":[19734,19780]},{"content":"public AccessRight tableAccessRight(TableName tableName, <ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>DataAreaId dataArea<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean includeDerived<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>AutoAuthzMode autoAuthzMode<ph id=\"ph8\">\\]</ph>)","pos":[19809,19970],"source":"public AccessRight tableAccessRight(TableName tableName, \\[Common record\\], \\[DataAreaId dataArea\\], \\[boolean includeDerived\\], \\[AutoAuthzMode autoAuthzMode\\])"},{"content":"Retrieves the access rights for the table.","pos":[19994,20036]},{"content":"public SecurityTableRights tableFieldAccessRights(TableName tableName, <ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>DataAreaId dataArea<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean includeDerived<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>AutoAuthzMode autoAuthzMode<ph id=\"ph8\">\\]</ph>)","pos":[20069,20244],"source":"public SecurityTableRights tableFieldAccessRights(TableName tableName, \\[Common record\\], \\[DataAreaId dataArea\\], \\[boolean includeDerived\\], \\[AutoAuthzMode autoAuthzMode\\])"},{"content":"Retrieves the field access rights for the table.","pos":[20254,20302]},{"content":"public Set variableAccessFields(TableName tableName, <ph id=\"ph1\">\\[</ph>AccessRight targetAccess<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>DataAreaId dataArea<ph id=\"ph4\">\\]</ph>)","pos":[20329,20436],"source":"public Set variableAccessFields(TableName tableName, \\[AccessRight targetAccess\\], \\[DataAreaId dataArea\\])"},{"content":"Retrieves a set of the table field IDs.","pos":[20514,20553]},{"content":"public AccessRight webContentAccessRight(SecurableType type, WebContentItemName name)","pos":[20589,20674]},{"content":"Retrieves the access rights for the web content item.","pos":[20774,20827]},{"content":"::public static SecurityRights construct()","pos":[20849,20891]},{"content":"Creates a new security rights instance for the current user.","pos":[21034,21094]},{"content":"::public static SecurityRights newUser(UserId user)","pos":[21109,21160]},{"content":"Creates a new security rights instance for the specified user.","pos":[21294,21356]},{"content":"private void new()","pos":[21369,21387]},{"content":"Initializes a new instance of the SecurityRights class.","pos":[21554,21609]},{"content":"public void populateSelectableCompanies()","pos":[21629,21670]},{"content":"Populates the selectable companies.","pos":[21814,21849]},{"pos":[21892,21919],"content":"Method hasDataServiceAccess","linkify":"Method hasDataServiceAccess","nodes":[{"content":"Method hasDataServiceAccess","pos":[0,27]}]},{"pos":[22044,22054],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[22056,22060]},{"content":"operation","pos":[22074,22083]},{"content":"fieldName","pos":[22097,22106]},{"pos":[22115,22127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22133,22166],"content":"Method hasDataServiceMethodAccess","linkify":"Method hasDataServiceMethodAccess","nodes":[{"content":"Method hasDataServiceMethodAccess","pos":[0,33]}]},{"pos":[22296,22306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[22308,22312]},{"content":"operation","pos":[22326,22335]},{"content":"methodName","pos":[22349,22359]},{"pos":[22368,22380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22386,22418],"content":"Method dataManagementAccessRight","linkify":"Method dataManagementAccessRight","nodes":[{"content":"Method dataManagementAccessRight","pos":[0,32]}]},{"pos":[22537,22547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataEntityName","pos":[22549,22563]},{"content":"fieldName","pos":[22577,22586]},{"pos":[22595,22607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22613,22641],"content":"Method listDataServiceAccess","linkify":"Method listDataServiceAccess","nodes":[{"content":"Method listDataServiceAccess","pos":[0,28]}]},{"pos":[22736,22746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[22748,22752]},{"content":"context","pos":[22766,22773]},{"pos":[22782,22794],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22800,22823],"content":"Method fieldAccessRight","linkify":"Method fieldAccessRight","nodes":[{"content":"Method fieldAccessRight","pos":[0,23]}]},{"content":"Retrieves the access rights for the field of the table.","pos":[22825,22880]},{"pos":[23067,23077],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableName","pos":[23079,23088]},{"content":"fieldName","pos":[23102,23111]},{"content":"record","pos":[23125,23131]},{"content":"dataArea","pos":[23145,23153]},{"content":"includeDerived","pos":[23167,23181]},{"content":"autoAuthzMode","pos":[23195,23208]},{"pos":[23217,23229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The AccesRight instance for the field of the table.","pos":[23231,23282]},{"pos":[23288,23317],"content":"Method formControlAccessRight","linkify":"Method formControlAccessRight","nodes":[{"content":"Method formControlAccessRight","pos":[0,29]}]},{"content":"Retrieves the access rights for the form control.","pos":[23319,23368]},{"pos":[23502,23512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[23514,23518]},{"content":"control","pos":[23532,23539]},{"content":"record","pos":[23553,23559]},{"content":"dataArea","pos":[23573,23581]},{"pos":[23590,23602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The AccesRight instance for the form control.","pos":[23604,23649]},{"pos":[23655,23684],"content":"Method getSelectableCompanies","linkify":"Method getSelectableCompanies","nodes":[{"content":"Method getSelectableCompanies","pos":[0,29]}]},{"pos":[23738,23750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23756,23776],"content":"Method hasMenuAccess","linkify":"Method hasMenuAccess","nodes":[{"content":"Method hasMenuAccess","pos":[0,20]}]},{"content":"Checks whether the user has access to the specified menu.","pos":[23778,23835]},{"pos":[23912,23922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menu","pos":[23924,23928]},{"content":"isWebMenu","pos":[23942,23951]},{"pos":[23960,23972],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the user has access to the menu; otherwise, false.","pos":[23974,24032]},{"pos":[24038,24062],"content":"Method hasMenuItemAccess","linkify":"Method hasMenuItemAccess","nodes":[{"content":"Method hasMenuItemAccess","pos":[0,24]}]},{"content":"Checks whether the user has access to the specified menu item.","pos":[24064,24126]},{"pos":[24254,24264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[24266,24270]},{"content":"menuItem","pos":[24284,24292]},{"content":"record","pos":[24306,24312]},{"content":"dataArea","pos":[24326,24334]},{"pos":[24343,24355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the user has access to the menu item; otherwise, false.","pos":[24357,24420]},{"pos":[24426,24453],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[24537,24547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"class","pos":[24549,24554]},{"content":"method","pos":[24568,24574]},{"pos":[24583,24595],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24601,24633],"content":"Method hasServiceOperationAccess","linkify":"Method hasServiceOperationAccess","nodes":[{"content":"Method hasServiceOperationAccess","pos":[0,32]}]},{"content":"Checks whether the user has access to the specified service operation.","pos":[24635,24705]},{"pos":[24810,24820],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"service","pos":[24822,24829]},{"content":"operation","pos":[24843,24852]},{"pos":[24861,24873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if user has access to the service operation; otherwise, false.","pos":[24875,24942]},{"pos":[24948,24966],"content":"Method isDeveloper","linkify":"Method isDeveloper","nodes":[{"content":"Method isDeveloper","pos":[0,18]}]},{"pos":[25007,25019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25025,25053],"content":"Method isSystemAdministrator","linkify":"Method isSystemAdministrator","nodes":[{"content":"Method isSystemAdministrator","pos":[0,28]}]},{"content":"Checks whether the current user is a system administrator.","pos":[25055,25113]},{"pos":[25164,25176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the current user is a system administrator; otherwise, false.","pos":[25178,25247]},{"pos":[25253,25279],"content":"Method menuItemAccessRight","linkify":"Method menuItemAccessRight","nodes":[{"content":"Method menuItemAccessRight","pos":[0,26]}]},{"content":"Retrieves the access rights for the menu item.","pos":[25281,25327]},{"pos":[25444,25454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[25456,25460]},{"content":"menuItem","pos":[25474,25482]},{"content":"dataArea","pos":[25496,25504]},{"pos":[25513,25525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The AccesRight instance for the item.","pos":[25527,25564]},{"pos":[25570,25593],"content":"Method tableAccessRight","linkify":"Method tableAccessRight","nodes":[{"content":"Method tableAccessRight","pos":[0,23]}]},{"content":"Retrieves the access rights for the table.","pos":[25595,25637]},{"pos":[25803,25813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableName","pos":[25815,25824]},{"content":"record","pos":[25838,25844]},{"content":"dataArea","pos":[25858,25866]},{"content":"includeDerived","pos":[25880,25894]},{"content":"autoAuthzMode","pos":[25908,25921]},{"pos":[25930,25942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The AccesRight instance for the table.","pos":[25944,25982]},{"pos":[25988,26017],"content":"Method tableFieldAccessRights","linkify":"Method tableFieldAccessRights","nodes":[{"content":"Method tableFieldAccessRights","pos":[0,29]}]},{"content":"Retrieves the field access rights for the table.","pos":[26019,26067]},{"pos":[26247,26257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableName","pos":[26259,26268]},{"content":"record","pos":[26282,26288]},{"content":"dataArea","pos":[26302,26310]},{"content":"includeDerived","pos":[26324,26338]},{"content":"autoAuthzMode","pos":[26352,26365]},{"pos":[26374,26386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The SecurityTableRights instance for the table.","pos":[26388,26435]},{"pos":[26441,26468],"content":"Method variableAccessFields","linkify":"Method variableAccessFields","nodes":[{"content":"Method variableAccessFields","pos":[0,27]}]},{"content":"Retrieves a set of the table field IDs.","pos":[26470,26509]},{"pos":[26625,26635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableName","pos":[26637,26646]},{"content":"targetAccess","pos":[26660,26672]},{"content":"dataArea","pos":[26686,26694]},{"pos":[26703,26715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A set of the table field IDs.","pos":[26717,26746]},{"pos":[26752,26780],"content":"Method webContentAccessRight","linkify":"Method webContentAccessRight","nodes":[{"content":"Method webContentAccessRight","pos":[0,28]}]},{"content":"Retrieves the access rights for the web content item.","pos":[26782,26835]},{"pos":[26933,26943],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[26945,26949]},{"content":"name","pos":[26963,26967]},{"pos":[26976,26988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The AccesRight instance for the item.","pos":[26990,27027]},{"pos":[27033,27049],"content":"Method construct","linkify":"Method construct","nodes":[{"content":"Method construct","pos":[0,16]}]},{"content":"Creates a new security rights instance for the current user.","pos":[27051,27111]},{"pos":[27164,27176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The SecurityRights instance that was created.","pos":[27178,27223]},{"pos":[27229,27243],"content":"Method newUser","linkify":"Method newUser","nodes":[{"content":"Method newUser","pos":[0,14]}]},{"content":"Creates a new security rights instance for the specified user.","pos":[27245,27307]},{"pos":[27369,27379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"user","pos":[27381,27385]},{"pos":[27394,27406],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The SecurityRights instance that was created.","pos":[27408,27453]},{"pos":[27459,27469],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the SecurityRights class.","pos":[27471,27526]},{"pos":[27556,27590],"content":"Method populateSelectableCompanies","linkify":"Method populateSelectableCompanies","nodes":[{"content":"Method populateSelectableCompanies","pos":[0,34]}]},{"content":"Populates the selectable companies.","pos":[27592,27627]},{"pos":[27679,27702],"content":"Class SecuritySkipFlush","linkify":"Class SecuritySkipFlush","nodes":[{"content":"Class SecuritySkipFlush","pos":[0,23]}]},{"pos":[27751,27758],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27764,27772],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[27778,27785],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[27789,27795]},{"content":"Description","pos":[27811,27822]},{"content":"public void clear()","pos":[27959,27978]},{"content":"public void new()","pos":[28044,28061]},{"content":"Initializes a new instance of the SecuritySkipFlush class.","pos":[28066,28124]},{"content":"public void set()","pos":[28129,28146]},{"pos":[28217,28229],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"pos":[28260,28270],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the SecuritySkipFlush class.","pos":[28272,28330]},{"pos":[28359,28369],"content":"Method set","linkify":"Method set","nodes":[{"content":"Method set","pos":[0,10]}]},{"pos":[28397,28422],"content":"Class SecurityTableRights","linkify":"Class SecurityTableRights","nodes":[{"content":"Class SecurityTableRights","pos":[0,25]}]},{"content":"The SecurityTableRights class holds the information about the table security rights.","pos":[28469,28553]},{"pos":[28559,28566],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[28572,28580],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[28586,28593],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[28597,28603]},{"content":"Description","pos":[28656,28667]},{"content":"public AccessRight fieldAccessRight(FieldName fieldName)","pos":[28839,28895]},{"content":"Gets the access rights for the field of the table.","pos":[28898,28948]},{"content":"public AccessRight tableAccessRight()","pos":[28960,28997]},{"content":"Gets the access rights for the table.","pos":[29019,29056]},{"content":"private void new()","pos":[29081,29099]},{"content":"Initializes an instance of the SecurityTableRights class.","pos":[29140,29197]},{"pos":[29205,29228],"content":"Method fieldAccessRight","linkify":"Method fieldAccessRight","nodes":[{"content":"Method fieldAccessRight","pos":[0,23]}]},{"content":"Gets the access rights for the field of the table.","pos":[29230,29280]},{"pos":[29349,29359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[29361,29370]},{"pos":[29379,29391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The AccesRight instance for the field.","pos":[29393,29431]},{"pos":[29437,29460],"content":"Method tableAccessRight","linkify":"Method tableAccessRight","nodes":[{"content":"Method tableAccessRight","pos":[0,23]}]},{"content":"Gets the access rights for the table.","pos":[29462,29499]},{"pos":[29549,29561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The AccesRight instance for the table.","pos":[29563,29601]},{"pos":[29607,29617],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes an instance of the SecurityTableRights class.","pos":[29619,29676]},{"pos":[29705,29723],"content":"Class SecurityUtil","linkify":"Class SecurityUtil","nodes":[{"content":"Class SecurityUtil","pos":[0,18]}]},{"pos":[29767,29774],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[29780,29788],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[29794,29801],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[29805,29811]},{"content":"Description","pos":[29926,29937]},{"content":"::public static boolean isImplicitFlushMode()","pos":[30205,30250]},{"content":"Indicates whether implicit security flushing mode is on.","pos":[30326,30382]},{"content":"::public static int getRoleEffectiveAccess(Int64 roleID, str secObjectName, int secObjectType, str secObjectChildName)","pos":[30405,30523]},{"content":"Retrieves an effective access for role value of securable object.","pos":[30526,30591]},{"content":"::public static container getRolePermissions(Int64 roleID)","pos":[30605,30663]},{"content":"Gets a container of securable objects and their effective access.","pos":[30726,30791]},{"content":"::public static boolean sysAdminMode(<ph id=\"ph1\">\\[</ph>boolean active<ph id=\"ph2\">\\]</ph>)","pos":[30805,30861],"source":"::public static boolean sysAdminMode(\\[boolean active\\])"},{"content":"Gets and sets the security administrator mode.","pos":[30926,30972]},{"content":"::public static void refreshRolePermissions(Int64 roleID)","pos":[31005,31062]},{"content":"Retrieves the effective access of a specified role for a securable object.","pos":[31126,31200]},{"content":"::public static void runSecondPassAutoInference()","pos":[31205,31254]},{"content":"Runs the second pass auto inference.","pos":[31326,31362]},{"content":"::public static void flushPermissions()","pos":[31405,31444]},{"content":"Flushes the permissions.","pos":[31526,31550]},{"content":"public void new()","pos":[31605,31622]},{"content":"Initializes a new instance of the SecurityUtil class.","pos":[31726,31779]},{"content":"::public static void flushAll()","pos":[31805,31836]},{"pos":[32008,32034],"content":"Method isImplicitFlushMode","linkify":"Method isImplicitFlushMode","nodes":[{"content":"Method isImplicitFlushMode","pos":[0,26]}]},{"content":"Indicates whether implicit security flushing mode is on.","pos":[32036,32092]},{"pos":[32148,32160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value.","pos":[32162,32178]},{"pos":[32184,32213],"content":"Method getRoleEffectiveAccess","linkify":"Method getRoleEffectiveAccess","nodes":[{"content":"Method getRoleEffectiveAccess","pos":[0,29]}]},{"content":"Retrieves an effective access for role value of securable object.","pos":[32215,32280]},{"pos":[32409,32419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"roleID","pos":[32421,32427]},{"content":"secObjectName","pos":[32441,32454]},{"content":"secObjectType","pos":[32468,32481]},{"content":"secObjectChildName","pos":[32495,32513]},{"pos":[32522,32534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The effective access value.","pos":[32536,32563]},{"pos":[32569,32594],"content":"Method getRolePermissions","linkify":"Method getRolePermissions","nodes":[{"content":"Method getRolePermissions","pos":[0,25]}]},{"content":"Gets a container of securable objects and their effective access.","pos":[32596,32661]},{"pos":[32730,32740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"roleID","pos":[32742,32748]},{"content":"The role ID.","pos":[32751,32763]},{"pos":[32770,32782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container of securable objects and their effective access.","pos":[32784,32844]},{"pos":[32850,32869],"content":"Method sysAdminMode","linkify":"Method sysAdminMode","nodes":[{"content":"Method sysAdminMode","pos":[0,19]}]},{"content":"Gets and sets the security administrator mode.","pos":[32871,32917]},{"pos":[32982,32992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"active","pos":[32994,33000]},{"content":"A Boolean value.","pos":[33003,33019]},{"pos":[33026,33038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The old state of the security administrator mode.","pos":[33040,33089]},{"pos":[33095,33124],"content":"Method refreshRolePermissions","linkify":"Method refreshRolePermissions","nodes":[{"content":"Method refreshRolePermissions","pos":[0,29]}]},{"content":"Retrieves the effective access of a specified role for a securable object.","pos":[33126,33200]},{"pos":[33268,33278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"roleID","pos":[33280,33286]},{"pos":[33294,33327],"content":"Method runSecondPassAutoInference","linkify":"Method runSecondPassAutoInference","nodes":[{"content":"Method runSecondPassAutoInference","pos":[0,33]}]},{"content":"Runs the second pass auto inference.","pos":[33329,33365]},{"pos":[33424,33447],"content":"Method flushPermissions","linkify":"Method flushPermissions","nodes":[{"content":"Method flushPermissions","pos":[0,23]}]},{"content":"Flushes the permissions.","pos":[33449,33473]},{"pos":[33522,33532],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the SecurityUtil class.","pos":[33534,33587]},{"pos":[33616,33631],"content":"Method flushAll","linkify":"Method flushAll","nodes":[{"content":"Method flushAll","pos":[0,15]}]},{"pos":[33671,33700],"content":"Class SegmentEnteredEventArgs","linkify":"Class SegmentEnteredEventArgs","nodes":[{"content":"Class SegmentEnteredEventArgs","pos":[0,29]}]},{"pos":[33755,33762],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[33768,33776],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[33782,33789],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[33793,33799]},{"content":"Description","pos":[33852,33863]},{"content":"public boolean isAllValuesEnabled(<ph id=\"ph1\">\\[</ph>boolean enabled<ph id=\"ph2\">\\]</ph>)","pos":[33943,33997],"source":"public boolean isAllValuesEnabled(\\[boolean enabled\\])"},{"content":"public boolean isMRUEnabled(<ph id=\"ph1\">\\[</ph>boolean enabled<ph id=\"ph2\">\\]</ph>)","pos":[34018,34066],"source":"public boolean isMRUEnabled(\\[boolean enabled\\])"},{"content":"public boolean isValidValuesEnabled(<ph id=\"ph1\">\\[</ph>boolean enabled<ph id=\"ph2\">\\]</ph>)","pos":[34093,34149],"source":"public boolean isValidValuesEnabled(\\[boolean enabled\\])"},{"pos":[34171,34196],"content":"Method isAllValuesEnabled","linkify":"Method isAllValuesEnabled","nodes":[{"content":"Method isAllValuesEnabled","pos":[0,25]}]},{"pos":[34261,34271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enabled","pos":[34273,34280]},{"pos":[34289,34301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34307,34326],"content":"Method isMRUEnabled","linkify":"Method isMRUEnabled","nodes":[{"content":"Method isMRUEnabled","pos":[0,19]}]},{"pos":[34385,34395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enabled","pos":[34397,34404]},{"pos":[34413,34425],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34431,34458],"content":"Method isValidValuesEnabled","linkify":"Method isValidValuesEnabled","nodes":[{"content":"Method isValidValuesEnabled","pos":[0,27]}]},{"pos":[34525,34535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enabled","pos":[34537,34544]},{"pos":[34553,34565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34570,34604],"content":"Class SegmentValueChangedEventArgs","linkify":"Class SegmentValueChangedEventArgs","nodes":[{"content":"Class SegmentValueChangedEventArgs","pos":[0,34]}]},{"pos":[34664,34671],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[34677,34685],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[34691,34698],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[34702,34708]},{"content":"Description","pos":[34733,34744]},{"content":"public FormSegment segment()","pos":[34796,34824]},{"content":"public AnyType selectedTag()","pos":[34843,34871]},{"pos":[34893,34907],"content":"Method segment","linkify":"Method segment","nodes":[{"content":"Method segment","pos":[0,14]}]},{"pos":[34948,34960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34966,34984],"content":"Method selectedTag","linkify":"Method selectedTag","nodes":[{"content":"Method selectedTag","pos":[0,18]}]},{"pos":[35025,35037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35042,35056],"content":"Class Sequence","linkify":"Class Sequence","nodes":[{"content":"Class Sequence","pos":[0,14]}]},{"content":"The Sequence class lets you perform transactions outside the main transaction scope, typically for some kind of sequence, or voucher number generation.","pos":[35092,35243]},{"pos":[35249,35256],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"There are three kinds of connections: The main user connection, an auxiliary system connection, and user connections.","pos":[35258,35375]},{"content":"The first is used for the application logic.","pos":[35376,35420]},{"content":"The second is used for internal sequence number generation (specifically the built-in field RecId).","pos":[35421,35520]},{"content":"The third is used for the application maintained separate connections.","pos":[35521,35591]},{"content":"This class provides an interface to the auxiliary system connection for number generation.","pos":[35592,35682]},{"content":"However, it may be a better solution to use the UserConnection class, as this is the method the application uses or flexibility, and to avoid concurrency problems with the kernel's sequence number generation.","pos":[35683,35891]},{"pos":[35897,35905],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[36298,36305],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[36309,36315]},{"content":"Description","pos":[36421,36432]},{"content":"public Int64 currval(<ph id=\"ph1\">\\[</ph>str Subkey1<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int Subkey2<ph id=\"ph4\">\\]</ph>)","pos":[36725,36779],"source":"public Int64 currval(\\[str Subkey1\\], \\[int Subkey2\\])"},{"content":"Gets the current sequence number from the sequence, without incrementing the counter value.","pos":[36837,36928]},{"content":"public Int64 nextval(Int64 Increment, <ph id=\"ph1\">\\[</ph>str Subkey1<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int Subkey2<ph id=\"ph4\">\\]</ph>)","pos":[36933,37004],"source":"public Int64 nextval(Int64 Increment, \\[str Subkey1\\], \\[int Subkey2\\])"},{"content":"Returns the next sequence number from the sequence and then increments the counter value.","pos":[37045,37134]},{"content":"public void new(str Name, int Id, Int64 InitialValue, Int64 MaxValue, <ph id=\"ph1\">\\[</ph>boolean Cycle<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>Int64 CacheSize<ph id=\"ph4\">\\]</ph>)","pos":[37141,37250],"source":"public void new(str Name, int Id, Int64 InitialValue, Int64 MaxValue, \\[boolean Cycle\\], \\[Int64 CacheSize\\])"},{"content":"Initializes a new instance of the Object class.","pos":[37253,37300]},{"pos":[37352,37366],"content":"Method currval","linkify":"Method currval","nodes":[{"content":"Method currval","pos":[0,14]}]},{"content":"Gets the current sequence number from the sequence, without incrementing the counter value.","pos":[37368,37459]},{"pos":[37522,37532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Subkey1","pos":[37534,37541]},{"content":"Subkey2","pos":[37555,37562]},{"pos":[37571,37583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current sequence number from the sequence.","pos":[37585,37631]},{"pos":[37637,37651],"content":"Method nextval","linkify":"Method nextval","nodes":[{"content":"Method nextval","pos":[0,14]}]},{"content":"Returns the next sequence number from the sequence and then increments the counter value.","pos":[37653,37742]},{"pos":[37822,37832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Increment","pos":[37834,37843]},{"content":"Subkey1","pos":[37857,37864]},{"content":"Subkey2","pos":[37878,37885]},{"pos":[37894,37906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The next sequence number available.","pos":[37908,37943]},{"pos":[37949,37959],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[37961,38008]},{"pos":[38126,38136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name","pos":[38138,38142]},{"content":"Id","pos":[38156,38158]},{"content":"InitialValue","pos":[38172,38184]},{"content":"MaxValue","pos":[38198,38206]},{"content":"Cycle","pos":[38220,38225]},{"content":"CacheSize","pos":[38239,38248]},{"pos":[38255,38264],"content":"Class Set","linkify":"Class Set","nodes":[{"content":"Class Set","pos":[0,9]}]},{"content":"The Set class is used for the storage and retrieval of data from a collection in which the values of the elements contained are unique and serve as the key values according to which the data is automatically ordered.","pos":[38295,38511]},{"pos":[38517,38524],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values may be of any X++ type.","pos":[38526,38560]},{"content":"All values in the set must have the same type.","pos":[38561,38607]},{"content":"When a value that is already stored in the set is added, it is ignored and does not increase the number of elements in the set.","pos":[38608,38735]},{"content":"The values stored in the set can be traversed by using objects of type SetEnumerator.","pos":[38736,38821]},{"content":"The contents of a set are stored in a way that facilitates efficient look up of the elements.","pos":[38822,38915]},{"pos":[38921,38929],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example checks whether any of the values in one set, the noConfigs set, are found in a second set, the yesConfigs set.","pos":[38931,39063]},{"content":"If they are, they are removed from the yesConfigs set.","pos":[39064,39118]},{"pos":[39469,39476],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[39480,39486]},{"content":"Description","pos":[39535,39546]},{"content":"public boolean add(AnyType arg)","pos":[39858,39889]},{"content":"Adds an element to the set.","pos":[39913,39940]},{"content":"public str definitionString()","pos":[40047,40076]},{"content":"Returns a description of the type of the elements in the set.","pos":[40102,40163]},{"content":"public int elements()","pos":[40236,40257]},{"content":"Returns the number of elements in the set.","pos":[40291,40333]},{"content":"public boolean empty()","pos":[40425,40447]},{"content":"Determines whether the set is empty.","pos":[40480,40516]},{"content":"public boolean equal(Set set)","pos":[40614,40643]},{"content":"Determines whether a set is identical to the current set.","pos":[40669,40726]},{"content":"public SetEnumerator getEnumerator()","pos":[40803,40839]},{"content":"Creates an enumerator for a set, which allows you to traverse the set.","pos":[40858,40928]},{"content":"public boolean in(AnyType arg)","pos":[40992,41022]},{"content":"Determines whether a specified element is a member of the set.","pos":[41047,41109]},{"content":"public container pack()","pos":[41181,41204]},{"content":"Serializes the current instance of the Set class.","pos":[41236,41285]},{"content":"public boolean remove(AnyType arg)","pos":[41370,41404]},{"content":"Removes an element from the set.","pos":[41425,41457]},{"content":"public str toString()","pos":[41559,41580]},{"content":"Returns a string describing the contents of the set.","pos":[41614,41666]},{"content":"public Types typeId()","pos":[41748,41769]},{"content":"Returns the type of the values in the set.","pos":[41803,41845]},{"content":"public str xml(<ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[41937,41967],"source":"public str xml(\\[int indent\\])"},{"content":"Returns an XML string that represents the current object.","pos":[41992,42049]},{"content":"::public static Set create(container container)","pos":[42126,42173]},{"content":"Creates a set from the container obtained from a prior call to the Set.pack method.","pos":[42181,42264]},{"content":"::public static Set createFromXML(Object xmlnode)","pos":[42315,42364]},{"content":"::public static Set difference(Set set1, Set set2)","pos":[42504,42554]},{"content":"Calculates and retrieves the set containing the elements from set1 that are not found in set2.","pos":[42559,42653]},{"content":"::public static Set intersection(Set set1, Set set2)","pos":[42693,42745]},{"content":"Calculates and returns the identical values found in two sets.","pos":[42748,42810]},{"content":"::public static Set union(Set set1, Set set2)","pos":[42882,42927]},{"content":"Calculates and retrieves the union of two given sets.","pos":[42937,42990]},{"content":"This is the set that contains the values found in at least one of the sets.","pos":[42991,43066]},{"content":"public void new(Types Type)","pos":[43071,43098]},{"content":"Creates a set that can contain elements of the specified type.","pos":[43126,43188]},{"pos":[43263,43273],"content":"Method add","linkify":"Method add","nodes":[{"content":"Method add","pos":[0,10]}]},{"content":"Adds an element to the set.","pos":[43275,43302]},{"pos":[43346,43356],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"arg","pos":[43358,43361]},{"content":"The element to add to the set.","pos":[43364,43394]},{"pos":[43401,43413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the element is added to the set; otherwise, false.","pos":[43415,43473]},{"pos":[43480,43487],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element added to a set must be of the same type as the type assigned to the set when it was created.","pos":[43489,43593]},{"content":"An element will not be added if it already exists in the set.","pos":[43594,43655]},{"pos":[43662,43670],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set, adds some integers to it, and then prints out the contents of the set.","pos":[43672,43779]},{"pos":[44075,44098],"content":"Method definitionString","linkify":"Method definitionString","nodes":[{"content":"Method definitionString","pos":[0,23]}]},{"content":"Returns a description of the type of the elements in the set.","pos":[44100,44161]},{"pos":[44203,44215],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains a definition of the set.","pos":[44217,44264]},{"pos":[44271,44278],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To print a list of the values within the set, use Set.toString.","pos":[44280,44343]},{"pos":[44350,44358],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set of integers.","pos":[44360,44408]},{"content":"The definitionString method is used to print a description of the set.","pos":[44409,44479]},{"pos":[44891,44906],"content":"Method elements","linkify":"Method elements","nodes":[{"content":"Method elements","pos":[0,15]}]},{"content":"Returns the number of elements in the set.","pos":[44908,44950]},{"pos":[44984,44996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of elements in the set.","pos":[44998,45032]},{"pos":[45039,45047],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example packs the contents of a set into a container.","pos":[45049,45116]},{"content":"The elements method is used to test whether the set has any contents.","pos":[45117,45186]},{"content":"If there are no contents, a nullNothingnullptrunita null reference (Nothing in Visual Basic) container is returned.","pos":[45187,45302]},{"pos":[45696,45708],"content":"Method empty","linkify":"Method empty","nodes":[{"content":"Method empty","pos":[0,12]}]},{"content":"Determines whether the set is empty.","pos":[45710,45746]},{"pos":[45781,45793],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the set is empty; otherwise, false.","pos":[45795,45838]},{"pos":[45845,45852],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This is equivalent to (elements() == 0).","pos":[45854,45894]},{"pos":[45901,45909],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example tests whether there are any elements in a set.","pos":[45911,45979]},{"pos":[46175,46187],"content":"Method equal","linkify":"Method equal","nodes":[{"content":"Method equal","pos":[0,12]}]},{"content":"Determines whether a set is identical to the current set.","pos":[46189,46246]},{"pos":[46288,46298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"set","pos":[46300,46303]},{"content":"The set to be compared with the current set.","pos":[46306,46350]},{"pos":[46357,46369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the set is the same as the current set; otherwise, false.","pos":[46371,46436]},{"pos":[46443,46450],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For two sets to be equal, they must have the same type and the same number of elements, and all elements must be the same.","pos":[46452,46574]},{"pos":[46581,46589],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates two sets of integers, adds some values to them, and then compares them to see whether the sets are the same.","pos":[46591,46729]},{"pos":[47171,47191],"content":"Method getEnumerator","linkify":"Method getEnumerator","nodes":[{"content":"Method getEnumerator","pos":[0,20]}]},{"content":"Creates an enumerator for a set, which allows you to traverse the set.","pos":[47193,47263]},{"pos":[47312,47324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A SetEnumerator object for the current set.","pos":[47326,47369]},{"pos":[47376,47384],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example packs the contents of a set into a container.","pos":[47386,47453]},{"content":"The getEnumerator method is used to create an enumerator for the set.","pos":[47454,47523]},{"content":"Therefore, that the elements in the set can be traversed and added to the container.","pos":[47524,47608]},{"pos":[48002,48011],"content":"Method in","linkify":"Method in","nodes":[{"content":"Method in","pos":[0,9]}]},{"content":"Determines whether a specified element is a member of the set.","pos":[48013,48075]},{"pos":[48118,48128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"arg","pos":[48130,48133]},{"content":"The element to check.","pos":[48136,48157]},{"content":"The type of the element must be the same as the type that was specified for the set.","pos":[48158,48242]},{"pos":[48249,48261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the specified element is found in the set; otherwise, false.","pos":[48263,48331]},{"pos":[48338,48346],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example loads the contents a particular change list in the version control system, if the in method returns false.","pos":[48348,48476]},{"content":"The changeSet set contains a list of the change list numbers that already have the content loaded.","pos":[48477,48575]},{"pos":[49178,49189],"content":"Method pack","linkify":"Method pack","nodes":[{"content":"Method pack","pos":[0,11]}]},{"content":"Serializes the current instance of the Set class.","pos":[49191,49240]},{"pos":[49276,49288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that contains the current instance of the Set class.","pos":[49290,49354]},{"pos":[49361,49368],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The container created by this method contains 3 elements before the first element from the set:","pos":[49370,49465]},{"content":"A version number for the container","pos":[49471,49505]},{"content":"An integer that identifies the data type of the set elements","pos":[49510,49570]},{"content":"The number of elements in the set","pos":[49575,49608]},{"content":"If the keys or the values are objects, the pack method is called on each object to create a subcontainer.","pos":[49610,49715]},{"content":"You can create a new set from the resulting container by using the Set::create method.","pos":[49716,49802]},{"pos":[49809,49817],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set of 10 integers, packs it into a container, and then creates a new set with contents identical to the original one.","pos":[49819,49969]},{"pos":[50427,50440],"content":"Method remove","linkify":"Method remove","nodes":[{"content":"Method remove","pos":[0,13]}]},{"content":"Removes an element from the set.","pos":[50442,50474]},{"pos":[50521,50531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"arg","pos":[50533,50536]},{"content":"The element to remove.","pos":[50539,50561]},{"pos":[50568,50580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the element was found and removed; otherwise, false.","pos":[50582,50642]},{"pos":[50649,50657],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example checks whether any of the values in one set, the noConfigs set, are found in a second set, the yesConfigs set.","pos":[50659,50791]},{"content":"If they are found, they are removed from the yesConfigs set.","pos":[50792,50852]},{"pos":[51203,51218],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string describing the contents of the set.","pos":[51220,51272]},{"pos":[51306,51318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that describes the contents of the set.","pos":[51320,51368]},{"pos":[51375,51382],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the to get the description of a single element within a set.","pos":[51384,51448]},{"pos":[51455,51463],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set of strings, and then prints out a description of the set and a description of the set contents.","pos":[51465,51596]},{"pos":[51925,51938],"content":"Method typeId","linkify":"Method typeId","nodes":[{"content":"Method typeId","pos":[0,13]}]},{"content":"Returns the type of the values in the set.","pos":[51940,51982]},{"pos":[52016,52028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of the values in the set.","pos":[52030,52064]},{"pos":[52071,52078],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type of the constituent elements is determined when the set is created.","pos":[52080,52155]},{"pos":[52162,52170],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example instantiates a new set with the same type as an existing set.","pos":[52172,52255]},{"pos":[52435,52445],"content":"Method xml","linkify":"Method xml","nodes":[{"content":"Method xml","pos":[0,10]}]},{"content":"Returns an XML string that represents the current object.","pos":[52447,52504]},{"pos":[52545,52555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"indent","pos":[52557,52563]},{"content":"The amount of indentation of the returned XML string; optional.","pos":[52566,52629]},{"pos":[52636,52648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An XML string that represents the current object.","pos":[52650,52699]},{"pos":[52706,52713],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be overridden to return values that are meaningful for that type.","pos":[52715,52796]},{"pos":[52802,52815],"content":"Method create","linkify":"Method create","nodes":[{"content":"Method create","pos":[0,13]}]},{"content":"Creates a set from the container obtained from a prior call to the Set.pack method.","pos":[52817,52900]},{"pos":[52958,52968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[52970,52979]},{"content":"The container that holds the packed set.","pos":[52982,53022]},{"pos":[53029,53041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A set equal to the one that was packed into the container.","pos":[53043,53101]},{"pos":[53108,53115],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the values are objects, the objects must have an unpack method that is called to reestablish their internal state from the container.","pos":[53117,53253]},{"pos":[53260,53268],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set and packs it into a container.","pos":[53270,53336]},{"content":"The create method is then used to unpack the container and create a set identical to the original one.","pos":[53337,53439]},{"pos":[53887,53907],"content":"Method createFromXML","linkify":"Method createFromXML","nodes":[{"content":"Method createFromXML","pos":[0,20]}]},{"pos":[53967,53977],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"xmlnode","pos":[53979,53986]},{"pos":[53995,54007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54013,54030],"content":"Method difference","linkify":"Method difference","nodes":[{"content":"Method difference","pos":[0,17]}]},{"content":"Calculates and retrieves the set containing the elements from set1 that are not found in set2.","pos":[54032,54126]},{"pos":[54187,54197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"set1","pos":[54199,54203]},{"content":"The set to check.","pos":[54206,54223]},{"content":"set2","pos":[54235,54239]},{"content":"The set to check.","pos":[54242,54259]},{"pos":[54266,54278],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A set containing the elements from set1 that are not found in set2.","pos":[54280,54347]},{"pos":[54354,54361],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The two sets to be compared must be of the same type.","pos":[54363,54416]},{"pos":[54423,54431],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates one set that contains the integers 1, 2, and 3, and one set that contains the integers 2 and 4.","pos":[54433,54558]},{"content":"The difference method is used to create a set that contains the elements in the first set that are not in the second set (1 and 3).","pos":[54559,54690]},{"pos":[55033,55052],"content":"Method intersection","linkify":"Method intersection","nodes":[{"content":"Method intersection","pos":[0,19]}]},{"content":"Calculates and returns the identical values found in two sets.","pos":[55054,55116]},{"pos":[55179,55189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"set1","pos":[55191,55195]},{"content":"The second set to be compared.","pos":[55198,55228]},{"content":"set2","pos":[55240,55244]},{"content":"The second set to be compared.","pos":[55247,55277]},{"pos":[55284,55296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A set containing the elements found in both sets.","pos":[55298,55347]},{"pos":[55354,55362],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates two sets of integers and adds some values to them.","pos":[55364,55444]},{"content":"It then prints a list of the values that are that is contained in both sets.","pos":[55445,55521]},{"pos":[55890,55902],"content":"Method union","linkify":"Method union","nodes":[{"content":"Method union","pos":[0,12]}]},{"content":"Calculates and retrieves the union of two given sets.","pos":[55904,55957]},{"content":"This is the set that contains the values found in at least one of the sets.","pos":[55958,56033]},{"pos":[56089,56099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"set1","pos":[56101,56105]},{"content":"The second of the two sets that are compared.","pos":[56108,56153]},{"content":"set2","pos":[56165,56169]},{"content":"The second of the two sets that are compared.","pos":[56172,56217]},{"pos":[56224,56236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The set containing elements found in set1 or set2.","pos":[56238,56288]},{"pos":[56295,56302],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The two sets that are compared must be of the same type.","pos":[56304,56360]},{"pos":[56367,56375],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates two sets of integers and adds some values to them.","pos":[56377,56457]},{"content":"It then creates a new set that contains all the values that are contained in either of the sets.","pos":[56458,56554]},{"pos":[56899,56909],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a set that can contain elements of the specified type.","pos":[56911,56973]},{"pos":[57013,57023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Type","pos":[57025,57029]},{"content":"The type of the elements within the set.","pos":[57032,57072]},{"pos":[57079,57086],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type of the set cannot be changed after the set has been created.","pos":[57088,57157]},{"pos":[57164,57172],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set of integers and a set of objects.","pos":[57174,57243]},{"pos":[57423,57442],"content":"Class SetEnumerator","linkify":"Class SetEnumerator","nodes":[{"content":"Class SetEnumerator","pos":[0,19]}]},{"content":"The SetEnumerator class lets you traverse the elements in a set.","pos":[57483,57547]},{"pos":[57553,57560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set enumerators start before the first element in the set.","pos":[57562,57620]},{"content":"You must call the SetEnumerator.moveNext method to make it point to the first element in the set.","pos":[57621,57718]},{"content":"As a best practice, use the SetEnumerator class instead of the SetIterator class, because enumerators are automatically created on the same tier as the set when the set.getEnumerator method is called.","pos":[57719,57919]},{"content":"This helps you avoid a potential problem in code that is marked as Called from, where the iterator and set can be on separate tiers.","pos":[57920,58052]},{"content":"In addition, set enumerators require less code than set iterators and therefore perform slightly better.","pos":[58053,58157]},{"pos":[58163,58171],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[58177,58184],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[58188,58194]},{"content":"Description","pos":[58220,58231]},{"content":"public AnyType current()","pos":[58474,58498]},{"content":"Retrieves the value that is pointed to by the enumerator.","pos":[58506,58563]},{"content":"public str definitionString()","pos":[58617,58646]},{"content":"Returns a description of the enumerator.","pos":[58649,58689]},{"content":"public boolean moveNext()","pos":[58760,58785]},{"content":"Determines whether the enumerator denotes a valid set element.","pos":[58792,58854]},{"content":"public str toString()","pos":[58903,58924]},{"content":"Retrieves a description of the contents of the element in the set that the enumerator currently points to.","pos":[58935,59041]},{"content":"public void reset()","pos":[59046,59065]},{"content":"Moves the enumerator to the start of the set.","pos":[59078,59123]},{"pos":[59192,59206],"content":"Method current","linkify":"Method current","nodes":[{"content":"Method current","pos":[0,14]}]},{"content":"Retrieves the value that is pointed to by the enumerator.","pos":[59208,59265]},{"pos":[59302,59314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that is currently pointed to in the set.","pos":[59316,59366]},{"pos":[59373,59380],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type of the return value is determined by the type of items in the set.","pos":[59382,59457]},{"content":"You must call the SetEnumerator.moveNext method before you call the current method.","pos":[59458,59541]},{"pos":[59547,59570],"content":"Method definitionString","linkify":"Method definitionString","nodes":[{"content":"Method definitionString","pos":[0,23]}]},{"content":"Returns a description of the enumerator.","pos":[59572,59612]},{"pos":[59654,59666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains a description of the enumerator.","pos":[59668,59723]},{"pos":[59730,59737],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For example, an enumerator for a set of integers would return \"int set enumerator\".","pos":[59739,59822]},{"pos":[59829,59837],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set and an enumerator for the set.","pos":[59839,59905]},{"content":"The definitionString method is used to print a description of the enumerator.","pos":[59906,59983]},{"pos":[60363,60378],"content":"Method moveNext","linkify":"Method moveNext","nodes":[{"content":"Method moveNext","pos":[0,15]}]},{"content":"Determines whether the enumerator denotes a valid set element.","pos":[60380,60442]},{"pos":[60480,60492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the current position in the set holds a valid element; otherwise, false.","pos":[60494,60574]},{"pos":[60581,60588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set enumerators start before the first element in the set.","pos":[60590,60648]},{"content":"You must call the moveNext method to make it point to the first element in the set.","pos":[60649,60732]},{"pos":[60738,60753],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Retrieves a description of the contents of the element in the set that the enumerator currently points to.","pos":[60755,60861]},{"pos":[60895,60907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains a description of the current element in the set.","pos":[60909,60980]},{"pos":[60987,60995],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set of integers, and then prints the content of the first and second elements in the set.","pos":[60997,61118]},{"pos":[61833,61845],"content":"Method reset","linkify":"Method reset","nodes":[{"content":"Method reset","pos":[0,12]}]},{"content":"Moves the enumerator to the start of the set.","pos":[61847,61892]},{"pos":[61924,61931],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The reset method moves the enumerator to the start of the set, in front of the first element in the set.","pos":[61933,62037]},{"content":"You must call the SetEnumerator.moveNext method to make it point to the first element in the set.","pos":[62038,62135]},{"pos":[62142,62150],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set and then creates an enumerator for the set.","pos":[62152,62231]},{"content":"It uses the reset method to move to the start of the set and then uses the moveNext method to move to the first element in the set.","pos":[62232,62363]},{"pos":[62934,62951],"content":"Class SetIterator","linkify":"Class SetIterator","nodes":[{"content":"Class SetIterator","pos":[0,17]}]},{"content":"The SetIterator class allows you to iterate over the elements in a set.","pos":[62990,63061]},{"pos":[63067,63074],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set iterators may be viewed as pointers into the sets over which they iterate.","pos":[63076,63154]},{"content":"Functionality is available to start the iteration, to determine whether more elements are available, and to fetch the element pointed to by the iterator.","pos":[63155,63308]},{"content":"Newly created set iterators are positioned at the first element in the set.","pos":[63309,63384]},{"content":"The order in which the elements occur during iteration is defined not by the sequence in which the elements are inserted, but by the ordering of the elements.","pos":[63385,63543]},{"content":"Elements with lower values appear before elements with higher values.","pos":[63544,63613]},{"content":"The usual ordering for the types is used.","pos":[63614,63655]},{"content":"If the constituent elements are objects; however, the addresses of the objects are used to supply the ordering.","pos":[63656,63767]},{"content":"No specific ordering may consequently be inferred.","pos":[63768,63818]},{"content":"The addresses of the objects are transient by nature.","pos":[63819,63872]},{"content":"It is best practice to use the class instead of the SetIterator class.","pos":[63873,63943]},{"content":"This avoids problems if you are accessing the set on one tier with an iterator on another tier.","pos":[63944,64039]},{"content":"Set iterators and the sets over which they iterate must be on the same client/server side.","pos":[64040,64130]},{"content":"If you use SetIterator and code is marked as Called from, it is possible that the set and the iterator will end up on different tiers, and the code will fail.","pos":[64131,64289]},{"content":"If you use SetEnumerator, the enumerator is automatically created on the same tier as the set.","pos":[64290,64384]},{"content":"Also, to move to the next item in a set, you must explicitly call the more and next methods if you are using a set iterator.","pos":[64385,64509]},{"content":"If you use SetEnumerator, you only have to call moveNext method.","pos":[64510,64574]},{"pos":[64580,64588],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set of integers and then adds four values to it.","pos":[64590,64670]},{"content":"It then iterates through the set that is printing out information about each set element.","pos":[64671,64760]},{"pos":[65409,65416],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[65420,65426]},{"content":"Description","pos":[65452,65463]},{"content":"public str definitionString()","pos":[65698,65727]},{"content":"Returns a textual representation of the type of the iterator.","pos":[65730,65791]},{"content":"public boolean more()","pos":[65837,65858]},{"content":"Determines whether the iterator denotes a valid set element.","pos":[65869,65929]},{"content":"public str toString()","pos":[65976,65997]},{"content":"Returns a textual representation of the current element in the set that is pointed to by the iterator.","pos":[66008,66110]},{"content":"public AnyType value()","pos":[66115,66137]},{"content":"Retrieves the value that the iterator is pointing to.","pos":[66147,66200]},{"content":"public void next()","pos":[66254,66272]},{"content":"Moves the iterator to the next element.","pos":[66286,66325]},{"content":"public void new(Set set)","pos":[66393,66417]},{"content":"Creates a new iterator for a set.","pos":[66425,66458]},{"content":"public void begin()","pos":[66532,66551]},{"content":"Moves the iterator to the start of the set.","pos":[66564,66607]},{"content":"public void delete()","pos":[66671,66691]},{"content":"Removes the element that is pointed to by the iterator of the set.","pos":[66703,66769]},{"content":"public void end()","pos":[66810,66827]},{"content":"Moves the iterator past the last element in the set.","pos":[66842,66894]},{"pos":[66952,66975],"content":"Method definitionString","linkify":"Method definitionString","nodes":[{"content":"Method definitionString","pos":[0,23]}]},{"content":"Returns a textual representation of the type of the iterator.","pos":[66977,67038]},{"pos":[67080,67092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that indicates the type of the iterator.","pos":[67094,67143]},{"pos":[67149,67160],"content":"Method more","linkify":"Method more","nodes":[{"content":"Method more","pos":[0,11]}]},{"content":"Determines whether the iterator denotes a valid set element.","pos":[67162,67222]},{"pos":[67256,67268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the iterator denotes a valid element; otherwise, false.","pos":[67270,67333]},{"pos":[67340,67347],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Attempting to access an element that is pointed to by an iterator when this method returns false will result in an error.","pos":[67349,67470]},{"content":"This method will check only whether the iterator points to a valid element.","pos":[67471,67546]},{"content":"It will not check whether there are more elements in the set.","pos":[67547,67608]},{"pos":[67615,67623],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the SetIterator.more method to check whether there are more elements in the set before it runs through the while loop, which deletes all the odd elements from the set.","pos":[67625,67819]},{"pos":[68437,68452],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a textual representation of the current element in the set that is pointed to by the iterator.","pos":[68454,68556]},{"pos":[68590,68602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that is the textual representation of the current element in the set.","pos":[68604,68682]},{"pos":[68689,68696],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the iterator points to the first element in the set, the string will contain an indication of this, in the following format: \"(begin)<ph id=\"ph1\">\\[</ph>value<ph id=\"ph2\">\\]</ph>\" If the iterator does not point to an element (that is, if more() returns false), the string returned is: \"(end)\" If the iterator points to a value the string is: \"<ph id=\"ph3\">\\[</ph>value<ph id=\"ph4\">\\]</ph>\" where value is a string representation of the element value.","pos":[68698,69079],"source":"If the iterator points to the first element in the set, the string will contain an indication of this, in the following format: \"(begin)\\[value\\]\" If the iterator does not point to an element (that is, if more() returns false), the string returned is: \"(end)\" If the iterator points to a value the string is: \"\\[value\\]\" where value is a string representation of the element value."},{"pos":[69086,69094],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the SetIterator.toString method to print a description of the value in the set that the iterator points to before it starts traversing the set.","pos":[69096,69266]},{"pos":[69897,69909],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"content":"Retrieves the value that the iterator is pointing to.","pos":[69911,69964]},{"pos":[69999,70011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value denoted by the iterator.","pos":[70013,70047]},{"pos":[70054,70061],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use SetIterator.more to check whether an element exists before trying to retrieve the key value of the set element.","pos":[70063,70178]},{"pos":[70185,70193],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the SetIterator.value method to print the value of the current item in the set.","pos":[70195,70301]},{"pos":[70879,70890],"content":"Method next","linkify":"Method next","nodes":[{"content":"Method next","pos":[0,11]}]},{"content":"Moves the iterator to the next element.","pos":[70892,70931]},{"pos":[70962,70969],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use SetIterator.more to determine whether the iterator points to a valid element.","pos":[70971,71052]},{"pos":[71059,71067],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the SetIterator.next method to move the iterator to the next element in the set, before testing whether there is another element, and if there is another element, adding the value to a container.","pos":[71069,71291]},{"pos":[71777,71787],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new iterator for a set.","pos":[71789,71822]},{"pos":[71859,71869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"set","pos":[71871,71874]},{"content":"The set to iterate over.","pos":[71877,71901]},{"pos":[71908,71915],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The iterator is positioned at the first value in the set, if the set is not empty.","pos":[71917,71999]},{"pos":[72006,72014],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a set of integers and then creates an iterator for that set","pos":[72016,72105]},{"pos":[72203,72215],"content":"Method begin","linkify":"Method begin","nodes":[{"content":"Method begin","pos":[0,12]}]},{"content":"Moves the iterator to the start of the set.","pos":[72217,72260]},{"pos":[72292,72299],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Newly created set iterators are positioned at the first element in the set.","pos":[72301,72376]},{"content":"Typically, you do not need to call the begin method before you start to iterate through the set; you need to do that only if you want to reset the pointer later on.","pos":[72377,72541]},{"pos":[72548,72556],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example returns set of class IDs of the classes that implement the specified interface, that is, the <ph id=\"ph1\">\\_</ph>id class.","pos":[72558,72684],"source":"The following example returns set of class IDs of the classes that implement the specified interface, that is, the \\_id class."},{"content":"An iterator is used to remove classes from the set if they are superclasses, and the <ph id=\"ph1\">\\_</ph>onlyLeafClasses parameter is set to true.","pos":[72685,72813],"source":" An iterator is used to remove classes from the set if they are superclasses, and the \\_onlyLeafClasses parameter is set to true."},{"content":"The begin method is used to reset the iterator after the superclasses have been removed from the set.","pos":[72814,72915]},{"pos":[74423,74436],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"content":"Removes the element that is pointed to by the iterator of the set.","pos":[74438,74504]},{"pos":[74537,74544],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The iterator will point to the next element after calling this method.","pos":[74546,74616]},{"pos":[74623,74631],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example deletes all the odd elements from the set.","pos":[74633,74697]},{"pos":[75304,75314],"content":"Method end","linkify":"Method end","nodes":[{"content":"Method end","pos":[0,10]}]},{"content":"Moves the iterator past the last element in the set.","pos":[75316,75368]},{"pos":[75398,75405],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"After executing this method, the more method will return false.","pos":[75407,75470]},{"pos":[75475,75508],"content":"Class SkipAOSValidationPermission","linkify":"Class SkipAOSValidationPermission","nodes":[{"content":"Class SkipAOSValidationPermission","pos":[0,33]}]},{"content":"The SkipAOSValidationPermission class controls the ability to skip AOS validation and check permissions for specific APIs.","pos":[75577,75699]},{"pos":[75705,75712],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For a list of all protected APIs, see Secured APIs.","pos":[75714,75765]},{"content":"You must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission.demand method is called on before the protected API is executed.","pos":[75766,75949]},{"content":"Call a method on the server tier from one of the following: A server static method –or– A class instance method that is set to run on the server by using the RunOn class property.","pos":[75950,76129]},{"pos":[76135,76143],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[76149,76156],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[76160,76166]},{"content":"Description","pos":[76217,76228]},{"content":"public CodeAccessPermission copy()","pos":[76514,76548]},{"content":"Creates and returns a copy of a permission class object.","pos":[76571,76627]},{"content":"public boolean isSubsetOf(CodeAccessPermission target)","pos":[76691,76745]},{"content":"Determines whether a current permission is a subset of the specified permission when overridden by a derived class.","pos":[76748,76863]},{"content":"public void new()","pos":[76868,76885]},{"content":"Initializes a new instance of the SkipAOSValidationPermission class.","pos":[76925,76993]},{"pos":[77048,77059],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Creates and returns a copy of a permission class object.","pos":[77061,77117]},{"pos":[77164,77176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the derived class object.","pos":[77178,77213]},{"pos":[77220,77227],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method as part of the process of making an API more secure.","pos":[77229,77310]},{"content":"For more information, see .","pos":[77311,77338]},{"pos":[77344,77361],"content":"Method isSubsetOf","linkify":"Method isSubsetOf","nodes":[{"content":"Method isSubsetOf","pos":[0,17]}]},{"content":"Determines whether a current permission is a subset of the specified permission when overridden by a derived class.","pos":[77363,77478]},{"pos":[77545,77555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[77557,77563]},{"content":"A CodeAccessPermission class object.","pos":[77566,77602]},{"pos":[77609,77621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a current permission is a subset of a specified permission; otherwise, false.","pos":[77623,77708]},{"pos":[77715,77722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override the method as part of the process of making an API more secure.","pos":[77724,77804]},{"content":"For more information, see .","pos":[77805,77832]},{"pos":[77838,77848],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the SkipAOSValidationPermission class.","pos":[77850,77918]},{"pos":[77948,77956],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example demonstrates how to create an instance of the SkipAOSValidationPermission class.","pos":[77958,78065]},{"pos":[78229,78252],"content":"Class SqlDataDictionary","linkify":"Class SqlDataDictionary","nodes":[{"content":"Class SqlDataDictionary","pos":[0,23]}]},{"content":"The SqlDataDictionary class provides a collection of methods for data dictionary maintenance.","pos":[78297,78390]},{"pos":[78396,78403],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This API has a built-in authorization check that is invoked at run time.","pos":[78405,78477]},{"content":"Calls to members of the SQLDataDictionary class by users without access to the development security key (SysDevelopment) results in an exception.","pos":[78478,78623]},{"pos":[78629,78637],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example checks whether the UserInfo table exists in the database.","pos":[78639,78718]},{"pos":[79021,79028],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[79032,79038]},{"content":"Description","pos":[79151,79162]},{"content":"public int indexCreate(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>IndexId indexId<ph id=\"ph4\">\\]</ph>)","pos":[79530,79594],"source":"public int indexCreate(\\[TableId tableId\\], \\[IndexId indexId\\])"},{"content":"Creates the indexes of a table in the SQL database.","pos":[79649,79700]},{"content":"You can also use this method to re-create indexes.","pos":[79701,79751]},{"content":"public str indexCreateDDL(TableId tableId)","pos":[79756,79798]},{"content":"Generates and returns the SQL statements needed to create the indexes of a table.","pos":[79875,79956]},{"content":"public int indexDrop(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>IndexId indexId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean onlyNonUnique<ph id=\"ph6\">\\]</ph>)","pos":[79982,80071],"source":"public int indexDrop(\\[TableId tableId\\], \\[IndexId indexId\\], \\[boolean onlyNonUnique\\])"},{"content":"Drops the indexes of a table in the SQL database.","pos":[80101,80150]},{"content":"public str name(str bmsname, <ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayindex<ph id=\"ph4\">\\]</ph>)","pos":[80208,80277],"source":"public str name(str bmsname, \\[FieldId fieldId\\], \\[int arrayindex\\])"},{"content":"Translates any object name into a valid SQL database object-name; that is, valid for the database currently connected.","pos":[80327,80445]},{"content":"public int tableCreate(<ph id=\"ph1\">\\[</ph>boolean indexes<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>TableId tableId<ph id=\"ph4\">\\]</ph>)","pos":[80457,80521],"source":"public int tableCreate(\\[boolean indexes\\], \\[TableId tableId\\])"},{"content":"Creates one or more  tables in the SQL database.","pos":[80576,80624]},{"content":"Also, provides an option to create for index.","pos":[80625,80670]},{"content":"public str tableCreateDDL(TableId tableId)","pos":[80685,80727]},{"content":"Generates and returns the SQL statement to create a table.","pos":[80804,80862]},{"content":"public int tableDrop(TableId tableId, <ph id=\"ph1\">\\[</ph>boolean prompt<ph id=\"ph2\">\\_</ph>before<ph id=\"ph3\">\\_</ph>drop<ph id=\"ph4\">\\]</ph>)","pos":[80911,80982],"source":"public int tableDrop(TableId tableId, \\[boolean prompt\\_before\\_drop\\])"},{"content":"Drops the  table in the SQL database.","pos":[81030,81067]},{"content":"public str tableDropDDL(TableId tableId)","pos":[81139,81179]},{"content":"Generates and returns the SQL statement to drop a table.","pos":[81258,81314]},{"content":"public boolean tableEmpty(TableId tableId, <ph id=\"ph1\">\\[</ph>str company<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean not<ph id=\"ph4\">\\_</ph>this<ph id=\"ph5\">\\_</ph>company<ph id=\"ph6\">\\]</ph>)","pos":[81365,81456],"source":"public boolean tableEmpty(TableId tableId, \\[str company\\], \\[boolean not\\_this\\_company\\])"},{"content":"Returns true if table is not empty; otherwise false.","pos":[81484,81536]},{"content":"public boolean tableExist(str sqltablename, <ph id=\"ph1\">\\[</ph>boolean use<ph id=\"ph2\">\\_</ph>within<ph id=\"ph3\">\\_</ph>transaction<ph id=\"ph4\">\\]</ph>)","pos":[81614,81695],"source":"public boolean tableExist(str sqltablename, \\[boolean use\\_within\\_transaction\\])"},{"content":"Returns true if table exists; otherwise false.","pos":[81733,81779]},{"content":"public int tableMetaData(TableId tableId)","pos":[81863,81904]},{"content":"Fills the SqlDescribe table with data dictionary meta data.","pos":[81982,82041]},{"content":"public int tableReindex(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>IndexId indexId<ph id=\"ph4\">\\]</ph>)","pos":[82112,82177],"source":"public int tableReindex(\\[TableId tableId\\], \\[IndexId indexId\\])"},{"content":"Updates index for the table.","pos":[82231,82259]},{"content":"public int tableSynchronize(TableId tableId, <ph id=\"ph1\">\\[</ph>boolean update<ph id=\"ph2\">\\_</ph>dict<ph id=\"ph3\">\\_</ph>info<ph id=\"ph4\">\\_</ph>only<ph id=\"ph5\">\\]</ph>, <ph id=\"ph6\">\\[</ph>boolean check<ph id=\"ph7\">\\_</ph>indexes<ph id=\"ph8\">\\]</ph>)","pos":[82361,82471],"source":"public int tableSynchronize(TableId tableId, \\[boolean update\\_dict\\_info\\_only\\], \\[boolean check\\_indexes\\])"},{"content":"Synchronizes the  table and the table of the SQL database.","pos":[82480,82538]},{"content":"public int tableTruncate(TableId tableId, <ph id=\"ph1\">\\[</ph>boolean prompt<ph id=\"ph2\">\\_</ph>before<ph id=\"ph3\">\\_</ph>truncate<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean truncate<ph id=\"ph6\">\\_</ph>system<ph id=\"ph7\">\\_</ph>table<ph id=\"ph8\">\\]</ph>)","pos":[82589,82705],"source":"public int tableTruncate(TableId tableId, \\[boolean prompt\\_before\\_truncate\\], \\[boolean truncate\\_system\\_table\\])"},{"content":"Truncates the  table.","pos":[82708,82729]},{"content":"public str tableTruncateDDL(TableId tableId)","pos":[82817,82861]},{"content":"Generates and returns a SQL statement to truncate a table.","pos":[82936,82994]},{"content":"::public static int synchronize(<ph id=\"ph1\">\\[</ph>boolean synchronize<ph id=\"ph2\">\\_</ph>all<ph id=\"ph3\">\\]</ph>)","pos":[83043,83104],"source":"::public static int synchronize(\\[boolean synchronize\\_all\\])"},{"content":"Synchronizes the  data dictionary and the data dictionary of the SQL database.","pos":[83162,83240]},{"content":"public void new()","pos":[83271,83288]},{"content":"Initializes a new instance of the SqlDataDictionary class.","pos":[83390,83448]},{"content":"public void tableDelete(TableId tableId)","pos":[83520,83560]},{"content":"Deletes the  table in the SQL database.","pos":[83639,83678]},{"pos":[83751,83769],"content":"Method indexCreate","linkify":"Method indexCreate","nodes":[{"content":"Method indexCreate","pos":[0,18]}]},{"content":"Creates the indexes of a table in the SQL database.","pos":[83771,83822]},{"content":"You can also use this method to re-create indexes.","pos":[83823,83873]},{"pos":[83946,83956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[83958,83965]},{"content":"The index handle (0 for all); optional.","pos":[83968,84007]},{"content":"indexId","pos":[84019,84026]},{"content":"The index handle (0 for all); optional.","pos":[84029,84068]},{"pos":[84075,84087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 if the method succeeds.","pos":[84089,84114]},{"pos":[84121,84128],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be used to re-create indexes.","pos":[84130,84175]},{"content":"Use 0 for the parameters to indicate all tables or indexes.","pos":[84176,84235]},{"pos":[84242,84250],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[84377,84398],"content":"Method indexCreateDDL","linkify":"Method indexCreateDDL","nodes":[{"content":"Method indexCreateDDL","pos":[0,21]}]},{"content":"Generates and returns the SQL statements needed to create the indexes of a table.","pos":[84400,84481]},{"pos":[84536,84546],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[84548,84555]},{"content":"The table handle that the index should be created for.","pos":[84558,84612]},{"pos":[84619,84631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns SQL statements to create the indexes of the  table.","pos":[84633,84692]},{"pos":[84698,84714],"content":"Method indexDrop","linkify":"Method indexDrop","nodes":[{"content":"Method indexDrop","pos":[0,16]}]},{"content":"Drops the indexes of a table in the SQL database.","pos":[84716,84765]},{"pos":[84861,84871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[84873,84880]},{"content":"indexId","pos":[84894,84901]},{"content":"onlyNonUnique","pos":[84915,84928]},{"pos":[84937,84949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if the method succeeds.","pos":[84951,84979]},{"pos":[84986,84993],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use 0 for the parameters to indicate all tables or indexes.","pos":[84995,85054]},{"pos":[85061,85069],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[85194,85205],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Translates any object name into a valid SQL database object-name; that is, valid for the database currently connected.","pos":[85207,85325]},{"pos":[85403,85413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"bmsname","pos":[85415,85422]},{"content":"A field index (0 for not applicable), that is, an array field's arrayindex'th entry, such as Dimension<ph id=\"ph1\">\\[</ph>2<ph id=\"ph2\">\\]</ph>; optional.","pos":[85425,85543],"source":"A field index (0 for not applicable), that is, an array field's arrayindex'th entry, such as Dimension\\[2\\]; optional."},{"content":"fieldId","pos":[85555,85562]},{"content":"A field index (0 for not applicable), that is, an array field's arrayindex'th entry, such as Dimension<ph id=\"ph1\">\\[</ph>2<ph id=\"ph2\">\\]</ph>; optional.","pos":[85565,85683],"source":"A field index (0 for not applicable), that is, an array field's arrayindex'th entry, such as Dimension\\[2\\]; optional."},{"content":"arrayindex","pos":[85695,85705]},{"content":"A field index (0 for not applicable), that is, an array field's arrayindex'th entry, such as Dimension<ph id=\"ph1\">\\[</ph>2<ph id=\"ph2\">\\]</ph>; optional.","pos":[85708,85826],"source":"A field index (0 for not applicable), that is, an array field's arrayindex'th entry, such as Dimension\\[2\\]; optional."},{"pos":[85833,85845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The valid object name.","pos":[85847,85869]},{"pos":[85876,85883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Because names may be truncated, a unique object identifier may be supplied.","pos":[85885,85960]},{"content":"Also, a third parameter enables the method to return discrete SQL field names for  array fields.","pos":[85961,86057]},{"pos":[86063,86081],"content":"Method tableCreate","linkify":"Method tableCreate","nodes":[{"content":"Method tableCreate","pos":[0,18]}]},{"content":"Creates one or more  tables in the SQL database.","pos":[86083,86131]},{"content":"Also, provides an option to create for index.","pos":[86132,86177]},{"pos":[86250,86260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"indexes","pos":[86262,86269]},{"content":"The table handle (0 for all); optional.","pos":[86272,86311]},{"content":"tableId","pos":[86323,86330]},{"content":"The table handle (0 for all); optional.","pos":[86333,86372]},{"pos":[86379,86391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if the method succeeds.","pos":[86393,86421]},{"pos":[86428,86435],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Used for low-level maintenance only.","pos":[86437,86473]},{"pos":[86480,86488],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[86615,86636],"content":"Method tableCreateDDL","linkify":"Method tableCreateDDL","nodes":[{"content":"Method tableCreateDDL","pos":[0,21]}]},{"content":"Generates and returns the SQL statement to create a table.","pos":[86638,86696]},{"pos":[86751,86761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[86763,86770]},{"content":"The table handle of the table to be created.","pos":[86773,86817]},{"pos":[86824,86836],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The SQL statement to create a table.","pos":[86838,86874]},{"pos":[86880,86896],"content":"Method tableDrop","linkify":"Method tableDrop","nodes":[{"content":"Method tableDrop","pos":[0,16]}]},{"content":"Drops the  table in the SQL database.","pos":[86898,86935]},{"pos":[87015,87025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[87027,87034]},{"content":"A boolean flag that determines whether to ask user before dropping the table; optional.","pos":[87037,87124]},{"content":"By default, true.","pos":[87125,87142]},{"content":"prompt<ph id=\"ph1\">\\_</ph>before<ph id=\"ph2\">\\_</ph>drop","pos":[87154,87174],"source":"prompt\\_before\\_drop"},{"content":"A boolean flag that determines whether to ask user before dropping the table; optional.","pos":[87177,87264]},{"content":"By default, true.","pos":[87265,87282]},{"pos":[87289,87301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if the method succeeds.","pos":[87303,87331]},{"pos":[87337,87356],"content":"Method tableDropDDL","linkify":"Method tableDropDDL","nodes":[{"content":"Method tableDropDDL","pos":[0,19]}]},{"content":"Generates and returns the SQL statement to drop a table.","pos":[87358,87414]},{"pos":[87467,87477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[87479,87486]},{"content":"The table to be dropped.","pos":[87489,87513]},{"pos":[87520,87532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The SQL statement that drops the specified  table.","pos":[87534,87584]},{"pos":[87590,87607],"content":"Method tableEmpty","linkify":"Method tableEmpty","nodes":[{"content":"Method tableEmpty","pos":[0,17]}]},{"content":"Returns true if table is not empty; otherwise false.","pos":[87609,87661]},{"pos":[87759,87769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[87771,87778]},{"content":"If true exludes records that belongs to the company from the query; optional.","pos":[87781,87858]},{"content":"By default, false.","pos":[87859,87877]},{"content":"company","pos":[87889,87896]},{"content":"If true exludes records that belongs to the company from the query; optional.","pos":[87899,87976]},{"content":"By default, false.","pos":[87977,87995]},{"content":"not<ph id=\"ph1\">\\_</ph>this<ph id=\"ph2\">\\_</ph>company","pos":[88007,88025],"source":"not\\_this\\_company"},{"content":"If true exludes records that belongs to the company from the query; optional.","pos":[88028,88105]},{"content":"By default, false.","pos":[88106,88124]},{"pos":[88131,88143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the table empty; otherwise, false.","pos":[88145,88187]},{"pos":[88193,88210],"content":"Method tableExist","linkify":"Method tableExist","nodes":[{"content":"Method tableExist","pos":[0,17]}]},{"content":"Returns true if table exists; otherwise false.","pos":[88212,88258]},{"pos":[88348,88358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sqltablename","pos":[88360,88372]},{"content":"A boolean flag that determines whether transactions are to used; optional.","pos":[88375,88449]},{"content":"By default, false.","pos":[88450,88468]},{"content":"use<ph id=\"ph1\">\\_</ph>within<ph id=\"ph2\">\\_</ph>transaction","pos":[88480,88504],"source":"use\\_within\\_transaction"},{"content":"A boolean flag that determines whether transactions are to used; optional.","pos":[88507,88581]},{"content":"By default, false.","pos":[88582,88600]},{"pos":[88607,88619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the table exists; otherwise, false.","pos":[88621,88664]},{"pos":[88670,88690],"content":"Method tableMetaData","linkify":"Method tableMetaData","nodes":[{"content":"Method tableMetaData","pos":[0,20]}]},{"content":"Fills the SqlDescribe table with data dictionary meta data.","pos":[88692,88751]},{"pos":[88805,88815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[88817,88824]},{"content":"The table handle.","pos":[88827,88844]},{"pos":[88851,88863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method succeeds.","pos":[88865,88893]},{"pos":[88899,88918],"content":"Method tableReindex","linkify":"Method tableReindex","nodes":[{"content":"Method tableReindex","pos":[0,19]}]},{"content":"Updates index for the table.","pos":[88920,88948]},{"pos":[89022,89032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[89034,89041]},{"content":"The index handle (0 for all); optional.","pos":[89044,89083]},{"content":"By default, 0.","pos":[89084,89098]},{"content":"indexId","pos":[89110,89117]},{"content":"The index handle (0 for all); optional.","pos":[89120,89159]},{"content":"By default, 0.","pos":[89160,89174]},{"pos":[89181,89193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if the method succeeds.","pos":[89195,89223]},{"pos":[89229,89252],"content":"Method tableSynchronize","linkify":"Method tableSynchronize","nodes":[{"content":"Method tableSynchronize","pos":[0,23]}]},{"content":"Synchronizes the  table and the table of the SQL database.","pos":[89254,89312]},{"pos":[89427,89437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[89439,89446]},{"content":"When set forces reindex of the table indexes; optional.","pos":[89449,89504]},{"content":"By default, true.","pos":[89505,89522]},{"content":"update<ph id=\"ph1\">\\_</ph>dict<ph id=\"ph2\">\\_</ph>info<ph id=\"ph3\">\\_</ph>only","pos":[89534,89558],"source":"update\\_dict\\_info\\_only"},{"content":"When set forces reindex of the table indexes; optional.","pos":[89561,89616]},{"content":"By default, true.","pos":[89617,89634]},{"content":"check<ph id=\"ph1\">\\_</ph>indexes","pos":[89646,89660],"source":"check\\_indexes"},{"content":"When set forces reindex of the table indexes; optional.","pos":[89663,89718]},{"content":"By default, true.","pos":[89719,89736]},{"pos":[89743,89755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method succeeds.","pos":[89757,89785]},{"pos":[89791,89811],"content":"Method tableTruncate","linkify":"Method tableTruncate","nodes":[{"content":"Method tableTruncate","pos":[0,20]}]},{"content":"Truncates the  table.","pos":[89813,89834]},{"pos":[89955,89965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[89967,89974]},{"content":"A boolean flag that determines whether to truncate table in case if selected table is system; optional.","pos":[89977,90080]},{"content":"By default, false.","pos":[90081,90099]},{"content":"prompt<ph id=\"ph1\">\\_</ph>before<ph id=\"ph2\">\\_</ph>truncate","pos":[90111,90135],"source":"prompt\\_before\\_truncate"},{"content":"A boolean flag that determines whether to truncate table in case if selected table is system; optional.","pos":[90138,90241]},{"content":"By default, false.","pos":[90242,90260]},{"content":"truncate<ph id=\"ph1\">\\_</ph>system<ph id=\"ph2\">\\_</ph>table","pos":[90272,90295],"source":"truncate\\_system\\_table"},{"content":"A boolean flag that determines whether to truncate table in case if selected table is system; optional.","pos":[90298,90401]},{"content":"By default, false.","pos":[90402,90420]},{"pos":[90427,90439],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Zero if the method succeeds.","pos":[90441,90469]},{"pos":[90475,90498],"content":"Method tableTruncateDDL","linkify":"Method tableTruncateDDL","nodes":[{"content":"Method tableTruncateDDL","pos":[0,23]}]},{"content":"Generates and returns a SQL statement to truncate a table.","pos":[90500,90558]},{"pos":[90615,90625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[90627,90634]},{"content":"The table handle of the table to be truncated.","pos":[90637,90683]},{"pos":[90690,90702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The SQL statement to truncate the table.","pos":[90704,90744]},{"pos":[90750,90768],"content":"Method synchronize","linkify":"Method synchronize","nodes":[{"content":"Method synchronize","pos":[0,18]}]},{"content":"Synchronizes the  data dictionary and the data dictionary of the SQL database.","pos":[90770,90848]},{"pos":[90917,90927],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"synchronize<ph id=\"ph1\">\\_</ph>all","pos":[90929,90945],"source":"synchronize\\_all"},{"content":"A boolean flag that determines whether to synchronize all tables; optional.","pos":[90948,91023]},{"content":"If true, this method synchronizes all tables (instead of only those marked dirty by the  kernel).","pos":[91024,91121]},{"content":"By default, false.","pos":[91122,91140]},{"pos":[91147,91159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if synchronization was successful; otherwise false.","pos":[91161,91217]},{"pos":[91223,91233],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the SqlDataDictionary class.","pos":[91235,91293]},{"pos":[91322,91340],"content":"Method tableDelete","linkify":"Method tableDelete","nodes":[{"content":"Method tableDelete","pos":[0,18]}]},{"content":"Deletes the  table in the SQL database.","pos":[91342,91381]},{"pos":[91434,91444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[91446,91453]},{"pos":[91460,91493],"content":"Class SqlDataDictionaryPermission","linkify":"Class SqlDataDictionaryPermission","nodes":[{"content":"Class SqlDataDictionaryPermission","pos":[0,33]}]},{"content":"The SqlDataDictionaryPermission class controls the ability to access the methods on the and is designed to check permissions for specific APIs.","pos":[91562,91705]},{"content":"For a list of all protected APIs, see Secured APIs.","pos":[91706,91757]},{"pos":[91763,91770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission::demand method is called on before the protected API is executed.","pos":[91772,91956]},{"content":"Call a method on the server tier from one of the following:","pos":[91957,92016]},{"content":"A server static method","pos":[92022,92044]},{"content":"A class instance method that is set to run on the server by using the RunOn class property.","pos":[92049,92140]},{"pos":[92146,92154],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example deletes data from the xRefNames table.","pos":[92156,92216]},{"content":"The assert method is called to declare that the code can then instantiate the AsciiIo class that is used to read and write data to a file.","pos":[92217,92355]},{"pos":[93107,93114],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[93118,93124]},{"content":"Description","pos":[93175,93186]},{"content":"public CodeAccessPermission copy()","pos":[93402,93436]},{"content":"Creates and returns a copy of the current permission class object.","pos":[93459,93525]},{"content":"public boolean isSubsetOf(CodeAccessPermission target)","pos":[93544,93598]},{"content":"Determines whether a current permission is a subset of the specified permission.","pos":[93601,93681]},{"content":"public void new(IdentifierName methodName)","pos":[93686,93728]},{"content":"Creates a new instance of the SQLDataDictionaryPermission class.","pos":[93743,93807]},{"pos":[93831,93842],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Creates and returns a copy of the current permission class object.","pos":[93844,93910]},{"pos":[93957,93969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the current permission object.","pos":[93971,94011]},{"pos":[94018,94025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You override this method when you derive a class from the CodeAccessPermission class.","pos":[94027,94112]},{"content":"For more information, see .","pos":[94113,94140]},{"pos":[94146,94163],"content":"Method isSubsetOf","linkify":"Method isSubsetOf","nodes":[{"content":"Method isSubsetOf","pos":[0,17]}]},{"content":"Determines whether a current permission is a subset of the specified permission.","pos":[94165,94245]},{"pos":[94312,94322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[94324,94330]},{"content":"A CodeAccessPermission class object.","pos":[94333,94369]},{"pos":[94376,94388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a current permission is a subset of a specified permission; otherwise, false.","pos":[94390,94475]},{"pos":[94482,94489],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You override this method when you derive a class from the CodeAccessPermission class.","pos":[94491,94576]},{"content":"For more information, see .","pos":[94577,94604]},{"pos":[94610,94620],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new instance of the SQLDataDictionaryPermission class.","pos":[94622,94686]},{"pos":[94741,94751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodName","pos":[94753,94763]},{"content":"The string that represents the name of the method to be called.","pos":[94766,94829]},{"pos":[94836,94844],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example deletes the data in the xRefNames table.","pos":[94846,94913]},{"pos":[95704,95739],"content":"Class SqlStatementExecutePermission","linkify":"Class SqlStatementExecutePermission","nodes":[{"content":"Class SqlStatementExecutePermission","pos":[0,35]}]},{"content":"Controls the ability to use SQL.","pos":[95810,95842]},{"pos":[95848,95855],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class is designed to check permissions for specific APIs.","pos":[95857,95919]},{"content":"For a list of all protected APIs, see Secured APIs.","pos":[95920,95971]},{"content":"You must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission::demand method is called on before the protected API is executed.","pos":[95972,96156]},{"content":"Call a method on the server tier from one of the following:","pos":[96157,96216]},{"content":"A server static method –or–","pos":[96222,96249]},{"content":"A class instance method that is set to run on the server by using the RunOn class property","pos":[96254,96344]},{"pos":[96350,96358],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This example performs an SQL query on the CustTable table, which runs on the server.","pos":[96360,96444]},{"content":"The result of the query is stored in the <ph id=\"ph1\">\\_</ph>resultSet object.","pos":[96445,96505],"source":" The result of the query is stored in the \\_resultSet object."},{"content":"The assert method is called to declare that the code can then instantiate the AsciiIo class that is used to read and write data to a file.","pos":[96506,96644]},{"pos":[97548,97555],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[97559,97565]},{"content":"Description","pos":[97616,97627]},{"content":"public CodeAccessPermission copy()","pos":[97843,97877]},{"content":"Creates and returns a copy of the current permission class object.","pos":[97900,97966]},{"content":"public boolean isSubsetOf(CodeAccessPermission target)","pos":[97985,98039]},{"content":"Determines whether a current permission is a subset of the specified permission.","pos":[98042,98122]},{"content":"public void new(str sqlStatement)","pos":[98127,98160]},{"content":"Creates a new instance of the SQLStatementExecutePermission class.","pos":[98184,98250]},{"pos":[98272,98283],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Creates and returns a copy of the current permission class object.","pos":[98285,98351]},{"pos":[98398,98410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the current permission object.","pos":[98412,98452]},{"pos":[98459,98466],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You override this method when you derive a class from the CodeAccessPermission class.","pos":[98468,98553]},{"content":"For more information, see .","pos":[98554,98581]},{"pos":[98587,98604],"content":"Method isSubsetOf","linkify":"Method isSubsetOf","nodes":[{"content":"Method isSubsetOf","pos":[0,17]}]},{"content":"Determines whether a current permission is a subset of the specified permission.","pos":[98606,98686]},{"pos":[98753,98763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[98765,98771]},{"content":"A CodeAccessPermission class object.","pos":[98774,98810]},{"pos":[98817,98829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a current permission is a subset of a specified permission; otherwise false.","pos":[98831,98915]},{"pos":[98922,98929],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You override this method when you derive a class from the CodeAccessPermission class.","pos":[98931,99016]},{"content":"For more information, see .","pos":[99017,99044]},{"pos":[99050,99060],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new instance of the SQLStatementExecutePermission class.","pos":[99062,99128]},{"pos":[99174,99184],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sqlStatement","pos":[99186,99198]},{"content":"The SQL string to be executed.","pos":[99201,99231]},{"pos":[99238,99246],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example performs an SQL query on the CustTable table, which runs on the server.","pos":[99248,99341]},{"content":"The result of the query is stored in the resultSet object.","pos":[99342,99400]},{"pos":[100326,100346],"content":"Class SqlSyncPending","linkify":"Class SqlSyncPending","nodes":[{"content":"Class SqlSyncPending","pos":[0,20]}]},{"pos":[100392,100399],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[100405,100413],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[100419,100426],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[100430,100436]},{"content":"Description","pos":[100485,100496]},{"content":"public ConfigurationKeyId configurationKeyTouched()","pos":[100660,100711]},{"content":"public boolean databaseTouched(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[100775,100827],"source":"public boolean databaseTouched(\\[boolean newValue\\])"},{"content":"public ExtendedTypeId extendedDataTypeTouched()","pos":[100890,100937]},{"content":"public TableId indexesTouched()","pos":[101005,101036]},{"content":"public TableId relationTouched()","pos":[101120,101152]},{"content":"public TableId tableDeleted()","pos":[101235,101264]},{"content":"public TableId tableTouched()","pos":[101350,101379]},{"content":"public void new()","pos":[101465,101482]},{"content":"Initializes a new instance of the SqlSyncPending class.","pos":[101520,101575]},{"pos":[101583,101613],"content":"Method configurationKeyTouched","linkify":"Method configurationKeyTouched","nodes":[{"content":"Method configurationKeyTouched","pos":[0,30]}]},{"pos":[101677,101689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101695,101717],"content":"Method databaseTouched","linkify":"Method databaseTouched","nodes":[{"content":"Method databaseTouched","pos":[0,22]}]},{"pos":[101780,101790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[101792,101800]},{"pos":[101809,101821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101827,101857],"content":"Method extendedDataTypeTouched","linkify":"Method extendedDataTypeTouched","nodes":[{"content":"Method extendedDataTypeTouched","pos":[0,30]}]},{"pos":[101917,101929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101935,101956],"content":"Method indexesTouched","linkify":"Method indexesTouched","nodes":[{"content":"Method indexesTouched","pos":[0,21]}]},{"pos":[102000,102012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102018,102040],"content":"Method relationTouched","linkify":"Method relationTouched","nodes":[{"content":"Method relationTouched","pos":[0,22]}]},{"pos":[102085,102097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102103,102122],"content":"Method tableDeleted","linkify":"Method tableDeleted","nodes":[{"content":"Method tableDeleted","pos":[0,19]}]},{"pos":[102164,102176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102182,102201],"content":"Method tableTouched","linkify":"Method tableTouched","nodes":[{"content":"Method tableTouched","pos":[0,19]}]},{"pos":[102243,102255],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[102261,102271],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the SqlSyncPending class.","pos":[102273,102328]},{"pos":[102356,102371],"content":"Class SqlSystem","linkify":"Class SqlSystem","nodes":[{"content":"Class SqlSystem","pos":[0,15]}]},{"content":"The SqlSystem class holds information about the active SQL system, typically login information.","pos":[102408,102503]},{"pos":[102509,102516],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[102522,102530],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[102536,102543],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[102547,102553]},{"content":"Description","pos":[102686,102697]},{"content":"public LoginProperty createLoginProperty()","pos":[103041,103083]},{"content":"Creates the login property to the  database.","pos":[103180,103224]},{"content":"public DatabaseId databaseId()","pos":[103267,103297]},{"content":"Returns the  ID for the database vendor used as the SQL database backend.","pos":[103406,103479]},{"content":"public str databaseName()","pos":[103493,103518]},{"content":"Returns the name of the database vendor used as the SQL database backend.","pos":[103632,103705]},{"content":"public boolean dbRequestedUnicodeEnabled()","pos":[103740,103782]},{"content":"Retrieves the value that indicates if Unicode is supported in the database.","pos":[103879,103954]},{"content":"public str filenameDeadlocks(str Userid)","pos":[103987,104027]},{"content":"Retrieves the name of the user specific deadlocks trace logfile.","pos":[104126,104190]},{"content":"public str filenameQuerytimelimit(str Userid)","pos":[104234,104279]},{"content":"Retrieves the name of the user specific querytime limit logfile.","pos":[104373,104437]},{"content":"public str filenameSqlTrace(str Userid)","pos":[104481,104520]},{"content":"Retrieves the filename of the SQL trace log file for specific user.","pos":[104620,104687]},{"content":"public str filenameWarnings(str Userid)","pos":[104728,104767]},{"content":"Retrieves the name of the user specific warnings log file.","pos":[104867,104925]},{"content":"public str logfileName(<ph id=\"ph1\">\\[</ph>boolean fromCommandline<ph id=\"ph2\">\\]</ph>)","pos":[104975,105026],"source":"public str logfileName(\\[boolean fromCommandline\\])"},{"content":"Retrieves the name of the standard  SQL error log file.","pos":[105114,105169]},{"content":"public str loginConnectString()","pos":[105201,105232]},{"content":"Retrieves the full ODBC connection string.","pos":[105340,105382]},{"content":"public str loginDatabase()","pos":[105448,105474]},{"content":"Retrieves the name of the database currently connected to.","pos":[105587,105645]},{"content":"public str loginDSN()","pos":[105695,105716]},{"content":"Retrieves the open database connectivity (ODBC) data source name (DSN) used to connect to the database.","pos":[105834,105937]},{"content":"public str loginName()","pos":[105942,105964]},{"content":"Retrieves the user name that is used to log-in to the database.","pos":[106081,106144]},{"content":"public str loginServer()","pos":[106189,106213]},{"content":"Retrieves the name of the database server currently connected to.","pos":[106328,106393]},{"content":"public str monocaseFmt(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FieldId fieldId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean includingFieldName<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>boolean considerSystemVariables<ph id=\"ph8\">\\]</ph>)","pos":[106436,106569],"source":"public str monocaseFmt(\\[TableId tableId\\], \\[FieldId fieldId\\], \\[boolean includingFieldName\\], \\[boolean considerSystemVariables\\])"},{"content":"Retrieves the format string that is used for casting the string to one case (e.g. \"NLS<ph id=\"ph1\">\\_</ph>LOWER(%1)\").","pos":[106575,106675],"source":"Retrieves the format string that is used for casting the string to one case (e.g. \"NLS\\_LOWER(%1)\")."},{"content":"public str sqlLiteral(AnyType data, <ph id=\"ph1\">\\[</ph>boolean forWhereClause<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean likeOperand<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean rightJustify<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>int stringLength<ph id=\"ph8\">\\]</ph>)","pos":[106683,106819],"source":"public str sqlLiteral(AnyType data, \\[boolean forWhereClause\\], \\[boolean likeOperand\\], \\[boolean rightJustify\\], \\[int stringLength\\])"},{"content":"Formats the input AX datatype to correct SQL type.","pos":[106822,106872]},{"content":"::public static boolean clusteredIndexes()","pos":[106930,106972]},{"content":"::public static str databaseBackendDesc()","pos":[107177,107218]},{"content":"::public static DatabaseId databaseBackendId()","pos":[107424,107470]},{"content":"::public static str databaseBackendName()","pos":[107671,107712]},{"content":"::public static DatabaseCLI databaseCallLevelInterface()","pos":[107918,107974]},{"content":"::public static int databaseHints(<ph id=\"ph1\">\\[</ph>int new<ph id=\"ph2\">\\_</ph>hint<ph id=\"ph3\">\\_</ph>value<ph id=\"ph4\">\\]</ph>)","pos":[108165,108224],"source":"::public static int databaseHints(\\[int new\\_hint\\_value\\])"},{"content":"::public static boolean functionalIndexes()","pos":[108412,108455]},{"content":"::public static str modelDatabaseBackendName()","pos":[108659,108705]},{"content":"Retrieves the name of the model database AOS currently connected to.","pos":[108798,108866]},{"content":"::public static str managedConnectionString()","pos":[108906,108951]},{"content":"public void new()","pos":[109153,109170]},{"content":"Initializes a new instance of the SqlSystem class.","pos":[109292,109342]},{"content":"public void logfileWrite(str Text)","pos":[109400,109434]},{"content":"Writes a text string into the standard  SQL error logfile.","pos":[109539,109597]},{"pos":[109629,109655],"content":"Method createLoginProperty","linkify":"Method createLoginProperty","nodes":[{"content":"Method createLoginProperty","pos":[0,26]}]},{"content":"Creates the login property to the  database.","pos":[109657,109701]},{"pos":[109756,109768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The login property that was created.","pos":[109770,109806]},{"pos":[109812,109829],"content":"Method databaseId","linkify":"Method databaseId","nodes":[{"content":"Method databaseId","pos":[0,17]}]},{"content":"Returns the  ID for the database vendor used as the SQL database backend.","pos":[109831,109904]},{"pos":[109947,109959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The  ID for the database vendor used as the SQL database backend.","pos":[109961,110026]},{"pos":[110033,110040],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the database vendor cannot be determined for any reason, the enumeration DbBackend::UNKNOWN is returned.","pos":[110042,110149]},{"pos":[110155,110174],"content":"Method databaseName","linkify":"Method databaseName","nodes":[{"content":"Method databaseName","pos":[0,19]}]},{"content":"Returns the name of the database vendor used as the SQL database backend.","pos":[110176,110249]},{"pos":[110287,110299],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the database vendor used as the SQL database backend.","pos":[110301,110366]},{"pos":[110372,110404],"content":"Method dbRequestedUnicodeEnabled","linkify":"Method dbRequestedUnicodeEnabled","nodes":[{"content":"Method dbRequestedUnicodeEnabled","pos":[0,32]}]},{"content":"Retrieves the value that indicates if Unicode is supported in the database.","pos":[110406,110481]},{"pos":[110536,110548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates if Unicode is suported in the database.","pos":[110550,110614]},{"pos":[110620,110644],"content":"Method filenameDeadlocks","linkify":"Method filenameDeadlocks","nodes":[{"content":"Method filenameDeadlocks","pos":[0,24]}]},{"content":"Retrieves the name of the user specific deadlocks trace logfile.","pos":[110646,110710]},{"pos":[110763,110773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Userid","pos":[110775,110781]},{"pos":[110790,110802],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user specific to deadlocks trace log file.","pos":[110804,110862]},{"pos":[110868,110897],"content":"Method filenameQuerytimelimit","linkify":"Method filenameQuerytimelimit","nodes":[{"content":"Method filenameQuerytimelimit","pos":[0,29]}]},{"content":"Retrieves the name of the user specific querytime limit logfile.","pos":[110899,110963]},{"pos":[111021,111031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Userid","pos":[111033,111039]},{"pos":[111048,111060],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user specific querytime limit logfile.","pos":[111062,111116]},{"pos":[111122,111145],"content":"Method filenameSqlTrace","linkify":"Method filenameSqlTrace","nodes":[{"content":"Method filenameSqlTrace","pos":[0,23]}]},{"content":"Retrieves the filename of the SQL trace log file for specific user.","pos":[111147,111214]},{"pos":[111266,111276],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Userid","pos":[111278,111284]},{"content":"The User Id.","pos":[111287,111299]},{"pos":[111306,111318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The filename of SQL trace log.","pos":[111320,111350]},{"pos":[111356,111379],"content":"Method filenameWarnings","linkify":"Method filenameWarnings","nodes":[{"content":"Method filenameWarnings","pos":[0,23]}]},{"content":"Retrieves the name of the user specific warnings log file.","pos":[111381,111439]},{"pos":[111491,111501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Userid","pos":[111503,111509]},{"content":"The identifier of interested user.","pos":[111512,111546]},{"pos":[111553,111565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user specific warnings log file.","pos":[111567,111615]},{"pos":[111621,111639],"content":"Method logfileName","linkify":"Method logfileName","nodes":[{"content":"Method logfileName","pos":[0,18]}]},{"content":"Retrieves the name of the standard  SQL error log file.","pos":[111641,111696]},{"pos":[111758,111768],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fromCommandline","pos":[111770,111785]},{"content":"A boolean value.","pos":[111788,111804]},{"content":"Passing a non-zero value as parameter makes the call return the logfile name passed on the command line; optional.","pos":[111805,111919]},{"pos":[111926,111938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The file name of the standard  SQL error log file.","pos":[111940,111990]},{"pos":[111997,112004],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In version 2.11 or higher, an empty string is returned (for backward compatibility).","pos":[112006,112090]},{"content":"Use the filenameSqlError method to retrieve the log file name.","pos":[112091,112153]},{"pos":[112159,112184],"content":"Method loginConnectString","linkify":"Method loginConnectString","nodes":[{"content":"Method loginConnectString","pos":[0,25]}]},{"content":"Retrieves the full ODBC connection string.","pos":[112186,112228]},{"pos":[112272,112284],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The full ODBC connection string.","pos":[112286,112318]},{"pos":[112324,112344],"content":"Method loginDatabase","linkify":"Method loginDatabase","nodes":[{"content":"Method loginDatabase","pos":[0,20]}]},{"content":"Retrieves the name of the database currently connected to.","pos":[112346,112404]},{"pos":[112443,112455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the database currently connected to.","pos":[112457,112505]},{"pos":[112512,112520],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[112630,112645],"content":"Method loginDSN","linkify":"Method loginDSN","nodes":[{"content":"Method loginDSN","pos":[0,15]}]},{"content":"Retrieves the open database connectivity (ODBC) data source name (DSN) used to connect to the database.","pos":[112647,112750]},{"pos":[112784,112796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the ODBC data source name that is used for connecting to the database.","pos":[112798,112880]},{"pos":[112887,112894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default DSN is \"BMSDSN\".","pos":[112896,112924]},{"pos":[112931,112939],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[113044,113060],"content":"Method loginName","linkify":"Method loginName","nodes":[{"content":"Method loginName","pos":[0,16]}]},{"content":"Retrieves the user name that is used to log-in to the database.","pos":[113062,113125]},{"pos":[113160,113172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user name that is used to log-in to the database.","pos":[113174,113227]},{"pos":[113234,113242],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[113348,113366],"content":"Method loginServer","linkify":"Method loginServer","nodes":[{"content":"Method loginServer","pos":[0,18]}]},{"content":"Retrieves the name of the database server currently connected to.","pos":[113368,113433]},{"pos":[113470,113482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the database currently connected to.","pos":[113484,113532]},{"pos":[113539,113546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An empty string is returned if the database does not support a server concept.","pos":[113548,113626]},{"pos":[113633,113641],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[113749,113767],"content":"Method monocaseFmt","linkify":"Method monocaseFmt","nodes":[{"content":"Method monocaseFmt","pos":[0,18]}]},{"content":"Retrieves the format string that is used for casting the string to one case (e.g. \"NLS<ph id=\"ph1\">\\_</ph>LOWER(%1)\").","pos":[113769,113869],"source":"Retrieves the format string that is used for casting the string to one case (e.g. \"NLS\\_LOWER(%1)\")."},{"pos":[114007,114017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[114019,114026]},{"content":"fieldId","pos":[114040,114047]},{"content":"includingFieldName","pos":[114061,114079]},{"content":"considerSystemVariables","pos":[114093,114116]},{"pos":[114125,114137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The format string that is used for casting the string to one case.","pos":[114139,114205]},{"pos":[114212,114219],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Finance and Operations style for placeholder(s) is used (i.e. \"%1\").","pos":[114221,114289]},{"pos":[114295,114312],"content":"Method sqlLiteral","linkify":"Method sqlLiteral","nodes":[{"content":"Method sqlLiteral","pos":[0,17]}]},{"content":"Formats the input AX datatype to correct SQL type.","pos":[114314,114364]},{"pos":[114505,114515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[114517,114521]},{"content":"The length of the string.By default equals zero.","pos":[114524,114572]},{"content":"forWhereClause","pos":[114584,114598]},{"content":"The length of the string.By default equals zero.","pos":[114601,114649]},{"content":"likeOperand","pos":[114661,114672]},{"content":"The length of the string.By default equals zero.","pos":[114675,114723]},{"content":"rightJustify","pos":[114735,114747]},{"content":"The length of the string.By default equals zero.","pos":[114750,114798]},{"content":"stringLength","pos":[114810,114822]},{"content":"The length of the string.By default equals zero.","pos":[114825,114873]},{"pos":[114880,114892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The formatted SQL type string.","pos":[114894,114924]},{"pos":[114930,114953],"content":"Method clusteredIndexes","linkify":"Method clusteredIndexes","nodes":[{"content":"Method clusteredIndexes","pos":[0,23]}]},{"pos":[115006,115018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[115024,115050],"content":"Method databaseBackendDesc","linkify":"Method databaseBackendDesc","nodes":[{"content":"Method databaseBackendDesc","pos":[0,26]}]},{"pos":[115102,115114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[115120,115144],"content":"Method databaseBackendId","linkify":"Method databaseBackendId","nodes":[{"content":"Method databaseBackendId","pos":[0,24]}]},{"pos":[115201,115213],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[115219,115245],"content":"Method databaseBackendName","linkify":"Method databaseBackendName","nodes":[{"content":"Method databaseBackendName","pos":[0,26]}]},{"pos":[115297,115309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[115315,115348],"content":"Method databaseCallLevelInterface","linkify":"Method databaseCallLevelInterface","nodes":[{"content":"Method databaseCallLevelInterface","pos":[0,33]}]},{"pos":[115415,115427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[115433,115453],"content":"Method databaseHints","linkify":"Method databaseHints","nodes":[{"content":"Method databaseHints","pos":[0,20]}]},{"pos":[115519,115529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"new<ph id=\"ph1\">\\_</ph>hint<ph id=\"ph2\">\\_</ph>value","pos":[115531,115547],"source":"new\\_hint\\_value"},{"pos":[115556,115568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[115574,115598],"content":"Method functionalIndexes","linkify":"Method functionalIndexes","nodes":[{"content":"Method functionalIndexes","pos":[0,24]}]},{"pos":[115652,115664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[115670,115701],"content":"Method modelDatabaseBackendName","linkify":"Method modelDatabaseBackendName","nodes":[{"content":"Method modelDatabaseBackendName","pos":[0,31]}]},{"content":"Retrieves the name of the model database AOS currently connected to.","pos":[115703,115771]},{"pos":[115828,115840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the model database currently connected to.","pos":[115842,115896]},{"pos":[115902,115932],"content":"Method managedConnectionString","linkify":"Method managedConnectionString","nodes":[{"content":"Method managedConnectionString","pos":[0,30]}]},{"pos":[115988,116000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[116006,116016],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the SqlSystem class.","pos":[116018,116068]},{"pos":[116097,116116],"content":"Method logfileWrite","linkify":"Method logfileWrite","nodes":[{"content":"Method logfileWrite","pos":[0,19]}]},{"content":"Writes a text string into the standard  SQL error logfile.","pos":[116118,116176]},{"pos":[116223,116233],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Text","pos":[116235,116239]},{"content":"The text (for example, a bookmark) to write to the logfile.","pos":[116242,116301]},{"pos":[116308,116315],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Following an error situation of any kind (which is logged in the logfile), you may want to insert a personal bookmark that explains the current scenario.","pos":[116317,116470]},{"pos":[116477,116485],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[116674,116704],"content":"Class SSRSReportAutoDesignNode","linkify":"Class SSRSReportAutoDesignNode","nodes":[{"content":"Class SSRSReportAutoDesignNode","pos":[0,30]}]},{"pos":[116774,116781],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[116787,116795],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[116801,116808],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[116812,116818]},{"content":"Description","pos":[116866,116877]},{"content":"public str getCrossReferences()","pos":[117094,117125]},{"content":"Retrieves the cross-references by using the specified SSRSReportDesignNode object.","pos":[117148,117230]},{"content":"public void setCrossReferences(str crossReferences)","pos":[117235,117286]},{"content":"Sets the cross-references by using the specified SSRSReportDesignNode object.","pos":[117289,117366]},{"pos":[117379,117404],"content":"Method getCrossReferences","linkify":"Method getCrossReferences","nodes":[{"content":"Method getCrossReferences","pos":[0,25]}]},{"content":"Retrieves the cross-references by using the specified SSRSReportDesignNode object.","pos":[117406,117488]},{"pos":[117532,117544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The cross-references in XML format.","pos":[117546,117581]},{"pos":[117587,117612],"content":"Method setCrossReferences","linkify":"Method setCrossReferences","nodes":[{"content":"Method setCrossReferences","pos":[0,25]}]},{"content":"Sets the cross-references by using the specified SSRSReportDesignNode object.","pos":[117614,117691]},{"pos":[117755,117765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"crossReferences","pos":[117767,117782]},{"content":"The cross-references in XML format.","pos":[117785,117820]},{"pos":[117827,117834],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method only updates the cross-reference XML stored on the specified SSRSReportDesignNode object.","pos":[117836,117937]},{"content":"It does not update the cross-reference system.","pos":[117938,117984]},{"pos":[117989,118016],"content":"Class SSRSReportConceptNode","linkify":"Class SSRSReportConceptNode","nodes":[{"content":"Class SSRSReportConceptNode","pos":[0,27]}]},{"content":"The SSRSReportConceptNode class lets you create, read, update, and delete SSRS reports, data sources, style templates, and images in the  Application Object Tree (AOT).","pos":[118072,118240]},{"pos":[118246,118253],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before calling this API.","pos":[118255,118363]},{"pos":[118369,118377],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[118383,118390],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[118394,118400]},{"content":"Description","pos":[118455,118466]},{"content":"public str AOTgetSource()","pos":[118680,118705]},{"content":"Returns the source code of this node.","pos":[118741,118778]},{"content":"public str getCrossReferences()","pos":[118823,118854]},{"content":"Retrieves the cross-references by the specified SSRSReportConceptNode object.","pos":[118884,118961]},{"content":"public void allowCaching(<ph id=\"ph1\">\\[</ph>boolean allow<ph id=\"ph2\">\\]</ph>)","pos":[118966,119009],"source":"public void allowCaching(\\[boolean allow\\])"},{"content":"public void setCrossReferences(str crossReferences)","pos":[119109,119160]},{"content":"Sets the cross-references by the specified SSRSReportConceptNode object.","pos":[119170,119242]},{"content":"public void AOTsetSource(str source, <ph id=\"ph1\">\\[</ph>boolean isStatic<ph id=\"ph2\">\\]</ph>)","pos":[119252,119310],"source":"public void AOTsetSource(str source, \\[boolean isStatic\\])"},{"content":"Sets the source code of this node.","pos":[119313,119347]},{"pos":[119398,119417],"content":"Method AOTgetSource","linkify":"Method AOTgetSource","nodes":[{"content":"Method AOTgetSource","pos":[0,19]}]},{"content":"Returns the source code of this node.","pos":[119419,119456]},{"pos":[119494,119506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that contains the source code, if any; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[119508,119634]},{"pos":[119641,119648],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is overridden by nodes that have source code.","pos":[119650,119709]},{"pos":[119715,119740],"content":"Method getCrossReferences","linkify":"Method getCrossReferences","nodes":[{"content":"Method getCrossReferences","pos":[0,25]}]},{"content":"Retrieves the cross-references by the specified SSRSReportConceptNode object.","pos":[119742,119819]},{"pos":[119863,119875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The cross-references by the specified SSRSReportConceptNode object in XML format.","pos":[119877,119958]},{"pos":[119964,119983],"content":"Method allowCaching","linkify":"Method allowCaching","nodes":[{"content":"Method allowCaching","pos":[0,19]}]},{"pos":[120037,120047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"allow","pos":[120049,120054]},{"pos":[120062,120087],"content":"Method setCrossReferences","linkify":"Method setCrossReferences","nodes":[{"content":"Method setCrossReferences","pos":[0,25]}]},{"content":"Sets the cross-references by the specified SSRSReportConceptNode object.","pos":[120089,120161]},{"pos":[120225,120235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"crossReferences","pos":[120237,120252]},{"content":"The cross-references by the specified SSRSReportConceptNode object in XML format.","pos":[120255,120336]},{"pos":[120343,120350],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method only updates the cross-reference XML stored on the specified SSRSReportConceptNode object.","pos":[120352,120454]},{"content":"It does not update the cross-reference system.","pos":[120455,120501]},{"pos":[120507,120526],"content":"Method AOTsetSource","linkify":"Method AOTsetSource","nodes":[{"content":"Method AOTsetSource","pos":[0,19]}]},{"content":"Sets the source code of this node.","pos":[120528,120562]},{"pos":[120631,120641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"source","pos":[120643,120649]},{"content":"The value that specifies whether the method is static; optional.","pos":[120652,120716]},{"content":"isStatic","pos":[120728,120736]},{"content":"The value that specifies whether the method is static; optional.","pos":[120739,120803]},{"pos":[120810,120817],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is overridden by nodes that have source code.","pos":[120819,120876]},{"pos":[120881,120907],"content":"Class SSRSReportDesignNode","linkify":"Class SSRSReportDesignNode","nodes":[{"content":"Class SSRSReportDesignNode","pos":[0,26]}]},{"content":"The SSRSReportDesignNode class lets you create, read, update, and delete Microsoft SQL Server Reporting Services reports, data sources, style templates, and images in the  Application Object Tree (AOT).","pos":[120962,121164]},{"pos":[121170,121177],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before calling this API.","pos":[121179,121287]},{"pos":[121293,121301],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[121307,121314],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[121318,121324]},{"content":"Description","pos":[121372,121383]},{"content":"public str getCrossReferences()","pos":[121588,121619]},{"content":"Retrieves the cross-references by the specified SSRSReportDesignNode object.","pos":[121642,121718]},{"content":"public void setCrossReferences(str crossReferences)","pos":[121723,121774]},{"content":"Sets the cross-references by the specified SSRSReportDesignNode object.","pos":[121777,121848]},{"pos":[121861,121886],"content":"Method getCrossReferences","linkify":"Method getCrossReferences","nodes":[{"content":"Method getCrossReferences","pos":[0,25]}]},{"content":"Retrieves the cross-references by the specified SSRSReportDesignNode object.","pos":[121888,121964]},{"pos":[122008,122020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The cross-references by the specified SSRSReportDesignNode object in XML format.","pos":[122022,122102]},{"pos":[122108,122133],"content":"Method setCrossReferences","linkify":"Method setCrossReferences","nodes":[{"content":"Method setCrossReferences","pos":[0,25]}]},{"content":"Sets the cross-references by the specified SSRSReportDesignNode object.","pos":[122135,122206]},{"pos":[122270,122280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"crossReferences","pos":[122282,122297]},{"content":"The cross-references by the specified SSRSReportDesignNode object in XML format.","pos":[122300,122380]},{"pos":[122387,122394],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method only updates the cross-reference XML stored on the specified SSRSReportDesignNode object.","pos":[122396,122497]},{"content":"It does not update the cross-reference system.","pos":[122498,122544]},{"pos":[122549,122584],"content":"Class SSRSReportPrecisionDesignNode","linkify":"Class SSRSReportPrecisionDesignNode","nodes":[{"content":"Class SSRSReportPrecisionDesignNode","pos":[0,35]}]},{"pos":[122659,122666],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[122672,122680],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[122686,122693],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[122697,122703]},{"content":"Description","pos":[122751,122762]},{"content":"public str getCrossReferences()","pos":[122967,122998]},{"content":"Retrieves the cross-references to the specified SSRSReportDesignNode object.","pos":[123021,123097]},{"content":"public void setCrossReferences(str crossReferences)","pos":[123102,123153]},{"content":"Sets the cross-references to the specified SSRSReportDesignNode object.","pos":[123156,123227]},{"pos":[123240,123265],"content":"Method getCrossReferences","linkify":"Method getCrossReferences","nodes":[{"content":"Method getCrossReferences","pos":[0,25]}]},{"content":"Retrieves the cross-references to the specified SSRSReportDesignNode object.","pos":[123267,123343]},{"pos":[123387,123399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The cross-references to the specified SSRSReportDesignNode object in XML format.","pos":[123401,123481]},{"pos":[123487,123512],"content":"Method setCrossReferences","linkify":"Method setCrossReferences","nodes":[{"content":"Method setCrossReferences","pos":[0,25]}]},{"content":"Sets the cross-references to the specified SSRSReportDesignNode object.","pos":[123514,123585]},{"pos":[123649,123659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"crossReferences","pos":[123661,123676]},{"content":"The cross-references to the specified SSRSReportDesignNode object in XML format.","pos":[123679,123759]},{"pos":[123766,123773],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method only updates the cross-reference XML that is stored on the specified SSRSReportDesignNode object.","pos":[123775,123884]},{"content":"It does not update the cross-reference system.","pos":[123885,123931]},{"pos":[123936,123951],"content":"Class Statement","linkify":"Class Statement","nodes":[{"content":"Class Statement","pos":[0,15]}]},{"content":"The Statement class executes a static SQL statement and obtains the results it produces.","pos":[123988,124076]},{"pos":[124082,124089],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Only one per Statement can be open at any point in time.","pos":[124091,124147]},{"content":"Therefore, if the reading of one ResultSet is interleaved with the reading of another, each must have been generated by different Statements.","pos":[124148,124289]},{"content":"Record and field level securities are not enforced on the Statement class.","pos":[124290,124364]},{"content":"Therefore, make sure you are not exposing data returned to the user without doing explicit security validation.","pos":[124365,124476]},{"content":"All statement executed methods implicitly close a statement's current ResultSet if an open one exists.","pos":[124477,124579]},{"pos":[124585,124593],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[125090,125097],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[125101,125107]},{"content":"Description","pos":[125148,125159]},{"content":"public ResultSet executeQuery(str statement)","pos":[125399,125443]},{"content":"Executes an SQL statement that returns an instance of the .","pos":[125446,125505]},{"content":"public int executeUpdate(str statement)","pos":[125548,125587]},{"content":"Executes a SQL INSERT, UPDATE, or DELETE statement.","pos":[125595,125646]},{"content":"public int getLastError()","pos":[125697,125722]},{"content":"Retrieves the error code returned by the SQL database backend for the last SQL operation.","pos":[125744,125833]},{"content":"public str getLastErrorText()","pos":[125846,125875]},{"content":"Retrieves the error text that is returned by the SQL database backend for the last SQL operation.","pos":[125893,125990]},{"content":"public int getMaxFieldSize()","pos":[125995,126023]},{"content":"Returns the current maximum column size limit, if any.","pos":[126042,126096]},{"content":"public void close()","pos":[126144,126163]},{"content":"Releases the database resources of a statement object.","pos":[126191,126245]},{"content":"public void setMaxFieldSize(int max)","pos":[126293,126329]},{"content":"Sets the maximum column size limit.","pos":[126340,126375]},{"pos":[126445,126464],"content":"Method executeQuery","linkify":"Method executeQuery","nodes":[{"content":"Method executeQuery","pos":[0,19]}]},{"content":"Executes an SQL statement that returns an instance of the .","pos":[126466,126525]},{"pos":[126582,126592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"statement","pos":[126594,126603]},{"content":"The string that contains the SQL statement that is used to retrieve the result set.","pos":[126606,126689]},{"pos":[126696,126708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The object that contains the data returned from the query.","pos":[126710,126768]},{"pos":[126775,126782],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If users control input to the executeQuery method, an SQL injection threat can occur.","pos":[126784,126869]},{"content":"Therefore, this method runs under Code Access Security.","pos":[126870,126925]},{"content":"Calls to this method on the server require permission from the .","pos":[126926,126990]},{"content":"The following are safer alternatives for executing SQL statements:","pos":[126991,127057]},{"content":"Queries","pos":[127063,127070]},{"content":"Views","pos":[127075,127080]},{"content":"X++ select statements","pos":[127085,127106]},{"content":"Record level security is not enforced on the Statement class.","pos":[127108,127169]},{"content":"If data is exposed to the user, perform explicit security validation.","pos":[127170,127239]},{"pos":[127246,127254],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example performs an SQL query on CustTable, which runs on the server.","pos":[127256,127339]},{"content":"The result of the query is stored in the resultSet object.","pos":[127340,127398]},{"pos":[128282,128302],"content":"Method executeUpdate","linkify":"Method executeUpdate","nodes":[{"content":"Method executeUpdate","pos":[0,20]}]},{"content":"Executes a SQL INSERT, UPDATE, or DELETE statement.","pos":[128304,128355]},{"pos":[128407,128417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"statement","pos":[128419,128428]},{"content":"The string that contains the SQL statement being passed to the database.","pos":[128431,128503]},{"pos":[128510,128522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An updated row count; otherwise, 0 (zero) for SQL statements that return nothing.","pos":[128524,128605]},{"pos":[128612,128619],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"SQL statements that return nothing, such as SQLDDL statements, can also be executed.","pos":[128621,128705]},{"content":"If users control input to the executeUpdate method, an SQL injection thread can occur.","pos":[128706,128792]},{"content":"Therefore, this method runs under Code Access Security.","pos":[128793,128848]},{"content":"Calls to this method on the server require permission from the .","pos":[128849,128913]},{"content":"The following are safer alternatives for interacting with the database:","pos":[128914,128985]},{"content":"Queries","pos":[128991,128998]},{"content":"Views","pos":[129003,129008]},{"content":"X++ select statements","pos":[129013,129034]},{"content":"Record level security is not enforced on the Statement class.","pos":[129036,129097]},{"content":"If data is exposed to the user, perform explicit security validation.","pos":[129098,129167]},{"pos":[129173,129192],"content":"Method getLastError","linkify":"Method getLastError","nodes":[{"content":"Method getLastError","pos":[0,19]}]},{"content":"Retrieves the error code returned by the SQL database backend for the last SQL operation.","pos":[129194,129283]},{"pos":[129321,129333],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The error code returned by the SQL database backend for the last SQL operation; or 0 for success.","pos":[129335,129432]},{"pos":[129439,129447],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[130666,130689],"content":"Method getLastErrorText","linkify":"Method getLastErrorText","nodes":[{"content":"Method getLastErrorText","pos":[0,23]}]},{"content":"Retrieves the error text that is returned by the SQL database backend for the last SQL operation.","pos":[130691,130788]},{"pos":[130830,130842],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The error text that is provided by the SQL database for the last SQL operation.","pos":[130844,130923]},{"pos":[130929,130951],"content":"Method getMaxFieldSize","linkify":"Method getMaxFieldSize","nodes":[{"content":"Method getMaxFieldSize","pos":[0,22]}]},{"content":"Returns the current maximum column size limit, if any.","pos":[130953,131007]},{"pos":[131048,131060],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current maximum column size limit; 0 means unlimited.","pos":[131062,131119]},{"pos":[131126,131133],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The maxFieldSize limit (in bytes) is the maximum amount of data returned for any column value; it only applies to binary, varbinary, longvarbinary, char, varchar, and longvarchar columns.","pos":[131135,131322]},{"content":"If the limit is exceeded, the excess data is silently discarded.","pos":[131323,131387]},{"pos":[131393,131405],"content":"Method close","linkify":"Method close","nodes":[{"content":"Method close","pos":[0,12]}]},{"content":"Releases the database resources of a statement object.","pos":[131407,131461]},{"pos":[131492,131514],"content":"Method setMaxFieldSize","linkify":"Method setMaxFieldSize","nodes":[{"content":"Method setMaxFieldSize","pos":[0,22]}]},{"content":"Sets the maximum column size limit.","pos":[131516,131551]},{"pos":[131600,131610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"max","pos":[131612,131615]},{"content":"The new max column size limit; 0 means unlimited.","pos":[131618,131667]},{"pos":[131674,131681],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The maxFieldSize limit (in bytes) is set to limit the size of data that can be returned for any column value; it only applies to binary, varbinary, longvarbinary, char, varchar, and longvarchar fields.","pos":[131683,131884]},{"content":"If the limit is exceeded, the excess data is silently discarded.","pos":[131885,131949]},{"content":"For maximum portability, use values greater than 256.","pos":[131950,132003]},{"pos":[132008,132020],"content":"Class Struct","linkify":"Class Struct","nodes":[{"content":"Class Struct","pos":[0,12]}]},{"content":"A struct holds several values of any X++ type, to group the information about a specific entity.","pos":[132054,132150]},{"pos":[132156,132163],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A struct (short for structure) is an entity that can hold several values of any X++ type.","pos":[132165,132254]},{"content":"Structs are used to group information about a specific entity.","pos":[132255,132317]},{"content":"For example, you might want to store information about a customer's name, age and address and then treat this compound information as one item.","pos":[132318,132461]},{"content":"The items in a struct are specified by a data type and a name.","pos":[132462,132524]},{"content":"Items are added when the struct is created by using the new method, or they are created after the struct has been created by using the add method.","pos":[132525,132671]},{"content":"If you add an item by using the add method, you specify the value for the item at the same time, and the data type is inferred from this value.","pos":[132672,132815]},{"content":"If you add an item during the instantiation of the struct, you need to use the value or the valueIndex method to assign a value to it.","pos":[132816,132950]},{"content":"The items in a struct can be of any of the data types found in the Types system enum, including: string, integer, real, date, container, record, and class.","pos":[132951,133106]},{"content":"The items in a struct are arranged in alphabetical order of the item names.","pos":[133107,133182]},{"content":"The fields in a struct can be traversed by using the fields, fieldName, and fieldType methods.","pos":[133183,133277]},{"content":"Structs can be packed into containers and later restored by using the Struct::create method.","pos":[133278,133370]},{"content":"Structs have some similarities to X++ containers.","pos":[133371,133420]},{"content":"However, a container is a value type and is built into the X++ language.","pos":[133421,133493]},{"content":"You can create nested containers, but you cannot create nested structs.","pos":[133494,133565]},{"content":"X++ classes can store information in much the same way as structs.","pos":[133566,133632]},{"content":"But although classes can supply methods to manipulate the data, no such facility is provided for structs, and there is no concept of overriding or extension.","pos":[133633,133790]},{"content":"Classes can only be created in the AOT, but structs exist solely in the context of the code in which they are created.","pos":[133791,133909]},{"content":"Class member variables are private to the class, so accessor functions must be coded for them for the values to be used from outside the class.","pos":[133910,134053]},{"content":"The items within a struct are publicly accessible.","pos":[134054,134104]},{"pos":[134110,134118],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a struct with two items and then assigns values to those items.","pos":[134120,134213]},{"content":"A new item is then added by using the Struct.add method; the data type of the item is inferred from the value assigned to it.","pos":[134214,134339]},{"content":"The struct is then packed into a container and used to create a new struct, a copy of the original struct.","pos":[134340,134446]},{"pos":[135231,135238],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[135242,135248]},{"content":"Description","pos":[135306,135317]},{"content":"public boolean add(str fieldName, AnyType value)","pos":[135566,135614]},{"content":"Adds a new item to the struct and assigns the specified value to it.","pos":[135630,135698]},{"content":"public str definitionString()","pos":[135728,135757]},{"content":"Returns a description of the names and types of the elements in the struct.","pos":[135792,135867]},{"content":"public boolean exists(str fieldName)","pos":[135890,135926]},{"content":"Determines whether a particular item exists in a struct.","pos":[135954,136010]},{"content":"public str fieldName(int index)","pos":[136052,136083]},{"content":"Returns the name of the item in the struct at the specified position.","pos":[136116,136185]},{"content":"public int fields()","pos":[136214,136233]},{"content":"Returns the number of items in the struct.","pos":[136278,136320]},{"content":"public Types fieldType(int index)","pos":[136376,136409]},{"content":"Returns the data type of the item in the struct at the specified position.","pos":[136440,136514]},{"content":"public int index(str fieldName)","pos":[136538,136569]},{"content":"Calculates the position of an item in the struct based on its name.","pos":[136602,136669]},{"content":"public container pack()","pos":[136700,136723]},{"content":"Serializes the current instance of the Struct class.","pos":[136764,136816]},{"content":"public boolean remove(str fieldName)","pos":[136862,136898]},{"content":"Removes an item from a struct.","pos":[136926,136956]},{"content":"public str toString()","pos":[137024,137045]},{"content":"Returns a string that describes the contents of the struct.","pos":[137088,137147]},{"content":"public AnyType value(str fieldName, <ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[137186,137240],"source":"public AnyType value(str fieldName, \\[AnyType value\\])"},{"content":"Gets or sets the value for a specified item in a struct.","pos":[137250,137306]},{"content":"public str valueImage(int index)","pos":[137348,137380]},{"content":"Returns a string that describes the value of the item at a particular position in the struct.","pos":[137412,137505]},{"content":"public AnyType valueIndex(int index, <ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[137510,137565],"source":"public AnyType valueIndex(int index, \\[AnyType value\\])"},{"content":"Gets or sets the value of the item at a specified position in a struct.","pos":[137574,137645]},{"content":"public str xml(<ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[137672,137702],"source":"public str xml(\\[int indent\\])"},{"content":"Returns an XML string that represents the current object.","pos":[137736,137793]},{"content":"::public static Struct create(container container)","pos":[137834,137884]},{"content":"Creates a struct from a container that is obtained from a prior call to Struct.pack.","pos":[137898,137982]},{"content":"::public static Struct createFromXML(Object xmlnode)","pos":[137996,138048]},{"content":"::public static boolean equal(Struct struct1, Struct struct2)","pos":[138158,138219]},{"content":"Determines whether two structs are equal.","pos":[138222,138263]},{"content":"::public static Struct merge(Struct struct1, Struct struct2)","pos":[138320,138380]},{"content":"Combines two structs to create a new struct.","pos":[138384,138428]},{"content":"public void new(VarArg specifier)","pos":[138482,138515]},{"content":"Creates a struct.","pos":[138546,138563]},{"pos":[138647,138657],"content":"Method add","linkify":"Method add","nodes":[{"content":"Method add","pos":[0,10]}]},{"content":"Adds a new item to the struct and assigns the specified value to it.","pos":[138659,138727]},{"pos":[138788,138798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[138800,138809]},{"content":"The value to assign to the new item.","pos":[138812,138848]},{"content":"This value defines the type of the item.","pos":[138849,138889]},{"content":"value","pos":[138901,138906]},{"content":"The value to assign to the new item.","pos":[138909,138945]},{"content":"This value defines the type of the item.","pos":[138946,138986]},{"pos":[138993,139005],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the value has been added to the struct; false if the value could not be added (if it already existed in the struct).","pos":[139007,139131]},{"pos":[139138,139145],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type of the value is inferred from content of the value.","pos":[139147,139207]},{"content":"The items in a struct are arranged in alphabetical order according to the item names.","pos":[139208,139293]},{"content":"The value of an item in a struct can be changed by using the Struct.value or the Struct.valueIndex method.","pos":[139294,139400]},{"pos":[139407,139415],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a struct with two items name and age fields and assigns values to those items.","pos":[139417,139525]},{"content":"The add method is then used to create an additional item the shoeSize variable, with a value of 43.","pos":[139526,139625]},{"content":"The type of the value determines the type of the new item, int.","pos":[139626,139689]},{"pos":[140198,140221],"content":"Method definitionString","linkify":"Method definitionString","nodes":[{"content":"Method definitionString","pos":[0,23]}]},{"content":"Returns a description of the names and types of the elements in the struct.","pos":[140223,140298]},{"pos":[140340,140352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains a definition of the struct.","pos":[140354,140404]},{"pos":[140411,140418],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use the definitionString method to create a copy of a struct by using the syntax: newStruct = new struct(oldStruct.definitionString());","pos":[140420,140563]},{"pos":[140569,140582],"content":"Method exists","linkify":"Method exists","nodes":[{"content":"Method exists","pos":[0,13]}]},{"content":"Determines whether a particular item exists in a struct.","pos":[140584,140640]},{"pos":[140689,140699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[140701,140710]},{"content":"The name of the item to check for.","pos":[140713,140747]},{"pos":[140754,140766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the item exists in the struct; otherwise, false.","pos":[140768,140824]},{"pos":[140831,140839],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example tests whether a particular item exists in a struct, and if not, it adds the item and assigns a value to it using the Struct.add method.","pos":[140841,140998]},{"pos":[141305,141321],"content":"Method fieldName","linkify":"Method fieldName","nodes":[{"content":"Method fieldName","pos":[0,16]}]},{"content":"Returns the name of the item in the struct at the specified position.","pos":[141323,141392]},{"pos":[141436,141446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[141448,141453]},{"content":"The position in the struct at which you want to retrieve the item name.","pos":[141456,141527]},{"pos":[141534,141546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the item at the position specified by index.","pos":[141548,141604]},{"pos":[141611,141618],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If index is not found, an empty string is returned.","pos":[141620,141671]},{"pos":[141678,141686],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a struct from a container and then uses the Struct.fields method to iterate through the contents of the container.","pos":[141688,141832]},{"content":"The fieldName method is used to test the name of each item in the struct, and a specific action is run depending on the value of this name.","pos":[141833,141972]},{"pos":[143487,143500],"content":"Method fields","linkify":"Method fields","nodes":[{"content":"Method fields","pos":[0,13]}]},{"content":"Returns the number of items in the struct.","pos":[143502,143544]},{"pos":[143576,143588],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of items in the struct.","pos":[143590,143624]},{"pos":[143631,143638],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To find the position of an item in a struct, use the Struct.index method.","pos":[143640,143713]},{"pos":[143720,143728],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a struct from a container and then uses the fields method to iterate through the contents of the container.","pos":[143730,143867]},{"pos":[145382,145398],"content":"Method fieldType","linkify":"Method fieldType","nodes":[{"content":"Method fieldType","pos":[0,16]}]},{"content":"Returns the data type of the item in the struct at the specified position.","pos":[145400,145474]},{"pos":[145520,145530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[145532,145537]},{"content":"The position in the struct that you want to retrieve the data type for.","pos":[145540,145611]},{"pos":[145618,145630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The data type of the item at the position specified by index.","pos":[145632,145693]},{"pos":[145700,145707],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible values are supplied by the system enum.","pos":[145709,145761]},{"content":"If index is not found, the return value is Types::void.","pos":[145762,145817]},{"content":"You can determine the position of a particular item in a struct by using the Struct.index method","pos":[145818,145914]},{"pos":[145920,145932],"content":"Method index","linkify":"Method index","nodes":[{"content":"Method index","pos":[0,12]}]},{"content":"Calculates the position of an item in the struct based on its name.","pos":[145934,146001]},{"pos":[146045,146055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[146057,146066]},{"content":"The name of the item for which to return the position.","pos":[146069,146123]},{"pos":[146130,146142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The position of the item.","pos":[146144,146169]},{"pos":[146176,146183],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The items in a struct are arranged in alphabetical order according to the item names.","pos":[146185,146270]},{"content":"If there is no item with the name fieldName, 0 is returned.","pos":[146271,146330]},{"pos":[146336,146347],"content":"Method pack","linkify":"Method pack","nodes":[{"content":"Method pack","pos":[0,11]}]},{"content":"Serializes the current instance of the Struct class.","pos":[146349,146401]},{"pos":[146437,146449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that contains the current instance of the Struct class.","pos":[146451,146518]},{"pos":[146525,146532],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The pack method is called on each field that holds an object, to yield a (sub) container.","pos":[146534,146623]},{"content":"The struct may be recreated from the container by using the Struct.create method.","pos":[146624,146705]},{"pos":[146712,146720],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a struct with two items in it (name and age), and then adds values to the items.","pos":[146722,146832]},{"content":"The struct is packed into a container, and this container is then used to create a new struct.","pos":[146833,146927]},{"pos":[147416,147429],"content":"Method remove","linkify":"Method remove","nodes":[{"content":"Method remove","pos":[0,13]}]},{"content":"Removes an item from a struct.","pos":[147431,147461]},{"pos":[147510,147520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[147522,147531]},{"content":"The name of the item you want to remove.","pos":[147534,147574]},{"pos":[147581,147593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the item was found (and removed); otherwise, false.","pos":[147595,147654]},{"pos":[147661,147668],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name you specify for the fieldName parameter must be the name of the item as it was specified in the instantiation of the struct or the name of the item as it was added using the Struct.add method.","pos":[147670,147871]},{"content":"The name must be enclosed in quotes (\" \").","pos":[147872,147914]},{"pos":[147921,147929],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a struct with two items in it and prints a description of these items.","pos":[147931,148031]},{"content":"One of the items is then removed by using the remove method.","pos":[148032,148092]},{"pos":[148558,148573],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that describes the contents of the struct.","pos":[148575,148634]},{"pos":[148668,148680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that describes the contents of the struct.","pos":[148682,148733]},{"pos":[148739,148751],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"content":"Gets or sets the value for a specified item in a struct.","pos":[148753,148809]},{"pos":[148874,148884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[148886,148895]},{"content":"The value to assign to the item; optional.","pos":[148898,148940]},{"content":"value","pos":[148952,148957]},{"content":"The value to assign to the item; optional.","pos":[148960,149002]},{"pos":[149009,149021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the specified item.","pos":[149023,149055]},{"pos":[149062,149069],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An exception is raised if there is no item with the specified name in the struct.","pos":[149071,149152]},{"content":"The name of an item in a struct may be retrieved by using the Struct.fieldName method.","pos":[149153,149239]},{"content":"You can add a new item to a struct and assign a value to it at the same time by using the Struct.add method.","pos":[149240,149348]},{"content":"To assign a new value to an item based on its position in the struct, use the Struct.valueIndex method.","pos":[149349,149452]},{"pos":[149459,149467],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a struct with two items in it and then uses the value method to assign values to those two items.","pos":[149469,149596]},{"pos":[149872,149889],"content":"Method valueImage","linkify":"Method valueImage","nodes":[{"content":"Method valueImage","pos":[0,17]}]},{"content":"Returns a string that describes the value of the item at a particular position in the struct.","pos":[149891,149984]},{"pos":[150029,150039],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[150041,150046]},{"content":"The position of the item that you want to return a description for.","pos":[150049,150116]},{"pos":[150123,150135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that describes the value of the item.","pos":[150137,150183]},{"pos":[150190,150197],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The items in a struct are in alphabetical order according to the names of the items.","pos":[150199,150283]},{"content":"If there is no item at the position specified by index, an exception is raised.","pos":[150284,150363]},{"pos":[150369,150386],"content":"Method valueIndex","linkify":"Method valueIndex","nodes":[{"content":"Method valueIndex","pos":[0,17]}]},{"content":"Gets or sets the value of the item at a specified position in a struct.","pos":[150388,150459]},{"pos":[150525,150535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[150537,150542]},{"content":"The value to assign to the item at the position specified by index; optional.","pos":[150545,150622]},{"content":"value","pos":[150634,150639]},{"content":"The value to assign to the item at the position specified by index; optional.","pos":[150642,150719]},{"pos":[150726,150738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the item at the position specified by index.","pos":[150740,150797]},{"pos":[150804,150811],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An exception is raised if there is no item at the position specified by index.","pos":[150813,150891]},{"content":"The position of an item in a struct can be retrieved by using the Struct.index method.","pos":[150892,150978]},{"pos":[150984,150994],"content":"Method xml","linkify":"Method xml","nodes":[{"content":"Method xml","pos":[0,10]}]},{"content":"Returns an XML string that represents the current object.","pos":[150996,151053]},{"pos":[151094,151104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"indent","pos":[151106,151112]},{"content":"The amount of indentation of the returned XML string; optional.","pos":[151115,151178]},{"pos":[151185,151197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An XML string that represents the current object.","pos":[151199,151248]},{"pos":[151255,151262],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be overridden to return values that are meaningful for that type.","pos":[151264,151345]},{"pos":[151351,151364],"content":"Method create","linkify":"Method create","nodes":[{"content":"Method create","pos":[0,13]}]},{"content":"Creates a struct from a container that is obtained from a prior call to Struct.pack.","pos":[151366,151450]},{"pos":[151511,151521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[151523,151532]},{"content":"A container that contains the packed struct.","pos":[151535,151579]},{"pos":[151586,151598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A struct equal to the one that was packed into the specified container.","pos":[151600,151671]},{"pos":[151678,151685],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the struct contains objects, these objects must have an unpack method that is called to re-establish their internal state from the container.","pos":[151687,151831]},{"pos":[151838,151846],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a struct with two items in it (name and age), and then adds values to the items.","pos":[151848,151958]},{"content":"The struct is packed into a container, and this container is then unpacked to create a new struct.","pos":[151959,152057]},{"pos":[152546,152566],"content":"Method createFromXML","linkify":"Method createFromXML","nodes":[{"content":"Method createFromXML","pos":[0,20]}]},{"pos":[152629,152639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"xmlnode","pos":[152641,152648]},{"pos":[152657,152669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152675,152687],"content":"Method equal","linkify":"Method equal","nodes":[{"content":"Method equal","pos":[0,12]}]},{"content":"Determines whether two structs are equal.","pos":[152689,152730]},{"pos":[152802,152812],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"struct1","pos":[152814,152821]},{"content":"The second of the two structs to be compared.","pos":[152824,152869]},{"content":"struct2","pos":[152881,152888]},{"content":"The second of the two structs to be compared.","pos":[152891,152936]},{"pos":[152943,152955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the structs are equal; otherwise, false.","pos":[152957,153005]},{"pos":[153012,153019],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Two structs are equal if they have the same number of fields, the field names are the same, and each field is the same type and has the same value.","pos":[153021,153168]},{"pos":[153174,153186],"content":"Method merge","linkify":"Method merge","nodes":[{"content":"Method merge","pos":[0,12]}]},{"content":"Combines two structs to create a new struct.","pos":[153188,153232]},{"pos":[153303,153313],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"struct1","pos":[153315,153322]},{"content":"The struct that will be added to the end of the first struct to create a new struct.","pos":[153325,153409]},{"content":"struct2","pos":[153421,153428]},{"content":"The struct that will be added to the end of the first struct to create a new struct.","pos":[153431,153515]},{"pos":[153522,153534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new struct.","pos":[153536,153551]},{"pos":[153558,153565],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"struct2 is added to the end of struct1.","pos":[153567,153606]},{"content":"This means that the order of the items in the new struct will be: all the items in struct1, arranged in alphabetical order of the item names, followed by all the items in struct2, arranged in alphabetical order of the item names.","pos":[153607,153836]},{"content":"If both structs contain an item with the same name, only the item from the first struct will be included.","pos":[153837,153942]},{"pos":[153949,153957],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates two structs called person and address, and then merges them into a new struct called allInfo.","pos":[153959,154082]},{"pos":[154629,154639],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a struct.","pos":[154641,154658]},{"pos":[154704,154714],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"specifier","pos":[154716,154725]},{"content":"One or more pairs that specify the data type of an item followed by the name of the item as a string.","pos":[154728,154829]},{"pos":[154836,154843],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The data type of the item can be specified using the name of a primitive data type or by using the system enum.","pos":[154845,154956]},{"content":"The items in a struct can be of any of the data types found in the Types system enum, including: string, integer, real, date, container, record, and class.","pos":[154957,155112]},{"content":"You can create a copy of a struct by using the Struct.definitionString method to create a new struct, as illustrated in the example below.","pos":[155113,155251]},{"content":"After you have created a struct, you can add new items using the Struct.add method and set the value of items in the struct by using the Struct.value or Struct.valueIndex method.","pos":[155252,155430]},{"pos":[155437,155445],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates two structs with the same definition and then adds 2 values and an additional item and value to one of them (s1).","pos":[155447,155590]},{"content":"This struct is then copied to create a new struct by using the Struct.definitionString method.","pos":[155591,155685]},{"pos":[156427,156461],"content":"Class SurrogateFKReplacementHelper","linkify":"Class SurrogateFKReplacementHelper","nodes":[{"content":"Class SurrogateFKReplacementHelper","pos":[0,34]}]},{"pos":[156521,156528],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[156534,156542],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[156548,156555],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[156559,156565]},{"content":"Description","pos":[156772,156783]},{"content":"public Map addDefaultRequiredJoins(QueryBuildDataSource foreignKeyQueryBuildDataSource, str replacementFieldGroupName)","pos":[157089,157207]},{"content":"public Map addRequiredJoins(List requiredJoinsAsRelationPathList, QueryBuildDataSource foreignKeyQueryBuildDataSource, str replacementFieldGroupName)","pos":[157354,157503]},{"content":"public List displayBindings(str replacementFieldGroupName, <ph id=\"ph1\">\\[</ph>boolean distinctBindingsOnly<ph id=\"ph2\">\\]</ph>)","pos":[157619,157711],"source":"public List displayBindings(str replacementFieldGroupName, \\[boolean distinctBindingsOnly\\])"},{"content":"public List displayValuesFromQueryRun(QueryRun queryRun, str replacementFieldGroupName, <ph id=\"ph1\">\\[</ph>boolean isRootPrimaryKeyDataSource<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean trimSecuredValues<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean distinctBindingsOnly<ph id=\"ph6\">\\]</ph>)","pos":[157884,158076],"source":"public List displayValuesFromQueryRun(QueryRun queryRun, str replacementFieldGroupName, \\[boolean isRootPrimaryKeyDataSource\\], \\[boolean trimSecuredValues\\], \\[boolean distinctBindingsOnly\\])"},{"content":"public List displayValuesFromRecID(Int64 recIDValue, str replacementFieldGroupName, <ph id=\"ph1\">\\[</ph>boolean trimSecuredValues<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean distinctBindingsOnly<ph id=\"ph4\">\\]</ph>)","pos":[158149,158297],"source":"public List displayValuesFromRecID(Int64 recIDValue, str replacementFieldGroupName, \\[boolean trimSecuredValues\\], \\[boolean distinctBindingsOnly\\])"},{"content":"public List displayValuesFromRootDS(QueryBuildDataSource rootQueryBuildDataSource, boolean isPrimaryKeyDataSource, str replacementFieldGroupName, <ph id=\"ph1\">\\[</ph>boolean trimSecuredValues<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean distinctBindingsOnly<ph id=\"ph4\">\\]</ph>)","pos":[158414,158624],"source":"public List displayValuesFromRootDS(QueryBuildDataSource rootQueryBuildDataSource, boolean isPrimaryKeyDataSource, str replacementFieldGroupName, \\[boolean trimSecuredValues\\], \\[boolean distinctBindingsOnly\\])"},{"content":"public FilterValue displayValue(Common resolvedCursor, FieldBinding displayBinding, <ph id=\"ph1\">\\[</ph>boolean isRootPrimaryKeyDataSource<ph id=\"ph2\">\\]</ph>)","pos":[158679,158802],"source":"public FilterValue displayValue(Common resolvedCursor, FieldBinding displayBinding, \\[boolean isRootPrimaryKeyDataSource\\])"},{"content":"public str extendedDataType()","pos":[158944,158973]},{"content":"public Query generateResolveReferenceQuery(List requiredJoinsAsRelationPathList, List filterValuesAsFilterValueList)","pos":[159209,159325]},{"content":"public boolean isResolvedReferenceAmbiguous(Query query)","pos":[159474,159530]},{"content":"public str primaryKeyTableName()","pos":[159739,159771]},{"content":"public Map queryBuildDataSourceBindingsForQuery(Query query, str replacementFieldGroupName, <ph id=\"ph1\">\\[</ph>boolean isRootPrimaryKeyDataSource<ph id=\"ph2\">\\]</ph>)","pos":[160004,160135],"source":"public Map queryBuildDataSourceBindingsForQuery(Query query, str replacementFieldGroupName, \\[boolean isRootPrimaryKeyDataSource\\])"},{"content":"public Map queryBuildDataSourceBindingsForRootDS(QueryBuildDataSource rootQueryBuildDataSource, boolean isPrimaryKeyDataSource, str replacementFieldGroupName)","pos":[160269,160427]},{"content":"public Common resolveReference(Query query, <ph id=\"ph1\">\\[</ph>boolean ignoreAmbiguousReference<ph id=\"ph2\">\\]</ph>)","pos":[160534,160615],"source":"public Common resolveReference(Query query, \\[boolean ignoreAmbiguousReference\\])"},{"content":"public FieldBinding surrogateForeignKeyFieldBinding()","pos":[160799,160852]},{"content":"::public static SurrogateFKReplacementHelper construct(FieldBinding surrogateForeignKeyBinding)","pos":[161064,161159]},{"content":"::public static SurrogateFKReplacementHelper constructForEDT(str edtName)","pos":[161329,161402]},{"content":"::public static SurrogateFKReplacementHelper constructForPKTable(str pkTableName)","pos":[161594,161675]},{"content":"::public static str defaultPrimaryKeyQueryDataSourceName()","pos":[161859,161917]},{"content":"::public static str DEPRECATED<ph id=\"ph1\">\\_</ph>WorkflowCaption(str tableName, str fieldName, Int64 recIDValue)","pos":[162124,162219],"source":"::public static str DEPRECATED\\_WorkflowCaption(str tableName, str fieldName, Int64 recIDValue)"},{"content":"::public static str implicitReplacementFieldGroupName()","pos":[162389,162444]},{"content":"private void new(FieldBinding surrogateForeignKeyBinding)","pos":[162654,162711]},{"content":"Initializes a new instance of the Object class.","pos":[162867,162914]},{"pos":[162922,162952],"content":"Method addDefaultRequiredJoins","linkify":"Method addDefaultRequiredJoins","nodes":[{"content":"Method addDefaultRequiredJoins","pos":[0,30]}]},{"pos":[163083,163093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"foreignKeyQueryBuildDataSource","pos":[163095,163125]},{"content":"replacementFieldGroupName","pos":[163139,163164]},{"pos":[163173,163185],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[163191,163214],"content":"Method addRequiredJoins","linkify":"Method addRequiredJoins","nodes":[{"content":"Method addRequiredJoins","pos":[0,23]}]},{"pos":[163376,163386],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"requiredJoinsAsRelationPathList","pos":[163388,163419]},{"content":"foreignKeyQueryBuildDataSource","pos":[163433,163463]},{"content":"replacementFieldGroupName","pos":[163477,163502]},{"pos":[163511,163523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[163529,163551],"content":"Method displayBindings","linkify":"Method displayBindings","nodes":[{"content":"Method displayBindings","pos":[0,22]}]},{"pos":[163654,163664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"replacementFieldGroupName","pos":[163666,163691]},{"content":"distinctBindingsOnly","pos":[163705,163725]},{"pos":[163734,163746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[163752,163784],"content":"Method displayValuesFromQueryRun","linkify":"Method displayValuesFromQueryRun","nodes":[{"content":"Method displayValuesFromQueryRun","pos":[0,32]}]},{"pos":[163983,163993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"queryRun","pos":[163995,164003]},{"content":"replacementFieldGroupName","pos":[164017,164042]},{"content":"isRootPrimaryKeyDataSource","pos":[164056,164082]},{"content":"trimSecuredValues","pos":[164096,164113]},{"content":"distinctBindingsOnly","pos":[164127,164147]},{"pos":[164156,164168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[164174,164203],"content":"Method displayValuesFromRecID","linkify":"Method displayValuesFromRecID","nodes":[{"content":"Method displayValuesFromRecID","pos":[0,29]}]},{"pos":[164360,164370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recIDValue","pos":[164372,164382]},{"content":"replacementFieldGroupName","pos":[164396,164421]},{"content":"trimSecuredValues","pos":[164435,164452]},{"content":"distinctBindingsOnly","pos":[164466,164486]},{"pos":[164495,164507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[164513,164543],"content":"Method displayValuesFromRootDS","linkify":"Method displayValuesFromRootDS","nodes":[{"content":"Method displayValuesFromRootDS","pos":[0,30]}]},{"pos":[164762,164772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"rootQueryBuildDataSource","pos":[164774,164798]},{"content":"isPrimaryKeyDataSource","pos":[164812,164834]},{"content":"replacementFieldGroupName","pos":[164848,164873]},{"content":"trimSecuredValues","pos":[164887,164904]},{"content":"distinctBindingsOnly","pos":[164918,164938]},{"pos":[164947,164959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[164965,164984],"content":"Method displayValue","linkify":"Method displayValue","nodes":[{"content":"Method displayValue","pos":[0,19]}]},{"pos":[165118,165128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"resolvedCursor","pos":[165130,165144]},{"content":"displayBinding","pos":[165158,165172]},{"content":"isRootPrimaryKeyDataSource","pos":[165186,165212]},{"pos":[165221,165233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165239,165262],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[165304,165316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165322,165358],"content":"Method generateResolveReferenceQuery","linkify":"Method generateResolveReferenceQuery","nodes":[{"content":"Method generateResolveReferenceQuery","pos":[0,36]}]},{"pos":[165487,165497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"requiredJoinsAsRelationPathList","pos":[165499,165530]},{"content":"filterValuesAsFilterValueList","pos":[165544,165573]},{"pos":[165582,165594],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165600,165635],"content":"Method isResolvedReferenceAmbiguous","linkify":"Method isResolvedReferenceAmbiguous","nodes":[{"content":"Method isResolvedReferenceAmbiguous","pos":[0,35]}]},{"pos":[165704,165714],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"query","pos":[165716,165721]},{"pos":[165730,165742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165748,165774],"content":"Method primaryKeyTableName","linkify":"Method primaryKeyTableName","nodes":[{"content":"Method primaryKeyTableName","pos":[0,26]}]},{"pos":[165819,165831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165837,165880],"content":"Method queryBuildDataSourceBindingsForQuery","linkify":"Method queryBuildDataSourceBindingsForQuery","nodes":[{"content":"Method queryBuildDataSourceBindingsForQuery","pos":[0,43]}]},{"pos":[166022,166032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"query","pos":[166034,166039]},{"content":"replacementFieldGroupName","pos":[166053,166078]},{"content":"isRootPrimaryKeyDataSource","pos":[166092,166118]},{"pos":[166127,166139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166145,166189],"content":"Method queryBuildDataSourceBindingsForRootDS","linkify":"Method queryBuildDataSourceBindingsForRootDS","nodes":[{"content":"Method queryBuildDataSourceBindingsForRootDS","pos":[0,44]}]},{"pos":[166360,166370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"rootQueryBuildDataSource","pos":[166372,166396]},{"content":"isPrimaryKeyDataSource","pos":[166410,166432]},{"content":"replacementFieldGroupName","pos":[166446,166471]},{"pos":[166480,166492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166498,166521],"content":"Method resolveReference","linkify":"Method resolveReference","nodes":[{"content":"Method resolveReference","pos":[0,23]}]},{"pos":[166613,166623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"query","pos":[166625,166630]},{"content":"ignoreAmbiguousReference","pos":[166644,166668]},{"pos":[166677,166689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166695,166733],"content":"Method surrogateForeignKeyFieldBinding","linkify":"Method surrogateForeignKeyFieldBinding","nodes":[{"content":"Method surrogateForeignKeyFieldBinding","pos":[0,38]}]},{"pos":[166799,166811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166817,166833],"content":"Method construct","linkify":"Method construct","nodes":[{"content":"Method construct","pos":[0,16]}]},{"pos":[166939,166949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"surrogateForeignKeyBinding","pos":[166951,166977]},{"pos":[166986,166998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167004,167026],"content":"Method constructForEDT","linkify":"Method constructForEDT","nodes":[{"content":"Method constructForEDT","pos":[0,22]}]},{"pos":[167110,167120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"edtName","pos":[167122,167129]},{"pos":[167138,167150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167156,167182],"content":"Method constructForPKTable","linkify":"Method constructForPKTable","nodes":[{"content":"Method constructForPKTable","pos":[0,26]}]},{"pos":[167274,167284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pkTableName","pos":[167286,167297]},{"pos":[167306,167318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167324,167367],"content":"Method defaultPrimaryKeyQueryDataSourceName","linkify":"Method defaultPrimaryKeyQueryDataSourceName","nodes":[{"content":"Method defaultPrimaryKeyQueryDataSourceName","pos":[0,43]}]},{"pos":[167436,167448],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167454,167488],"content":"Method DEPRECATED\\_WorkflowCaption","linkify":"Method DEPRECATED\\_WorkflowCaption","nodes":[{"content":"Method DEPRECATED<ph id=\"ph1\">\\_</ph>WorkflowCaption","pos":[0,34],"source":"Method DEPRECATED\\_WorkflowCaption"}]},{"pos":[167593,167603],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableName","pos":[167605,167614]},{"content":"fieldName","pos":[167628,167637]},{"content":"recIDValue","pos":[167651,167661]},{"pos":[167670,167682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167688,167728],"content":"Method implicitReplacementFieldGroupName","linkify":"Method implicitReplacementFieldGroupName","nodes":[{"content":"Method implicitReplacementFieldGroupName","pos":[0,40]}]},{"pos":[167794,167806],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167812,167822],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[167824,167871]},{"pos":[167941,167951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"surrogateForeignKeyBinding","pos":[167953,167979]},{"pos":[167986,168012],"content":"Class SysGlobalObjectCache","linkify":"Class SysGlobalObjectCache","nodes":[{"content":"Class SysGlobalObjectCache","pos":[0,26]}]},{"pos":[168064,168071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[168077,168085],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[168091,168098],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[168102,168108]},{"content":"Description","pos":[168185,168196]},{"content":"public container find(GlobalObjectCacheScope scope, container key)","pos":[168400,168466]},{"content":"public void finalize()","pos":[168549,168571]},{"content":"public void remove(GlobalObjectCacheScope scope, container key)","pos":[168698,168761]},{"content":"public void print(GlobalObjectCacheScope scope)","pos":[168847,168894]},{"content":"public void clear(GlobalObjectCacheScope scope)","pos":[168996,169043]},{"content":"::public static void clearAllCaches()","pos":[169145,169182]},{"content":"public void new()","pos":[169294,169311]},{"content":"Initializes a new instance of the SysGlobalObjectCache class.","pos":[169377,169438]},{"content":"public void insert(GlobalObjectCacheScope scope, container key, container value)","pos":[169443,169523]},{"pos":[169595,169606],"content":"Method find","linkify":"Method find","nodes":[{"content":"Method find","pos":[0,11]}]},{"pos":[169685,169695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"scope","pos":[169697,169702]},{"content":"key","pos":[169716,169719]},{"pos":[169728,169740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169746,169761],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[169795,169808],"content":"Method remove","linkify":"Method remove","nodes":[{"content":"Method remove","pos":[0,13]}]},{"pos":[169884,169894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"scope","pos":[169896,169901]},{"content":"key","pos":[169915,169918]},{"pos":[169926,169938],"content":"Method print","linkify":"Method print","nodes":[{"content":"Method print","pos":[0,12]}]},{"pos":[169998,170008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"scope","pos":[170010,170015]},{"pos":[170023,170035],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"pos":[170095,170105],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"scope","pos":[170107,170112]},{"pos":[170120,170141],"content":"Method clearAllCaches","linkify":"Method clearAllCaches","nodes":[{"content":"Method clearAllCaches","pos":[0,21]}]},{"pos":[170188,170198],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the SysGlobalObjectCache class.","pos":[170200,170261]},{"pos":[170290,170303],"content":"Method insert","linkify":"Method insert","nodes":[{"content":"Method insert","pos":[0,13]}]},{"pos":[170396,170406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"scope","pos":[170408,170413]},{"content":"key","pos":[170427,170430]},{"content":"value","pos":[170444,170449]},{"pos":[170456,170475],"content":"Class SystemMonitor","linkify":"Class SystemMonitor","nodes":[{"content":"Class SystemMonitor","pos":[0,19]}]},{"pos":[170520,170527],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[170533,170541],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[170547,170554],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[170558,170564]},{"content":"Description","pos":[170630,170641]},{"content":"::public static container allClientCounters()","pos":[170820,170865]},{"content":"::public static container allServerCounters()","pos":[170951,170996]},{"content":"::public static int getClientCounter(SystemMonitorCounter counter)","pos":[171082,171148]},{"content":"::public static container getClientInternals()","pos":[171213,171259]},{"content":"::public static int getCounter(SystemMonitorCounter counter)","pos":[171344,171404]},{"content":"::public static int getServerCounter(SystemMonitorCounter counter)","pos":[171475,171541]},{"content":"::public static container getServerInternals()","pos":[171606,171652]},{"content":"::public static boolean isRunning()","pos":[171737,171772]},{"content":"::public static boolean isServerCounter(SystemMonitorCounter counter)","pos":[171868,171937]},{"content":"::public static container sqlDump()","pos":[171999,172034]},{"content":"::public static void systemDump(boolean includeSQL)","pos":[172130,172181]},{"content":"::public static void start()","pos":[172261,172289]},{"content":"::public static void resetServer()","pos":[172392,172426]},{"content":"::public static void stop()","pos":[172523,172550]},{"content":"public void new()","pos":[172654,172671]},{"content":"Initializes a new instance of the SystemMonitor class.","pos":[172726,172780]},{"content":"public void finalize()","pos":[172785,172807]},{"content":"::public static void reset()","pos":[172916,172944]},{"content":"::public static void resetClient()","pos":[173047,173081]},{"pos":[173181,173205],"content":"Method allClientCounters","linkify":"Method allClientCounters","nodes":[{"content":"Method allClientCounters","pos":[0,24]}]},{"pos":[173261,173273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173279,173303],"content":"Method allServerCounters","linkify":"Method allServerCounters","nodes":[{"content":"Method allServerCounters","pos":[0,24]}]},{"pos":[173359,173371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173377,173400],"content":"Method getClientCounter","linkify":"Method getClientCounter","nodes":[{"content":"Method getClientCounter","pos":[0,23]}]},{"pos":[173477,173487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"counter","pos":[173489,173496]},{"pos":[173505,173517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173523,173548],"content":"Method getClientInternals","linkify":"Method getClientInternals","nodes":[{"content":"Method getClientInternals","pos":[0,25]}]},{"pos":[173605,173617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173623,173640],"content":"Method getCounter","linkify":"Method getCounter","nodes":[{"content":"Method getCounter","pos":[0,17]}]},{"pos":[173711,173721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"counter","pos":[173723,173730]},{"pos":[173739,173751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173757,173780],"content":"Method getServerCounter","linkify":"Method getServerCounter","nodes":[{"content":"Method getServerCounter","pos":[0,23]}]},{"pos":[173857,173867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"counter","pos":[173869,173876]},{"pos":[173885,173897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173903,173928],"content":"Method getServerInternals","linkify":"Method getServerInternals","nodes":[{"content":"Method getServerInternals","pos":[0,25]}]},{"pos":[173985,173997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174003,174019],"content":"Method isRunning","linkify":"Method isRunning","nodes":[{"content":"Method isRunning","pos":[0,16]}]},{"pos":[174065,174077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174083,174105],"content":"Method isServerCounter","linkify":"Method isServerCounter","nodes":[{"content":"Method isServerCounter","pos":[0,22]}]},{"pos":[174185,174195],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"counter","pos":[174197,174204]},{"pos":[174213,174225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174231,174245],"content":"Method sqlDump","linkify":"Method sqlDump","nodes":[{"content":"Method sqlDump","pos":[0,14]}]},{"pos":[174291,174303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174309,174326],"content":"Method systemDump","linkify":"Method systemDump","nodes":[{"content":"Method systemDump","pos":[0,17]}]},{"pos":[174388,174398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"includeSQL","pos":[174400,174410]},{"pos":[174418,174430],"content":"Method start","linkify":"Method start","nodes":[{"content":"Method start","pos":[0,12]}]},{"pos":[174468,174486],"content":"Method resetServer","linkify":"Method resetServer","nodes":[{"content":"Method resetServer","pos":[0,18]}]},{"pos":[174530,174541],"content":"Method stop","linkify":"Method stop","nodes":[{"content":"Method stop","pos":[0,11]}]},{"pos":[174578,174588],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the SystemMonitor class.","pos":[174590,174644]},{"pos":[174673,174688],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[174722,174734],"content":"Method reset","linkify":"Method reset","nodes":[{"content":"Method reset","pos":[0,12]}]},{"pos":[174772,174790],"content":"Method resetClient","linkify":"Method resetClient","nodes":[{"content":"Method resetClient","pos":[0,18]}]},{"pos":[174833,174853],"content":"Class systemSequence","linkify":"Class systemSequence","nodes":[{"content":"Class systemSequence","pos":[0,20]}]},{"content":"The systemSequence class takes manual control of the system sequence generator and delivers unique RecIds for all SQL tables.","pos":[174895,175020]},{"pos":[175026,175033],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When records are inserted into SQL tables, a unique RecId is assigned to each record—regardless of the company each record is associated with.","pos":[175035,175177]},{"content":"Use extreme caution when you use this class—data integrity could be destroyed.","pos":[175178,175256]},{"content":"This class is typically used for data import or export routines, or for very large jobs.","pos":[175257,175345]},{"content":"The record ID is an int64 data type value.","pos":[175346,175388]},{"content":"The range in which record IDs are allocated is from 5637144576 to 2^63 (9223372036854775808).","pos":[175389,175482]},{"content":"RecIds can be used up prematurely if large, unused ranges of RecIds are created.","pos":[175483,175563]},{"content":"Reclaiming unused ranges of RecIds that lie between used ranges of RecIds is a very complicated process.","pos":[175564,175668]},{"pos":[175674,175682],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example reserves the int64max value for the CustTable table.","pos":[175684,175758]},{"pos":[176300,176307],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[176311,176317]},{"content":"Description","pos":[176380,176391]},{"content":"public Int64 flushValues(TableId tableId)","pos":[176713,176754]},{"content":"Flushes the reserved recIds from the System Sequence cache for a given table","pos":[176782,176858]},{"content":"public Int64 reserveTransids(Int64 nReserved, <ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[176914,176980],"source":"public Int64 reserveTransids(Int64 nReserved, \\[TableId tableId\\])"},{"content":"public Int64 reserveValues(Int64 nReserved, TableId tableId)","pos":[177115,177175]},{"content":"Preallocates a range of recIds that can be allocated to new records when the automatic assignment of recIds has been suspended.","pos":[177184,177311]},{"content":"public void suspendTransIds(TableId tableId)","pos":[177316,177360]},{"content":"public void suspendRecIds(TableId tableId)","pos":[177517,177559]},{"content":"public void removeRecIdSuspension(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[177718,177772],"source":"public void removeRecIdSuspension(\\[TableId tableId\\])"},{"content":"public void new()","pos":[177919,177936]},{"content":"Initializes a new instance of the systemSequence class.","pos":[177988,178043]},{"content":"public void removeTransIdSuspension(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[178120,178176],"source":"public void removeTransIdSuspension(\\[TableId tableId\\])"},{"pos":[178324,178342],"content":"Method flushValues","linkify":"Method flushValues","nodes":[{"content":"Method flushValues","pos":[0,18]}]},{"content":"Flushes the reserved recIds from the System Sequence cache for a given table","pos":[178344,178420]},{"pos":[178474,178484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[178486,178493]},{"pos":[178502,178514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of recIds flushed from the cache.","pos":[178516,178560]},{"pos":[178567,178574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Subsequent inserts on the table reserve the recIds for the table and System Sequence cache is populated with the reserved range of recIds for the table.","pos":[178576,178728]},{"pos":[178734,178756],"content":"Method reserveTransids","linkify":"Method reserveTransids","nodes":[{"content":"Method reserveTransids","pos":[0,22]}]},{"pos":[178833,178843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nReserved","pos":[178845,178854]},{"content":"tableId","pos":[178868,178875]},{"pos":[178884,178896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178902,178922],"content":"Method reserveValues","linkify":"Method reserveValues","nodes":[{"content":"Method reserveValues","pos":[0,20]}]},{"content":"Preallocates a range of recIds that can be allocated to new records when the automatic assignment of recIds has been suspended.","pos":[178924,179051]},{"pos":[179124,179134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nReserved","pos":[179136,179145]},{"content":"tableId","pos":[179159,179166]},{"pos":[179175,179187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first usable reserved recId.","pos":[179189,179221]},{"pos":[179228,179235],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The range of recIds that you reserved are reserved immediately.","pos":[179237,179300]},{"pos":[179306,179328],"content":"Method suspendTransIds","linkify":"Method suspendTransIds","nodes":[{"content":"Method suspendTransIds","pos":[0,22]}]},{"pos":[179385,179395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[179397,179404]},{"pos":[179412,179432],"content":"Method suspendRecIds","linkify":"Method suspendRecIds","nodes":[{"content":"Method suspendRecIds","pos":[0,20]}]},{"pos":[179487,179497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[179499,179506]},{"pos":[179514,179542],"content":"Method removeRecIdSuspension","linkify":"Method removeRecIdSuspension","nodes":[{"content":"Method removeRecIdSuspension","pos":[0,28]}]},{"pos":[179607,179617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[179619,179626]},{"pos":[179634,179644],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the systemSequence class.","pos":[179646,179701]},{"pos":[179730,179760],"content":"Method removeTransIdSuspension","linkify":"Method removeTransIdSuspension","nodes":[{"content":"Method removeTransIdSuspension","pos":[0,30]}]},{"pos":[179827,179837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[179839,179846]}]}